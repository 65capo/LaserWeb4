{"version":3,"sources":["webpack:///d0f1c55809dfbbfeb7ad.worker.js","webpack:///webpack/bootstrap d0f1c55809dfbbfeb7ad","webpack:///./lib/workers/cam-lasercut.js","webpack:///../~/gl-matrix/src/gl-matrix/common.js","webpack:///../~/poly2tri/src/xy.js","webpack:///./lib/mesh.js","webpack:///../~/clipper-lib/clipper.js","webpack:///../~/gl-matrix/src/gl-matrix/mat3.js","webpack:///../~/gl-matrix/src/gl-matrix/vec3.js","webpack:///../~/gl-matrix/src/gl-matrix/vec4.js","webpack:///../~/poly2tri/src/advancingfront.js","webpack:///../~/poly2tri/src/pointerror.js","webpack:///../~/poly2tri/src/triangle.js","webpack:///./lib/cam-gcode-laser-cut.js","webpack:///./lib/cam.js","webpack:///../~/eve/eve.js","webpack:///../~/gl-matrix/src/gl-matrix.js","webpack:///../~/gl-matrix/src/gl-matrix/mat2.js","webpack:///../~/gl-matrix/src/gl-matrix/mat2d.js","webpack:///../~/gl-matrix/src/gl-matrix/mat4.js","webpack:///../~/gl-matrix/src/gl-matrix/quat.js","webpack:///../~/gl-matrix/src/gl-matrix/vec2.js","webpack:///../~/poly2tri/src/assert.js","webpack:///../~/poly2tri/src/point.js","webpack:///../~/poly2tri/src/sweep.js","webpack:///../~/poly2tri/src/sweepcontext.js","webpack:///../~/poly2tri/src/utils.js","webpack:///../~/web-cam-cpp/web-cam-cpp.js","webpack:///../~/script-loader/addScript.js","webpack:///../~/web-cam-cpp/web-cam-cpp.js?5b9f","webpack:///../~/snapsvg-cjs/dist/snap.svg-cjs.js"],"names":["modules","hotCreateRequire","moduleId","ensure","chunkId","callback","hotStatus","hotSetStatus","hotChunksLoading","__webpack_require__","e","finishChunkLoading","hotWaitingFilesMap","hotEnsureUpdateChunk","hotWaitingFiles","hotUpdateDownloaded","call","fn","me","installedModules","request","hot","active","parents","indexOf","push","children","hotCurrentParents","console","warn","name","Object","prototype","hasOwnProperty","canDefineProperty","defineProperty","configurable","enumerable","get","set","value","hotCreateModule","_acceptedDependencies","_declinedDependencies","_selfAccepted","_selfDeclined","_disposeHandlers","accept","dep","i","length","decline","dispose","addDisposeHandler","removeDisposeHandler","idx","splice","check","hotCheck","apply","hotApply","status","l","hotStatusHandlers","addStatusHandler","removeStatusHandler","data","hotCurrentModuleData","newStatus","toModuleId","id","isNumber","Error","hotApplyOnUpdate","err","hotDownloadManifest","update","hotRequestedFilesMap","hotAvailibleFilesMap","c","hotUpdateNewHash","h","hotCallback","hotUpdate","hotDownloadUpdateChunk","outdatedModules","options","getAffectedStuff","module","outdatedDependencies","queue","slice","pop","parentId","parent","addAllToSet","a","b","item","appliedUpdate","result","ignoreUnaccepted","outdatedSelfAcceptedModules","errorHandler","disposeHandlers","j","cb","child","moduleOutdatedDependencies","dependency","hotCurrentHash","error","callbacks","exports","loaded","x","m","p","_camGcodeLaserCut","onmessage","event","_event$data","settings","opIndex","op","_event$data$geometry","geometry","undefined","_event$data$openGeome","openGeometry","_event$data$tabGeomet","tabGeometry","errors","showAlert","message","level","progress","postMessage","JSON","stringify","gcode","done","self","close","getLaserCutGcodeFromOp","__REACT_HOT_LOADER__","glMatrix","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","ENABLE_SIMD","SIMD_AVAILABLE","this","USE_SIMD","setMatrixArrayType","type","degree","PI","toRadian","equals","abs","max","toStringBase","y","toString","s","compare","_interopRequireDefault","obj","__esModule","default","linearizeCubicBezier","p1x","p1y","c1x","c1y","c2x","c2y","p2x","p2y","minNumSegments","minSegmentLength","bez","p0","p1","p2","p3","t","numSegments","nextX","nextY","linearizeSnapPath","path","alertFn","subpath","elementToLinearSnapPaths","element","Snap","snapElement","attr","Number","w","map","transform","globalMatrix","parsePathString","snapPathToRawPaths","snapPath","pxPerInch","factor","currentPath","elementToRawPaths","flipY","allRawPaths","deltaY","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","rawPaths","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","rawPath","return","hasClosedRawPaths","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","filterClosedRawPaths","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","rawPathsToClipperPaths","scaleX","scaleY","translateX","translateY","X","mmToClipperScale","Y","_clipperLib2","Clipper","CleanPolygons","cleanPolyDist","SimplifyPolygons","PolyFillType","pftEvenOdd","clipperPathsToPolyTree","paths","AddPaths","PolyType","ptSubject","polyTree","PolyTree","Execute","ClipType","ctUnion","triangulatePolyTree","pointToVertex","point","contourToVertexes","nodesToVertexes","nodes","node","Contour","processNode","vertexes","holes","Childs","context","_sweepcontext2","addHoles","triangulate","triangles","getTriangles","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","getPoints","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","hole","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","triangulateRawPaths","clipperPathsToCPaths","memoryBlocks","clipperPaths","doubleSize","cPaths","Module","_malloc","cPathsBase","cPathSizes","cPathSizesBase","clipperPath","cPath","pathArray","Float64Array","HEAPU32","buffer","byteOffset","clipperToCppScale","cPathsToClipperPaths","cPathsRef","cNumPathsRef","cPathSizesRef","cNumPaths","pathSize","cPathsToCamPaths","convertedPaths","convertedPath","safeToClose","Z","clipperBounds","minX","MAX_VALUE","minY","maxX","maxY","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","pt","min","clip","paths1","paths2","clipType","clipper","ptClip","union","diff","ctDifference","xor","ctXor","offset","amount","joinType","endType","JoinType","jtRound","EndType","etClosedPolygon","jtSquare","jtMiter","co","ClipperOffset","arcTolerance","offsetted","inchToClipperScale","_clipperLib","_sweepcontext","register","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","BigInteger","ClipperLib","biginteger_used","fromInt","fromNumber","fromString","nbi","am1","n","v","floor","am2","xl","xh","am3","int2char","BI_RM","charAt","intAt","BI_RC","charCodeAt","bnpCopyTo","r","bnpFromInt","DV","nbv","bnpFromString","k","fromRadix","mi","sh","DB","clamp","ZERO","subTo","bnpClamp","DM","bnToString","negate","toRadix","d","km","bnNegate","bnAbs","bnCompareTo","nbits","bnBitLength","bnpDLShiftTo","bnpDRShiftTo","bnpLShiftTo","bs","cbs","bm","ds","bnpRShiftTo","bnpSubTo","bnpMultiplyTo","am","bnpSquareTo","bnpDivRemTo","q","pm","copyTo","ts","ms","nsh","lShiftTo","ys","y0","yt","F1","F2","d1","FV","d2","dlShiftTo","compareTo","ONE","qd","drShiftTo","rShiftTo","bnMod","divRemTo","Classic","cConvert","mod","cRevert","cReduce","cMulTo","multiplyTo","reduce","cSqrTo","squareTo","bnpInvDigit","Montgomery","mp","invDigit","mpl","mph","um","mt2","montConvert","montRevert","montReduce","u0","montSqrTo","montMulTo","bnpIsEven","bnpExp","z","r2","g","convert","sqrTo","mulTo","revert","bnModPowInt","isEven","exp","bnClone","bnIntValue","bnByteValue","bnShortValue","bnpChunkSize","LN2","log","bnSigNum","bnpToRadix","signum","cs","chunkSize","pow","intValue","substr","bnpFromRadix","dMultiply","dAddOffset","bnpFromNumber","testBit","bitwiseTo","shiftLeft","op_or","isProbablePrime","bitLength","nextBytes","bnToByteArray","bnEquals","bnMin","bnMax","bnpBitwiseTo","f","op_and","bnAnd","bnOr","op_xor","bnXor","op_andnot","bnAndNot","bnNot","bnShiftLeft","bnShiftRight","lbit","bnGetLowestSetBit","cbit","bnBitCount","bnTestBit","bnpChangeBit","bnSetBit","changeBit","bnClearBit","bnFlipBit","bnpAddTo","bnAdd","addTo","bnSubtract","bnMultiply","bnSquare","bnDivide","bnRemainder","bnDivideAndRemainder","bnpDMultiply","bnpDAddOffset","NullExp","nNop","nMulTo","nSqrTo","bnPow","bnpMultiplyLowerTo","bnpMultiplyUpperTo","Barrett","q3","mu","divide","barrettConvert","barrettRevert","barrettReduce","multiplyUpperTo","multiplyLowerTo","barrettSqrTo","barrettMulTo","bnModPow","k1","g2","is1","bnGCD","clone","getLowestSetBit","bnpModInt","bnModInverse","ac","u","subtract","add","bnIsProbablePrime","lowprimes","lplim","modInt","millerRabin","bnpMillerRabin","n1","shiftRight","modPow","modPowInt","use_int32","use_xyz","use_lines","isNode","window","navigator_appName","nav","navigator","userAgent","toLowerCase","appName","browser","chrome","chromium","safari","firefox","firefox17","firefox15","firefox3","opera","msie10","msie9","msie8","msie7","msie","dbits","canary","j_lm","BI_FP","rr","vv","byteValue","shortValue","toByteArray","and","or","andNot","not","bitCount","setBit","clearBit","flipBit","multiply","remainder","divideAndRemainder","modInverse","gcd","square","Int128","IsNegative","op_Equality","val1","val2","op_Inequality","op_GreaterThan","op_LessThan","op_Addition","lhs","rhs","op_Subtraction","Int128Mul","op_Division","ToDouble","parseFloat","Inherit","ce","ce2","$baseCtor","props","getOwnPropertyNames","getOwnPropertyDescriptor","Path","Paths","DoublePoint","arguments","DoublePoint0","DoublePoint1","dp","DoublePoint2","PolyNode","m_Parent","m_polygon","m_Index","m_jointype","m_endtype","m_Childs","IsOpen","IsHoleNode","ChildCount","AddChild","Child","cnt","GetNext","GetNextSiblingUp","Parent","IsHole","m_AllPolys","Clear","ilen","GetFirst","Total","Math_Abs_Int64","Math_Abs_Int32","Math_Abs_Double","Math_Max_Int32_Int32","Cast_Int32","Cast_Int64","ceil","toInteger","parseInt","PI2","IntPoint","alen","Round","IntPoint0","IntPoint1","IntPoint1dp","IntPoint2","IntPoint3","IntRect","left","top","right","bottom","ir","IntRect0","IntRect1","IntRect4","ctIntersection","pftNonZero","pftPositive","pftNegative","etOpenSquare","etOpenRound","etOpenButt","etClosedLine","EdgeSide","esLeft","esRight","Direction","dRightToLeft","dLeftToRight","TEdge","Bot","Curr","Top","Delta","Dx","PolyTyp","Side","WindDelta","WindCnt","WindCnt2","OutIdx","Next","Prev","NextInLML","NextInAEL","PrevInAEL","NextInSEL","PrevInSEL","IntersectNode","Edge1","Edge2","Pt","MyIntersectNodeSort","Compare","node1","node2","LocalMinima","LeftBound","RightBound","Scanbeam","OutRec","Idx","FirstLeft","Pts","BottomPt","OutPt","Join","OutPt1","OutPt2","OffPt","ClipperBase","m_MinimaList","m_CurrentLM","m_edges","m_UseFullRange","m_HasOpenPaths","PreserveCollinear","horizontal","Skip","Unassigned","tolerance","loRange","hiRange","near_zero","val","IsHorizontal","PointIsVertex","pp","pp2","PointOnLineSegment","linePt1","linePt2","UseFullRange","PointOnPolygon","SlopesEqual","e1","e2","pt1","pt2","pt3","pt4","SlopesEqual3","SlopesEqual4","SlopesEqual5","DisposeLocalMinimaList","jlen","tmpLm","RangeTest","useFullRange","Value","InitEdge","eNext","ePrev","InitEdge2","polyType","SetDx","FindNextLocMin","E","E2","ProcessBound","LeftBoundIsForward","EStart","Horz","Result","locMin","InsertLocalMinima","ReverseHorizontal","AddPath","pg","Closed","highI","edges","IsFlat","$1","eStart","eLoopStop","Pt2IsBetweenPt1AndPt3","RemoveEdge","leftBoundIsForward","EMin","ppg","closed","newLm","PopLocalMinima","tmp","Reset","lm","InitOptions","m_PolyOuts","m_ClipType","m_Scanbeam","m_ActiveEdges","m_SortedEdges","m_IntersectList","m_IntersectNodeComparer","m_ExecuteLocked","m_ClipFillType","m_SubjFillType","m_Joins","m_GhostJoins","m_UsingPolyTree","ReverseSolution","StrictlySimple","ZFillFunction","ioReverseSolution","ioStrictlySimple","ioPreserveCollinear","DisposeAllPolyPts","DisposeScanbeamList","sb2","InsertScanbeam","newSb","ispolytree","solution","subjFillType","clipFillType","succeeded","ExecuteInternal","BuildResult","polytree","BuildResult2","FixHoleLinkage","outRec","orfl","botY","PopScanbeam","InsertLocalMinimaIntoAEL","ProcessHorizontals","topY","ProcessIntersections","ProcessEdgesAtTopOfScanbeam","Area","ReversePolyPtLinks","JoinCommonEdges","FixupOutPolygon","DoSimplePolygons","DisposeOutRec","index","AddJoin","Op1","Op2","AddGhostJoin","Op","SetZ","lb","rb","InsertEdgeIntoAEL","SetWindingCount","IsContributing","AddOutPt","AddLocalMinPoly","AddEdgeToSEL","HorzSegmentsOverlap","IntersectEdges","edge","startEdge","E2InsertsBeforeE1","TopX","IsEvenOddFillType","IsEvenOddAltFillType","pft","pft2","Inside","CopyAELToSEL","SwapPositionsInAEL","edge1","edge2","prev","SwapPositionsInSEL","AddLocalMaxPoly","AppendPolygon","prevE","outPt","CreateOutRec","ToFront","newOp","SetHoleState","SwapPoints","seg1a","seg1b","seg2a","seg2b","isHole","GetDx","FirstIsBottomPt","btmPt1","btmPt2","dx1p","dx1n","dx2p","dx2n","GetBottomPt","dups","GetLowermostRec","outRec1","outRec2","bPt1","bPt2","Param1RightOfParam2","GetOutRec","outrec","holeStateRec","side","p1_lft","p1_rt","p2_lft","p2_rt","OKIdx","ObsoleteIdx","pp1","SwapSides","SwapPolyIndexes","outIdx","e1Contributing","e2Contributing","oldE1WindCnt","e1FillType","e2FillType","e1FillType2","e2FillType2","e1Wc","e2Wc","e1Wc2","e2Wc2","DeleteFromAEL","AelPrev","AelNext","DeleteFromSEL","SelPrev","SelNext","UpdateEdgeIntoAEL","isTopOfScanbeam","horzEdge","ProcessHorizontal","GetHorzDirection","HorzEdge","$var","Left","Right","Dir","dir","horzLeft","horzRight","eLastHorz","eMaxPair","GetMaximaPair","IsLastHorz","GetNextInAEL","op1","eNextHorz","op2","IsMinima","IsMaxima","IsIntermediate","BuildIntersectList","FixupIntersectionOrder","ProcessIntersectList","$$e2","isModified","IntersectPoint","newNode","EdgesAdjacent","inode","IntersectNodeSort","sort","iNode","R1","round","R2","R3","R4","currentY","ip","b1","b2","IsMaximaEdge","DoMaxima","ReversePaths","polys","len","reverse","Orientation","poly","PointCount","pts","polyg","pn","lastOK","DupOutPt","InsertAfter","GetOverlap","a1","a2","$val","JoinHorz","op1b","op2b","DiscardLeft","Dir1","Dir2","JoinPoints","isHorizontal","reverse1","reverse2","DiscardLeftSide","Reverse1","Reverse2","GetBounds","GetBounds2","ops","opStart","PointInPolygon","ipNext","startOp","ptx","pty","poly0x","poly0y","poly1x","poly1y","Poly2ContainsPoly1","outPt1","outPt2","res","FixupFirstLefts1","OldOutRec","NewOutRec","firstLeft","ParseFirstLeft","FixupFirstLefts2","$i2","$t2","$l2","join","UpdateOutPtIdxs","oRec","op3","op4","outrec2","SimplifyPolygon","fillType","DistanceSqrd","dx","dy","DistanceFromLineSqrd","ln1","ln2","A","B","C","SlopesNearCollinear","distSqrd","PointsAreClose","ExcludeOp","CleanPolygon","distance","outPts","Minkowski","pattern","IsSum","IsClosed","delta","polyCnt","pathCnt","quads","quad","MinkowskiSum","path_or_paths","pathIsClosed","TranslatePath","outPath","MinkowskiDiff","poly1","poly2","PolyTreeToPaths","AddPolyNodeToPaths","NodeType","ntAny","polynode","nt","match","ntOpen","ntClosed","$i3","$t3","$l3","OpenPathsFromPolyTree","ClosedPathsFromPolyTree","miterLimit","def_arc_tolerance","m_destPolys","m_srcPoly","m_destPoly","m_normals","m_delta","m_sinA","m_sin","m_cos","m_miterLim","m_StepsPerRad","m_lowest","m_polyNodes","MiterLimit","ArcTolerance","two_pi","FixOrientations","GetUnitNormal","sqrt","DoOffset","steps","acos","sin","cos","OffsetPoint","DoSquare","DoRound","X2","clpr","outer","outerNode","jointype","cosA","DoMiter","tan","atan2","alert","JS","AreaOfPolygon","scale","AreaOfPolygons","area","BoundsOfPath","BoundsOfPaths","bounds","Clean","polygon","isPolygons","Clone","k_length","results","plen","Lighten","P","rem","addlast","bxax","byay","ax","ay","toleranceSq","PerimeterOfPath","perimeter","PerimeterOfPaths","ScaleDownPath","ScaleDownPaths","ScaleUpPath","ScaleUpPaths","ExPolygons","ExPolygon","AddOuterPolyNodeToExPolygons","expolygons","ep","childs","childs2","ExPolygonsToPaths","PolyTreeToExPolygons","mat3","create","out","fromMat4","copy","fromValues","m00","m01","m02","m10","m11","m12","m20","m21","m22","identity","transpose","a01","a02","a12","invert","a00","a10","a11","a20","a21","a22","b01","b11","b21","det","adjoint","determinant","b00","b02","b10","b12","b20","b22","mul","translate","rotate","rad","fromTranslation","fromRotation","fromScaling","fromMat2d","fromQuat","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","str","frob","sub","multiplyScalar","multiplyScalarAndAdd","exactEquals","a0","a3","a4","a5","a6","a7","a8","b0","b3","b4","b5","b6","b7","b8","vec3","div","scaleAndAdd","dist","squaredDistance","sqrDist","squaredLength","sqrLen","inverse","normalize","dot","cross","az","bx","by","bz","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","ix","iy","iz","iw","rotateX","rotateY","rotateZ","forEach","vec","stride","count","arg","angle","tempA","tempB","cosine","vec4","aw","Node","triangle","AdvancingFront","head","tail","head_","tail_","search_node_","setHead","setTail","search","setSearch","findSearchNode","locateNode","locatePoint","px","nx","xy","PointError","points","constructor","Triangle","points_","neighbors_","interior_","constrained_edge","delaunay_edge","p2s","getPoint","GetPoint","getNeighbor","containsPoint","containsEdge","containsPoints","isInterior","setInterior","interior","markNeighborPointers","markNeighbor","clearNeighbors","clearDelaunayEdges","pointCW","pointCCW","neighborCW","neighborCCW","getConstrainedEdgeCW","getConstrainedEdgeCCW","getConstrainedEdgeAcross","setConstrainedEdgeCW","setConstrainedEdgeCCW","getDelaunayEdgeCW","getDelaunayEdgeCCW","setDelaunayEdgeCW","setDelaunayEdgeCCW","neighborAcross","oppositePoint","cw","legalize","opoint","npoint","edgeIndex","markConstrainedEdgeByIndex","markConstrainedEdgeByEdge","markConstrainedEdgeByPoints","getLaserCutGcode","convertPoint","rapid","offsetX","offsetY","useA","roundedX","toFixed","decimal","roundedY","lastX","lastY","travelTime","cutFeed","laserPower","passes","aAxisStepsPerTurn","aAxisDiameter","gcodeToolOn","gcodeToolOff","gcodeSMaxValue","useZ","useBlower","hookPassStart","hookPassEnd","laserOnS","pass","blowerOn","usedZposition","pathIndex","separatedPaths","_cam","separateTabs","selectedIndex","selectedPath","zHeight","startZ","offsetZ","passDepth","blowerOff","ok","laserDiameter","lineDistance","cutRate","machineZEnabled","startHeight","isNaN","camPaths","cut","margin","_mesh","insideOutside","cutWidth","stepOver","direction","fillPath","lineAngle","reduceCamPaths","segmentLength","feedScale","toolFeedUnits","hookOperationStart","machineZToolOffset","machineBlowerGcodeOn","machineBlowerGcodeOff","hookOperationEnd","x1","y1","crosses","closeClipperPaths","mergePaths","currentPoint","mergedPaths","numLeft","_loop","closestPathIndex","closestPointIndex","closestPointDist","closestReverse","_loop2","pointIndex","needNew","concat","pocket","cutterDia","stepover","climb","current","allPaths","isInside","width","allowRecutInBounds","currentWidth","eachWidth","eachOffset","needReverse","nextWidth","cx","cy","_glMatrix","makePoint","vec2","scan","separated","vCarve","cutterAngle","cGeometry","resultPathsRef","resultNumPathsRef","resultPathSizesRef","debugArg0","debugArg1","ccall","_free","minDist","minDistSqr","distSqr","camPath","newPath","sq","getClipperPathsFromCamPaths","cutterPath","displayedCppTabError1","cCutterPath","cTabGeometry","errorRef","displayedCppTabError2","__WEBPACK_AMD_DEFINE_ARRAY__","glob","current_event","stop","version","has","separator","comaseparator","wildcard","numsort","events","firstDefined","ii","lastDefined","eve","scope","String","oldstop","args","listeners","indexed","zIndex","_events","items","jj","nes","names","split","es","on","exist","attrs","subname","RegExp","test","nts","off","unbind","key","cur","funcs","once","f2","mat2","mat2d","mat4","quat","v0","v1","LDU","L","D","U","tx","ty","aa","ab","ad","atx","aty","scalar","SIMD","m03","m13","m23","m30","m31","m32","m33","tmp01","tmp23","out0","out1","out2","out3","Float32x4","load","shuffle","store","row0","row1","row2","row3","tmp1","minor0","minor1","minor2","minor3","swizzle","reciprocalApproximation","t0","axis","splat","a_1","a_2","a_0","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xz","yz","getTranslation","mat","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","o","ox","oy","oz","frustum","near","far","rl","tb","nf","perspective","fovy","aspect","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","a9","a14","a15","b9","b13","b14","b15","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","setAxisAngle","setAxes","matr","view","fromMat3","getAxisAngle","out_axis","bw","calculateW","slerp","omega","cosom","sinom","scale0","scale1","sqlerp","temp1","temp2","invDot","conjugate","fRoot","fTrace","transformMat2","transformMat2d","assert","condition","Point","_p2t_edge_list","toJSON","set_zero","cmp","tcx","initTriangulation","createAdvancingFront","sweepPoints","finalizationPolygon","pointCount","pointEvent","edgeEventByEdge","front","meshClean","new_node","newFrontTriangle","fill","fillAdvancingFront","edge_event","isEdgeSideOfTriangle","fillEdgeEvent","edgeEventByPoints","eq","o1","orient2d","COLLINEAR","o2","CW","flipEdgeEvent","addToMap","mapTriangleToNodes","isAngleObtuse","isBasinAngleRight","fillBasin","ot","oi","inside","inCircle","rotateTrianglePair","not_legalized","pa","pb","pc","pd","adx","ady","bdx","bdy","adxbdy","bdxady","oabd","cdx","cdy","cdxady","adxcdy","ocad","bdxcdy","cdxbdy","alift","blift","clift","n2","n3","n4","ce1","ce3","ce4","de1","de2","de3","de4","CCW","basin","left_node","bottom_node","right_node","left_highest","fillBasinReq","isShallow","height","fillRightAboveEdgeEvent","fillLeftAboveEdgeEvent","fillRightBelowEdgeEvent","fillRightConcaveEdgeEvent","fillRightConvexEdgeEvent","fillLeftBelowEdgeEvent","fillLeftConcaveEdgeEvent","fillLeftConvexEdgeEvent","inScanArea","nextFlipTriangle","newP","nextFlipPoint","flipScanEdgeEvent","edge_index","o2d","flip_triangle","utils","sweep","kAlpha","Edge","Basin","clear","EdgeEvent","SweepContext","contour","triangles_","map_","cloneArrays","edge_list","pmin_","pmax_","front_","af_head_","af_middle_","af_tail_","initEdges","addHole","polyline","AddHole","addPoint","AddPoint","addPoints","getBoundingBox","GetTriangles","getMap","xmax","xmin","ymax","ymin","middle","removeNode","removeFromMap","detleft","detright","oadb","oadc","src","execScript","eval","mina","animations","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","setTimeout","isArray","idgen","idprefix","Date","ID","timer","now","sta","dur","speed","spd","duration","stopit","pause","pdif","resume","start","end","easing","frame","anim","linear","time","getById","easeout","easein","easeinout","Q","backin","backout","elastic","bounce","root","nodeType","wrap","is","Element","doc","querySelector","Paper","$","el","createTextNode","text","createComment","substring","getAttributeNS","xlink","xmlns","getAttribute","nodeValue","Str","setAttributeNS","setAttribute","removeAttribute","createElementNS","isFinite","objectToString","repush","array","cacher","postprocessor","newf","cache","shift","x3","y3","math","deg","svgTransform2string","tstr","replace","all","params","transform2matrix","bbox","tdata","parseTransformString","Matrix","bb","tlen","command","absolute","inver","getSomeDefs","ownerSVGElement","parentNode","select","pdefs","defs","make","getSomeSVG","unit2px","getW","mgr","getBBox","getH","nam","svg","class","appendChild","removeChild","add2group","list","childNodes","snap","hub","paper","tagName","nodeName","anims","_","mask","symbol","method","Fragment","frag","desc","proto","ownerDocument","getElementsByTagName","body","dom","contentDocument","jsonFiller","win","document","toFloat","toInt","mmax","mmin","colourRegExp","commaSpaces","hsrg","hs","rg","pathCommand","tCommand","pathValues","url","format","tokenRegex","objNotationRegex","replacer","quote","quotedName","isFunc","asin","num","atan","len2","closestPoint","distance2","best","bestLength","scanDistance","pathNode","pathLength","getTotalLength","precision","pathSegList","numberOfItems","bestDistance","Infinity","scanLength","getPointAtLength","before","after","beforeLength","afterLength","beforeDistance","afterDistance","snapTo","values","getRGB","colour","hex","rgbtoString","toHex","red","green","blue","opacity","rgb","hsb2rgb","hsl2rgb","hsb","hsl","color","style","defaultView","getComputedStyle","getPropertyValue","hsbtoString","hsltoString","prepareRGB","string","clr","packageRGB","rgb2hsl","rgb2hsb","R","G","H","V","M","pathString","pth","arr","paramCounts","TString","rgTransform","_unit2px","contains","compareDocumentPosition","adown","documentElement","bup","query","selectAll","nodelist","querySelectorAll","setInterval","attributes","json","att","parse","createDocumentFragment","full","createElement","innerHTML","firstChild","fragment","ch","lastIndexOf","css","letter","cssAttr","alignment-baseline","baseline-shift","clip-path","clip-rule","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cursor","display","dominant-baseline","enable-background","fill-opacity","fill-rule","filter","flood-color","flood-opacity","font","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","glyph-orientation-horizontal","glyph-orientation-vertical","image-rendering","kerning","letter-spacing","lighting-color","marker","marker-end","marker-mid","marker-start","overflow","pointer-events","shape-rendering","stop-color","stop-opacity","stroke","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-anchor","text-decoration","text-rendering","unicode-bidi","visibility","word-spacing","writing-mode","toUpperCase","ajax","postData","req","XMLHttpRequest","encodeURIComponent","open","setRequestHeader","onreadystatechange","readyState","send","responseText","getOffset","elem","box","getBoundingClientRect","docElem","clientTop","clientLeft","pageYOffset","scrollTop","pageXOffset","scrollLeft","getElementByPoint","target","canvas","elementFromPoint","so","sr","createSVGRect","hits","getIntersectionList","plugin","extractTransform","doReturn","matrix","fixids","urltest","it","uses","URL","linktest","els","ids","oldid","old","fs","from","to","chld","elproto","isWithoutTransform","removed","localMatrix","original","href","getElementById","pathfinder","deflt","bboxwt","realPath","propString","papa","global","getCTM","local","localString","toTransformString","totalMatrix","diffMatrix","total","gradientTransform","patternTransform","append","appendTo","prepend","first","insertBefore","prependTo","nextSibling","insertAfter","remove","asPX","use","xlink:href","cloneNode","toDefs","toPattern","patternUnits","viewBox","refX","refY","markerWidth","markerHeight","orient","Animation","animation","inAnim","_attrs","_callback","curStatus","animate","setter","fkeys","tkeys","keys","equal","eldata","removeData","outerSVG","innerSVG","toDataURL","btoa","contents","unescape","matrixproto","norm","mag","fromCharCode","row","scalex","shear","scaley","isSimple","isSuperSimple","noRotation","shorter","fillStroke","grad","gradient","setFontSize","fontSize","textExtract","chi","getFontSize","reURLValue","clipIt","gradrg","tokens","stops","toAbsolute","txt","className","baseVal","vb","rx","ry","tp","textPath","tuner","chunk","tuned","getter","textContent","rgNotSpace","addClass","pos","clazz","finalValue","classes","curClasses","removeClass","hasClass","toggleClass","flag","getNumber","getUnit","unit","operators","+","-","/","*","reUnit","reAddon","plus","evnt","atr","aUnit","bplus","rect","circle","preload","onerror","img","cssText","onload","image","preserveAspectRatio","offsetWidth","offsetHeight","ellipse","group","vbx","vby","vbw","vbh","ptrn","vx","vy","vw","vh","line","Gstops","GaddStop","GgetBBox","seed","step","unshift","gradientLinear","gradientRadial","gradientUnits","addStop","fx","fy","ps","sleep","r1","r0","rectPath","pathClone","getPointAtSegmentLength","bezlen","findDotsAtSegment","getTotLen","getLengthFactory","istotal","O","onlystart","path2curve","sp","subpaths","t1","t13","t12","t2","t3","mx","my","ny","alpha","bezierBBox","curveDim","isPointInsideBBox","isBBoxIntersect","bbox1","bbox2","base3","p4","x4","y4","Tvalues","Cvalues","sum","ct","xbase","ybase","comb","ll","intersect","denominator","py","px2","py2","interHelper","bez1","bez2","justCount","l1","l2","dots1","dots2","di","di1","dj","dj1","ci","cj","pathIntersection","path1","path2","interPathHelper","pathIntersectionNumber","x1m","y1m","x2m","y2m","pi","pj","intr","kk","segment1","segment2","isPointInsidePath","pathBBox","dim","ellipsePath","pathToRelative","lowerCase","rel","pathToAbsolute","pa0","crz","dots","catmullRom2bezier","l2c","q2c","_13","_23","a2c","large_arc_flag","sweep_flag","recursive","_120","f1","rx2","ry2","df","f2old","x2old","y2old","c1","s1","c2","s2","hx","hy","m1","m2","m3","m4","newres","b2ac","sqrtb2ac","tvalues","mt","curve","attrs2","processPath","pcom","T","fixArc","pcoms1","pcoms2","fixM","pfirst","seg","seg2","seglen","seg2len","mapPath","pathi","crp","iLen","getSubpathsAtLength","getPath","getSubpath","closest","found","intersection","intersectionNumber","isPointInside","toRelative","toCubic","Set","bindings","setproto","thisArg","each","begin","handler","callbacker","bind","aname","unbound","insertion","todel","arglen","exclude","getEmpty","equaliseTransform","tt1","tt2","maxlength","path2array","getViewBox","getColour","Function","isNumeric","arrayEqual","arr1","arr2","bUnit","supportsTouch","touchMap","mousedown","mousemove","mouseup","getScroll","preventTouch","originalEvent","preventDefault","stopTouch","stopPropagation","addEvent","realName","scrollY","scrollX","targetTouches","olde","clientX","clientY","addEventListener","removeEventListener","drag","dragMove","dragi","touch","touches","identifier","_drag","move_scope","dragUp","unmousemove","unmouseup","end_scope","start_scope","eventName","hover","f_in","f_out","scope_in","scope_out","mouseover","mouseout","unhover","unmouseover","unmouseout","draggable","onmove","onstart","onend","init","origTransform","undrag","unmousedown","pproto","rgurl","filstr","filterUnits","blur","def","shadow","grayscale","sepia","saturate","hueRotate","amount2","brightness","contrast","firstLetter","getAlign","way","align"],"mappings":"CAAS,SAAUA,GCgBnB,QAAAC,GAAAC,GAsCA,QAAAC,GAAAC,EAAAC,GACA,UAAAC,GACAC,EAAA,WACAC,IACAC,EAAAC,EAAAN,EAAA,WAOA,QAAAO,KACAH,IACA,YAAAF,IACAM,EAAAR,IACAS,EAAAT,GAEA,IAAAI,GAAA,IAAAM,GACAC,KAbA,IACAV,EAAAW,KAAA,KAAAC,GACM,QACNN,OA7CA,GAAAO,GAAAC,EAAAjB,EACA,KAAAgB,EAAA,MAAAT,EACA,IAAAQ,GAAA,SAAAG,GAYA,MAXAF,GAAAG,IAAAC,OACAH,EAAAC,IACAD,EAAAC,GAAAG,QAAAC,QAAAtB,GAAA,GACAiB,EAAAC,GAAAG,QAAAE,KAAAvB,GACAgB,EAAAQ,SAAAF,QAAAJ,GAAA,GACAF,EAAAQ,SAAAD,KAAAL,IACMO,GAAAzB,IAEN0B,QAAAC,KAAA,4BAAAT,EAAA,0BAAAlB,GACAyB,MAEAlB,EAAAW,GAEA,QAAAU,KAAArB,GACAsB,OAAAC,UAAAC,eAAAjB,KAAAP,EAAAqB,KACAI,EACAH,OAAAI,eAAAlB,EAAAa,EAAA,SAAAA,GACA,OACAM,cAAA,EACAC,YAAA,EACAC,IAAA,WACA,MAAA7B,GAAAqB,IAEAS,IAAA,SAAAC,GACA/B,EAAAqB,GAAAU,KAGOV,IAEPb,EAAAa,GAAArB,EAAAqB,GAqCA,OARAI,GACAH,OAAAI,eAAAlB,EAAA,KACAoB,YAAA,EACAG,MAAArC,IAGAc,EAAAP,EAAAP,EAEAc,EAGA,QAAAwB,GAAAvC,GACA,GAAAmB,IAEAqB,yBACAC,yBACAC,eAAA,EACAC,eAAA,EACAC,oBAGAxB,QAAA,EACAyB,OAAA,SAAAC,EAAA3C,GACA,sBAAA2C,GACA3B,EAAAuB,eAAA,MACA,sBAAAI,GACA3B,EAAAuB,cAAAI,MACA,oBAAAA,GACA,OAAAC,GAAA,EAAoBA,EAAAD,EAAAE,OAAgBD,IACpC5B,EAAAqB,sBAAAM,EAAAC,IAAA5C,MAEAgB,GAAAqB,sBAAAM,GAAA3C,GAEA8C,QAAA,SAAAH,GACA,sBAAAA,GACA3B,EAAAwB,eAAA,MACA,oBAAAG,GACA3B,EAAAsB,sBAAAK,IAAA,MAEA,QAAAC,GAAA,EAAoBA,EAAAD,EAAAE,OAAgBD,IACpC5B,EAAAsB,sBAAAK,EAAAC,KAAA,GAEAG,QAAA,SAAA/C,GACAgB,EAAAyB,iBAAArB,KAAApB,IAEAgD,kBAAA,SAAAhD,GACAgB,EAAAyB,iBAAArB,KAAApB,IAEAiD,qBAAA,SAAAjD,GACA,GAAAkD,GAAAlC,EAAAyB,iBAAAtB,QAAAnB,EACAkD,IAAA,GAAAlC,EAAAyB,iBAAAU,OAAAD,EAAA,IAIAE,MAAAC,EACAC,MAAAC,EACAC,OAAA,SAAAC,GACA,MAAAA,OACAC,GAAAtC,KAAAqC,GADAxD,GAGA0D,iBAAA,SAAAF,GACAC,EAAAtC,KAAAqC,IAEAG,oBAAA,SAAAH,GACA,GAAAP,GAAAQ,EAAAvC,QAAAsC,EACAP,IAAA,GAAAQ,EAAAP,OAAAD,EAAA,IAIAW,KAAAC,EAAAjE,GAEA,OAAAmB,GAMA,QAAAd,GAAA6D,GACA9D,EAAA8D,CACA,QAAAnB,GAAA,EAAiBA,EAAAc,EAAAb,OAA8BD,IAC/Cc,EAAAd,GAAAjC,KAAA,KAAAoD,GAcA,QAAAC,GAAAC,GACA,GAAAC,IAAAD,EAAA,KAAAA,CACA,OAAAC,IAAAD,IAGA,QAAAZ,GAAAC,EAAAtD,GACA,YAAAC,EAAA,SAAAkE,OAAA,yCACA,mBAAAb,IACAc,GAAA,EACApE,EAAAsD,IAEAc,EAAAd,EACAtD,KAAA,SAAAqE,GACA,GAAAA,EAAA,KAAAA,KAGAnE,EAAA,SACAoE,oBAAA,SAAAD,EAAAE,GACA,GAAAF,EAAA,MAAArE,GAAAqE,EACA,KAAAE,EAGA,MAFArE,GAAA,YACAF,GAAA,UAIAwE,MACAC,KACAlE,IACA,QAAAqC,GAAA,EAAkBA,EAAA2B,EAAAG,EAAA7B,OAAqBD,IACvC6B,EAAAF,EAAAG,EAAA9B,KAAA,CACA+B,GAAAJ,EAAAK,EAEA1E,EAAA,WACA2E,EAAA7E,EACA8E,IACA,IAAA/E,GAAA,CAGAS,GAAAT,GAEA,YAAAE,GAAA,IAAAE,GAAA,IAAAM,GACAC,MAmBA,QAAAF,GAAAT,GACA0E,EAAA1E,IAGAyE,EAAAzE,IAAA,EACAU,IACAsE,uBAAAhF,IAJAQ,EAAAR,IAAA,EAQA,QAAAW,KACAR,EAAA,QACA,IAAAF,GAAA6E,CAEA,IADAA,EAAA,KACA7E,EACA,GAAAoE,EACAb,EAAAa,EAAApE,OACI,CACJ,GAAAgF,KACA,QAAAf,KAAAa,GACApD,OAAAC,UAAAC,eAAAjB,KAAAmE,EAAAb,IACAe,EAAA5D,KAAA4C,EAAAC,GAGAjE,GAAA,KAAAgF,IAIA,QAAAzB,GAAA0B,EAAAjF,GAgBA,QAAAkF,GAAAC,GAKA,IAJA,GAAAH,IAAAG,GACAC,KAEAC,EAAAL,EAAAM,QACAD,EAAAxC,OAAA,IACA,GAAAhD,GAAAwF,EAAAE,MACAJ,EAAArE,EAAAjB,EACA,IAAAsF,MAAAnE,IAAAuB,cAAA,CAEA,GAAA4C,EAAAnE,IAAAwB,cACA,UAAA2B,OAAA,oCAAAtE,EAEA,QAAAA,EACA,MAEA,QAAA+C,GAAA,EAAmBA,EAAAuC,EAAAjE,QAAA2B,OAA2BD,IAAA,CAC9C,GAAA4C,GAAAL,EAAAjE,QAAA0B,GACA6C,EAAA3E,EAAA0E,EACA,IAAAC,EAAAzE,IAAAsB,sBAAAzC,GACA,UAAAsE,OAAA,2CAAAtE,EAAA,OAAA2F,EAEAR,GAAA7D,QAAAqE,IAAA,IACAC,EAAAzE,IAAAqB,sBAAAxC,IACAuF,EAAAI,KACAJ,EAAAI,OACAE,EAAAN,EAAAI,IAAA3F,YAGAuF,GAAAI,GACAR,EAAA5D,KAAAoE,GACAH,EAAAjE,KAAAoE,OAIA,OAAAR,EAAAI,GAGA,QAAAM,GAAAC,EAAAC,GACA,OAAAhD,GAAA,EAAkBA,EAAAgD,EAAA/C,OAAcD,IAAA,CAChC,GAAAiD,GAAAD,EAAAhD,EACA+C,GAAAxE,QAAA0E,GAAA,GACAF,EAAAvE,KAAAyE,IAzDA,aAAA5F,EAAA,SAAAkE,OAAA,0CACA,mBAAAc,IACAjF,EAAAiF,EACAA,MACIA,GAAA,gBAAAA,GACJjF,KAAA,SAAAqE,GACA,GAAAA,EAAA,KAAAA,KAGAY,KACAjF,KAAA,SAAAqE,GACA,GAAAA,EAAA,KAAAA,IAoDA,IAAAe,MACAJ,KACAc,IACA,QAAA7B,KAAAa,GACA,GAAApD,OAAAC,UAAAC,eAAAjB,KAAAmE,EAAAb,GAAA,CACA,GAAApE,GAAAmE,EAAAC,GACA8B,EAAAb,EAAArF,EACA,KAAAkG,EAAA,CACA,GAAAd,EAAAe,iBACA,QAEA,OADA9F,GAAA,SACAF,EAAA,GAAAmE,OAAA,mBAAAtE,EAAA,qBAEA,GAAAkG,YAAA5B,OAEA,MADAjE,GAAA,SACAF,EAAA+F,EAEAD,GAAAjG,GAAAiF,EAAAjF,GACA6F,EAAAV,EAAAe,EAAA,GACA,QAAAlG,KAAAkG,GAAA,GACArE,OAAAC,UAAAC,eAAAjB,KAAAoF,EAAA,GAAAlG,KACAuF,EAAAvF,KACAuF,EAAAvF,OACA6F,EAAAN,EAAAvF,GAAAkG,EAAA,GAAAlG,KAQA,OADAoG,MACArD,EAAA,EAAiBA,EAAAoC,EAAAnC,OAA4BD,IAAA,CAC7C,GAAA/C,GAAAmF,EAAApC,EACA9B,GAAAjB,IAAAiB,EAAAjB,GAAAmB,IAAAuB,eACA0D,EAAA7E,MACA+D,OAAAtF,EACAqG,aAAApF,EAAAjB,GAAAmB,IAAAuB,gBAKArC,EAAA,UAEA,KADA,GAAAmF,GAAAL,EAAAM,QACAD,EAAAxC,OAAA,IACA,GAAAhD,GAAAwF,EAAAE,MACAJ,EAAArE,EAAAjB,EACA,IAAAsF,EAAA,CAMA,OAJAtB,MAGAsC,EAAAhB,EAAAnE,IAAAyB,iBACA2D,EAAA,EAAkBA,EAAAD,EAAAtD,OAA4BuD,IAAA,CAC9C,GAAAC,GAAAF,EAAAC,EACAC,GAAAxC,GAEAC,EAAAjE,GAAAgE,EAGAsB,EAAAnE,IAAAC,QAAA,QAGAH,GAAAjB,EAGA,QAAAuG,GAAA,EAAkBA,EAAAjB,EAAA9D,SAAAwB,OAA4BuD,IAAA,CAC9C,GAAAE,GAAAxF,EAAAqE,EAAA9D,SAAA+E,GACA,IAAAE,EAAA,CACA,GAAApD,GAAAoD,EAAApF,QAAAC,QAAAtB,EACAqD,IAAA,GACAoD,EAAApF,QAAAiC,OAAAD,EAAA,MAMA,OAAArD,KAAAuF,GACA,GAAA1D,OAAAC,UAAAC,eAAAjB,KAAAyE,EAAAvF,GAGA,OAFAsF,GAAArE,EAAAjB,GACA0G,EAAAnB,EAAAvF,GACAuG,EAAA,EAAmBA,EAAAG,EAAA1D,OAAuCuD,IAAA,CAC1D,GAAAI,GAAAD,EAAAH,GACAlD,EAAAiC,EAAA9D,SAAAF,QAAAqF,EACAtD,IAAA,GAAAiC,EAAA9D,SAAA8B,OAAAD,EAAA,GAMAhD,EAAA,SAEAuG,EAAA9B,CAGA,QAAA9E,KAAAiG,GACApE,OAAAC,UAAAC,eAAAjB,KAAAmF,EAAAjG,KACAF,EAAAE,GAAAiG,EAAAjG,GAKA,IAAA6G,GAAA,IACA,QAAA7G,KAAAuF,GACA,GAAA1D,OAAAC,UAAAC,eAAAjB,KAAAyE,EAAAvF,GAAA,CAIA,OAHAsF,GAAArE,EAAAjB,GACA0G,EAAAnB,EAAAvF,GACA8G,KACA/D,EAAA,EAAmBA,EAAA2D,EAAA1D,OAAuCD,IAAA,CAC1D,GAAA4D,GAAAD,EAAA3D,GACAyD,EAAAlB,EAAAnE,IAAAqB,sBAAAmE,EACAG,GAAAxF,QAAAkF,IAAA,GACAM,EAAAvF,KAAAiF,GAEA,OAAAzD,GAAA,EAAmBA,EAAA+D,EAAA9D,OAAsBD,IAAA,CACzC,GAAAyD,GAAAM,EAAA/D,EACA,KACAyD,EAAAjB,GACO,MAAAf,GACPqC,IACAA,EAAArC,KAOA,OAAAzB,GAAA,EAAiBA,EAAAqD,EAAApD,OAAwCD,IAAA,CACzD,GAAAiD,GAAAI,EAAArD,GACA/C,EAAAgG,EAAAV,MACA7D,IAAAzB,EACA,KACAO,EAAAP,GACK,MAAAwE,GACL,qBAAAwB,GAAAK,aACA,IACAL,EAAAK,aAAA7B,GACO,MAAAA,GACPqC,IACAA,EAAArC,OAEMqC,KACNA,EAAArC,IAKA,MAAAqC,IACAxG,EAAA,QACAF,EAAA0G,KAGAxG,EAAA,YACAF,GAAA,KAAAgF,IAOA,QAAA5E,GAAAP,GAGA,GAAAiB,EAAAjB,GACA,MAAAiB,GAAAjB,GAAA+G,OAGA,IAAAzB,GAAArE,EAAAjB,IACA+G,WACA3C,GAAApE,EACAgH,QAAA,EACA7F,IAAAoB,EAAAvC,GACAqB,QAAAI,EACAD,YAUA,OANA1B,GAAAE,GAAAc,KAAAwE,EAAAyB,QAAAzB,IAAAyB,QAAAhH,EAAAC,IAGAsF,EAAA0B,QAAA,EAGA1B,EAAAyB,QAzfA,GAAA/E,IAAA,CACA,KACAH,OAAAI,kBAA2B,KAC3BG,IAAA,eAEAJ,GAAA,EACG,MAAAiF,IAIH,GA4JAjC,GAGAC,EAAAH,EA/JAP,GAAA,EACAqC,EAAA,uBACA3C,KACAxC,KA0IAoC,KACAzD,EAAA,OASAQ,EAAA,EACAN,EAAA,EACAI,KACAiE,KACAC,KA0TA3D,IA2CA,OAZAV,GAAA2G,EAAApH,EAGAS,EAAAsE,EAAA5D,EAGAV,EAAA4G,EAAA,GAGA5G,EAAAwE,EAAA,WAAsC,MAAA6B,IAGtC7G,EAAA,QDMM,SAAUuF,EAAQyB,EAASxG,GAEhC,YEnhBD,IAAA6G,GAAA7G,EAAA,GAEA8G,WAAY,SAACC,GAAU,GAAAC,GAE+DD,EAAMtD,KAAnFwD,EAFcD,EAEdC,SAAUC,EAFIF,EAEJE,QAASC,EAFLH,EAEKG,GAFLC,EAAAJ,EAESK,WAFTC,SAAAF,OAAAG,EAAAP,EAEwBQ,eAFxBF,SAAAC,OAAAE,EAAAT,EAE2CU,cAF3CJ,SAAAG,OAIbE,KAEAC,EAAY,SAACC,EAASC,GACxBH,EAAO3G,MAAO6G,UAASC,WAErBC,EAAW,WACbC,YAAYC,KAAKC,WAAYnB,MAAO,aAAcoB,YAAOR,aAEvDS,EAAO,SAACD,GACNA,KAAU,GAASR,EAAOlF,OAC1BuF,YAAYC,KAAKC,WAAYnB,MAAO,UAAWY,YAE/CK,YAAYC,KAAKC,WAAYnB,MAAO,SAAUoB,WAElDE,KAAKC,QAGTzB,GAAA0B,uBAAuBrF,MAAvBoE,QAAoCL,EAAUC,EAASC,EAAIE,EAAUG,EAAcE,EAAaE,EAAWQ,EAAML,MFkiBxG,WAC4B,mBAAzBS,2BASV,SAAUzD,EAAQyB,GG3iBxB,GAAAiC,KAGAA,GAAAC,QAAA,KACAD,EAAAE,WAAA,mBAAAC,2BAAAC,MACAJ,EAAAK,OAAAC,KAAAC,OACAP,EAAAQ,aAAA,EAGAR,EAAAS,eAAAT,EAAAE,aAAAC,cAAA,QAAAO,MACAV,EAAAW,SAAAX,EAAAQ,aAAAR,EAAAS,eAOAT,EAAAY,mBAAA,SAAAC,GACAb,EAAAE,WAAAW,EAGA,IAAAC,GAAAR,KAAAS,GAAA,GAOAf,GAAAgB,SAAA,SAAAlE,GACA,MAAAA,GAAAgE,GAYAd,EAAAiB,OAAA,SAAAnE,EAAAC,GACA,MAAAuD,MAAAY,IAAApE,EAAAC,IAAAiD,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAApE,GAAAwD,KAAAY,IAAAnE,KAGAT,EAAAyB,QAAAiC,GH0kBM,SAAU1D,EAAQyB,GInoBxB,YAuCA,SAAAqD,GAAAjD,GACA,UAAAA,EAAAF,EAAA,IAA0BE,EAAAkD,EAAA,IAe1B,QAAAC,GAAAnD,GAEA,GAAAoD,GAAApD,EAAAmD,UACA,2BAAAC,EAAAH,EAAAjD,GAAAoD,EAYA,QAAAC,GAAA1E,EAAAC,GACA,MAAAD,GAAAuE,IAAAtE,EAAAsE,EACAvE,EAAAmB,EAAAlB,EAAAkB,EAEAnB,EAAAuE,EAAAtE,EAAAsE,EAUA,QAAAJ,GAAAnE,EAAAC,GACA,MAAAD,GAAAmB,IAAAlB,EAAAkB,GAAAnB,EAAAuE,IAAAtE,EAAAsE,EAIA/E,EAAAyB,SACAuD,WACAF,eACAI,UACAP,WJupBM,SAAU3E,EAAQyB,EAASxG,GK/uBjC,YLgyBC,SAASkK,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GKnxBxF,QAASG,GAAqBC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAgBC,GAClF,QAASC,GAAIC,EAAIC,EAAIC,EAAIC,EAAIC,GACzB,OAAQ,EAAIA,IAAM,EAAIA,IAAM,EAAIA,GAAKJ,EAAK,GAAK,EAAII,IAAM,EAAIA,GAAKA,EAAIH,EAAK,GAAK,EAAIG,GAAKA,EAAIA,EAAIF,EAAKE,EAAIA,EAAIA,EAAID,EAGtH,GAAId,GAAOE,GAAOD,GAAOE,GAAOG,GAAOF,GAAOG,GAAOF,EACjD,OAAQ,IAAKC,EAAKC,EAGtB,KADA,GAAIS,GAAcR,IACL,CAIT,IAAK,GAHDrE,GAAI6D,EACJT,EAAIU,EACJ7E,GAAU,KACLnD,EAAI,EAAGA,GAAK+I,IAAe/I,EAAG,CACnC,GAAI8I,GAAI,EAAM9I,EAAI+I,EACdC,EAAQP,EAAIV,EAAKE,EAAKE,EAAKE,EAAKS,GAChCG,EAAQR,EAAIT,EAAKE,EAAKE,EAAKE,EAAKQ,EACpC,KAAKE,EAAQ9E,IAAM8E,EAAQ9E,IAAM+E,EAAQ3B,IAAM2B,EAAQ3B,GAAKkB,EAAmBA,EAAkB,CAC7FO,GAAe,EACf5F,EAAS,IACT,OAEJA,EAAO3E,KAAKwK,EAAOC,GACnB/E,EAAI8E,EACJ1B,EAAI2B,EAER,GAAI9F,EACA,MAAOA,IAMnB,QAAS+F,GAAkBC,EAAMZ,EAAgBC,EAAkBY,GAC/D,GAAID,EAAKlJ,OAAS,GAAuB,GAAlBkJ,EAAK,GAAGlJ,QAA6B,KAAdkJ,EAAK,GAAG,GAElD,MADAC,GAAQ,8BACD,IAKX,KAAK,GAHDlF,GAAIiF,EAAK,GAAG,GACZ7B,EAAI6B,EAAK,GAAG,GACZhG,GAAUgG,EAAK,IACVnJ,EAAI,EAAGA,EAAImJ,EAAKlJ,SAAUD,EAAG,CAClC,GAAIqJ,GAAUF,EAAKnJ,EACnB,IAAkB,KAAdqJ,EAAQ,IAA+B,GAAlBA,EAAQpJ,OAC7BkD,EAAO3E,KAAKsJ,EACR5D,EAAGoD,EAAG+B,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,GAAId,EAAgBC,IAClGtE,EAAImF,EAAQ,GACZ/B,EAAI+B,EAAQ,OACT,IAAkB,KAAdA,EAAQ,IAA+B,GAAlBA,EAAQpJ,OAMpC,MADAmJ,GAAQ,kCAAoCC,EAAQ,IAC7C,IALPlG,GAAO3E,KAAK6K,GACZnF,EAAImF,EAAQ,GACZ/B,EAAI+B,EAAQ,IAMpB,MAAOlG,GAKX,QAASmG,GAAyBC,EAAShB,EAAgBC,EAAkBY,GACzE,GAAID,GAAO,KACPK,EAAOhM,EAAQ,IACfiM,EAAcD,EAAKD,EAEvB,IAAwB,QAApBE,EAAY3C,KACZqC,EAAOM,EAAYC,KAAK,SACvB,IAAwB,QAApBD,EAAY3C,KASjB,MADAsC,GAAQ,MAAQK,EAAY3C,KAAO,iFAC5B,IARP,IAAI5C,GAAIyF,OAAOF,EAAYC,KAAK,MAC5BpC,EAAIqC,OAAOF,EAAYC,KAAK,MAC5BE,EAAID,OAAOF,EAAYC,KAAK,UAC5B1H,EAAI2H,OAAOF,EAAYC,KAAK,UAChCP,GAAO,IAAMjF,EAAI,IAAMoD,EAAI,IAAMsC,EAAI,QAA0B5H,EAAI,KAAQ4H,EAAK,SAA4B5H,EAAK,IAOrH,MAAqC,IAAjCyH,EAAYC,KAAK,cACjBN,EAAQ,8BACD,MAGqB,IAA5BK,EAAYC,KAAK,SACjBN,EAAQ,yBACD,MAGC,MAARD,MACAC,GAAQ,oBAIZD,EAAOK,EAAKL,KAAKU,IAAIV,EAAMM,EAAYK,YAAYC,cACnDZ,EAAOK,EAAKQ,gBAAgBb,GAC5BA,EAAOD,EAAkBC,EAAMZ,EAAgBC,EAAkBY,IAOrE,QAASa,GAAmBC,EAAUC,EAAWf,GAC7C,GAAIgB,GAAS,KAAOD,CACpB,IAAID,EAASjK,OAAS,GAA2B,GAAtBiK,EAAS,GAAGjK,QAAiC,KAAlBiK,EAAS,GAAG,GAE9D,MADAd,GAAQ,8BACD,IAIX,KAAK,GAFDiB,IAAeH,EAAS,GAAG,GAAKE,EAAQF,EAAS,GAAG,GAAKE,GACzDjH,GAAUkH,GACLrK,EAAI,EAAGA,EAAIkK,EAASjK,SAAUD,EAAG,CACtC,GAAIqJ,GAAUa,EAASlK,EACvB,IAAkB,KAAdqJ,EAAQ,IAA+B,GAAlBA,EAAQpJ,OAC7BoK,GAAehB,EAAQ,GAAKe,EAAQf,EAAQ,GAAKe,GACjDjH,EAAO3E,KAAK6L,OACT,IAAkB,KAAdhB,EAAQ,GAKf,MADAD,GAAQ,oCAAsCC,EAAQ,IAC/C,IAJP,KAAK,GAAI7F,GAAI,EAAGA,GAAK6F,EAAQpJ,OAAS,GAAK,IAAKuD,EAC5C6G,EAAY7L,KAAK6K,EAAQ,EAAQ,EAAJ7F,GAAS4G,EAAQf,EAAQ,EAAQ,EAAJ7F,GAAS4G,IAM/E,MAAOjH,GAMJ,QAASmH,GAAkBf,EAASY,EAAW5B,EAAgBC,EAAkBY,GACpF,GAAID,GAAOG,EAAyBC,EAAShB,EAAgBC,EAAkBY,EAC/E,OAAa,QAATD,EACOc,EAAmBd,EAAMgB,EAAWf,GACxC,KAIJ,QAASmB,GAAMC,EAAaC,GAAQ,GAAAC,IAAA,EAAAC,GAAA,EAAAC,EAAA9F,MAAA,KACvC,OAAA+F,GAAAC,EAAqBN,EAArBO,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAArF,MAAA8E,GAAA,MAASQ,GAATL,EAAAtL,MAAA4L,GAAA,EAAAC,GAAA,EAAAC,EAAAvG,MAAA,KACI,OAAAwG,GAAAC,EAAoBL,EAApBH,OAAAC,cAAAG,GAAAG,EAAAC,EAAAN,QAAArF,MAAAuF,GAAA,EACI,IAAK,GADAK,GAATF,EAAA/L,MACaS,EAAI,EAAGA,EAAIwL,EAAQvL,OAAQD,GAAK,EACrCwL,EAAQxL,EAAI,GAAKyK,EAASe,EAAQxL,EAAI,GAHlD,MAAAyB,GAAA2J,GAAA,EAAAC,EAAA5J,EAAA,aAAA0J,GAAAI,EAAAE,QAAAF,EAAAE,SAAA,WAAAL,EAAA,KAAAC,MADuC,MAAA5J,GAAAkJ,GAAA,EAAAC,EAAAnJ,EAAA,aAAAiJ,GAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,KAAAC,KAOpC,QAASc,GAAkBR,GAAU,GAAAS,IAAA,EAAAC,GAAA,EAAAC,EAAA/G,MAAA,KACxC,OAAAgH,GAAAC,EAAiBb,EAAjBH,OAAAC,cAAAW,GAAAG,EAAAC,EAAAd,QAAArF,MAAA+F,GAAA,MAASxC,GAAT2C,EAAAvM,KACI,IAAI4J,EAAKlJ,QAAU,GAAKkJ,EAAK,IAAMA,EAAKA,EAAKlJ,OAAS,IAAMkJ,EAAK,IAAMA,EAAKA,EAAKlJ,OAAS,GACtF,OAAO,GAHyB,MAAAwB,GAAAmK,GAAA,EAAAC,EAAApK,EAAA,aAAAkK,GAAAI,EAAAN,QAAAM,EAAAN,SAAA,WAAAG,EAAA,KAAAC,IAIxC,OAAO,EAGJ,QAASG,GAAqBd,GACjC,GAAI/H,MADuC8I,GAAA,EAAAC,GAAA,EAAAC,EAAArH,MAAA,KAE3C,OAAAsH,GAAAC,EAAiBnB,EAAjBH,OAAAC,cAAAiB,GAAAG,EAAAC,EAAApB,QAAArF,MAAAqG,GAAA,MAAS9C,GAATiD,EAAA7M,KACQ4J,GAAKlJ,QAAU,GAAKkJ,EAAK,IAAMA,EAAKA,EAAKlJ,OAAS,IAAMkJ,EAAK,IAAMA,EAAKA,EAAKlJ,OAAS,IACtFkD,EAAO3E,KAAK2K,IAJuB,MAAA1H,GAAAyK,GAAA,EAAAC,EAAA1K,EAAA,aAAAwK,GAAAI,EAAAZ,QAAAY,EAAAZ,SAAA,WAAAS,EAAA,KAAAC,IAK3C,MAAOhJ,GAGJ,QAASmJ,GAAuBpB,EAAUqB,EAAQC,EAAQC,EAAYC,GACzE,GAAIvJ,GAAS+H,EAASrB,IAAI,SAAAzF,GAEtB,IAAK,GADDjB,MACKnD,EAAI,EAAGA,EAAIoE,EAAEnE,OAAQD,GAAK,EAC/BmD,EAAO3E,MAAOmO,GAAIvI,EAAEpE,GAAKuM,EAASE,GAAcG,EAAkBC,GAAIzI,EAAEpE,EAAI,GAAKwM,EAASE,GAAcE,GAC5G,OAAOzJ,IAMX,OAJIuI,GAAkBR,KAClB/H,EAAS2J,EAAAjF,QAAWkF,QAAQC,cAAc7J,EAAQ8J,GAClD9J,EAAS2J,EAAAjF,QAAWkF,QAAQG,iBAAiB/J,EAAQ2J,EAAAjF,QAAWsF,aAAaC,aAE1EjK,EAGX,QAASkK,GAAuBC,GAC5B,GAAIxL,GAAI,GAAIgL,GAAAjF,QAAWkF,OACvBjL,GAAEyL,SAASD,EAAOR,EAAAjF,QAAW2F,SAASC,WAAW,EACjD,IAAIC,GAAW,GAAIZ,GAAAjF,QAAW8F,QAE9B,OADA7L,GAAE8L,QAAQd,EAAAjF,QAAWgG,SAASC,QAASJ,EAAUZ,EAAAjF,QAAWsF,aAAaC,WAAYN,EAAAjF,QAAWsF,aAAaC,YACtGM,EAGX,QAASK,GAAoBL,GACzB,GAAIvK,MACA6K,EAAgB,SAAAC,GAAA,OAAY/J,EAAG+J,EAAMtB,EAAIC,EAAkBtF,EAAG2G,EAAMpB,EAAID,IACxEsB,EAAoB,SAAA/E,GAAA,MAAQA,GAAKU,IAAImE,IACrCG,EAAkB,SAAAC,GAAA,MAASA,GAAMvE,IAAI,SAAAwE,GAAA,MAAQH,GAAkBG,EAAKC,cACpEC,EAAc,QAAdA,GAAcF,GACd,GAAIG,GAAWN,EAAkBG,EAAKC,WAClCG,EAAQN,EAAgBE,EAAKK,UAC7BC,EAAU,GAAAC,GAAA/G,QAAiB2G,EAC/BG,GAAQE,SAASJ,GACjBE,EAAQG,aACR,IAAIC,GAAYJ,EAAQK,eANFC,GAAA,EAAAC,GAAA,EAAAC,EAAArK,MAAA,KAOtB,OAAAsK,GAAAC,EAAcN,EAAdhE,OAAAC,cAAAiE,GAAAG,EAAAC,EAAApE,QAAArF,MAAAqJ,GAAA,EAAyB,IAAhBnG,GAAgBsG,EAAA7P,MACjB6E,EAAI0E,EAAEwG,WACVnM,GAAO3E,KACH4F,EAAE,GAAGF,EAAGE,EAAE,GAAGkD,EACblD,EAAE,GAAGF,EAAGE,EAAE,GAAGkD,EACblD,EAAE,GAAGF,EAAGE,EAAE,GAAGkD,IAZC,MAAA7F,GAAAyN,GAAA,EAAAC,EAAA1N,EAAA,aAAAwN,GAAAI,EAAA5D,QAAA4D,EAAA5D,SAAA,WAAAyD,EAAA,KAAAC,IAAA,GAAAI,IAAA,EAAAC,GAAA,EAAAC,EAAA3K,MAAA,KActB,OAAA4K,GAAAC,EAAiBtB,EAAKK,SAAtB3D,OAAAC,cAAAuE,GAAAG,EAAAC,EAAA1E,QAAArF,MAAA2J,GAAA,EAAgC,IAAvBK,GAAuBF,EAAAnQ,MAAAsQ,GAAA,EAAAC,GAAA,EAAAC,EAAAjL,MAAA,KAC5B,OAAAkL,GAAAC,EAAiBL,EAAKlB,SAAtB3D,OAAAC,cAAA6E,GAAAG,EAAAC,EAAAhF,QAAArF,MAAAiK,GAAA,EAAgC,IAAvB5E,GAAuB+E,EAAAzQ,KAC5BgP,GAAYtD,IAFY,MAAAxJ,GAAAqO,GAAA,EAAAC,EAAAtO,EAAA,aAAAoO,GAAAI,EAAAxE,QAAAwE,EAAAxE,SAAA,WAAAqE,EAAA,KAAAC,MAdV,MAAAtO,GAAA+N,GAAA,EAAAC,EAAAhO,EAAA,aAAA8N,GAAAI,EAAAlE,QAAAkE,EAAAlE,SAAA,WAAA+D,EAAA,KAAAC,MALSS,GAAA,EAAAC,GAAA,EAAAC,EAAAtL,MAAA,KAyBnC,OAAAuL,GAAAC,EAAiB5C,EAASgB,SAA1B3D,OAAAC,cAAAkF,GAAAG,EAAAC,EAAArF,QAAArF,MAAAsK,GAAA,EAAoC,IAA3B7B,GAA2BgC,EAAA9Q,KAChCgP,GAAYF,IA1BmB,MAAA5M,GAAA0O,GAAA,EAAAC,EAAA3O,EAAA,aAAAyO,GAAAI,EAAA7E,QAAA6E,EAAA7E,SAAA,WAAA0E,EAAA,KAAAC,IA4BnC,MAAOjN,GAGJ,QAASoN,GAAoBrF,GAChC,MAAO6C,GAAoBV,EAAuBf,EAAuBpB,EAAU,EAAG,EAAG,EAAG,KAIzF,QAASsF,GAAqBC,EAAcC,GAC/C,GAAIC,GAAa,EAEbC,EAASC,OAAOC,QAA8B,EAAtBJ,EAAazQ,OACzCwQ,GAAajS,KAAKoS,EAClB,IAAIG,GAAaH,GAAU,EAEvBI,EAAaH,OAAOC,QAA8B,EAAtBJ,EAAazQ,OAC7CwQ,GAAajS,KAAKwS,EAGlB,KAAK,GAFDC,GAAiBD,GAAc,EAE1BhR,EAAI,EAAGA,EAAI0Q,EAAazQ,SAAUD,EAAG,CAC1C,GAAIkR,GAAcR,EAAa1Q,GAE3BmR,EAAQN,OAAOC,QAA6B,EAArBI,EAAYjR,OAAa0Q,EAAa,EACjEF,GAAajS,KAAK2S,GACN,EAARA,IACAA,GAAS,EAIb,KAAK,GAFDC,GAAY,GAAIC,cAAaR,OAAOS,QAAQC,OAAQV,OAAOS,QAAQE,WAAaL,GAE3E3N,EAAI,EAAGA,EAAI0N,EAAYjR,SAAUuD,EAAG,CACzC,GAAIyK,GAAQiD,EAAY1N,EACxB4N,GAAc,EAAJ5N,GAASyK,EAAMtB,EAAI8E,EAC7BL,EAAc,EAAJ5N,EAAQ,GAAKyK,EAAMpB,EAAI4E,EAGrCZ,OAAOS,QAAQP,EAAa/Q,GAAKmR,EACjCN,OAAOS,QAAQL,EAAiBjR,GAAKkR,EAAYjR,OAGrD,OAAQ2Q,EAAQF,EAAazQ,OAAQ+Q,GAKlC,QAASU,GAAqBjB,EAAckB,EAAWC,EAAcC,GACxE,GAAIjB,GAASC,OAAOS,QAAQK,GAAa,EACzClB,GAAajS,KAAKoS,EAClB,IAAIG,GAAaH,GAAU,EAEvBkB,EAAYjB,OAAOS,QAAQM,GAAgB,GAE3CZ,EAAaH,OAAOS,QAAQO,GAAiB,EACjDpB,GAAajS,KAAKwS,EAIlB,KAAK,GAHDC,GAAiBD,GAAc,EAE/BN,KACK1Q,EAAI,EAAGA,EAAI8R,IAAa9R,EAAG,CAChC,GAAI+R,GAAWlB,OAAOS,QAAQL,EAAiBjR,GAC3CmR,EAAQN,OAAOS,QAAQP,EAAa/Q,EAExCyQ,GAAajS,KAAK2S,GACN,EAARA,IACAA,GAAS,EACb,IAAIC,GAAY,GAAIC,cAAaR,OAAOS,QAAQC,OAAQV,OAAOS,QAAQE,WAAaL,GAEhFD,IACJR,GAAalS,KAAK0S,EAClB,KAAK,GAAI1N,GAAI,EAAGA,EAAIuO,IAAYvO,EAC5B0N,EAAY1S,MACRmO,EAAGyE,EAAc,EAAJ5N,GAASiO,EACtB5E,EAAGuE,EAAc,EAAJ5N,EAAQ,GAAKiO,IAItC,MAAOf,GAKJ,QAASsB,GAAiBvB,EAAckB,EAAWC,EAAcC,GACpE,GAAIjB,GAASC,OAAOS,QAAQK,GAAa,EACzClB,GAAajS,KAAKoS,EAClB,IAAIG,GAAaH,GAAU,EAEvBkB,EAAYjB,OAAOS,QAAQM,GAAgB,GAE3CZ,EAAaH,OAAOS,QAAQO,GAAiB,EACjDpB,GAAajS,KAAKwS,EAIlB,KAAK,GAHDC,GAAiBD,GAAc,EAE/BiB,KACKjS,EAAI,EAAGA,EAAI8R,IAAa9R,EAAG,CAChC,GAAI+R,GAAWlB,OAAOS,QAAQL,EAAiBjR,GAC3CmR,EAAQN,OAAOS,QAAQP,EAAa/Q,EAExCyQ,GAAajS,KAAK2S,GACN,EAARA,IACAA,GAAS,EACb,IAAIC,GAAY,GAAIC,cAAaR,OAAOS,QAAQC,OAAQV,OAAOS,QAAQE,WAAaL,GAEhFe,IACJD,GAAezT,MAAO2K,KAAM+I,EAAeC,aAAa,GACxD,KAAK,GAAI3O,GAAI,EAAGA,EAAIuO,IAAYvO,EAC5B0O,EAAc1T,MACVmO,EAAGyE,EAAc,EAAJ5N,GAASiO,EACtB5E,EAAGuE,EAAc,EAAJ5N,EAAQ,GAAKiO,EAC1BW,EAAGhB,EAAc,EAAJ5N,EAAQ,GAAKiO,IAMtC,MAAOQ,GAGJ,QAASI,GAAc/E,GAC1B,GAAIgF,GAAO3I,OAAO4I,UACdC,EAAO7I,OAAO4I,UACdE,GAAQ9I,OAAO4I,UACfG,GAAQ/I,OAAO4I,UAJcI,GAAA,EAAAC,GAAA,EAAAC,EAAA/N,MAAA,KAKjC,OAAAgO,GAAAC,EAAiBzF,EAAjBvC,OAAAC,cAAA2H,GAAAG,EAAAC,EAAA9H,QAAArF,MAAA+M,GAAA,EAAwB,IAAfxJ,GAAe2J,EAAAvT,MAAAyT,GAAA,EAAAC,GAAA,EAAAC,EAAApO,MAAA,KACpB,OAAAqO,GAAAC,EAAejK,EAAf4B,OAAAC,cAAAgI,GAAAG,EAAAC,EAAAnI,QAAArF,MAAAoN,GAAA,EAAqB,IAAZK,GAAYF,EAAA5T,KACjB+S,GAAO/L,KAAK+M,IAAIhB,EAAMe,EAAG1G,GACzB8F,EAAOlM,KAAKa,IAAIqL,EAAMY,EAAG1G,GACzB6F,EAAOjM,KAAK+M,IAAId,EAAMa,EAAGxG,GACzB6F,EAAOnM,KAAKa,IAAIsL,EAAMW,EAAGxG,IALT,MAAApL,GAAAwR,GAAA,EAAAC,EAAAzR,EAAA,aAAAuR,GAAAI,EAAA3H,QAAA2H,EAAA3H,SAAA,WAAAwH,EAAA,KAAAC,MALS,MAAAzR,GAAAmR,GAAA,EAAAC,EAAApR,EAAA,aAAAkR,GAAAI,EAAAtH,QAAAsH,EAAAtH,SAAA,WAAAmH,EAAA,KAAAC,IAajC,OAASP,OAAME,OAAMC,OAAMC,QAIxB,QAASa,GAAKC,EAAQC,EAAQC,GACjC,GAAIC,GAAU,GAAI7G,GAAAjF,QAAWkF,OAC7B4G,GAAQpG,SAASiG,EAAQ1G,EAAAjF,QAAW2F,SAASC,WAAW,GACxDkG,EAAQpG,SAASkG,EAAQ3G,EAAAjF,QAAW2F,SAASoG,QAAQ,EACrD,IAAIzQ,KAEJ,OADAwQ,GAAQ/F,QAAQ8F,EAAUvQ,EAAQ2J,EAAAjF,QAAWsF,aAAaC,WAAYN,EAAAjF,QAAWsF,aAAaC,YACvFjK,EAIJ,QAAS0Q,GAAML,EAAQC,GAC1B,MAAOF,GAAKC,EAAQC,EAAQ3G,EAAAjF,QAAWgG,SAASC,SAI7C,QAASgG,GAAKN,EAAQC,GACzB,MAAOF,GAAKC,EAAQC,EAAQ3G,EAAAjF,QAAWgG,SAASkG,cAI7C,QAASC,GAAIR,EAAQC,GACxB,MAAOF,GAAKC,EAAQC,EAAQ3G,EAAAjF,QAAWgG,SAASoG,OAI7C,QAASC,GAAO5G,EAAO6G,EAAQC,EAAUC,GAC3BvP,SAAbsP,IACAA,EAAWtH,EAAAjF,QAAWyM,SAASC,SACnBzP,SAAZuP,IACAA,EAAUvH,EAAAjF,QAAW2M,QAAQC,iBAG7BL,IAAatH,EAAAjF,QAAWyM,SAASI,SACjCN,EAAWtH,EAAAjF,QAAWyM,SAASK,QAC1BP,IAAatH,EAAAjF,QAAWyM,SAASK,UACtCP,EAAWtH,EAAAjF,QAAWyM,SAASI,SAEnC,IAAIE,GAAK,GAAI9H,GAAAjF,QAAWgN,cAAc,EAAGC,EACzCF,GAAGrH,SAASD,EAAO8G,EAAUC,EAC7B,IAAIU,KAEJ,OADAH,GAAGhH,QAAQmH,EAAWZ,GACfY,ELsXVjW,OAAOI,eAAe8E,EAAS,cAC3BzE,OAAO,IAEXyE,EAAQ8Q,aAAe9Q,EAAQiJ,cAAgBjJ,EAAQyN,kBAAoBzN,EAAQ4I,iBAAmB5I,EAAQgR,mBAAqBlQ,OACnId,EKvnBesG,oBLwnBftG,EKhnBeuG,QLinBfvG,EK1mBe0H,oBL2mBf1H,EKpmBegI,uBLqmBfhI,EK7lBesI,yBL8lBftI,EKziBeuM,sBL0iBfvM,EKriBewM,uBLsiBfxM,EKlgBe0N,uBLmgBf1N,EKheegO,mBLiefhO,EK7beqO,gBL8bfrO,EK7aeuP,OL8afvP,EKpae6P,QLqaf7P,EKhae8P,OLiaf9P,EK5ZegQ,ML6ZfhQ,EKxZekQ,QA5XhB,IAAAe,GAAAzX,EAAA,GLwxBKsP,EAAepF,EAAuBuN,GKvxB3CC,EAAA1X,EAAA,IL2xBKoR,EAAiBlH,EAAuBwN,GKzxBhCF,uBAAqB,MACrBpI,qBAAmBoI,EAAqB,KACxCvD,sBAAoB,EAAI,IACxBxE,kBAAgB,IAChB6H,iBAAe,KLo3Cf,WAC4B,mBAAzB9O,wBAIXA,qBAAqBmP,SK73CbH,EL63C0C,qBAAsB,wDAExEhP,qBAAqBmP,SK93CbvI,EL83CwC,mBAAoB,wDAEpE5G,qBAAqBmP,SK/3Cb1D,EL+3CyC,oBAAqB,wDAEtEzL,qBAAqBmP,SKh4CblI,ELg4CqC,gBAAiB,wDAE9DjH,qBAAqBmP,SKj4CbL,ELi4CoC,eAAgB,wDAE5D9O,qBAAqBmP,SK/3CjBrN,EL+3CgD,uBAAwB,wDAE5E9B,qBAAqBmP,SKh2CjBjM,ELg2C6C,oBAAqB,wDAEtElD,qBAAqBmP,SKr0CjB7L,ELq0CoD,2BAA4B,wDAEpFtD,qBAAqBmP,SK5xCjBlL,EL4xC8C,qBAAsB,wDAExEjE,qBAAqBmP,SKnwCV7K,ELmwCsC,oBAAqB,wDAEtEtE,qBAAqBmP,SK7vCV5K,EL6vC0B,QAAS,wDAE9CvE,qBAAqBmP,SKxvCVzJ,ELwvCsC,oBAAqB,wDAEtE1F,qBAAqBmP,SKnvCVnJ,ELmvCyC,uBAAwB,wDAE5EhG,qBAAqBmP,SK7uCV7I,EL6uC2C,yBAA0B,wDAEhFtG,qBAAqBmP,SKjuCjB9H,ELiuCkD,yBAA0B,wDAEhFrH,qBAAqBmP,SK3tCjBpH,EL2tC+C,sBAAuB,wDAE1E/H,qBAAqBmP,SK9rCV5E,EL8rCwC,sBAAuB,wDAE1EvK,qBAAqBmP,SK3rCV3E,EL2rCyC,uBAAwB,wDAE5ExK,qBAAqBmP,SKzpCVzD,ELypCyC,uBAAwB,wDAE5E1L,qBAAqBmP,SKxnCVnD,ELwnCqC,mBAAoB,wDAEpEhM,qBAAqBmP,SKtlCV9C,ELslCkC,gBAAiB,wDAE9DrM,qBAAqBmP,SKvkCV5B,ELukCyB,OAAQ,wDAE5CvN,qBAAqBmP,SK/jCVtB,EL+jC0B,QAAS,wDAE9C7N,qBAAqBmP,SK5jCVrB,EL4jCyB,OAAQ,wDAE5C9N,qBAAqBmP,SKzjCVnB,ELyjCwB,MAAO,wDAE1ChO,qBAAqBmP,SKtjCVjB,ELsjC2B,SAAU,8DAO/C,SAAU3R,EAAQyB,EAASxG,GM58CjC,GAAA4X,GAAAC,GAiEA,WAEA,YA2EA,SAAAC,GAAAvS,EAAAC,EAAAlB,GAKAyT,GAAAC,gBAAA,EACA,MAAAzS,IACA,gBAAAA,IAAA,sBAAA4D,KAAA8O,QAAA1S,GACA,gBAAAA,GAAA4D,KAAA+O,WAAA3S,EAAAC,EAAAlB,GACA,MAAAkB,GAAA,gBAAAD,GAAA4D,KAAAgP,WAAA5S,EAAA,KACA4D,KAAAgP,WAAA5S,EAAAC,IAGA,QAAA4S,KAEA,UAAAN,GAAA,KAAAxQ,eASA,QAAA+Q,GAAA7V,EAAAkE,EAAA0F,EAAApG,EAAA1B,EAAAgU,GAEA,OAAAA,GAAA,GACA,CACA,GAAAC,GAAA7R,EAAAyC,KAAA3G,KAAA4J,EAAApG,GAAA1B,CACAA,GAAAyE,KAAAyP,MAAAD,EAAA,UACAnM,EAAApG,KAAA,SAAAuS,EAEA,MAAAjU,GAKA,QAAAmU,GAAAjW,EAAAkE,EAAA0F,EAAApG,EAAA1B,EAAAgU,GAIA,IAFA,GAAAI,GAAA,MAAAhS,EACAiS,EAAAjS,GAAA,KACA4R,GAAA,GACA,CACA,GAAAjV,GAAA,MAAA8F,KAAA3G,GACAgC,EAAA2E,KAAA3G,MAAA,GACAmE,EAAAgS,EAAAtV,EAAAmB,EAAAkU,CACArV,GAAAqV,EAAArV,IAAA,MAAAsD,IAAA,IAAAyF,EAAApG,IAAA,WAAA1B,GACAA,GAAAjB,IAAA,KAAAsD,IAAA,IAAAgS,EAAAnU,GAAAF,IAAA,IACA8H,EAAApG,KAAA,WAAA3C,EAEA,MAAAiB,GAIA,QAAAsU,GAAApW,EAAAkE,EAAA0F,EAAApG,EAAA1B,EAAAgU,GAIA,IAFA,GAAAI,GAAA,MAAAhS,EACAiS,EAAAjS,GAAA,KACA4R,GAAA,GACA,CACA,GAAAjV,GAAA,MAAA8F,KAAA3G,GACAgC,EAAA2E,KAAA3G,MAAA,GACAmE,EAAAgS,EAAAtV,EAAAmB,EAAAkU,CACArV,GAAAqV,EAAArV,IAAA,MAAAsD,IAAA,IAAAyF,EAAApG,GAAA1B,EACAA,GAAAjB,GAAA,KAAAsD,GAAA,IAAAgS,EAAAnU,EACA4H,EAAApG,KAAA,UAAA3C,EAEA,MAAAiB,GAmCA,QAAAuU,GAAAP,GAEA,MAAAQ,IAAAC,OAAAT,GAGA,QAAAU,GAAAhP,EAAAxH,GAEA,GAAA8B,GAAA2U,GAAAjP,EAAAkP,WAAA1W,GACA,cAAA8B,GAAA,EAAAA,EAGA,QAAA6U,GAAAC,GAEA,OAAA5W,GAAA2G,KAAAmC,EAAA,EAA4B9I,GAAA,IAAQA,EAAA4W,EAAA5W,GAAA2G,KAAA3G,EACpC4W,GAAA9N,EAAAnC,KAAAmC,EACA8N,EAAApP,EAAAb,KAAAa,EAGA,QAAAqP,GAAA3S,GAEAyC,KAAAmC,EAAA,EACAnC,KAAAa,EAAAtD,EAAA,OACAA,EAAA,EAAAyC,KAAA,GAAAzC,EACAA,GAAA,EAAAyC,KAAA,GAAAzC,EAAAyC,KAAAmQ,GACAnQ,KAAAmC,EAAA,EAGA,QAAAiO,GAAA/W,GAEA,GAAA4W,GAAAhB,GAEA,OADAgB,GAAAnB,QAAAzV,GACA4W,EAGA,QAAAI,GAAAxP,EAAAxE,GAEA,GAAAiU,EACA,QAAAjU,EAAAiU,EAAA,MACA,OAAAjU,EAAAiU,EAAA,MACA,SAAAjU,EAAAiU,EAAA,MACA,OAAAjU,EAAAiU,EAAA,MACA,QAAAjU,EAAAiU,EAAA,MACA,OAAAjU,EAIA,WADA2D,MAAAuQ,UAAA1P,EAAAxE,EAHAiU,GAAA,EAMAtQ,KAAAmC,EAAA,EACAnC,KAAAa,EAAA,CAIA,KAHA,GAAAxH,GAAAwH,EAAAvH,OACAkX,GAAA,EACAC,EAAA,IACApX,GAAA,GACA,CACA,GAAAkE,GAAA,GAAA+S,EAAA,IAAAzP,EAAAxH,GAAAwW,EAAAhP,EAAAxH,EACAkE,GAAA,EAEA,KAAAsD,EAAA+O,OAAAvW,KAAAmX,GAAA,IAGAA,GAAA,EACA,GAAAC,EACAzQ,UAAAmC,KAAA5E,EACAkT,EAAAH,EAAAtQ,KAAA0Q,IAEA1Q,UAAAmC,EAAA,KAAA5E,GAAA,GAAAyC,KAAA0Q,GAAAD,GAAA,IAAAA,EACAzQ,UAAAmC,KAAA5E,GAAAyC,KAAA0Q,GAAAD,GAGAzQ,UAAAmC,EAAA,IAAA5E,GAAAkT,EACAA,GAAAH,EACAG,GAAAzQ,KAAA0Q,KAAAD,GAAAzQ,KAAA0Q,KAEA,GAAAJ,GAAA,QAAAzP,EAAA,MAEAb,KAAAa,GAAA,EACA4P,EAAA,IAAAzQ,UAAAmC,EAAA,QAAAnC,KAAA0Q,GAAAD,GAAA,GAAAA,IAEAzQ,KAAA2Q,QACAH,GAAA7B,EAAAiC,KAAAC,MAAA7Q,WAGA,QAAA8Q,KAGA,IADA,GAAA3V,GAAA6E,KAAAa,EAAAb,KAAA+Q,GACA/Q,KAAAmC,EAAA,GAAAnC,UAAAmC,EAAA,IAAAhH,KAAA6E,KAAAmC,EAGA,QAAA6O,GAAA3U,GAEA,GAAA2D,KAAAa,EAAA,YAAAb,KAAAiR,SAAArQ,SAAAvE,EACA,IAAAiU,EACA,QAAAjU,EAAAiU,EAAA,MACA,OAAAjU,EAAAiU,EAAA,MACA,OAAAjU,EAAAiU,EAAA,MACA,QAAAjU,EAAAiU,EAAA,MACA,OAAAjU,EACA,MAAA2D,MAAAkR,QAAA7U,EADAiU,GAAA,EAEA,GACAa,GADAC,GAAA,GAAAd,GAAA,EACA9S,GAAA,EACAyS,EAAA,GACA5W,EAAA2G,KAAAmC,EACA1E,EAAAuC,KAAA0Q,GAAArX,EAAA2G,KAAA0Q,GAAAJ,CACA,IAAAjX,KAAA,EAOA,IALAoE,EAAAuC,KAAA0Q,KAAAS,EAAAnR,KAAA3G,IAAAoE,GAAA,IAEAD,GAAA,EACAyS,EAAAP,EAAAyB,IAEA9X,GAAA,GAEAoE,EAAA6S,GAEAa,GAAAnR,KAAA3G,IAAA,GAAAoE,GAAA,IAAA6S,EAAA7S,EACA0T,GAAAnR,OAAA3G,KAAAoE,GAAAuC,KAAA0Q,GAAAJ,KAIAa,EAAAnR,KAAA3G,KAAAoE,GAAA6S,GAAAc,EACA3T,GAAA,IAEAA,GAAAuC,KAAA0Q,KACArX,IAGA8X,EAAA,IAAA3T,GAAA,GACAA,IAAAyS,GAAAP,EAAAyB,GAGA,OAAA3T,GAAAyS,EAAA,IAGA,QAAAoB,KAEA,GAAApB,GAAAhB,GAEA,OADAN,GAAAiC,KAAAC,MAAA7Q,KAAAiQ,GACAA,EAGA,QAAAqB,KAEA,MAAAtR,MAAAa,EAAA,EAAAb,KAAAiR,SAAAjR,KAGA,QAAAuR,GAAAnV,GAEA,GAAA6T,GAAAjQ,KAAAa,EAAAzE,EAAAyE,CACA,OAAAoP,EAAA,MAAAA,EACA,IAAA5W,GAAA2G,KAAAmC,CAEA,IADA8N,EAAA5W,EAAA+C,EAAA+F,EACA,GAAA8N,EAAA,MAAAjQ,MAAAa,EAAA,GAAAoP,GACA,QAAA5W,GAAA,GACA,OAAA4W,EAAAjQ,KAAA3G,GAAA+C,EAAA/C,IAAA,MAAA4W,EACA,UAGA,QAAAuB,GAAAjU,GAEA,GACA4E,GADA8N,EAAA,CA2BA,OAzBA,KAAA9N,EAAA5E,IAAA,MAEAA,EAAA4E,EACA8N,GAAA,IAEA,IAAA9N,EAAA5E,GAAA,KAEAA,EAAA4E,EACA8N,GAAA,GAEA,IAAA9N,EAAA5E,GAAA,KAEAA,EAAA4E,EACA8N,GAAA,GAEA,IAAA9N,EAAA5E,GAAA,KAEAA,EAAA4E,EACA8N,GAAA,GAEA,IAAA9N,EAAA5E,GAAA,KAEAA,EAAA4E,EACA8N,GAAA,GAEAA,EAGA,QAAAwB,KAEA,MAAAzR,MAAAmC,GAAA,IACAnC,KAAA0Q,IAAA1Q,KAAAmC,EAAA,GAAAqP,EAAAxR,UAAAmC,EAAA,GAAAnC,KAAAa,EAAAb,KAAA+Q,IAGA,QAAAW,GAAAvC,EAAAc,GAEA,GAAA5W,EACA,KAAAA,EAAA2G,KAAAmC,EAAA,EAAwB9I,GAAA,IAAQA,EAAA4W,EAAA5W,EAAA8V,GAAAnP,KAAA3G,EAChC,KAAAA,EAAA8V,EAAA,EAAmB9V,GAAA,IAAQA,EAAA4W,EAAA5W,GAAA,CAC3B4W,GAAA9N,EAAAnC,KAAAmC,EAAAgN,EACAc,EAAApP,EAAAb,KAAAa,EAGA,QAAA8Q,GAAAxC,EAAAc,GAEA,OAAA5W,GAAA8V,EAAmB9V,EAAA2G,KAAAmC,IAAY9I,EAAA4W,EAAA5W,EAAA8V,GAAAnP,KAAA3G,EAC/B4W,GAAA9N,EAAAvC,KAAAa,IAAAT,KAAAmC,EAAAgN,EAAA,GACAc,EAAApP,EAAAb,KAAAa,EAGA,QAAA+Q,GAAAzC,EAAAc,GAEA,GAKA5W,GALAwY,EAAA1C,EAAAnP,KAAA0Q,GACAoB,EAAA9R,KAAA0Q,GAAAmB,EACAE,GAAA,GAAAD,GAAA,EACAE,EAAApS,KAAAyP,MAAAF,EAAAnP,KAAA0Q,IACAvV,EAAA6E,KAAAa,GAAAgR,EAAA7R,KAAA+Q,EAEA,KAAA1X,EAAA2G,KAAAmC,EAAA,EAAwB9I,GAAA,IAAQA,EAEhC4W,EAAA5W,EAAA2Y,EAAA,GAAAhS,KAAA3G,IAAAyY,EAAA3W,EACAA,GAAA6E,KAAA3G,GAAA0Y,IAAAF,CAEA,KAAAxY,EAAA2Y,EAAA,EAAoB3Y,GAAA,IAAQA,EAAA4W,EAAA5W,GAAA,CAC5B4W,GAAA+B,GAAA7W,EACA8U,EAAA9N,EAAAnC,KAAAmC,EAAA6P,EAAA,EACA/B,EAAApP,EAAAb,KAAAa,EACAoP,EAAAU,QAGA,QAAAsB,GAAA9C,EAAAc,GAEAA,EAAApP,EAAAb,KAAAa,CACA,IAAAmR,GAAApS,KAAAyP,MAAAF,EAAAnP,KAAA0Q,GACA,IAAAsB,GAAAhS,KAAAmC,EAGA,YADA8N,EAAA9N,EAAA,EAGA,IAAA0P,GAAA1C,EAAAnP,KAAA0Q,GACAoB,EAAA9R,KAAA0Q,GAAAmB,EACAE,GAAA,GAAAF,GAAA,CACA5B,GAAA,GAAAjQ,KAAAgS,IAAAH,CACA,QAAAxY,GAAA2Y,EAAA,EAAwB3Y,EAAA2G,KAAAmC,IAAY9I,EAEpC4W,EAAA5W,EAAA2Y,EAAA,KAAAhS,KAAA3G,GAAA0Y,IAAAD,EACA7B,EAAA5W,EAAA2Y,GAAAhS,KAAA3G,IAAAwY,CAEAA,GAAA,IAAA5B,EAAAjQ,KAAAmC,EAAA6P,EAAA,KAAAhS,KAAAa,EAAAkR,IAAAD,GACA7B,EAAA9N,EAAAnC,KAAAmC,EAAA6P,EACA/B,EAAAU,QAGA,QAAAuB,GAAA9V,EAAA6T,GAKA,IAHA,GAAA5W,GAAA,EACA8B,EAAA,EACAqC,EAAAoC,KAAA+M,IAAAvQ,EAAA+F,EAAAnC,KAAAmC,GACA9I,EAAAmE,GAEArC,GAAA6E,KAAA3G,GAAA+C,EAAA/C,GACA4W,EAAA5W,KAAA8B,EAAA6E,KAAA+Q,GACA5V,IAAA6E,KAAA0Q,EAEA,IAAAtU,EAAA+F,EAAAnC,KAAAmC,EACA,CAEA,IADAhH,GAAAiB,EAAAyE,EACAxH,EAAA2G,KAAAmC,GAEAhH,GAAA6E,KAAA3G,GACA4W,EAAA5W,KAAA8B,EAAA6E,KAAA+Q,GACA5V,IAAA6E,KAAA0Q,EAEAvV,IAAA6E,KAAAa,MAGA,CAEA,IADA1F,GAAA6E,KAAAa,EACAxH,EAAA+C,EAAA+F,GAEAhH,GAAAiB,EAAA/C,GACA4W,EAAA5W,KAAA8B,EAAA6E,KAAA+Q,GACA5V,IAAA6E,KAAA0Q,EAEAvV,IAAAiB,EAAAyE,EAEAoP,EAAApP,EAAA1F,EAAA,OACAA,GAAA,EAAA8U,EAAA5W,KAAA2G,KAAAmQ,GAAAhV,EACAA,EAAA,IAAA8U,EAAA5W,KAAA8B,GACA8U,EAAA9N,EAAA9I,EACA4W,EAAAU,QAIA,QAAAwB,GAAA/V,EAAA6T,GAEA,GAAA1S,GAAAyC,KAAAQ,MACAG,EAAAvE,EAAAoE,MACAnH,EAAAkE,EAAA4E,CAEA,KADA8N,EAAA9N,EAAA9I,EAAAsH,EAAAwB,IACA9I,GAAA,GAAA4W,EAAA5W,GAAA,CACA,KAAAA,EAAA,EAAeA,EAAAsH,EAAAwB,IAAS9I,EAAA4W,EAAA5W,EAAAkE,EAAA4E,GAAA5E,EAAA6U,GAAA,EAAAzR,EAAAtH,GAAA4W,EAAA5W,EAAA,EAAAkE,EAAA4E,EACxB8N,GAAApP,EAAA,EACAoP,EAAAU,QACA3Q,KAAAa,GAAAzE,EAAAyE,GAAA8N,EAAAiC,KAAAC,MAAAZ,KAGA,QAAAoC,GAAApC,GAIA,IAFA,GAAA1S,GAAAyC,KAAAQ,MACAnH,EAAA4W,EAAA9N,EAAA,EAAA5E,EAAA4E,IACA9I,GAAA,GAAA4W,EAAA5W,GAAA,CACA,KAAAA,EAAA,EAAeA,EAAAkE,EAAA4E,EAAA,IAAa9I,EAC5B,CACA,GAAA8B,GAAAoC,EAAA6U,GAAA/Y,EAAAkE,EAAAlE,GAAA4W,EAAA,EAAA5W,EAAA,MACA4W,EAAA5W,EAAAkE,EAAA4E,IAAA5E,EAAA6U,GAAA/Y,EAAA,IAAAkE,EAAAlE,GAAA4W,EAAA,EAAA5W,EAAA,EAAA8B,EAAAoC,EAAA4E,EAAA9I,EAAA,KAAAkE,EAAA4S,KAEAF,EAAA5W,EAAAkE,EAAA4E,IAAA5E,EAAA4S,GACAF,EAAA5W,EAAAkE,EAAA4E,EAAA,MAGA8N,EAAA9N,EAAA,IAAA8N,IAAA9N,EAAA,IAAA5E,EAAA6U,GAAA/Y,EAAAkE,EAAAlE,GAAA4W,EAAA,EAAA5W,EAAA,MACA4W,EAAApP,EAAA,EACAoP,EAAAU,QAIA,QAAA2B,GAAA9U,EAAA+U,EAAAtC,GAEA,GAAAuC,GAAAhV,EAAAgD,KACA,MAAAgS,EAAArQ,GAAA,IACA,GAAAuK,GAAA1M,KAAAQ,KACA,IAAAkM,EAAAvK,EAAAqQ,EAAArQ,EAIA,MAFA,OAAAoQ,KAAAzD,QAAA,QACA,MAAAmB,GAAAjQ,KAAAyS,OAAAxC,GAGA,OAAAA,MAAAhB,IACA,IAAAtO,GAAAsO,IACAyD,EAAA1S,KAAAa,EACA8R,EAAAnV,EAAAqD,EACA+R,EAAA5S,KAAA0Q,GAAAc,EAAAgB,IAAArQ,EAAA,GACAyQ,GAAA,GAEAJ,EAAAK,SAAAD,EAAAjS,GACA+L,EAAAmG,SAAAD,EAAA3C,KAIAuC,EAAAC,OAAA9R,GACA+L,EAAA+F,OAAAxC,GAEA,IAAA6C,GAAAnS,EAAAwB,EACA4Q,EAAApS,EAAAmS,EAAA,EACA,OAAAC,EAAA,CACA,GAAAC,GAAAD,GAAA,GAAA/S,KAAAiT,KAAAH,EAAA,EAAAnS,EAAAmS,EAAA,IAAA9S,KAAAkT,GAAA,GACAC,EAAAnT,KAAAoT,GAAAJ,EACAK,GAAA,GAAArT,KAAAiT,IAAAD,EACAlc,EAAA,GAAAkJ,KAAAkT,GACA7Z,EAAA4W,EAAA9N,EACAtF,EAAAxD,EAAAyZ,EACA3Q,EAAA,MAAAoQ,EAAAtD,IAAAsD,CASA,KARA5R,EAAA2S,UAAAzW,EAAAsF,GACA8N,EAAAsD,UAAApR,IAAA,IAEA8N,IAAA9N,KAAA,EACA8N,EAAAY,MAAA1O,EAAA8N,IAEAtB,EAAA6E,IAAAF,UAAAR,EAAA3Q,GACAA,EAAA0O,MAAAlQ,KACAA,EAAAwB,EAAA2Q,GAAAnS,IAAAwB,KAAA,CACA,QAAAtF,GAAA,GACA,CAEA,GAAA4W,GAAAxD,IAAA5W,IAAA0Z,EAAA/S,KAAA+Q,GAAAnR,KAAAyP,MAAAY,EAAA5W,GAAA8Z,GAAAlD,EAAA5W,EAAA,GAAAvC,GAAAuc,EACA,KAAApD,EAAA5W,IAAAsH,EAAAyR,GAAA,EAAAqB,EAAAxD,EAAApT,EAAA,EAAAiW,IAAAW,EAIA,IAFA9S,EAAA2S,UAAAzW,EAAAsF,GACA8N,EAAAY,MAAA1O,EAAA8N,GACAA,EAAA5W,KAAAoa,GAAAxD,EAAAY,MAAA1O,EAAA8N,GAGA,MAAAsC,IAEAtC,EAAAyD,UAAAZ,EAAAP,GACAG,GAAAC,GAAAhE,EAAAiC,KAAAC,MAAA0B,MAEAtC,EAAA9N,EAAA2Q,EACA7C,EAAAU,QACAiC,EAAA,GAAA3C,EAAA0D,SAAAf,EAAA3C,GACAyC,EAAA,GAAA/D,EAAAiC,KAAAC,MAAAZ,OAGA,QAAA2D,GAAAxX,GAEA,GAAA6T,GAAAhB,GAGA,OAFAjP,MAAAQ,MAAAqT,SAAAzX,EAAA,KAAA6T,GACAjQ,KAAAa,EAAA,GAAAoP,EAAAsD,UAAA5E,EAAAiC,MAAA,GAAAxU,EAAAyU,MAAAZ,KACAA,EAGA,QAAA6D,GAAAtW,GAEAwC,KAAAxC,IAGA,QAAAuW,GAAAxW,GAEA,MAAAA,GAAAsD,EAAA,GAAAtD,EAAAgW,UAAAvT,KAAAxC,IAAA,EAAAD,EAAAyW,IAAAhU,KAAAxC,GACAD,EAGA,QAAA0W,GAAA1W,GAEA,MAAAA,GAGA,QAAA2W,GAAA3W,GAEAA,EAAAsW,SAAA7T,KAAAxC,EAAA,KAAAD,GAGA,QAAA4W,GAAA5W,EAAAoD,EAAAsP,GAEA1S,EAAA6W,WAAAzT,EAAAsP,GACAjQ,KAAAqU,OAAApE,GAGA,QAAAqE,GAAA/W,EAAA0S,GAEA1S,EAAAgX,SAAAtE,GACAjQ,KAAAqU,OAAApE,GAiBA,QAAAuE,KAEA,GAAAxU,KAAAmC,EAAA,UACA,IAAA5E,GAAAyC,KAAA,EACA,UAAAzC,GAAA,QACA,IAAAoD,GAAA,EAAApD,CAQA,OAPAoD,MAAA,MAAApD,GAAAoD,GAAA,GACAA,KAAA,OAAApD,GAAAoD,GAAA,IACAA,KAAA,UAAApD,GAAAoD,EAAA,cAGAA,KAAA,EAAApD,EAAAoD,EAAAX,KAAAmQ,IAAAnQ,KAAAmQ,GAEAxP,EAAA,EAAAX,KAAAmQ,GAAAxP,KAGA,QAAA8T,GAAAjX,GAEAwC,KAAAxC,IACAwC,KAAA0U,GAAAlX,EAAAmX,WACA3U,KAAA4U,IAAA,MAAA5U,KAAA0U,GACA1U,KAAA6U,IAAA7U,KAAA0U,IAAA,GACA1U,KAAA8U,IAAA,GAAAtX,EAAAkT,GAAA,MACA1Q,KAAA+U,IAAA,EAAAvX,EAAA2E,EAGA,QAAA6S,GAAAzX,GAEA,GAAA0S,GAAAhB,GAIA,OAHA1R,GAAAiD,MAAA8S,UAAAtT,KAAAxC,EAAA2E,EAAA8N,GACAA,EAAA4D,SAAA7T,KAAAxC,EAAA,KAAAyS,GACA1S,EAAAsD,EAAA,GAAAoP,EAAAsD,UAAA5E,EAAAiC,MAAA,GAAA5Q,KAAAxC,EAAAqT,MAAAZ,KACAA,EAGA,QAAAgF,GAAA1X,GAEA,GAAA0S,GAAAhB,GAGA,OAFA1R,GAAAkV,OAAAxC,GACAjQ,KAAAqU,OAAApE,GACAA,EAGA,QAAAiF,GAAA3X,GAEA,KAAAA,EAAA4E,GAAAnC,KAAA+U,KACAxX,IAAA4E,KAAA,CACA,QAAA9I,GAAA,EAAmBA,EAAA2G,KAAAxC,EAAA2E,IAAc9I,EACjC,CAEA,GAAAwD,GAAA,MAAAU,EAAAlE,GACA8b,EAAAtY,EAAAmD,KAAA4U,MAAA/X,EAAAmD,KAAA6U,KAAAtX,EAAAlE,IAAA,IAAA2G,KAAA4U,IAAA5U,KAAA8U,KAAA,IAAAvX,EAAAwT,EAKA,KAHAlU,EAAAxD,EAAA2G,KAAAxC,EAAA2E,EACA5E,EAAAV,IAAAmD,KAAAxC,EAAA4U,GAAA,EAAA+C,EAAA5X,EAAAlE,EAAA,EAAA2G,KAAAxC,EAAA2E,GAEA5E,EAAAV,IAAAU,EAAA4S,IAEA5S,EAAAV,IAAAU,EAAA4S,GACA5S,IAAAV,KAGAU,EAAAoT,QACApT,EAAAmW,UAAA1T,KAAAxC,EAAA2E,EAAA5E,GACAA,EAAAgW,UAAAvT,KAAAxC,IAAA,GAAAD,EAAAsT,MAAA7Q,KAAAxC,EAAAD,GAGA,QAAA6X,GAAA7X,EAAA0S,GAEA1S,EAAAgX,SAAAtE,GACAjQ,KAAAqU,OAAApE,GAGA,QAAAoF,GAAA9X,EAAAoD,EAAAsP,GAEA1S,EAAA6W,WAAAzT,EAAAsP,GACAjQ,KAAAqU,OAAApE,GAQA,QAAAqF,KAEA,WAAAtV,KAAAmC,EAAA,IAAAnC,KAAA,GAAAA,KAAAa,GAGA,QAAA0U,GAAAze,EAAA0e,GAEA,GAAA1e,EAAA,YAAAA,EAAA,QAAA6X,GAAA6E,GACA,IAAAvD,GAAAhB,IACAwG,EAAAxG,IACAyG,EAAAF,EAAAG,QAAA3V,MACA3G,EAAAmY,EAAA1a,GAAA,CAEA,KADA4e,EAAAjD,OAAAxC,KACA5W,GAAA,GAGA,GADAmc,EAAAI,MAAA3F,EAAAwF,IACA3e,EAAA,GAAAuC,GAAA,EAAAmc,EAAAK,MAAAJ,EAAAC,EAAAzF,OAEA,CACA,GAAA9N,GAAA8N,CACAA,GAAAwF,EACAA,EAAAtT,EAGA,MAAAqT,GAAAM,OAAA7F,GAGA,QAAA8F,GAAAjf,EAAA0G,GAEA,GAAAgY,EAGA,OAFAA,GAAA1e,EAAA,KAAA0G,EAAAwY,SAAA,GAAAlC,GAAAtW,GACA,GAAAiX,GAAAjX,GACAwC,KAAAiW,IAAAnf,EAAA0e,GAoCA,QAAAU,KAEA,GAAAjG,GAAAhB,GAEA,OADAjP,MAAAyS,OAAAxC,GACAA,EAGA,QAAAkG,KAEA,GAAAnW,KAAAa,EAAA,EACA,CACA,MAAAb,KAAAmC,EAAA,MAAAnC,MAAA,GAAAA,KAAAmQ,EACA,OAAAnQ,KAAAmC,EAAA,aAEA,OAAAnC,KAAAmC,EAAA,MAAAnC,MAAA,EACA,OAAAA,KAAAmC,EAAA,SAEA,OAAAnC,KAAA,UAAAA,KAAA0Q,IAAA,IAAA1Q,KAAA0Q,GAAA1Q,KAAA,GAGA,QAAAoW,KAEA,UAAApW,KAAAmC,EAAAnC,KAAAa,EAAAb,KAAA,WAGA,QAAAqW,KAEA,UAAArW,KAAAmC,EAAAnC,KAAAa,EAAAb,KAAA,WAGA,QAAAsW,GAAArG,GAEA,MAAArQ,MAAAyP,MAAAzP,KAAA2W,IAAAvW,KAAA0Q,GAAA9Q,KAAA4W,IAAAvG,IAGA,QAAAwG,KAEA,MAAAzW,MAAAa,EAAA,KACAb,KAAAmC,GAAA,MAAAnC,KAAAmC,GAAAnC,KAAA,QACA,EAGA,QAAA0W,IAAAra,GAGA,GADA,MAAAA,MAAA,IACA,GAAA2D,KAAA2W,UAAAta,EAAA,GAAAA,EAAA,YACA,IAAAua,GAAA5W,KAAA6W,UAAAxa,GACAD,EAAAwD,KAAAkX,IAAAza,EAAAua,GACAzF,EAAAf,EAAAhU,GACAuE,EAAAsO,IACAuG,EAAAvG,IACAgB,EAAA,EAEA,KADAjQ,KAAA6T,SAAA1C,EAAAxQ,EAAA6U,GACA7U,EAAAgW,SAAA,GAEA1G,GAAA7T,EAAAoZ,EAAAuB,YAAAnW,SAAAvE,GAAA2a,OAAA,GAAA/G,EACAtP,EAAAkT,SAAA1C,EAAAxQ,EAAA6U,EAEA,OAAAA,GAAAuB,WAAAnW,SAAAvE,GAAA4T,EAGA,QAAAgH,IAAApW,EAAAxE,GAEA2D,KAAA8O,QAAA,GACA,MAAAzS,MAAA,GAMA,QALAua,GAAA5W,KAAA6W,UAAAxa,GACA8U,EAAAvR,KAAAkX,IAAAza,EAAAua,GACApG,GAAA,EACA3T,EAAA,EACAoG,EAAA,EACA5J,EAAA,EAAmBA,EAAAwH,EAAAvH,SAAcD,EACjC,CACA,GAAAkE,GAAAsS,EAAAhP,EAAAxH,EACAkE,GAAA,EAEA,KAAAsD,EAAA+O,OAAAvW,IAAA,GAAA2G,KAAA2W,WAAAnG,GAAA,IAGAvN,EAAA5G,EAAA4G,EAAA1F,IACAV,GAAA+Z,IAEA5W,KAAAkX,UAAA/F,GACAnR,KAAAmX,WAAAlU,EAAA,GACApG,EAAA,EACAoG,EAAA,IAGApG,EAAA,IAEAmD,KAAAkX,UAAAtX,KAAAkX,IAAAza,EAAAQ,IACAmD,KAAAmX,WAAAlU,EAAA,IAEAuN,GAAA7B,EAAAiC,KAAAC,MAAA7Q,WAGA,QAAAoX,IAAAhb,EAAAC,EAAAlB,GAEA,mBAAAkB,GAGA,GAAAD,EAAA,EAAA4D,KAAA8O,QAAA,OAOA,KAJA9O,KAAA+O,WAAA3S,EAAAjB,GACA6E,KAAAqX,QAAAjb,EAAA,IACA4D,KAAAsX,UAAA3I,EAAA6E,IAAA+D,UAAAnb,EAAA,GAAAob,GAAAxX,MACAA,KAAAgW,UAAAhW,KAAAmX,WAAA,MACAnX,KAAAyX,gBAAApb,IAEA2D,KAAAmX,WAAA,KACAnX,KAAA0X,YAAAtb,GAAA4D,KAAA6Q,MAAAlC,EAAA6E,IAAA+D,UAAAnb,EAAA,GAAA4D,UAKA,CAEA,GAAAzC,GAAA,GAAAmC,OACAyC,EAAA,EAAA/F,CACAmB,GAAAjE,QAAA8C,GAAA,KACAC,EAAAsb,UAAApa,GACA4E,EAAA,EAAA5E,EAAA,QAAA4E,GAAA,EACA5E,EAAA,KACAyC,KAAAgP,WAAAzR,EAAA,MAIA,QAAAqa,MAEA,GAAAve,GAAA2G,KAAAmC,EACA8N,EAAA,GAAAvQ,MACAuQ,GAAA,GAAAjQ,KAAAa,CACA,IACAsQ,GADA1T,EAAAuC,KAAA0Q,GAAArX,EAAA2G,KAAA0Q,GAAA,EACAJ,EAAA,CACA,IAAAjX,KAAA,EAIA,IAFAoE,EAAAuC,KAAA0Q,KAAAS,EAAAnR,KAAA3G,IAAAoE,KAAAuC,KAAAa,EAAAb,KAAA+Q,KAAAtT,IACAwS,EAAAK,KAAAa,EAAAnR,KAAAa,GAAAb,KAAA0Q,GAAAjT,GACApE,GAAA,GAEAoE,EAAA,GAEA0T,GAAAnR,KAAA3G,IAAA,GAAAoE,GAAA,MAAAA,EACA0T,GAAAnR,OAAA3G,KAAAoE,GAAAuC,KAAA0Q,GAAA,KAIAS,EAAAnR,KAAA3G,KAAAoE,GAAA,OACAA,GAAA,IAEAA,GAAAuC,KAAA0Q,KACArX,IAGA,QAAA8X,SAAA,KACA,GAAAb,IAAA,IAAAtQ,KAAAa,KAAA,IAAAsQ,MAAAb,GACAA,EAAA,GAAAa,GAAAnR,KAAAa,KAAAoP,EAAAK,KAAAa,EAGA,OAAAlB,GAGA,QAAA4H,IAAAzb,GAEA,UAAA4D,KAAAuT,UAAAnX,GAGA,QAAA0b,IAAA1b,GAEA,MAAA4D,MAAAuT,UAAAnX,GAAA,EAAA4D,KAAA5D,EAGA,QAAA2b,IAAA3b,GAEA,MAAA4D,MAAAuT,UAAAnX,GAAA,EAAA4D,KAAA5D,EAGA,QAAA4b,IAAA5b,EAAA4B,EAAAiS,GAEA,GAAA5W,GAAA4e,EAAAza,EAAAoC,KAAA+M,IAAAvQ,EAAA+F,EAAAnC,KAAAmC,EACA,KAAA9I,EAAA,EAAeA,EAAAmE,IAAOnE,EAAA4W,EAAA5W,GAAA2E,EAAAgC,KAAA3G,GAAA+C,EAAA/C,GACtB,IAAA+C,EAAA+F,EAAAnC,KAAAmC,EACA,CAEA,IADA8V,EAAA7b,EAAAyE,EAAAb,KAAA+Q,GACA1X,EAAAmE,EAAiBnE,EAAA2G,KAAAmC,IAAY9I,EAAA4W,EAAA5W,GAAA2E,EAAAgC,KAAA3G,GAAA4e,EAC7BhI,GAAA9N,EAAAnC,KAAAmC,MAGA,CAEA,IADA8V,EAAAjY,KAAAa,EAAAb,KAAA+Q,GACA1X,EAAAmE,EAAiBnE,EAAA+C,EAAA+F,IAAS9I,EAAA4W,EAAA5W,GAAA2E,EAAAia,EAAA7b,EAAA/C,GAC1B4W,GAAA9N,EAAA/F,EAAA+F,EAEA8N,EAAApP,EAAA7C,EAAAgC,KAAAa,EAAAzE,EAAAyE,GACAoP,EAAAU,QAGA,QAAAuH,IAAA3a,EAAAoD,GAEA,MAAApD,GAAAoD,EAGA,QAAAwX,IAAA/b,GAEA,GAAA6T,GAAAhB,GAEA,OADAjP,MAAAsX,UAAAlb,EAAA8b,GAAAjI,GACAA,EAGA,QAAAuH,IAAAja,EAAAoD,GAEA,MAAApD,GAAAoD,EAGA,QAAAyX,IAAAhc,GAEA,GAAA6T,GAAAhB,GAEA,OADAjP,MAAAsX,UAAAlb,EAAAob,GAAAvH,GACAA,EAGA,QAAAoI,IAAA9a,EAAAoD,GAEA,MAAApD,GAAAoD,EAGA,QAAA2X,IAAAlc,GAEA,GAAA6T,GAAAhB,GAEA,OADAjP,MAAAsX,UAAAlb,EAAAic,GAAApI,GACAA,EAGA,QAAAsI,IAAAhb,EAAAoD,GAEA,MAAApD,IAAAoD,EAGA,QAAA6X,IAAApc,GAEA,GAAA6T,GAAAhB,GAEA,OADAjP,MAAAsX,UAAAlb,EAAAmc,GAAAtI,GACAA,EAGA,QAAAwI,MAGA,OADAxI,GAAAhB,IACA5V,EAAA,EAAmBA,EAAA2G,KAAAmC,IAAY9I,EAAA4W,EAAA5W,GAAA2G,KAAA+Q,IAAA/Q,KAAA3G,EAG/B,OAFA4W,GAAA9N,EAAAnC,KAAAmC,EACA8N,EAAApP,GAAAb,KAAAa,EACAoP,EAGA,QAAAyI,IAAAvJ,GAEA,GAAAc,GAAAhB,GAGA,OAFAE,GAAA,EAAAnP,KAAA2T,UAAAxE,EAAAc,GACAjQ,KAAA6S,SAAA1D,EAAAc,GACAA,EAGA,QAAA0I,IAAAxJ,GAEA,GAAAc,GAAAhB,GAGA,OAFAE,GAAA,EAAAnP,KAAA6S,UAAA1D,EAAAc,GACAjQ,KAAA2T,SAAAxE,EAAAc,GACAA,EAGA,QAAA2I,IAAArb,GAEA,MAAAA,EAAA,QACA,IAAA0S,GAAA,CAsBA,OArBA,WAAA1S,KAEAA,IAAA,GACA0S,GAAA,IAEA,QAAA1S,KAEAA,IAAA,EACA0S,GAAA,GAEA,OAAA1S,KAEAA,IAAA,EACA0S,GAAA,GAEA,MAAA1S,KAEAA,IAAA,EACA0S,GAAA,GAEA,MAAA1S,MAAA0S,EACAA,EAGA,QAAA4I,MAEA,OAAAxf,GAAA,EAAmBA,EAAA2G,KAAAmC,IAAY9I,EAC/B,MAAA2G,KAAA3G,GAAA,MAAAA,GAAA2G,KAAA0Q,GAAAkI,GAAA5Y,KAAA3G,GACA,OAAA2G,MAAAa,EAAA,EAAAb,KAAAmC,EAAAnC,KAAA0Q,IACA,EAGA,QAAAoI,IAAAvb,GAGA,IADA,GAAA0S,GAAA,EACA,GAAA1S,GAEAA,KAAA,IACA0S,CAEA,OAAAA,GAGA,QAAA8I,MAIA,OAFA9I,GAAA,EACA1S,EAAAyC,KAAAa,EAAAb,KAAA+Q,GACA1X,EAAA,EAAmBA,EAAA2G,KAAAmC,IAAY9I,EAAA4W,GAAA6I,GAAA9Y,KAAA3G,GAAAkE,EAC/B,OAAA0S,GAGA,QAAA+I,IAAA7J,GAEA,GAAAtS,GAAA+C,KAAAyP,MAAAF,EAAAnP,KAAA0Q,GACA,OAAA7T,IAAAmD,KAAAmC,EAAA,GAAAnC,KAAAa,EACA,IAAAb,KAAAnD,GAAA,GAAAsS,EAAAnP,KAAA0Q,IAGA,QAAAuI,IAAA9J,EAAAnR,GAEA,GAAAiS,GAAAtB,EAAA6E,IAAA+D,UAAApI,EAEA,OADAnP,MAAAsX,UAAArH,EAAAjS,EAAAiS,GACAA,EAGA,QAAAiJ,IAAA/J,GAEA,MAAAnP,MAAAmZ,UAAAhK,EAAAqI,IAGA,QAAA4B,IAAAjK,GAEA,MAAAnP,MAAAmZ,UAAAhK,EAAAoJ,IAGA,QAAAc,IAAAlK,GAEA,MAAAnP,MAAAmZ,UAAAhK,EAAAkJ,IAGA,QAAAiB,IAAAld,EAAA6T,GAKA,IAHA,GAAA5W,GAAA,EACA8B,EAAA,EACAqC,EAAAoC,KAAA+M,IAAAvQ,EAAA+F,EAAAnC,KAAAmC,GACA9I,EAAAmE,GAEArC,GAAA6E,KAAA3G,GAAA+C,EAAA/C,GACA4W,EAAA5W,KAAA8B,EAAA6E,KAAA+Q,GACA5V,IAAA6E,KAAA0Q,EAEA,IAAAtU,EAAA+F,EAAAnC,KAAAmC,EACA,CAEA,IADAhH,GAAAiB,EAAAyE,EACAxH,EAAA2G,KAAAmC,GAEAhH,GAAA6E,KAAA3G,GACA4W,EAAA5W,KAAA8B,EAAA6E,KAAA+Q,GACA5V,IAAA6E,KAAA0Q,EAEAvV,IAAA6E,KAAAa,MAGA,CAEA,IADA1F,GAAA6E,KAAAa,EACAxH,EAAA+C,EAAA+F,GAEAhH,GAAAiB,EAAA/C,GACA4W,EAAA5W,KAAA8B,EAAA6E,KAAA+Q,GACA5V,IAAA6E,KAAA0Q,EAEAvV,IAAAiB,EAAAyE,EAEAoP,EAAApP,EAAA1F,EAAA,OACAA,EAAA,EAAA8U,EAAA5W,KAAA8B,EACAA,GAAA,IAAA8U,EAAA5W,KAAA2G,KAAAmQ,GAAAhV,GACA8U,EAAA9N,EAAA9I,EACA4W,EAAAU,QAGA,QAAA4I,IAAAnd,GAEA,GAAA6T,GAAAhB,GAEA,OADAjP,MAAAwZ,MAAApd,EAAA6T,GACAA,EAGA,QAAAwJ,IAAArd,GAEA,GAAA6T,GAAAhB,GAEA,OADAjP,MAAA6Q,MAAAzU,EAAA6T,GACAA,EAGA,QAAAyJ,IAAAtd,GAEA,GAAA6T,GAAAhB,GAEA,OADAjP,MAAAoU,WAAAhY,EAAA6T,GACAA,EAGA,QAAA0J,MAEA,GAAA1J,GAAAhB,GAEA,OADAjP,MAAAuU,SAAAtE,GACAA,EAGA,QAAA2J,IAAAxd,GAEA,GAAA6T,GAAAhB,GAEA,OADAjP,MAAA6T,SAAAzX,EAAA6T,EAAA,MACAA,EAGA,QAAA4J,IAAAzd,GAEA,GAAA6T,GAAAhB,GAEA,OADAjP,MAAA6T,SAAAzX,EAAA,KAAA6T,GACAA,EAGA,QAAA6J,IAAA1d,GAEA,GAAAmW,GAAAtD,IACAgB,EAAAhB,GAEA,OADAjP,MAAA6T,SAAAzX,EAAAmW,EAAAtC,GACA,GAAAvQ,OAAA6S,EAAAtC,GAGA,QAAA8J,IAAA5K,GAEAnP,UAAAmC,GAAAnC,KAAAoS,GAAA,EAAAjD,EAAA,EAAAnP,KAAA,IAAAA,KAAAmC,KACAnC,KAAAmC,EACAnC,KAAA2Q,QAGA,QAAAqJ,IAAA7K,EAAAlM,GAEA,MAAAkM,EAAA,CACA,KAAAnP,KAAAmC,GAAAc,GAAAjD,UAAAmC,KAAA,CAEA,KADAnC,KAAAiD,IAAAkM,EACAnP,KAAAiD,IAAAjD,KAAAmQ,IAEAnQ,KAAAiD,IAAAjD,KAAAmQ,KACAlN,GAAAjD,KAAAmC,IAAAnC,UAAAmC,KAAA,KACAnC,KAAAiD,IAIA,QAAAgX,OAGA,QAAAC,IAAA3c,GAEA,MAAAA,GAGA,QAAA4c,IAAA5c,EAAAoD,EAAAsP,GAEA1S,EAAA6W,WAAAzT,EAAAsP,GAGA,QAAAmK,IAAA7c,EAAA0S,GAEA1S,EAAAgX,SAAAtE,GAOA,QAAAoK,IAAAvjB,GAEA,MAAAkJ,MAAAiW,IAAAnf,EAAA,GAAAmjB,KAIA,QAAAK,IAAAle,EAAA+S,EAAAc,GAEA,GAAA5W,GAAAuG,KAAA+M,IAAA3M,KAAAmC,EAAA/F,EAAA+F,EAAAgN,EAGA,KAFAc,EAAApP,EAAA,EACAoP,EAAA9N,EAAA9I,EACAA,EAAA,GAAA4W,IAAA5W,GAAA,CACA,IAAAwD,EACA,KAAAA,EAAAoT,EAAA9N,EAAAnC,KAAAmC,EAA0B9I,EAAAwD,IAAOxD,EAAA4W,EAAA5W,EAAA2G,KAAAmC,GAAAnC,KAAAoS,GAAA,EAAAhW,EAAA/C,GAAA4W,EAAA5W,EAAA,EAAA2G,KAAAmC,EACjC,KAAAtF,EAAA+C,KAAA+M,IAAAvQ,EAAA+F,EAAAgN,GAA8B9V,EAAAwD,IAAOxD,EAAA2G,KAAAoS,GAAA,EAAAhW,EAAA/C,GAAA4W,EAAA5W,EAAA,EAAA8V,EAAA9V,EACrC4W,GAAAU,QAIA,QAAA4J,IAAAne,EAAA+S,EAAAc,KAEAd,CACA,IAAA9V,GAAA4W,EAAA9N,EAAAnC,KAAAmC,EAAA/F,EAAA+F,EAAAgN,CAEA,KADAc,EAAApP,EAAA,IACAxH,GAAA,GAAA4W,EAAA5W,GAAA,CACA,KAAAA,EAAAuG,KAAAa,IAAA0O,EAAAnP,KAAAmC,EAAA,GAAqC9I,EAAA+C,EAAA+F,IAAS9I,EAC9C4W,EAAAjQ,KAAAmC,EAAA9I,EAAA8V,GAAAnP,KAAAoS,GAAAjD,EAAA9V,EAAA+C,EAAA/C,GAAA4W,EAAA,IAAAjQ,KAAAmC,EAAA9I,EAAA8V,EACAc,GAAAU,QACAV,EAAAyD,UAAA,EAAAzD,GAGA,QAAAuK,IAAAhd,GAGAwC,KAAAyV,GAAAxG,IACAjP,KAAAya,GAAAxL,IACAN,EAAA6E,IAAAF,UAAA,EAAA9V,EAAA2E,EAAAnC,KAAAyV,IACAzV,KAAA0a,GAAA1a,KAAAyV,GAAAkF,OAAAnd,GACAwC,KAAAxC,IAGA,QAAAod,IAAArd,GAEA,GAAAA,EAAAsD,EAAA,GAAAtD,EAAA4E,EAAA,EAAAnC,KAAAxC,EAAA2E,EAAA,MAAA5E,GAAAyW,IAAAhU,KAAAxC,EACA,IAAAD,EAAAgW,UAAAvT,KAAAxC,GAAA,QAAAD,EAGA,IAAA0S,GAAAhB,GAGA,OAFA1R,GAAAkV,OAAAxC,GACAjQ,KAAAqU,OAAApE,GACAA,EAIA,QAAA4K,IAAAtd,GAEA,MAAAA,GAGA,QAAAud,IAAAvd,GAUA,IARAA,EAAAmW,UAAA1T,KAAAxC,EAAA2E,EAAA,EAAAnC,KAAAyV,IACAlY,EAAA4E,EAAAnC,KAAAxC,EAAA2E,EAAA,IAEA5E,EAAA4E,EAAAnC,KAAAxC,EAAA2E,EAAA,EACA5E,EAAAoT,SAEA3Q,KAAA0a,GAAAK,gBAAA/a,KAAAyV,GAAAzV,KAAAxC,EAAA2E,EAAA,EAAAnC,KAAAya,IACAza,KAAAxC,EAAAwd,gBAAAhb,KAAAya,GAAAza,KAAAxC,EAAA2E,EAAA,EAAAnC,KAAAyV,IACAlY,EAAAgW,UAAAvT,KAAAyV,IAAA,GAAAlY,EAAA4Z,WAAA,EAAAnX,KAAAxC,EAAA2E,EAAA,EAEA,KADA5E,EAAAsT,MAAA7Q,KAAAyV,GAAAlY,GACAA,EAAAgW,UAAAvT,KAAAxC,IAAA,GAAAD,EAAAsT,MAAA7Q,KAAAxC,EAAAD,GAGA,QAAA0d,IAAA1d,EAAA0S,GAEA1S,EAAAgX,SAAAtE,GACAjQ,KAAAqU,OAAApE,GAGA,QAAAiL,IAAA3d,EAAAoD,EAAAsP,GAEA1S,EAAA6W,WAAAzT,EAAAsP,GACAjQ,KAAAqU,OAAApE,GAQA,QAAAkL,IAAArkB,EAAA0G,GAEA,GACA8S,GACAkF,EAFAnc,EAAAvC,EAAA4gB,YACAzH,EAAAG,EAAA,EAEA,IAAA/W,GAAA,QAAA4W,EACAK,GAAAjX,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACA,EAEAmc,EADAnc,EAAA,EACA,GAAAya,GAAAtW,GACAA,EAAAwY,SACA,GAAAwE,IAAAhd,GAEA,GAAAiX,GAAAjX,EAEA,IAAAkY,GAAA,GAAAhW,OACAyP,EAAA,EACAiM,EAAA9K,EAAA,EACAc,GAAA,GAAAd,GAAA,CAEA,IADAoF,EAAA,GAAAF,EAAAG,QAAA3V,MACAsQ,EAAA,EACA,CACA,GAAA+K,GAAApM,GAEA,KADAuG,EAAAI,MAAAF,EAAA,GAAA2F,GACAlM,GAAAiC,GAEAsE,EAAAvG,GAAAF,IACAuG,EAAAK,MAAAwF,EAAA3F,EAAAvG,EAAA,GAAAuG,EAAAvG,IACAA,GAAA,EAGA,GACAlM,GAEAd,EAHAtF,EAAA/F,EAAAqL,EAAA,EACAmZ,GAAA,EACA7F,EAAAxG,GAGA,KADA5V,EAAAmY,EAAA1a,EAAA+F,IAAA,EACAA,GAAA,GACA,CAQA,IAPAxD,GAAA+hB,EAAAnY,EAAAnM,EAAA+F,IAAAxD,EAAA+hB,EAAAhK,GAGAnO,GAAAnM,EAAA+F,IAAA,GAAAxD,EAAA,OAAA+hB,EAAA/hB,EACAwD,EAAA,IAAAoG,GAAAnM,EAAA+F,EAAA,IAAAmD,KAAA0Q,GAAArX,EAAA+hB,IAEAjM,EAAAmB,EACA,MAAArN,IAEAA,IAAA,IACAkM,CAOA,KALA9V,GAAA8V,GAAA,IAEA9V,GAAA2G,KAAA0Q,KACA7T,GAEAye,EAEA5F,EAAAzS,GAAAwP,OAAAxC,GACAqL,GAAA,MAGA,CACA,KAAAnM,EAAA,GAEAqG,EAAAI,MAAA3F,EAAAwF,GACAD,EAAAI,MAAAH,EAAAxF,GACAd,GAAA,CAEAA,GAAA,EAAAqG,EAAAI,MAAA3F,EAAAwF,IAGAtT,EAAA8N,EACAA,EAAAwF,EACAA,EAAAtT,GAEAqT,EAAAK,MAAAJ,EAAAC,EAAAzS,GAAAgN,GAEA,KAAApT,GAAA,OAAA/F,EAAA+F,GAAA,GAAAxD,IAEAmc,EAAAI,MAAA3F,EAAAwF,GACAtT,EAAA8N,EACAA,EAAAwF,EACAA,EAAAtT,IACA9I,EAAA,IAEAA,EAAA2G,KAAA0Q,GAAA,IACA7T,GAIA,MAAA2Y,GAAAM,OAAA7F,GAGA,QAAAsL,IAAAnf,GAEA,GAAAmB,GAAAyC,KAAAa,EAAA,EAAAb,KAAAiR,SAAAjR,KAAAwb,QACA7a,EAAAvE,EAAAyE,EAAA,EAAAzE,EAAA6U,SAAA7U,EAAAof,OACA,IAAAje,EAAAgW,UAAA5S,GAAA,EACA,CACA,GAAAwB,GAAA5E,CACAA,GAAAoD,EACAA,EAAAwB,EAEA,GAAA9I,GAAAkE,EAAAke,kBACA/F,EAAA/U,EAAA8a,iBACA,IAAA/F,EAAA,QAAAnY,EAOA,KANAlE,EAAAqc,MAAArc,GACAqc,EAAA,IAEAnY,EAAAoW,SAAA+B,EAAAnY,GACAoD,EAAAgT,SAAA+B,EAAA/U,IAEApD,EAAAoZ,SAAA,IAEAtd,EAAAkE,EAAAke,mBAAA,GAAAle,EAAAoW,SAAAta,EAAAkE,IACAlE,EAAAsH,EAAA8a,mBAAA,GAAA9a,EAAAgT,SAAAta,EAAAsH,GACApD,EAAAgW,UAAA5S,IAAA,GAEApD,EAAAsT,MAAAlQ,EAAApD,GACAA,EAAAoW,SAAA,EAAApW,KAIAoD,EAAAkQ,MAAAtT,EAAAoD,GACAA,EAAAgT,SAAA,EAAAhT,GAIA,OADA+U,GAAA,GAAA/U,EAAAkS,SAAA6C,EAAA/U,GACAA,EAGA,QAAA+a,IAAAvM,GAEA,GAAAA,GAAA,UACA,IAAAgC,GAAAnR,KAAAmQ,GAAAhB,EACAc,EAAAjQ,KAAAa,EAAA,EAAAsO,EAAA,GACA,IAAAnP,KAAAmC,EAAA,EACA,MAAAgP,EAAAlB,EAAAjQ,KAAA,GAAAmP,MAEA,QAAA9V,GAAA2G,KAAAmC,EAAA,EAAgC9I,GAAA,IAAQA,EAAA4W,GAAAkB,EAAAlB,EAAAjQ,KAAA3G,IAAA8V,CACxC,OAAAc,GAGA,QAAA0L,IAAAne,GAEA,GAAAoe,GAAApe,EAAAwY,QACA,IAAAhW,KAAAgW,UAAA4F,GAAA,GAAApe,EAAAmZ,SAAA,MAAAhI,GAAAiC,IAOA,KANA,GAAAiL,GAAAre,EAAAge,QACApM,EAAApP,KAAAwb,QACApf,EAAAgU,EAAA,GACA/T,EAAA+T,EAAA,GACAjV,EAAAiV,EAAA,GACAe,EAAAf,EAAA,GACA,GAAAyL,EAAAlF,UACA,CACA,KAAAkF,EAAA7F,UAEA6F,EAAAlI,SAAA,EAAAkI,GACAD,GAEAxf,EAAA4Z,UAAA3Z,EAAA2Z,WAEA5Z,EAAAod,MAAAxZ,KAAA5D,GACAC,EAAAwU,MAAArT,EAAAnB,IAEAD,EAAAuX,SAAA,EAAAvX,IAEAC,EAAA2Z,UAAA3Z,EAAAwU,MAAArT,EAAAnB,GACAA,EAAAsX,SAAA,EAAAtX,EAEA,MAAA+S,EAAA4G,UAEA5G,EAAAuE,SAAA,EAAAvE,GACAwM,GAEAzgB,EAAA6a,UAAA7E,EAAA6E,WAEA7a,EAAAqe,MAAAxZ,KAAA7E,GACAgW,EAAAN,MAAArT,EAAA2T,IAEAhW,EAAAwY,SAAA,EAAAxY,IAEAgW,EAAA6E,UAAA7E,EAAAN,MAAArT,EAAA2T,GACAA,EAAAwC,SAAA,EAAAxC,EAEA0K,GAAAtI,UAAAnE,IAAA,GAEAyM,EAAAhL,MAAAzB,EAAAyM,GACAD,GAAAxf,EAAAyU,MAAA1V,EAAAiB,GACAC,EAAAwU,MAAAM,EAAA9U,KAIA+S,EAAAyB,MAAAgL,EAAAzM,GACAwM,GAAAzgB,EAAA0V,MAAAzU,EAAAjB,GACAgW,EAAAN,MAAAxU,EAAA8U,IAGA,UAAA/B,EAAAmE,UAAA5E,EAAA6E,KAAA7E,EAAAiC,KACAO,EAAAoC,UAAA/V,IAAA,EAAA2T,EAAA2K,SAAAte,GACA2T,EAAAwF,SAAA,GAAAxF,EAAAqI,MAAAhc,EAAA2T,GAEAA,EAAAwF,SAAA,EAAAxF,EAAA4K,IAAAve,GACA2T,GAFAA,EAOA,QAAA6K,IAAA7Z,GAEA,GAAA9I,GAAAkE,EAAAyC,KAAAQ,KACA,OAAAjD,EAAA4E,GAAA5E,EAAA,IAAA0e,MAAA3iB,OAAA,GACA,CACA,IAAAD,EAAA,EAAiBA,EAAA4iB,GAAA3iB,SAAsBD,EACvC,GAAAkE,EAAA,IAAA0e,GAAA5iB,GAAA,QACA,UAEA,GAAAkE,EAAAyY,SAAA,QAEA,KADA3c,EAAA,EACAA,EAAA4iB,GAAA3iB,QACA,CAGA,IAFA,GAAAkE,GAAAye,GAAA5iB,GACAwD,EAAAxD,EAAA,EACAwD,EAAAof,GAAA3iB,QAAAkE,EAAA0e,IAAA1e,GAAAye,GAAApf,IAEA,KADAW,EAAAD,EAAA4e,OAAA3e,GACAnE,EAAAwD,GACA,GAAAW,EAAAye,GAAA5iB,MAAA,WAEA,MAAAkE,GAAA6e,YAAAja,GAGA,QAAAka,IAAAla,GAEA,GAAAma,GAAAtc,KAAA8b,SAAAnN,EAAA6E,KACAlD,EAAAgM,EAAAb,iBACA,IAAAnL,GAAA,UACA,IAAAL,GAAAqM,EAAAC,WAAAjM,EACAnO,KAAA,KACAA,EAAA8Z,GAAA3iB,SAAA6I,EAAA8Z,GAAA3iB,OAEA,QADA8C,GAAA6S,IACA5V,EAAA,EAAmBA,EAAA8I,IAAO9I,EAC1B,CAEA+C,EAAA0S,QAAAmN,GAAArc,KAAAyP,MAAAzP,KAAAC,SAAAoc,GAAA3iB,SACA,IAAAqH,GAAAvE,EAAAogB,OAAAvM,EAAAjQ,KACA,OAAAW,EAAA4S,UAAA5E,EAAA6E,MAAA,GAAA7S,EAAA4S,UAAA+I,GACA,CAEA,IADA,GAAAzf,GAAA,EACAA,IAAAyT,GAAA,GAAA3P,EAAA4S,UAAA+I,IAGA,GADA3b,IAAA8b,UAAA,EAAAzc,MACA,GAAAW,EAAA4S,UAAA5E,EAAA6E,KAAA,QAEA,OAAA7S,EAAA4S,UAAA+I,GAAA,UAGA,SA7kDA,GAAAI,KAAA,EAEAC,IAAA,EAEAC,IAAA,EAEAhO,MACAiO,IAAA,CACA,oBAAAjhB,MAAAyB,SAEAzB,EAAAyB,QAAAuR,GACAiO,IAAA,IAKApO,EAAA,GAAAC,EAAA,kBAAAD,KAAArX,KAAAiG,EAAAxG,EAAAwG,EAAAzB,GAAA6S;EAAAtQ,SAAAuQ,IAAA9S,EAAAyB,QAAAqR,IAEA,6BAAAoO,OAAAlO,cACA1P,KAAA,WAAA0P,GAEA,IAAAmO,GACA,IAAAF,GAMA,CACA,GAAAG,IAAA,QACAD,IAAA,eAPA,CACA,GAAAC,IAAAC,UAAAC,UAAAtc,WAAAuc,aACAJ,IAAAE,UAAAG,QAQA,GAAAC,MACAL,IAAAplB,QAAA,eAAAolB,GAAAplB,QAAA,gBAAAylB,GAAAC,OAAA,EACAD,GAAAC,OAAA,EACAN,GAAAplB,QAAA,gBAAAylB,GAAAE,SAAA,EACAF,GAAAE,SAAA,EACAP,GAAAplB,QAAA,eAAAolB,GAAAplB,QAAA,eAAAolB,GAAAplB,QAAA,gBAAAylB,GAAAG,OAAA,EACAH,GAAAG,OAAA,EACAR,GAAAplB,QAAA,eAAAylB,GAAAI,QAAA,EACAJ,GAAAI,QAAA,EACAT,GAAAplB,QAAA,kBAAAylB,GAAAK,UAAA,EACAL,GAAAK,UAAA,EACAV,GAAAplB,QAAA,kBAAAylB,GAAAM,UAAA,EACAN,GAAAM,UAAA,EACAX,GAAAplB,QAAA,iBAAAylB,GAAAO,SAAA,EACAP,GAAAO,SAAA,EACAZ,GAAAplB,QAAA,aAAAylB,GAAAQ,MAAA,EACAR,GAAAQ,MAAA,EACAb,GAAAplB,QAAA,eAAAylB,GAAAS,OAAA,EACAT,GAAAS,OAAA,EACAd,GAAAplB,QAAA,cAAAylB,GAAAU,MAAA,EACAV,GAAAU,MAAA,EACAf,GAAAplB,QAAA,cAAAylB,GAAAW,MAAA,EACAX,GAAAW,MAAA,EACAhB,GAAAplB,QAAA,cAAAylB,GAAAY,MAAA,EACAZ,GAAAY,MAAA,EACAjB,GAAAplB,QAAA,aAAAylB,GAAAa,KAAA,EACAb,GAAAa,KAAA,EACAtP,GAAAC,gBAAA,IAOA,IAAAsP,IAEAC,GAAA,eACAC,GAAA,oBAAAD,GAuEAC,KAAA,+BAAAtB,IAEApO,EAAAvW,UAAAga,GAAA9C,EACA6O,GAAA,IAEAE,IAAA,YAAAtB,IAEApO,EAAAvW,UAAAga,GAAAlD,EACAiP,GAAA,KAIAxP,EAAAvW,UAAAga,GAAA3C,EACA0O,GAAA,IAEAxP,EAAAvW,UAAAsY,GAAAyN,GACAxP,EAAAvW,UAAA2Y,IAAA,GAAAoN,IAAA,EACAxP,EAAAvW,UAAA+X,GAAA,GAAAgO,EACA,IAAAG,IAAA,EACA3P,GAAAvW,UAAAgb,GAAAxT,KAAAkX,IAAA,EAAAwH,IACA3P,EAAAvW,UAAA6a,GAAAqL,GAAAH,GACAxP,EAAAvW,UAAA8a,GAAA,EAAAiL,GAAAG,EAEA,IAEAC,IAAAC,GAFA7O,GAAA,uCACAG,GAAA,GAAApQ,MAGA,KADA6e,GAAA,IAAAxO,WAAA,GACAyO,GAAA,EAAcA,IAAA,IAASA,GAAA1O,GAAAyO,MAAAC,EAEvB,KADAD,GAAA,IAAAxO,WAAA,GACAyO,GAAA,GAAeA,GAAA,KAASA,GAAA1O,GAAAyO,MAAAC,EAExB,KADAD,GAAA,IAAAxO,WAAA,GACAyO,GAAA,GAAeA,GAAA,KAASA,GAAA1O,GAAAyO,MAAAC,EAsbxB1K,GAAA1b,UAAAud,QAAA5B,EACAD,EAAA1b,UAAA0d,OAAA7B,EACAH,EAAA1b,UAAAic,OAAAH,EACAJ,EAAA1b,UAAAyd,MAAA1B,EACAL,EAAA1b,UAAAwd,MAAAtB,EAyFAG,EAAArc,UAAAud,QAAAX,EACAP,EAAArc,UAAA0d,OAAAb,EACAR,EAAArc,UAAAic,OAAAa,EACAT,EAAArc,UAAAyd,MAAAR,EACAZ,EAAArc,UAAAwd,MAAAR,EAqCAzG,EAAAvW,UAAAqa,OAAAzC,EACArB,EAAAvW,UAAA0W,QAAAoB,EACAvB,EAAAvW,UAAA4W,WAAAqB,EACA1B,EAAAvW,UAAAuY,MAAAG,EACAnC,EAAAvW,UAAAkb,UAAA5B,EACA/C,EAAAvW,UAAAsb,UAAA/B,EACAhD,EAAAvW,UAAAya,SAAAjB,EACAjD,EAAAvW,UAAAub,SAAA1B,EACAtD,EAAAvW,UAAAyY,MAAAqB,EACAvD,EAAAvW,UAAAgc,WAAAjC,EACAxD,EAAAvW,UAAAmc,SAAAlC,EACA1D,EAAAvW,UAAAyb,SAAAvB,EACA3D,EAAAvW,UAAAuc,SAAAH,EACA7F,EAAAvW,UAAA4d,OAAAV,EACA3G,EAAAvW,UAAA6d,IAAAV,EAEA5G,EAAAvW,UAAAwI,SAAAoQ,EACArC,EAAAvW,UAAA6Y,OAAAI,EACA1C,EAAAvW,UAAAoI,IAAA8Q,EACA3C,EAAAvW,UAAAmb,UAAAhC,EACA5C,EAAAvW,UAAAsf,UAAAjG,EACA9C,EAAAvW,UAAA4b,IAAAJ,EACAjF,EAAAvW,UAAAqkB,UAAA1G,EAEApH,EAAAiC,KAAAR,EAAA,GACAzB,EAAA6E,IAAApD,EAAA,GAyeA6J,GAAA7hB,UAAAud,QAAAuE,GACAD,GAAA7hB,UAAA0d,OAAAoE,GACAD,GAAA7hB,UAAAyd,MAAAsE,GACAF,GAAA7hB,UAAAwd,MAAAwE,GAuFAI,GAAApiB,UAAAud,QAAAiF,GACAJ,GAAApiB,UAAA0d,OAAA+E,GACAL,GAAApiB,UAAAic,OAAAyG,GACAN,GAAApiB,UAAAyd,MAAAqF,GACAV,GAAApiB,UAAAwd,MAAAqF,EAkNA,IAAAgB,KAAA,ooBACAC,IAAA,OAAAD,MAAA3iB,OAAA,EAqDAqV,GAAAvW,UAAAye,UAAAP,EACA3H,EAAAvW,UAAA8Y,QAAAwF,GACA/H,EAAAvW,UAAAmY,UAAA0G,GACAtI,EAAAvW,UAAA2W,WAAAqI,GACAzI,EAAAvW,UAAAkf,UAAAU,GACArJ,EAAAvW,UAAA+gB,UAAAF,GACAtK,EAAAvW,UAAAohB,MAAAF,GACA3K,EAAAvW,UAAA8e,UAAA6C,GACApL,EAAAvW,UAAA+e,WAAA6C,GACArL,EAAAvW,UAAA4iB,gBAAAV,GACA3L,EAAAvW,UAAA2iB,gBAAAR,GACA5L,EAAAvW,UAAA+jB,OAAAT,GACA/M,EAAAvW,UAAAgkB,YAAAC,GAEA1N,EAAAvW,UAAAojB,MAAAtF,EACAvH,EAAAvW,UAAA2e,SAAAZ,EACAxH,EAAAvW,UAAAqmB,UAAArI,EACAzH,EAAAvW,UAAAsmB,WAAArI,EACA1H,EAAAvW,UAAAue,OAAAF,EACA9H,EAAAvW,UAAAumB,YAAA/G,GACAjJ,EAAAvW,UAAAmI,OAAAsX,GACAlJ,EAAAvW,UAAAuU,IAAAmL,GACAnJ,EAAAvW,UAAAqI,IAAAsX,GACApJ,EAAAvW,UAAAwmB,IAAAzG,GACAxJ,EAAAvW,UAAAymB,GAAAzG,GACAzJ,EAAAvW,UAAAiV,IAAAiL,GACA3J,EAAAvW,UAAA0mB,OAAAtG,GACA7J,EAAAvW,UAAA2mB,IAAAtG,GACA9J,EAAAvW,UAAAmf,UAAAmB,GACA/J,EAAAvW,UAAAmkB,WAAA5D,GACAhK,EAAAvW,UAAAqjB,gBAAA5C,GACAlK,EAAAvW,UAAA4mB,SAAAjG,GACApK,EAAAvW,UAAAif,QAAA2B,GACArK,EAAAvW,UAAA6mB,OAAA/F,GACAvK,EAAAvW,UAAA8mB,SAAA9F,GACAzK,EAAAvW,UAAA+mB,QAAA9F,GACA1K,EAAAvW,UAAA2jB,IAAAxC,GACA5K,EAAAvW,UAAA0jB,SAAArC,GACA9K,EAAAvW,UAAAgnB,SAAA1F,GACA/K,EAAAvW,UAAAuiB,OAAAf,GACAjL,EAAAvW,UAAAinB,UAAAxF,GACAlL,EAAAvW,UAAAknB,mBAAAxF,GACAnL,EAAAvW,UAAAokB,OAAArB,GACAxM,EAAAvW,UAAAmnB,WAAA5D,GACAhN,EAAAvW,UAAA0e,IAAAuD,GACA1L,EAAAvW,UAAAonB,IAAAjE,GACA5M,EAAAvW,UAAAqf,gBAAAuE,GAEArN,EAAAvW,UAAAqnB,OAAA9F,EACA,IAAA+F,IAAA/Q,CAUA+Q,IAAAtnB,UAAAunB,WAAA,WAEA,MAAA3f,MAAAuT,UAAAmM,GAAA9O,QAAA,GAGA8O,GAAAE,YAAA,SAAAC,EAAAC,GAEA,UAAAD,EAAAtM,UAAAuM,IAGAJ,GAAAK,cAAA,SAAAF,EAAAC,GAEA,UAAAD,EAAAtM,UAAAuM,IAGAJ,GAAAM,eAAA,SAAAH,EAAAC,GAEA,MAAAD,GAAAtM,UAAAuM,GAAA,GAGAJ,GAAAO,YAAA,SAAAJ,EAAAC,GAEA,MAAAD,GAAAtM,UAAAuM,GAAA,GAGAJ,GAAAQ,YAAA,SAAAC,EAAAC,GAEA,UAAAV,IAAAS,GAAApE,IAAA,GAAA2D,IAAAU,KAEAV,GAAAW,eAAA,SAAAF,EAAAC,GAEA,UAAAV,IAAAS,GAAArE,SAAA,GAAA4D,IAAAU,KAEAV,GAAAY,UAAA,SAAAH,EAAAC,GAEA,UAAAV,IAAAS,GAAAf,SAAA,GAAAM,IAAAU,KAEAV,GAAAa,YAAA,SAAAJ,EAAAC,GAEA,MAAAD,GAAAxF,OAAAyF,IAEAV,GAAAtnB,UAAAooB,SAAA,WAEA,MAAAC,YAAAzgB,KAAAY,YAaA,IAAA8f,IAAA,SAAAC,EAAAC,GAEA,GAAAnjB,EACA,uBAAAtF,QAAA,oBACA,CACA,IAAAsF,IAAAmjB,GAAAxoB,UACA,mBAAAuoB,GAAAvoB,UAAAqF,IAAAkjB,EAAAvoB,UAAAqF,IAAAtF,OAAAC,UAAAqF,KAAAkjB,EAAAvoB,UAAAqF,GAAAmjB,EAAAxoB,UAAAqF,GACA,KAAAA,IAAAmjB,GACA,mBAAAD,GAAAljB,KAAAkjB,EAAAljB,GAAAmjB,EAAAnjB,GACAkjB,GAAAE,UAAAD,MAGA,CAEA,OADAE,GAAA3oB,OAAA4oB,oBAAAH,EAAAxoB,WACAiB,EAAA,EAAkBA,EAAAynB,EAAAxnB,OAAkBD,IACpC,mBAAAlB,QAAA6oB,yBAAAL,EAAAvoB,UAAA0oB,EAAAznB,KAAAlB,OAAAI,eAAAooB,EAAAvoB,UAAA0oB,EAAAznB,GAAAlB,OAAA6oB,yBAAAJ,EAAAxoB,UAAA0oB,EAAAznB,IACA,KAAAoE,IAAAmjB,GACA,mBAAAD,GAAAljB,KAAAkjB,EAAAljB,GAAAmjB,EAAAnjB,GACAkjB,GAAAE,UAAAD,GAGAhS,IAAAqS,KAAA,WAEA,UAEArS,GAAAsS,MAAA,WAEA,UAIAtS,GAAAuS,YAAA,WAEA,GAAA/kB,GAAAglB,SACAphB,MAAAgG,EAAA,EACAhG,KAAAkG,EAAA,EAGA,GAAA9J,EAAA9C,QAEA0G,KAAAgG,EAAA5J,EAAA,GAAA4J,EACAhG,KAAAkG,EAAA9J,EAAA,GAAA8J,GAEA,GAAA9J,EAAA9C,SAEA0G,KAAAgG,EAAA5J,EAAA,GACA4D,KAAAkG,EAAA9J,EAAA,KAGAwS,GAAAyS,aAAA,WAEArhB,KAAAgG,EAAA,EACAhG,KAAAkG,EAAA,GAGA0I,GAAA0S,aAAA,SAAAC,GAEAvhB,KAAAgG,EAAAub,EAAAvb,EACAhG,KAAAkG,EAAAqb,EAAArb,GAGA0I,GAAA4S,aAAA,SAAAjkB,EAAAoD,GAEAX,KAAAgG,EAAAzI,EACAyC,KAAAkG,EAAAvF,GAIAiO,GAAA6S,SAAA,WAEAzhB,KAAA0hB,SAAA,KACA1hB,KAAA2hB,UAAA,GAAA/S,IAAAqS,KACAjhB,KAAA4hB,QAAA,EACA5hB,KAAA6hB,WAAA,EACA7hB,KAAA8hB,UAAA,EACA9hB,KAAA+hB,YACA/hB,KAAAgiB,QAAA,GAEApT,GAAA6S,SAAArpB,UAAA6pB,WAAA,WAIA,IAFA,GAAAzlB,IAAA,EACAkL,EAAA1H,KAAA0hB,SACA,OAAAha,GAEAlL,KACAkL,IAAAga,QAEA,OAAAllB,IAEAoS,GAAA6S,SAAArpB,UAAA8pB,WAAA,WAEA,MAAAliB,MAAA+hB,SAAAzoB,QAEAsV,GAAA6S,SAAArpB,UAAAuP,QAAA,WAEA,MAAA3H,MAAA2hB,WAEA/S,GAAA6S,SAAArpB,UAAA+pB,SAAA,SAAAC,GAEA,GAAAC,GAAAriB,KAAA+hB,SAAAzoB,MACA0G,MAAA+hB,SAAAlqB,KAAAuqB,GACAA,EAAAV,SAAA1hB,KACAoiB,EAAAR,QAAAS,GAEAzT,GAAA6S,SAAArpB,UAAAkqB,QAAA,WAEA,MAAAtiB,MAAA+hB,SAAAzoB,OAAA,EACA0G,KAAA+hB,SAAA,GAEA/hB,KAAAuiB,oBAEA3T,GAAA6S,SAAArpB,UAAAmqB,iBAAA,WAEA,cAAAviB,KAAA0hB,SACA,KACA1hB,KAAA4hB,SAAA5hB,KAAA0hB,SAAAK,SAAAzoB,OAAA,EACA0G,KAAA0hB,SAAAa,mBAEAviB,KAAA0hB,SAAAK,SAAA/hB,KAAA4hB,QAAA,IAEAhT,GAAA6S,SAAArpB,UAAA2P,OAAA,WAEA,MAAA/H,MAAA+hB,UAEAnT,GAAA6S,SAAArpB,UAAAoqB,OAAA,WAEA,MAAAxiB,MAAA0hB,UAEA9S,GAAA6S,SAAArpB,UAAAqqB,OAAA,WAEA,MAAAziB,MAAAiiB,cAGArT,GAAA5H,SAAA,WAEAhH,KAAA0iB,cACA9T,GAAA6S,SAAArqB,KAAA4I,OAEA4O,GAAA5H,SAAA5O,UAAAuqB,MAAA,WAEA,OAAAtpB,GAAA,EAAAupB,EAAA5iB,KAAA0iB,WAAAppB,OAAkDD,EAAAupB,EAAUvpB,IAC5D2G,KAAA0iB,WAAArpB,GAAA,IACA2G,MAAA0iB,WAAAppB,OAAA,EACA0G,KAAA+hB,SAAAzoB,OAAA,GAEAsV,GAAA5H,SAAA5O,UAAAyqB,SAAA,WAEA,MAAA7iB,MAAA+hB,SAAAzoB,OAAA,EACA0G,KAAA+hB,SAAA,GAEA,MAEAnT,GAAA5H,SAAA5O,UAAA0qB,MAAA,WAEA,GAAAtmB,GAAAwD,KAAA0iB,WAAAppB,MAGA,OADAkD,GAAA,GAAAwD,KAAA+hB,SAAA,IAAA/hB,KAAA0iB,WAAA,IAAAlmB,IACAA,GAEAkkB,GAAA9R,GAAA5H,SAAA4H,GAAA6S,UAGA7S,GAAAmU,eAAAnU,GAAAoU,eAAApU,GAAAqU,gBAAA,SAAA7mB,GAEA,MAAAwD,MAAAY,IAAApE,IAEAwS,GAAAsU,qBAAA,SAAA9mB,EAAAC,GAEA,MAAAuD,MAAAa,IAAArE,EAAAC,IAOAghB,GAAAa,MAAAb,GAAAQ,OAAAR,GAAAG,OAAA5O,GAAAuU,WAAA,SAAA/mB,GAEA,SAAAA,GAEAwS,GAAAuU,WAAA,SAAA/mB,GAEA,QAAAA,GAgBAihB,GAAAC,OAAA1O,GAAAwU,WAAA,SAAAhnB,GAEA,MAAAA,IAAA,YAAAA,EAAA,WACAA,EAAA,EAAAwD,KAAAyjB,KAAAjnB,GAAAwD,KAAAyP,MAAAjT,KACAA,GAEAihB,GAAAI,SAAA,kBAAAza,QAAA,UAAA4L,GAAAwU,WAAA,SAAAhnB,GAEA,MAAA4G,QAAAsgB,UAAAlnB,IAEAihB,GAAAY,OAAAZ,GAAAW,MAAApP,GAAAwU,WAAA,SAAAhnB,GAEA,MAAAmnB,UAAAnnB,EAAA,KAEAihB,GAAAa,KAAAtP,GAAAwU,WAAA,SAAAhnB,GAEA,MAAAA,IAAA,YAAAA,EAAA,WACAA,EAAA,EAAAwD,KAAAyjB,KAAAjnB,GAAAwD,KAAAyP,MAAAjT,GACA,EAAAA,GAGAwS,GAAAwU,WAAA,SAAAhnB,GAEA,MAAAA,GAAA,EAAAwD,KAAAyjB,KAAAjnB,GAAAwD,KAAAyP,MAAAjT,IAEAwS,GAAA+T,MAAA,SAAAvmB,GAEAA,EAAA9C,OAAA,GAGAsV,GAAAvO,GAAA,kBACAuO,GAAA4U,IAAA,kBACA5U,GAAA6U,SAAA,WAEA,GAAArnB,GAAAglB,UACAsC,EAAAtnB,EAAA9C,MAGA,IAFA0G,KAAAgG,EAAA,EACAhG,KAAAkG,EAAA,EACAyW,GAGA,GADA3c,KAAAyL,EAAA,EACA,GAAAiY,EAEA1jB,KAAAgG,EAAA5J,EAAA,GACA4D,KAAAkG,EAAA9J,EAAA,GACA4D,KAAAyL,EAAArP,EAAA,OAEA,OAAAsnB,EAEA1jB,KAAAgG,EAAA5J,EAAA,GACA4D,KAAAkG,EAAA9J,EAAA,GACA4D,KAAAyL,EAAA,MAEA,OAAAiY,EAEA,GAAAtnB,EAAA,YAAAwS,IAAAuS,YACA,CACA,GAAAI,GAAAnlB,EAAA,EACA4D,MAAAgG,EAAA4I,GAAAxI,QAAAud,MAAApC,EAAAvb,GACAhG,KAAAkG,EAAA0I,GAAAxI,QAAAud,MAAApC,EAAArb,GACAlG,KAAAyL,EAAA,MAGA,CACA,GAAAiB,GAAAtQ,EAAA,EACA,oBAAAsQ,GAAA,IAAAA,EAAAjB,EAAA,GACAzL,KAAAgG,EAAA0G,EAAA1G,EACAhG,KAAAkG,EAAAwG,EAAAxG,EACAlG,KAAAyL,EAAAiB,EAAAjB,MAKAzL,MAAAgG,EAAA,EACAhG,KAAAkG,EAAA,EACAlG,KAAAyL,EAAA,MAKA,OAAAiY,EAEA1jB,KAAAgG,EAAA5J,EAAA,GACA4D,KAAAkG,EAAA9J,EAAA,OAEA,OAAAsnB,EAEA,GAAAtnB,EAAA,YAAAwS,IAAAuS,YACA,CACA,GAAAI,GAAAnlB,EAAA,EACA4D,MAAAgG,EAAA4I,GAAAxI,QAAAud,MAAApC,EAAAvb,GACAhG,KAAAkG,EAAA0I,GAAAxI,QAAAud,MAAApC,EAAArb,OAGA,CACA,GAAAwG,GAAAtQ,EAAA,EACA4D,MAAAgG,EAAA0G,EAAA1G,EACAhG,KAAAkG,EAAAwG,EAAAxG,MAKAlG,MAAAgG,EAAA,EACAhG,KAAAkG,EAAA,GAIA0I,GAAA6U,SAAA7D,YAAA,SAAAxjB,EAAAC,GAGA,MAAAD,GAAA4J,GAAA3J,EAAA2J,GAAA5J,EAAA8J,GAAA7J,EAAA6J,GAEA0I,GAAA6U,SAAA1D,cAAA,SAAA3jB,EAAAC,GAGA,MAAAD,GAAA4J,GAAA3J,EAAA2J,GAAA5J,EAAA8J,GAAA7J,EAAA6J,GAgBAyW,IAEA/N,GAAAgV,UAAA,WAEA5jB,KAAAgG,EAAA,EACAhG,KAAAkG,EAAA,EACAlG,KAAAyL,EAAA,GAEAmD,GAAAiV,UAAA,SAAAnX,GAEA1M,KAAAgG,EAAA0G,EAAA1G,EACAhG,KAAAkG,EAAAwG,EAAAxG,EACAlG,KAAAyL,EAAAiB,EAAAjB,GAEAmD,GAAAkV,YAAA,SAAAvC,GAEAvhB,KAAAgG,EAAA4I,GAAAxI,QAAAud,MAAApC,EAAAvb,GACAhG,KAAAkG,EAAA0I,GAAAxI,QAAAud,MAAApC,EAAArb,GACAlG,KAAAyL,EAAA,GAEAmD,GAAAmV,UAAA,SAAAxmB,EAAAoD,GAEAX,KAAAgG,EAAAzI,EACAyC,KAAAkG,EAAAvF,EACAX,KAAAyL,EAAA,GAEAmD,GAAAoV,UAAA,SAAAzmB,EAAAoD,EAAA6U,GAEAxV,KAAAgG,EAAAzI,EACAyC,KAAAkG,EAAAvF,EACAX,KAAAyL,EAAA+J,KAKA5G,GAAAgV,UAAA,WAEA5jB,KAAAgG,EAAA,EACAhG,KAAAkG,EAAA,GAEA0I,GAAAiV,UAAA,SAAAnX,GAEA1M,KAAAgG,EAAA0G,EAAA1G,EACAhG,KAAAkG,EAAAwG,EAAAxG,GAEA0I,GAAAkV,YAAA,SAAAvC,GAEAvhB,KAAAgG,EAAA4I,GAAAxI,QAAAud,MAAApC,EAAAvb,GACAhG,KAAAkG,EAAA0I,GAAAxI,QAAAud,MAAApC,EAAArb,IAEA0I,GAAAmV,UAAA,SAAAxmB,EAAAoD,GAEAX,KAAAgG,EAAAzI,EACAyC,KAAAkG,EAAAvF,IAGAiO,GAAAqV,QAAA,WAEA,GAAA7nB,GAAAglB,UACAsC,EAAAtnB,EAAA9C,MACA,IAAAoqB,GAEA1jB,KAAAkkB,KAAA9nB,EAAA,GACA4D,KAAAmkB,IAAA/nB,EAAA,GACA4D,KAAAokB,MAAAhoB,EAAA,GACA4D,KAAAqkB,OAAAjoB,EAAA,IAEA,GAAAsnB,GAEA1jB,KAAAkkB,KAAAI,GAAAJ,KACAlkB,KAAAmkB,IAAAG,GAAAH,IACAnkB,KAAAokB,MAAAE,GAAAF,MACApkB,KAAAqkB,OAAAC,GAAAD,SAIArkB,KAAAkkB,KAAA,EACAlkB,KAAAmkB,IAAA,EACAnkB,KAAAokB,MAAA,EACApkB,KAAAqkB,OAAA,IAGAzV,GAAA2V,SAAA,WAEAvkB,KAAAkkB,KAAA,EACAlkB,KAAAmkB,IAAA,EACAnkB,KAAAokB,MAAA,EACApkB,KAAAqkB,OAAA,GAEAzV,GAAA4V,SAAA,SAAAF,GAEAtkB,KAAAkkB,KAAAI,EAAAJ,KACAlkB,KAAAmkB,IAAAG,EAAAH,IACAnkB,KAAAokB,MAAAE,EAAAF,MACApkB,KAAAqkB,OAAAC,EAAAD,QAEAzV,GAAA6V,SAAA,SAAAvqB,EAAAiI,EAAA8N,EAAA5T,GAEA2D,KAAAkkB,KAAAhqB,EACA8F,KAAAmkB,IAAAhiB,EACAnC,KAAAokB,MAAAnU,EACAjQ,KAAAqkB,OAAAhoB,GAEAuS,GAAA1H,UACAwd,eAAA,EACAvd,QAAA,EACAiG,aAAA,EACAE,MAAA,GAEAsB,GAAA/H,UACAC,UAAA,EACAmG,OAAA,GAEA2B,GAAApI,cACAC,WAAA,EACAke,WAAA,EACAC,YAAA,EACAC,YAAA,GAEAjW,GAAAjB,UACAI,SAAA,EACAH,QAAA,EACAI,QAAA,GAEAY,GAAAf,SACAiX,aAAA,EACAC,YAAA,EACAC,WAAA,EACAC,aAAA,EACAnX,gBAAA,GAEAc,GAAAsW,UACAC,OAAA,EACAC,QAAA,GAEAxW,GAAAyW,WACAC,aAAA,EACAC,aAAA,GAEA3W,GAAA4W,MAAA,WAEAxlB,KAAAylB,IAAA,GAAA7W,IAAA6U,SACAzjB,KAAA0lB,KAAA,GAAA9W,IAAA6U,SACAzjB,KAAA2lB,IAAA,GAAA/W,IAAA6U,SACAzjB,KAAA4lB,MAAA,GAAAhX,IAAA6U,SACAzjB,KAAA6lB,GAAA,EACA7lB,KAAA8lB,QAAAlX,GAAA/H,SAAAC,UACA9G,KAAA+lB,KAAAnX,GAAAsW,SAAAC,OACAnlB,KAAAgmB,UAAA,EACAhmB,KAAAimB,QAAA,EACAjmB,KAAAkmB,SAAA,EACAlmB,KAAAmmB,OAAA,EACAnmB,KAAAomB,KAAA,KACApmB,KAAAqmB,KAAA,KACArmB,KAAAsmB,UAAA,KACAtmB,KAAAumB,UAAA,KACAvmB,KAAAwmB,UAAA,KACAxmB,KAAAymB,UAAA,KACAzmB,KAAA0mB,UAAA,MAEA9X,GAAA+X,cAAA,WAEA3mB,KAAA4mB,MAAA,KACA5mB,KAAA6mB,MAAA,KACA7mB,KAAA8mB,GAAA,GAAAlY,IAAA6U,UAEA7U,GAAAmY,oBAAA,aACAnY,GAAAmY,oBAAAC,QAAA,SAAAC,EAAAC,GAEA,GAAA7tB,GAAA6tB,EAAAJ,GAAA5gB,EAAA+gB,EAAAH,GAAA5gB,CACA,OAAA7M,GAAA,IACAA,EAAA,KACA,GAGAuV,GAAAuY,YAAA,WAEAnnB,KAAAkG,EAAA,EACAlG,KAAAonB,UAAA,KACApnB,KAAAqnB,WAAA,KACArnB,KAAAomB,KAAA,MAEAxX,GAAA0Y,SAAA,WAEAtnB,KAAAkG,EAAA,EACAlG,KAAAomB,KAAA,MAEAxX,GAAA2Y,OAAA,WAEAvnB,KAAAwnB,IAAA,EACAxnB,KAAAyiB,QAAA,EACAziB,KAAAgiB,QAAA,EACAhiB,KAAAynB,UAAA,KACAznB,KAAA0nB,IAAA,KACA1nB,KAAA2nB,SAAA,KACA3nB,KAAAyhB,SAAA,MAEA7S,GAAAgZ,MAAA,WAEA5nB,KAAAwnB,IAAA,EACAxnB,KAAA8mB,GAAA,GAAAlY,IAAA6U,SACAzjB,KAAAomB,KAAA,KACApmB,KAAAqmB,KAAA,MAEAzX,GAAAiZ,KAAA,WAEA7nB,KAAA8nB,OAAA,KACA9nB,KAAA+nB,OAAA,KACA/nB,KAAAgoB,MAAA,GAAApZ,IAAA6U,UAEA7U,GAAAqZ,YAAA,WAEAjoB,KAAAkoB,aAAA,KACAloB,KAAAmoB,YAAA,KACAnoB,KAAAooB,QAAA,GAAA1oB,OACAM,KAAAqoB,gBAAA,EACAroB,KAAAsoB,gBAAA,EACAtoB,KAAAuoB,mBAAA,EACAvoB,KAAAkoB,aAAA,KACAloB,KAAAmoB,YAAA,KACAnoB,KAAAqoB,gBAAA,EACAroB,KAAAsoB,gBAAA,GASA1Z,GAAAqZ,YAAAO,YAAA,iBACA5Z,GAAAqZ,YAAAQ,MAAA,EACA7Z,GAAAqZ,YAAAS,YAAA,EACA9Z,GAAAqZ,YAAAU,UAAA,MACAjM,IAEA9N,GAAAqZ,YAAAW,QAAA,MACAha,GAAAqZ,YAAAY,QAAA,QAIAja,GAAAqZ,YAAAW,QAAA,SACAha,GAAAqZ,YAAAY,QAAA,iBAGAja,GAAAqZ,YAAAa,UAAA,SAAAC,GAEA,MAAAA,IAAAna,GAAAqZ,YAAAU,WAAAI,EAAAna,GAAAqZ,YAAAU,WAEA/Z,GAAAqZ,YAAAe,aAAA,SAAAlyB,GAEA,WAAAA,EAAA8uB,MAAA1f,GAEA0I,GAAAqZ,YAAA7vB,UAAA6wB,cAAA,SAAAvc,EAAAwc,GAEA,GAAAC,GAAAD,CACA,IACA,GAAAta,GAAA6U,SAAA7D,YAAAuJ,EAAArC,GAAApa,GACA,QACAyc,KAAA/C,WAEA+C,GAAAD,EACA,WAEAta,GAAAqZ,YAAA7vB,UAAAgxB,mBAAA,SAAA1c,EAAA2c,EAAAC,EAAAC,GAEA,MAAAA,GACA7c,EAAA1G,GAAAqjB,EAAArjB,GAAA0G,EAAAxG,GAAAmjB,EAAAnjB,GACAwG,EAAA1G,GAAAsjB,EAAAtjB,GAAA0G,EAAAxG,GAAAojB,EAAApjB,GACAwG,EAAA1G,EAAAqjB,EAAArjB,GAAA0G,EAAA1G,EAAAsjB,EAAAtjB,GACA0G,EAAAxG,EAAAmjB,EAAAnjB,GAAAwG,EAAAxG,EAAAojB,EAAApjB,GACAwZ,GAAAE,YAAAF,GAAAY,UAAA5T,EAAA1G,EAAAqjB,EAAArjB,EAAAsjB,EAAApjB,EAAAmjB,EAAAnjB,GACAwZ,GAAAY,UAAAgJ,EAAAtjB,EAAAqjB,EAAArjB,EAAA0G,EAAAxG,EAAAmjB,EAAAnjB,IAEAwG,EAAA1G,GAAAqjB,EAAArjB,GAAA0G,EAAAxG,GAAAmjB,EAAAnjB,GAAAwG,EAAA1G,GAAAsjB,EAAAtjB,GAAA0G,EAAAxG,GAAAojB,EAAApjB,GAAAwG,EAAA1G,EAAAqjB,EAAArjB,GAAA0G,EAAA1G,EAAAsjB,EAAAtjB,GAAA0G,EAAAxG,EAAAmjB,EAAAnjB,GAAAwG,EAAAxG,EAAAojB,EAAApjB,IAAAwG,EAAA1G,EAAAqjB,EAAArjB,IAAAsjB,EAAApjB,EAAAmjB,EAAAnjB,KAAAojB,EAAAtjB,EAAAqjB,EAAArjB,IAAA0G,EAAAxG,EAAAmjB,EAAAnjB,IAEA0I,GAAAqZ,YAAA7vB,UAAAoxB,eAAA,SAAA9c,EAAAwc,EAAAK,GAGA,IADA,GAAAJ,GAAAD,IAEA,CACA,GAAAlpB,KAAAopB,mBAAA1c,EAAAyc,EAAArC,GAAAqC,EAAA/C,KAAAU,GAAAyC,GACA,QAEA,IADAJ,IAAA/C,KACA+C,GAAAD,EACA,MAEA,UAEAta,GAAAqZ,YAAA7vB,UAAAqxB,YAAA7a,GAAAqZ,YAAAwB,YAAA,WAEA,GAEAC,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAR,EAFAntB,EAAAglB,UACAsC,EAAAtnB,EAAA9C,MAEA,WAAAoqB,GAEAgG,EAAAttB,EAAA,GACAutB,EAAAvtB,EAAA,GACAmtB,EAAAntB,EAAA,GACAmtB,EACA7J,GAAAE,YAAAF,GAAAY,UAAAoJ,EAAA9D,MAAA1f,EAAAyjB,EAAA/D,MAAA5f,GAAA0Z,GAAAY,UAAAoJ,EAAA9D,MAAA5f,EAAA2jB,EAAA/D,MAAA1f,IAEA0I,GAAAwU,WAAAsG,EAAA9D,MAAA,EAAA+D,EAAA/D,MAAA,IAAAhX,GAAAwU,WAAAsG,EAAA9D,MAAA,EAAA+D,EAAA/D,MAAA,IAEA,GAAAlC,GAEAkG,EAAAxtB,EAAA,GACAytB,EAAAztB,EAAA,GACA0tB,EAAA1tB,EAAA,GACAmtB,EAAAntB,EAAA,GACAmtB,EACA7J,GAAAE,YAAAF,GAAAY,UAAAsJ,EAAA1jB,EAAA2jB,EAAA3jB,EAAA2jB,EAAA7jB,EAAA8jB,EAAA9jB,GAAA0Z,GAAAY,UAAAsJ,EAAA5jB,EAAA6jB,EAAA7jB,EAAA6jB,EAAA3jB,EAAA4jB,EAAA5jB,IAEA0I,GAAAwU,YAAAwG,EAAA1jB,EAAA2jB,EAAA3jB,IAAA2jB,EAAA7jB,EAAA8jB,EAAA9jB,IAAA4I,GAAAwU,YAAAwG,EAAA5jB,EAAA6jB,EAAA7jB,IAAA6jB,EAAA3jB,EAAA4jB,EAAA5jB,MAAA,IAIA0jB,EAAAxtB,EAAA,GACAytB,EAAAztB,EAAA,GACA0tB,EAAA1tB,EAAA,GACA2tB,EAAA3tB,EAAA,GACAmtB,EAAAntB,EAAA,GACAmtB,EACA7J,GAAAE,YAAAF,GAAAY,UAAAsJ,EAAA1jB,EAAA2jB,EAAA3jB,EAAA4jB,EAAA9jB,EAAA+jB,EAAA/jB,GAAA0Z,GAAAY,UAAAsJ,EAAA5jB,EAAA6jB,EAAA7jB,EAAA8jB,EAAA5jB,EAAA6jB,EAAA7jB,IAEA0I,GAAAwU,YAAAwG,EAAA1jB,EAAA2jB,EAAA3jB,IAAA4jB,EAAA9jB,EAAA+jB,EAAA/jB,IAAA4I,GAAAwU,YAAAwG,EAAA5jB,EAAA6jB,EAAA7jB,IAAA8jB,EAAA5jB,EAAA6jB,EAAA7jB,MAAA,IAGA0I,GAAAqZ,YAAA+B,aAAA,SAAAN,EAAAC,EAAAJ,GAEA,MAAAA,GACA7J,GAAAE,YAAAF,GAAAY,UAAAoJ,EAAA9D,MAAA1f,EAAAyjB,EAAA/D,MAAA5f,GAAA0Z,GAAAY,UAAAoJ,EAAA9D,MAAA5f,EAAA2jB,EAAA/D,MAAA1f,IAEA0I,GAAAwU,WAAAsG,EAAA9D,MAAA,EAAA+D,EAAA/D,MAAA,IAAAhX,GAAAwU,WAAAsG,EAAA9D,MAAA,EAAA+D,EAAA/D,MAAA,IAEAhX,GAAAqZ,YAAAgC,aAAA,SAAAL,EAAAC,EAAAC,EAAAP,GAEA,MAAAA,GACA7J,GAAAE,YAAAF,GAAAY,UAAAsJ,EAAA1jB,EAAA2jB,EAAA3jB,EAAA2jB,EAAA7jB,EAAA8jB,EAAA9jB,GAAA0Z,GAAAY,UAAAsJ,EAAA5jB,EAAA6jB,EAAA7jB,EAAA6jB,EAAA3jB,EAAA4jB,EAAA5jB,IAEA0I,GAAAwU,YAAAwG,EAAA1jB,EAAA2jB,EAAA3jB,IAAA2jB,EAAA7jB,EAAA8jB,EAAA9jB,IAAA4I,GAAAwU,YAAAwG,EAAA5jB,EAAA6jB,EAAA7jB,IAAA6jB,EAAA3jB,EAAA4jB,EAAA5jB,MAAA,GAEA0I,GAAAqZ,YAAAiC,aAAA,SAAAN,EAAAC,EAAAC,EAAAC,EAAAR,GAEA,MAAAA,GACA7J,GAAAE,YAAAF,GAAAY,UAAAsJ,EAAA1jB,EAAA2jB,EAAA3jB,EAAA4jB,EAAA9jB,EAAA+jB,EAAA/jB,GAAA0Z,GAAAY,UAAAsJ,EAAA5jB,EAAA6jB,EAAA7jB,EAAA8jB,EAAA5jB,EAAA6jB,EAAA7jB,IAEA0I,GAAAwU,YAAAwG,EAAA1jB,EAAA2jB,EAAA3jB,IAAA4jB,EAAA9jB,EAAA+jB,EAAA/jB,IAAA4I,GAAAwU,YAAAwG,EAAA5jB,EAAA6jB,EAAA7jB,IAAA8jB,EAAA5jB,EAAA6jB,EAAA7jB,MAAA,GAEA0I,GAAAqZ,YAAA7vB,UAAAuqB,MAAA,WAEA3iB,KAAAmqB,wBACA,QAAA9wB,GAAA,EAAAupB,EAAA5iB,KAAAooB,QAAA9uB,OAA+CD,EAAAupB,IAAUvpB,EACzD,CACA,OAAAwD,GAAA,EAAAutB,EAAApqB,KAAAooB,QAAA/uB,GAAAC,OAAoDuD,EAAAutB,IAAUvtB,EAC9DmD,KAAAooB,QAAA/uB,GAAAwD,GAAA,IACA+R,IAAA+T,MAAA3iB,KAAAooB,QAAA/uB,IAEAuV,GAAA+T,MAAA3iB,KAAAooB,SACApoB,KAAAqoB,gBAAA,EACAroB,KAAAsoB,gBAAA,GAEA1Z,GAAAqZ,YAAA7vB,UAAA+xB,uBAAA,WAEA,YAAAnqB,KAAAkoB,cACA,CACA,GAAAmC,GAAArqB,KAAAkoB,aAAA9B,IACApmB,MAAAkoB,aAAA,KACAloB,KAAAkoB,aAAAmC,EAEArqB,KAAAmoB,YAAA,MAEAvZ,GAAAqZ,YAAA7vB,UAAAkyB,UAAA,SAAAxD,EAAAyD,GAEAA,EAAAC,OAEA1D,EAAA9gB,EAAA4I,GAAAqZ,YAAAY,SAAA/B,EAAA5gB,EAAA0I,GAAAqZ,YAAAY,UAAA/B,EAAA9gB,EAAA4I,GAAAqZ,YAAAY,UAAA/B,EAAA5gB,EAAA0I,GAAAqZ,YAAAY,UACAja,GAAAhU,MAAA,qDAEAksB,EAAA9gB,EAAA4I,GAAAqZ,YAAAW,SAAA9B,EAAA5gB,EAAA0I,GAAAqZ,YAAAW,UAAA9B,EAAA9gB,EAAA4I,GAAAqZ,YAAAW,UAAA9B,EAAA5gB,EAAA0I,GAAAqZ,YAAAW,WAEA2B,EAAAC,OAAA,EACAxqB,KAAAsqB,UAAAxD,EAAAyD,KAGA3b,GAAAqZ,YAAA7vB,UAAAqyB,SAAA,SAAA3zB,EAAA4zB,EAAAC,EAAAje,GAEA5V,EAAAsvB,KAAAsE,EACA5zB,EAAAuvB,KAAAsE,EAEA7zB,EAAA4uB,KAAA1f,EAAA0G,EAAA1G,EACAlP,EAAA4uB,KAAAxf,EAAAwG,EAAAxG,EACApP,EAAAqvB,QAAA,GAEAvX,GAAAqZ,YAAA7vB,UAAAwyB,UAAA,SAAA9zB,EAAA+zB,GAEA/zB,EAAA4uB,KAAAxf,GAAApP,EAAAsvB,KAAAV,KAAAxf,GAGApP,EAAA2uB,IAAAzf,EAAAlP,EAAA4uB,KAAA1f,EACAlP,EAAA2uB,IAAAvf,EAAApP,EAAA4uB,KAAAxf,EAEApP,EAAA6uB,IAAA3f,EAAAlP,EAAAsvB,KAAAV,KAAA1f,EACAlP,EAAA6uB,IAAAzf,EAAApP,EAAAsvB,KAAAV,KAAAxf,IAKApP,EAAA6uB,IAAA3f,EAAAlP,EAAA4uB,KAAA1f,EACAlP,EAAA6uB,IAAAzf,EAAApP,EAAA4uB,KAAAxf,EAEApP,EAAA2uB,IAAAzf,EAAAlP,EAAAsvB,KAAAV,KAAA1f,EACAlP,EAAA2uB,IAAAvf,EAAApP,EAAAsvB,KAAAV,KAAAxf,GAEAlG,KAAA8qB,MAAAh0B,GACAA,EAAAgvB,QAAA+E,GAEAjc,GAAAqZ,YAAA7vB,UAAA2yB,eAAA,SAAAC,GAGA,IADA,GAAAC,KAEA,CACA,KAAArc,GAAA6U,SAAA1D,cAAAiL,EAAAvF,IAAAuF,EAAA3E,KAAAZ,MAAA7W,GAAA6U,SAAA7D,YAAAoL,EAAAtF,KAAAsF,EAAArF,MACAqF,IAAA5E,IACA,IAAA4E,EAAAnF,IAAAjX,GAAAqZ,YAAAO,YAAAwC,EAAA3E,KAAAR,IAAAjX,GAAAqZ,YAAAO,WACA,KACA,MAAAwC,EAAA3E,KAAAR,IAAAjX,GAAAqZ,YAAAO,YACAwC,IAAA3E,IAEA,KADA4E,EAAAD,EACAA,EAAAnF,IAAAjX,GAAAqZ,YAAAO,YACAwC,IAAA5E,IACA,IAAA4E,EAAArF,IAAAzf,GAAA8kB,EAAA3E,KAAAZ,IAAAvf,EAAA,CAGA+kB,EAAA5E,KAAAZ,IAAAzf,EAAAglB,EAAAvF,IAAAzf,IACAglB,EAAAC,EACA,QAEA,MAAAD,IAEApc,GAAAqZ,YAAA7vB,UAAA8yB,aAAA,SAAAF,EAAAG,GAEA,GAAAC,GAEAC,EADAC,EAAAN,CAGA,IAAAM,EAAAnF,QAAAvX,GAAAqZ,YAAAQ,KACA,CAIA,GADAuC,EAAAM,EACAH,EACA,CACA,KAAAH,EAAArF,IAAAzf,GAAA8kB,EAAA5E,KAAAX,IAAAvf,GAAA8kB,IAAA5E,IACA,MAAA4E,GAAAM,GAAAN,EAAAnF,IAAAjX,GAAAqZ,YAAAO,YAAAwC,IAAA3E,SAGA,CACA,KAAA2E,EAAArF,IAAAzf,GAAA8kB,EAAA3E,KAAAZ,IAAAvf,GAAA8kB,IAAA3E,IACA,MAAA2E,GAAAM,GAAAN,EAAAnF,IAAAjX,GAAAqZ,YAAAO,YAAAwC,IAAA5E,KAEA,GAAA4E,GAAAM,EAEAA,EAAAH,EAAAH,EAAA5E,KACA4E,EAAA3E,SAGA,CAGA2E,EADAG,EACAG,EAAAlF,KAEAkF,EAAAjF,IACA,IAAAkF,GAAA,GAAA3c,IAAAuY,WACAoE,GAAAnF,KAAA,KACAmF,EAAArlB,EAAA8kB,EAAAvF,IAAAvf,EACAqlB,EAAAnE,UAAA,KACAmE,EAAAlE,WAAA2D,EACAA,EAAAhF,UAAA,EACAsF,EAAAtrB,KAAAkrB,aAAAF,EAAAG,GACAnrB,KAAAwrB,kBAAAD,GAEA,MAAAD,GAuBA,GApBAN,EAAAnF,IAAAjX,GAAAqZ,YAAAO,aAKA4C,EAAAD,EAAAH,EAAA3E,KACA2E,EAAA5E,KACAgF,EAAAjF,QAAAvX,GAAAqZ,YAAAQ,OAEA2C,EAAAvF,IAAAjX,GAAAqZ,YAAAO,WAEA4C,EAAA3F,IAAAzf,GAAAglB,EAAAvF,IAAAzf,GAAAolB,EAAAzF,IAAA3f,GAAAglB,EAAAvF,IAAAzf,GACAhG,KAAAyrB,kBAAAT,GAEAI,EAAA3F,IAAAzf,GAAAglB,EAAAvF,IAAAzf,GACAhG,KAAAyrB,kBAAAT,KAIAI,EAAAJ,EACAG,EACA,CACA,KAAAG,EAAA3F,IAAAzf,GAAAolB,EAAAlF,KAAAX,IAAAvf,GAAAolB,EAAAlF,KAAAD,QAAAvX,GAAAqZ,YAAAQ,MACA6C,IAAAlF,IACA,IAAAkF,EAAAzF,IAAAjX,GAAAqZ,YAAAO,YAAA8C,EAAAlF,KAAAD,QAAAvX,GAAAqZ,YAAAQ,KACA,CAKA,IADA4C,EAAAC,EACAD,EAAAhF,KAAAR,IAAAjX,GAAAqZ,YAAAO,YACA6C,IAAAhF,IACAgF,GAAAhF,KAAAV,IAAA3f,GAAAslB,EAAAlF,KAAAT,IAAA3f,EAEAmlB,IACAG,EAAAD,EAAAhF,MAEAgF,EAAAhF,KAAAV,IAAA3f,EAAAslB,EAAAlF,KAAAT,IAAA3f,IACAslB,EAAAD,EAAAhF,MAEA,KAAA2E,GAAAM,GAEAN,EAAA1E,UAAA0E,EAAA5E,KACA4E,EAAAnF,IAAAjX,GAAAqZ,YAAAO,YAAAwC,GAAAI,GAAAJ,EAAAvF,IAAAzf,GAAAglB,EAAA3E,KAAAV,IAAA3f,GACAhG,KAAAyrB,kBAAAT,GACAA,IAAA5E,IAEA4E,GAAAnF,IAAAjX,GAAAqZ,YAAAO,YAAAwC,GAAAI,GAAAJ,EAAAvF,IAAAzf,GAAAglB,EAAA3E,KAAAV,IAAA3f,GACAhG,KAAAyrB,kBAAAT,GACAM,IAAAlF,SAIA,CACA,KAAAkF,EAAA3F,IAAAzf,GAAAolB,EAAAjF,KAAAZ,IAAAvf,GAAAolB,EAAAjF,KAAAF,QAAAvX,GAAAqZ,YAAAQ,MACA6C,IAAAjF,IACA,IAAAiF,EAAAzF,IAAAjX,GAAAqZ,YAAAO,YAAA8C,EAAAjF,KAAAF,QAAAvX,GAAAqZ,YAAAQ,KACA,CAEA,IADA4C,EAAAC,EACAD,EAAAjF,KAAAP,IAAAjX,GAAAqZ,YAAAO,YACA6C,IAAAjF,IACAiF,GAAAjF,KAAAT,IAAA3f,GAAAslB,EAAAjF,KAAAV,IAAA3f,EAEAmlB,IACAG,EAAAD,EAAAjF,MAEAiF,EAAAjF,KAAAT,IAAA3f,EAAAslB,EAAAjF,KAAAV,IAAA3f,IACAslB,EAAAD,EAAAjF,MAEA,KAAA4E,GAAAM,GAEAN,EAAA1E,UAAA0E,EAAA3E,KACA2E,EAAAnF,IAAAjX,GAAAqZ,YAAAO,YAAAwC,GAAAI,GAAAJ,EAAAvF,IAAAzf,GAAAglB,EAAA5E,KAAAT,IAAA3f,GACAhG,KAAAyrB,kBAAAT,GACAA,IAAA3E,IAEA2E,GAAAnF,IAAAjX,GAAAqZ,YAAAO,YAAAwC,GAAAI,GAAAJ,EAAAvF,IAAAzf,GAAAglB,EAAA5E,KAAAT,IAAA3f,GACAhG,KAAAyrB,kBAAAT,GACAM,IAAAjF,KAIA,MAAAiF,IAGA1c,GAAAqZ,YAAA7vB,UAAAszB,QAAA,SAAAC,EAAAd,EAAAe,GAEAhP,GAEAgP,GAAAf,GAAAjc,GAAA/H,SAAAoG,QACA2B,GAAAhU,MAAA,wCAIAgxB,GACAhd,GAAAhU,MAAA,0CAEA,IAAAixB,GAAAF,EAAAryB,OAAA,CACA,IAAAsyB,EACA,KAAAC,EAAA,GAAAjd,GAAA6U,SAAA7D,YAAA+L,EAAAE,GAAAF,EAAA,OACAE,CACA,MAAAA,EAAA,GAAAjd,GAAA6U,SAAA7D,YAAA+L,EAAAE,GAAAF,EAAAE,EAAA,OACAA,CACA,IAAAD,GAAAC,EAAA,IAAAD,GAAAC,EAAA,EACA,QAGA,QADAC,GAAA,GAAApsB,OACArG,EAAA,EAAmBA,GAAAwyB,EAAYxyB,IAC/ByyB,EAAAj0B,KAAA,GAAA+W,IAAA4W,MACA,IAAAuG,IAAA,CAIAD,GAAA,GAAApG,KAAA1f,EAAA2lB,EAAA,GAAA3lB,EACA8lB,EAAA,GAAApG,KAAAxf,EAAAylB,EAAA,GAAAzlB,CAEA,IAAA8lB,IAAcxB,MAAAxqB,KAAAqoB,eACdroB,MAAAsqB,UAAAqB,EAAA,GAAAK,GACAhsB,KAAAqoB,eAAA2D,EAAAxB,MAEAwB,EAAAxB,MAAAxqB,KAAAqoB,eACAroB,KAAAsqB,UAAAqB,EAAAE,GAAAG,GACAhsB,KAAAqoB,eAAA2D,EAAAxB,MAEAxqB,KAAAyqB,SAAAqB,EAAA,GAAAA,EAAA,GAAAA,EAAAD,GAAAF,EAAA,IACA3rB,KAAAyqB,SAAAqB,EAAAD,GAAAC,EAAA,GAAAA,EAAAD,EAAA,GAAAF,EAAAE,GACA,QAAAxyB,GAAAwyB,EAAA,EAA2BxyB,GAAA,IAAQA,EAEnC2yB,EAAAxB,MAAAxqB,KAAAqoB,eACAroB,KAAAsqB,UAAAqB,EAAAtyB,GAAA2yB,GACAhsB,KAAAqoB,eAAA2D,EAAAxB,MAEAxqB,KAAAyqB,SAAAqB,EAAAzyB,GAAAyyB,EAAAzyB,EAAA,GAAAyyB,EAAAzyB,EAAA,GAAAsyB,EAAAtyB,GAOA,KAJA,GAAA4yB,GAAAH,EAAA,GAEAd,EAAAiB,EACAC,EAAAD,IAKA,GAAAjB,EAAAtF,MAAAsF,EAAA5E,KAAAV,OAAAkG,GAAAZ,EAAA5E,MAAA6F,EAAA,CAUA,GAAAjB,EAAA3E,MAAA2E,EAAA5E,KACA,KACA,KAAAwF,IAAAhd,GAAAqZ,YAAAwB,YAAAuB,EAAA3E,KAAAX,KAAAsF,EAAAtF,KAAAsF,EAAA5E,KAAAV,KAAA1lB,KAAAqoB,iBAAAroB,KAAAuoB,mBAAAvoB,KAAAmsB,sBAAAnB,EAAA3E,KAAAX,KAAAsF,EAAAtF,KAAAsF,EAAA5E,KAAAV,OAcA,GADAsF,IAAA5E,KACA4E,GAAAkB,IAAAN,GAAAZ,EAAA5E,MAAA6F,EAAA,UARAjB,IAAAiB,IACAA,EAAAjB,EAAA5E,MACA4E,EAAAhrB,KAAAosB,WAAApB,GACAA,IAAA3E,KACA6F,EAAAlB,MAtBA,CAEA,GAAAA,KAAA5E,KACA,KACA4E,IAAAiB,IACAA,EAAAjB,EAAA5E,MACA4E,EAAAhrB,KAAAosB,WAAApB,GACAkB,EAAAlB,EAqBA,IAAAY,GAAAZ,KAAA5E,MAAAwF,GAAAZ,EAAA3E,MAAA2E,EAAA5E,KACA,QACAwF,KAEA5rB,KAAAsoB,gBAAA,EACA2D,EAAA5F,KAAAF,OAAAvX,GAAAqZ,YAAAQ,MAGAuC,EAAAiB,CACA,GACAjsB,MAAA4qB,UAAAI,EAAAH,GACAG,IAAA5E,KACA2F,GAAAf,EAAAtF,KAAAxf,GAAA+lB,EAAAvG,KAAAxf,IACA6lB,GAAA,SAEAf,GAAAiB,EAIA,IAAAF,EACA,CACA,GAAAH,EACA,QACAZ,GAAA3E,KAAAF,OAAAvX,GAAAqZ,YAAAQ,KACAuC,EAAA3E,KAAAZ,IAAAzf,EAAAglB,EAAA3E,KAAAV,IAAA3f,GACAhG,KAAAyrB,kBAAAT,EAAA3E,KACA,IAAAkF,GAAA,GAAA3c,IAAAuY,WAOA,KANAoE,EAAAnF,KAAA,KACAmF,EAAArlB,EAAA8kB,EAAAvF,IAAAvf,EACAqlB,EAAAnE,UAAA,KACAmE,EAAAlE,WAAA2D,EACAO,EAAAlE,WAAAtB,KAAAnX,GAAAsW,SAAAE,QACAmG,EAAAlE,WAAArB,UAAA,EACAgF,EAAA5E,KAAAD,QAAAvX,GAAAqZ,YAAAQ,MAEAuC,EAAA1E,UAAA0E,EAAA5E,KACA4E,EAAAvF,IAAAzf,GAAAglB,EAAA3E,KAAAV,IAAA3f,GACAhG,KAAAyrB,kBAAAT,GACAA,IAAA5E,IAIA,OAFApmB,MAAAwrB,kBAAAD,GACAvrB,KAAAooB,QAAAvwB,KAAAi0B,IACA,EAEA9rB,KAAAooB,QAAAvwB,KAAAi0B,EACA,IAAAO,GACAC,EAAA,IAOA,KAHA1d,GAAA6U,SAAA7D,YAAAoL,EAAA3E,KAAAZ,IAAAuF,EAAA3E,KAAAV,OACAqF,IAAA5E,MAIA4E,EAAAhrB,KAAA+qB,eAAAC,GACAA,GAAAsB,GAFA,CAIA,MAAAA,IACAA,EAAAtB,EAGA,IAAAO,GAAA,GAAA3c,IAAAuY,WACAoE,GAAAnF,KAAA,KACAmF,EAAArlB,EAAA8kB,EAAAvF,IAAAvf,EACA8kB,EAAAnF,GAAAmF,EAAA3E,KAAAR,IAEA0F,EAAAnE,UAAA4D,EAAA3E,KACAkF,EAAAlE,WAAA2D,EACAqB,GAAA,IAKAd,EAAAnE,UAAA4D,EACAO,EAAAlE,WAAA2D,EAAA3E,KACAgG,GAAA,GAGAd,EAAAnE,UAAArB,KAAAnX,GAAAsW,SAAAC,OACAoG,EAAAlE,WAAAtB,KAAAnX,GAAAsW,SAAAE,QACAwG,EAEAL,EAAAnE,UAAAhB,MAAAmF,EAAAlE,WACAkE,EAAAnE,UAAApB,WAAA,EAEAuF,EAAAnE,UAAApB,UAAA,EAJAuF,EAAAnE,UAAApB,UAAA,EAKAuF,EAAAlE,WAAArB,WAAAuF,EAAAnE,UAAApB,UACAgF,EAAAhrB,KAAAkrB,aAAAK,EAAAnE,UAAAiF,GACArB,EAAA7E,QAAAvX,GAAAqZ,YAAAQ,OACAuC,EAAAhrB,KAAAkrB,aAAAF,EAAAqB,GACA,IAAApB,GAAAjrB,KAAAkrB,aAAAK,EAAAlE,YAAAgF,EACApB,GAAA9E,QAAAvX,GAAAqZ,YAAAQ,OAAAwC,EAAAjrB,KAAAkrB,aAAAD,GAAAoB,IACAd,EAAAnE,UAAAjB,QAAAvX,GAAAqZ,YAAAQ,KACA8C,EAAAnE,UAAA,KACAmE,EAAAlE,WAAAlB,QAAAvX,GAAAqZ,YAAAQ,OACA8C,EAAAlE,WAAA,MACArnB,KAAAwrB,kBAAAD,GACAc,IACArB,EAAAC,GAEA,UAEArc,GAAAqZ,YAAA7vB,UAAAwO,SAAA,SAAA2lB,EAAA1B,EAAA2B,GAKA,OADAhwB,IAAA,EACAnD,EAAA,EAAAupB,EAAA2J,EAAAjzB,OAAsCD,EAAAupB,IAAUvpB,EAChD2G,KAAA0rB,QAAAa,EAAAlzB,GAAAwxB,EAAA2B,KACAhwB,GAAA,EACA,OAAAA,IAGAoS,GAAAqZ,YAAA7vB,UAAA+zB,sBAAA,SAAAvC,EAAAC,EAAAC,GAEA,QAAAlb,GAAA6U,SAAA7D,YAAAgK,EAAAE,IAAAlb,GAAA6U,SAAA7D,YAAAgK,EAAAC,IAAAjb,GAAA6U,SAAA7D,YAAAkK,EAAAD,MAKAD,EAAA5jB,GAAA8jB,EAAA9jB,EACA6jB,EAAA7jB,EAAA4jB,EAAA5jB,GAAA6jB,EAAA7jB,EAAA8jB,EAAA9jB,EAEA6jB,EAAA3jB,EAAA0jB,EAAA1jB,GAAA2jB,EAAA3jB,EAAA4jB,EAAA5jB,IAEA0I,GAAAqZ,YAAA7vB,UAAAg0B,WAAA,SAAAt1B,GAGAA,EAAAuvB,KAAAD,KAAAtvB,EAAAsvB,KACAtvB,EAAAsvB,KAAAC,KAAAvvB,EAAAuvB,IACA,IAAA7pB,GAAA1F,EAAAsvB,IAEA,OADAtvB,GAAAuvB,KAAA,KACA7pB,GAEAoS,GAAAqZ,YAAA7vB,UAAA0yB,MAAA,SAAAh0B,GAEAA,EAAA8uB,MAAA5f,EAAAlP,EAAA6uB,IAAA3f,EAAAlP,EAAA2uB,IAAAzf,EACAlP,EAAA8uB,MAAA1f,EAAApP,EAAA6uB,IAAAzf,EAAApP,EAAA2uB,IAAAvf,EACA,IAAApP,EAAA8uB,MAAA1f,EAAApP,EAAA+uB,GAAAjX,GAAAqZ,YAAAO,WACA1xB,EAAA+uB,GAAA/uB,EAAA8uB,MAAA,EAAA9uB,EAAA8uB,MAAA,GAEAhX,GAAAqZ,YAAA7vB,UAAAozB,kBAAA,SAAAiB,GAEA,UAAAzsB,KAAAkoB,aAEAloB,KAAAkoB,aAAAuE,MAEA,IAAAA,EAAAvmB,GAAAlG,KAAAkoB,aAAAhiB,EAEAumB,EAAArG,KAAApmB,KAAAkoB,aACAloB,KAAAkoB,aAAAuE,MAGA,CAEA,IADA,GAAApC,GAAArqB,KAAAkoB,aACA,OAAAmC,EAAAjE,MAAAqG,EAAAvmB,EAAAmkB,EAAAjE,KAAAlgB,GACAmkB,IAAAjE,IACAqG,GAAArG,KAAAiE,EAAAjE,KACAiE,EAAAjE,KAAAqG,IAGA7d,GAAAqZ,YAAA7vB,UAAAs0B,eAAA,WAEA,OAAA1sB,KAAAmoB,cAEAnoB,KAAAmoB,YAAAnoB,KAAAmoB,YAAA/B,OAEAxX,GAAAqZ,YAAA7vB,UAAAqzB,kBAAA,SAAA30B,GAKA,GAAA61B,GAAA71B,EAAA6uB,IAAA3f,CACAlP,GAAA6uB,IAAA3f,EAAAlP,EAAA2uB,IAAAzf,EACAlP,EAAA2uB,IAAAzf,EAAA2mB,EACAhQ,KAEAgQ,EAAA71B,EAAA6uB,IAAAla,EACA3U,EAAA6uB,IAAAla,EAAA3U,EAAA2uB,IAAAha,EACA3U,EAAA2uB,IAAAha,EAAAkhB,IAGA/d,GAAAqZ,YAAA7vB,UAAAw0B,MAAA,WAGA,GADA5sB,KAAAmoB,YAAAnoB,KAAAkoB,aACA,MAAAloB,KAAAmoB,YAKA,IADA,GAAA0E,GAAA7sB,KAAAkoB,aACA,MAAA2E,GACA,CACA,GAAA/1B,GAAA+1B,EAAAzF,SACA,OAAAtwB,IAGAA,EAAA4uB,KAAA1f,EAAAlP,EAAA2uB,IAAAzf,EACAlP,EAAA4uB,KAAAxf,EAAApP,EAAA2uB,IAAAvf,EACApP,EAAAivB,KAAAnX,GAAAsW,SAAAC,OACAruB,EAAAqvB,OAAAvX,GAAAqZ,YAAAS,YAEA5xB,EAAA+1B,EAAAxF,WACA,MAAAvwB,IAGAA,EAAA4uB,KAAA1f,EAAAlP,EAAA2uB,IAAAzf,EACAlP,EAAA4uB,KAAAxf,EAAApP,EAAA2uB,IAAAvf,EACApP,EAAAivB,KAAAnX,GAAAsW,SAAAE,QACAtuB,EAAAqvB,OAAAvX,GAAAqZ,YAAAS,YAEAmE,IAAAzG,OAGAxX,GAAAxI,QAAA,SAAA0mB,GAEA,wBAAAA,EAAA,GACA9sB,KAAA+sB,WAAA,KACA/sB,KAAAgtB,WAAApe,GAAA1H,SAAAwd,eACA1kB,KAAAitB,WAAA,KACAjtB,KAAAktB,cAAA,KACAltB,KAAAmtB,cAAA,KACAntB,KAAAotB,gBAAA,KACAptB,KAAAqtB,wBAAA,KACArtB,KAAAstB,iBAAA,EACAttB,KAAAutB,eAAA3e,GAAApI,aAAAC,WACAzG,KAAAwtB,eAAA5e,GAAApI,aAAAC,WACAzG,KAAAytB,QAAA,KACAztB,KAAA0tB,aAAA,KACA1tB,KAAA2tB,iBAAA,EACA3tB,KAAA4tB,iBAAA,EACA5tB,KAAA6tB,gBAAA,EACAjf,GAAAqZ,YAAA7wB,KAAA4I,MACAA,KAAAitB,WAAA,KACAjtB,KAAAktB,cAAA,KACAltB,KAAAmtB,cAAA,KACAntB,KAAAotB,gBAAA,GAAA1tB,OACAM,KAAAqtB,wBAAAze,GAAAmY,oBAAAC,QACAhnB,KAAAstB,iBAAA,EACAttB,KAAA2tB,iBAAA,EACA3tB,KAAA+sB,WAAA,GAAArtB,OACAM,KAAAytB,QAAA,GAAA/tB,OACAM,KAAA0tB,aAAA,GAAAhuB,OACAM,KAAA4tB,gBAAA,OAAAd,GACA9sB,KAAA6tB,eAAA,OAAAf,GACA9sB,KAAAuoB,kBAAA,OAAAuE,GACAnQ,KAEA3c,KAAA8tB,cAAA,OAGAlf,GAAAxI,QAAA2nB,kBAAA,EACAnf,GAAAxI,QAAA4nB,iBAAA,EACApf,GAAAxI,QAAA6nB,oBAAA,EAEArf,GAAAxI,QAAAhO,UAAAuqB,MAAA,WAEA,IAAA3iB,KAAAooB,QAAA9uB,SAGA0G,KAAAkuB,oBACAtf,GAAAqZ,YAAA7vB,UAAAuqB,MAAAvrB,KAAA4I,QAGA4O,GAAAxI,QAAAhO,UAAA+1B,oBAAA,WAEA,YAAAnuB,KAAAitB,YACA,CACA,GAAAmB,GAAApuB,KAAAitB,WAAA7G,IACApmB,MAAAitB,WAAA,KACAjtB,KAAAitB,WAAAmB,IAGAxf,GAAAxI,QAAAhO,UAAAw0B,MAAA,WAEAhe,GAAAqZ,YAAA7vB,UAAAw0B,MAAAx1B,KAAA4I,MACAA,KAAAitB,WAAA,KACAjtB,KAAAktB,cAAA,KACAltB,KAAAmtB,cAAA,IAGA,KADA,GAAAN,GAAA7sB,KAAAkoB,aACA,OAAA2E,GAEA7sB,KAAAquB,eAAAxB,EAAA3mB,GACA2mB,IAAAzG,MAGAxX,GAAAxI,QAAAhO,UAAAi2B,eAAA,SAAAnoB,GAEA,UAAAlG,KAAAitB,WAEAjtB,KAAAitB,WAAA,GAAAre,IAAA0Y,SACAtnB,KAAAitB,WAAA7G,KAAA,KACApmB,KAAAitB,WAAA/mB,QAEA,IAAAA,EAAAlG,KAAAitB,WAAA/mB,EACA,CACA,GAAAooB,GAAA,GAAA1f,IAAA0Y,QACAgH,GAAApoB,IACAooB,EAAAlI,KAAApmB,KAAAitB,WACAjtB,KAAAitB,WAAAqB,MAGA,CAEA,IADA,GAAAF,GAAApuB,KAAAitB,WACA,OAAAmB,EAAAhI,MAAAlgB,GAAAkoB,EAAAhI,KAAAlgB,GACAkoB,IAAAhI,IACA,IAAAlgB,GAAAkoB,EAAAloB,EACA,MAEA,IAAAooB,GAAA,GAAA1f,IAAA0Y,QACAgH,GAAApoB,IACAooB,EAAAlI,KAAAgI,EAAAhI,KACAgI,EAAAhI,KAAAkI,IAIA1f,GAAAxI,QAAAhO,UAAA6O,QAAA,WAEA,GAAA7K,GAAAglB,UACAsC,EAAAtnB,EAAA9C,OACAi1B,EAAAnyB,EAAA,YAAAwS,IAAA5H,QACA,OAAA0c,IAAA6K,EACA,CACA,GAAAxhB,GAAA3Q,EAAA,GACAoyB,EAAApyB,EAAA,GACAqyB,EAAAryB,EAAA,GACAsyB,EAAAtyB,EAAA,EACA,IAAA4D,KAAAstB,gBACA,QACAttB,MAAAsoB,gBACA1Z,GAAAhU,MAAA,0DACAoF,KAAAstB,iBAAA,EACA1e,GAAA+T,MAAA6L,GACAxuB,KAAAwtB,eAAAiB,EACAzuB,KAAAutB,eAAAmB,EACA1uB,KAAAgtB,WAAAjgB,EACA/M,KAAA2tB,iBAAA,CACA,KAEA,GAAAgB,GAAA3uB,KAAA4uB,iBAEAD,IAAA3uB,KAAA6uB,YAAAL,GAEA,QAEAxuB,KAAAkuB,oBACAluB,KAAAstB,iBAAA,EAEA,MAAAqB,GAEA,MAAAjL,GAAA6K,EACA,CACA,GAAAxhB,GAAA3Q,EAAA,GACA0yB,EAAA1yB,EAAA,GACAqyB,EAAAryB,EAAA,GACAsyB,EAAAtyB,EAAA,EACA,IAAA4D,KAAAstB,gBACA,QACAttB,MAAAstB,iBAAA,EACAttB,KAAAwtB,eAAAiB,EACAzuB,KAAAutB,eAAAmB,EACA1uB,KAAAgtB,WAAAjgB,EACA/M,KAAA2tB,iBAAA,CACA,KAEA,GAAAgB,GAAA3uB,KAAA4uB,iBAEAD,IAAA3uB,KAAA+uB,aAAAD,GAEA,QAEA9uB,KAAAkuB,oBACAluB,KAAAstB,iBAAA,EAEA,MAAAqB,GAEA,MAAAjL,IAAA6K,EACA,CACA,GAAAxhB,GAAA3Q,EAAA,GACAoyB,EAAApyB,EAAA,EACA,OAAA4D,MAAAiH,QAAA8F,EAAAyhB,EAAA5f,GAAApI,aAAAC,WAAAmI,GAAApI,aAAAC,YAEA,MAAAid,GAAA6K,EACA,CACA,GAAAxhB,GAAA3Q,EAAA,GACA0yB,EAAA1yB,EAAA,EACA,OAAA4D,MAAAiH,QAAA8F,EAAA+hB,EAAAlgB,GAAApI,aAAAC,WAAAmI,GAAApI,aAAAC,cAGAmI,GAAAxI,QAAAhO,UAAA42B,eAAA,SAAAC,GAIA,UAAAA,EAAAxH,YAAAwH,EAAAxM,QAAAwM,EAAAxH,UAAAhF,QAAA,OAAAwM,EAAAxH,UAAAC,KAAA,CAGA,IADA,GAAAwH,GAAAD,EAAAxH,UACA,OAAAyH,MAAAzM,QAAAwM,EAAAxM,QAAA,OAAAyM,EAAAxH,MACAwH,IAAAzH,SACAwH,GAAAxH,UAAAyH,IAEAtgB,GAAAxI,QAAAhO,UAAAw2B,gBAAA,WAEA,IAGA,GADA5uB,KAAA4sB,QACA,OAAA5sB,KAAAmoB,YACA,QACA,IAAAgH,GAAAnvB,KAAAovB,aACA,IAIA,GAHApvB,KAAAqvB,yBAAAF,GACAvgB,GAAA+T,MAAA3iB,KAAA0tB,cACA1tB,KAAAsvB,oBAAA,GACA,OAAAtvB,KAAAitB,WACA,KACA,IAAAsC,GAAAvvB,KAAAovB,aACA,KAAApvB,KAAAwvB,qBAAAD,GAAA,QAEAvvB,MAAAyvB,4BAAAF,GACAJ,EAAAI,QAEA,OAAAvvB,KAAAitB,YAAA,OAAAjtB,KAAAmoB,YAEA,QAAA9uB,GAAA,EAAAupB,EAAA5iB,KAAA+sB,WAAAzzB,OAAoDD,EAAAupB,EAAUvpB,IAC9D,CACA,GAAA41B,GAAAjvB,KAAA+sB,WAAA1zB,EACA,QAAA41B,EAAAvH,KAAAuH,EAAAjN,SAEAiN,EAAAxM,OAAAziB,KAAA4tB,kBAAA5tB,KAAA0vB,KAAAT,GAAA,GACAjvB,KAAA2vB,mBAAAV,EAAAvH,KAEA1nB,KAAA4vB,iBACA,QAAAv2B,GAAA,EAAAupB,EAAA5iB,KAAA+sB,WAAAzzB,OAAoDD,EAAAupB,EAAUvpB,IAC9D,CACA,GAAA41B,GAAAjvB,KAAA+sB,WAAA1zB,EACA,QAAA41B,EAAAvH,KAAAuH,EAAAjN,QACAhiB,KAAA6vB,gBAAAZ,GAIA,MAFAjvB,MAAA6tB,gBACA7tB,KAAA8vB,oBACA,EAEA,QAEAlhB,GAAA+T,MAAA3iB,KAAAytB,SACA7e,GAAA+T,MAAA3iB,KAAA0tB,gBAGA9e,GAAAxI,QAAAhO,UAAAg3B,YAAA,WAEA,GAAAlpB,GAAAlG,KAAAitB,WAAA/mB,CAEA,OADAlG,MAAAitB,WAAAjtB,KAAAitB,WAAA7G,KACAlgB,GAGA0I,GAAAxI,QAAAhO,UAAA81B,kBAAA,WAEA,OAAA70B,GAAA,EAAAupB,EAAA5iB,KAAA+sB,WAAAzzB,OAAkDD,EAAAupB,IAAUvpB,EAC5D2G,KAAA+vB,cAAA12B,EACAuV,IAAA+T,MAAA3iB,KAAA+sB,aAEAne,GAAAxI,QAAAhO,UAAA23B,cAAA,SAAAC,GAEA,GAAAf,GAAAjvB,KAAA+sB,WAAAiD,EACAf,GAAAvH,IAAA,KACAuH,EAAA,KACAjvB,KAAA+sB,WAAAiD,GAAA,MAGAphB,GAAAxI,QAAAhO,UAAA63B,QAAA,SAAAC,EAAAC,EAAAnI,GAEA,GAAAnrB,GAAA,GAAA+R,IAAAiZ,IACAhrB,GAAAirB,OAAAoI,EACArzB,EAAAkrB,OAAAoI,EAEAtzB,EAAAmrB,MAAAhiB,EAAAgiB,EAAAhiB,EACAnJ,EAAAmrB,MAAA9hB,EAAA8hB,EAAA9hB,EACAlG,KAAAytB,QAAA51B,KAAAgF,IAEA+R,GAAAxI,QAAAhO,UAAAg4B,aAAA,SAAAC,EAAArI,GAEA,GAAAnrB,GAAA,GAAA+R,IAAAiZ,IACAhrB,GAAAirB,OAAAuI,EAEAxzB,EAAAmrB,MAAAhiB,EAAAgiB,EAAAhiB,EACAnJ,EAAAmrB,MAAA9hB,EAAA8hB,EAAA9hB,EACAlG,KAAA0tB,aAAA71B,KAAAgF,IAEA8f,KAEA/N,GAAAxI,QAAAhO,UAAAk4B,KAAA,SAAA5jB,EAAAgd,EAAAC,GAEA,UAAA3pB,KAAA8tB,cACA,CACA,MAAAphB,EAAAjB,GAAA,OAAAzL,KAAA8tB,cAAA,MACAlf,IAAA6U,SAAA7D,YAAAlT,EAAAgd,EAAAjE,KAAA/Y,EAAAjB,EAAAie,EAAAjE,IAAAha,EACAmD,GAAA6U,SAAA7D,YAAAlT,EAAAgd,EAAA/D,KAAAjZ,EAAAjB,EAAAie,EAAA/D,IAAAla,EACAmD,GAAA6U,SAAA7D,YAAAlT,EAAAid,EAAAlE,KAAA/Y,EAAAjB,EAAAke,EAAAlE,IAAAha,EACAmD,GAAA6U,SAAA7D,YAAAlT,EAAAid,EAAAhE,KAAAjZ,EAAAjB,EAAAke,EAAAhE,IAAAla,EACAqiB,cAAApE,EAAAjE,IAAAiE,EAAA/D,IAAAgE,EAAAlE,IAAAkE,EAAAhE,IAAAjZ,MAOAkC,GAAAxI,QAAAhO,UAAAi3B,yBAAA,SAAAF,GAEA,YAAAnvB,KAAAmoB,aAAAnoB,KAAAmoB,YAAAjiB,GAAAipB,GACA,CACA,GAAAoB,GAAAvwB,KAAAmoB,YAAAf,UACAoJ,EAAAxwB,KAAAmoB,YAAAd,UACArnB,MAAA0sB,gBACA,IAAAwD,GAAA,IAkCA,IAjCA,OAAAK,GAEAvwB,KAAAywB,kBAAAD,EAAA,MACAxwB,KAAA0wB,gBAAAF,GACAxwB,KAAA2wB,eAAAH,KACAN,EAAAlwB,KAAA4wB,SAAAJ,IAAA/K,OAEA,MAAA+K,GAEAxwB,KAAAywB,kBAAAF,EAAA,MACAvwB,KAAA0wB,gBAAAH,GACAvwB,KAAA2wB,eAAAJ,KACAL,EAAAlwB,KAAA4wB,SAAAL,IAAA9K,MACAzlB,KAAAquB,eAAAkC,EAAA5K,IAAAzf,KAIAlG,KAAAywB,kBAAAF,EAAA,MACAvwB,KAAAywB,kBAAAD,EAAAD,GACAvwB,KAAA0wB,gBAAAH,GACAC,EAAAvK,QAAAsK,EAAAtK,QACAuK,EAAAtK,SAAAqK,EAAArK,SACAlmB,KAAA2wB,eAAAJ,KACAL,EAAAlwB,KAAA6wB,gBAAAN,EAAAC,EAAAD,EAAA9K,MACAzlB,KAAAquB,eAAAkC,EAAA5K,IAAAzf,IAEA,MAAAsqB,IAEA5hB,GAAAqZ,YAAAe,aAAAwH,GACAxwB,KAAA8wB,aAAAN,GAEAxwB,KAAAquB,eAAAmC,EAAA7K,IAAAzf,IAEA,MAAAqqB,GAAA,MAAAC,EAAA,CAEA,UAAAN,GAAAthB,GAAAqZ,YAAAe,aAAAwH,IAAAxwB,KAAA0tB,aAAAp0B,OAAA,OAAAk3B,EAAAxK,UAEA,OAAA3sB,GAAA,EAAAupB,EAAA5iB,KAAA0tB,aAAAp0B,OAAwDD,EAAAupB,EAAUvpB,IAClE,CAGA,GAAAwD,GAAAmD,KAAA0tB,aAAAr0B,EAEA2G,MAAA+wB,oBAAAl0B,EAAAirB,OAAAhB,GAAA9gB,EAAAnJ,EAAAmrB,MAAAhiB,EAAAwqB,EAAA/K,IAAAzf,EAAAwqB,EAAA7K,IAAA3f,IACAhG,KAAAiwB,QAAApzB,EAAAirB,OAAAoI,EAAArzB,EAAAmrB,OAGA,GAAAuI,EAAApK,QAAA,UAAAoK,EAAA/J,WACA+J,EAAA/J,UAAAd,KAAA1f,GAAAuqB,EAAA9K,IAAAzf,GACAuqB,EAAA/J,UAAAL,QAAA,GACAvX,GAAAqZ,YAAAwB,YAAA8G,EAAA/J,UAAA+J,EAAAvwB,KAAAqoB,iBACA,IAAAkI,EAAAvK,WAAA,IAAAuK,EAAA/J,UAAAR,UACA,CACA,GAAAmK,GAAAnwB,KAAA4wB,SAAAL,EAAA/J,UAAA+J,EAAA9K,IACAzlB,MAAAiwB,QAAAC,EAAAC,EAAAI,EAAA5K,KAEA,GAAA4K,EAAAhK,WAAAiK,EACA,CACA,GAAAA,EAAArK,QAAA,GAAAqK,EAAAhK,UAAAL,QAAA,GACAvX,GAAAqZ,YAAAwB,YAAA+G,EAAAhK,UAAAgK,EAAAxwB,KAAAqoB,iBACA,IAAAmI,EAAAxK,WAAA,IAAAwK,EAAAhK,UAAAR,UACA,CACA,GAAAmK,GAAAnwB,KAAA4wB,SAAAJ,EAAAhK,UAAAgK,EAAA/K,IACAzlB,MAAAiwB,QAAAC,EAAAC,EAAAK,EAAA7K,KAEA,GAAA7uB,GAAAy5B,EAAAhK,SACA,WAAAzvB,EACA,KAAAA,GAAA05B,GAIAxwB,KAAAgxB,eAAAR,EAAA15B,EAAAy5B,EAAA7K,MAAA,GAEA5uB,IAAAyvB,cAKA3X,GAAAxI,QAAAhO,UAAAq4B,kBAAA,SAAAQ,EAAAC,GAEA,UAAAlxB,KAAAktB,cAEA+D,EAAAzK,UAAA,KACAyK,EAAA1K,UAAA,KACAvmB,KAAAktB,cAAA+D,MAEA,WAAAC,GAAAlxB,KAAAmxB,kBAAAnxB,KAAAktB,cAAA+D,GAEAA,EAAAzK,UAAA,KACAyK,EAAA1K,UAAAvmB,KAAAktB,cACAltB,KAAAktB,cAAA1G,UAAAyK,EACAjxB,KAAAktB,cAAA+D,MAGA,CAGA,IAFA,OAAAC,IACAA,EAAAlxB,KAAAktB,eACA,OAAAgE,EAAA3K,YAAAvmB,KAAAmxB,kBAAAD,EAAA3K,UAAA0K,IACAC,IAAA3K,SACA0K,GAAA1K,UAAA2K,EAAA3K,UACA,OAAA2K,EAAA3K,YACA2K,EAAA3K,UAAAC,UAAAyK,GACAA,EAAAzK,UAAA0K,EACAA,EAAA3K,UAAA0K,IAGAriB,GAAAxI,QAAAhO,UAAA+4B,kBAAA,SAAAzH,EAAAC,GAEA,MAAAA,GAAAjE,KAAA1f,GAAA0jB,EAAAhE,KAAA1f,EAEA2jB,EAAAhE,IAAAzf,EAAAwjB,EAAA/D,IAAAzf,EACAyjB,EAAAhE,IAAA3f,EAAA4I,GAAAxI,QAAAgrB,KAAA1H,EAAAC,EAAAhE,IAAAzf,GAEAwjB,EAAA/D,IAAA3f,EAAA4I,GAAAxI,QAAAgrB,KAAAzH,EAAAD,EAAA/D,IAAAzf,GAGAyjB,EAAAjE,KAAA1f,EAAA0jB,EAAAhE,KAAA1f,GAEA4I,GAAAxI,QAAAhO,UAAAi5B,kBAAA,SAAAJ,GAEA,MAAAA,GAAAnL,SAAAlX,GAAA/H,SAAAC,UACA9G,KAAAwtB,gBAAA5e,GAAApI,aAAAC,WAEAzG,KAAAutB,gBAAA3e,GAAApI,aAAAC,YAEAmI,GAAAxI,QAAAhO,UAAAk5B,qBAAA,SAAAL,GAEA,MAAAA,GAAAnL,SAAAlX,GAAA/H,SAAAC,UACA9G,KAAAutB,gBAAA3e,GAAApI,aAAAC,WAEAzG,KAAAwtB,gBAAA5e,GAAApI,aAAAC,YAEAmI,GAAAxI,QAAAhO,UAAAu4B,eAAA,SAAAM,GAEA,GAAAM,GAAAC,CAWA,QAVAP,EAAAnL,SAAAlX,GAAA/H,SAAAC,WAEAyqB,EAAAvxB,KAAAwtB,eACAgE,EAAAxxB,KAAAutB,iBAIAgE,EAAAvxB,KAAAutB,eACAiE,EAAAxxB,KAAAwtB,gBAEA+D,GAEA,IAAA3iB,IAAApI,aAAAC,WACA,OAAAwqB,EAAAjL,WAAA,GAAAiL,EAAAhL,QACA,QACA,MACA,KAAArX,IAAApI,aAAAme,WACA,MAAA/kB,KAAAY,IAAAywB,EAAAhL,SACA,QACA,MACA,KAAArX,IAAApI,aAAAoe,YACA,MAAAqM,EAAAhL,QACA,QACA,MACA,SACA,GAAAgL,EAAAhL,UAAA,EACA,SAGA,OAAAjmB,KAAAgtB,YAEA,IAAApe,IAAA1H,SAAAwd,eACA,OAAA8M,GAEA,IAAA5iB,IAAApI,aAAAC,WACA,IAAAmI,IAAApI,aAAAme,WACA,WAAAsM,EAAA/K,QACA,KAAAtX,IAAApI,aAAAoe,YACA,MAAAqM,GAAA/K,SAAA,CACA,SACA,MAAA+K,GAAA/K,SAAA,EAEA,IAAAtX,IAAA1H,SAAAC,QACA,OAAAqqB,GAEA,IAAA5iB,IAAApI,aAAAC,WACA,IAAAmI,IAAApI,aAAAme,WACA,WAAAsM,EAAA/K,QACA,KAAAtX,IAAApI,aAAAoe,YACA,MAAAqM,GAAA/K,UAAA,CACA,SACA,MAAA+K,GAAA/K,UAAA,EAEA,IAAAtX,IAAA1H,SAAAkG,aACA,GAAA6jB,EAAAnL,SAAAlX,GAAA/H,SAAAC,UACA,OAAA0qB,GAEA,IAAA5iB,IAAApI,aAAAC,WACA,IAAAmI,IAAApI,aAAAme,WACA,WAAAsM,EAAA/K,QACA,KAAAtX,IAAApI,aAAAoe,YACA,MAAAqM,GAAA/K,UAAA,CACA,SACA,MAAA+K,GAAA/K,UAAA,MAGA,QAAAsL,GAEA,IAAA5iB,IAAApI,aAAAC,WACA,IAAAmI,IAAApI,aAAAme,WACA,WAAAsM,EAAA/K,QACA,KAAAtX,IAAApI,aAAAoe,YACA,MAAAqM,GAAA/K,SAAA,CACA,SACA,MAAA+K,GAAA/K,SAAA,EAEA,IAAAtX,IAAA1H,SAAAoG,MACA,OAAA2jB,EAAAjL,UAYA,QAXA,QAAAwL,GAEA,IAAA5iB,IAAApI,aAAAC,WACA,IAAAmI,IAAApI,aAAAme,WACA,WAAAsM,EAAA/K,QACA,KAAAtX,IAAApI,aAAAoe,YACA,MAAAqM,GAAA/K,UAAA,CACA,SACA,MAAA+K,GAAA/K,UAAA,GAKA,UAEAtX,GAAAxI,QAAAhO,UAAAs4B,gBAAA,SAAAO,GAIA,IAFA,GAAAn6B,GAAAm6B,EAAAzK,UAEA,OAAA1vB,MAAAgvB,SAAAmL,EAAAnL,SAAA,IAAAhvB,EAAAkvB,YACAlvB,IAAA0vB,SACA,WAAA1vB,EAEAm6B,EAAAhL,QAAA,IAAAgL,EAAAjL,UAAA,EAAAiL,EAAAjL,UACAiL,EAAA/K,SAAA,EACApvB,EAAAkJ,KAAAktB,kBAGA,QAAA+D,EAAAjL,WAAAhmB,KAAAgtB,YAAApe,GAAA1H,SAAAC,QAEA8pB,EAAAhL,QAAA,EACAgL,EAAA/K,SAAApvB,EAAAovB,SACApvB,IAAAyvB,cAGA,IAAAvmB,KAAAqxB,kBAAAJ,GACA,CAEA,OAAAA,EAAAjL,UACA,CAIA,IAFA,GAAAyL,IAAA,EACA9H,EAAA7yB,EAAA0vB,UACA,OAAAmD,GAEAA,EAAA7D,SAAAhvB,EAAAgvB,SAAA,IAAA6D,EAAA3D,YACAyL,MACA9H,IAAAnD,SAEAyK,GAAAhL,QAAAwL,EAAA,QAIAR,GAAAhL,QAAAgL,EAAAjL,SAEAiL,GAAA/K,SAAApvB,EAAAovB,SACApvB,IAAAyvB,cAMAzvB,GAAAmvB,QAAAnvB,EAAAkvB,UAAA,EAIApmB,KAAAY,IAAA1J,EAAAmvB,SAAA,EAIAnvB,EAAAkvB,UAAAiL,EAAAjL,UAAA,EACAiL,EAAAhL,QAAAnvB,EAAAmvB,QAEAgL,EAAAhL,QAAAnvB,EAAAmvB,QAAAgL,EAAAjL,UAGAiL,EAAAhL,QAAA,IAAAgL,EAAAjL,UAAA,EAAAiL,EAAAjL,UAMA,IAAAiL,EAAAjL,UACAiL,EAAAhL,QAAAnvB,EAAAmvB,QAAA,EAAAnvB,EAAAmvB,QAAA,EAAAnvB,EAAAmvB,QAAA,EACAnvB,EAAAkvB,UAAAiL,EAAAjL,UAAA,EACAiL,EAAAhL,QAAAnvB,EAAAmvB,QAEAgL,EAAAhL,QAAAnvB,EAAAmvB,QAAAgL,EAAAjL,UAEAiL,EAAA/K,SAAApvB,EAAAovB,SACApvB,IAAAyvB,SAIA,IAAAvmB,KAAAsxB,qBAAAL,GAGA,KAAAn6B,GAAAm6B,GAEA,IAAAn6B,EAAAkvB,YACAiL,EAAA/K,SAAA,IAAA+K,EAAA/K,SAAA,KACApvB,IAAAyvB,cAMA,MAAAzvB,GAAAm6B,GAEAA,EAAA/K,UAAApvB,EAAAkvB,UACAlvB,IAAAyvB,WAIA3X,GAAAxI,QAAAhO,UAAA04B,aAAA,SAAAG,GAIA,OAAAjxB,KAAAmtB,eAEAntB,KAAAmtB,cAAA8D;AACAA,EAAAvK,UAAA,KACAuK,EAAAxK,UAAA,OAIAwK,EAAAxK,UAAAzmB,KAAAmtB,cACA8D,EAAAvK,UAAA,KACA1mB,KAAAmtB,cAAAzG,UAAAuK,EACAjxB,KAAAmtB,cAAA8D,IAGAriB,GAAAxI,QAAAhO,UAAAs5B,aAAA,WAEA,GAAA56B,GAAAkJ,KAAAktB,aAEA,KADAltB,KAAAmtB,cAAAr2B,EACA,OAAAA,GAEAA,EAAA4vB,UAAA5vB,EAAA0vB,UACA1vB,EAAA2vB,UAAA3vB,EAAAyvB,UACAzvB,IAAAyvB,WAGA3X,GAAAxI,QAAAhO,UAAAu5B,mBAAA,SAAAC,EAAAC,GAGA,GAAAD,EAAArL,WAAAqL,EAAApL,WAAAqL,EAAAtL,WAAAsL,EAAArL,UAAA,CAEA,GAAAoL,EAAArL,WAAAsL,EACA,CACA,GAAAvtB,GAAAutB,EAAAtL,SACA,QAAAjiB,IACAA,EAAAkiB,UAAAoL,EACA,IAAAE,GAAAF,EAAApL,SACA,QAAAsL,IACAA,EAAAvL,UAAAsL,GACAA,EAAArL,UAAAsL,EACAD,EAAAtL,UAAAqL,EACAA,EAAApL,UAAAqL,EACAD,EAAArL,UAAAjiB,MAEA,IAAAutB,EAAAtL,WAAAqL,EACA,CACA,GAAAttB,GAAAstB,EAAArL,SACA,QAAAjiB,IACAA,EAAAkiB,UAAAqL,EACA,IAAAC,GAAAD,EAAArL,SACA,QAAAsL,IACAA,EAAAvL,UAAAqL,GACAA,EAAApL,UAAAsL,EACAF,EAAArL,UAAAsL,EACAA,EAAArL,UAAAoL,EACAC,EAAAtL,UAAAjiB,MAGA,CACA,GAAAA,GAAAstB,EAAArL,UACAuL,EAAAF,EAAApL,SACAoL,GAAArL,UAAAsL,EAAAtL,UACA,OAAAqL,EAAArL,YACAqL,EAAArL,UAAAC,UAAAoL,GACAA,EAAApL,UAAAqL,EAAArL,UACA,OAAAoL,EAAApL,YACAoL,EAAApL,UAAAD,UAAAqL,GACAC,EAAAtL,UAAAjiB,EACA,OAAAutB,EAAAtL,YACAsL,EAAAtL,UAAAC,UAAAqL,GACAA,EAAArL,UAAAsL,EACA,OAAAD,EAAArL,YACAqL,EAAArL,UAAAD,UAAAsL,GAEA,OAAAD,EAAApL,UACAxmB,KAAAktB,cAAA0E,EACA,OAAAC,EAAArL,YACAxmB,KAAAktB,cAAA2E,KAEAjjB,GAAAxI,QAAAhO,UAAA25B,mBAAA,SAAAH,EAAAC,GAEA,YAAAD,EAAAnL,WAAA,OAAAmL,EAAAlL,WAEA,OAAAmL,EAAApL,WAAA,OAAAoL,EAAAnL,WAAA,CAEA,GAAAkL,EAAAnL,WAAAoL,EACA,CACA,GAAAvtB,GAAAutB,EAAApL,SACA,QAAAniB,IACAA,EAAAoiB,UAAAkL,EACA,IAAAE,GAAAF,EAAAlL,SACA,QAAAoL,IACAA,EAAArL,UAAAoL,GACAA,EAAAnL,UAAAoL,EACAD,EAAApL,UAAAmL,EACAA,EAAAlL,UAAAmL,EACAD,EAAAnL,UAAAniB,MAEA,IAAAutB,EAAApL,WAAAmL,EACA,CACA,GAAAttB,GAAAstB,EAAAnL,SACA,QAAAniB,IACAA,EAAAoiB,UAAAmL,EACA,IAAAC,GAAAD,EAAAnL,SACA,QAAAoL,IACAA,EAAArL,UAAAmL,GACAA,EAAAlL,UAAAoL,EACAF,EAAAnL,UAAAoL,EACAA,EAAAnL,UAAAkL,EACAC,EAAApL,UAAAniB,MAGA,CACA,GAAAA,GAAAstB,EAAAnL,UACAqL,EAAAF,EAAAlL,SACAkL,GAAAnL,UAAAoL,EAAApL,UACA,OAAAmL,EAAAnL,YACAmL,EAAAnL,UAAAC,UAAAkL,GACAA,EAAAlL,UAAAmL,EAAAnL,UACA,OAAAkL,EAAAlL,YACAkL,EAAAlL,UAAAD,UAAAmL,GACAC,EAAApL,UAAAniB,EACA,OAAAutB,EAAApL,YACAoL,EAAApL,UAAAC,UAAAmL,GACAA,EAAAnL,UAAAoL,EACA,OAAAD,EAAAnL,YACAmL,EAAAnL,UAAAD,UAAAoL,GAEA,OAAAD,EAAAlL,UACA1mB,KAAAmtB,cAAAyE,EACA,OAAAC,EAAAnL,YACA1mB,KAAAmtB,cAAA0E,KAEAjjB,GAAAxI,QAAAhO,UAAA45B,gBAAA,SAAAtI,EAAAC,EAAAjd,GAEA1M,KAAA4wB,SAAAlH,EAAAhd,GACA,GAAAid,EAAA3D,WAAAhmB,KAAA4wB,SAAAjH,EAAAjd,GACAgd,EAAAvD,QAAAwD,EAAAxD,QAEAuD,EAAAvD,QAAA,EACAwD,EAAAxD,QAAA,GAEAuD,EAAAvD,OAAAwD,EAAAxD,OACAnmB,KAAAiyB,cAAAvI,EAAAC,GAEA3pB,KAAAiyB,cAAAtI,EAAAD,IAEA9a,GAAAxI,QAAAhO,UAAAy4B,gBAAA,SAAAnH,EAAAC,EAAAjd,GAEA,GAAAlQ,GACA1F,EAAAo7B,CAyBA,IAxBAtjB,GAAAqZ,YAAAe,aAAAW,IAAAD,EAAA7D,GAAA8D,EAAA9D,IAEArpB,EAAAwD,KAAA4wB,SAAAlH,EAAAhd,GACAid,EAAAxD,OAAAuD,EAAAvD,OACAuD,EAAA3D,KAAAnX,GAAAsW,SAAAC,OACAwE,EAAA5D,KAAAnX,GAAAsW,SAAAE,QACAtuB,EAAA4yB,EAEAwI,EADAp7B,EAAA0vB,WAAAmD,EACAA,EAAAnD,UAEA1vB,EAAA0vB,YAIAhqB,EAAAwD,KAAA4wB,SAAAjH,EAAAjd,GACAgd,EAAAvD,OAAAwD,EAAAxD,OACAuD,EAAA3D,KAAAnX,GAAAsW,SAAAE,QACAuE,EAAA5D,KAAAnX,GAAAsW,SAAAC,OACAruB,EAAA6yB,EAEAuI,EADAp7B,EAAA0vB,WAAAkD,EACAA,EAAAlD,UAEA1vB,EAAA0vB,WAEA,OAAA0L,KAAA/L,QAAA,GAAAvX,GAAAxI,QAAAgrB,KAAAc,EAAAxlB,EAAAxG,IAAA0I,GAAAxI,QAAAgrB,KAAAt6B,EAAA4V,EAAAxG,IAAA0I,GAAAqZ,YAAAwB,YAAA3yB,EAAAo7B,EAAAlyB,KAAAqoB,iBAAA,IAAAvxB,EAAAkvB,WAAA,IAAAkM,EAAAlM,UACA,CACA,GAAAmM,GAAAnyB,KAAA4wB,SAAAsB,EAAAxlB,EACA1M,MAAAiwB,QAAAzzB,EAAA21B,EAAAr7B,EAAA6uB,KAEA,MAAAnpB,IAEAoS,GAAAxI,QAAAhO,UAAAg6B,aAAA,WAEA,GAAA51B,GAAA,GAAAoS,IAAA2Y,MAUA,OATA/qB,GAAAgrB,KAAA,EACAhrB,EAAAimB,QAAA,EACAjmB,EAAAwlB,QAAA,EACAxlB,EAAAirB,UAAA,KACAjrB,EAAAkrB,IAAA,KACAlrB,EAAAmrB,SAAA,KACAnrB,EAAAilB,SAAA,KACAzhB,KAAA+sB,WAAAl1B,KAAA2E,GACAA,EAAAgrB,IAAAxnB,KAAA+sB,WAAAzzB,OAAA,EACAkD,GAEAoS,GAAAxI,QAAAhO,UAAAw4B,SAAA,SAAA95B,EAAA4V,GAEA,GAAA2lB,GAAAv7B,EAAAivB,MAAAnX,GAAAsW,SAAAC,MACA,IAAAruB,EAAAqvB,OAAA,EACA,CACA,GAAA8I,GAAAjvB,KAAAoyB,cACAnD,GAAAjN,OAAA,IAAAlrB,EAAAkvB,SACA,IAAAsM,GAAA,GAAA1jB,IAAAgZ,KAYA,OAXAqH,GAAAvH,IAAA4K,EACAA,EAAA9K,IAAAyH,EAAAzH,IAEA8K,EAAAxL,GAAA9gB,EAAA0G,EAAA1G,EACAssB,EAAAxL,GAAA5gB,EAAAwG,EAAAxG,EACAosB,EAAAlM,KAAAkM,EACAA,EAAAjM,KAAAiM,EACArD,EAAAjN,QACAhiB,KAAAuyB,aAAAz7B,EAAAm4B,GACAn4B,EAAAqvB,OAAA8I,EAAAzH,IAEA8K,EAIA,GAAArD,GAAAjvB,KAAA+sB,WAAAj2B,EAAAqvB,QAEAnoB,EAAAixB,EAAAvH,GACA,IAAA2K,GAAAzjB,GAAA6U,SAAA7D,YAAAlT,EAAA1O,EAAA8oB,IACA,MAAA9oB,EACA,KAAAq0B,GAAAzjB,GAAA6U,SAAA7D,YAAAlT,EAAA1O,EAAAqoB,KAAAS,IACA,MAAA9oB,GAAAqoB,IACA,IAAAiM,GAAA,GAAA1jB,IAAAgZ,KAWA,OAVA0K,GAAA9K,IAAAyH,EAAAzH,IAEA8K,EAAAxL,GAAA9gB,EAAA0G,EAAA1G,EACAssB,EAAAxL,GAAA5gB,EAAAwG,EAAAxG,EACAosB,EAAAlM,KAAApoB,EACAs0B,EAAAjM,KAAAroB,EAAAqoB,KACAiM,EAAAjM,KAAAD,KAAAkM,EACAt0B,EAAAqoB,KAAAiM,EACAD,IACApD,EAAAvH,IAAA4K,GACAA,GAGA1jB,GAAAxI,QAAAhO,UAAAo6B,WAAA,SAAA5I,EAAAC,GAEA,GAAA8C,GAAA,GAAA/d,IAAA6U,SAAAmG,EAAAY,MAEAZ,GAAAY,MAAAxkB,EAAA6jB,EAAAW,MAAAxkB,EACA4jB,EAAAY,MAAAtkB,EAAA2jB,EAAAW,MAAAtkB,EAEA2jB,EAAAW,MAAAxkB,EAAA2mB,EAAA3mB,EACA6jB,EAAAW,MAAAtkB,EAAAymB,EAAAzmB,GAEA0I,GAAAxI,QAAAhO,UAAA24B,oBAAA,SAAA0B,EAAAC,EAAAC,EAAAC,GAEA,GAAAjG,EAaA,OAZA8F,GAAAC,IAEA/F,EAAA8F,EACAA,EAAAC,EACAA,EAAA/F,GAEAgG,EAAAC,IAEAjG,EAAAgG,EACAA,EAAAC,EACAA,EAAAjG,GAEA8F,EAAAG,GAAAD,EAAAD,GAGA9jB,GAAAxI,QAAAhO,UAAAm6B,aAAA,SAAAz7B,EAAAm4B,GAIA,IAFA,GAAA4D,IAAA,EACAlJ,EAAA7yB,EAAA0vB,UACA,OAAAmD,GAEAA,EAAAxD,QAAA,MAAAwD,EAAA3D,YAEA6M,KACA,OAAA5D,EAAAxH,YACAwH,EAAAxH,UAAAznB,KAAA+sB,WAAApD,EAAAxD,UAEAwD,IAAAnD,SAEAqM,KACA5D,EAAAxM,QAAA,IAEA7T,GAAAxI,QAAAhO,UAAA06B,MAAA,SAAAlJ,EAAAC,GAEA,MAAAD,GAAA1jB,GAAA2jB,EAAA3jB,EACA0I,GAAAqZ,YAAAO,YAEAqB,EAAA7jB,EAAA4jB,EAAA5jB,IAAA6jB,EAAA3jB,EAAA0jB,EAAA1jB,IAEA0I,GAAAxI,QAAAhO,UAAA26B,gBAAA,SAAAC,EAAAC,GAGA,IADA,GAAAx1B,GAAAu1B,EAAA3M,KACAzX,GAAA6U,SAAA7D,YAAAniB,EAAAqpB,GAAAkM,EAAAlM,KAAArpB,GAAAu1B,GACAv1B,IAAA4oB,IACA,IAAA6M,GAAAtzB,KAAAY,IAAAR,KAAA8yB,MAAAE,EAAAlM,GAAArpB,EAAAqpB,IAEA,KADArpB,EAAAu1B,EAAA5M,KACAxX,GAAA6U,SAAA7D,YAAAniB,EAAAqpB,GAAAkM,EAAAlM,KAAArpB,GAAAu1B,GACAv1B,IAAA2oB,IACA,IAAA+M,GAAAvzB,KAAAY,IAAAR,KAAA8yB,MAAAE,EAAAlM,GAAArpB,EAAAqpB,IAEA,KADArpB,EAAAw1B,EAAA5M,KACAzX,GAAA6U,SAAA7D,YAAAniB,EAAAqpB,GAAAmM,EAAAnM,KAAArpB,GAAAw1B,GACAx1B,IAAA4oB,IACA,IAAA+M,GAAAxzB,KAAAY,IAAAR,KAAA8yB,MAAAG,EAAAnM,GAAArpB,EAAAqpB,IAEA,KADArpB,EAAAw1B,EAAA7M,KACAxX,GAAA6U,SAAA7D,YAAAniB,EAAAqpB,GAAAmM,EAAAnM,KAAArpB,GAAAw1B,GACAx1B,IAAA2oB,IACA,IAAAiN,GAAAzzB,KAAAY,IAAAR,KAAA8yB,MAAAG,EAAAnM,GAAArpB,EAAAqpB,IACA,OAAAoM,IAAAE,GAAAF,GAAAG,GAAAF,GAAAC,GAAAD,GAAAE,GAEAzkB,GAAAxI,QAAAhO,UAAAk7B,YAAA,SAAApK,GAIA,IAFA,GAAAqK,GAAA,KACA91B,EAAAyrB,EAAA9C,KACA3oB,GAAAyrB,GAEAzrB,EAAAqpB,GAAA5gB,EAAAgjB,EAAApC,GAAA5gB,GAEAgjB,EAAAzrB,EACA81B,EAAA,MAEA91B,EAAAqpB,GAAA5gB,GAAAgjB,EAAApC,GAAA5gB,GAAAzI,EAAAqpB,GAAA9gB,GAAAkjB,EAAApC,GAAA9gB,IAEAvI,EAAAqpB,GAAA9gB,EAAAkjB,EAAApC,GAAA9gB,GAEAutB,EAAA,KACArK,EAAAzrB,GAIAA,EAAA2oB,MAAA8C,GAAAzrB,EAAA4oB,MAAA6C,IACAqK,EAAA91B,IAGAA,IAAA2oB,IAEA,WAAAmN,EAGA,KAAAA,GAAA91B,GAKA,IAHAuC,KAAA+yB,gBAAAt1B,EAAA81B,KACArK,EAAAqK,GACAA,IAAAnN,KACAxX,GAAA6U,SAAA1D,cAAAwT,EAAAzM,GAAAoC,EAAApC,KACAyM,IAAAnN,IAGA,OAAA8C,IAEAta,GAAAxI,QAAAhO,UAAAo7B,gBAAA,SAAAC,EAAAC,GAGA,OAAAD,EAAA9L,WACA8L,EAAA9L,SAAA3nB,KAAAszB,YAAAG,EAAA/L,MACA,OAAAgM,EAAA/L,WACA+L,EAAA/L,SAAA3nB,KAAAszB,YAAAI,EAAAhM,KACA,IAAAiM,GAAAF,EAAA9L,SACAiM,EAAAF,EAAA/L,QACA,OAAAgM,GAAA7M,GAAA5gB,EAAA0tB,EAAA9M,GAAA5gB,EACAutB,EACAE,EAAA7M,GAAA5gB,EAAA0tB,EAAA9M,GAAA5gB,EACAwtB,EACAC,EAAA7M,GAAA9gB,EAAA4tB,EAAA9M,GAAA9gB,EACAytB,EACAE,EAAA7M,GAAA9gB,EAAA4tB,EAAA9M,GAAA9gB,EACA0tB,EACAC,EAAAvN,MAAAuN,EACAD,EACAE,EAAAxN,MAAAwN,EACAH,EACAzzB,KAAA+yB,gBAAAY,EAAAC,GACAH,EAEAC,GAEA9kB,GAAAxI,QAAAhO,UAAAy7B,oBAAA,SAAAJ,EAAAC,GAEA,EAEA,IADAD,IAAAhM,UACAgM,GAAAC,EACA,eAEA,OAAAD,EACA,WAEA7kB,GAAAxI,QAAAhO,UAAA07B,UAAA,SAAAn6B,GAGA,IADA,GAAAo6B,GAAA/zB,KAAA+sB,WAAApzB,GACAo6B,GAAA/zB,KAAA+sB,WAAAgH,EAAAvM,MACAuM,EAAA/zB,KAAA+sB,WAAAgH,EAAAvM,IACA,OAAAuM,IAEAnlB,GAAAxI,QAAAhO,UAAA65B,cAAA,SAAAvI,EAAAC,GAGA,GAEAqK,GAFAP,EAAAzzB,KAAA+sB,WAAArD,EAAAvD,QACAuN,EAAA1zB,KAAA+sB,WAAApD,EAAAxD,OAGA6N,GADAh0B,KAAA6zB,oBAAAJ,EAAAC,GACAA,EACA1zB,KAAA6zB,oBAAAH,EAAAD,GACAA,EAEAzzB,KAAAwzB,gBAAAC,EAAAC,EACA,IAIAO,GAJAC,EAAAT,EAAA/L,IACAyM,EAAAD,EAAA7N,KACA+N,EAAAV,EAAAhM,IACA2M,EAAAD,EAAA/N,IAGAqD,GAAA3D,MAAAnX,GAAAsW,SAAAC,QAEAwE,EAAA5D,MAAAnX,GAAAsW,SAAAC,QAGAnlB,KAAA2vB,mBAAAyE,GACAA,EAAAhO,KAAA8N,EACAA,EAAA7N,KAAA+N,EACAD,EAAA/N,KAAAiO,EACAA,EAAAhO,KAAA8N,EACAV,EAAA/L,IAAA2M,IAKAA,EAAAjO,KAAA8N,EACAA,EAAA7N,KAAAgO,EACAD,EAAA/N,KAAA8N,EACAA,EAAA/N,KAAAgO,EACAX,EAAA/L,IAAA0M,GAEAH,EAAArlB,GAAAsW,SAAAC,SAIAwE,EAAA5D,MAAAnX,GAAAsW,SAAAE,SAGAplB,KAAA2vB,mBAAAyE,GACAD,EAAA/N,KAAAiO,EACAA,EAAAhO,KAAA8N,EACAC,EAAAhO,KAAA8N,EACAA,EAAA7N,KAAA+N,IAKAD,EAAA/N,KAAAgO,EACAA,EAAA/N,KAAA8N,EACAD,EAAA7N,KAAAgO,EACAA,EAAAjO,KAAA8N,GAEAD,EAAArlB,GAAAsW,SAAAE,SAEAqO,EAAA9L,SAAA,KACAqM,GAAAN,IAEAA,EAAAjM,WAAAgM,IACAA,EAAAhM,UAAAiM,EAAAjM,WACAgM,EAAAhR,OAAAiR,EAAAjR,QAEAiR,EAAAhM,IAAA,KACAgM,EAAA/L,SAAA,KACA+L,EAAAjM,UAAAgM,CACA,IAAAa,GAAA5K,EAAAvD,OACAoO,EAAA5K,EAAAxD,MACAuD,GAAAvD,QAAA,EAEAwD,EAAAxD,QAAA,CAEA,KADA,GAAArvB,GAAAkJ,KAAAktB,cACA,OAAAp2B,GACA,CACA,GAAAA,EAAAqvB,QAAAoO,EACA,CACAz9B,EAAAqvB,OAAAmO,EACAx9B,EAAAivB,KAAAkO,CACA,OAEAn9B,IAAAyvB,UAEAmN,EAAAlM,IAAAiM,EAAAjM,KAEA5Y,GAAAxI,QAAAhO,UAAAu3B,mBAAA,SAAAzG,GAEA,UAAAA,EAAA,CAEA,GAAAsL,GACArL,CACAqL,GAAAtL,CACA,GACAC,GAAAqL,EAAApO,KACAoO,EAAApO,KAAAoO,EAAAnO,KACAmO,EAAAnO,KAAA8C,EACAqL,EAAArL,QAEAqL,GAAAtL,KAEAta,GAAAxI,QAAAquB,UAAA,SAAA7C,EAAAC,GAEA,GAAAoC,GAAArC,EAAA7L,IACA6L,GAAA7L,KAAA8L,EAAA9L,KACA8L,EAAA9L,KAAAkO,GAEArlB,GAAAxI,QAAAsuB,gBAAA,SAAA9C,EAAAC,GAEA,GAAA8C,GAAA/C,EAAAzL,MACAyL,GAAAzL,OAAA0L,EAAA1L,OACA0L,EAAA1L,OAAAwO,GAEA/lB,GAAAxI,QAAAhO,UAAA44B,eAAA,SAAAtH,EAAAC,EAAAjd,GAIA,GAAAkoB,GAAAlL,EAAAvD,QAAA,EACA0O,EAAAlL,EAAAxD,QAAA,CAKA,IAHAxJ,IACA3c,KAAAswB,KAAA5jB,EAAAgd,EAAAC,GAEA/M,KAGA,IAAA8M,EAAA1D,WAAA,IAAA2D,EAAA3D,WACA,CAGA,MAAA0D,EAAA1D,WAAA,GAAA2D,EAAA3D,UAAA,MAyCA,aAvCA0D,EAAA5D,SAAA6D,EAAA7D,SACA4D,EAAA1D,WAAA2D,EAAA3D,WAAAhmB,KAAAgtB,YAAApe,GAAA1H,SAAAC,QAEA,IAAAuiB,EAAA1D,UAEA6O,IAEA70B,KAAA4wB,SAAAlH,EAAAhd,GACAkoB,IACAlL,EAAAvD,QAAA,IAKAyO,IAEA50B,KAAA4wB,SAAAjH,EAAAjd,GACAmoB,IACAlL,EAAAxD,QAAA,IAIAuD,EAAA5D,SAAA6D,EAAA7D,UAEA,IAAA4D,EAAA1D,WAAA,GAAApmB,KAAAY,IAAAmpB,EAAA1D,UACAjmB,KAAAgtB,YAAApe,GAAA1H,SAAAC,SAAA,IAAAwiB,EAAAzD,SAMA,IAAAyD,EAAA3D,WAAA,GAAApmB,KAAAY,IAAAkpB,EAAAzD,UACAjmB,KAAAgtB,YAAApe,GAAA1H,SAAAC,SAAA,IAAAuiB,EAAAxD,WAEAlmB,KAAA4wB,SAAAjH,EAAAjd,GACAmoB,IACAlL,EAAAxD,QAAA,KATAnmB,KAAA4wB,SAAAlH,EAAAhd,GACAkoB,IACAlL,EAAAvD,QAAA,MAeA,GAAAuD,EAAA5D,SAAA6D,EAAA7D,QAEA,GAAA9lB,KAAAqxB,kBAAA3H,GACA,CACA,GAAAoL,GAAApL,EAAAzD,OACAyD,GAAAzD,QAAA0D,EAAA1D,QACA0D,EAAA1D,QAAA6O,MAIApL,GAAAzD,QAAA0D,EAAA3D,YAAA,EACA0D,EAAAzD,SAAAyD,EAAAzD,QAEAyD,EAAAzD,SAAA0D,EAAA3D,UACA2D,EAAA1D,QAAAyD,EAAA1D,YAAA,EACA2D,EAAA1D,SAAA0D,EAAA1D,QAEA0D,EAAA1D,SAAAyD,EAAA1D,cAKAhmB,MAAAqxB,kBAAA1H,GAGAD,EAAAxD,SAAA,IAAAwD,EAAAxD,SAAA,IAFAwD,EAAAxD,UAAAyD,EAAA3D,UAGAhmB,KAAAqxB,kBAAA3H,GAGAC,EAAAzD,SAAA,IAAAyD,EAAAzD,SAAA,IAFAyD,EAAAzD,UAAAwD,EAAA1D,SAIA,IAAA+O,GAAAC,EAAAC,EAAAC,CACAxL,GAAA5D,SAAAlX,GAAA/H,SAAAC,WAEAiuB,EAAA/0B,KAAAwtB,eACAyH,EAAAj1B,KAAAutB,iBAIAwH,EAAA/0B,KAAAutB,eACA0H,EAAAj1B,KAAAwtB,gBAEA7D,EAAA7D,SAAAlX,GAAA/H,SAAAC,WAEAkuB,EAAAh1B,KAAAwtB,eACA0H,EAAAl1B,KAAAutB,iBAIAyH,EAAAh1B,KAAAutB,eACA2H,EAAAl1B,KAAAwtB,eAEA,IAAA2H,GAAAC,CACA,QAAAL,GAEA,IAAAnmB,IAAApI,aAAAoe,YACAuQ,EAAAzL,EAAAzD,OACA,MACA,KAAArX,IAAApI,aAAAqe,YACAsQ,GAAAzL,EAAAzD,OACA,MACA,SACAkP,EAAAv1B,KAAAY,IAAAkpB,EAAAzD,SAGA,OAAA+O,GAEA,IAAApmB,IAAApI,aAAAoe,YACAwQ,EAAAzL,EAAA1D,OACA,MACA,KAAArX,IAAApI,aAAAqe,YACAuQ,GAAAzL,EAAA1D,OACA,MACA,SACAmP,EAAAx1B,KAAAY,IAAAmpB,EAAA1D,SAGA,GAAA2O,GAAAC,EAEA,GAAAM,GAAA,GAAAA,GAAA,GAAAC,GAAA,GAAAA,GACA1L,EAAA5D,SAAA6D,EAAA7D,SAAA9lB,KAAAgtB,YAAApe,GAAA1H,SAAAoG,MAEAtN,KAAAgyB,gBAAAtI,EAAAC,EAAAjd,IAIA1M,KAAA4wB,SAAAlH,EAAAhd,GACA1M,KAAA4wB,SAAAjH,EAAAjd,GACAkC,GAAAxI,QAAAquB,UAAA/K,EAAAC,GACA/a,GAAAxI,QAAAsuB,gBAAAhL,EAAAC,QAGA,IAAAiL,EAEA,IAAAQ,GAAA,GAAAA,IAEAp1B,KAAA4wB,SAAAlH,EAAAhd,GACAkC,GAAAxI,QAAAquB,UAAA/K,EAAAC,GACA/a,GAAAxI,QAAAsuB,gBAAAhL,EAAAC,QAGA,IAAAkL,EAEA,IAAAM,GAAA,GAAAA,IAEAn1B,KAAA4wB,SAAAjH,EAAAjd,GACAkC,GAAAxI,QAAAquB,UAAA/K,EAAAC,GACA/a,GAAAxI,QAAAsuB,gBAAAhL,EAAAC,QAGA,SAAAwL,GAAA,GAAAA,GAAA,GAAAC,GAAA,GAAAA,GACA,CAEA,GAAAC,GAAAC,CACA,QAAAL,GAEA,IAAArmB,IAAApI,aAAAoe,YACAyQ,EAAA3L,EAAAxD,QACA,MACA,KAAAtX,IAAApI,aAAAqe,YACAwQ,GAAA3L,EAAAxD,QACA,MACA,SACAmP,EAAAz1B,KAAAY,IAAAkpB,EAAAxD,UAGA,OAAAgP,GAEA,IAAAtmB,IAAApI,aAAAoe,YACA0Q,EAAA3L,EAAAzD,QACA,MACA,KAAAtX,IAAApI,aAAAqe,YACAyQ,GAAA3L,EAAAzD,QACA,MACA,SACAoP,EAAA11B,KAAAY,IAAAmpB,EAAAzD,UAGA,GAAAwD,EAAA5D,SAAA6D,EAAA7D,QAEA9lB,KAAA6wB,gBAAAnH,EAAAC,EAAAjd,OAEA,OAAAyoB,GAAA,GAAAC,EACA,OAAAp1B,KAAAgtB,YAEA,IAAApe,IAAA1H,SAAAwd,eACA2Q,EAAA,GAAAC,EAAA,GACAt1B,KAAA6wB,gBAAAnH,EAAAC,EAAAjd,EACA,MACA,KAAAkC,IAAA1H,SAAAC,QACAkuB,GAAA,GAAAC,GAAA,GACAt1B,KAAA6wB,gBAAAnH,EAAAC,EAAAjd,EACA,MACA,KAAAkC,IAAA1H,SAAAkG,cACAsc,EAAA5D,SAAAlX,GAAA/H,SAAAoG,QAAAooB,EAAA,GAAAC,EAAA,GACA5L,EAAA5D,SAAAlX,GAAA/H,SAAAC,WAAAuuB,GAAA,GAAAC,GAAA,IACAt1B,KAAA6wB,gBAAAnH,EAAAC,EAAAjd,EACA,MACA,KAAAkC,IAAA1H,SAAAoG,MACAtN,KAAA6wB,gBAAAnH,EAAAC,EAAAjd,OAIAkC,IAAAxI,QAAAquB,UAAA/K,EAAAC,KAGA/a,GAAAxI,QAAAhO,UAAAm9B,cAAA,SAAAz+B,GAEA,GAAA0+B,GAAA1+B,EAAA0vB,UACAiP,EAAA3+B,EAAAyvB,SACA,QAAAiP,GAAA,OAAAC,GAAA3+B,GAAAkJ,KAAAktB,gBAGA,OAAAsI,EACAA,EAAAjP,UAAAkP,EAEAz1B,KAAAktB,cAAAuI,EACA,OAAAA,IACAA,EAAAjP,UAAAgP,GACA1+B,EAAAyvB,UAAA,KACAzvB,EAAA0vB,UAAA,OAEA5X,GAAAxI,QAAAhO,UAAAs9B,cAAA,SAAA5+B,GAEA,GAAA6+B,GAAA7+B,EAAA4vB,UACAkP,EAAA9+B,EAAA2vB,SACA,QAAAkP,GAAA,OAAAC,GAAA9+B,GAAAkJ,KAAAmtB,gBAGA,OAAAwI,EACAA,EAAAlP,UAAAmP,EAEA51B,KAAAmtB,cAAAyI,EACA,OAAAA,IACAA,EAAAlP,UAAAiP,GACA7+B,EAAA2vB,UAAA,KACA3vB,EAAA4vB,UAAA,OAEA9X,GAAAxI,QAAAhO,UAAAy9B,kBAAA,SAAA/+B,GAEA,OAAAA,EAAAwvB,WACA1X,GAAAhU,MAAA,kCACA,IAAA46B,GAAA1+B,EAAA0vB,UACAiP,EAAA3+B,EAAAyvB,SAoBA,OAnBAzvB,GAAAwvB,UAAAH,OAAArvB,EAAAqvB,OACA,OAAAqP,EACAA,EAAAjP,UAAAzvB,EAAAwvB,UAEAtmB,KAAAktB,cAAAp2B,EAAAwvB,UACA,OAAAmP,IACAA,EAAAjP,UAAA1vB,EAAAwvB,WACAxvB,EAAAwvB,UAAAP,KAAAjvB,EAAAivB,KACAjvB,EAAAwvB,UAAAN,UAAAlvB,EAAAkvB,UACAlvB,EAAAwvB,UAAAL,QAAAnvB,EAAAmvB,QACAnvB,EAAAwvB,UAAAJ,SAAApvB,EAAAovB,SACApvB,IAAAwvB,UAEAxvB,EAAA4uB,KAAA1f,EAAAlP,EAAA2uB,IAAAzf,EACAlP,EAAA4uB,KAAAxf,EAAApP,EAAA2uB,IAAAvf,EACApP,EAAA0vB,UAAAgP,EACA1+B,EAAAyvB,UAAAkP,EACA7mB,GAAAqZ,YAAAe,aAAAlyB,IACAkJ,KAAAquB,eAAAv3B,EAAA6uB,IAAAzf,GACApP,GAEA8X,GAAAxI,QAAAhO,UAAAk3B,mBAAA,SAAAwG,GAGA,IADA,GAAAC,GAAA/1B,KAAAmtB,cACA,OAAA4I,GAEA/1B,KAAA01B,cAAAK,GACA/1B,KAAAg2B,kBAAAD,EAAAD,GACAC,EAAA/1B,KAAAmtB,eAGAve,GAAAxI,QAAAhO,UAAA69B,iBAAA,SAAAC,EAAAC,GAEAD,EAAAzQ,IAAAzf,EAAAkwB,EAAAvQ,IAAA3f,GAEAmwB,EAAAC,KAAAF,EAAAzQ,IAAAzf,EACAmwB,EAAAE,MAAAH,EAAAvQ,IAAA3f,EACAmwB,EAAAG,IAAA1nB,GAAAyW,UAAAE,eAIA4Q,EAAAC,KAAAF,EAAAvQ,IAAA3f,EACAmwB,EAAAE,MAAAH,EAAAzQ,IAAAzf,EACAmwB,EAAAG,IAAA1nB,GAAAyW,UAAAC,eAGA1W,GAAAxI,QAAAhO,UAAA49B,kBAAA,SAAAD,EAAAD,GAEA,GAAAK,IAAgBG,IAAA,KAAAF,KAAA,KAAAC,MAAA,KAChBr2B,MAAAi2B,iBAAAF,EAAAI,EAOA,KANA,GAAAI,GAAAJ,EAAAG,IACAE,EAAAL,EAAAC,KACAK,EAAAN,EAAAE,MAEAK,EAAAX,EACAY,EAAA,KACA,OAAAD,EAAApQ,WAAA1X,GAAAqZ,YAAAe,aAAA0N,EAAApQ,YACAoQ,IAAApQ,SAGA,KAFA,OAAAoQ,EAAApQ,YACAqQ,EAAA32B,KAAA42B,cAAAF,MAEA,CAGA,IAFA,GAAAG,GAAAd,GAAAW,EACA5/B,EAAAkJ,KAAA82B,aAAAf,EAAAQ,GACA,OAAAz/B,KAIAA,EAAA4uB,KAAA1f,GAAA+vB,EAAApQ,IAAA3f,GAAA,OAAA+vB,EAAAzP,WAAAxvB,EAAA+uB,GAAAkQ,EAAAzP,UAAAT,KAHA,CAKA,GAAA6E,GAAA1qB,KAAA82B,aAAAhgC,EAAAy/B,EAEA,IAAAA,GAAA3nB,GAAAyW,UAAAE,cAAAzuB,EAAA4uB,KAAA1f,GAAAywB,GAAAF,GAAA3nB,GAAAyW,UAAAC,cAAAxuB,EAAA4uB,KAAA1f,GAAAwwB,EACA,CAGA,GAAA1/B,GAAA6/B,GAAAE,EACA,CACA,GAAAd,EAAA5P,QAAA,EACA,CAGA,IAFA,GAAA4Q,GAAA/2B,KAAA4wB,SAAAmF,IAAApQ,KACAqR,EAAAh3B,KAAAmtB,cACA,OAAA6J,GACA,CACA,GAAAA,EAAA7Q,QAAA,GACAnmB,KAAA+wB,oBAAAgF,EAAAtQ,IAAAzf,EACA+vB,EAAApQ,IAAA3f,EAAAgxB,EAAAvR,IAAAzf,EAAAgxB,EAAArR,IAAA3f,GACA,CACA,GAAAixB,GAAAj3B,KAAA4wB,SAAAoG,IAAAvR,IACAzlB,MAAAiwB,QAAAgH,EAAAF,EAAAC,EAAArR,KAEAqR,IAAAvQ,UAEAzmB,KAAAowB,aAAA2G,EAAAhB,EAAAtQ,KACAzlB,KAAAgyB,gBAAA+D,EAAAY,EAAAZ,EAAApQ,KAIA,MAFA3lB,MAAAu1B,cAAAQ,OACA/1B,MAAAu1B,cAAAoB,GAGA,GAAAJ,GAAA3nB,GAAAyW,UAAAE,aACA,CACA,GAAAuB,GAAA,GAAAlY,IAAA6U,SAAA3sB,EAAA4uB,KAAA1f,EAAA+vB,EAAArQ,KAAAxf,EACAlG,MAAAgxB,eAAA+E,EAAAj/B,EAAAgwB,OAGA,CACA,GAAAA,GAAA,GAAAlY,IAAA6U,SAAA3sB,EAAA4uB,KAAA1f,EAAA+vB,EAAArQ,KAAAxf,EACAlG,MAAAgxB,eAAAl6B,EAAAi/B,EAAAjP,GAEA9mB,KAAA2xB,mBAAAoE,EAAAj/B,OAEA,IAAAy/B,GAAA3nB,GAAAyW,UAAAE,cAAAzuB,EAAA4uB,KAAA1f,GAAAywB,GAAAF,GAAA3nB,GAAAyW,UAAAC,cAAAxuB,EAAA4uB,KAAA1f,GAAAwwB,EACA,KACA1/B,GAAA4zB,EAGA,UAAAqL,EAAAzP,YAAA1X,GAAAqZ,YAAAe,aAAA+M,EAAAzP,WAaA,KAXAyP,GAAA/1B,KAAA61B,kBAAAE,GACAA,EAAA5P,QAAA,GACAnmB,KAAA4wB,SAAAmF,IAAAtQ,IAEA,IAAA0Q,IAAsBG,IAAAC,EAAAH,KAAAI,EAAAH,MAAAI,EACtBz2B,MAAAi2B,iBAAAF,EAAAI,GACAI,EAAAJ,EAAAG,IACAE,EAAAL,EAAAC,KACAK,EAAAN,EAAAE,MAMA,UAAAN,EAAAzP,UAEA,GAAAyP,EAAA5P,QAAA,EACA,CACA,GAAA4Q,GAAA/2B,KAAA4wB,SAAAmF,IAAApQ,IAGA,IAFAmQ,GAAA91B,KAAAowB,aAAA2G,EAAAhB,EAAAtQ,KACAsQ,EAAA/1B,KAAA61B,kBAAAE,GACA,IAAAA,EAAA/P,UACA,MAEA,IAAA2E,GAAAoL,EAAAvP,UACAkE,EAAAqL,EAAAxP,SACA,WAAAoE,KAAAjF,KAAA1f,GAAA+vB,EAAAtQ,IAAAzf,GACA2kB,EAAAjF,KAAAxf,GAAA6vB,EAAAtQ,IAAAvf,GAAA,IAAAykB,EAAA3E,WACA2E,EAAAxE,QAAA,GAAAwE,EAAAjF,KAAAxf,EAAAykB,EAAAhF,IAAAzf,GACA0I,GAAAqZ,YAAAwB,YAAAsM,EAAApL,EAAA3qB,KAAAqoB,gBACA,CACA,GAAA4O,GAAAj3B,KAAA4wB,SAAAjG,EAAAoL,EAAAtQ,IACAzlB,MAAAiwB,QAAA8G,EAAAE,EAAAlB,EAAApQ,SAEA,WAAA+E,KAAAhF,KAAA1f,GAAA+vB,EAAAtQ,IAAAzf,GACA0kB,EAAAhF,KAAAxf,GAAA6vB,EAAAtQ,IAAAvf,GAAA,IAAAwkB,EAAA1E,WACA0E,EAAAvE,QAAA,GAAAuE,EAAAhF,KAAAxf,EAAAwkB,EAAA/E,IAAAzf,GACA0I,GAAAqZ,YAAAwB,YAAAsM,EAAArL,EAAA1qB,KAAAqoB,gBACA,CACA,GAAA4O,GAAAj3B,KAAA4wB,SAAAlG,EAAAqL,EAAAtQ,IACAzlB,MAAAiwB,QAAA8G,EAAAE,EAAAlB,EAAApQ,UAGAoQ,GAAA/1B,KAAA61B,kBAAAE,OAIAA,GAAA5P,QAAA,GACAnmB,KAAA4wB,SAAAmF,IAAApQ,KACA3lB,KAAAu1B,cAAAQ,IAGAnnB,GAAAxI,QAAAhO,UAAA0+B,aAAA,SAAAhgC,EAAAuuB,GAEA,MAAAA,IAAAzW,GAAAyW,UAAAE,aAAAzuB,EAAAyvB,UAAAzvB,EAAA0vB,WAEA5X,GAAAxI,QAAAhO,UAAA8+B,SAAA,SAAApgC,GAEA,cAAAA,KAAAuvB,KAAAC,WAAAxvB,KAAAsvB,KAAAE,WAAAxvB,GAEA8X,GAAAxI,QAAAhO,UAAA++B,SAAA,SAAArgC,EAAAoP,GAEA,cAAApP,KAAA6uB,IAAAzf,MAAA,OAAApP,EAAAwvB,WAEA1X,GAAAxI,QAAAhO,UAAAg/B,eAAA,SAAAtgC,EAAAoP,GAEA,MAAApP,GAAA6uB,IAAAzf,MAAA,OAAApP,EAAAwvB,WAEA1X,GAAAxI,QAAAhO,UAAAw+B,cAAA,SAAA9/B,GAEA,GAAA0F,GAAA,IAKA,OAJAoS,IAAA6U,SAAA7D,YAAA9oB,EAAAsvB,KAAAT,IAAA7uB,EAAA6uB,MAAA,OAAA7uB,EAAAsvB,KAAAE,UACA9pB,EAAA1F,EAAAsvB,KACAxX,GAAA6U,SAAA7D,YAAA9oB,EAAAuvB,KAAAV,IAAA7uB,EAAA6uB,MAAA,OAAA7uB,EAAAuvB,KAAAC,YACA9pB,EAAA1F,EAAAuvB,MACA,OAAA7pB,KAAA2pB,SAAA,IAAA3pB,EAAA+pB,WAAA/pB,EAAAgqB,WAAA5X,GAAAqZ,YAAAe,aAAAxsB,IAEAA,EADA,MAIAoS,GAAAxI,QAAAhO,UAAAo3B,qBAAA,SAAAD,GAEA,SAAAvvB,KAAAktB,cACA,QACA,KAGA,GADAltB,KAAAq3B,mBAAA9H,GACA,GAAAvvB,KAAAotB,gBAAA9zB,OACA,QACA,OAAA0G,KAAAotB,gBAAA9zB,SAAA0G,KAAAs3B,yBAGA,QAFAt3B,MAAAu3B,uBAIA,MAAAC,GAEAx3B,KAAAmtB,cAAA,KACAntB,KAAAotB,gBAAA9zB,OAAA,EACAsV,GAAAhU,MAAA,8BAGA,MADAoF,MAAAmtB,cAAA,MACA,GAEAve,GAAAxI,QAAAhO,UAAAi/B,mBAAA,SAAA9H,GAEA,UAAAvvB,KAAAktB,cAAA,CAGA,GAAAp2B,GAAAkJ,KAAAktB,aAGA,KADAltB,KAAAmtB,cAAAr2B,EACA,OAAAA,GAEAA,EAAA4vB,UAAA5vB,EAAA0vB,UACA1vB,EAAA2vB,UAAA3vB,EAAAyvB,UACAzvB,EAAA4uB,KAAA1f,EAAA4I,GAAAxI,QAAAgrB,KAAAt6B,EAAAy4B,GACAz4B,IAAAyvB,SAIA,KADA,GAAAkR,IAAA,EACAA,GAAA,OAAAz3B,KAAAmtB,eACA,CAGA,IAFAsK,GAAA,EACA3gC,EAAAkJ,KAAAmtB,cACA,OAAAr2B,EAAA2vB,WACA,CACA,GAAAiE,GAAA5zB,EAAA2vB,UACA/Z,EAAA,GAAAkC,IAAA6U,QAEA,IAAA3sB,EAAA4uB,KAAA1f,EAAA0kB,EAAAhF,KAAA1f,EACA,CACAhG,KAAA03B,eAAA5gC,EAAA4zB,EAAAhe,EACA,IAAAirB,GAAA,GAAA/oB,IAAA+X,aACAgR,GAAA/Q,MAAA9vB,EACA6gC,EAAA9Q,MAAA6D,EAEAiN,EAAA7Q,GAAA9gB,EAAA0G,EAAA1G,EACA2xB,EAAA7Q,GAAA5gB,EAAAwG,EAAAxG,EACAlG,KAAAotB,gBAAAv1B,KAAA8/B,GACA33B,KAAA+xB,mBAAAj7B,EAAA4zB,GACA+M,GAAA,MAGA3gC,GAAA4zB,EAEA,UAAA5zB,EAAA4vB,UAGA,KAFA5vB,GAAA4vB,UAAAD,UAAA,KAIAzmB,KAAAmtB,cAAA,OAEAve,GAAAxI,QAAAhO,UAAAw/B,cAAA,SAAAC,GAEA,MAAAA,GAAAjR,MAAAH,WAAAoR,EAAAhR,OAAAgR,EAAAjR,MAAAF,WAAAmR,EAAAhR,OAEAjY,GAAAxI,QAAA0xB,kBAAA,SAAA7Q,EAAAC,GAIA,MAAAA,GAAAJ,GAAA5gB,EAAA+gB,EAAAH,GAAA5gB,GAEA0I,GAAAxI,QAAAhO,UAAAk/B,uBAAA,WAKAt3B,KAAAotB,gBAAA2K,KAAA/3B,KAAAqtB,yBACArtB,KAAA0xB,cAEA,QADArP,GAAAriB,KAAAotB,gBAAA9zB,OACAD,EAAA,EAAmBA,EAAAgpB,EAAShpB,IAC5B,CACA,IAAA2G,KAAA43B,cAAA53B,KAAAotB,gBAAA/zB,IACA,CAEA,IADA,GAAAwD,GAAAxD,EAAA,EACAwD,EAAAwlB,IAAAriB,KAAA43B,cAAA53B,KAAAotB,gBAAAvwB,KACAA,GACA,IAAAA,GAAAwlB,EACA,QACA,IAAAsK,GAAA3sB,KAAAotB,gBAAA/zB,EACA2G,MAAAotB,gBAAA/zB,GAAA2G,KAAAotB,gBAAAvwB,GACAmD,KAAAotB,gBAAAvwB,GAAA8vB,EAEA3sB,KAAA+xB,mBAAA/xB,KAAAotB,gBAAA/zB,GAAAutB,MAAA5mB,KAAAotB,gBAAA/zB,GAAAwtB,OAEA,UAEAjY,GAAAxI,QAAAhO,UAAAm/B,qBAAA,WAEA,OAAAl+B,GAAA,EAAAupB,EAAA5iB,KAAAotB,gBAAA9zB,OAAuDD,EAAAupB,EAAUvpB,IACjE,CACA,GAAA2+B,GAAAh4B,KAAAotB,gBAAA/zB,EACA2G,MAAAgxB,eAAAgH,EAAApR,MAAAoR,EAAAnR,MAAAmR,EAAAlR,IACA9mB,KAAA2xB,mBAAAqG,EAAApR,MAAAoR,EAAAnR,OAEA7mB,KAAAotB,gBAAA9zB,OAAA,EAOA,IAAA2+B,IAAA,SAAA77B,GAEA,MAAAA,GAAA,EAAAwD,KAAAyjB,KAAAjnB,EAAA,IAAAwD,KAAAs4B,MAAA97B,IAEA+7B,GAAA,SAAA/7B,GAEA,MAAAA,GAAA,EAAAwD,KAAAyjB,KAAAjnB,EAAA,IAAAwD,KAAAyP,MAAAjT,EAAA,KAEAg8B,GAAA,SAAAh8B,GAEA,MAAAA,GAAA,GAAAwD,KAAAs4B,MAAAt4B,KAAAY,IAAApE,IAAAwD,KAAAs4B,MAAA97B,IAEAi8B,GAAA,SAAAj8B,GAEA,MAAAA,GAAA,GAEAA,GAAA,GACAA,GAAA,WAAAwD,KAAAyjB,KAAAjnB,GAAA,EAAAA,IAIAA,GAAA,GACAA,EAAA,WAAAwD,KAAAyP,MAAAjT,GAAA,EAAAA,GAGAihB,IAAAa,KAAAtP,GAAAxI,QAAAud,MAAAsU,GACA5a,GAAAE,SAAA3O,GAAAxI,QAAAud,MAAAyU,GACA/a,GAAAG,OAAA5O,GAAAxI,QAAAud,MAAA0U,GACAzpB,GAAAxI,QAAAud,MAAAwU,GACAvpB,GAAAxI,QAAAgrB,KAAA,SAAAH,EAAAqH,GAIA,MAAAA,IAAArH,EAAAtL,IAAAzf,EACA+qB,EAAAtL,IAAA3f,EACAirB,EAAAxL,IAAAzf,EAAA4I,GAAAxI,QAAAud,MAAAsN,EAAApL,IAAAyS,EAAArH,EAAAxL,IAAAvf,KAEA0I,GAAAxI,QAAAhO,UAAAs/B,eAAA,SAAA9F,EAAAC,EAAA0G,GAEAA,EAAAvyB,EAAA,EACAuyB,EAAAryB,EAAA,CACA,IAAAsyB,GAAAC,CAGA,IAAA7G,EAAA/L,IAAAgM,EAAAhM,GAIA,MAFA0S,GAAAryB,EAAA0rB,EAAAlM,KAAAxf,OACAqyB,EAAAvyB,EAAA4I,GAAAxI,QAAAgrB,KAAAQ,EAAA2G,EAAAryB,GAGA,QAAA0rB,EAAAhM,MAAA5f,EAEAuyB,EAAAvyB,EAAA4rB,EAAAnM,IAAAzf,EACA4I,GAAAqZ,YAAAe,aAAA6I,GAEA0G,EAAAryB,EAAA2rB,EAAApM,IAAAvf,GAIAuyB,EAAA5G,EAAApM,IAAAvf,EAAA2rB,EAAApM,IAAAzf,EAAA6rB,EAAAhM,GACA0S,EAAAryB,EAAA0I,GAAAxI,QAAAud,MAAA4U,EAAAvyB,EAAA6rB,EAAAhM,GAAA4S,QAGA,QAAA5G,EAAAjM,MAAA5f,EAEAuyB,EAAAvyB,EAAA6rB,EAAApM,IAAAzf,EACA4I,GAAAqZ,YAAAe,aAAA4I,GAEA2G,EAAAryB,EAAA0rB,EAAAnM,IAAAvf,GAIAsyB,EAAA5G,EAAAnM,IAAAvf,EAAA0rB,EAAAnM,IAAAzf,EAAA4rB,EAAA/L,GACA0S,EAAAryB,EAAA0I,GAAAxI,QAAAud,MAAA4U,EAAAvyB,EAAA4rB,EAAA/L,GAAA2S,QAIA,CACAA,EAAA5G,EAAAnM,IAAAzf,EAAA4rB,EAAAnM,IAAAvf,EAAA0rB,EAAA/L,GACA4S,EAAA5G,EAAApM,IAAAzf,EAAA6rB,EAAApM,IAAAvf,EAAA2rB,EAAAhM,EACA,IAAAtT,IAAAkmB,EAAAD,IAAA5G,EAAA/L,GAAAgM,EAAAhM,GACA0S,GAAAryB,EAAA0I,GAAAxI,QAAAud,MAAApR,GACA3S,KAAAY,IAAAoxB,EAAA/L,IAAAjmB,KAAAY,IAAAqxB,EAAAhM,IACA0S,EAAAvyB,EAAA4I,GAAAxI,QAAAud,MAAAiO,EAAA/L,GAAAtT,EAAAimB,GAEAD,EAAAvyB,EAAA4I,GAAAxI,QAAAud,MAAAkO,EAAAhM,GAAAtT,EAAAkmB,GAEA,GAAAF,EAAAryB,EAAA0rB,EAAAjM,IAAAzf,GAAAqyB,EAAAryB,EAAA2rB,EAAAlM,IAAAzf,EACA,CACA,GAAA0rB,EAAAjM,IAAAzf,EAAA2rB,EAAAlM,IAAAzf,EAIA,MAFAqyB,GAAAryB,EAAA0rB,EAAAjM,IAAAzf,EACAqyB,EAAAvyB,EAAA4I,GAAAxI,QAAAgrB,KAAAS,EAAAD,EAAAjM,IAAAzf,GACAqyB,EAAAvyB,EAAA4rB,EAAAjM,IAAA3f,CAGAuyB,GAAAryB,EAAA2rB,EAAAlM,IAAAzf,EACAtG,KAAAY,IAAAoxB,EAAA/L,IAAAjmB,KAAAY,IAAAqxB,EAAAhM,IACA0S,EAAAvyB,EAAA4I,GAAAxI,QAAAgrB,KAAAQ,EAAA2G,EAAAryB,GAEAqyB,EAAAvyB,EAAA4I,GAAAxI,QAAAgrB,KAAAS,EAAA0G,EAAAryB,GAGAqyB,EAAAryB,EAAA0rB,EAAAlM,KAAAxf,IAEAqyB,EAAAryB,EAAA0rB,EAAAlM,KAAAxf,EAEAtG,KAAAY,IAAAoxB,EAAA/L,IAAAjmB,KAAAY,IAAAqxB,EAAAhM,IACA0S,EAAAvyB,EAAA4I,GAAAxI,QAAAgrB,KAAAS,EAAA0G,EAAAryB,GAEAqyB,EAAAvyB,EAAA4I,GAAAxI,QAAAgrB,KAAAQ,EAAA2G,EAAAryB,KAIA0I,GAAAxI,QAAAhO,UAAAq3B,4BAAA,SAAAF,GAGA,IADA,GAAAz4B,GAAAkJ,KAAAktB,cACA,OAAAp2B,GACA,CAGA,GAAA4hC,GAAA14B,KAAAm3B,SAAArgC,EAAAy4B,EACA,IAAAmJ,EACA,CACA,GAAA/B,GAAA32B,KAAA42B,cAAA9/B,EACA4hC,GAAA,OAAA/B,IAAA/nB,GAAAqZ,YAAAe,aAAA2N,GAEA,GAAA+B,EACA,CACA,GAAA/N,GAAA7zB,EAAA0vB,SACAxmB,MAAA24B,SAAA7hC,GAEAA,EADA,OAAA6zB,EACA3qB,KAAAktB,cAEAvC,EAAApE,cAGA,CAcA,GAZAvmB,KAAAo3B,eAAAtgC,EAAAy4B,IAAA3gB,GAAAqZ,YAAAe,aAAAlyB,EAAAwvB,YAEAxvB,EAAAkJ,KAAA61B,kBAAA/+B,GACAA,EAAAqvB,QAAA,GACAnmB,KAAA4wB,SAAA95B,IAAA2uB,KACAzlB,KAAA8wB,aAAAh6B,KAIAA,EAAA4uB,KAAA1f,EAAA4I,GAAAxI,QAAAgrB,KAAAt6B,EAAAy4B,GACAz4B,EAAA4uB,KAAAxf,EAAAqpB,GAEAvvB,KAAA6tB,eACA,CACA,GAAAlD,GAAA7zB,EAAA0vB,SACA,IAAA1vB,EAAAqvB,QAAA,OAAArvB,EAAAkvB,WAAA,OAAA2E,GACAA,EAAAxE,QAAA,GAAAwE,EAAAjF,KAAA1f,GAAAlP,EAAA4uB,KAAA1f,GACA,IAAA2kB,EAAA3E,UACA,CACA,GAAAuS,GAAA,GAAA3pB,IAAA6U,SAAA3sB,EAAA4uB,KAEA/I,KAEA3c,KAAAswB,KAAAiI,EAAA5N,EAAA7zB,EAGA,IAAAkH,GAAAgC,KAAA4wB,SAAAjG,EAAA4N,GACAtB,EAAAj3B,KAAA4wB,SAAA95B,EAAAyhC,EACAv4B,MAAAiwB,QAAAjyB,EAAAi5B,EAAAsB,IAIAzhC,IAAAyvB,WAOA,IAHAvmB,KAAAsvB,oBAAA,GAEAx4B,EAAAkJ,KAAAktB,cACA,OAAAp2B,GACA,CACA,GAAAkJ,KAAAo3B,eAAAtgC,EAAAy4B,GACA,CACA,GAAAvxB,GAAA,IACAlH,GAAAqvB,QAAA,IACAnoB,EAAAgC,KAAA4wB,SAAA95B,IAAA6uB,MACA7uB,EAAAkJ,KAAA61B,kBAAA/+B,EAEA,IAAA6zB,GAAA7zB,EAAA0vB,UACAkE,EAAA5zB,EAAAyvB,SACA,WAAAoE,KAAAjF,KAAA1f,GAAAlP,EAAA2uB,IAAAzf,GACA2kB,EAAAjF,KAAAxf,GAAApP,EAAA2uB,IAAAvf,GAAA,OAAAlI,GACA2sB,EAAAxE,QAAA,GAAAwE,EAAAjF,KAAAxf,EAAAykB,EAAAhF,IAAAzf,GACA0I,GAAAqZ,YAAAwB,YAAA3yB,EAAA6zB,EAAA3qB,KAAAqoB,iBACA,IAAAvxB,EAAAkvB,WAAA,IAAA2E,EAAA3E,UACA,CACA,GAAAiR,GAAAj3B,KAAA4wB,SAAAjG,EAAA7zB,EAAA2uB,IACAzlB,MAAAiwB,QAAAjyB,EAAAi5B,EAAAngC,EAAA6uB,SAEA,WAAA+E,KAAAhF,KAAA1f,GAAAlP,EAAA2uB,IAAAzf,GACA0kB,EAAAhF,KAAAxf,GAAApP,EAAA2uB,IAAAvf,GAAA,OAAAlI,GACA0sB,EAAAvE,QAAA,GAAAuE,EAAAhF,KAAAxf,EAAAwkB,EAAA/E,IAAAzf,GACA0I,GAAAqZ,YAAAwB,YAAA3yB,EAAA4zB,EAAA1qB,KAAAqoB,iBACA,IAAAvxB,EAAAkvB,WAAA,IAAA0E,EAAA1E,UACA,CACA,GAAAiR,GAAAj3B,KAAA4wB,SAAAlG,EAAA5zB,EAAA2uB,IACAzlB,MAAAiwB,QAAAjyB,EAAAi5B,EAAAngC,EAAA6uB,MAGA7uB,IAAAyvB,YAGA3X,GAAAxI,QAAAhO,UAAAugC,SAAA,SAAA7hC,GAEA,GAAA6/B,GAAA32B,KAAA42B,cAAA9/B,EACA,WAAA6/B,EAKA,MAHA7/B,GAAAqvB,QAAA,GACAnmB,KAAA4wB,SAAA95B,IAAA6uB,SACA3lB,MAAAu1B,cAAAz+B,EAKA,KAFA,GAAA4zB,GAAA5zB,EAAAyvB,UACA3J,GAAA,EACA,OAAA8N,MAAAiM,GAEA32B,KAAAgxB,eAAAl6B,EAAA4zB,EAAA5zB,EAAA6uB,KACA3lB,KAAA2xB,mBAAA76B,EAAA4zB,GACAA,EAAA5zB,EAAAyvB,SAEAzvB,GAAAqvB,SAAA,GAAAwQ,EAAAxQ,SAAA,GAEAnmB,KAAAu1B,cAAAz+B,GACAkJ,KAAAu1B,cAAAoB,IAEA7/B,EAAAqvB,QAAA,GAAAwQ,EAAAxQ,QAAA,GAEArvB,EAAAqvB,QAAA,GAAAnmB,KAAAgyB,gBAAAl7B,EAAA6/B,EAAA7/B,EAAA6uB,KACA3lB,KAAAu1B,cAAAz+B,GACAkJ,KAAAu1B,cAAAoB,IAEA/Z,GAAA,IAAA9lB,EAAAkvB,WAEAlvB,EAAAqvB,QAAA,IAEAnmB,KAAA4wB,SAAA95B,IAAA6uB,KACA7uB,EAAAqvB,QAAA,GAEAnmB,KAAAu1B,cAAAz+B,GACA6/B,EAAAxQ,QAAA,IAEAnmB,KAAA4wB,SAAA+F,EAAA7/B,EAAA6uB,KACAgR,EAAAxQ,QAAA,GAEAnmB,KAAAu1B,cAAAoB,IAGA/nB,GAAAhU,MAAA,mBAEAgU,GAAAxI,QAAAwyB,aAAA,SAAAC,GAEA,OAAAx/B,GAAA,EAAAy/B,EAAAD,EAAAv/B,OAAuCD,EAAAy/B,EAASz/B,IAChDw/B,EAAAx/B,GAAA0/B,WAEAnqB,GAAAxI,QAAA4yB,YAAA,SAAAC,GAEA,MAAArqB,IAAAxI,QAAAspB,KAAAuJ,IAAA,GAEArqB,GAAAxI,QAAAhO,UAAA8gC,WAAA,SAAAC,GAEA,UAAAA,EACA,QACA,IAAA38B,GAAA,EACAiB,EAAA07B,CACA,GACA38B,KACAiB,IAAA2oB,WAEA3oB,GAAA07B,EACA,OAAA38B,IAEAoS,GAAAxI,QAAAhO,UAAAy2B,YAAA,SAAAuK,GAEAxqB,GAAA+T,MAAAyW,EACA,QAAA//B,GAAA,EAAAupB,EAAA5iB,KAAA+sB,WAAAzzB,OAAkDD,EAAAupB,EAAUvpB,IAC5D,CACA,GAAA41B,GAAAjvB,KAAA+sB,WAAA1zB,EACA,WAAA41B,EAAAvH,IAAA,CAEA,GAAAjqB,GAAAwxB,EAAAvH,IAAArB,KACAhE,EAAAriB,KAAAk5B,WAAAz7B,EACA,MAAA4kB,EAAA,IAGA,OADAsJ,GAAA,GAAAjsB,OAAA2iB,GACAxlB,EAAA,EAAqBA,EAAAwlB,EAASxlB,IAE9B8uB,EAAA9uB,GAAAY,EAAAqpB,GACArpB,IAAA4oB,IAEA+S,GAAAvhC,KAAA8zB,OAGA/c,GAAAxI,QAAAhO,UAAA22B,aAAA,SAAAD,GAEAA,EAAAnM,OAGA,QAAAtpB,GAAA,EAAAupB,EAAA5iB,KAAA+sB,WAAAzzB,OAAkDD,EAAAupB,EAAUvpB,IAC5D,CACA,GAAA41B,GAAAjvB,KAAA+sB,WAAA1zB,GACAgpB,EAAAriB,KAAAk5B,WAAAjK,EAAAvH,IACA,MAAAuH,EAAAjN,QAAAK,EAAA,IAAA4M,EAAAjN,QAAAK,EAAA,IAEAriB,KAAAgvB,eAAAC,EACA,IAAAoK,GAAA,GAAAzqB,IAAA6S,QACAqN,GAAApM,WAAA7qB,KAAAwhC,GACApK,EAAAxN,SAAA4X,EACAA,EAAA1X,UAAAroB,OAAA+oB,CAEA,QADArkB,GAAAixB,EAAAvH,IAAArB,KACAxpB,EAAA,EAAqBA,EAAAwlB,EAASxlB,IAE9Bw8B,EAAA1X,UAAA9kB,GAAAmB,EAAA8oB,GACA9oB,IAAAqoB,MAKA,OAAAhtB,GAAA,EAAAupB,EAAA5iB,KAAA+sB,WAAAzzB,OAAkDD,EAAAupB,EAAUvpB,IAC5D,CACA,GAAA41B,GAAAjvB,KAAA+sB,WAAA1zB,EACA,QAAA41B,EAAAxN,WAEAwN,EAAAjN,QAEAiN,EAAAxN,SAAAO,QAAA,EACA8M,EAAA3M,SAAA8M,EAAAxN,WAEA,OAAAwN,EAAAxH,WAAA,MAAAwH,EAAAxH,UAAAhG,SACAwN,EAAAxH,UAAAhG,SAAAU,SAAA8M,EAAAxN,UAEAqN,EAAA3M,SAAA8M,EAAAxN,aAGA7S,GAAAxI,QAAAhO,UAAAy3B,gBAAA,SAAAZ,GAIA,GAAAqK,GAAA,IACArK,GAAAtH,SAAA,IAEA,KADA,GAAAuB,GAAA+F,EAAAvH,MAEA,CACA,GAAAwB,EAAA7C,MAAA6C,KAAA7C,MAAA6C,EAAA9C,KAGA,YADA6I,EAAAvH,IAAA,KAIA,IAAA9Y,GAAA6U,SAAA7D,YAAAsJ,EAAApC,GAAAoC,EAAA9C,KAAAU,KAAAlY,GAAA6U,SAAA7D,YAAAsJ,EAAApC,GAAAoC,EAAA7C,KAAAS,KACAlY,GAAAqZ,YAAAwB,YAAAP,EAAA7C,KAAAS,GAAAoC,EAAApC,GAAAoC,EAAA9C,KAAAU,GAAA9mB,KAAAqoB,mBACAroB,KAAAuoB,oBAAAvoB,KAAAmsB,sBAAAjD,EAAA7C,KAAAS,GAAAoC,EAAApC,GAAAoC,EAAA9C,KAAAU,KAEAwS,EAAA,KACApQ,EAAA7C,KAAAD,KAAA8C,EAAA9C,KACA8C,EAAA9C,KAAAC,KAAA6C,EAAA7C,KACA6C,IAAA7C,SAEA,IAAA6C,GAAAoQ,EACA,KAGA,QAAAA,IACAA,EAAApQ,GACAA,IAAA9C,MAGA6I,EAAAvH,IAAAwB,GAEAta,GAAAxI,QAAAhO,UAAAmhC,SAAA,SAAApH,EAAAqH,GAEA,GAAAh9B,GAAA,GAAAoS,IAAAgZ,KAmBA,OAjBAprB,GAAAsqB,GAAA9gB,EAAAmsB,EAAArL,GAAA9gB,EACAxJ,EAAAsqB,GAAA5gB,EAAAisB,EAAArL,GAAA5gB,EACA1J,EAAAgrB,IAAA2K,EAAA3K,IACAgS,GAEAh9B,EAAA4pB,KAAA+L,EAAA/L,KACA5pB,EAAA6pB,KAAA8L,EACAA,EAAA/L,KAAAC,KAAA7pB,EACA21B,EAAA/L,KAAA5pB,IAIAA,EAAA6pB,KAAA8L,EAAA9L,KACA7pB,EAAA4pB,KAAA+L,EACAA,EAAA9L,KAAAD,KAAA5pB,EACA21B,EAAA9L,KAAA7pB,GAEAA,GAEAoS,GAAAxI,QAAAhO,UAAAqhC,WAAA,SAAAC,EAAAC,EAAAnB,EAAAC,EAAAmB,GA4BA,MA1BAF,GAAAC,EAEAnB,EAAAC,GAEAmB,EAAAxD,KAAAx2B,KAAAa,IAAAi5B,EAAAlB,GACAoB,EAAAvD,MAAAz2B,KAAA+M,IAAAgtB,EAAAlB,KAIAmB,EAAAxD,KAAAx2B,KAAAa,IAAAi5B,EAAAjB,GACAmB,EAAAvD,MAAAz2B,KAAA+M,IAAAgtB,EAAAnB,IAKAA,EAAAC,GAEAmB,EAAAxD,KAAAx2B,KAAAa,IAAAk5B,EAAAnB,GACAoB,EAAAvD,MAAAz2B,KAAA+M,IAAA+sB,EAAAjB,KAIAmB,EAAAxD,KAAAx2B,KAAAa,IAAAk5B,EAAAlB,GACAmB,EAAAvD,MAAAz2B,KAAA+M,IAAA+sB,EAAAlB,IAGAoB,EAAAxD,KAAAwD,EAAAvD,OAEAznB,GAAAxI,QAAAhO,UAAAyhC,SAAA,SAAA9C,EAAA+C,EAAA7C,EAAA8C,EAAAjT,EAAAkT,GAEA,GAAAC,GAAAlD,EAAAjQ,GAAA9gB,EAAA8zB,EAAAhT,GAAA9gB,EAAA4I,GAAAyW,UAAAC,aAAA1W,GAAAyW,UAAAE,aACA2U,EAAAjD,EAAAnQ,GAAA9gB,EAAA+zB,EAAAjT,GAAA9gB,EAAA4I,GAAAyW,UAAAC,aAAA1W,GAAAyW,UAAAE,YACA,IAAA0U,GAAAC,EACA,QAMA,IAAAD,GAAArrB,GAAAyW,UAAAE,aACA,CACA,KAAAwR,EAAA3Q,KAAAU,GAAA9gB,GAAA8gB,EAAA9gB,GACA+wB,EAAA3Q,KAAAU,GAAA9gB,GAAA+wB,EAAAjQ,GAAA9gB,GAAA+wB,EAAA3Q,KAAAU,GAAA5gB,GAAA4gB,EAAA5gB,GACA6wB,IAAA3Q,IACA4T,IAAAjD,EAAAjQ,GAAA9gB,GAAA8gB,EAAA9gB,IACA+wB,IAAA3Q,MACA0T,EAAA95B,KAAAu5B,SAAAxC,GAAAiD,GACAprB,GAAA6U,SAAA1D,cAAA+Z,EAAAhT,QAEAiQ,EAAA+C,EAEA/C,EAAAjQ,GAAA9gB,EAAA8gB,EAAA9gB,EACA+wB,EAAAjQ,GAAA5gB,EAAA4gB,EAAA5gB,EACA4zB,EAAA95B,KAAAu5B,SAAAxC,GAAAiD,QAIA,CACA,KAAAjD,EAAA3Q,KAAAU,GAAA9gB,GAAA8gB,EAAA9gB,GACA+wB,EAAA3Q,KAAAU,GAAA9gB,GAAA+wB,EAAAjQ,GAAA9gB,GAAA+wB,EAAA3Q,KAAAU,GAAA5gB,GAAA4gB,EAAA5gB,GACA6wB,IAAA3Q,IACA4T,IAAAjD,EAAAjQ,GAAA9gB,GAAA8gB,EAAA9gB,IACA+wB,IAAA3Q,MACA0T,EAAA95B,KAAAu5B,SAAAxC,EAAAiD,GACAprB,GAAA6U,SAAA1D,cAAA+Z,EAAAhT,QAEAiQ,EAAA+C,EAEA/C,EAAAjQ,GAAA9gB,EAAA8gB,EAAA9gB,EACA+wB,EAAAjQ,GAAA5gB,EAAA4gB,EAAA5gB,EACA4zB,EAAA95B,KAAAu5B,SAAAxC,EAAAiD,IAGA,GAAAE,GAAAtrB,GAAAyW,UAAAE,aACA,CACA,KAAA0R,EAAA7Q,KAAAU,GAAA9gB,GAAA8gB,EAAA9gB,GACAixB,EAAA7Q,KAAAU,GAAA9gB,GAAAixB,EAAAnQ,GAAA9gB,GAAAixB,EAAA7Q,KAAAU,GAAA5gB,GAAA4gB,EAAA5gB,GACA+wB,IAAA7Q,IACA4T,IAAA/C,EAAAnQ,GAAA9gB,GAAA8gB,EAAA9gB,IACAixB,IAAA7Q,MACA2T,EAAA/5B,KAAAu5B,SAAAtC,GAAA+C,GACAprB,GAAA6U,SAAA1D,cAAAga,EAAAjT,QAEAmQ,EAAA8C,EAEA9C,EAAAnQ,GAAA9gB,EAAA8gB,EAAA9gB,EACAixB,EAAAnQ,GAAA5gB,EAAA4gB,EAAA5gB,EACA6zB,EAAA/5B,KAAAu5B,SAAAtC,GAAA+C,QAIA,CACA,KAAA/C,EAAA7Q,KAAAU,GAAA9gB,GAAA8gB,EAAA9gB,GACAixB,EAAA7Q,KAAAU,GAAA9gB,GAAAixB,EAAAnQ,GAAA9gB,GAAAixB,EAAA7Q,KAAAU,GAAA5gB,GAAA4gB,EAAA5gB,GACA+wB,IAAA7Q,IACA4T,IAAA/C,EAAAnQ,GAAA9gB,GAAA8gB,EAAA9gB,IACAixB,IAAA7Q,MACA2T,EAAA/5B,KAAAu5B,SAAAtC,EAAA+C,GACAprB,GAAA6U,SAAA1D,cAAAga,EAAAjT,QAEAmQ,EAAA8C,EAEA9C,EAAAnQ,GAAA9gB,EAAA8gB,EAAA9gB,EACAixB,EAAAnQ,GAAA5gB,EAAA4gB,EAAA5gB,EACA6zB,EAAA/5B,KAAAu5B,SAAAtC,EAAA+C,IAiBA,MAdAC,IAAArrB,GAAAyW,UAAAE,cAAAyU,GAEAjD,EAAA1Q,KAAA4Q,EACAA,EAAA7Q,KAAA2Q,EACA+C,EAAA1T,KAAA2T,EACAA,EAAA1T,KAAAyT,IAIA/C,EAAA3Q,KAAA6Q,EACAA,EAAA5Q,KAAA0Q,EACA+C,EAAAzT,KAAA0T,EACAA,EAAA3T,KAAA0T,IAEA,GAEAlrB,GAAAxI,QAAAhO,UAAA+hC,WAAA,SAAAt9B,EAAA42B,EAAAC,GAEA,GAAAqD,GAAAl6B,EAAAirB,OACAgS,EAAA,GAAAlrB,IAAAgZ,MACAqP,EAAAp6B,EAAAkrB,OACAgS,EAAA,GAAAnrB,IAAAgZ,MAQAwS,EAAAv9B,EAAAirB,OAAAhB,GAAA5gB,GAAArJ,EAAAmrB,MAAA9hB,CACA,IAAAk0B,GAAAxrB,GAAA6U,SAAA7D,YAAA/iB,EAAAmrB,MAAAnrB,EAAAirB,OAAAhB,KAAAlY,GAAA6U,SAAA7D,YAAA/iB,EAAAmrB,MAAAnrB,EAAAkrB,OAAAjB,IACA,CAEA,GAAA2M,GAAAC,EAAA,QAGA,KADAoG,EAAAj9B,EAAAirB,OAAA1B,KACA0T,GAAA/C,GAAAnoB,GAAA6U,SAAA7D,YAAAka,EAAAhT,GAAAjqB,EAAAmrB,QACA8R,IAAA1T,IACA,IAAAiU,GAAAP,EAAAhT,GAAA5gB,EAAArJ,EAAAmrB,MAAA9hB,CAEA,KADA6zB,EAAAl9B,EAAAkrB,OAAA3B,KACA2T,GAAA9C,GAAAroB,GAAA6U,SAAA7D,YAAAma,EAAAjT,GAAAjqB,EAAAmrB,QACA+R,IAAA3T,IACA,IAAAkU,GAAAP,EAAAjT,GAAA5gB,EAAArJ,EAAAmrB,MAAA9hB,CACA,OAAAm0B,IAAAC,IAEAD,GAEAP,EAAA95B,KAAAu5B,SAAAxC,GAAA,GACAgD,EAAA/5B,KAAAu5B,SAAAtC,GAAA,GACAF,EAAA1Q,KAAA4Q,EACAA,EAAA7Q,KAAA2Q,EACA+C,EAAA1T,KAAA2T,EACAA,EAAA1T,KAAAyT,EACAj9B,EAAAirB,OAAAiP,EACAl6B,EAAAkrB,OAAA+R,GACA,IAIAA,EAAA95B,KAAAu5B,SAAAxC,GAAA,GACAgD,EAAA/5B,KAAAu5B,SAAAtC,GAAA,GACAF,EAAA3Q,KAAA6Q,EACAA,EAAA5Q,KAAA0Q,EACA+C,EAAAzT,KAAA0T,EACAA,EAAA3T,KAAA0T,EACAj9B,EAAAirB,OAAAiP,EACAl6B,EAAAkrB,OAAA+R,GACA,IAGA,GAAAM,EACA,CAKA,IADAN,EAAA/C,EACAA,EAAA1Q,KAAAS,GAAA5gB,GAAA6wB,EAAAjQ,GAAA5gB,GAAA6wB,EAAA1Q,MAAAyT,GAAA/C,EAAA1Q,MAAA4Q,GACAF,IAAA1Q,IACA,MAAAyT,EAAA1T,KAAAU,GAAA5gB,GAAA4zB,EAAAhT,GAAA5gB,GAAA4zB,EAAA1T,MAAA2Q,GAAA+C,EAAA1T,MAAA6Q,GACA6C,IAAA1T,IACA,IAAA0T,EAAA1T,MAAA2Q,GAAA+C,EAAA1T,MAAA6Q,EACA,QAGA,KADA8C,EAAA9C,EACAA,EAAA5Q,KAAAS,GAAA5gB,GAAA+wB,EAAAnQ,GAAA5gB,GAAA+wB,EAAA5Q,MAAA0T,GAAA9C,EAAA5Q,MAAAyT,GACA7C,IAAA5Q,IACA,MAAA0T,EAAA3T,KAAAU,GAAA5gB,GAAA6zB,EAAAjT,GAAA5gB,GAAA6zB,EAAA3T,MAAA6Q,GAAA8C,EAAA3T,MAAA2Q,GACAgD,IAAA3T,IACA,IAAA2T,EAAA3T,MAAA6Q,GAAA8C,EAAA3T,MAAA2Q,EACA,QAIA,IAAA6C,IAAkBxD,KAAA,KAAAC,MAAA,KAClB,KAAAr2B,KAAAy5B,WAAA1C,EAAAjQ,GAAA9gB,EAAA8zB,EAAAhT,GAAA9gB,EAAAixB,EAAAnQ,GAAA9gB,EAAA+zB,EAAAjT,GAAA9gB,EAAA4zB,GACA,QACA,IAOAW,GAPAnE,EAAAwD,EAAAxD,KACAC,EAAAuD,EAAAvD,MAKAvP,EAAA,GAAAlY,IAAA6U,QAgCA,OA9BAsT,GAAAjQ,GAAA9gB,GAAAowB,GAAAW,EAAAjQ,GAAA9gB,GAAAqwB,GAGAvP,EAAA9gB,EAAA+wB,EAAAjQ,GAAA9gB,EACA8gB,EAAA5gB,EAAA6wB,EAAAjQ,GAAA5gB,EACAq0B,EAAAxD,EAAAjQ,GAAA9gB,EAAA8zB,EAAAhT,GAAA9gB,GAEAixB,EAAAnQ,GAAA9gB,GAAAowB,GAAAa,EAAAnQ,GAAA9gB,GAAAqwB,GAGAvP,EAAA9gB,EAAAixB,EAAAnQ,GAAA9gB,EACA8gB,EAAA5gB,EAAA+wB,EAAAnQ,GAAA5gB,EACAq0B,EAAAtD,EAAAnQ,GAAA9gB,EAAA+zB,EAAAjT,GAAA9gB,GAEA8zB,EAAAhT,GAAA9gB,GAAAowB,GAAA0D,EAAAhT,GAAA9gB,GAAAqwB,GAGAvP,EAAA9gB,EAAA8zB,EAAAhT,GAAA9gB,EACA8gB,EAAA5gB,EAAA4zB,EAAAhT,GAAA5gB,EACAq0B,EAAAT,EAAAhT,GAAA9gB,EAAA+wB,EAAAjQ,GAAA9gB,IAKA8gB,EAAA9gB,EAAA+zB,EAAAjT,GAAA9gB,EACA8gB,EAAA5gB,EAAA6zB,EAAAjT,GAAA5gB,EACAq0B,EAAAR,EAAAjT,GAAA9gB,EAAAixB,EAAAnQ,GAAA9gB,GAEAnJ,EAAAirB,OAAAiP,EACAl6B,EAAAkrB,OAAAkP,EACAj3B,KAAA65B,SAAA9C,EAAA+C,EAAA7C,EAAA8C,EAAAjT,EAAAyT,GASA,IADAT,EAAA/C,EAAA3Q,KACAxX,GAAA6U,SAAA7D,YAAAka,EAAAhT,GAAAiQ,EAAAjQ,KAAAgT,GAAA/C,GACA+C,IAAA1T,IACA,IAAAoU,GAAAV,EAAAhT,GAAA5gB,EAAA6wB,EAAAjQ,GAAA5gB,IAAA0I,GAAAqZ,YAAAwB,YAAAsN,EAAAjQ,GAAAgT,EAAAhT,GAAAjqB,EAAAmrB,MAAAhoB,KAAAqoB,eACA,IAAAmS,EACA,CAEA,IADAV,EAAA/C,EAAA1Q,KACAzX,GAAA6U,SAAA7D,YAAAka,EAAAhT,GAAAiQ,EAAAjQ,KAAAgT,GAAA/C,GACA+C,IAAAzT,IACA,IAAAyT,EAAAhT,GAAA5gB,EAAA6wB,EAAAjQ,GAAA5gB,IAAA0I,GAAAqZ,YAAAwB,YAAAsN,EAAAjQ,GAAAgT,EAAAhT,GAAAjqB,EAAAmrB,MAAAhoB,KAAAqoB,gBACA,SAGA,IADA0R,EAAA9C,EAAA7Q,KACAxX,GAAA6U,SAAA7D,YAAAma,EAAAjT,GAAAmQ,EAAAnQ,KAAAiT,GAAA9C,GACA8C,IAAA3T,IACA,IAAAqU,GAAAV,EAAAjT,GAAA5gB,EAAA+wB,EAAAnQ,GAAA5gB,IAAA0I,GAAAqZ,YAAAwB,YAAAwN,EAAAnQ,GAAAiT,EAAAjT,GAAAjqB,EAAAmrB,MAAAhoB,KAAAqoB,eACA,IAAAoS,EACA,CAEA,IADAV,EAAA9C,EAAA5Q,KACAzX,GAAA6U,SAAA7D,YAAAma,EAAAjT,GAAAmQ,EAAAnQ,KAAAiT,GAAA9C,GACA8C,IAAA1T,IACA,IAAA0T,EAAAjT,GAAA5gB,EAAA+wB,EAAAnQ,GAAA5gB,IAAA0I,GAAAqZ,YAAAwB,YAAAwN,EAAAnQ,GAAAiT,EAAAjT,GAAAjqB,EAAAmrB,MAAAhoB,KAAAqoB,gBACA,SAEA,MAAAyR,IAAA/C,GAAAgD,GAAA9C,GAAA6C,GAAAC,IACAtG,GAAAC,GAAA8G,GAAAC,KAEAD,GAEAV,EAAA95B,KAAAu5B,SAAAxC,GAAA,GACAgD,EAAA/5B,KAAAu5B,SAAAtC,GAAA,GACAF,EAAA1Q,KAAA4Q,EACAA,EAAA7Q,KAAA2Q,EACA+C,EAAA1T,KAAA2T,EACAA,EAAA1T,KAAAyT,EACAj9B,EAAAirB,OAAAiP,EACAl6B,EAAAkrB,OAAA+R,GACA,IAIAA,EAAA95B,KAAAu5B,SAAAxC,GAAA,GACAgD,EAAA/5B,KAAAu5B,SAAAtC,GAAA,GACAF,EAAA3Q,KAAA6Q,EACAA,EAAA5Q,KAAA0Q,EACA+C,EAAAzT,KAAA0T,EACAA,EAAA3T,KAAA0T,EACAj9B,EAAAirB,OAAAiP,EACAl6B,EAAAkrB,OAAA+R,GACA,KAIAlrB,GAAAxI,QAAAs0B,UAAA,SAAA/zB,GAIA,IAFA,GAAAtN,GAAA,EACAgpB,EAAA1b,EAAArN,OACAD,EAAAgpB,GAAA,GAAA1b,EAAAtN,GAAAC,QAAAD,GACA,IAAAA,GAAAgpB,EAAA,UAAAzT,IAAAqV,QAAA,QACA,IAAAznB,GAAA,GAAAoS,IAAAqV,OAKA,KAJAznB,EAAA0nB,KAAAvd,EAAAtN,GAAA,GAAA2M,EACAxJ,EAAA4nB,MAAA5nB,EAAA0nB,KACA1nB,EAAA2nB,IAAAxd,EAAAtN,GAAA,GAAA6M,EACA1J,EAAA6nB,OAAA7nB,EAAA2nB,IACU9qB,EAAAgpB,EAAShpB,IACnB,OAAAwD,GAAA,EAAAutB,EAAAzjB,EAAAtN,GAAAC,OAA6CuD,EAAAutB,EAAUvtB,IAEvD8J,EAAAtN,GAAAwD,GAAAmJ,EAAAxJ,EAAA0nB,KAAA1nB,EAAA0nB,KAAAvd,EAAAtN,GAAAwD,GAAAmJ,EACAW,EAAAtN,GAAAwD,GAAAmJ,EAAAxJ,EAAA4nB,QAAA5nB,EAAA4nB,MAAAzd,EAAAtN,GAAAwD,GAAAmJ,GACAW,EAAAtN,GAAAwD,GAAAqJ,EAAA1J,EAAA2nB,IAAA3nB,EAAA2nB,IAAAxd,EAAAtN,GAAAwD,GAAAqJ,EACAS,EAAAtN,GAAAwD,GAAAqJ,EAAA1J,EAAA6nB,SAAA7nB,EAAA6nB,OAAA1d,EAAAtN,GAAAwD,GAAAqJ,EAEA,OAAA1J,IAEAoS,GAAAxI,QAAAhO,UAAAuiC,WAAA,SAAAC,GAEA,GAAAC,GAAAD,EACAp+B,EAAA,GAAAoS,IAAAqV,OAMA,KALAznB,EAAA0nB,KAAA0W,EAAA9T,GAAA9gB,EACAxJ,EAAA4nB,MAAAwW,EAAA9T,GAAA9gB,EACAxJ,EAAA2nB,IAAAyW,EAAA9T,GAAA5gB,EACA1J,EAAA6nB,OAAAuW,EAAA9T,GAAA5gB,EACA00B,IAAAxU,KACAwU,GAAAC,GAEAD,EAAA9T,GAAA9gB,EAAAxJ,EAAA0nB,OACA1nB,EAAA0nB,KAAA0W,EAAA9T,GAAA9gB,GACA40B,EAAA9T,GAAA9gB,EAAAxJ,EAAA4nB,QACA5nB,EAAA4nB,MAAAwW,EAAA9T,GAAA9gB,GACA40B,EAAA9T,GAAA5gB,EAAA1J,EAAA2nB,MACA3nB,EAAA2nB,IAAAyW,EAAA9T,GAAA5gB,GACA00B,EAAA9T,GAAA5gB,EAAA1J,EAAA6nB,SACA7nB,EAAA6nB,OAAAuW,EAAA9T,GAAA5gB,GACA00B,IAAAxU,IAEA,OAAA5pB,IAGAoS,GAAAxI,QAAA00B,eAAA,SAAApuB,EAAAlK,GAKA,GAAAhG,GAAA,EACA6lB,EAAA7f,EAAAlJ,MACA,IAAA+oB,EAAA,EACA,QAEA,QADAkW,GAAA/1B,EAAA,GACAnJ,EAAA,EAAmBA,GAAAgpB,IAAUhpB,EAC7B,CACA,GAAA0hC,GAAA1hC,GAAAgpB,EAAA7f,EAAA,GAAAA,EAAAnJ,EACA,IAAA0hC,EAAA70B,GAAAwG,EAAAxG,IAEA60B,EAAA/0B,GAAA0G,EAAA1G,GAAAuyB,EAAAryB,GAAAwG,EAAAxG,GAAA60B,EAAA/0B,EAAA0G,EAAA1G,GAAAuyB,EAAAvyB,EAAA0G,EAAA1G,GACA,QAEA,IAAAuyB,EAAAryB,EAAAwG,EAAAxG,GAAA60B,EAAA70B,EAAAwG,EAAAxG,EAEA,GAAAqyB,EAAAvyB,GAAA0G,EAAA1G,EAEA,GAAA+0B,EAAA/0B,EAAA0G,EAAA1G,EACAxJ,EAAA,EAAAA,MAEA,CACA,GAAA2U,IAAAonB,EAAAvyB,EAAA0G,EAAA1G,IAAA+0B,EAAA70B,EAAAwG,EAAAxG,IAAA60B,EAAA/0B,EAAA0G,EAAA1G,IAAAuyB,EAAAryB,EAAAwG,EAAAxG,EACA,OAAAiL,EACA,QACAA,GAAA,GAAA4pB,EAAA70B,EAAAqyB,EAAAryB,IACA1J,EAAA,EAAAA,OAKA,IAAAu+B,EAAA/0B,EAAA0G,EAAA1G,EACA,CACA,GAAAmL,IAAAonB,EAAAvyB,EAAA0G,EAAA1G,IAAA+0B,EAAA70B,EAAAwG,EAAAxG,IAAA60B,EAAA/0B,EAAA0G,EAAA1G,IAAAuyB,EAAAryB,EAAAwG,EAAAxG,EACA,OAAAiL,EACA,QACAA,GAAA,GAAA4pB,EAAA70B,EAAAqyB,EAAAryB,IACA1J,EAAA,EAAAA,GAIA+7B,EAAAwC,EAEA,MAAAv+B,IAGAoS,GAAAxI,QAAAhO,UAAA0iC,eAAA,SAAApuB,EAAA1O,GAKA,GAAAxB,GAAA,EACAw+B,EAAAh9B,EACAi9B,EAAAvuB,EAAA1G,EAAAk1B,EAAAxuB,EAAAxG,EACAi1B,EAAAn9B,EAAA8oB,GAAA9gB,EAAAo1B,EAAAp9B,EAAA8oB,GAAA5gB,CACA,GACA,CACAlI,IAAAooB,IACA,IAAAiV,GAAAr9B,EAAA8oB,GAAA9gB,EAAAs1B,EAAAt9B,EAAA8oB,GAAA5gB,CACA,IAAAo1B,GAAAJ,IAEAG,GAAAJ,GAAAG,GAAAF,GAAAG,EAAAJ,GAAAE,EAAAF,GACA,QAEA,IAAAG,EAAAF,GAAAI,EAAAJ,EAEA,GAAAC,GAAAF,EAEA,GAAAI,EAAAJ,EACAz+B,EAAA,EAAAA,MAEA,CACA,GAAA2U,IAAAgqB,EAAAF,IAAAK,EAAAJ,IAAAG,EAAAJ,IAAAG,EAAAF,EACA,OAAA/pB,EACA,QACAA,GAAA,GAAAmqB,EAAAF,IACA5+B,EAAA,EAAAA,OAKA,IAAA6+B,EAAAJ,EACA,CACA,GAAA9pB,IAAAgqB,EAAAF,IAAAK,EAAAJ,IAAAG,EAAAJ,IAAAG,EAAAF,EACA,OAAA/pB,EACA,QACAA,GAAA,GAAAmqB,EAAAF,IACA5+B,EAAA,EAAAA,GAIA2+B,EAAAE,EACAD,EAAAE,QACKN,GAAAh9B,EAEL,OAAAxB,IAGAoS,GAAAxI,QAAAhO,UAAAmjC,mBAAA,SAAAC,EAAAC,GAEA,GAAAz9B,GAAAw9B,CACA,GACA,CAEA,GAAAE,GAAA17B,KAAA86B,eAAA98B,EAAA8oB,GAAA2U,EACA,IAAAC,GAAA,EACA,MAAAA,GAAA,CACA19B,KAAAooB,WAEApoB,GAAAw9B,EACA,WAEA5sB,GAAAxI,QAAAhO,UAAAujC,iBAAA,SAAAC,EAAAC,GAEA,OAAAxiC,GAAA,EAAAupB,EAAA5iB,KAAA+sB,WAAAzzB,OAAkDD,EAAAupB,EAAUvpB,IAC5D,CACA,GAAA41B,GAAAjvB,KAAA+sB,WAAA1zB,EACA,UAAA41B,EAAAvH,KAAA,MAAAuH,EAAAxH,UAAA,CAEA,GAAAqU,GAAA97B,KAAA+7B,eAAA9M,EAAAxH,UACAqU,IAAAF,GAEA57B,KAAAu7B,mBAAAtM,EAAAvH,IAAAmU,EAAAnU,OACAuH,EAAAxH,UAAAoU,MAIAjtB,GAAAxI,QAAAhO,UAAA4jC,iBAAA,SAAAJ,EAAAC,GAEA,OAAAI,GAAA,EAAAC,EAAAl8B,KAAA+sB,WAAAoP,EAAAD,EAAA5iC,OAAA21B,EAAAiN,EAAAD,GAAiFA,EAAAE,EAAWF,IAAAhN,EAAAiN,EAAAD,GAC5FhN,EAAAxH,WAAAmU,IACA3M,EAAAxH,UAAAoU,IAEAjtB,GAAAxI,QAAA21B,eAAA,SAAAtU,GAEA,WAAAA,GAAA,MAAAA,EAAAC,KACAD,aACA,OAAAA,IAEA7Y,GAAAxI,QAAAhO,UAAAw3B,gBAAA,WAEA,OAAAv2B,GAAA,EAAAupB,EAAA5iB,KAAAytB,QAAAn0B,OAA+CD,EAAAupB,EAAUvpB,IACzD,CACA,GAAA+iC,GAAAp8B,KAAAytB,QAAAp0B,GACAo6B,EAAAzzB,KAAA8zB,UAAAsI,EAAAtU,OAAAN,KACAkM,EAAA1zB,KAAA8zB,UAAAsI,EAAArU,OAAAP,IACA,UAAAiM,EAAA/L,KAAA,MAAAgM,EAAAhM,IAAA,CAIA,GAAAsM,EAUA,IARAA,EADAP,GAAAC,EACAD,EACAzzB,KAAA6zB,oBAAAJ,EAAAC,GACAA,EACA1zB,KAAA6zB,oBAAAH,EAAAD,GACAA,EAEAzzB,KAAAwzB,gBAAAC,EAAAC,GAEA1zB,KAAAm6B,WAAAiC,EAAA3I,EAAAC,GAEA,GAAAD,GAAAC,EACA,CAWA,GARAD,EAAA/L,IAAA0U,EAAAtU,OACA2L,EAAA9L,SAAA,KACA+L,EAAA1zB,KAAAoyB,eACAsB,EAAAhM,IAAA0U,EAAArU,OAEA/nB,KAAAq8B,gBAAA3I,GAGA1zB,KAAA2tB,gBACA,OAAA9wB,GAAA,EAAAutB,EAAApqB,KAAA+sB,WAAAzzB,OAAwDuD,EAAAutB,EAAA,EAAcvtB,IACtE,CACA,GAAAy/B,GAAAt8B,KAAA+sB,WAAAlwB,EACA,OAAAy/B,EAAA5U,KAAA9Y,GAAAxI,QAAA21B,eAAAO,EAAA7U,YAAAgM,GAAA6I,EAAA7Z,QAAAgR,EAAAhR,QAEAziB,KAAAu7B,mBAAAe,EAAA5U,IAAA0U,EAAArU,UACAuU,EAAA7U,UAAAiM,GAEA1zB,KAAAu7B,mBAAA7H,EAAAhM,IAAA+L,EAAA/L,MAGAgM,EAAAjR,QAAAgR,EAAAhR,OACAiR,EAAAjM,UAAAgM,EAEAzzB,KAAA2tB,iBACA3tB,KAAAg8B,iBAAAtI,EAAAD,IACAC,EAAAjR,OAAAziB,KAAA4tB,kBAAA5tB,KAAA0vB,KAAAgE,GAAA,GACA1zB,KAAA2vB,mBAAA+D,EAAAhM,MAEA1nB,KAAAu7B,mBAAA9H,EAAA/L,IAAAgM,EAAAhM,MAGAgM,EAAAjR,OAAAgR,EAAAhR,OACAgR,EAAAhR,QAAAiR,EAAAjR,OACAiR,EAAAjM,UAAAgM,EAAAhM,UACAgM,EAAAhM,UAAAiM,EAEA1zB,KAAA2tB,iBACA3tB,KAAAg8B,iBAAAvI,EAAAC,IACAD,EAAAhR,OAAAziB,KAAA4tB,kBAAA5tB,KAAA0vB,KAAA+D,GAAA,GACAzzB,KAAA2vB,mBAAA8D,EAAA/L,OAKAgM,EAAAjR,OAAAgR,EAAAhR,OACAiR,EAAAjM,UAAAgM,EAAAhM,UAEAznB,KAAA2tB,iBACA3tB,KAAA27B,iBAAAlI,EAAAC,QAMAA,GAAAhM,IAAA,KACAgM,EAAA/L,SAAA,KACA+L,EAAAlM,IAAAiM,EAAAjM,IACAiM,EAAAhR,OAAAuR,EAAAvR,OACAuR,GAAAN,IACAD,EAAAhM,UAAAiM,EAAAjM,WACAiM,EAAAjM,UAAAgM,EAEAzzB,KAAA2tB,iBACA3tB,KAAAg8B,iBAAAtI,EAAAD,MAIA7kB,GAAAxI,QAAAhO,UAAAikC,gBAAA,SAAAtI,GAEA,GAAA/1B,GAAA+1B,EAAArM,GACA,GACA1pB,GAAAwpB,IAAAuM,EAAAvM,IACAxpB,IAAAqoB,WAEAroB,GAAA+1B,EAAArM,MAEA9Y,GAAAxI,QAAAhO,UAAA03B,iBAAA,WAGA,IADA,GAAAz2B,GAAA,EACAA,EAAA2G,KAAA+sB,WAAAzzB,QACA,CACA,GAAAy6B,GAAA/zB,KAAA+sB,WAAA1zB,KACA2E,EAAA+1B,EAAArM,GACA,UAAA1pB,IAAA+1B,EAAA/R,OAEA,EACA,CAEA,IADA,GAAAiV,GAAAj5B,EAAAooB,KACA6Q,GAAAlD,EAAArM,KACA,CACA,GAAA9Y,GAAA6U,SAAA7D,YAAA5hB,EAAA8oB,GAAAmQ,EAAAnQ,KAAAmQ,EAAA7Q,MAAApoB,GAAAi5B,EAAA5Q,MAAAroB,EACA,CAEA,GAAAu+B,GAAAv+B,EAAAqoB,KACAmW,EAAAvF,EAAA5Q,IACAroB,GAAAqoB,KAAAmW,EACAA,EAAApW,KAAApoB,EACAi5B,EAAA5Q,KAAAkW,EACAA,EAAAnW,KAAA6Q,EACAlD,EAAArM,IAAA1pB,CACA,IAAAy+B,GAAAz8B,KAAAoyB,cACAqK,GAAA/U,IAAAuP,EACAj3B,KAAAq8B,gBAAAI,GACAz8B,KAAAu7B,mBAAAkB,EAAA/U,IAAAqM,EAAArM,MAGA+U,EAAAha,QAAAsR,EAAAtR,OACAga,EAAAhV,UAAAsM,EACA/zB,KAAA2tB,iBAAA3tB,KAAAg8B,iBAAAS,EAAA1I,IAGA/zB,KAAAu7B,mBAAAxH,EAAArM,IAAA+U,EAAA/U,MAGA+U,EAAAha,OAAAsR,EAAAtR,OACAsR,EAAAtR,QAAAga,EAAAha,OACAga,EAAAhV,UAAAsM,EAAAtM,UACAsM,EAAAtM,UAAAgV,EACAz8B,KAAA2tB,iBAAA3tB,KAAAg8B,iBAAAjI,EAAA0I,KAKAA,EAAAha,OAAAsR,EAAAtR,OACAga,EAAAhV,UAAAsM,EAAAtM,UACAznB,KAAA2tB,iBAAA3tB,KAAA27B,iBAAA5H,EAAA0I,IAEAxF,EAAAj5B,EAGAi5B,IAAA7Q,KAEApoB,IAAAooB,WAEApoB,GAAA+1B,EAAArM,OAGA9Y,GAAAxI,QAAAspB,KAAA,SAAAuJ,GAEA,GAAA5W,GAAA4W,EAAA3/B,MACA,IAAA+oB,EAAA,EACA,QAEA,QADAjmB,GAAA,EACA/C,EAAA,EAAAwD,EAAAwlB,EAAA,EAAgChpB,EAAAgpB,IAAShpB,EAEzC+C,IAAA68B,EAAAp8B,GAAAmJ,EAAAizB,EAAA5/B,GAAA2M,IAAAizB,EAAAp8B,GAAAqJ,EAAA+yB,EAAA5/B,GAAA6M,GACArJ,EAAAxD,CAEA,WAAA+C,GAEAwS,GAAAxI,QAAAhO,UAAAs3B,KAAA,SAAAT,GAEA,GAAAjxB,GAAAixB,EAAAvH,GACA,UAAA1pB,EACA,QACA,IAAA5B,GAAA,CACA,GACAA,KAAA4B,EAAAqoB,KAAAS,GAAA9gB,EAAAhI,EAAA8oB,GAAA9gB,IAAAhI,EAAAqoB,KAAAS,GAAA5gB,EAAAlI,EAAA8oB,GAAA5gB,GACAlI,IAAAooB,WAEApoB,GAAAixB,EAAAvH,IACA,UAAAtrB,GAEAwS,GAAAxI,QAAAs2B,gBAAA,SAAAzD,EAAA0D,GAEA,GAAAngC,GAAA,GAAAkD,OACAvE,EAAA,GAAAyT,IAAAxI,QAAA,EAIA,OAHAjL,GAAA0yB,gBAAA,EACA1yB,EAAAuwB,QAAAuN,EAAArqB,GAAA/H,SAAAC,WAAA,GACA3L,EAAA8L,QAAA2H,GAAA1H,SAAAC,QAAA3K,EAAAmgC,KACAngC,GAEAoS,GAAAxI,QAAAG,iBAAA,SAAAsyB,EAAA8D,GAEA,wBAAAA,EAAA/tB,GAAApI,aAAAC,WACA,IAAAjK,GAAA,GAAAkD,OACAvE,EAAA,GAAAyT,IAAAxI,QAAA,EAIA,OAHAjL,GAAA0yB,gBAAA,EACA1yB,EAAAyL,SAAAiyB,EAAAjqB,GAAA/H,SAAAC,WAAA,GACA3L,EAAA8L,QAAA2H,GAAA1H,SAAAC,QAAA3K,EAAAmgC,KACAngC,GAEAoS,GAAAxI,QAAAw2B,aAAA,SAAAhT,EAAAC,GAEA,GAAAgT,GAAAjT,EAAA5jB,EAAA6jB,EAAA7jB,EACA82B,EAAAlT,EAAA1jB,EAAA2jB,EAAA3jB,CACA,OAAA22B,KAAAC,KAEAluB,GAAAxI,QAAA22B,qBAAA,SAAArwB,EAAAswB,EAAAC,GAQA,GAAAC,GAAAF,EAAA92B,EAAA+2B,EAAA/2B,EACAi3B,EAAAF,EAAAj3B,EAAAg3B,EAAAh3B,EACAo3B,EAAAF,EAAAF,EAAAh3B,EAAAm3B,EAAAH,EAAA92B,CAEA,OADAk3B,GAAAF,EAAAxwB,EAAA1G,EAAAm3B,EAAAzwB,EAAAxG,EAAAk3B,EACAA,KAAAF,IAAAC,MAGAvuB,GAAAxI,QAAAi3B,oBAAA,SAAAzT,EAAAC,EAAAC,EAAAwT,GAKA,MAAA19B,MAAAY,IAAAopB,EAAA5jB,EAAA6jB,EAAA7jB,GAAApG,KAAAY,IAAAopB,EAAA1jB,EAAA2jB,EAAA3jB,GAEA0jB,EAAA5jB,EAAA6jB,EAAA7jB,GAAA4jB,EAAA5jB,EAAA8jB,EAAA9jB,EACA4I,GAAAxI,QAAA22B,qBAAAnT,EAAAC,EAAAC,GAAAwT,EACAzT,EAAA7jB,EAAA4jB,EAAA5jB,GAAA6jB,EAAA7jB,EAAA8jB,EAAA9jB,EACA4I,GAAAxI,QAAA22B,qBAAAlT,EAAAD,EAAAE,GAAAwT,EAEA1uB,GAAAxI,QAAA22B,qBAAAjT,EAAAF,EAAAC,GAAAyT,EAIA1T,EAAA1jB,EAAA2jB,EAAA3jB,GAAA0jB,EAAA1jB,EAAA4jB,EAAA5jB,EACA0I,GAAAxI,QAAA22B,qBAAAnT,EAAAC,EAAAC,GAAAwT,EACAzT,EAAA3jB,EAAA0jB,EAAA1jB,GAAA2jB,EAAA3jB,EAAA4jB,EAAA5jB,EACA0I,GAAAxI,QAAA22B,qBAAAlT,EAAAD,EAAAE,GAAAwT,EAEA1uB,GAAAxI,QAAA22B,qBAAAjT,EAAAF,EAAAC,GAAAyT,GAIA1uB,GAAAxI,QAAAm3B,eAAA,SAAA3T,EAAAC,EAAAyT,GAEA,GAAAT,GAAAjT,EAAA5jB,EAAA6jB,EAAA7jB,EACA82B,EAAAlT,EAAA1jB,EAAA2jB,EAAA3jB,CACA,OAAA22B,KAAAC,KAAAQ,GAGA1uB,GAAAxI,QAAAo3B,UAAA,SAAAx/B,GAEA,GAAAxB,GAAAwB,EAAAqoB,IAIA,OAHA7pB,GAAA4pB,KAAApoB,EAAAooB,KACApoB,EAAAooB,KAAAC,KAAA7pB,EACAA,EAAAgrB,IAAA,EACAhrB,GAEAoS,GAAAxI,QAAAq3B,aAAA,SAAAj7B,EAAAk7B,GAEA,wBAAAA,EAAA,MAIA,IAAArb,GAAA7f,EAAAlJ,MACA,OAAA+oB,EACA,UAAA3iB,MAEA,QADAi+B,GAAA,GAAAj+B,OAAA2iB,GACAhpB,EAAA,EAAmBA,EAAAgpB,IAAShpB,EAC5BskC,EAAAtkC,GAAA,GAAAuV,IAAAgZ,KACA,QAAAvuB,GAAA,EAAmBA,EAAAgpB,IAAShpB,EAE5BskC,EAAAtkC,GAAAytB,GAAAtkB,EAAAnJ,GACAskC,EAAAtkC,GAAA+sB,KAAAuX,GAAAtkC,EAAA,GAAAgpB,GACAsb,EAAAtkC,GAAA+sB,KAAAC,KAAAsX,EAAAtkC,GACAskC,EAAAtkC,GAAAmuB,IAAA,CAIA,KAFA,GAAA8V,GAAAI,IACA1/B,EAAA2/B,EAAA,GACA,GAAA3/B,EAAAwpB,KAAAxpB,EAAAooB,MAAApoB,EAAAqoB,MAEAzX,GAAAxI,QAAAm3B,eAAAv/B,EAAA8oB,GAAA9oB,EAAAqoB,KAAAS,GAAAwW,IAEAt/B,EAAA4Q,GAAAxI,QAAAo3B,UAAAx/B,GACAqkB,KAEAzT,GAAAxI,QAAAm3B,eAAAv/B,EAAAqoB,KAAAS,GAAA9oB,EAAAooB,KAAAU,GAAAwW,IAEA1uB,GAAAxI,QAAAo3B,UAAAx/B,EAAAooB,MACApoB,EAAA4Q,GAAAxI,QAAAo3B,UAAAx/B,GACAqkB,GAAA,GAEAzT,GAAAxI,QAAAi3B,oBAAAr/B,EAAAqoB,KAAAS,GAAA9oB,EAAA8oB,GAAA9oB,EAAAooB,KAAAU,GAAAwW,IAEAt/B,EAAA4Q,GAAAxI,QAAAo3B,UAAAx/B,GACAqkB,MAIArkB,EAAAwpB,IAAA,EACAxpB,IAAAooB,KAGA/D,GAAA,IACAA,EAAA,EAEA,QADA7lB,GAAA,GAAAkD,OAAA2iB,GACAhpB,EAAA,EAAmBA,EAAAgpB,IAAShpB,EAE5BmD,EAAAnD,GAAA,GAAAuV,IAAA6U,SAAAzlB,EAAA8oB,IACA9oB,IAAAooB,IAGA,OADAuX,GAAA,KACAnhC,GAEAoS,GAAAxI,QAAAC,cAAA,SAAAwyB,EAAA6E,GAGA,OADAlhC,GAAA,GAAAkD,OAAAm5B,EAAAv/B,QACAD,EAAA,EAAAupB,EAAAiW,EAAAv/B,OAAwCD,EAAAupB,EAAUvpB,IAClDmD,EAAAnD,GAAAuV,GAAAxI,QAAAq3B,aAAA5E,EAAAx/B,GAAAqkC,EACA,OAAAlhC,IAEAoS,GAAAxI,QAAAw3B,UAAA,SAAAC,EAAAr7B,EAAAs7B,EAAAC,GAEA,GAAAC,GAAAD,EAAA,IACAE,EAAAJ,EAAAvkC,OACA4kC,EAAA17B,EAAAlJ,OACAkD,EAAA,GAAAkD,MACA,IAAAo+B,EACA,OAAAzkC,GAAA,EAAqBA,EAAA6kC,EAAa7kC,IAClC,CAEA,OADAoE,GAAA,GAAAiC,OAAAu+B,GACAphC,EAAA,EAAAutB,EAAAyT,EAAAvkC,OAAAi/B,EAAAsF,EAAAhhC,GAA+DA,EAAAutB,EAAUvtB,IAAA07B,EAAAsF,EAAAhhC,GACzEY,EAAAZ,GAAA,GAAA+R,IAAA6U,SAAAjhB,EAAAnJ,GAAA2M,EAAAuyB,EAAAvyB,EAAAxD,EAAAnJ,GAAA6M,EAAAqyB,EAAAryB,EACA1J,GAAA3E,KAAA4F,OAGA,QAAApE,GAAA,EAAqBA,EAAA6kC,EAAa7kC,IAClC,CAEA,OADAoE,GAAA,GAAAiC,OAAAu+B,GACAphC,EAAA,EAAAutB,EAAAyT,EAAAvkC,OAAAi/B,EAAAsF,EAAAhhC,GAA+DA,EAAAutB,EAAUvtB,IAAA07B,EAAAsF,EAAAhhC,GACzEY,EAAAZ,GAAA,GAAA+R,IAAA6U,SAAAjhB,EAAAnJ,GAAA2M,EAAAuyB,EAAAvyB,EAAAxD,EAAAnJ,GAAA6M,EAAAqyB,EAAAryB,EACA1J,GAAA3E,KAAA4F,GAGA,OADA0gC,GAAA,GAAAz+B,OACArG,EAAA,EAAmBA,EAAA6kC,EAAA,EAAAF,EAAyB3kC,IAC5C,OAAAwD,GAAA,EAAqBA,EAAAohC,EAAaphC,IAClC;AACA,GAAAuhC,GAAA,GAAA1+B,MACA0+B,GAAAvmC,KAAA2E,EAAAnD,EAAA6kC,GAAArhC,EAAAohC,IACAG,EAAAvmC,KAAA2E,GAAAnD,EAAA,GAAA6kC,GAAArhC,EAAAohC,IACAG,EAAAvmC,KAAA2E,GAAAnD,EAAA,GAAA6kC,IAAArhC,EAAA,GAAAohC,IACAG,EAAAvmC,KAAA2E,EAAAnD,EAAA6kC,IAAArhC,EAAA,GAAAohC,IACArvB,GAAAxI,QAAA4yB,YAAAoF,IACAA,EAAArF,UACAoF,EAAAtmC,KAAAumC,GAEA,MAAAD,IAGAvvB,GAAAxI,QAAAi4B,aAAA,SAAAR,EAAAS,EAAAC,GAEA,GAAAD,EAAA,YAAA5+B,OAUA,CAIA,OAHAiH,GAAA23B,EACA9P,EAAA,GAAA5f,IAAAsS,MACA/lB,EAAA,GAAAyT,IAAAxI,QACA/M,EAAA,EAAkBA,EAAAsN,EAAArN,SAAkBD,EACpC,CACA,GAAAszB,GAAA/d,GAAAxI,QAAAw3B,UAAAC,EAAAl3B,EAAAtN,IAAA,EAAAklC,EAEA,IADApjC,EAAAyL,SAAA+lB,EAAA/d,GAAA/H,SAAAC,WAAA,GACAy3B,EACA,CACA,GAAA/7B,GAAAoM,GAAAxI,QAAAo4B,cAAA73B,EAAAtN,GAAAwkC,EAAA,GACA1iC,GAAAuwB,QAAAlpB,EAAAoM,GAAA/H,SAAAoG,QAAA,IAKA,MAFA9R,GAAA8L,QAAA2H,GAAA1H,SAAAC,QAAAqnB,EACA5f,GAAApI,aAAAme,WAAA/V,GAAApI,aAAAme,YACA6J,EAxBA,GAAAhsB,GAAA87B,EACA33B,EAAAiI,GAAAxI,QAAAw3B,UAAAC,EAAAr7B,GAAA,EAAA+7B,GACApjC,EAAA,GAAAyT,IAAAxI,OAGA,OAFAjL,GAAAyL,SAAAD,EAAAiI,GAAA/H,SAAAC,WAAA,GACA3L,EAAA8L,QAAA2H,GAAA1H,SAAAC,QAAAR,EAAAiI,GAAApI,aAAAme,WAAA/V,GAAApI,aAAAme,YACAhe,GAwBAiI,GAAAxI,QAAAo4B,cAAA,SAAAh8B,EAAAw7B,GAGA,OADAS,GAAA,GAAA7vB,IAAAqS,KACA5nB,EAAA,EAAiBA,EAAAmJ,EAAAlJ,OAAiBD,IAClColC,EAAA5mC,KAAA,GAAA+W,IAAA6U,SAAAjhB,EAAAnJ,GAAA2M,EAAAg4B,EAAAh4B,EAAAxD,EAAAnJ,GAAA6M,EAAA83B,EAAA93B,GACA,OAAAu4B,IAIA7vB,GAAAxI,QAAAs4B,cAAA,SAAAC,EAAAC,GAEA,GAAAj4B,GAAAiI,GAAAxI,QAAAw3B,UAAAe,EAAAC,GAAA,MACAzjC,EAAA,GAAAyT,IAAAxI,OAGA,OAFAjL,GAAAyL,SAAAD,EAAAiI,GAAA/H,SAAAC,WAAA,GACA3L,EAAA8L,QAAA2H,GAAA1H,SAAAC,QAAAR,EAAAiI,GAAApI,aAAAme,WAAA/V,GAAApI,aAAAme,YACAhe,GAGAiI,GAAAxI,QAAAy4B,gBAAA,SAAA/P,GAEA,GAAAtyB,GAAA,GAAAkD,MAGA,OADAkP,IAAAxI,QAAA04B,mBAAAhQ,EAAAlgB,GAAAxI,QAAA24B,SAAAC,MAAAxiC,GACAA,GAEAoS,GAAAxI,QAAA04B,mBAAA,SAAAG,EAAAC,EAAAv4B,GAEA,GAAAw4B,IAAA,CACA,QAAAD,GAEA,IAAAtwB,IAAAxI,QAAA24B,SAAAK,OACA,MACA,KAAAxwB,IAAAxI,QAAA24B,SAAAM,SACAF,GAAAF,EAAAjd,OAKAid,EAAAtd,UAAAroB,OAAA,GAAA6lC,GACAx4B,EAAA9O,KAAAonC,EAAAtd,UACA,QAAA2d,GAAA,EAAAC,EAAAN,EAAAl3B,SAAAy3B,EAAAD,EAAAjmC,OAAA+/B,EAAAkG,EAAAD,GAA+EA,EAAAE,EAAWF,IAAAjG,EAAAkG,EAAAD,GAC1F1wB,GAAAxI,QAAA04B,mBAAAzF,EAAA6F,EAAAv4B,IAEAiI,GAAAxI,QAAAq5B,sBAAA,SAAA3Q,GAIA,OAFAtyB,GAAA,GAAAoS,IAAAsS,MAEA7nB,EAAA,EAAAupB,EAAAkM,EAAA5M,aAAiD7oB,EAAAupB,EAAUvpB,IAC3Dy1B,EAAA/mB,SAAA1O,GAAA2oB,QACAxlB,EAAA3E,KAAAi3B,EAAA/mB,SAAA1O,GAAAsoB,UACA,OAAAnlB,IAEAoS,GAAAxI,QAAAs5B,wBAAA,SAAA5Q,GAEA,GAAAtyB,GAAA,GAAAoS,IAAAsS,KAGA,OADAtS,IAAAxI,QAAA04B,mBAAAhQ,EAAAlgB,GAAAxI,QAAA24B,SAAAM,SAAA7iC,GACAA,GAEAkkB,GAAA9R,GAAAxI,QAAAwI,GAAAqZ,aACArZ,GAAAxI,QAAA24B,UACAC,MAAA,EACAI,OAAA,EACAC,SAAA,GAEAzwB,GAAAV,cAAA,SAAAyxB,EAAAxxB,GAEA,wBAAAwxB,EAAA,GACA,wBAAAxxB,EAAAS,GAAAV,cAAA0xB,mBACA5/B,KAAA6/B,YAAA,GAAAjxB,IAAAsS,MACAlhB,KAAA8/B,UAAA,GAAAlxB,IAAAqS,KACAjhB,KAAA+/B,WAAA,GAAAnxB,IAAAqS,KACAjhB,KAAAggC,UAAA,GAAAtgC,OACAM,KAAAigC,QAAA,EACAjgC,KAAAkgC,OAAA,EACAlgC,KAAAmgC,MAAA,EACAngC,KAAAogC,MAAA,EACApgC,KAAAqgC,WAAA,EACArgC,KAAAsgC,cAAA,EACAtgC,KAAAugC,SAAA,GAAA3xB,IAAA6U,SACAzjB,KAAAwgC,YAAA,GAAA5xB,IAAA6S,SACAzhB,KAAAygC,WAAAd,EACA3/B,KAAA0gC,aAAAvyB,EACAnO,KAAAugC,SAAAv6B,GAAA,GAEA4I,GAAAV,cAAAyyB,OAAA,iBACA/xB,GAAAV,cAAA0xB,kBAAA,IACAhxB,GAAAV,cAAA9V,UAAAuqB,MAAA,WAEA/T,GAAA+T,MAAA3iB,KAAAwgC,YAAAz4B,UACA/H,KAAAugC,SAAAv6B,GAAA,GAEA4I,GAAAV,cAAAyV,MAAA/U,GAAAxI,QAAAud,MACA/U,GAAAV,cAAA9V,UAAAszB,QAAA,SAAAlpB,EAAAiL,EAAAC,GAEA,GAAAme,GAAArpB,EAAAlJ,OAAA,CACA,MAAAuyB,EAAA,IAEA,GAAA8L,GAAA,GAAA/oB,IAAA6S,QAIA,IAHAkW,EAAA9V,WAAApU,EACAkqB,EAAA7V,UAAApU,EAEAA,GAAAkB,GAAAf,QAAAoX,cAAAvX,GAAAkB,GAAAf,QAAAC,gBACA,KAAA+d,EAAA,GAAAjd,GAAA6U,SAAA7D,YAAApd,EAAA,GAAAA,EAAAqpB,KACAA,GAEA8L,GAAAhW,UAAA9pB,KAAA2K,EAAA,GAGA,QAFA3F,GAAA,EACAyT,EAAA,EACAjX,EAAA,EAAmBA,GAAAwyB,EAAYxyB,IAC/BuV,GAAA6U,SAAA1D,cAAA4X,EAAAhW,UAAA9kB,GAAA2F,EAAAnJ,MAEAwD,IACA86B,EAAAhW,UAAA9pB,KAAA2K,EAAAnJ,KACAmJ,EAAAnJ,GAAA6M,EAAAyxB,EAAAhW,UAAArR,GAAApK,GAAA1D,EAAAnJ,GAAA6M,GAAAyxB,EAAAhW,UAAArR,GAAApK,GAAA1D,EAAAnJ,GAAA2M,EAAA2xB,EAAAhW,UAAArR,GAAAtK,KACAsK,EAAAzT,GAEA,MAAA6Q,GAAAkB,GAAAf,QAAAC,iBAAAjR,EAAA,KAEAmD,KAAAwgC,YAAAre,SAAAwV,GAEAjqB,GAAAkB,GAAAf,QAAAC,iBAEA,GAAA9N,KAAAugC,SAAAv6B,EAAA,EACAhG,KAAAugC,SAAA,GAAA3xB,IAAA6U,SAAAzjB,KAAAwgC,YAAAte,aAAA,EAAA5R,OAEA,CACA,GAAAioB,GAAAv4B,KAAAwgC,YAAAz4B,SAAA/H,KAAAugC,SAAAv6B,GAAA2b,UAAA3hB,KAAAugC,SAAAr6B,IACAyxB,EAAAhW,UAAArR,GAAApK,EAAAqyB,EAAAryB,GAAAyxB,EAAAhW,UAAArR,GAAApK,GAAAqyB,EAAAryB,GAAAyxB,EAAAhW,UAAArR,GAAAtK,EAAAuyB,EAAAvyB,KACAhG,KAAAugC,SAAA,GAAA3xB,IAAA6U,SAAAzjB,KAAAwgC,YAAAte,aAAA,EAAA5R,OAGA1B,GAAAV,cAAA9V,UAAAwO,SAAA,SAAAD,EAAA8G,EAAAC,GAEA,OAAArU,GAAA,EAAAupB,EAAAjc,EAAArN,OAAwCD,EAAAupB,EAAUvpB,IAClD2G,KAAA0rB,QAAA/kB,EAAAtN,GAAAoU,EAAAC,IAEAkB,GAAAV,cAAA9V,UAAAwoC,gBAAA,WAIA,GAAA5gC,KAAAugC,SAAAv6B,GAAA,IAAA4I,GAAAxI,QAAA4yB,YAAAh5B,KAAAwgC,YAAAz4B,SAAA/H,KAAAugC,SAAAv6B,GAAA2b,WAEA,OAAAtoB,GAAA,EAAqBA,EAAA2G,KAAAwgC,YAAAte,aAAmC7oB,IACxD,CACA,GAAAqO,GAAA1H,KAAAwgC,YAAAz4B,SAAA1O,IACAqO,EAAAoa,WAAAlT,GAAAf,QAAAC,iBAAApG,EAAAoa,WAAAlT,GAAAf,QAAAoX,cAAArW,GAAAxI,QAAA4yB,YAAAtxB,EAAAia,aACAja,EAAAia,UAAAoX,cAKA,QAAA1/B,GAAA,EAAqBA,EAAA2G,KAAAwgC,YAAAte,aAAmC7oB,IACxD,CACA,GAAAqO,GAAA1H,KAAAwgC,YAAAz4B,SAAA1O,EACAqO,GAAAoa,WAAAlT,GAAAf,QAAAoX,cAAArW,GAAAxI,QAAA4yB,YAAAtxB,EAAAia,YACAja,EAAAia,UAAAoX,YAIAnqB,GAAAV,cAAA2yB,cAAA,SAAAjX,EAAAC,GAEA,GAAAgT,GAAAhT,EAAA7jB,EAAA4jB,EAAA5jB,EACA82B,EAAAjT,EAAA3jB,EAAA0jB,EAAA1jB,CACA,OAAA22B,GAAA,GAAAC,EACA,UAAAluB,IAAAuS,YAAA,IACA,IAAAlJ,GAAA,EAAArY,KAAAkhC,KAAAjE,IAAAC,IAGA,OAFAD,IAAA5kB,EACA6kB,GAAA7kB,EACA,GAAArJ,IAAAuS,YAAA2b,GAAAD,IAEAjuB,GAAAV,cAAA9V,UAAA2oC,SAAA,SAAA/C,GAKA,GAHAh+B,KAAA6/B,YAAA,GAAAngC,OACAM,KAAAigC,QAAAjC,EAEApvB,GAAAqZ,YAAAa,UAAAkV,GAGA,OAAA3kC,GAAA,EAAqBA,EAAA2G,KAAAwgC,YAAAte,aAAmC7oB,IACxD,CACA,GAAAqO,GAAA1H,KAAAwgC,YAAAz4B,SAAA1O,EACAqO,GAAAoa,WAAAlT,GAAAf,QAAAC,iBACA9N,KAAA6/B,YAAAhoC,KAAA6P,EAAAia,eAPA,CAYA3hB,KAAAygC,WAAA,EACAzgC,KAAAqgC,WAAA,GAAArgC,KAAAygC,WAAAzgC,KAAAygC,YAEAzgC,KAAAqgC,WAAA,EACA,IAAA1/B,EAEAA,GADAX,KAAA0gC,cAAA,EACA9xB,GAAAV,cAAA0xB,kBACA5/B,KAAA0gC,aAAA9gC,KAAAY,IAAAw9B,GAAApvB,GAAAV,cAAA0xB,kBACAhgC,KAAAY,IAAAw9B,GAAApvB,GAAAV,cAAA0xB,kBAEA5/B,KAAA0gC,YAEA,IAAAM,GAAA,iBAAAphC,KAAAqhC,KAAA,EAAAtgC,EAAAf,KAAAY,IAAAw9B,GACAh+B,MAAAmgC,MAAAvgC,KAAAshC,IAAAtyB,GAAAV,cAAAyyB,OAAAK,GACAhhC,KAAAogC,MAAAxgC,KAAAuhC,IAAAvyB,GAAAV,cAAAyyB,OAAAK,GACAhhC,KAAAsgC,cAAAU,EAAApyB,GAAAV,cAAAyyB,OACA3C,EAAA,IACAh+B,KAAAmgC,OAAAngC,KAAAmgC,MAEA,QAAA9mC,GAAA,EAAmBA,EAAA2G,KAAAwgC,YAAAte,aAAmC7oB,IACtD,CACA,GAAAqO,GAAA1H,KAAAwgC,YAAAz4B,SAAA1O,EACA2G,MAAA8/B,UAAAp4B,EAAAia,SACA,IAAAmX,GAAA94B,KAAA8/B,UAAAxmC,MACA,SAAAw/B,GAAAkF,GAAA,IAAAlF,EAAA,GAAApxB,EAAAoa,WAAAlT,GAAAf,QAAAC,kBAGA,GADA9N,KAAA+/B,WAAA,GAAArgC,OACA,GAAAo5B,EAAA,CAiCA94B,KAAAggC,UAAA1mC,OAAA,CAEA,QAAAuD,GAAA,EAAqBA,EAAAi8B,EAAA,EAAaj8B,IAClCmD,KAAAggC,UAAAnoC,KAAA+W,GAAAV,cAAA2yB,cAAA7gC,KAAA8/B,UAAAjjC,GAAAmD,KAAA8/B,UAAAjjC,EAAA,IAKA,IAJA6K,EAAAoa,WAAAlT,GAAAf,QAAAoX,cAAAvd,EAAAoa,WAAAlT,GAAAf,QAAAC,gBACA9N,KAAAggC,UAAAnoC,KAAA+W,GAAAV,cAAA2yB,cAAA7gC,KAAA8/B,UAAAhH,EAAA,GAAA94B,KAAA8/B,UAAA,KAEA9/B,KAAAggC,UAAAnoC,KAAA,GAAA+W,IAAAuS,YAAAnhB,KAAAggC,UAAAlH,EAAA,KACApxB,EAAAoa,WAAAlT,GAAAf,QAAAC,gBACA,CAEA,OADAwC,GAAAwoB,EAAA,EACAj8B,EAAA,EAAuBA,EAAAi8B,EAASj8B,IAChCyT,EAAAtQ,KAAAohC,YAAAvkC,EAAAyT,EAAA5I,EAAAma,WACA7hB,MAAA6/B,YAAAhoC,KAAAmI,KAAA+/B,gBAEA,IAAAr4B,EAAAoa,WAAAlT,GAAAf,QAAAoX,aACA,CAEA,OADA3U,GAAAwoB,EAAA,EACAj8B,EAAA,EAAuBA,EAAAi8B,EAASj8B,IAChCyT,EAAAtQ,KAAAohC,YAAAvkC,EAAAyT,EAAA5I,EAAAma,WACA7hB,MAAA6/B,YAAAhoC,KAAAmI,KAAA+/B,YACA//B,KAAA+/B,WAAA,GAAArgC,MAGA,QADAyP,GAAAnP,KAAAggC,UAAAlH,EAAA,GACAj8B,EAAAi8B,EAAA,EAA6Bj8B,EAAA,EAAOA,IACpCmD,KAAAggC,UAAAnjC,GAAA,GAAA+R,IAAAuS,aAAAnhB,KAAAggC,UAAAnjC,EAAA,GAAAmJ,GAAAhG,KAAAggC,UAAAnjC,EAAA,GAAAqJ,EACAlG,MAAAggC,UAAA,MAAApxB,IAAAuS,aAAAhS,EAAAnJ,GAAAmJ,EAAAjJ,GACAoK,EAAA,CACA,QAAAzT,GAAAi8B,EAAA,EAA6Bj8B,GAAA,EAAQA,IACrCyT,EAAAtQ,KAAAohC,YAAAvkC,EAAAyT,EAAA5I,EAAAma,WACA7hB,MAAA6/B,YAAAhoC,KAAAmI,KAAA+/B,gBAGA,CAEA,OADAzvB,GAAA,EACAzT,EAAA,EAAuBA,EAAAi8B,EAAA,IAAaj8B,EACpCyT,EAAAtQ,KAAAohC,YAAAvkC,EAAAyT,EAAA5I,EAAAma,WACA,IAAA+H,EACA,IAAAliB,EAAAoa,WAAAlT,GAAAf,QAAAmX,WACA,CACA,GAAAnoB,GAAAi8B,EAAA,CACAlP,GAAA,GAAAhb,IAAA6U,SAAA7U,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAAjjC,GAAAmJ,EAAAhG,KAAAggC,UAAAnjC,GAAAmJ,EAAAg4B,GAAApvB,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAAjjC,GAAAqJ,EAAAlG,KAAAggC,UAAAnjC,GAAAqJ,EAAA83B,IACAh+B,KAAA+/B,WAAAloC,KAAA+xB,GACAA,EAAA,GAAAhb,IAAA6U,SAAA7U,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAAjjC,GAAAmJ,EAAAhG,KAAAggC,UAAAnjC,GAAAmJ,EAAAg4B,GAAApvB,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAAjjC,GAAAqJ,EAAAlG,KAAAggC,UAAAnjC,GAAAqJ,EAAA83B,IACAh+B,KAAA+/B,WAAAloC,KAAA+xB,OAGA,CACA,GAAA/sB,GAAAi8B,EAAA,CACAxoB,GAAAwoB,EAAA,EACA94B,KAAAkgC,OAAA,EACAlgC,KAAAggC,UAAAnjC,GAAA,GAAA+R,IAAAuS,aAAAnhB,KAAAggC,UAAAnjC,GAAAmJ,GAAAhG,KAAAggC,UAAAnjC,GAAAqJ,GACAwB,EAAAoa,WAAAlT,GAAAf,QAAAiX,aACA9kB,KAAAqhC,SAAAxkC,EAAAyT,GAEAtQ,KAAAshC,QAAAzkC,EAAAyT,GAGA,OAAAzT,GAAAi8B,EAAA,EAA6Bj8B,EAAA,EAAOA,IACpCmD,KAAAggC,UAAAnjC,GAAA,GAAA+R,IAAAuS,aAAAnhB,KAAAggC,UAAAnjC,EAAA,GAAAmJ,GAAAhG,KAAAggC,UAAAnjC,EAAA,GAAAqJ,EACAlG,MAAAggC,UAAA,MAAApxB,IAAAuS,aAAAnhB,KAAAggC,UAAA,GAAAh6B,GAAAhG,KAAAggC,UAAA,GAAA95B,GACAoK,EAAAwoB,EAAA,CACA,QAAAj8B,GAAAyT,EAAA,EAA2BzT,EAAA,IAAOA,EAClCyT,EAAAtQ,KAAAohC,YAAAvkC,EAAAyT,EAAA5I,EAAAma,WACAna,GAAAoa,WAAAlT,GAAAf,QAAAmX,YAEA4E,EAAA,GAAAhb,IAAA6U,SAAA7U,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAA,GAAA95B,EAAAhG,KAAAggC,UAAA,GAAAh6B,EAAAg4B,GAAApvB,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAA,GAAA55B,EAAAlG,KAAAggC,UAAA,GAAA95B,EAAA83B,IACAh+B,KAAA+/B,WAAAloC,KAAA+xB,GACAA,EAAA,GAAAhb,IAAA6U,SAAA7U,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAA,GAAA95B,EAAAhG,KAAAggC,UAAA,GAAAh6B,EAAAg4B,GAAApvB,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAA,GAAA55B,EAAAlG,KAAAggC,UAAA,GAAA95B,EAAA83B,IACAh+B,KAAA+/B,WAAAloC,KAAA+xB,KAIAtZ,EAAA,EACAtQ,KAAAkgC,OAAA,EACAx4B,EAAAoa,WAAAlT,GAAAf,QAAAiX,aACA9kB,KAAAqhC,SAAA,KAEArhC,KAAAshC,QAAA,MAEAthC,KAAA6/B,YAAAhoC,KAAAmI,KAAA+/B,iBAjHA,CAEA,GAAAr4B,EAAAma,YAAAjT,GAAAjB,SAAAC,QAIA,OAFA5H,GAAA,EACAE,EAAA,EACArJ,EAAA,EAAyBA,GAAAmkC,EAAYnkC,IACrC,CACAmD,KAAA+/B,WAAAloC,KAAA,GAAA+W,IAAA6U,SAAA7U,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAA,GAAA95B,IAAAg4B,GAAApvB,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAA,GAAA55B,IAAA83B,IACA,IAAAuD,GAAAv7B,CACAA,KAAAhG,KAAAogC,MAAApgC,KAAAmgC,MAAAj6B,EACAA,EAAAq7B,EAAAvhC,KAAAmgC,MAAAj6B,EAAAlG,KAAAogC,UAOA,QAFAp6B,IAAA,EACAE,GAAA,EACArJ,EAAA,EAAyBA,EAAA,IAAOA,EAEhCmD,KAAA+/B,WAAAloC,KAAA,GAAA+W,IAAA6U,SAAA7U,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAA,GAAA95B,IAAAg4B,GAAApvB,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAA,GAAA55B,IAAA83B,KACAh4B,EAAA,EACAA,EAAA,EACAE,EAAA,EACAA,EAAA,EAEAF,GAAA,CAGAhG,MAAA6/B,YAAAhoC,KAAAmI,KAAA+/B,gBAwFAnxB,GAAAV,cAAA9V,UAAA6O,QAAA,WAEA,GAAA7K,GAAAglB,UACAmN,EAAAnyB,EAAA,YAAAwS,IAAA5H,QACA,IAAAunB,EA+BA,CACA,GAAAC,GAAApyB,EAAA,GACA4hC,EAAA5hC,EAAA,EACAoyB,GAAA7L,QACA3iB,KAAA4gC,kBACA5gC,KAAA+gC,SAAA/C,EAEA,IAAAwD,GAAA,GAAA5yB,IAAAxI,QAAA,EAEA,IADAo7B,EAAA56B,SAAA5G,KAAA6/B,YAAAjxB,GAAA/H,SAAAC,WAAA,GACAk3B,EAAA,EAEAwD,EAAAv6B,QAAA2H,GAAA1H,SAAAC,QAAAqnB,EAAA5f,GAAApI,aAAAoe,YAAAhW,GAAApI,aAAAoe,iBAGA,CACA,GAAA3U,GAAArB,GAAAxI,QAAAs0B,UAAA16B,KAAA6/B,aACA4B,EAAA,GAAA7yB,IAAAqS,IASA,IARAwgB,EAAA5pC,KAAA,GAAA+W,IAAA6U,SAAAxT,EAAAiU,KAAA,GAAAjU,EAAAoU,OAAA,KACAod,EAAA5pC,KAAA,GAAA+W,IAAA6U,SAAAxT,EAAAmU,MAAA,GAAAnU,EAAAoU,OAAA,KACAod,EAAA5pC,KAAA,GAAA+W,IAAA6U,SAAAxT,EAAAmU,MAAA,GAAAnU,EAAAkU,IAAA,KACAsd,EAAA5pC,KAAA,GAAA+W,IAAA6U,SAAAxT,EAAAiU,KAAA,GAAAjU,EAAAkU,IAAA,KACAqd,EAAA9V,QAAA+V,EAAA7yB,GAAA/H,SAAAC,WAAA,GACA06B,EAAA5T,iBAAA,EACA4T,EAAAv6B,QAAA2H,GAAA1H,SAAAC,QAAAqnB,EAAA5f,GAAApI,aAAAqe,YAAAjW,GAAApI,aAAAqe,aAEA,GAAA2J,EAAAtM,cAAAsM,EAAAzmB,SAAA,GAAAma,aAAA,EACA,CACA,GAAAwf,GAAAlT,EAAAzmB,SAAA,EAEAymB,GAAAzmB,SAAA,GAAA25B,EAAA35B,SAAA,GACAymB,EAAAzmB,SAAA,GAAA2Z,SAAA8M,CACA,QAAAn1B,GAAA,EAAyBA,EAAAqoC,EAAAxf,aAA4B7oB,IACrDm1B,EAAArM,SAAAuf,EAAA35B,SAAA1O,QAGAm1B,GAAA7L,aAjEA,CACA,GAAA6L,GAAApyB,EAAA,GACA4hC,EAAA5hC,EAAA,EACAwS,IAAA+T,MAAA6L,GACAxuB,KAAA4gC,kBACA5gC,KAAA+gC,SAAA/C,EAEA,IAAAwD,GAAA,GAAA5yB,IAAAxI,QAAA,EAEA,IADAo7B,EAAA56B,SAAA5G,KAAA6/B,YAAAjxB,GAAA/H,SAAAC,WAAA,GACAk3B,EAAA,EAEAwD,EAAAv6B,QAAA2H,GAAA1H,SAAAC,QAAAqnB,EAAA5f,GAAApI,aAAAoe,YAAAhW,GAAApI,aAAAoe,iBAGA,CACA,GAAA3U,GAAArB,GAAAxI,QAAAs0B,UAAA16B,KAAA6/B,aACA4B,EAAA,GAAA7yB,IAAAqS,IACAwgB,GAAA5pC,KAAA,GAAA+W,IAAA6U,SAAAxT,EAAAiU,KAAA,GAAAjU,EAAAoU,OAAA,KACAod,EAAA5pC,KAAA,GAAA+W,IAAA6U,SAAAxT,EAAAmU,MAAA,GAAAnU,EAAAoU,OAAA,KACAod,EAAA5pC,KAAA,GAAA+W,IAAA6U,SAAAxT,EAAAmU,MAAA,GAAAnU,EAAAkU,IAAA,KACAsd,EAAA5pC,KAAA,GAAA+W,IAAA6U,SAAAxT,EAAAiU,KAAA,GAAAjU,EAAAkU,IAAA,KACAqd,EAAA9V,QAAA+V,EAAA7yB,GAAA/H,SAAAC,WAAA,GACA06B,EAAA5T,iBAAA,EACA4T,EAAAv6B,QAAA2H,GAAA1H,SAAAC,QAAAqnB,EAAA5f,GAAApI,aAAAqe,YAAAjW,GAAApI,aAAAqe,aACA2J,EAAAl1B,OAAA,GACAk1B,EAAA50B,OAAA,QA4CAgV,GAAAV,cAAA9V,UAAAgpC,YAAA,SAAAvkC,EAAAyT,EAAAqxB,GAKA,GAFA3hC,KAAAkgC,OAAAlgC,KAAAggC,UAAA1vB,GAAAtK,EAAAhG,KAAAggC,UAAAnjC,GAAAqJ,EAAAlG,KAAAggC,UAAAnjC,GAAAmJ,EAAAhG,KAAAggC,UAAA1vB,GAAApK,EAEAtG,KAAAY,IAAAR,KAAAkgC,OAAAlgC,KAAAigC,SAAA,EACA,CAEA,GAAA2B,GAAA5hC,KAAAggC,UAAA1vB,GAAAtK,EAAAhG,KAAAggC,UAAAnjC,GAAAmJ,EAAAhG,KAAAggC,UAAAnjC,GAAAqJ,EAAAlG,KAAAggC,UAAA1vB,GAAApK,CACA,IAAA07B,EAAA,EAIA,MAFA5hC,MAAA+/B,WAAAloC,KAAA,GAAA+W,IAAA6U,SAAA7U,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAAjjC,GAAAmJ,EAAAhG,KAAAggC,UAAA1vB,GAAAtK,EAAAhG,KAAAigC,SACArxB,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAAjjC,GAAAqJ,EAAAlG,KAAAggC,UAAA1vB,GAAApK,EAAAlG,KAAAigC,WACA3vB,MAIAtQ,MAAAkgC,OAAA,EACAlgC,KAAAkgC,OAAA,EACAlgC,KAAAkgC,QAAA,IACAlgC,KAAAkgC,QAAA,EACA,IAAAlgC,KAAAkgC,OAAAlgC,KAAAigC,QAAA,EAEAjgC,KAAA+/B,WAAAloC,KAAA,GAAA+W,IAAA6U,SAAA7U,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAAjjC,GAAAmJ,EAAAhG,KAAAggC,UAAA1vB,GAAAtK,EAAAhG,KAAAigC,SACArxB,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAAjjC,GAAAqJ,EAAAlG,KAAAggC,UAAA1vB,GAAApK,EAAAlG,KAAAigC,WACAjgC,KAAA+/B,WAAAloC,KAAA,GAAA+W,IAAA6U,SAAAzjB,KAAA8/B,UAAAjjC,KACAmD,KAAA+/B,WAAAloC,KAAA,GAAA+W,IAAA6U,SAAA7U,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAAjjC,GAAAmJ,EAAAhG,KAAAggC,UAAAnjC,GAAAmJ,EAAAhG,KAAAigC,SACArxB,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAAjjC,GAAAqJ,EAAAlG,KAAAggC,UAAAnjC,GAAAqJ,EAAAlG,KAAAigC,eAGA,QAAA0B,GAEA,IAAA/yB,IAAAjB,SAAAK,QAEA,GAAAiC,GAAA,GAAAjQ,KAAAggC,UAAAnjC,GAAAmJ,EAAAhG,KAAAggC,UAAA1vB,GAAAtK,EAAAhG,KAAAggC,UAAAnjC,GAAAqJ,EAAAlG,KAAAggC,UAAA1vB,GAAApK,EACA+J,IAAAjQ,KAAAqgC,WACArgC,KAAA6hC,QAAAhlC,EAAAyT,EAAAL,GAEAjQ,KAAAqhC,SAAAxkC,EAAAyT,EACA,MAEA,KAAA1B,IAAAjB,SAAAI,SACA/N,KAAAqhC,SAAAxkC,EAAAyT,EACA,MACA,KAAA1B,IAAAjB,SAAAC,QACA5N,KAAAshC,QAAAzkC,EAAAyT,GAIA,MADAA,GAAAzT,GAGA+R,GAAAV,cAAA9V,UAAAipC,SAAA,SAAAxkC,EAAAyT,GAEA,GAAAusB,GAAAj9B,KAAAkiC,IAAAliC,KAAAmiC,MAAA/hC,KAAAkgC,OACAlgC,KAAAggC,UAAA1vB,GAAAtK,EAAAhG,KAAAggC,UAAAnjC,GAAAmJ,EAAAhG,KAAAggC,UAAA1vB,GAAApK,EAAAlG,KAAAggC,UAAAnjC,GAAAqJ,GAAA,EACAlG,MAAA+/B,WAAAloC,KAAA,GAAA+W,IAAA6U,SACA7U,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAAjjC,GAAAmJ,EAAAhG,KAAAigC,SAAAjgC,KAAAggC,UAAA1vB,GAAAtK,EAAAhG,KAAAggC,UAAA1vB,GAAApK,EAAA22B,IACAjuB,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAAjjC,GAAAqJ,EAAAlG,KAAAigC,SAAAjgC,KAAAggC,UAAA1vB,GAAApK,EAAAlG,KAAAggC,UAAA1vB,GAAAtK,EAAA62B,MACA78B,KAAA+/B,WAAAloC,KAAA,GAAA+W,IAAA6U,SACA7U,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAAjjC,GAAAmJ,EAAAhG,KAAAigC,SAAAjgC,KAAAggC,UAAAnjC,GAAAmJ,EAAAhG,KAAAggC,UAAAnjC,GAAAqJ,EAAA22B,IACAjuB,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAAjjC,GAAAqJ,EAAAlG,KAAAigC,SAAAjgC,KAAAggC,UAAAnjC,GAAAqJ,EAAAlG,KAAAggC,UAAAnjC,GAAAmJ,EAAA62B,OAEAjuB,GAAAV,cAAA9V,UAAAypC,QAAA,SAAAhlC,EAAAyT,EAAAL,GAEA,GAAAsC,GAAAvS,KAAAigC,QAAAhwB,CACAjQ,MAAA+/B,WAAAloC,KAAA,GAAA+W,IAAA6U,SACA7U,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAAjjC,GAAAmJ,GAAAhG,KAAAggC,UAAA1vB,GAAAtK,EAAAhG,KAAAggC,UAAAnjC,GAAAmJ,GAAAuM,GACA3D,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAAjjC,GAAAqJ,GAAAlG,KAAAggC,UAAA1vB,GAAApK,EAAAlG,KAAAggC,UAAAnjC,GAAAqJ,GAAAqM,MAEA3D,GAAAV,cAAA9V,UAAAkpC,QAAA,SAAAzkC,EAAAyT,GAUA,OADAixB,GAPAnlC,EAAAwD,KAAAmiC,MAAA/hC,KAAAkgC,OACAlgC,KAAAggC,UAAA1vB,GAAAtK,EAAAhG,KAAAggC,UAAAnjC,GAAAmJ,EAAAhG,KAAAggC,UAAA1vB,GAAApK,EAAAlG,KAAAggC,UAAAnjC,GAAAqJ,GAEA86B,EAAAphC,KAAAa,IAAAmO,GAAAuU,WAAAvU,GAAAV,cAAAyV,MAAA3jB,KAAAsgC,cAAA1gC,KAAAY,IAAApE,KAAA,GAEA4J,EAAAhG,KAAAggC,UAAA1vB,GAAAtK,EACAE,EAAAlG,KAAAggC,UAAA1vB,GAAApK,EAEA7M,EAAA,EAAmBA,EAAA2nC,IAAW3nC,EAE9B2G,KAAA+/B,WAAAloC,KAAA,GAAA+W,IAAA6U,SACA7U,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAAjjC,GAAAmJ,IAAAhG,KAAAigC,SACArxB,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAAjjC,GAAAqJ,IAAAlG,KAAAigC,WACAsB,EAAAv7B,EACAA,IAAAhG,KAAAogC,MAAApgC,KAAAmgC,MAAAj6B,EACAA,EAAAq7B,EAAAvhC,KAAAmgC,MAAAj6B,EAAAlG,KAAAogC,KAEApgC,MAAA+/B,WAAAloC,KAAA,GAAA+W,IAAA6U,SACA7U,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAAjjC,GAAAmJ,EAAAhG,KAAAggC,UAAAnjC,GAAAmJ,EAAAhG,KAAAigC,SACArxB,GAAAV,cAAAyV,MAAA3jB,KAAA8/B,UAAAjjC,GAAAqJ,EAAAlG,KAAAggC,UAAAnjC,GAAAqJ,EAAAlG,KAAAigC,YAEArxB,GAAAhU,MAAA,SAAA8D,GAEA,IAEA,SAAA9D,OAAA8D,GAEA,MAAA5D,GAEAknC,MAAAlnC,EAAA4D,WAKAkQ,GAAAqzB,MACArzB,GAAAqzB,GAAAC,cAAA,SAAAjJ,EAAAkJ,GAGA,MADAA,OAAA,GACAvzB,GAAAxI,QAAAspB,KAAAuJ,IAAAkJ,MAEAvzB,GAAAqzB,GAAAG,eAAA,SAAAnJ,EAAAkJ,GAEAA,MAAA,EAEA,QADAE,GAAA,EACAhpC,EAAA,EAAmBA,EAAA4/B,EAAA3/B,OAAiBD,IAEpCgpC,GAAAzzB,GAAAxI,QAAAspB,KAAAuJ,EAAA5/B,GAEA,OAAAgpC,IAAAF,MAEAvzB,GAAAqzB,GAAAK,aAAA,SAAA9/B,EAAA2/B,GAEA,MAAAvzB,IAAAqzB,GAAAM,eAAA//B,GAAA2/B,IAEAvzB,GAAAqzB,GAAAM,cAAA,SAAA57B,EAAAw7B,GAEAA,MAAA,EACA,IAAAK,GAAA5zB,GAAAxI,QAAAs0B,UAAA/zB,EAKA,OAJA67B,GAAAte,MAAAie,EACAK,EAAAne,QAAA8d,EACAK,EAAApe,OAAA+d,EACAK,EAAAre,KAAAge,EACAK,GAIA5zB,GAAAqzB,GAAAQ,MAAA,SAAAC,EAAA1E,GAEA,KAAA0E,YAAAhjC,QAAA,QACA,IAAAijC,GAAAD,EAAA,YAAAhjC,OACAgjC,EAAA9zB,GAAAqzB,GAAAW,MAAAF,EACA,oBAAA1E,IAAA,OAAAA,EAGA,MADApvB,IAAAhU,MAAA,qCACA8nC,CAEA,QAAAA,EAAAppC,QAAA,GAAAopC,EAAAppC,QAAA,IAAAopC,EAAA,GAAAppC,QAAA0kC,EAAA,QAAA0E,EACAC,KAAAD,MAIA,QAFA5J,GAAAG,EAAAz8B,EAAA2U,EAAA1T,EAAAZ,EAAAxD,EADAwpC,EAAAH,EAAAppC,OAEAwpC,KACAxyB,EAAA,EAAmBA,EAAAuyB,EAAcvyB,IAIjC,GAFA2oB,EAAAyJ,EAAApyB,GACAwoB,EAAAG,EAAA3/B,OACA,IAAAw/B,EACA,GAAAA,EAAA,EAEAt8B,EAAAy8B,EACA6J,EAAAjrC,KAAA2E,OAHA,CAWA,IALAA,EAAAy8B,EACA9nB,EAAA6sB,IAEAvgC,EAAAw7B,EAAA,GACAp8B,EAAA,EACAxD,EAAA,EAAiBA,EAAAy/B,EAASz/B,KAE1B4/B,EAAA5/B,GAAA2M,EAAAvI,EAAAuI,IAAAizB,EAAA5/B,GAAA2M,EAAAvI,EAAAuI,IACAizB,EAAA5/B,GAAA6M,EAAAzI,EAAAyI,IAAA+yB,EAAA5/B,GAAA6M,EAAAzI,EAAAyI,IAAAiL,IAEA3U,EAAAK,GAAAo8B,EAAA5/B,GACAoE,EAAAw7B,EAAA5/B,GACAwD,IAEAY,GAAAw7B,EAAAp8B,EAAA,IACAo8B,EAAA,GAAAjzB,EAAAvI,EAAAuI,IAAAizB,EAAA,GAAAjzB,EAAAvI,EAAAuI,IACAizB,EAAA,GAAA/yB,EAAAzI,EAAAyI,IAAA+yB,EAAA,GAAA/yB,EAAAzI,EAAAyI,IAAAiL,GACAtU,IACAA,EAAAi8B,GACAt8B,EAAA5C,OAAAiD,EAAAi8B,EAAAj8B,GACAL,EAAAlD,QAAAwpC,EAAAjrC,KAAA2E,GAOA,OALAmmC,GAAAG,EAAAxpC,OAAAwpC,IAAA,GACAH,GAAA,IAAAG,EAAAxpC,OACAqpC,GAAA,IAAAG,EAAAxpC,SAAAwpC,QADAA,KAIAA,GAKAl0B,GAAAqzB,GAAAW,MAAA,SAAAF,GAEA,KAAAA,YAAAhjC,QAAA,QACA,QAAAgjC,EAAAppC,OAAA,QACA,OAAAopC,EAAAppC,QAAA,IAAAopC,EAAA,GAAAppC,OAAA,UACA,IAAAqpC,GAAAD,EAAA,YAAAhjC,MACAijC,KAAAD,MACA,IACAK,GAAA1pC,EAAAwD,EAAAL,EADAs8B,EAAA4J,EAAAppC,OAEAwpC,EAAA,GAAApjC,OAAAo5B,EACA,KAAAz/B,EAAA,EAAeA,EAAAy/B,EAASz/B,IACxB,CAGA,IAFA0pC,EAAAL,EAAArpC,GAAAC,OACAkD,EAAA,GAAAkD,OAAAqjC,GACAlmC,EAAA,EAAiBA,EAAAkmC,EAAUlmC,IAE3BL,EAAAK,IACAmJ,EAAA08B,EAAArpC,GAAAwD,GAAAmJ,EACAE,EAAAw8B,EAAArpC,GAAAwD,GAAAqJ,EAGA48B,GAAAzpC,GAAAmD,EAGA,MADAmmC,KAAAG,IAAA,IACAA,GAKAl0B,GAAAqzB,GAAAe,QAAA,SAAAN,EAAA/Z,GAEA,KAAA+Z,YAAAhjC,QAAA,QACA,oBAAAipB,IAAA,OAAAA,EAGA,MADA/Z,IAAAhU,MAAA,2CACAgU,GAAAqzB,GAAAW,MAAAF,EAEA,QAAAA,EAAAppC,QAAA,GAAAopC,EAAAppC,QAAA,IAAAopC,EAAA,GAAAppC,QAAAqvB,EAAA,EAEA,MAAA/Z,IAAAqzB,GAAAW,MAAAF,EAEAA,GAAA,YAAAhjC,SAAAgjC,MACA,IAAArpC,GAAAwD,EAAAo8B,EAAA3oB,EAAAsuB,EAAAmE,EAAA7F,EAAAC,EAAA8F,EAAA9xB,EAAA+xB,EAAAC,EACAC,EAAAC,EAAAnpC,EAAAopC,EAAAC,EACAzK,EAAA4J,EAAAppC,OACAkqC,EAAA7a,IACAma,IACA,KAAAzpC,EAAA,EAAeA,EAAAy/B,EAASz/B,IAIxB,GAFA4/B,EAAAyJ,EAAArpC,GACA0pC,EAAA9J,EAAA3/B,OACA,GAAAypC,EAAA,CACA,IAAAzyB,EAAA,EAAiBA,EAAA,IAAaA,IAC9B,CAiBA,IAhBAsuB,KACAmE,EAAA9J,EAAA3/B,OAGA2/B,EAAA8J,EAAA,GAAA/8B,GAAAizB,EAAA,GAAAjzB,GAAAizB,EAAA8J,EAAA,GAAA78B,GAAA+yB,EAAA,GAAA/yB,GAEAi9B,EAAA,EACAlK,EAAAphC,MAEAmO,EAAAizB,EAAA,GAAAjzB,EACAE,EAAA+yB,EAAA,GAAA/yB,IAEA68B,EAAA9J,EAAA3/B,QAEA6pC,EAAA,EACAD,KACArmC,EAAA,EAAmBA,EAAAkmC,EAAA,EAAclmC,IAEjCqgC,EAAAjE,EAAAp8B,GACAomC,EAAAhK,EAAAp8B,EAAA,GACAsgC,EAAAlE,EAAAp8B,EAAA,GACAymC,EAAApG,EAAAl3B,EACAu9B,EAAArG,EAAAh3B,EACAk9B,EAAAjG,EAAAn3B,EAAAs9B,EACAD,EAAAlG,EAAAj3B,EAAAq9B,EACA,IAAAH,GAAA,IAAAC,IAEAnpC,IAAA+oC,EAAAj9B,EAAAs9B,GAAAF,GAAAH,EAAA/8B,EAAAq9B,GAAAF,IAAAD,IAAAC,KACAnpC,EAAA,GAEAopC,EAAAnG,EAAAn3B,EACAu9B,EAAApG,EAAAj3B,GAEAhM,EAAA,IAEAopC,GAAAF,EAAAlpC,EACAqpC,GAAAF,EAAAnpC,IAGAkpC,EAAAH,EAAAj9B,EAAAs9B,EACAD,EAAAJ,EAAA/8B,EAAAq9B,EACApyB,EAAAiyB,IAAAC,IACAlyB,GAAAqyB,IAEAN,EAAArmC,EAAA,KACAA,IASA,KALA+hC,EAAA/mC,MAEAmO,EAAAizB,EAAA,GAAAjzB,EACAE,EAAA+yB,EAAA,GAAA/yB,IAEArJ,EAAA,EAAmBA,EAAAkmC,EAAA,EAAclmC,IACjCqmC,EAAArmC,IAAA+hC,EAAA/mC,MAEAmO,EAAAizB,EAAAp8B,GAAAmJ,EACAE,EAAA+yB,EAAAp8B,GAAAqJ,GAUA,IARA04B,EAAA/mC,MAEAmO,EAAAizB,EAAA8J,EAAA,GAAA/8B,EACAE,EAAA+yB,EAAA8J,EAAA,GAAA78B,IAGAi9B,GAAAlK,EAAAj9B,OAEAknC,EAAA5pC,OAAA,KAEA2/B,GAAA2F,EAEAmE,EAAAnE,EAAAtlC,OAEAslC,EAAAmE,EAAA,GAAA/8B,GAAA44B,EAAA,GAAA54B,GAAA44B,EAAAmE,EAAA,GAAA78B,GAAA04B,EAAA,GAAA14B,GAEA04B,EAAA5iC,MAEA4iC,EAAAtlC,OAAA,GACAwpC,EAAAjrC,KAAA+mC,GAMA,MAJA8D,GAAA,YAAAhjC,SAAAojC,IAAA,IACA,wBAAAA,QAGAA,GAEAl0B,GAAAqzB,GAAAwB,gBAAA,SAAAjhC,EAAAgqB,EAAA2V,GAEA,iCACA,IAEAngC,GAAAC,EAFA6+B,EAAAlhC,KAAAkhC,KACA4C,EAAA,EACAtiC,EAAA,EACAC,EAAA,EACAK,EAAA,EACAC,EAAA,EACA9E,EAAA2F,EAAAlJ,MACA,IAAAuD,EAAA,UAMA,KALA2vB,IAEAhqB,EAAA3F,GAAA2F,EAAA,GACA3F,OAEAA,GAEAmF,EAAAQ,EAAA3F,GACAuE,EAAAY,EAAAgE,EACA3E,EAAAW,EAAAkE,EACAjE,EAAAO,EAAA3F,EAAA,GACA6E,EAAAO,EAAA+D,EACArE,EAAAM,EAAAiE,EACAw9B,GAAA5C,GAAA1/B,EAAAM,IAAAN,EAAAM,IAAAL,EAAAM,IAAAN,EAAAM,GAGA,OADA6qB,IAAAhqB,EAAAxG,MACA0nC,EAAAvB,GAEAvzB,GAAAqzB,GAAA0B,iBAAA,SAAAh9B,EAAA6lB,EAAA2V,GAEAA,MAAA,EAEA,QADAuB,GAAA,EACArqC,EAAA,EAAmBA,EAAAsN,EAAArN,OAAkBD,IAErCqqC,GAAA90B,GAAAqzB,GAAAwB,gBAAA98B,EAAAtN,GAAAmzB,EAAA2V,EAEA,OAAAuB,IAEA90B,GAAAqzB,GAAA2B,cAAA,SAAAphC,EAAA2/B,GAEA,GAAA9oC,GAAAoE,CAGA,KAFA0kC,MAAA,GACA9oC,EAAAmJ,EAAAlJ,OACAD,KAEAoE,EAAA+E,EAAAnJ,GACAoE,EAAAuI,EAAAvI,EAAAuI,EAAAm8B,EACA1kC,EAAAyI,EAAAzI,EAAAyI,EAAAi8B,GAGAvzB,GAAAqzB,GAAA4B,eAAA,SAAAl9B,EAAAw7B,GAEA,GAAA9oC,GAAAwD,EAAAY,CAGA,KAFA0kC,MAAA,GACA9oC,EAAAsN,EAAArN,OACAD,KAGA,IADAwD,EAAA8J,EAAAtN,GAAAC,OACAuD,KAEAY,EAAAkJ,EAAAtN,GAAAwD,GACAY,EAAAuI,EAAAvI,EAAAuI,EAAAm8B,EACA1kC,EAAAyI,EAAAzI,EAAAyI,EAAAi8B,GAIAvzB,GAAAqzB,GAAA6B,YAAA,SAAAthC,EAAA2/B,GAEA,GAAA9oC,GAAAoE,EAAAy6B,EAAAt4B,KAAAs4B,KAGA,KAFAiK,MAAA,GACA9oC,EAAAmJ,EAAAlJ,OACAD,KAEAoE,EAAA+E,EAAAnJ,GACAoE,EAAAuI,EAAAkyB,EAAAz6B,EAAAuI,EAAAm8B,GACA1kC,EAAAyI,EAAAgyB,EAAAz6B,EAAAyI,EAAAi8B,IAGAvzB,GAAAqzB,GAAA8B,aAAA,SAAAp9B,EAAAw7B,GAEA,GAAA9oC,GAAAwD,EAAAY,EAAAy6B,EAAAt4B,KAAAs4B,KAGA,KAFAiK,MAAA,GACA9oC,EAAAsN,EAAArN,OACAD,KAGA,IADAwD,EAAA8J,EAAAtN,GAAAC,OACAuD,KAEAY,EAAAkJ,EAAAtN,GAAAwD,GACAY,EAAAuI,EAAAkyB,EAAAz6B,EAAAuI,EAAAm8B,GACA1kC,EAAAyI,EAAAgyB,EAAAz6B,EAAAyI,EAAAi8B,IAIAvzB,GAAAo1B,WAAA,WAEA,UAEAp1B,GAAAq1B,UAAA,WAEAjkC,KAAAyhC,MAAA,KACAzhC,KAAA8H,MAAA,MAEA8G,GAAAqzB,GAAAiC,6BAAA,SAAAjF,EAAAkF,GAEA,GAAAC,GAAA,GAAAx1B,IAAAq1B,SACAG,GAAA3C,MAAAxC,EAAAt3B,SACA,IAAA08B,GAAApF,EAAAl3B,SACA6a,EAAAyhB,EAAA/qC,MACA8qC,GAAAt8B,MAAA,GAAApI,OAAAkjB,EACA,IAAAlb,GAAAyH,EAAA9V,EAAAwD,EAAAynC,EAAAla,CACA,KAAA/wB,EAAA,EAAeA,EAAAupB,EAAUvpB,IAKzB,IAHAqO,EAAA28B,EAAAhrC,GACA+qC,EAAAt8B,MAAAzO,GAAAqO,EAAAC,UAEA9K,EAAA,EAAAynC,EAAA58B,EAAAK,SAAAqiB,EAAAka,EAAAhrC,OAAiEuD,EAAAutB,EAAUvtB,IAE3EsS,EAAAm1B,EAAAznC,GACA+R,GAAAqzB,GAAAiC,6BAAA/0B,EAAAg1B,EAGAA,GAAAtsC,KAAAusC,IAEAx1B,GAAAqzB,GAAAsC,kBAAA,SAAAJ,GAEA,GAAA/nC,GAAA/C,EAAAqqB,EAAAd,EACAjc,EAAA,GAAAiI,IAAAsS,KACA,KAAA9kB,EAAA,EAAAsnB,EAAAygB,EAAA7qC,OAAyC8C,EAAAsnB,EAAUtnB,IAGnD,IADAuK,EAAA9O,KAAAssC,EAAA/nC,GAAAqlC,OACApoC,EAAA,EAAAupB,EAAAuhB,EAAA/nC,GAAA0L,MAAAxO,OAAoDD,EAAAupB,EAAUvpB,IAE9DsN,EAAA9O,KAAAssC,EAAA/nC,GAAA0L,MAAAzO,GAGA,OAAAsN,IAEAiI,GAAAqzB,GAAAuC,qBAAA,SAAA1V,GAEA,GACApnB,GAAArO,EAAAgrC,EAAAzhB,EADAuhB,EAAA,GAAAv1B,IAAAo1B,UAEA,KAAA3qC,EAAA,EAAAgrC,EAAAvV,EAAA/mB,SAAA6a,EAAAyhB,EAAA/qC,OAAiED,EAAAupB,EAAUvpB,IAE3EqO,EAAA28B,EAAAhrC,GACAuV,GAAAqzB,GAAAiC,6BAAAx8B,EAAAy8B,EAEA,OAAAA,QNq9CM,SAAUvoC,EAAQyB,EAASxG,GOpsQjC,GAAAyI,GAAAzI,EAAA,GAMA4tC,IAOAA,GAAAC,OAAA,WACA,GAAAC,GAAA,GAAArlC,GAAAE,WAAA,EAUA,OATAmlC,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GAUAF,EAAAG,SAAA,SAAAD,EAAAvoC,GAUA,MATAuoC,GAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,IACAuoC,GASAF,EAAAjpB,MAAA,SAAApf,GACA,GAAAuoC,GAAA,GAAArlC,GAAAE,WAAA,EAUA,OATAmlC,GAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,GAUAF,EAAAI,KAAA,SAAAF,EAAAvoC,GAUA,MATAuoC,GAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,GAiBAF,EAAAK,WAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAAZ,GAAA,GAAArlC,GAAAE,WAAA,EAUA,OATAmlC,GAAA,GAAAI,EACAJ,EAAA,GAAAK,EACAL,EAAA,GAAAM,EACAN,EAAA,GAAAO,EACAP,EAAA,GAAAQ,EACAR,EAAA,GAAAS,EACAT,EAAA,GAAAU,EACAV,EAAA,GAAAW,EACAX,EAAA,GAAAY,EACAZ,GAkBAF,EAAA9rC,IAAA,SAAAgsC,EAAAI,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAUA,MATAZ,GAAA,GAAAI,EACAJ,EAAA,GAAAK,EACAL,EAAA,GAAAM,EACAN,EAAA,GAAAO,EACAP,EAAA,GAAAQ,EACAR,EAAA,GAAAS,EACAT,EAAA,GAAAU,EACAV,EAAA,GAAAW,EACAX,EAAA,GAAAY,EACAZ,GASAF,EAAAe,SAAA,SAAAb,GAUA,MATAA,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GAUAF,EAAAgB,UAAA,SAAAd,EAAAvoC,GAEA,GAAAuoC,IAAAvoC,EAAA,CACA,GAAAspC,GAAAtpC,EAAA,GAAAupC,EAAAvpC,EAAA,GAAAwpC,EAAAxpC,EAAA,EACAuoC,GAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAe,EACAf,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAgB,EACAhB,EAAA,GAAAiB,MAEAjB,GAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,EAGA,OAAAuoC,IAUAF,EAAAoB,OAAA,SAAAlB,EAAAvoC,GACA,GAAA0pC,GAAA1pC,EAAA,GAAAspC,EAAAtpC,EAAA,GAAAupC,EAAAvpC,EAAA,GACA2pC,EAAA3pC,EAAA,GAAA4pC,EAAA5pC,EAAA,GAAAwpC,EAAAxpC,EAAA,GACA6pC,EAAA7pC,EAAA,GAAA8pC,EAAA9pC,EAAA,GAAA+pC,EAAA/pC,EAAA,GAEAgqC,EAAAD,EAAAH,EAAAJ,EAAAM,EACAG,GAAAF,EAAAJ,EAAAH,EAAAK,EACAK,EAAAJ,EAAAH,EAAAC,EAAAC,EAGAM,EAAAT,EAAAM,EAAAV,EAAAW,EAAAV,EAAAW,CAEA,OAAAC,IAGAA,EAAA,EAAAA,EAEA5B,EAAA,GAAAyB,EAAAG,EACA5B,EAAA,KAAAwB,EAAAT,EAAAC,EAAAO,GAAAK,EACA5B,EAAA,IAAAiB,EAAAF,EAAAC,EAAAK,GAAAO,EACA5B,EAAA,GAAA0B,EAAAE,EACA5B,EAAA,IAAAwB,EAAAL,EAAAH,EAAAM,GAAAM,EACA5B,EAAA,KAAAiB,EAAAE,EAAAH,EAAAI,GAAAQ,EACA5B,EAAA,GAAA2B,EAAAC,EACA5B,EAAA,KAAAuB,EAAAJ,EAAAJ,EAAAO,GAAAM,EACA5B,EAAA,IAAAqB,EAAAF,EAAAJ,EAAAK,GAAAQ,EACA5B,GAbA,MAuBAF,EAAA+B,QAAA,SAAA7B,EAAAvoC,GACA,GAAA0pC,GAAA1pC,EAAA,GAAAspC,EAAAtpC,EAAA,GAAAupC,EAAAvpC,EAAA,GACA2pC,EAAA3pC,EAAA,GAAA4pC,EAAA5pC,EAAA,GAAAwpC,EAAAxpC,EAAA,GACA6pC,EAAA7pC,EAAA,GAAA8pC,EAAA9pC,EAAA,GAAA+pC,EAAA/pC,EAAA,EAWA,OATAuoC,GAAA,GAAAqB,EAAAG,EAAAP,EAAAM,EACAvB,EAAA,GAAAgB,EAAAO,EAAAR,EAAAS,EACAxB,EAAA,GAAAe,EAAAE,EAAAD,EAAAK,EACArB,EAAA,GAAAiB,EAAAK,EAAAF,EAAAI,EACAxB,EAAA,GAAAmB,EAAAK,EAAAR,EAAAM,EACAtB,EAAA,GAAAgB,EAAAI,EAAAD,EAAAF,EACAjB,EAAA,GAAAoB,EAAAG,EAAAF,EAAAC,EACAtB,EAAA,GAAAe,EAAAO,EAAAH,EAAAI,EACAvB,EAAA,GAAAmB,EAAAE,EAAAN,EAAAK,EACApB,GASAF,EAAAgC,YAAA,SAAArqC,GACA,GAAA0pC,GAAA1pC,EAAA,GAAAspC,EAAAtpC,EAAA,GAAAupC,EAAAvpC,EAAA,GACA2pC,EAAA3pC,EAAA,GAAA4pC,EAAA5pC,EAAA,GAAAwpC,EAAAxpC,EAAA,GACA6pC,EAAA7pC,EAAA,GAAA8pC,EAAA9pC,EAAA,GAAA+pC,EAAA/pC,EAAA,EAEA,OAAA0pC,IAAAK,EAAAH,EAAAJ,EAAAM,GAAAR,IAAAS,EAAAJ,EAAAH,EAAAK,GAAAN,GAAAO,EAAAH,EAAAC,EAAAC,IAWAxB,EAAArlB,SAAA,SAAAulB,EAAAvoC,EAAAC,GACA,GAAAypC,GAAA1pC,EAAA,GAAAspC,EAAAtpC,EAAA,GAAAupC,EAAAvpC,EAAA,GACA2pC,EAAA3pC,EAAA,GAAA4pC,EAAA5pC,EAAA,GAAAwpC,EAAAxpC,EAAA,GACA6pC,EAAA7pC,EAAA,GAAA8pC,EAAA9pC,EAAA,GAAA+pC,EAAA/pC,EAAA,GAEAsqC,EAAArqC,EAAA,GAAA+pC,EAAA/pC,EAAA,GAAAsqC,EAAAtqC,EAAA,GACAuqC,EAAAvqC,EAAA,GAAAgqC,EAAAhqC,EAAA,GAAAwqC,EAAAxqC,EAAA,GACAyqC,EAAAzqC,EAAA,GAAAiqC,EAAAjqC,EAAA,GAAA0qC,EAAA1qC,EAAA,EAaA,OAXAsoC,GAAA,GAAA+B,EAAAZ,EAAAM,EAAAL,EAAAY,EAAAV,EACAtB,EAAA,GAAA+B,EAAAhB,EAAAU,EAAAJ,EAAAW,EAAAT,EACAvB,EAAA,GAAA+B,EAAAf,EAAAS,EAAAR,EAAAe,EAAAR,EAEAxB,EAAA,GAAAiC,EAAAd,EAAAO,EAAAN,EAAAc,EAAAZ,EACAtB,EAAA,GAAAiC,EAAAlB,EAAAW,EAAAL,EAAAa,EAAAX,EACAvB,EAAA,GAAAiC,EAAAjB,EAAAU,EAAAT,EAAAiB,EAAAV,EAEAxB,EAAA,GAAAmC,EAAAhB,EAAAQ,EAAAP,EAAAgB,EAAAd,EACAtB,EAAA,GAAAmC,EAAApB,EAAAY,EAAAN,EAAAe,EAAAb,EACAvB,EAAA,GAAAmC,EAAAnB,EAAAW,EAAAV,EAAAmB,EAAAZ,EACAxB,GAOAF,EAAAuC,IAAAvC,EAAArlB,SAUAqlB,EAAAwC,UAAA,SAAAtC,EAAAvoC,EAAAgT,GACA,GAAA02B,GAAA1pC,EAAA,GAAAspC,EAAAtpC,EAAA,GAAAupC,EAAAvpC,EAAA,GACA2pC,EAAA3pC,EAAA,GAAA4pC,EAAA5pC,EAAA,GAAAwpC,EAAAxpC,EAAA,GACA6pC,EAAA7pC,EAAA,GAAA8pC,EAAA9pC,EAAA,GAAA+pC,EAAA/pC,EAAA,GACAmB,EAAA6R,EAAA,GAAAzO,EAAAyO,EAAA,EAaA,OAXAu1B,GAAA,GAAAmB,EACAnB,EAAA,GAAAe,EACAf,EAAA,GAAAgB,EAEAhB,EAAA,GAAAoB,EACApB,EAAA,GAAAqB,EACArB,EAAA,GAAAiB,EAEAjB,EAAA,GAAApnC,EAAAuoC,EAAAnlC,EAAAolC,EAAAE,EACAtB,EAAA,GAAApnC,EAAAmoC,EAAA/kC,EAAAqlC,EAAAE,EACAvB,EAAA,GAAApnC,EAAAooC,EAAAhlC,EAAAilC,EAAAO,EACAxB,GAWAF,EAAAyC,OAAA,SAAAvC,EAAAvoC,EAAA+qC,GACA,GAAArB,GAAA1pC,EAAA,GAAAspC,EAAAtpC,EAAA,GAAAupC,EAAAvpC,EAAA,GACA2pC,EAAA3pC,EAAA,GAAA4pC,EAAA5pC,EAAA,GAAAwpC,EAAAxpC,EAAA,GACA6pC,EAAA7pC,EAAA,GAAA8pC,EAAA9pC,EAAA,GAAA+pC,EAAA/pC,EAAA,GAEAyE,EAAAjB,KAAAshC,IAAAiG,GACAhsC,EAAAyE,KAAAuhC,IAAAgG,EAaA,OAXAxC,GAAA,GAAAxpC,EAAA2qC,EAAAjlC,EAAAklC,EACApB,EAAA,GAAAxpC,EAAAuqC,EAAA7kC,EAAAmlC,EACArB,EAAA,GAAAxpC,EAAAwqC,EAAA9kC,EAAA+kC,EAEAjB,EAAA,GAAAxpC,EAAA4qC,EAAAllC,EAAAilC,EACAnB,EAAA,GAAAxpC,EAAA6qC,EAAAnlC,EAAA6kC,EACAf,EAAA,GAAAxpC,EAAAyqC,EAAA/kC,EAAA8kC,EAEAhB,EAAA,GAAAsB,EACAtB,EAAA,GAAAuB,EACAvB,EAAA,GAAAwB,EACAxB,GAWAF,EAAAtC,MAAA,SAAAwC,EAAAvoC,EAAAgT,GACA,GAAA7R,GAAA6R,EAAA,GAAAzO,EAAAyO,EAAA,EAaA,OAXAu1B,GAAA,GAAApnC,EAAAnB,EAAA,GACAuoC,EAAA,GAAApnC,EAAAnB,EAAA,GACAuoC,EAAA,GAAApnC,EAAAnB,EAAA,GAEAuoC,EAAA,GAAAhkC,EAAAvE,EAAA,GACAuoC,EAAA,GAAAhkC,EAAAvE,EAAA,GACAuoC,EAAA,GAAAhkC,EAAAvE,EAAA,GAEAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,GAcAF,EAAA2C,gBAAA,SAAAzC,EAAAv1B,GAUA,MATAu1B,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAAv1B,EAAA,GACAu1B,EAAA,GAAAv1B,EAAA,GACAu1B,EAAA,KACAA,GAcAF,EAAA4C,aAAA,SAAA1C,EAAAwC,GACA,GAAAtmC,GAAAjB,KAAAshC,IAAAiG,GAAAhsC,EAAAyE,KAAAuhC,IAAAgG,EAaA,OAXAxC,GAAA,GAAAxpC,EACAwpC,EAAA,GAAA9jC,EACA8jC,EAAA,KAEAA,EAAA,IAAA9jC,EACA8jC,EAAA,GAAAxpC,EACAwpC,EAAA,KAEAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GAcAF,EAAA6C,YAAA,SAAA3C,EAAAv1B,GAYA,MAXAu1B,GAAA,GAAAv1B,EAAA,GACAu1B,EAAA,KACAA,EAAA,KAEAA,EAAA,KACAA,EAAA,GAAAv1B,EAAA,GACAu1B,EAAA,KAEAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GAUAF,EAAA8C,UAAA,SAAA5C,EAAAvoC,GAYA,MAXAuoC,GAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,KAEAA,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,KAEAA,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,KACAA,GAWAF,EAAA+C,SAAA,SAAA7C,EAAApyB,GACA,GAAAhV,GAAAgV,EAAA,GAAA5R,EAAA4R,EAAA,GAAAiD,EAAAjD,EAAA,GAAAtP,EAAAsP,EAAA,GACAk1B,EAAAlqC,IACAmqC,EAAA/mC,IACAgnC,EAAAnyB,IAEAoyB,EAAArqC,EAAAkqC,EACAI,EAAAlnC,EAAA8mC,EACAK,EAAAnnC,EAAA+mC,EACAK,EAAAvyB,EAAAiyB,EACAO,EAAAxyB,EAAAkyB,EACAO,EAAAzyB,EAAAmyB,EACAO,EAAAjlC,EAAAwkC,EACAU,EAAAllC,EAAAykC,EACAU,EAAAnlC,EAAA0kC,CAcA,OAZAhD,GAAA,KAAAmD,EAAAG,EACAtD,EAAA,GAAAkD,EAAAO,EACAzD,EAAA,GAAAoD,EAAAI,EAEAxD,EAAA,GAAAkD,EAAAO,EACAzD,EAAA,KAAAiD,EAAAK,EACAtD,EAAA,GAAAqD,EAAAE,EAEAvD,EAAA,GAAAoD,EAAAI,EACAxD,EAAA,GAAAqD,EAAAE,EACAvD,EAAA,KAAAiD,EAAAE,EAEAnD,GAWAF,EAAA4D,eAAA,SAAA1D,EAAAvoC,GACA,GAAA0pC,GAAA1pC,EAAA,GAAAspC,EAAAtpC,EAAA,GAAAupC,EAAAvpC,EAAA,GAAAksC,EAAAlsC,EAAA,GACA2pC,EAAA3pC,EAAA,GAAA4pC,EAAA5pC,EAAA,GAAAwpC,EAAAxpC,EAAA,GAAAmsC,EAAAnsC,EAAA,GACA6pC,EAAA7pC,EAAA,GAAA8pC,EAAA9pC,EAAA,GAAA+pC,EAAA/pC,EAAA,IAAAosC,EAAApsC,EAAA,IACAqsC,EAAArsC,EAAA,IAAAssC,EAAAtsC,EAAA,IAAAusC,EAAAvsC,EAAA,IAAAwsC,EAAAxsC,EAAA,IAEAsqC,EAAAZ,EAAAE,EAAAN,EAAAK,EACAK,EAAAN,EAAAF,EAAAD,EAAAI,EACAY,EAAAb,EAAAyC,EAAAD,EAAAvC,EACA8C,EAAAnD,EAAAE,EAAAD,EAAAK,EACA8C,EAAApD,EAAA6C,EAAAD,EAAAtC,EACA+C,EAAApD,EAAA4C,EAAAD,EAAA1C,EACAoD,EAAA/C,EAAAyC,EAAAxC,EAAAuC,EACAQ,EAAAhD,EAAA0C,EAAAxC,EAAAsC,EACAS,EAAAjD,EAAA2C,EAAAJ,EAAAC,EACAU,EAAAjD,EAAAyC,EAAAxC,EAAAuC,EACA9B,EAAAV,EAAA0C,EAAAJ,EAAAE,EACArC,EAAAF,EAAAyC,EAAAJ,EAAAG,EAGApC,EAAAG,EAAAL,EAAAD,EAAAQ,EAAAD,EAAAwC,EAAAN,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,CAEA,OAAAzC,IAGAA,EAAA,EAAAA,EAEA5B,EAAA,IAAAqB,EAAAK,EAAAT,EAAAgB,EAAA2B,EAAAY,GAAA5C,EACA5B,EAAA,IAAAiB,EAAAsD,EAAAnD,EAAAM,EAAAkC,EAAAU,GAAA1C,EACA5B,EAAA,IAAAoB,EAAAa,EAAAZ,EAAAkD,EAAAX,EAAAS,GAAAzC,EAEA5B,EAAA,IAAAgB,EAAAiB,EAAAlB,EAAAW,EAAAiC,EAAAa,GAAA5C,EACA5B,EAAA,IAAAmB,EAAAO,EAAAV,EAAAuD,EAAAZ,EAAAW,GAAA1C,EACA5B,EAAA,IAAAe,EAAAwD,EAAApD,EAAAc,EAAA0B,EAAAU,GAAAzC,EAEA5B,EAAA,IAAA+D,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,GAAAtC,EACA5B,EAAA,IAAAgE,EAAAhC,EAAA8B,EAAAM,EAAAH,EAAAxC,GAAAG,EACA5B,EAAA,IAAA8D,EAAAK,EAAAJ,EAAA/B,EAAAiC,EAAAlC,GAAAH,EAEA5B,GAhBA,MAyBAF,EAAA2E,IAAA,SAAAhtC,GACA,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QACAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QACAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QASAqoC,EAAA4E,KAAA,SAAAjtC,GACA,MAAAwD,MAAAkhC,KAAAlhC,KAAAkX,IAAA1a,EAAA,MAAAwD,KAAAkX,IAAA1a,EAAA,MAAAwD,KAAAkX,IAAA1a,EAAA,MAAAwD,KAAAkX,IAAA1a,EAAA,MAAAwD,KAAAkX,IAAA1a,EAAA,MAAAwD,KAAAkX,IAAA1a,EAAA,MAAAwD,KAAAkX,IAAA1a,EAAA,MAAAwD,KAAAkX,IAAA1a,EAAA,MAAAwD,KAAAkX,IAAA1a,EAAA,QAWAqoC,EAAA1oB,IAAA,SAAA4oB,EAAAvoC,EAAAC,GAUA,MATAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,GAWAF,EAAA3oB,SAAA,SAAA6oB,EAAAvoC,EAAAC,GAUA,MATAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,GAOAF,EAAA6E,IAAA7E,EAAA3oB,SAUA2oB,EAAA8E,eAAA,SAAA5E,EAAAvoC,EAAAC,GAUA,MATAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,GAYAF,EAAA+E,qBAAA,SAAA7E,EAAAvoC,EAAAC,EAAA8lC,GAUA,MATAwC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,GAUAF,EAAAgF,YAAA,SAAArtC,EAAAC,GACA,MAAAD,GAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IACAD,EAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IACAD,EAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IAUAooC,EAAAlkC,OAAA,SAAAnE,EAAAC,GACA,GAAAqtC,GAAAttC,EAAA,GAAAs9B,EAAAt9B,EAAA,GAAAu9B,EAAAv9B,EAAA,GAAAutC,EAAAvtC,EAAA,GAAAwtC,EAAAxtC,EAAA,GAAAytC,EAAAztC,EAAA,GAAA0tC,EAAA1tC,EAAA,GAAA2tC,EAAA3tC,EAAA,GAAA4tC,EAAA5tC,EAAA,GACA6tC,EAAA5tC,EAAA,GAAAm8B,EAAAn8B,EAAA,GAAAo8B,EAAAp8B,EAAA,GAAA6tC,EAAA7tC,EAAA,GAAA8tC,EAAA9tC,EAAA,GAAA+tC,EAAA/tC,EAAA,GAAAguC,EAAAjuC,EAAA,GAAAkuC,EAAAjuC,EAAA,GAAAkuC,EAAAluC,EAAA,EACA,OAAAuD,MAAAY,IAAAkpC,EAAAO,IAAA3qC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAkpC,GAAA9pC,KAAAY,IAAAypC,KACArqC,KAAAY,IAAAk5B,EAAAlB,IAAAl5B,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAk5B,GAAA95B,KAAAY,IAAAg4B,KACA54B,KAAAY,IAAAm5B,EAAAlB,IAAAn5B,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAm5B,GAAA/5B,KAAAY,IAAAi4B,KACA74B,KAAAY,IAAAmpC,EAAAO,IAAA5qC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAmpC,GAAA/pC,KAAAY,IAAA0pC,KACAtqC,KAAAY,IAAAopC,EAAAO,IAAA7qC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAopC,GAAAhqC,KAAAY,IAAA2pC,KACAvqC,KAAAY,IAAAqpC,EAAAO,IAAA9qC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAqpC,GAAAjqC,KAAAY,IAAA4pC,KACAxqC,KAAAY,IAAAspC,EAAAO,IAAA/qC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAspC,GAAAlqC,KAAAY,IAAA6pC,KACAzqC,KAAAY,IAAAupC,EAAAO,IAAAhrC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAupC,GAAAnqC,KAAAY,IAAA8pC,KACA1qC,KAAAY,IAAAwpC,EAAAO,IAAAjrC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAwpC,GAAApqC,KAAAY,IAAA+pC,KAIA3uC,EAAAyB,QAAAonC,GP+tQM,SAAU7oC,EAAQyB,EAASxG,GQp7RjC,GAAAyI,GAAAzI,EAAA,GAMA2zC,IAOAA,GAAA9F,OAAA,WACA,GAAAC,GAAA,GAAArlC,GAAAE,WAAA,EAIA,OAHAmlC,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GASA6F,EAAAhvB,MAAA,SAAApf,GACA,GAAAuoC,GAAA,GAAArlC,GAAAE,WAAA,EAIA,OAHAmlC,GAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,GAWA6F,EAAA1F,WAAA,SAAAvnC,EAAAoD,EAAA6U,GACA,GAAAmvB,GAAA,GAAArlC,GAAAE,WAAA,EAIA,OAHAmlC,GAAA,GAAApnC,EACAonC,EAAA,GAAAhkC,EACAgkC,EAAA,GAAAnvB,EACAmvB,GAUA6F,EAAA3F,KAAA,SAAAF,EAAAvoC,GAIA,MAHAuoC,GAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,GAYA6F,EAAA7xC,IAAA,SAAAgsC,EAAApnC,EAAAoD,EAAA6U,GAIA,MAHAmvB,GAAA,GAAApnC,EACAonC,EAAA,GAAAhkC,EACAgkC,EAAA,GAAAnvB,EACAmvB,GAWA6F,EAAAzuB,IAAA,SAAA4oB,EAAAvoC,EAAAC,GAIA,MAHAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,GAWA6F,EAAA1uB,SAAA,SAAA6oB,EAAAvoC,EAAAC,GAIA,MAHAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,GAOA6F,EAAAlB,IAAAkB,EAAA1uB,SAUA0uB,EAAAprB,SAAA,SAAAulB,EAAAvoC,EAAAC,GAIA,MAHAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,GAOA6F,EAAAxD,IAAAwD,EAAAprB,SAUAorB,EAAA7vB,OAAA,SAAAgqB,EAAAvoC,EAAAC,GAIA,MAHAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,GAOA6F,EAAAC,IAAAD,EAAA7vB,OASA6vB,EAAAnnB,KAAA,SAAAshB,EAAAvoC,GAIA,MAHAuoC,GAAA,GAAA/kC,KAAAyjB,KAAAjnB,EAAA,IACAuoC,EAAA,GAAA/kC,KAAAyjB,KAAAjnB,EAAA,IACAuoC,EAAA,GAAA/kC,KAAAyjB,KAAAjnB,EAAA,IACAuoC,GAUA6F,EAAAn7B,MAAA,SAAAs1B,EAAAvoC,GAIA,MAHAuoC,GAAA,GAAA/kC,KAAAyP,MAAAjT,EAAA,IACAuoC,EAAA,GAAA/kC,KAAAyP,MAAAjT,EAAA,IACAuoC,EAAA,GAAA/kC,KAAAyP,MAAAjT,EAAA,IACAuoC,GAWA6F,EAAA79B,IAAA,SAAAg4B,EAAAvoC,EAAAC,GAIA,MAHAsoC,GAAA,GAAA/kC,KAAA+M,IAAAvQ,EAAA,GAAAC,EAAA,IACAsoC,EAAA,GAAA/kC,KAAA+M,IAAAvQ,EAAA,GAAAC,EAAA,IACAsoC,EAAA,GAAA/kC,KAAA+M,IAAAvQ,EAAA,GAAAC,EAAA,IACAsoC,GAWA6F,EAAA/pC,IAAA,SAAAkkC,EAAAvoC,EAAAC,GAIA,MAHAsoC,GAAA,GAAA/kC,KAAAa,IAAArE,EAAA,GAAAC,EAAA,IACAsoC,EAAA,GAAA/kC,KAAAa,IAAArE,EAAA,GAAAC,EAAA,IACAsoC,EAAA,GAAA/kC,KAAAa,IAAArE,EAAA,GAAAC,EAAA,IACAsoC,GAUA6F,EAAAtS,MAAA,SAAAyM,EAAAvoC,GAIA,MAHAuoC,GAAA,GAAA/kC,KAAAs4B,MAAA97B,EAAA,IACAuoC,EAAA,GAAA/kC,KAAAs4B,MAAA97B,EAAA,IACAuoC,EAAA,GAAA/kC,KAAAs4B,MAAA97B,EAAA,IACAuoC,GAWA6F,EAAArI,MAAA,SAAAwC,EAAAvoC,EAAAC,GAIA,MAHAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,GAYA6F,EAAAE,YAAA,SAAA/F,EAAAvoC,EAAAC,EAAA8lC,GAIA,MAHAwC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,GAUA6F,EAAA9M,SAAA,SAAAthC,EAAAC,GACA,GAAAkB,GAAAlB,EAAA,GAAAD,EAAA,GACAuE,EAAAtE,EAAA,GAAAD,EAAA,GACAoZ,EAAAnZ,EAAA,GAAAD,EAAA,EACA,OAAAwD,MAAAkhC,KAAAvjC,IAAAoD,IAAA6U,MAOAg1B,EAAAG,KAAAH,EAAA9M,SASA8M,EAAAI,gBAAA,SAAAxuC,EAAAC,GACA,GAAAkB,GAAAlB,EAAA,GAAAD,EAAA,GACAuE,EAAAtE,EAAA,GAAAD,EAAA,GACAoZ,EAAAnZ,EAAA,GAAAD,EAAA,EACA,OAAAmB,KAAAoD,IAAA6U,KAOAg1B,EAAAK,QAAAL,EAAAI,gBAQAJ,EAAAlxC,OAAA,SAAA8C,GACA,GAAAmB,GAAAnB,EAAA,GACAuE,EAAAvE,EAAA,GACAoZ,EAAApZ,EAAA,EACA,OAAAwD,MAAAkhC,KAAAvjC,IAAAoD,IAAA6U,MAOAg1B,EAAA1R,IAAA0R,EAAAlxC,OAQAkxC,EAAAM,cAAA,SAAA1uC,GACA,GAAAmB,GAAAnB,EAAA,GACAuE,EAAAvE,EAAA,GACAoZ,EAAApZ,EAAA,EACA,OAAAmB,KAAAoD,IAAA6U,KAOAg1B,EAAAO,OAAAP,EAAAM,cASAN,EAAAv5B,OAAA,SAAA0zB,EAAAvoC,GAIA,MAHAuoC,GAAA,IAAAvoC,EAAA,GACAuoC,EAAA,IAAAvoC,EAAA,GACAuoC,EAAA,IAAAvoC,EAAA,GACAuoC,GAUA6F,EAAAQ,QAAA,SAAArG,EAAAvoC,GAIA,MAHAuoC,GAAA,KAAAvoC,EAAA,GACAuoC,EAAA,KAAAvoC,EAAA,GACAuoC,EAAA,KAAAvoC,EAAA,GACAuoC,GAUA6F,EAAAS,UAAA,SAAAtG,EAAAvoC,GACA,GAAAmB,GAAAnB,EAAA,GACAuE,EAAAvE,EAAA,GACAoZ,EAAApZ,EAAA,GACA08B,EAAAv7B,IAAAoD,IAAA6U,GAQA,OAPAsjB,GAAA,IAEAA,EAAA,EAAAl5B,KAAAkhC,KAAAhI,GACA6L,EAAA,GAAAvoC,EAAA,GAAA08B,EACA6L,EAAA,GAAAvoC,EAAA,GAAA08B,EACA6L,EAAA,GAAAvoC,EAAA,GAAA08B,GAEA6L,GAUA6F,EAAAU,IAAA,SAAA9uC,EAAAC,GACA,MAAAD,GAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,IAWAmuC,EAAAW,MAAA,SAAAxG,EAAAvoC,EAAAC,GACA,GAAAinC,GAAAlnC,EAAA,GAAAmnC,EAAAnnC,EAAA,GAAAgvC,EAAAhvC,EAAA,GACAivC,EAAAhvC,EAAA,GAAAivC,EAAAjvC,EAAA,GAAAkvC,EAAAlvC,EAAA,EAKA,OAHAsoC,GAAA,GAAApB,EAAAgI,EAAAH,EAAAE,EACA3G,EAAA,GAAAyG,EAAAC,EAAA/H,EAAAiI,EACA5G,EAAA,GAAArB,EAAAgI,EAAA/H,EAAA8H,EACA1G,GAYA6F,EAAAgB,KAAA,SAAA7G,EAAAvoC,EAAAC,EAAA8F,GACA,GAAAmhC,GAAAlnC,EAAA,GACAmnC,EAAAnnC,EAAA,GACAgvC,EAAAhvC,EAAA,EAIA,OAHAuoC,GAAA,GAAArB,EAAAnhC,GAAA9F,EAAA,GAAAinC,GACAqB,EAAA,GAAApB,EAAAphC,GAAA9F,EAAA,GAAAknC,GACAoB,EAAA,GAAAyG,EAAAjpC,GAAA9F,EAAA,GAAA+uC,GACAzG,GAcA6F,EAAAiB,QAAA,SAAA9G,EAAAvoC,EAAAC,EAAAlB,EAAAgW,EAAAhP,GACA,GAAAupC,GAAAvpC,IACAwpC,EAAAD,GAAA,EAAAvpC,EAAA,KACAypC,EAAAF,GAAAvpC,EAAA,GAAAA,EACA0pC,EAAAH,GAAAvpC,EAAA,GACA2pC,EAAAJ,GAAA,IAAAvpC,EAMA,OAJAwiC,GAAA,GAAAvoC,EAAA,GAAAuvC,EAAAtvC,EAAA,GAAAuvC,EAAAzwC,EAAA,GAAA0wC,EAAA16B,EAAA,GAAA26B,EACAnH,EAAA,GAAAvoC,EAAA,GAAAuvC,EAAAtvC,EAAA,GAAAuvC,EAAAzwC,EAAA,GAAA0wC,EAAA16B,EAAA,GAAA26B,EACAnH,EAAA,GAAAvoC,EAAA,GAAAuvC,EAAAtvC,EAAA,GAAAuvC,EAAAzwC,EAAA,GAAA0wC,EAAA16B,EAAA,GAAA26B,EAEAnH,GAcA6F,EAAAuB,OAAA,SAAApH,EAAAvoC,EAAAC,EAAAlB,EAAAgW,EAAAhP,GACA,GAAA6pC,GAAA,EAAA7pC,EACA8pC,EAAAD,IACAN,EAAAvpC,IACAwpC,EAAAM,EAAAD,EACAJ,EAAA,EAAAzpC,EAAA8pC,EACAJ,EAAA,EAAAH,EAAAM,EACAF,EAAAJ,EAAAvpC,CAMA,OAJAwiC,GAAA,GAAAvoC,EAAA,GAAAuvC,EAAAtvC,EAAA,GAAAuvC,EAAAzwC,EAAA,GAAA0wC,EAAA16B,EAAA,GAAA26B,EACAnH,EAAA,GAAAvoC,EAAA,GAAAuvC,EAAAtvC,EAAA,GAAAuvC,EAAAzwC,EAAA,GAAA0wC,EAAA16B,EAAA,GAAA26B,EACAnH,EAAA,GAAAvoC,EAAA,GAAAuvC,EAAAtvC,EAAA,GAAAuvC,EAAAzwC,EAAA,GAAA0wC,EAAA16B,EAAA,GAAA26B,EAEAnH,GAUA6F,EAAA3qC,OAAA,SAAA8kC,EAAAxC,GACAA,KAAA,CAEA,IAAAlyB,GAAA,EAAA3Q,EAAAK,SAAAC,KAAAS,GACAmV,EAAA,EAAAlW,EAAAK,SAAA,EACAusC,EAAAtsC,KAAAkhC,KAAA,EAAAtrB,KAAA2sB,CAKA,OAHAwC,GAAA,GAAA/kC,KAAAuhC,IAAAlxB,GAAAi8B,EACAvH,EAAA,GAAA/kC,KAAAshC,IAAAjxB,GAAAi8B,EACAvH,EAAA,GAAAnvB,EAAA2sB,EACAwC,GAYA6F,EAAA2B,cAAA,SAAAxH,EAAAvoC,EAAAoB,GACA,GAAAD,GAAAnB,EAAA,GAAAuE,EAAAvE,EAAA,GAAAoZ,EAAApZ,EAAA,GACA6G,EAAAzF,EAAA,GAAAD,EAAAC,EAAA,GAAAmD,EAAAnD,EAAA,IAAAgY,EAAAhY,EAAA,GAKA,OAJAyF,MAAA,EACA0hC,EAAA,IAAAnnC,EAAA,GAAAD,EAAAC,EAAA,GAAAmD,EAAAnD,EAAA,GAAAgY,EAAAhY,EAAA,KAAAyF,EACA0hC,EAAA,IAAAnnC,EAAA,GAAAD,EAAAC,EAAA,GAAAmD,EAAAnD,EAAA,GAAAgY,EAAAhY,EAAA,KAAAyF,EACA0hC,EAAA,IAAAnnC,EAAA,GAAAD,EAAAC,EAAA,GAAAmD,EAAAnD,EAAA,IAAAgY,EAAAhY,EAAA,KAAAyF,EACA0hC,GAWA6F,EAAA4B,cAAA,SAAAzH,EAAAvoC,EAAAoB,GACA,GAAAD,GAAAnB,EAAA,GAAAuE,EAAAvE,EAAA,GAAAoZ,EAAApZ,EAAA,EAIA,OAHAuoC,GAAA,GAAApnC,EAAAC,EAAA,GAAAmD,EAAAnD,EAAA,GAAAgY,EAAAhY,EAAA,GACAmnC,EAAA,GAAApnC,EAAAC,EAAA,GAAAmD,EAAAnD,EAAA,GAAAgY,EAAAhY,EAAA,GACAmnC,EAAA,GAAApnC,EAAAC,EAAA,GAAAmD,EAAAnD,EAAA,GAAAgY,EAAAhY,EAAA,GACAmnC,GAWA6F,EAAA6B,cAAA,SAAA1H,EAAAvoC,EAAAmW,GAGA,GAAAhV,GAAAnB,EAAA,GAAAuE,EAAAvE,EAAA,GAAAoZ,EAAApZ,EAAA,GACAkwC,EAAA/5B,EAAA,GAAAg6B,EAAAh6B,EAAA,GAAAi6B,EAAAj6B,EAAA,GAAAk6B,EAAAl6B,EAAA,GAGAm6B,EAAAD,EAAAlvC,EAAAgvC,EAAA/2B,EAAAg3B,EAAA7rC,EACAgsC,EAAAF,EAAA9rC,EAAA6rC,EAAAjvC,EAAA+uC,EAAA92B,EACAo3B,EAAAH,EAAAj3B,EAAA82B,EAAA3rC,EAAA4rC,EAAAhvC,EACAsvC,GAAAP,EAAA/uC,EAAAgvC,EAAA5rC,EAAA6rC,EAAAh3B,CAMA,OAHAmvB,GAAA,GAAA+H,EAAAD,EAAAI,GAAAP,EAAAK,GAAAH,EAAAI,GAAAL,EACA5H,EAAA,GAAAgI,EAAAF,EAAAI,GAAAN,EAAAK,GAAAN,EAAAI,GAAAF,EACA7H,EAAA,GAAAiI,EAAAH,EAAAI,GAAAL,EAAAE,GAAAH,EAAAI,GAAAL,EACA3H,GAWA6F,EAAAsC,QAAA,SAAAnI,EAAAvoC,EAAAC,EAAAlB,GACA,GAAAsC,MAAAwS,IAgBA,OAdAxS,GAAA,GAAArB,EAAA,GAAAC,EAAA,GACAoB,EAAA,GAAArB,EAAA,GAAAC,EAAA,GACAoB,EAAA,GAAArB,EAAA,GAAAC,EAAA,GAGA4T,EAAA,GAAAxS,EAAA,GACAwS,EAAA,GAAAxS,EAAA,GAAAmC,KAAAuhC,IAAAhmC,GAAAsC,EAAA,GAAAmC,KAAAshC,IAAA/lC,GACA8U,EAAA,GAAAxS,EAAA,GAAAmC,KAAAshC,IAAA/lC,GAAAsC,EAAA,GAAAmC,KAAAuhC,IAAAhmC,GAGAwpC,EAAA,GAAA10B,EAAA,GAAA5T,EAAA,GACAsoC,EAAA,GAAA10B,EAAA,GAAA5T,EAAA,GACAsoC,EAAA,GAAA10B,EAAA,GAAA5T,EAAA,GAEAsoC,GAWA6F,EAAAuC,QAAA,SAAApI,EAAAvoC,EAAAC,EAAAlB,GACA,GAAAsC,MAAAwS,IAgBA,OAdAxS,GAAA,GAAArB,EAAA,GAAAC,EAAA,GACAoB,EAAA,GAAArB,EAAA,GAAAC,EAAA,GACAoB,EAAA,GAAArB,EAAA,GAAAC,EAAA,GAGA4T,EAAA,GAAAxS,EAAA,GAAAmC,KAAAshC,IAAA/lC,GAAAsC,EAAA,GAAAmC,KAAAuhC,IAAAhmC,GACA8U,EAAA,GAAAxS,EAAA,GACAwS,EAAA,GAAAxS,EAAA,GAAAmC,KAAAuhC,IAAAhmC,GAAAsC,EAAA,GAAAmC,KAAAshC,IAAA/lC,GAGAwpC,EAAA,GAAA10B,EAAA,GAAA5T,EAAA,GACAsoC,EAAA,GAAA10B,EAAA,GAAA5T,EAAA,GACAsoC,EAAA,GAAA10B,EAAA,GAAA5T,EAAA,GAEAsoC,GAWA6F,EAAAwC,QAAA,SAAArI,EAAAvoC,EAAAC,EAAAlB,GACA,GAAAsC,MAAAwS,IAgBA,OAdAxS,GAAA,GAAArB,EAAA,GAAAC,EAAA,GACAoB,EAAA,GAAArB,EAAA,GAAAC,EAAA,GACAoB,EAAA,GAAArB,EAAA,GAAAC,EAAA,GAGA4T,EAAA,GAAAxS,EAAA,GAAAmC,KAAAuhC,IAAAhmC,GAAAsC,EAAA,GAAAmC,KAAAshC,IAAA/lC,GACA8U,EAAA,GAAAxS,EAAA,GAAAmC,KAAAshC,IAAA/lC,GAAAsC,EAAA,GAAAmC,KAAAuhC,IAAAhmC,GACA8U,EAAA,GAAAxS,EAAA,GAGAknC,EAAA,GAAA10B,EAAA,GAAA5T,EAAA,GACAsoC,EAAA,GAAA10B,EAAA,GAAA5T,EAAA,GACAsoC,EAAA,GAAA10B,EAAA,GAAA5T,EAAA,GAEAsoC,GAeA6F,EAAAyC,QAAA,WACA,GAAAC,GAAA1C,EAAA9F,QAEA,iBAAAtoC,EAAA+wC,EAAA5/B,EAAA6/B,EAAA/1C,EAAAg2C,GACA,GAAAh0C,GAAAa,CAeA,KAdAizC,IACAA,EAAA,GAGA5/B,IACAA,EAAA,GAIArT,EADAkzC,EACAxtC,KAAA+M,IAAAygC,EAAAD,EAAA5/B,EAAAnR,EAAA9C,QAEA8C,EAAA9C,OAGAD,EAAAkU,EAAuBlU,EAAAa,EAAOb,GAAA8zC,EAC9BD,EAAA,GAAA9wC,EAAA/C,GAA0B6zC,EAAA,GAAA9wC,EAAA/C,EAAA,GAAiB6zC,EAAA,GAAA9wC,EAAA/C,EAAA,GAC3ChC,EAAA61C,IAAAG,GACAjxC,EAAA/C,GAAA6zC,EAAA,GAA0B9wC,EAAA/C,EAAA,GAAA6zC,EAAA,GAAiB9wC,EAAA/C,EAAA,GAAA6zC,EAAA,EAG3C,OAAA9wC,OAUAouC,EAAA8C,MAAA,SAAAlxC,EAAAC,GAEA,GAAAkxC,GAAA/C,EAAA1F,WAAA1oC,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAoxC,EAAAhD,EAAA1F,WAAAzoC,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAEAmuC,GAAAS,UAAAsC,KACA/C,EAAAS,UAAAuC,IAEA,IAAAC,GAAAjD,EAAAU,IAAAqC,EAAAC,EAEA,OAAAC,GAAA,EACA,EAEA7tC,KAAAqhC,KAAAwM,IAUAjD,EAAApB,IAAA,SAAAhtC,GACA,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAUAouC,EAAAf,YAAA,SAAArtC,EAAAC,GACA,MAAAD,GAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IAUAmuC,EAAAjqC,OAAA,SAAAnE,EAAAC,GACA,GAAAqtC,GAAAttC,EAAA,GAAAs9B,EAAAt9B,EAAA,GAAAu9B,EAAAv9B,EAAA,GACA6tC,EAAA5tC,EAAA,GAAAm8B,EAAAn8B,EAAA,GAAAo8B,EAAAp8B,EAAA,EACA,OAAAuD,MAAAY,IAAAkpC,EAAAO,IAAA3qC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAkpC,GAAA9pC,KAAAY,IAAAypC,KACArqC,KAAAY,IAAAk5B,EAAAlB,IAAAl5B,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAk5B,GAAA95B,KAAAY,IAAAg4B,KACA54B,KAAAY,IAAAm5B,EAAAlB,IAAAn5B,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAm5B,GAAA/5B,KAAAY,IAAAi4B,KAGA78B,EAAAyB,QAAAmtC,GR+8RM,SAAU5uC,EAAQyB,EAASxG,GSnsTjC,GAAAyI,GAAAzI,EAAA,GAMA62C,IAOAA,GAAAhJ,OAAA,WACA,GAAAC,GAAA,GAAArlC,GAAAE,WAAA,EAKA,OAJAmlC,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GASA+I,EAAAlyB,MAAA,SAAApf,GACA,GAAAuoC,GAAA,GAAArlC,GAAAE,WAAA,EAKA,OAJAmlC,GAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,GAYA+I,EAAA5I,WAAA,SAAAvnC,EAAAoD,EAAA6U,EAAAvS,GACA,GAAA0hC,GAAA,GAAArlC,GAAAE,WAAA,EAKA,OAJAmlC,GAAA,GAAApnC,EACAonC,EAAA,GAAAhkC,EACAgkC,EAAA,GAAAnvB,EACAmvB,EAAA,GAAA1hC,EACA0hC,GAUA+I,EAAA7I,KAAA,SAAAF,EAAAvoC,GAKA,MAJAuoC,GAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,GAaA+I,EAAA/0C,IAAA,SAAAgsC,EAAApnC,EAAAoD,EAAA6U,EAAAvS,GAKA,MAJA0hC,GAAA,GAAApnC,EACAonC,EAAA,GAAAhkC,EACAgkC,EAAA,GAAAnvB,EACAmvB,EAAA,GAAA1hC,EACA0hC,GAWA+I,EAAA3xB,IAAA,SAAA4oB,EAAAvoC,EAAAC,GAKA,MAJAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,GAWA+I,EAAA5xB,SAAA,SAAA6oB,EAAAvoC,EAAAC,GAKA,MAJAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,GAOA+I,EAAApE,IAAAoE,EAAA5xB,SAUA4xB,EAAAtuB,SAAA,SAAAulB,EAAAvoC,EAAAC,GAKA,MAJAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,GAOA+I,EAAA1G,IAAA0G,EAAAtuB,SAUAsuB,EAAA/yB,OAAA,SAAAgqB,EAAAvoC,EAAAC,GAKA,MAJAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,GAOA+I,EAAAjD,IAAAiD,EAAA/yB,OASA+yB,EAAArqB,KAAA,SAAAshB,EAAAvoC,GAKA,MAJAuoC,GAAA,GAAA/kC,KAAAyjB,KAAAjnB,EAAA,IACAuoC,EAAA,GAAA/kC,KAAAyjB,KAAAjnB,EAAA,IACAuoC,EAAA,GAAA/kC,KAAAyjB,KAAAjnB,EAAA,IACAuoC,EAAA,GAAA/kC,KAAAyjB,KAAAjnB,EAAA,IACAuoC,GAUA+I,EAAAr+B,MAAA,SAAAs1B,EAAAvoC,GAKA,MAJAuoC,GAAA,GAAA/kC,KAAAyP,MAAAjT,EAAA,IACAuoC,EAAA,GAAA/kC,KAAAyP,MAAAjT,EAAA,IACAuoC,EAAA,GAAA/kC,KAAAyP,MAAAjT,EAAA,IACAuoC,EAAA,GAAA/kC,KAAAyP,MAAAjT,EAAA,IACAuoC,GAWA+I,EAAA/gC,IAAA,SAAAg4B,EAAAvoC,EAAAC,GAKA,MAJAsoC,GAAA,GAAA/kC,KAAA+M,IAAAvQ,EAAA,GAAAC,EAAA,IACAsoC,EAAA,GAAA/kC,KAAA+M,IAAAvQ,EAAA,GAAAC,EAAA,IACAsoC,EAAA,GAAA/kC,KAAA+M,IAAAvQ,EAAA,GAAAC,EAAA,IACAsoC,EAAA,GAAA/kC,KAAA+M,IAAAvQ,EAAA,GAAAC,EAAA,IACAsoC,GAWA+I,EAAAjtC,IAAA,SAAAkkC,EAAAvoC,EAAAC,GAKA,MAJAsoC,GAAA,GAAA/kC,KAAAa,IAAArE,EAAA,GAAAC,EAAA,IACAsoC,EAAA,GAAA/kC,KAAAa,IAAArE,EAAA,GAAAC,EAAA,IACAsoC,EAAA,GAAA/kC,KAAAa,IAAArE,EAAA,GAAAC,EAAA,IACAsoC,EAAA,GAAA/kC,KAAAa,IAAArE,EAAA,GAAAC,EAAA,IACAsoC,GAUA+I,EAAAxV,MAAA,SAAAyM,EAAAvoC,GAKA,MAJAuoC,GAAA,GAAA/kC,KAAAs4B,MAAA97B,EAAA,IACAuoC,EAAA,GAAA/kC,KAAAs4B,MAAA97B,EAAA,IACAuoC,EAAA,GAAA/kC,KAAAs4B,MAAA97B,EAAA,IACAuoC,EAAA,GAAA/kC,KAAAs4B,MAAA97B,EAAA,IACAuoC,GAWA+I,EAAAvL,MAAA,SAAAwC,EAAAvoC,EAAAC,GAKA,MAJAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,GAYA+I,EAAAhD,YAAA,SAAA/F,EAAAvoC,EAAAC,EAAA8lC,GAKA,MAJAwC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,GAUA+I,EAAAhQ,SAAA,SAAAthC,EAAAC,GACA,GAAAkB,GAAAlB,EAAA,GAAAD,EAAA,GACAuE,EAAAtE,EAAA,GAAAD,EAAA,GACAoZ,EAAAnZ,EAAA,GAAAD,EAAA,GACA6G,EAAA5G,EAAA,GAAAD,EAAA,EACA,OAAAwD,MAAAkhC,KAAAvjC,IAAAoD,IAAA6U,IAAAvS,MAOAyqC,EAAA/C,KAAA+C,EAAAhQ,SASAgQ,EAAA9C,gBAAA,SAAAxuC,EAAAC,GACA,GAAAkB,GAAAlB,EAAA,GAAAD,EAAA,GACAuE,EAAAtE,EAAA,GAAAD,EAAA,GACAoZ,EAAAnZ,EAAA,GAAAD,EAAA,GACA6G,EAAA5G,EAAA,GAAAD,EAAA,EACA,OAAAmB,KAAAoD,IAAA6U,IAAAvS,KAOAyqC,EAAA7C,QAAA6C,EAAA9C,gBAQA8C,EAAAp0C,OAAA,SAAA8C,GACA,GAAAmB,GAAAnB,EAAA,GACAuE,EAAAvE,EAAA,GACAoZ,EAAApZ,EAAA,GACA6G,EAAA7G,EAAA,EACA,OAAAwD,MAAAkhC,KAAAvjC,IAAAoD,IAAA6U,IAAAvS,MAOAyqC,EAAA5U,IAAA4U,EAAAp0C,OAQAo0C,EAAA5C,cAAA,SAAA1uC,GACA,GAAAmB,GAAAnB,EAAA,GACAuE,EAAAvE,EAAA,GACAoZ,EAAApZ,EAAA,GACA6G,EAAA7G,EAAA,EACA,OAAAmB,KAAAoD,IAAA6U,IAAAvS,KAOAyqC,EAAA3C,OAAA2C,EAAA5C,cASA4C,EAAAz8B,OAAA,SAAA0zB,EAAAvoC,GAKA,MAJAuoC,GAAA,IAAAvoC,EAAA,GACAuoC,EAAA,IAAAvoC,EAAA,GACAuoC,EAAA,IAAAvoC,EAAA,GACAuoC,EAAA,IAAAvoC,EAAA,GACAuoC,GAUA+I,EAAA1C,QAAA,SAAArG,EAAAvoC,GAKA,MAJAuoC,GAAA,KAAAvoC,EAAA,GACAuoC,EAAA,KAAAvoC,EAAA,GACAuoC,EAAA,KAAAvoC,EAAA,GACAuoC,EAAA,KAAAvoC,EAAA,GACAuoC,GAUA+I,EAAAzC,UAAA,SAAAtG,EAAAvoC,GACA,GAAAmB,GAAAnB,EAAA,GACAuE,EAAAvE,EAAA,GACAoZ,EAAApZ,EAAA,GACA6G,EAAA7G,EAAA,GACA08B,EAAAv7B,IAAAoD,IAAA6U,IAAAvS,GAQA,OAPA61B,GAAA,IACAA,EAAA,EAAAl5B,KAAAkhC,KAAAhI,GACA6L,EAAA,GAAApnC,EAAAu7B,EACA6L,EAAA,GAAAhkC,EAAAm4B,EACA6L,EAAA,GAAAnvB,EAAAsjB,EACA6L,EAAA,GAAA1hC,EAAA61B,GAEA6L,GAUA+I,EAAAxC,IAAA,SAAA9uC,EAAAC,GACA,MAAAD,GAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,IAYAqxC,EAAAlC,KAAA,SAAA7G,EAAAvoC,EAAAC,EAAA8F,GACA,GAAAmhC,GAAAlnC,EAAA,GACAmnC,EAAAnnC,EAAA,GACAgvC,EAAAhvC,EAAA,GACAuxC,EAAAvxC,EAAA,EAKA,OAJAuoC,GAAA,GAAArB,EAAAnhC,GAAA9F,EAAA,GAAAinC,GACAqB,EAAA,GAAApB,EAAAphC,GAAA9F,EAAA,GAAAknC,GACAoB,EAAA,GAAAyG,EAAAjpC,GAAA9F,EAAA,GAAA+uC,GACAzG,EAAA,GAAAgJ,EAAAxrC,GAAA9F,EAAA,GAAAsxC,GACAhJ,GAUA+I,EAAA7tC,OAAA,SAAA8kC,EAAAxC,GAUA,MATAA,MAAA,EAGAwC,EAAA,GAAArlC,EAAAK,SACAglC,EAAA,GAAArlC,EAAAK,SACAglC,EAAA,GAAArlC,EAAAK,SACAglC,EAAA,GAAArlC,EAAAK,SACA+tC,EAAAzC,UAAAtG,KACA+I,EAAAvL,MAAAwC,IAAAxC,GACAwC,GAWA+I,EAAAvB,cAAA,SAAAxH,EAAAvoC,EAAAoB,GACA,GAAAD,GAAAnB,EAAA,GAAAuE,EAAAvE,EAAA,GAAAoZ,EAAApZ,EAAA,GAAA6G,EAAA7G,EAAA,EAKA,OAJAuoC,GAAA,GAAAnnC,EAAA,GAAAD,EAAAC,EAAA,GAAAmD,EAAAnD,EAAA,GAAAgY,EAAAhY,EAAA,IAAAyF,EACA0hC,EAAA,GAAAnnC,EAAA,GAAAD,EAAAC,EAAA,GAAAmD,EAAAnD,EAAA,GAAAgY,EAAAhY,EAAA,IAAAyF,EACA0hC,EAAA,GAAAnnC,EAAA,GAAAD,EAAAC,EAAA,GAAAmD,EAAAnD,EAAA,IAAAgY,EAAAhY,EAAA,IAAAyF,EACA0hC,EAAA,GAAAnnC,EAAA,GAAAD,EAAAC,EAAA,GAAAmD,EAAAnD,EAAA,IAAAgY,EAAAhY,EAAA,IAAAyF,EACA0hC,GAWA+I,EAAArB,cAAA,SAAA1H,EAAAvoC,EAAAmW,GACA,GAAAhV,GAAAnB,EAAA,GAAAuE,EAAAvE,EAAA,GAAAoZ,EAAApZ,EAAA,GACAkwC,EAAA/5B,EAAA,GAAAg6B,EAAAh6B,EAAA,GAAAi6B,EAAAj6B,EAAA,GAAAk6B,EAAAl6B,EAAA,GAGAm6B,EAAAD,EAAAlvC,EAAAgvC,EAAA/2B,EAAAg3B,EAAA7rC,EACAgsC,EAAAF,EAAA9rC,EAAA6rC,EAAAjvC,EAAA+uC,EAAA92B,EACAo3B,EAAAH,EAAAj3B,EAAA82B,EAAA3rC,EAAA4rC,EAAAhvC,EACAsvC,GAAAP,EAAA/uC,EAAAgvC,EAAA5rC,EAAA6rC,EAAAh3B,CAOA,OAJAmvB,GAAA,GAAA+H,EAAAD,EAAAI,GAAAP,EAAAK,GAAAH,EAAAI,GAAAL,EACA5H,EAAA,GAAAgI,EAAAF,EAAAI,GAAAN,EAAAK,GAAAN,EAAAI,GAAAF,EACA7H,EAAA,GAAAiI,EAAAH,EAAAI,GAAAL,EAAAE,GAAAH,EAAAI,GAAAL,EACA3H,EAAA,GAAAvoC,EAAA,GACAuoC,GAeA+I,EAAAT,QAAA,WACA,GAAAC,GAAAQ,EAAAhJ,QAEA,iBAAAtoC,EAAA+wC,EAAA5/B,EAAA6/B,EAAA/1C,EAAAg2C,GACA,GAAAh0C,GAAAa,CAeA,KAdAizC,IACAA,EAAA,GAGA5/B,IACAA,EAAA,GAIArT,EADAkzC,EACAxtC,KAAA+M,IAAAygC,EAAAD,EAAA5/B,EAAAnR,EAAA9C,QAEA8C,EAAA9C,OAGAD,EAAAkU,EAAuBlU,EAAAa,EAAOb,GAAA8zC,EAC9BD,EAAA,GAAA9wC,EAAA/C,GAA0B6zC,EAAA,GAAA9wC,EAAA/C,EAAA,GAAiB6zC,EAAA,GAAA9wC,EAAA/C,EAAA,GAAiB6zC,EAAA,GAAA9wC,EAAA/C,EAAA,GAC5DhC,EAAA61C,IAAAG,GACAjxC,EAAA/C,GAAA6zC,EAAA,GAA0B9wC,EAAA/C,EAAA,GAAA6zC,EAAA,GAAiB9wC,EAAA/C,EAAA,GAAA6zC,EAAA,GAAiB9wC,EAAA/C,EAAA,GAAA6zC,EAAA,EAG5D,OAAA9wC,OAUAsxC,EAAAtE,IAAA,SAAAhtC,GACA,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAUAsxC,EAAAjE,YAAA,SAAArtC,EAAAC,GACA,MAAAD,GAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IAUAqxC,EAAAntC,OAAA,SAAAnE,EAAAC,GACA,GAAAqtC,GAAAttC,EAAA,GAAAs9B,EAAAt9B,EAAA,GAAAu9B,EAAAv9B,EAAA,GAAAutC,EAAAvtC,EAAA,GACA6tC,EAAA5tC,EAAA,GAAAm8B,EAAAn8B,EAAA,GAAAo8B,EAAAp8B,EAAA,GAAA6tC,EAAA7tC,EAAA,EACA,OAAAuD,MAAAY,IAAAkpC,EAAAO,IAAA3qC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAkpC,GAAA9pC,KAAAY,IAAAypC,KACArqC,KAAAY,IAAAk5B,EAAAlB,IAAAl5B,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAk5B,GAAA95B,KAAAY,IAAAg4B,KACA54B,KAAAY,IAAAm5B,EAAAlB,IAAAn5B,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAm5B,GAAA/5B,KAAAY,IAAAi4B,KACA74B,KAAAY,IAAAmpC,EAAAO,IAAA5qC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAmpC,GAAA/pC,KAAAY,IAAA0pC,KAGAtuC,EAAAyB,QAAAqwC,GT8tTM,SAAU9xC,EAAQyB,GUhzUxB,YAsBA,IAAAuwC,GAAA,SAAAnwC,EAAA0E,GAEAnC,KAAAsH,MAAA7J,EAGAuC,KAAA6tC,SAAA1rC,GAAA,KAGAnC,KAAAsE,KAAA,KAEAtE,KAAA8xB,KAAA,KAGA9xB,KAAApH,MAAA6E,EAAAF,GAWAuwC,EAAA,SAAAC,EAAAC,GAEAhuC,KAAAiuC,MAAAF,EAEA/tC,KAAAkuC,MAAAF,EAEAhuC,KAAAmuC,aAAAJ,EAIAD,GAAA11C,UAAA21C,KAAA,WACA,MAAA/tC,MAAAiuC;EAIAH,EAAA11C,UAAAg2C,QAAA,SAAA1mC,GACA1H,KAAAiuC,MAAAvmC,GAIAomC,EAAA11C,UAAA41C,KAAA,WACA,MAAAhuC,MAAAkuC,OAIAJ,EAAA11C,UAAAi2C,QAAA,SAAA3mC,GACA1H,KAAAkuC,MAAAxmC,GAIAomC,EAAA11C,UAAAk2C,OAAA,WACA,MAAAtuC,MAAAmuC,cAIAL,EAAA11C,UAAAm2C,UAAA,SAAA7mC,GACA1H,KAAAmuC,aAAAzmC,GAIAomC,EAAA11C,UAAAo2C,eAAA,WAEA,MAAAxuC,MAAAmuC,cAOAL,EAAA11C,UAAAq2C,WAAA,SAAAlxC,GACA,GAAAmK,GAAA1H,KAAAmuC,YAGA,IAAA5wC,EAAAmK,EAAA9O,OACA,KAAA8O,IAAAoqB,MACA,GAAAv0B,GAAAmK,EAAA9O,MAEA,MADAoH,MAAAmuC,aAAAzmC,EACAA,MAIA,MAAAA,IAAApD,MACA,GAAA/G,EAAAmK,EAAA9O,MAEA,MADAoH,MAAAmuC,aAAAzmC,EAAAoqB,KACApqB,EAAAoqB,IAIA,cAOAgc,EAAA11C,UAAAs2C,YAAA,SAAApnC,GACA,GAAAqnC,GAAArnC,EAAA/J,EACAmK,EAAA1H,KAAAwuC,eAAAG,GACAC,EAAAlnC,EAAAJ,MAAA/J,CAEA,IAAAoxC,IAAAC,GAEA,GAAAtnC,IAAAI,EAAAJ,MAEA,GAAAA,IAAAI,EAAAoqB,KAAAxqB,MACAI,IAAAoqB,SACa,IAAAxqB,IAAAI,EAAApD,KAAAgD,MAGb,SAAA1M,OAAA,qDAFA8M,KAAApD,UAKK,IAAAqqC,EAAAC,EAEL,MAAAlnC,IAAAoqB,OACAxqB,IAAAI,EAAAJ,YAKA,OAAAI,IAAApD,OACAgD,IAAAI,EAAAJ,QASA,MAHAI,KACA1H,KAAAmuC,aAAAzmC,GAEAA,GAMA9L,EAAAyB,QAAAywC,EACAlyC,EAAAyB,QAAAuwC,QVs0UM,SAAUhyC,EAAQyB,EAASxG,GW3+UjC,YAMA,IAAAg4C,GAAAh4C,EAAA,GAWAi4C,EAAA,SAAApwC,EAAAqwC,GACA/uC,KAAA9H,KAAA,aAMA8H,KAAA+uC,eAMA/uC,KAAAtB,WAAA,iBACA,QAAArF,GAAA,EAAmBA,EAAA01C,EAAAz1C,OAAmBD,IACtC2G,KAAAtB,SAAA,IAAAmwC,EAAAjuC,SAAAmuC,EAAA11C,IAGAy1C,GAAA12C,UAAA,GAAAwC,OACAk0C,EAAA12C,UAAA42C,YAAAF,EAGAlzC,EAAAyB,QAAAyxC,GX8/UM,SAAUlzC,EAAQyB,EAASxG,GYniVjC,YAWA,IAAAg4C,GAAAh4C,EAAA,GAiBAo4C,EAAA,SAAA7yC,EAAAC,EAAAlB,GAMA6E,KAAAkvC,SAAA9yC,EAAAC,EAAAlB,GAOA6E,KAAAmvC,YAAA,gBAOAnvC,KAAAovC,WAAA,EAOApvC,KAAAqvC,mBAAA,SAOArvC,KAAAsvC,gBAAA,UAGAC,EAAAV,EAAAjuC,QAMAquC,GAAA72C,UAAAwI,SAAA,WACA,UAAA2uC,EAAAvvC,KAAAkvC,QAAA,IAAAK,EAAAvvC,KAAAkvC,QAAA,IAAAK,EAAAvvC,KAAAkvC,QAAA,SAmBAD,EAAA72C,UAAAo3C,SAAA,SAAAxf,GACA,MAAAhwB,MAAAkvC,QAAAlf,IAQAif,EAAA72C,UAAAq3C,SAAAR,EAAA72C,UAAAo3C,SAQAP,EAAA72C,UAAAuQ,UAAA,WACA,MAAA3I,MAAAkvC,SAQAD,EAAA72C,UAAAs3C,YAAA,SAAA1f,GACA,MAAAhwB,MAAAmvC,WAAAnf,IAWAif,EAAA72C,UAAAu3C,cAAA,SAAAroC,GACA,GAAAynC,GAAA/uC,KAAAkvC,OAEA,OAAA5nC,KAAAynC,EAAA,IAAAznC,IAAAynC,EAAA,IAAAznC,IAAAynC,EAAA,IAWAE,EAAA72C,UAAAw3C,aAAA,SAAA3e,GACA,MAAAjxB,MAAA2vC,cAAA1e,EAAAxzB,IAAAuC,KAAA2vC,cAAA1e,EAAA1e,IAUA08B,EAAA72C,UAAAy3C,eAAA,SAAA7tC,EAAAC,GACA,MAAAjC,MAAA2vC,cAAA3tC,IAAAhC,KAAA2vC,cAAA1tC,IAOAgtC,EAAA72C,UAAA03C,WAAA,WACA,MAAA9vC,MAAAovC,WASAH,EAAA72C,UAAA23C,YAAA,SAAAC,GAEA,MADAhwC,MAAAovC,UAAAY,EACAhwC,MAWAivC,EAAA72C,UAAA63C,qBAAA,SAAAjuC,EAAAC,EAAAE,GACA,GAAA4sC,GAAA/uC,KAAAkvC,OAEA,IAAAltC,IAAA+sC,EAAA,IAAA9sC,IAAA8sC,EAAA,IAAA/sC,IAAA+sC,EAAA,IAAA9sC,IAAA8sC,EAAA,GACA/uC,KAAAmvC,WAAA,GAAAhtC,MACK,IAAAH,IAAA+sC,EAAA,IAAA9sC,IAAA8sC,EAAA,IAAA/sC,IAAA+sC,EAAA,IAAA9sC,IAAA8sC,EAAA,GACL/uC,KAAAmvC,WAAA,GAAAhtC,MACK,MAAAH,IAAA+sC,EAAA,IAAA9sC,IAAA8sC,EAAA,IAAA/sC,IAAA+sC,EAAA,IAAA9sC,IAAA8sC,EAAA,IAGL,SAAAn0C,OAAA,wDAFAoF,MAAAmvC,WAAA,GAAAhtC,IAWA8sC,EAAA72C,UAAA83C,aAAA,SAAA/tC,GACA,GAAA4sC,GAAA/uC,KAAAkvC,OACA/sC,GAAA0tC,eAAAd,EAAA,GAAAA,EAAA,KACA/uC,KAAAmvC,WAAA,GAAAhtC,EACAA,EAAA8tC,qBAAAlB,EAAA,GAAAA,EAAA,GAAA/uC,OACKmC,EAAA0tC,eAAAd,EAAA,GAAAA,EAAA,KACL/uC,KAAAmvC,WAAA,GAAAhtC,EACAA,EAAA8tC,qBAAAlB,EAAA,GAAAA,EAAA,GAAA/uC,OACKmC,EAAA0tC,eAAAd,EAAA,GAAAA,EAAA,MACL/uC,KAAAmvC,WAAA,GAAAhtC,EACAA,EAAA8tC,qBAAAlB,EAAA,GAAAA,EAAA,GAAA/uC,QAKAivC,EAAA72C,UAAA+3C,eAAA,WACAnwC,KAAAmvC,WAAA,QACAnvC,KAAAmvC,WAAA,QACAnvC,KAAAmvC,WAAA,SAGAF,EAAA72C,UAAAg4C,mBAAA,WACApwC,KAAAsvC,cAAA,MACAtvC,KAAAsvC,cAAA,MACAtvC,KAAAsvC,cAAA,OAQAL,EAAA72C,UAAAi4C,QAAA,SAAA5yC,GACA,GAAAsxC,GAAA/uC,KAAAkvC,OAEA,OAAAzxC,KAAAsxC,EAAA,GACAA,EAAA,GACKtxC,IAAAsxC,EAAA,GACLA,EAAA,GACKtxC,IAAAsxC,EAAA,GACLA,EAAA,GAEA,MASAE,EAAA72C,UAAAk4C,SAAA,SAAA7yC,GACA,GAAAsxC,GAAA/uC,KAAAkvC,OAEA,OAAAzxC,KAAAsxC,EAAA,GACAA,EAAA,GACKtxC,IAAAsxC,EAAA,GACLA,EAAA,GACKtxC,IAAAsxC,EAAA,GACLA,EAAA,GAEA,MASAE,EAAA72C,UAAAm4C,WAAA,SAAA9yC,GAEA,MAAAA,KAAAuC,KAAAkvC,QAAA,GACAlvC,KAAAmvC,WAAA,GACK1xC,IAAAuC,KAAAkvC,QAAA,GACLlvC,KAAAmvC,WAAA,GAEAnvC,KAAAmvC,WAAA,IASAF,EAAA72C,UAAAo4C,YAAA,SAAA/yC,GAEA,MAAAA,KAAAuC,KAAAkvC,QAAA,GACAlvC,KAAAmvC,WAAA,GACK1xC,IAAAuC,KAAAkvC,QAAA,GACLlvC,KAAAmvC,WAAA,GAEAnvC,KAAAmvC,WAAA,IAIAF,EAAA72C,UAAAq4C,qBAAA,SAAAhzC,GAEA,MAAAA,KAAAuC,KAAAkvC,QAAA,GACAlvC,KAAAqvC,iBAAA,GACK5xC,IAAAuC,KAAAkvC,QAAA,GACLlvC,KAAAqvC,iBAAA,GAEArvC,KAAAqvC,iBAAA,IAIAJ,EAAA72C,UAAAs4C,sBAAA,SAAAjzC,GAEA,MAAAA,KAAAuC,KAAAkvC,QAAA,GACAlvC,KAAAqvC,iBAAA,GACK5xC,IAAAuC,KAAAkvC,QAAA,GACLlvC,KAAAqvC,iBAAA,GAEArvC,KAAAqvC,iBAAA,IAKAJ,EAAA72C,UAAAu4C,yBAAA,SAAAlzC,GAEA,MAAAA,KAAAuC,KAAAkvC,QAAA,GACAlvC,KAAAqvC,iBAAA,GACK5xC,IAAAuC,KAAAkvC,QAAA,GACLlvC,KAAAqvC,iBAAA,GAEArvC,KAAAqvC,iBAAA,IAIAJ,EAAA72C,UAAAw4C,qBAAA,SAAAnzC,EAAAkjB,GAEAljB,IAAAuC,KAAAkvC,QAAA,GACAlvC,KAAAqvC,iBAAA,GAAA1uB,EACKljB,IAAAuC,KAAAkvC,QAAA,GACLlvC,KAAAqvC,iBAAA,GAAA1uB,EAEA3gB,KAAAqvC,iBAAA,GAAA1uB,GAIAsuB,EAAA72C,UAAAy4C,sBAAA,SAAApzC,EAAAkjB,GAEAljB,IAAAuC,KAAAkvC,QAAA,GACAlvC,KAAAqvC,iBAAA,GAAA1uB,EACKljB,IAAAuC,KAAAkvC,QAAA,GACLlvC,KAAAqvC,iBAAA,GAAA1uB,EAEA3gB,KAAAqvC,iBAAA,GAAA1uB,GAIAsuB,EAAA72C,UAAA04C,kBAAA,SAAArzC,GAEA,MAAAA,KAAAuC,KAAAkvC,QAAA,GACAlvC,KAAAsvC,cAAA,GACK7xC,IAAAuC,KAAAkvC,QAAA,GACLlvC,KAAAsvC,cAAA,GAEAtvC,KAAAsvC,cAAA,IAIAL,EAAA72C,UAAA24C,mBAAA,SAAAtzC,GAEA,MAAAA,KAAAuC,KAAAkvC,QAAA,GACAlvC,KAAAsvC,cAAA,GACK7xC,IAAAuC,KAAAkvC,QAAA,GACLlvC,KAAAsvC,cAAA,GAEAtvC,KAAAsvC,cAAA,IAIAL,EAAA72C,UAAA44C,kBAAA,SAAAvzC,EAAA3G,GAEA2G,IAAAuC,KAAAkvC,QAAA,GACAlvC,KAAAsvC,cAAA,GAAAx4C,EACK2G,IAAAuC,KAAAkvC,QAAA,GACLlvC,KAAAsvC,cAAA,GAAAx4C,EAEAkJ,KAAAsvC,cAAA,GAAAx4C,GAIAm4C,EAAA72C,UAAA64C,mBAAA,SAAAxzC,EAAA3G,GAEA2G,IAAAuC,KAAAkvC,QAAA,GACAlvC,KAAAsvC,cAAA,GAAAx4C,EACK2G,IAAAuC,KAAAkvC,QAAA,GACLlvC,KAAAsvC,cAAA,GAAAx4C,EAEAkJ,KAAAsvC,cAAA,GAAAx4C,GAUAm4C,EAAA72C,UAAA84C,eAAA,SAAAzzC,GAEA,MAAAA,KAAAuC,KAAAkvC,QAAA,GACAlvC,KAAAmvC,WAAA,GACK1xC,IAAAuC,KAAAkvC,QAAA,GACLlvC,KAAAmvC,WAAA,GAEAnvC,KAAAmvC,WAAA,IASAF,EAAA72C,UAAA+4C,cAAA,SAAAhvC,EAAA1E,GACA,GAAA2zC,GAAAjvC,EAAAkuC,QAAA5yC,EACA,OAAAuC,MAAAqwC,QAAAe,IAUAnC,EAAA72C,UAAAi5C,SAAA,SAAAC,EAAAC,GACA,GAAAxC,GAAA/uC,KAAAkvC,OAEA,IAAAoC,IAAAvC,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAwC,MACK,IAAAD,IAAAvC,EAAA,GACLA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAwC,MACK,IAAAD,IAAAvC,EAAA,GAKL,SAAAn0C,OAAA,4CAJAm0C,GAAA,GAAAA,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAwC,IAcAtC,EAAA72C,UAAA43B,MAAA,SAAAvyB,GACA,GAAAsxC,GAAA/uC,KAAAkvC,OAEA,IAAAzxC,IAAAsxC,EAAA,GACA,QACK,IAAAtxC,IAAAsxC,EAAA,GACL,QACK,IAAAtxC,IAAAsxC,EAAA,GACL,QAEA,UAAAn0C,OAAA,2CAUAq0C,EAAA72C,UAAAo5C,UAAA,SAAAxvC,EAAAC,GACA,GAAA8sC,GAAA/uC,KAAAkvC,OAEA,IAAAltC,IAAA+sC,EAAA,IACA,GAAA9sC,IAAA8sC,EAAA,GACA,QACS,IAAA9sC,IAAA8sC,EAAA,GACT,aAEK,IAAA/sC,IAAA+sC,EAAA,IACL,GAAA9sC,IAAA8sC,EAAA,GACA,QACS,IAAA9sC,IAAA8sC,EAAA,GACT,aAEK,IAAA/sC,IAAA+sC,EAAA,IACL,GAAA9sC,IAAA8sC,EAAA,GACA,QACS,IAAA9sC,IAAA8sC,EAAA,GACT,SAGA,UAQAE,EAAA72C,UAAAq5C,2BAAA,SAAAzhB,GACAhwB,KAAAqvC,iBAAArf,IAAA,GAOAif,EAAA72C,UAAAs5C,0BAAA,SAAAzgB,GACAjxB,KAAA2xC,4BAAA1gB,EAAAxzB,EAAAwzB,EAAA1e,IASA08B,EAAA72C,UAAAu5C,4BAAA,SAAAl0C,EAAA8U,GACA,GAAAw8B,GAAA/uC,KAAAkvC,OAEA38B,KAAAw8B,EAAA,IAAAtxC,IAAAsxC,EAAA,IAAAx8B,IAAAw8B,EAAA,IAAAtxC,IAAAsxC,EAAA,GACA/uC,KAAAqvC,iBAAA,MACK98B,IAAAw8B,EAAA,IAAAtxC,IAAAsxC,EAAA,IAAAx8B,IAAAw8B,EAAA,IAAAtxC,IAAAsxC,EAAA,GACL/uC,KAAAqvC,iBAAA,OACK98B,IAAAw8B,EAAA,IAAAtxC,IAAAsxC,EAAA,IAAAx8B,IAAAw8B,EAAA,IAAAtxC,IAAAsxC,EAAA,MACL/uC,KAAAqvC,iBAAA,QAOAzzC,EAAAyB,QAAA4xC,GZwjVM,SAAUrzC,EAAQyB,EAASxG,GazlWjC,YAkBO,SAAS+6C,GAAiB9wB,GAe7B,QAAS+wB,GAAap0C,EAAGq0C,GACrB,GAAIv0C,GAAIE,EAAEuI,EAAIm8B,EAAQ4P,EAClBpxC,EAAIlD,EAAEyI,EAAIi8B,EAAQ6P,CACtB,IAAIC,EAAM,CACN,GAAIC,GAAWlvC,OAAOzF,EAAE40C,QAAQC,IAAWC,EAAWrvC,OAAOrC,EAAEwxC,QAAQC,GACvE,IAAIN,EAGA,MAFAQ,GAAQJ,EACRK,EAAQF,EACD,OAAS90C,EAAE40C,QAAQC,GAAW,KAAOzxC,EAAEwxC,QAAQC,EAEtD,IAAIvV,GAAKqV,EAAWI,EAAOxV,EAAKuV,EAAWE,EACvCC,EAAa5yC,KAAKkhC,KAAKjE,EAAKA,EAAKC,EAAKA,GAAM2V,EAC5Cx6B,EAAI,CACR,IAAI4kB,EACA5kB,EAAIrY,KAAKY,IAAIq8B,GAAM2V,MAClB,KAAI1V,EAGL,MAAO,EAFP7kB,GAAIrY,KAAKY,IAAIs8B,GAAM0V,EAKvB,MAFAF,GAAQJ,EACRK,EAAQF,EACD,OAAS90C,EAAE40C,QAAQC,GAAW,KAAOzxC,EAAEwxC,QAAQC,GAAW,KAAOn6B,EAAEk6B,QAAQC,GAGtF,MAAIN,GACO,OAASv0C,EAAE40C,QAAQC,GAAW,KAAOzxC,EAAEwxC,QAAQC,GAE/C,OAAS70C,EAAE40C,QAAQC,GAAW,KAAOzxC,EAAEwxC,QAAQC,GA1C9B,GAC9BzrC,GAKFma,EALEna,MAAOw7B,EAKTrhB,EALSqhB,MAAO4P,EAKhBjxB,EALgBixB,QAASC,EAKzBlxB,EALyBkxB,QAASI,EAKlCtxB,EALkCsxB,QAASK,EAK3C3xB,EAL2C2xB,QAASC,EAKpD5xB,EALoD4xB,WAAYC,EAKhE7xB,EALgE6xB,OAChEV,EAIAnxB,EAJAmxB,KAAMW,EAIN9xB,EAJM8xB,kBAAmBC,EAIzB/xB,EAJyB+xB,cACzBt0C,EAGAuiB,EAHAviB,YAAau0C,EAGbhyB,EAHagyB,YAAaC,EAG1BjyB,EAH0BiyB,aAAcC,EAGxClyB,EAHwCkyB,eACxCC,EAEAnyB,EAFAmyB,KAAMC,EAENpyB,EAFMoyB,UACNC,EACAryB,EADAqyB,cAAeC,EACftyB,EADesyB,WAGfN,KACAA,GAAe,QACfC,IACAA,GAAgB,OACpB,IAAIM,GAAW,KAAOL,EAAiBN,EAAa,KAAKP,QAAQC,GAE7DE,EAAQ,EAAGC,EAAQ,EAgCnBvzC,EAAQ,EACRizC,KACAjzC,GAAS,SAAW4zC,EAAoBhzC,KAAKS,GAAKwyC,GAAeV,QAAQC,GAAW,KAAOQ,EAAoB,oBAAsBC,EAAgB,cAEzJ,KAAK,GAAIS,GAAO,EAAGA,EAAOX,IAAUW,EAAM,CAElCH,IAAen0C,GAASm0C,GAE5Bn0C,GAAS,cAAgBs0C,EAAO,OAE5BJ,GACIA,EAAUK,WACVv0C,WAAiBk0C,EAAUK,SAA3B,0BAKR,KAAK,GADDC,IAAc,EACTC,EAAY,EAAGA,EAAY9sC,EAAMrN,SAAUm6C,EAAW,CAC3D,GAAIjxC,GAAOmE,EAAM8sC,GAAWjxC,IAC5B,IAAoB,IAAhBA,EAAKlJ,OAAT,CAEA0F,GAAS,cAAgBs0C,EAAO,SAAWG,EAAY,MAGvD,KAAK,GADDC,IAAiB,EAAAC,EAAAC,cAAapxC,EAAMjE,GAC/Bs1C,EAAgB,EAAGA,EAAgBH,EAAep6C,SAAUu6C,EAAe,CAChF,GAAIC,GAAeJ,EAAeG,EAClC,IAA4B,IAAxBC,EAAax6C,OAEjB,GAAoB,EAAhBu6C,EACA70C,GAAS,qBADb,CAMA,GAFAA,GAAS6yC,EAAaiC,EAAa,IAAI,GAAQ,OAE3Cb,IAASO,EAAe,CACxBA,GAAgB,CAChB,IAAIO,GAAUd,EAAKe,OAASf,EAAKgB,QAAWhB,EAAKiB,UAAYZ,CAC7Dt0C,uBAA4B+0C,EAA5B,eAAkDd,EAAKgB,QAAvD,UACAj1C,GAAS,OAAS+0C,EAAQ5B,QAAQC,GAAW,WAGjDpzC,GAAS8zC,CACT,KAAK,GAAIz5C,GAAI,EAAGA,EAAIy6C,EAAax6C,SAAUD,EACvC2F,GAAS6yC,EAAaiC,EAAaz6C,IAAI,GAC9B,GAALA,IACA2F,GAAS,IAAMq0C,GACV,GAALh6C,GAAW44C,IACXjzC,GAAS,KAAOyzC,GACpBzzC,GAAS,MAEbA,IAAS+zC,KAIbG,GACIA,EAAUiB,YACVn1C,WAAiBk0C,EAAUiB,UAA3B,4BAIJf,IAAap0C,GAASo0C,GAI9B,MAAOp0C,GAGJ,QAASI,GAAuBtB,EAAUC,EAASC,EAAIE,EAAUG,EAAcE,EAAaE,EAAWQ,EAAML,GAChH,GAAIw1C,IAAK,CAELt2C,GAASk1C,gBAAkB,IAC3Bv0C,EAAU,uDAAwD,UAClE21C,GAAK,GAEO,cAAZp2C,EAAGmC,MAAoC,oBAAZnC,EAAGmC,MAC1BnC,EAAGq2C,eAAiB,IACpB51C,EAAU,wCAAyC,UACnD21C,GAAK,GAGG,oBAAZp2C,EAAGmC,MACCnC,EAAGs2C,cAAgB,IACnB71C,EAAU,uCAAwC,UAClD21C,GAAK,IAGTp2C,EAAG00C,WAAa,GAAK10C,EAAG00C,WAAa,OACrCj0C,EAAU,wCAAyC,UACnD21C,GAAK,IAELp2C,EAAG20C,QAAU,IAAkB,EAAZ30C,EAAG20C,WAAiB30C,EAAG20C,UAC1Cl0C,EAAU,6BAA8B,UACxC21C,GAAK,GAELp2C,EAAGu2C,SAAW,IACd91C,EAAU,kCAAmC,UAC7C21C,GAAK,GAELp2C,EAAGi0C,OACCj0C,EAAG40C,mBAAqB,IACxBn0C,EAAU,2CAA4C,UACtD21C,GAAK,GAELp2C,EAAG60C,eAAiB,IACpBp0C,EAAU,yCAA0C,UACpD21C,GAAK,IAITt2C,EAAS02C,kBACc,KAAnBx2C,EAAGy2C,aAAsBC,MAAM12C,EAAGy2C,gBAClCh2C,EAAU,sCAAuC,UACjD21C,GAAK,GAIRA,GACDn1C,GAAK,EAGT,IAAI01C,KACY,eAAZ32C,EAAGmC,KACHw0C,GAAW,EAAAhB,EAAAiB,KAAI12C,EAAUG,GAAc,GACpB,qBAAZL,EAAGmC,MACNnC,EAAG62C,SACH32C,GAAW,EAAA42C,EAAAvnC,QAAOrP,GAAWF,EAAG62C,OAAJC,EAAA7uC,mBAChC0uC,GAAW,EAAAhB,EAAAoB,eAAc72C,EAAUF,EAAGq2C,cAAHS,EAAA7uC,kBAAqC,EAAMjI,EAAGg3C,SAAHF,EAAA7uC,iBAAgCjI,EAAGi3C,SAA2B,UAAjBj3C,EAAGk3C,WAAuB,IAClI,sBAAZl3C,EAAGmC,MACNnC,EAAG62C,SACH32C,GAAW,EAAA42C,EAAAvnC,QAAOrP,EAAUF,EAAG62C,OAAHC,EAAA7uC,mBAChC0uC,GAAW,EAAAhB,EAAAoB,eAAc72C,EAAUF,EAAGq2C,cAAHS,EAAA7uC,kBAAqC,EAAOjI,EAAGg3C,SAAHF,EAAA7uC,iBAAgCjI,EAAGi3C,SAA2B,UAAjBj3C,EAAGk3C,WAAuB,IACnI,oBAAZl3C,EAAGmC,OACNnC,EAAG62C,SACH32C,GAAW,EAAA42C,EAAAvnC,QAAOrP,GAAWF,EAAG62C,OAAJC,EAAA7uC,mBAChC0uC,GAAW,EAAAhB,EAAAwB,UAASj3C,EAAUF,EAAGs2C,aAAHQ,EAAA7uC,iBAAoCjI,EAAGo3C,aAGzE,EAAAzB,EAAA0B,gBAAeV,EAAU32C,EAAGs3C,cAAHR,EAAA7uC,iBAEzB,IAAIsvC,GAAY,CACe,UAA3Bz3C,EAAS03C,gBACTD,EAAY,GAEhB,IAAIv2C,GACA,4BACyBjB,EACzB,uBAAyBC,EAAGmC,KAC5B,uBAAyBw0C,EAASr7C,OAClC,uBAAyB0E,EAAG20C,OAC5B,uBAAyB30C,EAAGu2C,QAAU,IAAMz2C,EAAS03C,cACrD,WAEAx3C,GAAGy3C,mBAAmBn8C,SAAQ0F,GAAOhB,EAAGy3C,oBAE5Cz2C,GAAS4yC,GACLjrC,MAAOguC,EACPxS,MAAO,EAAA2S,EAAA7uC,iBACP8rC,QAAS,EACTC,QAAS,EACTI,QAAS,EACTK,QAASz0C,EAAGu2C,QAAUgB,EACtB7C,WAAY10C,EAAG00C,WACfC,OAAQ30C,EAAG20C,OACXV,KAAMj0C,EAAGi0C,KACTgB,OAAMn1C,EAAS02C,kBACXR,OAAQhxC,OAAOhF,EAAGy2C,aAClBR,QAASn2C,EAAS43C,mBAClBxB,UAAWl2C,EAAGk2C,WAElBhB,YAAWl1C,EAAGk1C,YACVK,SAAUz1C,EAAS63C,qBACnBxB,UAAWr2C,EAAS83C,uBAExBhD,kBAAmB50C,EAAG40C,kBACtBC,cAAe70C,EAAG60C,cAClBt0C,YAAaA,EACbu0C,YAAah1C,EAASg1C,YACtBC,aAAcj1C,EAASi1C,aACvBC,eAAgBl1C,EAASk1C,eAEzBG,cAAen1C,EAAGm1C,cAClBC,YAAap1C,EAAGo1C,cAGhBp1C,EAAG63C,iBAAiBv8C,SAAQ0F,GAAOhB,EAAG63C,kBAE1C52C,EAAKD,Gbk3VR7G,OAAOI,eAAe8E,EAAS,cAC3BzE,OAAO,IAEXyE,Ea7lWeu0C,mBb8lWfv0C,Ea7+Ve+B,wBAjIhB,IAAAu0C,GAAA98C,EAAA,IACAi+C,EAAAj+C,EAAA,Ibm2Wa,WAC4B,mBAAzBwI,wBAIXA,qBAAqBmP,Saz1WVojC,Eby1WqC,mBAAoB,uEAEpEvyC,qBAAqBmP,Sa1uWVpP,Eb0uW2C,yBAA0B,6EAO/E,SAAUxD,EAAQyB,EAASxG,Gcp3WjC,Yd45WC,SAASkK,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,Gcn5WjF,QAAS2pC,GAAKmL,EAAIC,EAAItO,EAAIC,GAC7B,MAAO9nC,MAAKkhC,MAAM2G,EAAKqO,IAAOrO,EAAKqO,IAAOpO,EAAKqO,IAAOrO,EAAKqO,IAI/D,QAASC,GAAQxT,EAAQxgC,EAAIC,GACzB,GAAe,OAAXugC,EACA,OAAO,CACX,IAAIxgC,EAAGgE,IAAM/D,EAAG+D,GAAKhE,EAAGkE,IAAMjE,EAAGiE,EAC7B,OAAO,CACX,IAAI8G,GAAU,GAAI7G,GAAAjF,QAAWkF,OAC7B4G,GAAQ0e,SAAS1pB,EAAIC,GAAKkE,EAAAjF,QAAW2F,SAASC,WAAW,GACzDkG,EAAQpG,SAAS47B,EAAQr8B,EAAAjF,QAAW2F,SAASoG,QAAQ,EACrD,IAAIzQ,GAAS,GAAI2J,GAAAjF,QAAW8F,QAE5B,IADAgG,EAAQ/F,QAAQd,EAAAjF,QAAWgG,SAASwd,eAAgBloB,EAAQ2J,EAAAjF,QAAWsF,aAAaC,WAAYN,EAAAjF,QAAWsF,aAAaC,YAC5F,IAAxBjK,EAAO0lB,aAAoB,CAC3B,GAAInlB,GAAQP,EAAOuL,SAAS,GACxBgnC,EAAShyC,EAAM4K,SACnB,IAAsB,IAAlBonC,EAAOz1C,OAAc,CACrB,GAAIy1C,EAAO,GAAG/oC,IAAMhE,EAAGgE,GAAK+oC,EAAO,GAAG/oC,IAAM/D,EAAG+D,GAAK+oC,EAAO,GAAG7oC,IAAMlE,EAAGkE,GAAK6oC,EAAO,GAAG7oC,IAAMjE,EAAGiE,EAC3F,OAAO,CACX,IAAI6oC,EAAO,GAAG/oC,IAAM/D,EAAG+D,GAAK+oC,EAAO,GAAG/oC,IAAMhE,EAAGgE,GAAK+oC,EAAO,GAAG7oC,IAAMjE,EAAGiE,GAAK6oC,EAAO,GAAG7oC,IAAMlE,EAAGkE,EAC3F,OAAO,GAGnB,OAAO,EAGX,QAASq4B,GAAah0B,GAClB,MACIA,GAAYjR,QAAU,GACtBiR,EAAY,GAAGvE,IAAMuE,EAAYA,EAAYjR,OAAS,GAAG0M,GACzDuE,EAAY,GAAGrE,IAAMqE,EAAYA,EAAYjR,OAAS,GAAG4M,EAIjE,QAAS+vC,GAAkBtvC,GAAO,GAAA5C,IAAA,EAAAC,GAAA,EAAAC,EAAA9F,MAAA,KAC9B,OAAA+F,GAAAC,EAAiBwC,EAAjBvC,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAArF,MAAA8E,GAAA,MAASvB,GAAT0B,EAAAtL,KACI4J,GAAK3K,KAAK2K,EAAK,KAFW,MAAA1H,GAAAkJ,GAAA,EAAAC,EAAAnJ,EAAA,aAAAiJ,GAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,KAAAC,KAalC,QAASiyC,GAAW1T,EAAQ77B,GACxB,GAAqB,IAAjBA,EAAMrN,OACN,QAEJ,IAAIoK,GAAciD,EAAM,EACpB43B,GAAa76B,IACbA,EAAY7L,KAAK6L,EAAY,GACjC,IAAIyyC,GAAezyC,EAAYA,EAAYpK,OAAS,EACpDqN,GAAM,KAIN,KAFA,GAAIyvC,MACAC,EAAU1vC,EAAMrN,OAAS,EAXEg9C,EAAA,WAiB3B,IAAK,GAJDC,GAAmB,KACnBC,EAAoB,KACpBC,EAAmB,KACnBC,GAAiB,EAhBMC,EAAA,SAiBlBlD,GAEL,QAAS55C,GAAM+8C,GACX,GAAItvC,GAAQ9E,EAAKo0C,GACbjM,GAAQwL,EAAanwC,EAAIsB,EAAMtB,IAAMmwC,EAAanwC,EAAIsB,EAAMtB,IAAMmwC,EAAajwC,EAAIoB,EAAMpB,IAAMiwC,EAAajwC,EAAIoB,EAAMpB,EAC1H,QAAyB,OAArBuwC,GAA6B9L,EAAO8L,KACpCF,EAAmB9C,EACnB+C,EAAoBI,EACpBH,EAAmB9L,EACnB+L,GAAiB,GACV,GATf,GAAIl0C,GAAOmE,EAAM8sC,EAcjB,IAAIlV,EAAa/7B,GACb,IAAK,GAAIo0C,GAAa,EAAGA,EAAap0C,EAAKlJ,SAAUs9C,EACjD/8C,EAAM+8C,OACHp0C,GAAKlJ,SACZO,EAAM,GACFA,EAAM2I,EAAKlJ,OAAS,KACpBo9C,GAAiB,KArBpBjD,EAAY,EAAGA,EAAY9sC,EAAMrN,SAAUm6C,EAAWkD,EAAtDlD,EAyBT,IAAIjxC,GAAOmE,EAAM4vC,EACjB5vC,GAAM4vC,MACNF,GAAW,CACX,IAAIQ,SACAtY,GAAa/7B,IACbq0C,EAAUb,EAAQxT,EAAQ2T,EAAc3zC,EAAKg0C,IAC7Ch0C,EAAOA,EAAKzG,MAAMy6C,EAAmBh0C,EAAKlJ,QAAQw9C,OAAOt0C,EAAKzG,MAAM,EAAGy6C,IACvEh0C,EAAK3K,KAAK2K,EAAK,MAEfq0C,GAAU,EACNH,IACAl0C,EAAOA,EAAKzG,QACZyG,EAAKu2B,YAGT8d,GACAT,EAAYv+C,KAAK6L,GACjBA,EAAclB,EACd2zC,EAAezyC,EAAYA,EAAYpK,OAAS,KAGhDoK,EAAcA,EAAYozC,OAAOt0C,GACjC2zC,EAAezyC,EAAYA,EAAYpK,OAAS,KApDjD+8C,EAAU,GAAGC,GAuDpBF,GAAYv+C,KAAK6L,EAGjB,KAAK,GADDixC,MACKt7C,EAAI,EAAGA,EAAI+8C,EAAY98C,SAAUD,EAAG,CACzC,GAAImJ,GAAO4zC,EAAY/8C,EACvBs7C,GAAS98C,MACL2K,KAAMA,EACNgJ,aAAcwqC,EAAQxT,EAAQhgC,EAAK,GAAIA,EAAKA,EAAKlJ,OAAS,MAIlE,MAAOq7C,GAKJ,QAASoC,GAAO74C,EAAU84C,EAAWC,EAAUC,GAClDD,GAAsB,GAItB,KAHA,GAAIE,IAAU,EAAArC,EAAAvnC,QAAOrP,GAAW84C,EAAY,GACxCxU,EAAS2U,EAAQp7C,MAAM,GACvBq7C,KACsB,IAAnBD,EAAQ79C,QAAc,CACzB,IAAK49C,EACD,IAAK,GAAI79C,GAAI,EAAGA,EAAI89C,EAAQ79C,SAAUD,EAClC89C,EAAQ99C,GAAG0/B,SACnBqe,GAAWD,EAAQL,OAAOM,GAC1BD,GAAU,EAAArC,EAAAvnC,QAAO4pC,GAAUH,EAAYC,GAG3C,MADAhB,GAAkBmB,GACXlB,EAAW1T,EAAQ4U,GAMvB,QAASrC,GAAc72C,EAAU84C,EAAWK,EAAUC,EAAOL,EAAUC,EAAOK,GAEjFN,GAAsB,IACtBK,EAAQ13C,KAAKa,IAAI62C,EAAON,EAExB,IAAIQ,GAAeR,EACfI,KACAK,EAAYT,EAAYC,EAExBE,SACA3U,EAAS,KACTkV,SACAC,QAgBJ,KAdIN,GACAF,GAAU,EAAArC,EAAAvnC,QAAOrP,GAAW84C,EAAY,GACpCO,IACA/U,GAAS,EAAAsS,EAAA3nC,MAAKgqC,GAAS,EAAArC,EAAAvnC,QAAOrP,IAAYo5C,EAAQN,EAAY,MAClEU,GAAcD,EACdE,GAAeT,IAEfC,GAAU,EAAArC,EAAAvnC,QAAOrP,EAAU84C,EAAY,GACnCO,IACA/U,GAAS,EAAAsS,EAAA3nC,OAAK,EAAA2nC,EAAAvnC,QAAOrP,EAAUo5C,EAAQN,EAAY,GAAIG,IAC3DO,EAAaD,EACbE,EAAcT,GAGXM,GAAgBF,GAAO,CAC1B,GAAIK,EACA,IAAK,GAAIt+C,GAAI,EAAGA,EAAI89C,EAAQ79C,SAAUD,EAClC89C,EAAQ99C,GAAG0/B,SACnBqe,GAAWD,EAAQL,OAAOM,EAC1B,IAAIQ,GAAYJ,EAAeC,CAC/B,IAAIG,EAAYN,GAASA,EAAQE,EAAe,EAAG,CAE/C,GADAL,GAAU,EAAArC,EAAAvnC,QAAO4pC,EAASG,EAAQE,GAC9BG,EACA,IAAK,GAAIt+C,GAAI,EAAGA,EAAI89C,EAAQ79C,SAAUD,EAClC89C,EAAQ99C,GAAG0/B,SACnBqe,GAAWD,EAAQL,OAAOM,EAC1B,OAEJI,EAAeI,EACXJ,GAAgBF,IAChBH,GAAU,EAAArC,EAAAvnC,QAAO4pC,EAASO,IAGlC,MADAzB,GAAkBmB,GACXlB,EAAW1T,EAAQ4U,GAKvB,QAASxC,GAAI12C,EAAUG,EAAc64C,GAExC,IAAK,GADDE,MACK/9C,EAAI,EAAGA,EAAI6E,EAAS5E,SAAUD,EAAG,CACtC,GAAImJ,GAAOtE,EAAS7E,GAAG0C,MAAM,EACzBm7C,IACA10C,EAAKu2B,UACTv2B,EAAK3K,KAAK2K,EAAK,IACf40C,EAASv/C,KAAK2K,GAP6B,GAAAgC,IAAA,EAAAC,GAAA,EAAAC,EAAAvG,MAAA,KAS/C,OAAAwG,GAAAC,EAAiBvG,EAAjB+F,OAAAC,cAAAG,GAAAG,EAAAC,EAAAN,QAAArF,MAAAuF,GAAA,MAAShC,GAATmC,EAAA/L,KACIw+C,GAASv/C,KAAK2K,EAAKzG,UAVwB,MAAAjB,GAAA2J,GAAA,EAAAC,EAAA5J,EAAA,aAAA0J,GAAAI,EAAAE,QAAAF,EAAAE,SAAA,WAAAL,EAAA,KAAAC,IAY/C,IAAK,GADDlI,GAAS05C,EAAW,KAAMkB,GACrB/9C,EAAI,EAAGA,EAAImD,EAAOlD,SAAUD,EACjCmD,EAAOnD,GAAGmS,YAAc+yB,EAAa/hC,EAAOnD,GAAGmJ,KACnD,OAAOhG,GAGJ,QAAS24C,GAASj3C,EAAUo2C,EAAchH,GAC7C,IAAKpvC,EAAS5E,SAAW4E,EAAS,GAAG5E,OACjC,QACJ,IAAIkpC,IAAS,EAAAsS,EAAAppC,eAAcxN,GACvB25C,GAAMrV,EAAO72B,KAAO62B,EAAO12B,MAAQ,EACnCgsC,GAAMtV,EAAO32B,KAAO22B,EAAOz2B,MAAQ,EACnCkE,EAAI06B,EAAKkN,EAAIC,EAAItV,EAAO72B,KAAM62B,EAAO32B,MAAQyoC,EAE7C92C,EAAIu6C,EAAAtT,KAAK2C,oBAAqByQ,EAAIC,GACtCt6C,GAAIu6C,EAAAtT,KAAKyC,UAAW1pC,EAAG8vC,EAAQ1tC,KAAKS,GAAK,KACzC7C,EAAIu6C,EAAAtT,KAAKwC,aAAczpC,IAAKq6C,GAAKC,GAOjC,KAAK,GANDE,GAAY,SAACz6C,EAAGoD,GAChB,GAAIlD,GAAIs6C,EAAAE,KAAK7L,kBAAmB7uC,EAAGoD,GAAInD,EACvC,QAASwI,EAAGvI,EAAE,GAAIyI,EAAGzI,EAAE,KAGvBy6C,KACKv3C,EAAIm3C,EAAK7nC,EAAGtP,EAAIm3C,EAAK7nC,EAAGtP,GAAoB,EAAf2zC,EAClC4D,EAAKrgD,KACDmgD,EAAUH,EAAK5nC,EAAGtP,GAClBq3C,EAAUH,EAAK5nC,EAAGtP,GAClBq3C,EAAUH,EAAK5nC,EAAGtP,EAAI2zC,GACtB0D,EAAUH,EAAK5nC,EAAGtP,EAAI2zC,GAM9B,KAAK,GAFD8C,MACAe,EAAYvE,EAAasE,EAAMh6C,GAC1B7E,EAAI,EAAGA,EAAI8+C,EAAU7+C,OAAQD,GAAK,EACvC+9C,EAASv/C,KAAKsgD,EAAU9+C,GAC5B,OAAO68C,GAAW,KAAMkB,GAGrB,QAASgB,GAAOl6C,EAAUm6C,EAAanE,GAC1C,GAAImE,GAAe,GAAKA,GAAe,IACnC,QAEJ,IAAIvuC,MACAwuC,GAAY,EAAAxD,EAAAjrC,sBAAqBC,EAAc5L,GAC/Cq6C,EAAiBruC,OAAOC,QAAQ,GAChCquC,EAAoBtuC,OAAOC,QAAQ,GACnCsuC,EAAqBvuC,OAAOC,QAAQ,EACxCL,GAAajS,KAAK0gD,GAClBzuC,EAAajS,KAAK2gD,GAClB1uC,EAAajS,KAAK4gD,EAElB,IAAIC,GAAY,EAAGC,EAAY,CAO/BzuC,QAAO0uC,MACH,SACA,QAAS,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,WAEzGF,EAAWC,EAAWL,EAAU,GAAIA,EAAU,GAAIA,EAAU,GAC5DD,EAAanE,sBACbqE,EAAgBC,EAAmBC,GAK3C,KAAK,GAFDj8C,IAAS,EAAAs4C,EAAAzpC,kBAAiBvB,EAAcyuC,EAAgBC,EAAmBC,GAEtEp/C,EAAI,EAAGA,EAAIyQ,EAAaxQ,SAAUD,EACvC6Q,OAAO2uC,MAAM/uC,EAAazQ,GAE9B,OAAOmD,GAGJ,QAAS64C,GAAeV,EAAUmE,GACrC,GAAIC,GAAaD,EAAUA,EACvBE,EAAU,SAACh3C,EAAIC,GAAL,OAAaD,EAAGgE,EAAI/D,EAAG+D,IAAMhE,EAAGgE,EAAI/D,EAAG+D,IAAMhE,EAAGkE,EAAIjE,EAAGiE,IAAMlE,EAAGkE,EAAIjE,EAAGiE,IAFvClB,GAAA,EAAAC,GAAA,EAAAC,EAAA/G,MAAA,KAG9C,OAAAgH,GAAAC,EAAoBuvC,EAApBvwC,OAAAC,cAAAW,GAAAG,EAAAC,EAAAd,QAAArF,MAAA+F,GAAA,EAA8B,CAG1B,IAAK,GAHAi0C,GAAqB9zC,EAAAvM,MACtB4J,EAAOy2C,EAAQz2C,KACf02C,GAAW12C,EAAK,IACXnJ,EAAI,EAAGA,EAAImJ,EAAKlJ,OAAS,IAAKD,EAAG,CACtC,GAAI8/C,GAAKH,EAAQx2C,EAAKnJ,GAAI6/C,EAAQA,EAAQ5/C,OAAS,GAC/C6/C,GAAK,GAAKA,GAAMJ,GAChBG,EAAQrhD,KAAK2K,EAAKnJ,IAE1B6/C,EAAQrhD,KAAK2K,EAAKA,EAAKlJ,OAAS,IAChC2/C,EAAQz2C,KAAO02C,GAZ2B,MAAAp+C,GAAAmK,GAAA,EAAAC,EAAApK,EAAA,aAAAkK,GAAAI,EAAAN,QAAAM,EAAAN,SAAA,WAAAG,EAAA,KAAAC,KAiB3C,QAASk0C,GAA4BzyC,GACxC,GAAInK,KACJ,IAAc,OAAVmK,EACA,IAAK,GAAItN,GAAI,EAAGA,EAAIsN,EAAMrN,SAAUD,EAChCmD,EAAO3E,KAAK8O,EAAMtN,GAAGmJ,KAC7B,OAAOhG,GAMJ,QAASo3C,GAAayF,EAAY96C,GACrC,GAA2B,IAAvBA,EAAYjF,OACZ,OAAQ+/C,EACZ,IAAsB,mBAAXnvC,QAKP,MAJKovC,KACD76C,UAAU,iFAAkF,UAAU,GACtG66C,GAAwB,GAErBD,CAGX,IAAIvvC,MAEAyvC,GAAc,EAAAzE,EAAAjrC,sBAAqBC,GAAeuvC,IAClDG,GAAe,EAAA1E,EAAAjrC,sBAAqBC,EAAcvL,GAElDk7C,EAAWvvC,OAAOC,QAAQ,GAC1BouC,EAAiBruC,OAAOC,QAAQ,GAChCquC,EAAoBtuC,OAAOC,QAAQ,GACnCsuC,EAAqBvuC,OAAOC,QAAQ,EACxCL,GAAajS,KAAK4hD,GAClB3vC,EAAajS,KAAK0gD,GAClBzuC,EAAajS,KAAK2gD,GAClB1uC,EAAajS,KAAK4gD,GAOlBvuC,OAAO0uC,MACH,eACA,QAAS,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,WAClGW,EAAY,GAAIA,EAAY,GAAIA,EAAY,GAAIC,EAAa,GAAIA,EAAa,GAAIA,EAAa,GAAIC,EAAUlB,EAAgBC,EAAmBC,IAEjJvuC,OAAOS,QAAQ8uC,GAAY,KAAOC,IAClCj7C,UAAU,sFAAuF,UAAU,GAC3Gi7C,GAAwB,EAK5B,KAAK,GAFDl9C,IAAS,EAAAs4C,EAAA/pC,sBAAqBjB,EAAcyuC,EAAgBC,EAAmBC,GAE1Ep/C,EAAI,EAAGA,EAAIyQ,EAAaxQ,SAAUD,EACvC6Q,OAAO2uC,MAAM/uC,EAAazQ,GAE9B,OAAOmD,GdmhWVrE,OAAOI,eAAe8E,EAAS,cAC3BzE,OAAO,IAEXyE,Ecj4WestC,Odk4WfttC,Ec9vWe05C,Sd+vWf15C,Ec5uWe03C,gBd6uWf13C,EczrWeu3C,Md0rWfv3C,EczqWe83C,Wd0qWf93C,EczoWe+6C,Sd0oWf/6C,EcrmWeg4C,iBdsmWfh4C,EcrlWe+7C,8BdslWf/7C,Ec3kWeu2C,cArUhB,IAAAtlC,GAAAzX,EAAA,Gdo5WKsP,EAAepF,EAAuBuN,Gcn5W3CypC,EAAAlhD,EAAA,IAEAi+C,EAAAj+C,EAAA,EAEAA,GAAQ,GA6TR,IAAIyiD,IAAwB,EACxBI,GAAwB,Gdg/Wf,WAC4B,mBAAzBr6C,wBAIXA,qBAAqBmP,ScjzXVm8B,EdizXyB,OAAQ,uDAE5CtrC,qBAAqBmP,Sc9yXjBwnC,Ed8yXmC,UAAW,uDAElD32C,qBAAqBmP,SczxXjB+vB,EdyxXwC,eAAgB,uDAE5Dl/B,qBAAqBmP,ScnxXjBynC,EdmxX6C,oBAAqB,uDAEtE52C,qBAAqBmP,ScxwXjB0nC,EdwwXsC,aAAc,uDAExD72C,qBAAqBmP,ScvrXVuoC,EdurX2B,SAAU,uDAEhD13C,qBAAqBmP,SctqXVumC,EdsqXkC,gBAAiB,uDAE9D11C,qBAAqBmP,ScpnXVomC,EdonXwB,MAAO,uDAE1Cv1C,qBAAqBmP,ScrmXV2mC,EdqmX6B,WAAY,uDAEpD91C,qBAAqBmP,SctkXV4pC,EdskX2B,SAAU,uDAEhD/4C,qBAAqBmP,ScniXV6mC,EdmiXmC,iBAAkB,uDAEhEh2C,qBAAqBmP,ScphXV4qC,EdohXgD,8BAA+B,uDAE1F/5C,qBAAqBmP,Sc9gXtB8qC,Ed8gXsD,wBAAyB,uDAE9Ej6C,qBAAqBmP,Sc/gXtBkrC,Ed+gXsD,wBAAyB,uDAE9Er6C,qBAAqBmP,Sc/gXVolC,Ed+gXiC,eAAgB,6DAO3D,SAAUh4C,EAAQyB,EAASxG,Ge52XjC,GAAA8iD,GAAAjrC,GAmBA,SAAAkrC,GACA,GASAC,GACAC,EAVAC,EAAA,QACAC,EAAA,iBACAC,EAAA,SACAC,EAAA,UACAC,EAAA,IAEAC,EAAA,SAAAh+C,EAAAC,GACA,MAAAD,GAAAC,GAIAg+C,GAAkBlrC,MAClBmrC,EAAA,WACA,OAAAjhD,GAAA,EAAAkhD,EAAAv6C,KAAA1G,OAA6CD,EAAAkhD,EAAQlhD,IACrD,sBAAA2G,MAAA3G,GACA,MAAA2G,MAAA3G,IAIAmhD,EAAA,WAEA,IADA,GAAAnhD,GAAA2G,KAAA1G,SACAD,GACA,sBAAA2G,MAAA3G,GACA,MAAA2G,MAAA3G,IAkBAohD,EAAA,SAAAviD,EAAAwiD,GACAxiD,EAAAyiD,OAAAziD,EACA,IAMAgC,GALA0gD,EAAAd,EACAe,EAAAn7C,MAAAtH,UAAA2D,MAAA3E,KAAAgqB,UAAA,GACA05B,EAAAL,EAAAK,UAAA5iD,GACAsd,EAAA,EAGAulC,KACAj/C,KACA6oC,KACAhkB,EAAAk5B,CAEAlV,GAAA2V,eACA3V,EAAA6V,cACAX,EAAA3hD,EACA4hD,EAAA,CACA,QAAAzgD,GAAA,EAAAkhD,EAAAO,EAAAxhD,OAAkDD,EAAAkhD,EAAQlhD,IAAA,UAAAyhD,GAAAzhD,KAC1D0hD,EAAAljD,KAAAijD,EAAAzhD,GAAA2hD,QACAF,EAAAzhD,GAAA2hD,OAAA,IACAl/C,EAAAg/C,EAAAzhD,GAAA2hD,QAAAF,EAAAzhD,IAIA,KADA0hD,EAAAhjB,KAAAqiB,GACAW,EAAAvlC,GAAA,GAGA,GAFAtb,EAAA4B,EAAAi/C,EAAAvlC,MACAmvB,EAAA9sC,KAAAqC,EAAAH,MAAA2gD,EAAAG,IACAf,EAEA,MADAA,GAAAc,EACAjW,CAGA,KAAAtrC,EAAA,EAAuBA,EAAAkhD,EAAQlhD,IAE/B,GADAa,EAAA4gD,EAAAzhD,GACA,UAAAa,GACA,GAAAA,EAAA8gD,QAAAD,EAAAvlC,GAAA,CAEA,GADAmvB,EAAA9sC,KAAAqC,EAAAH,MAAA2gD,EAAAG,IACAf,EACA,KAEA,GAIA,IAHAtkC,IACAtb,EAAA4B,EAAAi/C,EAAAvlC,IACAtb,GAAAyqC,EAAA9sC,KAAAqC,EAAAH,MAAA2gD,EAAAG,IACAf,EACA,YAEyB5/C,OAEzB4B,GAAA5B,EAAA8gD,QAAA9gD,MAIA,IADAyqC,EAAA9sC,KAAAqC,EAAAH,MAAA2gD,EAAAG,IACAf,EACA,KAMA,OAFAA,GAAAc,EACAf,EAAAl5B,EACAgkB,EAGA8V,GAAAQ,QAAAZ,EAaAI,EAAAK,UAAA,SAAA5iD,GACA,GAEAoE,GACA4+C,EACA5qC,EACAjX,EACAkhD,EACA19C,EACAs+C,EACAC,EATAC,EAAAnjD,EAAAojD,MAAArB,GACAnjD,EAAAujD,EASAkB,GAAAzkD,GACA6tC,IACA,KAAAtrC,EAAA,EAAAkhD,EAAAc,EAAA/hD,OAAsCD,EAAAkhD,EAAQlhD,IAAA,CAE9C,IADA+hD,KACAv+C,EAAA,EAAAs+C,EAAAI,EAAAjiD,OAAuCuD,EAAAs+C,EAAQt+C,IAI/C,IAHA/F,EAAAykD,EAAA1+C,GAAAsS,EACA+rC,GAAApkD,EAAAukD,EAAAhiD,IAAAvC,EAAAqjD,IACA7pC,EAAA,EACAA,KACAhU,EAAA4+C,EAAA5qC,GACAhU,IACA8+C,EAAAvjD,KAAAyE,GACAqoC,IAAAmS,OAAAx6C,EAAA2b,OAIAsjC,GAAAH,EAEA,MAAAzW,IA2BA8V,EAAAe,GAAA,SAAAtjD,EAAA+f,GAEA,GADA/f,EAAAyiD,OAAAziD,GACA,kBAAA+f,GACA,mBAGA,QADAojC,GAAAnjD,EAAAojD,MAAApB,GACA7gD,EAAA,EAAAkhD,EAAAc,EAAA/hD,OAA0CD,EAAAkhD,EAAQlhD,KAClD,SAAAnB,GAIA,OADAujD,GAFAJ,EAAAnjD,EAAAojD,MAAArB,GACAnjD,EAAAujD,EAEAhhD,EAAA,EAAAkhD,EAAAc,EAAA/hD,OAAkDD,EAAAkhD,EAAQlhD,IAC1DvC,IAAAqY,EACArY,IAAAuB,eAAAgjD,EAAAhiD,KAAAvC,EAAAukD,EAAAhiD,MAAAvC,EAAAukD,EAAAhiD,KAAqF8V,MAGrF,KADArY,EAAAmhB,EAAAnhB,EAAAmhB,MACA5e,EAAA,EAAAkhD,EAAAzjD,EAAAmhB,EAAA3e,OAA4CD,EAAAkhD,EAAQlhD,IAAA,GAAAvC,EAAAmhB,EAAA5e,IAAA4e,EAAA,CACpDwjC,GAAA,CACA,QAEAA,GAAA3kD,EAAAmhB,EAAApgB,KAAAogB,IACaojC,EAAAhiD,GAEb,iBAAA2hD,IACAA,QACA/iC,EAAA+iC,aAoBAP,EAAAxiC,EAAA,SAAAra,GACA,GAAA89C,MAAA3/C,MAAA3E,KAAAgqB,UAAA,EACA,mBACAq5B,EAAA1gD,MAAA,MAAA6D,EAAA,MAAAk5C,OAAA4E,GAAA5E,UAAA/6C,MAAA3E,KAAAgqB,UAAA,OASAq5B,EAAAX,KAAA,WACAA,EAAA,GAgBAW,EAAAvb,GAAA,SAAAyc,GACA,MAAAA,GACA,GAAAC,QAAA,gBAAAD,EAAA,iBAAAE,KAAAhC,GAEAA,GAWAY,EAAAqB,IAAA,WACA,MAAAjC,GAAAyB,MAAArB,IAoBAQ,EAAAsB,IAAAtB,EAAAuB,OAAA,SAAA9jD,EAAA+f,GACA,IAAA/f,EAEA,YADAuiD,EAAAQ,QAAAZ,GAAoClrC,MAGpC,IAAAksC,GAAAnjD,EAAAojD,MAAApB,EACA,IAAAmB,EAAA/hD,OAAA,EACA,OAAAD,GAAA,EAAAkhD,EAAAc,EAAA/hD,OAA8CD,EAAAkhD,EAAQlhD,IACtDohD,EAAAsB,IAAAV,EAAAhiD,GAAA4e,OAFA,CAMAojC,EAAAnjD,EAAAojD,MAAArB,EACA,IAAAnjD,GACAmlD,EACAriD,EACAP,EAAAkhD,EAAA19C,EAAAs+C,EACAe,GAAA7B,EACA,KAAAhhD,EAAA,EAAAkhD,EAAAc,EAAA/hD,OAAsCD,EAAAkhD,EAAQlhD,IAC9C,IAAAwD,EAAA,EAAuBA,EAAAq/C,EAAA5iD,OAAgBuD,GAAAjD,EAAAN,OAAA,GAGvC,GAFAM,GAAAiD,EAAA,GACA/F,EAAAolD,EAAAr/C,GAAAsS,EACAksC,EAAAhiD,IAAA8gD,EACArjD,EAAAukD,EAAAhiD,KACAO,EAAA/B,KAAAf,EAAAukD,EAAAhiD,SAGA,KAAA4iD,IAAAnlD,KAAAkjD,GAAAiC,IACAriD,EAAA/B,KAAAf,EAAAmlD,GAGAC,GAAAtiD,OAAAG,MAAAmiD,EAAAtiD,GAGA,IAAAP,EAAA,EAAAkhD,EAAA2B,EAAA5iD,OAAoCD,EAAAkhD,EAAQlhD,IAE5C,IADAvC,EAAAolD,EAAA7iD,GACAvC,EAAAqY,GAAA,CACA,GAAA8I,EAAA,CACA,GAAAnhB,EAAAmhB,EAAA,CACA,IAAApb,EAAA,EAAAs+C,EAAArkD,EAAAmhB,EAAA3e,OAAoDuD,EAAAs+C,EAAQt+C,IAAA,GAAA/F,EAAAmhB,EAAApb,IAAAob,EAAA,CAC5DnhB,EAAAmhB,EAAAre,OAAAiD,EAAA,EACA,QAEA/F,EAAAmhB,EAAA3e,cAAAxC,GAAAmhB,EAEA,IAAAgkC,IAAAnlD,GAAAqY,EAAA,GAAArY,EAAAqY,EAAA6qC,GAAAiC,IAAAnlD,EAAAqY,EAAA8sC,GAAAhkC,EAAA,CACA,GAAAkkC,GAAArlD,EAAAqY,EAAA8sC,GAAAhkC,CACA,KAAApb,EAAA,EAAAs+C,EAAAgB,EAAA7iD,OAAsDuD,EAAAs+C,EAAQt+C,IAAA,GAAAs/C,EAAAt/C,IAAAob,EAAA,CAC9DkkC,EAAAviD,OAAAiD,EAAA,EACA,QAEAs/C,EAAA7iD,cAAAxC,GAAAqY,EAAA8sC,GAAAhkC,OAEiB,OACjBnhB,GAAAmhB,CACA,KAAAgkC,IAAAnlD,GAAAqY,EAAArY,EAAAqY,EAAA6qC,GAAAiC,IAAAnlD,EAAAqY,EAAA8sC,GAAAhkC,SACAnhB,GAAAqY,EAAA8sC,GAAAhkC,EAGAnhB,IAAAqY,KAqBAsrC,EAAA2B,KAAA,SAAAlkD,EAAA+f,GACA,GAAAokC,GAAA,WAEA,MADA5B,GAAAuB,OAAA9jD,EAAAmkD,GACApkC,EAAAle,MAAAiG,KAAAohB,WAEA,OAAAq5B,GAAAe,GAAAtjD,EAAAmkD,IAQA5B,EAAAV,UACAU,EAAA75C,SAAA,WACA,6BAAAm5C,GAEA,mBAAAn+C,MAAAyB,QAAAzB,EAAAyB,QAAAo9C,GAAAd,KAAAjrC,EAAA,WAA6J,MAAA+rC,IAAc1gD,MAAAsD,EAAAs8C,KAAAx7C,SAAAuQ,IAAA9S,EAAAyB,QAAAqR,MAC1K1O,Ofm3XK,SAAUpE,EAAQyB,EAASxG,GgBzuYjCwG,EAAAiC,SAAAzI,EAAA,GACAwG,EAAAi/C,KAAAzlD,EAAA,IACAwG,EAAAk/C,MAAA1lD,EAAA,IACAwG,EAAAonC,KAAA5tC,EAAA,GACAwG,EAAAm/C,KAAA3lD,EAAA,IACAwG,EAAAo/C,KAAA5lD,EAAA,IACAwG,EAAA46C,KAAAphD,EAAA,IACAwG,EAAAmtC,KAAA3zC,EAAA,GACAwG,EAAAqwC,KAAA72C,EAAA,IhB2wYM,SAAU+E,EAAQyB,EAASxG,GiB3xYjC,GAAAyI,GAAAzI,EAAA,GAMAylD,IAOAA,GAAA5X,OAAA,WACA,GAAAC,GAAA,GAAArlC,GAAAE,WAAA,EAKA,OAJAmlC,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GASA2X,EAAA9gC,MAAA,SAAApf,GACA,GAAAuoC,GAAA,GAAArlC,GAAAE,WAAA,EAKA,OAJAmlC,GAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,GAUA2X,EAAAzX,KAAA,SAAAF,EAAAvoC,GAKA,MAJAuoC,GAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,GASA2X,EAAA9W,SAAA,SAAAb,GAKA,MAJAA,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GAYA2X,EAAAxX,WAAA,SAAAC,EAAAC,EAAAE,EAAAC,GACA,GAAAR,GAAA,GAAArlC,GAAAE,WAAA,EAKA,OAJAmlC,GAAA,GAAAI,EACAJ,EAAA,GAAAK,EACAL,EAAA,GAAAO,EACAP,EAAA,GAAAQ,EACAR,GAaA2X,EAAA3jD,IAAA,SAAAgsC,EAAAI,EAAAC,EAAAE,EAAAC,GAKA,MAJAR,GAAA,GAAAI,EACAJ,EAAA,GAAAK,EACAL,EAAA,GAAAO,EACAP,EAAA,GAAAQ,EACAR,GAWA2X,EAAA7W,UAAA,SAAAd,EAAAvoC,GAEA,GAAAuoC,IAAAvoC,EAAA,CACA,GAAAs9B,GAAAt9B,EAAA,EACAuoC,GAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAjL,MAEAiL,GAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,EAGA,OAAAuoC,IAUA2X,EAAAzW,OAAA,SAAAlB,EAAAvoC,GACA,GAAAstC,GAAAttC,EAAA,GAAAs9B,EAAAt9B,EAAA,GAAAu9B,EAAAv9B,EAAA,GAAAutC,EAAAvtC,EAAA,GAGAmqC,EAAAmD,EAAAC,EAAAhQ,EAAAD,CAEA,OAAA6M,IAGAA,EAAA,EAAAA,EAEA5B,EAAA,GAAAgF,EAAApD,EACA5B,EAAA,IAAAjL,EAAA6M,EACA5B,EAAA,IAAAhL,EAAA4M,EACA5B,EAAA,GAAA+E,EAAAnD,EAEA5B,GATA,MAmBA2X,EAAA9V,QAAA,SAAA7B,EAAAvoC,GAEA,GAAAstC,GAAAttC,EAAA,EAMA,OALAuoC,GAAA,GAAAvoC,EAAA,GACAuoC,EAAA,IAAAvoC,EAAA,GACAuoC,EAAA,IAAAvoC,EAAA,GACAuoC,EAAA,GAAA+E,EAEA/E,GASA2X,EAAA7V,YAAA,SAAArqC,GACA,MAAAA,GAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAWAkgD,EAAAl9B,SAAA,SAAAulB,EAAAvoC,EAAAC,GACA,GAAAqtC,GAAAttC,EAAA,GAAAs9B,EAAAt9B,EAAA,GAAAu9B,EAAAv9B,EAAA,GAAAutC,EAAAvtC,EAAA,GACA6tC,EAAA5tC,EAAA,GAAAm8B,EAAAn8B,EAAA,GAAAo8B,EAAAp8B,EAAA,GAAA6tC,EAAA7tC,EAAA,EAKA,OAJAsoC,GAAA,GAAA+E,EAAAO,EAAAtQ,EAAAnB,EACAmM,EAAA,GAAAjL,EAAAuQ,EAAAN,EAAAnR,EACAmM,EAAA,GAAA+E,EAAAjR,EAAAkB,EAAAuQ,EACAvF,EAAA,GAAAjL,EAAAjB,EAAAkR,EAAAO,EACAvF,GAOA2X,EAAAtV,IAAAsV,EAAAl9B,SAUAk9B,EAAApV,OAAA,SAAAvC,EAAAvoC,EAAA+qC,GACA,GAAAuC,GAAAttC,EAAA,GAAAs9B,EAAAt9B,EAAA,GAAAu9B,EAAAv9B,EAAA,GAAAutC,EAAAvtC,EAAA,GACAyE,EAAAjB,KAAAshC,IAAAiG,GACAhsC,EAAAyE,KAAAuhC,IAAAgG,EAKA,OAJAxC,GAAA,GAAA+E,EAAAvuC,EAAAw+B,EAAA94B,EACA8jC,EAAA,GAAAjL,EAAAv+B,EAAAwuC,EAAA9oC,EACA8jC,EAAA,GAAA+E,GAAA7oC,EAAA84B,EAAAx+B,EACAwpC,EAAA,GAAAjL,GAAA74B,EAAA8oC,EAAAxuC,EACAwpC,GAWA2X,EAAAna,MAAA,SAAAwC,EAAAvoC,EAAAgT,GACA,GAAAs6B,GAAAttC,EAAA,GAAAs9B,EAAAt9B,EAAA,GAAAu9B,EAAAv9B,EAAA,GAAAutC,EAAAvtC,EAAA,GACAsgD,EAAAttC,EAAA,GAAAutC,EAAAvtC,EAAA,EAKA,OAJAu1B,GAAA,GAAA+E,EAAAgT,EACA/X,EAAA,GAAAjL,EAAAgjB,EACA/X,EAAA,GAAAhL,EAAAgjB,EACAhY,EAAA,GAAAgF,EAAAgT,EACAhY,GAcA2X,EAAAjV,aAAA,SAAA1C,EAAAwC,GACA,GAAAtmC,GAAAjB,KAAAshC,IAAAiG,GACAhsC,EAAAyE,KAAAuhC,IAAAgG,EAKA,OAJAxC,GAAA,GAAAxpC,EACAwpC,EAAA,GAAA9jC,EACA8jC,EAAA,IAAA9jC,EACA8jC,EAAA,GAAAxpC,EACAwpC,GAcA2X,EAAAhV,YAAA,SAAA3C,EAAAv1B,GAKA,MAJAu1B,GAAA,GAAAv1B,EAAA,GACAu1B,EAAA,KACAA,EAAA,KACAA,EAAA,GAAAv1B,EAAA,GACAu1B,GASA2X,EAAAlT,IAAA,SAAAhtC,GACA,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QASAkgD,EAAAjT,KAAA,SAAAjtC,GACA,MAAAwD,MAAAkhC,KAAAlhC,KAAAkX,IAAA1a,EAAA,MAAAwD,KAAAkX,IAAA1a,EAAA,MAAAwD,KAAAkX,IAAA1a,EAAA,MAAAwD,KAAAkX,IAAA1a,EAAA,QAWAkgD,EAAAM,IAAA,SAAAC,EAAAC,EAAAC,EAAA3gD,GAKA,MAJAygD,GAAA,GAAAzgD,EAAA,GAAAA,EAAA,GACA2gD,EAAA,GAAA3gD,EAAA,GACA2gD,EAAA,GAAA3gD,EAAA,GACA2gD,EAAA,GAAA3gD,EAAA,GAAAygD,EAAA,GAAAE,EAAA,IACAF,EAAAC,EAAAC,IAWAT,EAAAvgC,IAAA,SAAA4oB,EAAAvoC,EAAAC,GAKA,MAJAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,GAWA2X,EAAAxgC,SAAA,SAAA6oB,EAAAvoC,EAAAC,GAKA,MAJAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,GAOA2X,EAAAhT,IAAAgT,EAAAxgC,SASAwgC,EAAA7S,YAAA,SAAArtC,EAAAC,GACA,MAAAD,GAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IAUAigD,EAAA/7C,OAAA,SAAAnE,EAAAC,GACA,GAAAqtC,GAAAttC,EAAA,GAAAs9B,EAAAt9B,EAAA,GAAAu9B,EAAAv9B,EAAA,GAAAutC,EAAAvtC,EAAA,GACA6tC,EAAA5tC,EAAA,GAAAm8B,EAAAn8B,EAAA,GAAAo8B,EAAAp8B,EAAA,GAAA6tC,EAAA7tC,EAAA,EACA,OAAAuD,MAAAY,IAAAkpC,EAAAO,IAAA3qC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAkpC,GAAA9pC,KAAAY,IAAAypC,KACArqC,KAAAY,IAAAk5B,EAAAlB,IAAAl5B,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAk5B,GAAA95B,KAAAY,IAAAg4B,KACA54B,KAAAY,IAAAm5B,EAAAlB,IAAAn5B,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAm5B,GAAA/5B,KAAAY,IAAAi4B,KACA74B,KAAAY,IAAAmpC,EAAAO,IAAA5qC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAmpC,GAAA/pC,KAAAY,IAAA0pC,KAWAoS,EAAA/S,eAAA,SAAA5E,EAAAvoC,EAAAC,GAKA,MAJAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,GAYA2X,EAAA9S,qBAAA,SAAA7E,EAAAvoC,EAAAC,EAAA8lC,GAKA,MAJAwC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,GAGA/oC,EAAAyB,QAAAi/C,GjBszYM,SAAU1gD,EAAQyB,EAASxG,GkBrtZjC,GAAAyI,GAAAzI,EAAA,GAoBA0lD,IAOAA,GAAA7X,OAAA,WACA,GAAAC,GAAA,GAAArlC,GAAAE,WAAA,EAOA,OANAmlC,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GASA4X,EAAA/gC,MAAA,SAAApf,GACA,GAAAuoC,GAAA,GAAArlC,GAAAE,WAAA,EAOA,OANAmlC,GAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,GAUA4X,EAAA1X,KAAA,SAAAF,EAAAvoC,GAOA,MANAuoC,GAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,GASA4X,EAAA/W,SAAA,SAAAb,GAOA,MANAA,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GAcA4X,EAAAzX,WAAA,SAAA1oC,EAAAC,EAAAlB,EAAAgW,EAAA6rC,EAAAC,GACA,GAAAtY,GAAA,GAAArlC,GAAAE,WAAA,EAOA,OANAmlC,GAAA,GAAAvoC,EACAuoC,EAAA,GAAAtoC,EACAsoC,EAAA,GAAAxpC,EACAwpC,EAAA,GAAAxzB,EACAwzB,EAAA,GAAAqY,EACArY,EAAA,GAAAsY,EACAtY,GAeA4X,EAAA5jD,IAAA,SAAAgsC,EAAAvoC,EAAAC,EAAAlB,EAAAgW,EAAA6rC,EAAAC,GAOA,MANAtY,GAAA,GAAAvoC,EACAuoC,EAAA,GAAAtoC,EACAsoC,EAAA,GAAAxpC,EACAwpC,EAAA,GAAAxzB,EACAwzB,EAAA,GAAAqY,EACArY,EAAA,GAAAsY,EACAtY,GAUA4X,EAAA1W,OAAA,SAAAlB,EAAAvoC,GACA,GAAA8gD,GAAA9gD,EAAA,GAAA+gD,EAAA/gD,EAAA,GAAAwf,EAAAxf,EAAA,GAAAghD,EAAAhhD,EAAA,GACAihD,EAAAjhD,EAAA,GAAAkhD,EAAAlhD,EAAA,GAEAmqC,EAAA2W,EAAAE,EAAAD,EAAAvhC,CACA,OAAA2qB,IAGAA,EAAA,EAAAA,EAEA5B,EAAA,GAAAyY,EAAA7W,EACA5B,EAAA,IAAAwY,EAAA5W,EACA5B,EAAA,IAAA/oB,EAAA2qB,EACA5B,EAAA,GAAAuY,EAAA3W,EACA5B,EAAA,IAAA/oB,EAAA0hC,EAAAF,EAAAC,GAAA9W,EACA5B,EAAA,IAAAwY,EAAAE,EAAAH,EAAAI,GAAA/W,EACA5B,GAVA,MAmBA4X,EAAA9V,YAAA,SAAArqC,GACA,MAAAA,GAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAWAmgD,EAAAn9B,SAAA,SAAAulB,EAAAvoC,EAAAC,GACA,GAAAqtC,GAAAttC,EAAA,GAAAs9B,EAAAt9B,EAAA,GAAAu9B,EAAAv9B,EAAA,GAAAutC,EAAAvtC,EAAA,GAAAwtC,EAAAxtC,EAAA,GAAAytC,EAAAztC,EAAA,GACA6tC,EAAA5tC,EAAA,GAAAm8B,EAAAn8B,EAAA,GAAAo8B,EAAAp8B,EAAA,GAAA6tC,EAAA7tC,EAAA,GAAA8tC,EAAA9tC,EAAA,GAAA+tC,EAAA/tC,EAAA,EAOA,OANAsoC,GAAA,GAAA+E,EAAAO,EAAAtQ,EAAAnB,EACAmM,EAAA,GAAAjL,EAAAuQ,EAAAN,EAAAnR,EACAmM,EAAA,GAAA+E,EAAAjR,EAAAkB,EAAAuQ,EACAvF,EAAA,GAAAjL,EAAAjB,EAAAkR,EAAAO,EACAvF,EAAA,GAAA+E,EAAAS,EAAAxQ,EAAAyQ,EAAAR,EACAjF,EAAA,GAAAjL,EAAAyQ,EAAAR,EAAAS,EAAAP,EACAlF,GAOA4X,EAAAvV,IAAAuV,EAAAn9B,SAUAm9B,EAAArV,OAAA,SAAAvC,EAAAvoC,EAAA+qC,GACA,GAAAuC,GAAAttC,EAAA,GAAAs9B,EAAAt9B,EAAA,GAAAu9B,EAAAv9B,EAAA,GAAAutC,EAAAvtC,EAAA,GAAAwtC,EAAAxtC,EAAA,GAAAytC,EAAAztC,EAAA,GACAyE,EAAAjB,KAAAshC,IAAAiG,GACAhsC,EAAAyE,KAAAuhC,IAAAgG,EAOA,OANAxC,GAAA,GAAA+E,EAAAvuC,EAAAw+B,EAAA94B,EACA8jC,EAAA,GAAAjL,EAAAv+B,EAAAwuC,EAAA9oC,EACA8jC,EAAA,GAAA+E,GAAA7oC,EAAA84B,EAAAx+B,EACAwpC,EAAA,GAAAjL,GAAA74B,EAAA8oC,EAAAxuC,EACAwpC,EAAA,GAAAiF,EACAjF,EAAA,GAAAkF,EACAlF,GAWA4X,EAAApa,MAAA,SAAAwC,EAAAvoC,EAAAgT,GACA,GAAAs6B,GAAAttC,EAAA,GAAAs9B,EAAAt9B,EAAA,GAAAu9B,EAAAv9B,EAAA,GAAAutC,EAAAvtC,EAAA,GAAAwtC,EAAAxtC,EAAA,GAAAytC,EAAAztC,EAAA,GACAsgD,EAAAttC,EAAA,GAAAutC,EAAAvtC,EAAA,EAOA,OANAu1B,GAAA,GAAA+E,EAAAgT,EACA/X,EAAA,GAAAjL,EAAAgjB,EACA/X,EAAA,GAAAhL,EAAAgjB,EACAhY,EAAA,GAAAgF,EAAAgT,EACAhY,EAAA,GAAAiF,EACAjF,EAAA,GAAAkF,EACAlF,GAWA4X,EAAAtV,UAAA,SAAAtC,EAAAvoC,EAAAgT,GACA,GAAAs6B,GAAAttC,EAAA,GAAAs9B,EAAAt9B,EAAA,GAAAu9B,EAAAv9B,EAAA,GAAAutC,EAAAvtC,EAAA,GAAAwtC,EAAAxtC,EAAA,GAAAytC,EAAAztC,EAAA,GACAsgD,EAAAttC,EAAA,GAAAutC,EAAAvtC,EAAA,EAOA,OANAu1B,GAAA,GAAA+E,EACA/E,EAAA,GAAAjL,EACAiL,EAAA,GAAAhL,EACAgL,EAAA,GAAAgF,EACAhF,EAAA,GAAA+E,EAAAgT,EAAA/iB,EAAAgjB,EAAA/S,EACAjF,EAAA,GAAAjL,EAAAgjB,EAAA/S,EAAAgT,EAAA9S,EACAlF,GAcA4X,EAAAlV,aAAA,SAAA1C,EAAAwC,GACA,GAAAtmC,GAAAjB,KAAAshC,IAAAiG,GAAAhsC,EAAAyE,KAAAuhC,IAAAgG,EAOA,OANAxC,GAAA,GAAAxpC,EACAwpC,EAAA,GAAA9jC,EACA8jC,EAAA,IAAA9jC,EACA8jC,EAAA,GAAAxpC,EACAwpC,EAAA,KACAA,EAAA,KACAA,GAcA4X,EAAAjV,YAAA,SAAA3C,EAAAv1B,GAOA,MANAu1B,GAAA,GAAAv1B,EAAA,GACAu1B,EAAA,KACAA,EAAA,KACAA,EAAA,GAAAv1B,EAAA,GACAu1B,EAAA,KACAA,EAAA,KACAA,GAcA4X,EAAAnV,gBAAA,SAAAzC,EAAAv1B,GAOA,MANAu1B,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAAv1B,EAAA,GACAu1B,EAAA,GAAAv1B,EAAA,GACAu1B,GASA4X,EAAAnT,IAAA,SAAAhtC,GACA,eAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QACAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QASAmgD,EAAAlT,KAAA,SAAAjtC,GACA,MAAAwD,MAAAkhC,KAAAlhC,KAAAkX,IAAA1a,EAAA,MAAAwD,KAAAkX,IAAA1a,EAAA,MAAAwD,KAAAkX,IAAA1a,EAAA,MAAAwD,KAAAkX,IAAA1a,EAAA,MAAAwD,KAAAkX,IAAA1a,EAAA,MAAAwD,KAAAkX,IAAA1a,EAAA,UAWAmgD,EAAAxgC,IAAA,SAAA4oB,EAAAvoC,EAAAC,GAOA,MANAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,GAWA4X,EAAAzgC,SAAA,SAAA6oB,EAAAvoC,EAAAC,GAOA,MANAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,GAOA4X,EAAAjT,IAAAiT,EAAAzgC,SAUAygC,EAAAhT,eAAA,SAAA5E,EAAAvoC,EAAAC,GAOA,MANAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,GAYA4X,EAAA/S,qBAAA,SAAA7E,EAAAvoC,EAAAC,EAAA8lC,GAOA,MANAwC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,GAUA4X,EAAA9S,YAAA,SAAArtC,EAAAC,GACA,MAAAD,GAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IAUAkgD,EAAAh8C,OAAA,SAAAnE,EAAAC,GACA,GAAAqtC,GAAAttC,EAAA,GAAAs9B,EAAAt9B,EAAA,GAAAu9B,EAAAv9B,EAAA,GAAAutC,EAAAvtC,EAAA,GAAAwtC,EAAAxtC,EAAA,GAAAytC,EAAAztC,EAAA,GACA6tC,EAAA5tC,EAAA,GAAAm8B,EAAAn8B,EAAA,GAAAo8B,EAAAp8B,EAAA,GAAA6tC,EAAA7tC,EAAA,GAAA8tC,EAAA9tC,EAAA,GAAA+tC,EAAA/tC,EAAA,EACA,OAAAuD,MAAAY,IAAAkpC,EAAAO,IAAA3qC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAkpC,GAAA9pC,KAAAY,IAAAypC,KACArqC,KAAAY,IAAAk5B,EAAAlB,IAAAl5B,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAk5B,GAAA95B,KAAAY,IAAAg4B,KACA54B,KAAAY,IAAAm5B,EAAAlB,IAAAn5B,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAm5B,GAAA/5B,KAAAY,IAAAi4B,KACA74B,KAAAY,IAAAmpC,EAAAO,IAAA5qC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAmpC,GAAA/pC,KAAAY,IAAA0pC,KACAtqC,KAAAY,IAAAopC,EAAAO,IAAA7qC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAopC,GAAAhqC,KAAAY,IAAA2pC,KACAvqC,KAAAY,IAAAqpC,EAAAO,IAAA9qC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAqpC,GAAAjqC,KAAAY,IAAA4pC,KAGAxuC,EAAAyB,QAAAk/C,GlBgvZM,SAAU3gD,EAAQyB,EAASxG,GmBhrajC,GAAAyI,GAAAzI,EAAA,GAMA2lD,GACAe,UACAC,QAQAhB,GAAA9X,OAAA,WACA,GAAAC,GAAA,GAAArlC,GAAAE,WAAA,GAiBA,OAhBAmlC,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,GASA6X,EAAAhhC,MAAA,SAAApf,GACA,GAAAuoC,GAAA,GAAArlC,GAAAE,WAAA,GAiBA,OAhBAmlC,GAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,GAUA6X,EAAA3X,KAAA,SAAAF,EAAAvoC,GAiBA,MAhBAuoC,GAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,GAwBA6X,EAAA1X,WAAA,SAAAC,EAAAC,EAAAC,EAAAwY,EAAAvY,EAAAC,EAAAC,EAAAsY,EAAArY,EAAAC,EAAAC,EAAAoY,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAApZ,GAAA,GAAArlC,GAAAE,WAAA,GAiBA,OAhBAmlC,GAAA,GAAAI,EACAJ,EAAA,GAAAK,EACAL,EAAA,GAAAM,EACAN,EAAA,GAAA8Y,EACA9Y,EAAA,GAAAO,EACAP,EAAA,GAAAQ,EACAR,EAAA,GAAAS,EACAT,EAAA,GAAA+Y,EACA/Y,EAAA,GAAAU,EACAV,EAAA,GAAAW,EACAX,EAAA,IAAAY,EACAZ,EAAA,IAAAgZ,EACAhZ,EAAA,IAAAiZ,EACAjZ,EAAA,IAAAkZ,EACAlZ,EAAA,IAAAmZ,EACAnZ,EAAA,IAAAoZ,EACApZ,GAyBA6X,EAAA7jD,IAAA,SAAAgsC,EAAAI,EAAAC,EAAAC,EAAAwY,EAAAvY,EAAAC,EAAAC,EAAAsY,EAAArY,EAAAC,EAAAC,EAAAoY,EAAAC,EAAAC,EAAAC,EAAAC,GAiBA,MAhBApZ,GAAA,GAAAI,EACAJ,EAAA,GAAAK,EACAL,EAAA,GAAAM,EACAN,EAAA,GAAA8Y,EACA9Y,EAAA,GAAAO,EACAP,EAAA,GAAAQ,EACAR,EAAA,GAAAS,EACAT,EAAA,GAAA+Y,EACA/Y,EAAA,GAAAU,EACAV,EAAA,GAAAW,EACAX,EAAA,IAAAY,EACAZ,EAAA,IAAAgZ,EACAhZ,EAAA,IAAAiZ,EACAjZ,EAAA,IAAAkZ,EACAlZ,EAAA,IAAAmZ,EACAnZ,EAAA,IAAAoZ,EACApZ,GAUA6X,EAAAhX,SAAA,SAAAb,GAiBA,MAhBAA,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,GAUA6X,EAAAe,OAAA9X,UAAA,SAAAd,EAAAvoC,GAEA,GAAAuoC,IAAAvoC,EAAA,CACA,GAAAspC,GAAAtpC,EAAA,GAAAupC,EAAAvpC,EAAA,GAAAksC,EAAAlsC,EAAA,GACAwpC,EAAAxpC,EAAA,GAAAmsC,EAAAnsC,EAAA,GACAosC,EAAApsC,EAAA,GAEAuoC,GAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,IACAuoC,EAAA,GAAAe,EACAf,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,IACAuoC,EAAA,GAAAgB,EACAhB,EAAA,GAAAiB,EACAjB,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAA2D,EACA3D,EAAA,IAAA4D,EACA5D,EAAA,IAAA6D,MAEA7D,GAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,IACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,IACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,GACAuoC,EAAA,IAAAvoC,EAAA,GACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,GAGA,OAAAuoC,IAUA6X,EAAAgB,KAAA/X,UAAA,SAAAd,EAAAvoC,GACA,GAAAstC,GAAAhQ,EAAAC,EAAAgQ,EACAqU,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,CAqBA,OAnBA3U,GAAA8T,KAAAc,UAAAC,KAAAniD,EAAA,GACAs9B,EAAA8jB,KAAAc,UAAAC,KAAAniD,EAAA,GACAu9B,EAAA6jB,KAAAc,UAAAC,KAAAniD,EAAA,GACAutC,EAAA6T,KAAAc,UAAAC,KAAAniD,EAAA,IAEA4hD,EAAAR,KAAAc,UAAAE,QAAA9U,EAAAhQ,EAAA,SACAukB,EAAAT,KAAAc,UAAAE,QAAA7kB,EAAAgQ,EAAA,SACAuU,EAAAV,KAAAc,UAAAE,QAAAR,EAAAC,EAAA,SACAE,EAAAX,KAAAc,UAAAE,QAAAR,EAAAC,EAAA,SACAT,KAAAc,UAAAG,MAAA9Z,EAAA,EAAAuZ,GACAV,KAAAc,UAAAG,MAAA9Z,EAAA,EAAAwZ,GAEAH,EAAAR,KAAAc,UAAAE,QAAA9U,EAAAhQ,EAAA,SACAukB,EAAAT,KAAAc,UAAAE,QAAA7kB,EAAAgQ,EAAA,SACAyU,EAAAZ,KAAAc,UAAAE,QAAAR,EAAAC,EAAA,SACAI,EAAAb,KAAAc,UAAAE,QAAAR,EAAAC,EAAA,SACAT,KAAAc,UAAAG,MAAA9Z,EAAA,EAAAyZ,GACAZ,KAAAc,UAAAG,MAAA9Z,EAAA,GAAA0Z,GAEA1Z,GAUA6X,EAAA/W,UAAAnmC,EAAAW,SAAAu8C,EAAAgB,KAAA/X,UAAA+W,EAAAe,OAAA9X,UASA+W,EAAAe,OAAA1X,OAAA,SAAAlB,EAAAvoC,GACA,GAAA0pC,GAAA1pC,EAAA,GAAAspC,EAAAtpC,EAAA,GAAAupC,EAAAvpC,EAAA,GAAAksC,EAAAlsC,EAAA,GACA2pC,EAAA3pC,EAAA,GAAA4pC,EAAA5pC,EAAA,GAAAwpC,EAAAxpC,EAAA,GAAAmsC,EAAAnsC,EAAA,GACA6pC,EAAA7pC,EAAA,GAAA8pC,EAAA9pC,EAAA,GAAA+pC,EAAA/pC,EAAA,IAAAosC,EAAApsC,EAAA,IACAqsC,EAAArsC,EAAA,IAAAssC,EAAAtsC,EAAA,IAAAusC,EAAAvsC,EAAA,IAAAwsC,EAAAxsC,EAAA,IAEAsqC,EAAAZ,EAAAE,EAAAN,EAAAK,EACAK,EAAAN,EAAAF,EAAAD,EAAAI,EACAY,EAAAb,EAAAyC,EAAAD,EAAAvC,EACA8C,EAAAnD,EAAAE,EAAAD,EAAAK,EACA8C,EAAApD,EAAA6C,EAAAD,EAAAtC,EACA+C,EAAApD,EAAA4C,EAAAD,EAAA1C,EACAoD,EAAA/C,EAAAyC,EAAAxC,EAAAuC,EACAQ,EAAAhD,EAAA0C,EAAAxC,EAAAsC,EACAS,EAAAjD,EAAA2C,EAAAJ,EAAAC,EACAU,EAAAjD,EAAAyC,EAAAxC,EAAAuC,EACA9B,EAAAV,EAAA0C,EAAAJ,EAAAE,EACArC,EAAAF,EAAAyC,EAAAJ,EAAAG,EAGApC,EAAAG,EAAAL,EAAAD,EAAAQ,EAAAD,EAAAwC,EAAAN,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,CAEA,OAAAzC,IAGAA,EAAA,EAAAA,EAEA5B,EAAA,IAAAqB,EAAAK,EAAAT,EAAAgB,EAAA2B,EAAAY,GAAA5C,EACA5B,EAAA,IAAAgB,EAAAiB,EAAAlB,EAAAW,EAAAiC,EAAAa,GAAA5C,EACA5B,EAAA,IAAA+D,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,GAAAtC,EACA5B,EAAA,IAAAwB,EAAA2C,EAAA5C,EAAA6C,EAAAP,EAAAK,GAAAtC,EACA5B,EAAA,IAAAiB,EAAAsD,EAAAnD,EAAAM,EAAAkC,EAAAU,GAAA1C,EACA5B,EAAA,IAAAmB,EAAAO,EAAAV,EAAAuD,EAAAZ,EAAAW,GAAA1C,EACA5B,EAAA,IAAAgE,EAAAhC,EAAA8B,EAAAM,EAAAH,EAAAxC,GAAAG,EACA5B,EAAA,IAAAsB,EAAA8C,EAAA5C,EAAAQ,EAAA6B,EAAApC,GAAAG,EACA5B,EAAA,IAAAoB,EAAAa,EAAAZ,EAAAkD,EAAAX,EAAAS,GAAAzC,EACA5B,EAAA,IAAAe,EAAAwD,EAAApD,EAAAc,EAAA0B,EAAAU,GAAAzC,EACA5B,EAAA,KAAA8D,EAAAK,EAAAJ,EAAA/B,EAAAiC,EAAAlC,GAAAH,EACA5B,EAAA,KAAAuB,EAAAS,EAAAV,EAAA6C,EAAAN,EAAA9B,GAAAH,EACA5B,EAAA,KAAAqB,EAAAiD,EAAAlD,EAAAoD,EAAAvD,EAAAoD,GAAAzC,EACA5B,EAAA,KAAAmB,EAAAqD,EAAAzD,EAAAuD,EAAAtD,EAAAqD,GAAAzC,EACA5B,EAAA,KAAA+D,EAAAtC,EAAAqC,EAAAI,EAAAF,EAAAjC,GAAAH,EACA5B,EAAA,KAAAsB,EAAA4C,EAAA3C,EAAAE,EAAAD,EAAAO,GAAAH,EAEA5B,GArBA,MA+BA6X,EAAAgB,KAAA3X,OAAA,SAAAlB,EAAAvoC,GACA,GAAAsiD,GAAAC,EAAAC,EAAAC,EACAC,EACAC,EAAAC,EAAAC,EAAAC,EACA3Y,EACAmD,EAAA8T,KAAAc,UAAAC,KAAAniD,EAAA,GACAs9B,EAAA8jB,KAAAc,UAAAC,KAAAniD,EAAA,GACAu9B,EAAA6jB,KAAAc,UAAAC,KAAAniD,EAAA,GACAutC,EAAA6T,KAAAc,UAAAC,KAAAniD,EAAA,GAyEA,OAtEA0iD,GAAAtB,KAAAc,UAAAE,QAAA9U,EAAAhQ,EAAA,SACAilB,EAAAnB,KAAAc,UAAAE,QAAA7kB,EAAAgQ,EAAA,SACA+U,EAAAlB,KAAAc,UAAAE,QAAAM,EAAAH,EAAA,SACAA,EAAAnB,KAAAc,UAAAE,QAAAG,EAAAG,EAAA,SACAA,EAAAtB,KAAAc,UAAAE,QAAA9U,EAAAhQ,EAAA,SACAmlB,EAAArB,KAAAc,UAAAE,QAAA7kB,EAAAgQ,EAAA,SACAiV,EAAApB,KAAAc,UAAAE,QAAAM,EAAAD,EAAA,SACAA,EAAArB,KAAAc,UAAAE,QAAAK,EAAAC,EAAA,SAEAA,EAAAtB,KAAAc,UAAAtX,IAAA4X,EAAAC,GACAC,EAAAtB,KAAAc,UAAAa,QAAAL,EAAA,SACAC,EAAAvB,KAAAc,UAAAtX,IAAA2X,EAAAG,GACAE,EAAAxB,KAAAc,UAAAtX,IAAA0X,EAAAI,GACAA,EAAAtB,KAAAc,UAAAa,QAAAL,EAAA,SACAC,EAAAvB,KAAAc,UAAAhV,IAAAkU,KAAAc,UAAAtX,IAAA2X,EAAAG,GAAAC,GACAC,EAAAxB,KAAAc,UAAAhV,IAAAkU,KAAAc,UAAAtX,IAAA0X,EAAAI,GAAAE,GACAA,EAAAxB,KAAAc,UAAAa,QAAAH,EAAA,SAEAF,EAAAtB,KAAAc,UAAAtX,IAAA2X,EAAAC,GACAE,EAAAtB,KAAAc,UAAAa,QAAAL,EAAA,SACAC,EAAAvB,KAAAc,UAAAviC,IAAAyhC,KAAAc,UAAAtX,IAAA6X,EAAAC,GAAAC,GACAG,EAAA1B,KAAAc,UAAAtX,IAAA0X,EAAAI,GACAA,EAAAtB,KAAAc,UAAAa,QAAAL,EAAA,SACAC,EAAAvB,KAAAc,UAAAhV,IAAAyV,EAAAvB,KAAAc,UAAAtX,IAAA6X,EAAAC,IACAI,EAAA1B,KAAAc,UAAAhV,IAAAkU,KAAAc,UAAAtX,IAAA0X,EAAAI,GAAAI,GACAA,EAAA1B,KAAAc,UAAAa,QAAAD,EAAA,SAEAJ,EAAAtB,KAAAc,UAAAtX,IAAAwW,KAAAc,UAAAa,QAAAR,EAAA,SAAAE,GACAC,EAAAtB,KAAAc,UAAAa,QAAAL,EAAA,SACAF,EAAApB,KAAAc,UAAAa,QAAAP,EAAA,SACAG,EAAAvB,KAAAc,UAAAviC,IAAAyhC,KAAAc,UAAAtX,IAAA4X,EAAAE,GAAAC,GACAE,EAAAzB,KAAAc,UAAAtX,IAAA0X,EAAAI,GACAA,EAAAtB,KAAAc,UAAAa,QAAAL,EAAA,SACAC,EAAAvB,KAAAc,UAAAhV,IAAAyV,EAAAvB,KAAAc,UAAAtX,IAAA4X,EAAAE,IACAG,EAAAzB,KAAAc,UAAAhV,IAAAkU,KAAAc,UAAAtX,IAAA0X,EAAAI,GAAAG,GACAA,EAAAzB,KAAAc,UAAAa,QAAAF,EAAA,SAEAH,EAAAtB,KAAAc,UAAAtX,IAAA0X,EAAAC,GACAG,EAAAtB,KAAAc,UAAAa,QAAAL,EAAA,SACAG,EAAAzB,KAAAc,UAAAviC,IAAAyhC,KAAAc,UAAAtX,IAAA6X,EAAAC,GAAAG,GACAC,EAAA1B,KAAAc,UAAAhV,IAAAkU,KAAAc,UAAAtX,IAAA4X,EAAAE,GAAAI,GACAJ,EAAAtB,KAAAc,UAAAa,QAAAL,EAAA,SACAG,EAAAzB,KAAAc,UAAAhV,IAAAkU,KAAAc,UAAAtX,IAAA6X,EAAAC,GAAAG,GACAC,EAAA1B,KAAAc,UAAAhV,IAAA4V,EAAA1B,KAAAc,UAAAtX,IAAA4X,EAAAE,IAEAA,EAAAtB,KAAAc,UAAAtX,IAAA0X,EAAAG,GACAC,EAAAtB,KAAAc,UAAAa,QAAAL,EAAA,SACAE,EAAAxB,KAAAc,UAAAhV,IAAA0V,EAAAxB,KAAAc,UAAAtX,IAAA4X,EAAAE,IACAG,EAAAzB,KAAAc,UAAAviC,IAAAyhC,KAAAc,UAAAtX,IAAA2X,EAAAG,GAAAG,GACAH,EAAAtB,KAAAc,UAAAa,QAAAL,EAAA,SACAE,EAAAxB,KAAAc,UAAAviC,IAAAyhC,KAAAc,UAAAtX,IAAA4X,EAAAE,GAAAE,GACAC,EAAAzB,KAAAc,UAAAhV,IAAA2V,EAAAzB,KAAAc,UAAAtX,IAAA2X,EAAAG,IAEAA,EAAAtB,KAAAc,UAAAtX,IAAA0X,EAAAE,GACAE,EAAAtB,KAAAc,UAAAa,QAAAL,EAAA,SACAE,EAAAxB,KAAAc,UAAAviC,IAAAyhC,KAAAc,UAAAtX,IAAA6X,EAAAC,GAAAE,GACAE,EAAA1B,KAAAc,UAAAhV,IAAA4V,EAAA1B,KAAAc,UAAAtX,IAAA2X,EAAAG,IACAA,EAAAtB,KAAAc,UAAAa,QAAAL,EAAA,SACAE,EAAAxB,KAAAc,UAAAhV,IAAA0V,EAAAxB,KAAAc,UAAAtX,IAAA6X,EAAAC,IACAI,EAAA1B,KAAAc,UAAAviC,IAAAyhC,KAAAc,UAAAtX,IAAA2X,EAAAG,GAAAI,GAGA3Y,EAAAiX,KAAAc,UAAAtX,IAAA0X,EAAAK,GACAxY,EAAAiX,KAAAc,UAAAviC,IAAAyhC,KAAAc,UAAAa,QAAA5Y,EAAA,SAAAA,GACAA,EAAAiX,KAAAc,UAAAviC,IAAAyhC,KAAAc,UAAAa,QAAA5Y,EAAA,SAAAA,GACAuY,EAAAtB,KAAAc,UAAAc,wBAAA7Y,GACAA,EAAAiX,KAAAc,UAAAhV,IACAkU,KAAAc,UAAAviC,IAAA+iC,KACAtB,KAAAc,UAAAtX,IAAAT,EAAAiX,KAAAc,UAAAtX,IAAA8X,QACAvY,EAAAiX,KAAAc,UAAAa,QAAA5Y,EAAA,WAMAiX,KAAAc,UAAAG,MAAA9Z,EAAA,EAAA6Y,KAAAc,UAAAtX,IAAAT,EAAAwY;AACAvB,KAAAc,UAAAG,MAAA9Z,EAAA,EAAA6Y,KAAAc,UAAAtX,IAAAT,EAAAyY,IACAxB,KAAAc,UAAAG,MAAA9Z,EAAA,EAAA6Y,KAAAc,UAAAtX,IAAAT,EAAA0Y,IACAzB,KAAAc,UAAAG,MAAA9Z,EAAA,GAAA6Y,KAAAc,UAAAtX,IAAAT,EAAA2Y,IACAva,GARA,MAkBA6X,EAAA3W,OAAAvmC,EAAAW,SAAAu8C,EAAAgB,KAAA3X,OAAA2W,EAAAe,OAAA1X,OASA2W,EAAAe,OAAA/W,QAAA,SAAA7B,EAAAvoC,GACA,GAAA0pC,GAAA1pC,EAAA,GAAAspC,EAAAtpC,EAAA,GAAAupC,EAAAvpC,EAAA,GAAAksC,EAAAlsC,EAAA,GACA2pC,EAAA3pC,EAAA,GAAA4pC,EAAA5pC,EAAA,GAAAwpC,EAAAxpC,EAAA,GAAAmsC,EAAAnsC,EAAA,GACA6pC,EAAA7pC,EAAA,GAAA8pC,EAAA9pC,EAAA,GAAA+pC,EAAA/pC,EAAA,IAAAosC,EAAApsC,EAAA,IACAqsC,EAAArsC,EAAA,IAAAssC,EAAAtsC,EAAA,IAAAusC,EAAAvsC,EAAA,IAAAwsC,EAAAxsC,EAAA,GAkBA,OAhBAuoC,GAAA,GAAAqB,GAAAG,EAAAyC,EAAAJ,EAAAG,GAAAzC,GAAAN,EAAAgD,EAAAL,EAAAI,GAAAD,GAAA9C,EAAA4C,EAAAD,EAAApC,GACAxB,EAAA,KAAAe,GAAAS,EAAAyC,EAAAJ,EAAAG,GAAAzC,GAAAP,EAAAiD,EAAAN,EAAAK,GAAAD,GAAA/C,EAAA6C,EAAAF,EAAAnC,IACAxB,EAAA,GAAAe,GAAAE,EAAAgD,EAAAL,EAAAI,GAAA3C,GAAAL,EAAAiD,EAAAN,EAAAK,GAAAD,GAAA/C,EAAA4C,EAAAD,EAAA1C,GACAjB,EAAA,KAAAe,GAAAE,EAAA4C,EAAAD,EAAApC,GAAAH,GAAAL,EAAA6C,EAAAF,EAAAnC,GAAAD,GAAAP,EAAA4C,EAAAD,EAAA1C,IACAjB,EAAA,KAAAoB,GAAAI,EAAAyC,EAAAJ,EAAAG,GAAA1C,GAAAL,EAAAgD,EAAAL,EAAAI,GAAAF,GAAA7C,EAAA4C,EAAAD,EAAApC,IACAxB,EAAA,GAAAmB,GAAAK,EAAAyC,EAAAJ,EAAAG,GAAA1C,GAAAN,EAAAiD,EAAAN,EAAAK,GAAAF,GAAA9C,EAAA6C,EAAAF,EAAAnC,GACAxB,EAAA,KAAAmB,GAAAF,EAAAgD,EAAAL,EAAAI,GAAA5C,GAAAJ,EAAAiD,EAAAN,EAAAK,GAAAF,GAAA9C,EAAA4C,EAAAD,EAAA1C,IACAjB,EAAA,GAAAmB,GAAAF,EAAA4C,EAAAD,EAAApC,GAAAJ,GAAAJ,EAAA6C,EAAAF,EAAAnC,GAAAF,GAAAN,EAAA4C,EAAAD,EAAA1C,GACAjB,EAAA,GAAAoB,GAAAG,EAAA0C,EAAAJ,EAAAE,GAAAzC,GAAAD,EAAA4C,EAAAL,EAAAG,GAAAD,GAAAzC,EAAAwC,EAAAD,EAAArC,GACAvB,EAAA,KAAAmB,GAAAI,EAAA0C,EAAAJ,EAAAE,GAAAzC,GAAAP,EAAAkD,EAAAN,EAAAI,GAAAD,GAAA/C,EAAA8C,EAAAF,EAAApC,IACAvB,EAAA,IAAAmB,GAAAE,EAAA4C,EAAAL,EAAAG,GAAA3C,GAAAL,EAAAkD,EAAAN,EAAAI,GAAAD,GAAA/C,EAAA6C,EAAAD,EAAAtC,GACArB,EAAA,MAAAmB,GAAAE,EAAAwC,EAAAD,EAAArC,GAAAH,GAAAL,EAAA8C,EAAAF,EAAApC,GAAAD,GAAAP,EAAA6C,EAAAD,EAAAtC,IACArB,EAAA,MAAAoB,GAAAG,EAAAyC,EAAAxC,EAAAuC,GAAAzC,GAAAD,EAAA2C,EAAA/C,EAAA8C,GAAAD,GAAAzC,EAAAG,EAAAP,EAAAM,IACAvB,EAAA,IAAAmB,GAAAI,EAAAyC,EAAAxC,EAAAuC,GAAAzC,GAAAP,EAAAiD,EAAAhD,EAAA+C,GAAAD,GAAA/C,EAAAS,EAAAR,EAAAO,GACAvB,EAAA,MAAAmB,GAAAE,EAAA2C,EAAA/C,EAAA8C,GAAA3C,GAAAL,EAAAiD,EAAAhD,EAAA+C,GAAAD,GAAA/C,EAAAE,EAAAD,EAAAK,IACArB,EAAA,IAAAmB,GAAAE,EAAAG,EAAAP,EAAAM,GAAAH,GAAAL,EAAAS,EAAAR,EAAAO,GAAAD,GAAAP,EAAAE,EAAAD,EAAAK,GACArB,GAUA6X,EAAAgB,KAAAhX,QAAA,SAAA7B,EAAAvoC,GACA,GAAAstC,GAAAhQ,EAAAC,EAAAgQ,EACA+U,EAAAC,EAAAC,EAAAC,EACAC,EACAC,EAAAC,EAAAC,EAAAC,EAEAxV,EAAA8T,KAAAc,UAAAC,KAAAniD,EAAA,GACAs9B,EAAA8jB,KAAAc,UAAAC,KAAAniD,EAAA,GACAu9B,EAAA6jB,KAAAc,UAAAC,KAAAniD,EAAA,GACAutC,EAAA6T,KAAAc,UAAAC,KAAAniD,EAAA,GAqEA,OAlEA0iD,GAAAtB,KAAAc,UAAAE,QAAA9U,EAAAhQ,EAAA,SACAilB,EAAAnB,KAAAc,UAAAE,QAAA7kB,EAAAgQ,EAAA,SACA+U,EAAAlB,KAAAc,UAAAE,QAAAM,EAAAH,EAAA,SACAA,EAAAnB,KAAAc,UAAAE,QAAAG,EAAAG,EAAA,SAEAA,EAAAtB,KAAAc,UAAAE,QAAA9U,EAAAhQ,EAAA,SACAmlB,EAAArB,KAAAc,UAAAE,QAAA7kB,EAAAgQ,EAAA,SACAiV,EAAApB,KAAAc,UAAAE,QAAAM,EAAAD,EAAA,SACAA,EAAArB,KAAAc,UAAAE,QAAAK,EAAAC,EAAA,SAEAA,EAAAtB,KAAAc,UAAAtX,IAAA4X,EAAAC,GACAC,EAAAtB,KAAAc,UAAAa,QAAAL,EAAA,SACAC,EAAAvB,KAAAc,UAAAtX,IAAA2X,EAAAG,GACAE,EAAAxB,KAAAc,UAAAtX,IAAA0X,EAAAI,GACAA,EAAAtB,KAAAc,UAAAa,QAAAL,EAAA,SACAC,EAAAvB,KAAAc,UAAAhV,IAAAkU,KAAAc,UAAAtX,IAAA2X,EAAAG,GAAAC,GACAC,EAAAxB,KAAAc,UAAAhV,IAAAkU,KAAAc,UAAAtX,IAAA0X,EAAAI,GAAAE,GACAA,EAAAxB,KAAAc,UAAAa,QAAAH,EAAA,SAEAF,EAAAtB,KAAAc,UAAAtX,IAAA2X,EAAAC,GACAE,EAAAtB,KAAAc,UAAAa,QAAAL,EAAA,SACAC,EAAAvB,KAAAc,UAAAviC,IAAAyhC,KAAAc,UAAAtX,IAAA6X,EAAAC,GAAAC,GACAG,EAAA1B,KAAAc,UAAAtX,IAAA0X,EAAAI,GACAA,EAAAtB,KAAAc,UAAAa,QAAAL,EAAA,SACAC,EAAAvB,KAAAc,UAAAhV,IAAAyV,EAAAvB,KAAAc,UAAAtX,IAAA6X,EAAAC,IACAI,EAAA1B,KAAAc,UAAAhV,IAAAkU,KAAAc,UAAAtX,IAAA0X,EAAAI,GAAAI,GACAA,EAAA1B,KAAAc,UAAAa,QAAAD,EAAA,SAEAJ,EAAAtB,KAAAc,UAAAtX,IAAAwW,KAAAc,UAAAa,QAAAR,EAAA,SAAAE,GACAC,EAAAtB,KAAAc,UAAAa,QAAAL,EAAA,SACAF,EAAApB,KAAAc,UAAAa,QAAAP,EAAA,SACAG,EAAAvB,KAAAc,UAAAviC,IAAAyhC,KAAAc,UAAAtX,IAAA4X,EAAAE,GAAAC,GACAE,EAAAzB,KAAAc,UAAAtX,IAAA0X,EAAAI,GACAA,EAAAtB,KAAAc,UAAAa,QAAAL,EAAA,SACAC,EAAAvB,KAAAc,UAAAhV,IAAAyV,EAAAvB,KAAAc,UAAAtX,IAAA4X,EAAAE,IACAG,EAAAzB,KAAAc,UAAAhV,IAAAkU,KAAAc,UAAAtX,IAAA0X,EAAAI,GAAAG,GACAA,EAAAzB,KAAAc,UAAAa,QAAAF,EAAA,SAEAH,EAAAtB,KAAAc,UAAAtX,IAAA0X,EAAAC,GACAG,EAAAtB,KAAAc,UAAAa,QAAAL,EAAA,SACAG,EAAAzB,KAAAc,UAAAviC,IAAAyhC,KAAAc,UAAAtX,IAAA6X,EAAAC,GAAAG,GACAC,EAAA1B,KAAAc,UAAAhV,IAAAkU,KAAAc,UAAAtX,IAAA4X,EAAAE,GAAAI,GACAJ,EAAAtB,KAAAc,UAAAa,QAAAL,EAAA,SACAG,EAAAzB,KAAAc,UAAAhV,IAAAkU,KAAAc,UAAAtX,IAAA6X,EAAAC,GAAAG,GACAC,EAAA1B,KAAAc,UAAAhV,IAAA4V,EAAA1B,KAAAc,UAAAtX,IAAA4X,EAAAE,IAEAA,EAAAtB,KAAAc,UAAAtX,IAAA0X,EAAAG,GACAC,EAAAtB,KAAAc,UAAAa,QAAAL,EAAA,SACAE,EAAAxB,KAAAc,UAAAhV,IAAA0V,EAAAxB,KAAAc,UAAAtX,IAAA4X,EAAAE,IACAG,EAAAzB,KAAAc,UAAAviC,IAAAyhC,KAAAc,UAAAtX,IAAA2X,EAAAG,GAAAG,GACAH,EAAAtB,KAAAc,UAAAa,QAAAL,EAAA,SACAE,EAAAxB,KAAAc,UAAAviC,IAAAyhC,KAAAc,UAAAtX,IAAA4X,EAAAE,GAAAE,GACAC,EAAAzB,KAAAc,UAAAhV,IAAA2V,EAAAzB,KAAAc,UAAAtX,IAAA2X,EAAAG,IAEAA,EAAAtB,KAAAc,UAAAtX,IAAA0X,EAAAE,GACAE,EAAAtB,KAAAc,UAAAa,QAAAL,EAAA,SACAE,EAAAxB,KAAAc,UAAAviC,IAAAyhC,KAAAc,UAAAtX,IAAA6X,EAAAC,GAAAE,GACAE,EAAA1B,KAAAc,UAAAhV,IAAA4V,EAAA1B,KAAAc,UAAAtX,IAAA2X,EAAAG,IACAA,EAAAtB,KAAAc,UAAAa,QAAAL,EAAA,SACAE,EAAAxB,KAAAc,UAAAhV,IAAA0V,EAAAxB,KAAAc,UAAAtX,IAAA6X,EAAAC,IACAI,EAAA1B,KAAAc,UAAAviC,IAAAyhC,KAAAc,UAAAtX,IAAA2X,EAAAG,GAAAI,GAEA1B,KAAAc,UAAAG,MAAA9Z,EAAA,EAAAoa,GACAvB,KAAAc,UAAAG,MAAA9Z,EAAA,EAAAqa,GACAxB,KAAAc,UAAAG,MAAA9Z,EAAA,EAAAsa,GACAzB,KAAAc,UAAAG,MAAA9Z,EAAA,GAAAua,GACAva,GAUA6X,EAAAhW,QAAAlnC,EAAAW,SAAAu8C,EAAAgB,KAAAhX,QAAAgW,EAAAe,OAAA/W,QAQAgW,EAAA/V,YAAA,SAAArqC,GACA,GAAA0pC,GAAA1pC,EAAA,GAAAspC,EAAAtpC,EAAA,GAAAupC,EAAAvpC,EAAA,GAAAksC,EAAAlsC,EAAA,GACA2pC,EAAA3pC,EAAA,GAAA4pC,EAAA5pC,EAAA,GAAAwpC,EAAAxpC,EAAA,GAAAmsC,EAAAnsC,EAAA,GACA6pC,EAAA7pC,EAAA,GAAA8pC,EAAA9pC,EAAA,GAAA+pC,EAAA/pC,EAAA,IAAAosC,EAAApsC,EAAA,IACAqsC,EAAArsC,EAAA,IAAAssC,EAAAtsC,EAAA,IAAAusC,EAAAvsC,EAAA,IAAAwsC,EAAAxsC,EAAA,IAEAsqC,EAAAZ,EAAAE,EAAAN,EAAAK,EACAK,EAAAN,EAAAF,EAAAD,EAAAI,EACAY,EAAAb,EAAAyC,EAAAD,EAAAvC,EACA8C,EAAAnD,EAAAE,EAAAD,EAAAK,EACA8C,EAAApD,EAAA6C,EAAAD,EAAAtC,EACA+C,EAAApD,EAAA4C,EAAAD,EAAA1C,EACAoD,EAAA/C,EAAAyC,EAAAxC,EAAAuC,EACAQ,EAAAhD,EAAA0C,EAAAxC,EAAAsC,EACAS,EAAAjD,EAAA2C,EAAAJ,EAAAC,EACAU,EAAAjD,EAAAyC,EAAAxC,EAAAuC,EACA9B,EAAAV,EAAA0C,EAAAJ,EAAAE,EACArC,EAAAF,EAAAyC,EAAAJ,EAAAG,CAGA,OAAAjC,GAAAL,EAAAD,EAAAQ,EAAAD,EAAAwC,EAAAN,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,GAWAwT,EAAAgB,KAAAp+B,SAAA,SAAAulB,EAAAvoC,EAAAC,GACA,GAAAqtC,GAAA8T,KAAAc,UAAAC,KAAAniD,EAAA,GACAs9B,EAAA8jB,KAAAc,UAAAC,KAAAniD,EAAA,GACAu9B,EAAA6jB,KAAAc,UAAAC,KAAAniD,EAAA,GACAutC,EAAA6T,KAAAc,UAAAC,KAAAniD,EAAA,IAEA6tC,EAAAuT,KAAAc,UAAAC,KAAAliD,EAAA,GACA6hD,EAAAV,KAAAc,UAAAviC,IACAyhC,KAAAc,UAAAtX,IAAAwW,KAAAc,UAAAa,QAAAlV,EAAA,SAAAP,GACA8T,KAAAc,UAAAviC,IACAyhC,KAAAc,UAAAtX,IAAAwW,KAAAc,UAAAa,QAAAlV,EAAA,SAAAvQ,GACA8jB,KAAAc,UAAAviC,IACAyhC,KAAAc,UAAAtX,IAAAwW,KAAAc,UAAAa,QAAAlV,EAAA,SAAAtQ,GACA6jB,KAAAc,UAAAtX,IAAAwW,KAAAc,UAAAa,QAAAlV,EAAA,SAAAN,KACA6T,MAAAc,UAAAG,MAAA9Z,EAAA,EAAAuZ,EAEA,IAAA1lB,GAAAglB,KAAAc,UAAAC,KAAAliD,EAAA,GACA8hD,EAAAX,KAAAc,UAAAviC,IACAyhC,KAAAc,UAAAtX,IAAAwW,KAAAc,UAAAa,QAAA3mB,EAAA,SAAAkR,GACA8T,KAAAc,UAAAviC,IACAyhC,KAAAc,UAAAtX,IAAAwW,KAAAc,UAAAa,QAAA3mB,EAAA,SAAAkB,GACA8jB,KAAAc,UAAAviC,IACAyhC,KAAAc,UAAAtX,IAAAwW,KAAAc,UAAAa,QAAA3mB,EAAA,SAAAmB,GACA6jB,KAAAc,UAAAtX,IAAAwW,KAAAc,UAAAa,QAAA3mB,EAAA,SAAAmR,KACA6T,MAAAc,UAAAG,MAAA9Z,EAAA,EAAAwZ,EAEA,IAAA1lB,GAAA+kB,KAAAc,UAAAC,KAAAliD,EAAA,GACA+hD,EAAAZ,KAAAc,UAAAviC,IACAyhC,KAAAc,UAAAtX,IAAAwW,KAAAc,UAAAa,QAAA1mB,EAAA,SAAAiR,GACA8T,KAAAc,UAAAviC,IACAyhC,KAAAc,UAAAtX,IAAAwW,KAAAc,UAAAa,QAAA1mB,EAAA,SAAAiB,GACA8jB,KAAAc,UAAAviC,IACAyhC,KAAAc,UAAAtX,IAAAwW,KAAAc,UAAAa,QAAA1mB,EAAA,SAAAkB,GACA6jB,KAAAc,UAAAtX,IAAAwW,KAAAc,UAAAa,QAAA1mB,EAAA,SAAAkR,KACA6T,MAAAc,UAAAG,MAAA9Z,EAAA,EAAAyZ,EAEA,IAAAlU,GAAAsT,KAAAc,UAAAC,KAAAliD,EAAA,IACAgiD,EAAAb,KAAAc,UAAAviC,IACAyhC,KAAAc,UAAAtX,IAAAwW,KAAAc,UAAAa,QAAAjV,EAAA,SAAAR,GACA8T,KAAAc,UAAAviC,IACAyhC,KAAAc,UAAAtX,IAAAwW,KAAAc,UAAAa,QAAAjV,EAAA,SAAAxQ,GACA8jB,KAAAc,UAAAviC,IACAyhC,KAAAc,UAAAtX,IAAAwW,KAAAc,UAAAa,QAAAjV,EAAA,SAAAvQ,GACA6jB,KAAAc,UAAAtX,IAAAwW,KAAAc,UAAAa,QAAAjV,EAAA,SAAAP,KAGA,OAFA6T,MAAAc,UAAAG,MAAA9Z,EAAA,GAAA0Z,GAEA1Z,GAWA6X,EAAAe,OAAAn+B,SAAA,SAAAulB,EAAAvoC,EAAAC,GACA,GAAAypC,GAAA1pC,EAAA,GAAAspC,EAAAtpC,EAAA,GAAAupC,EAAAvpC,EAAA,GAAAksC,EAAAlsC,EAAA,GACA2pC,EAAA3pC,EAAA,GAAA4pC,EAAA5pC,EAAA,GAAAwpC,EAAAxpC,EAAA,GAAAmsC,EAAAnsC,EAAA,GACA6pC,EAAA7pC,EAAA,GAAA8pC,EAAA9pC,EAAA,GAAA+pC,EAAA/pC,EAAA,IAAAosC,EAAApsC,EAAA,IACAqsC,EAAArsC,EAAA,IAAAssC,EAAAtsC,EAAA,IAAAusC,EAAAvsC,EAAA,IAAAwsC,EAAAxsC,EAAA,IAGA6tC,EAAA5tC,EAAA,GAAAm8B,EAAAn8B,EAAA,GAAAo8B,EAAAp8B,EAAA,GAAA6tC,EAAA7tC,EAAA,EAuBA,OAtBAsoC,GAAA,GAAAsF,EAAAnE,EAAAtN,EAAAuN,EAAAtN,EAAAwN,EAAAiE,EAAAzB,EACA9D,EAAA,GAAAsF,EAAAvE,EAAAlN,EAAAwN,EAAAvN,EAAAyN,EAAAgE,EAAAxB,EACA/D,EAAA,GAAAsF,EAAAtE,EAAAnN,EAAAoN,EAAAnN,EAAA0N,EAAA+D,EAAAvB,EACAhE,EAAA,GAAAsF,EAAA3B,EAAA9P,EAAA+P,EAAA9P,EAAA+P,EAAA0B,EAAAtB,EAEAqB,EAAA5tC,EAAA,GAAcm8B,EAAAn8B,EAAA,GAAWo8B,EAAAp8B,EAAA,GAAW6tC,EAAA7tC,EAAA,GACpCsoC,EAAA,GAAAsF,EAAAnE,EAAAtN,EAAAuN,EAAAtN,EAAAwN,EAAAiE,EAAAzB,EACA9D,EAAA,GAAAsF,EAAAvE,EAAAlN,EAAAwN,EAAAvN,EAAAyN,EAAAgE,EAAAxB,EACA/D,EAAA,GAAAsF,EAAAtE,EAAAnN,EAAAoN,EAAAnN,EAAA0N,EAAA+D,EAAAvB,EACAhE,EAAA,GAAAsF,EAAA3B,EAAA9P,EAAA+P,EAAA9P,EAAA+P,EAAA0B,EAAAtB,EAEAqB,EAAA5tC,EAAA,GAAcm8B,EAAAn8B,EAAA,GAAWo8B,EAAAp8B,EAAA,IAAY6tC,EAAA7tC,EAAA,IACrCsoC,EAAA,GAAAsF,EAAAnE,EAAAtN,EAAAuN,EAAAtN,EAAAwN,EAAAiE,EAAAzB,EACA9D,EAAA,GAAAsF,EAAAvE,EAAAlN,EAAAwN,EAAAvN,EAAAyN,EAAAgE,EAAAxB,EACA/D,EAAA,IAAAsF,EAAAtE,EAAAnN,EAAAoN,EAAAnN,EAAA0N,EAAA+D,EAAAvB,EACAhE,EAAA,IAAAsF,EAAA3B,EAAA9P,EAAA+P,EAAA9P,EAAA+P,EAAA0B,EAAAtB,EAEAqB,EAAA5tC,EAAA,IAAem8B,EAAAn8B,EAAA,IAAYo8B,EAAAp8B,EAAA,IAAY6tC,EAAA7tC,EAAA,IACvCsoC,EAAA,IAAAsF,EAAAnE,EAAAtN,EAAAuN,EAAAtN,EAAAwN,EAAAiE,EAAAzB,EACA9D,EAAA,IAAAsF,EAAAvE,EAAAlN,EAAAwN,EAAAvN,EAAAyN,EAAAgE,EAAAxB,EACA/D,EAAA,IAAAsF,EAAAtE,EAAAnN,EAAAoN,EAAAnN,EAAA0N,EAAA+D,EAAAvB,EACAhE,EAAA,IAAAsF,EAAA3B,EAAA9P,EAAA+P,EAAA9P,EAAA+P,EAAA0B,EAAAtB,EACAjE,GAWA6X,EAAAp9B,SAAA9f,EAAAW,SAAAu8C,EAAAgB,KAAAp+B,SAAAo9B,EAAAe,OAAAn+B,SAMAo9B,EAAAxV,IAAAwV,EAAAp9B,SAUAo9B,EAAAe,OAAAtW,UAAA,SAAAtC,EAAAvoC,EAAAgT,GACA,GACA02B,GAAAJ,EAAAC,EAAA2C,EACAvC,EAAAC,EAAAJ,EAAA2C,EACAtC,EAAAC,EAAAC,EAAAqC,EAHAjrC,EAAA6R,EAAA,GAAAzO,EAAAyO,EAAA,GAAAoG,EAAApG,EAAA,EAyBA,OApBAhT,KAAAuoC,GACAA,EAAA,IAAAvoC,EAAA,GAAAmB,EAAAnB,EAAA,GAAAuE,EAAAvE,EAAA,GAAAoZ,EAAApZ,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,GAAAmB,EAAAnB,EAAA,GAAAuE,EAAAvE,EAAA,GAAAoZ,EAAApZ,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,GAAAmB,EAAAnB,EAAA,GAAAuE,EAAAvE,EAAA,IAAAoZ,EAAApZ,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,GAAAmB,EAAAnB,EAAA,GAAAuE,EAAAvE,EAAA,IAAAoZ,EAAApZ,EAAA,MAEA0pC,EAAA1pC,EAAA,GAAmBspC,EAAAtpC,EAAA,GAAYupC,EAAAvpC,EAAA,GAAYksC,EAAAlsC,EAAA,GAC3C2pC,EAAA3pC,EAAA,GAAmB4pC,EAAA5pC,EAAA,GAAYwpC,EAAAxpC,EAAA,GAAYmsC,EAAAnsC,EAAA,GAC3C6pC,EAAA7pC,EAAA,GAAmB8pC,EAAA9pC,EAAA,GAAY+pC,EAAA/pC,EAAA,IAAaosC,EAAApsC,EAAA,IAE5CuoC,EAAA,GAAAmB,EAAqBnB,EAAA,GAAAe,EAAcf,EAAA,GAAAgB,EAAchB,EAAA,GAAA2D,EACjD3D,EAAA,GAAAoB,EAAqBpB,EAAA,GAAAqB,EAAcrB,EAAA,GAAAiB,EAAcjB,EAAA,GAAA4D,EACjD5D,EAAA,GAAAsB,EAAqBtB,EAAA,GAAAuB,EAAcvB,EAAA,IAAAwB,EAAexB,EAAA,IAAA6D,EAElD7D,EAAA,IAAAmB,EAAAvoC,EAAAwoC,EAAAplC,EAAAslC,EAAAzwB,EAAApZ,EAAA,IACAuoC,EAAA,IAAAe,EAAAnoC,EAAAyoC,EAAArlC,EAAAulC,EAAA1wB,EAAApZ,EAAA,IACAuoC,EAAA,IAAAgB,EAAApoC,EAAAqoC,EAAAjlC,EAAAwlC,EAAA3wB,EAAApZ,EAAA,IACAuoC,EAAA,IAAA2D,EAAA/qC,EAAAgrC,EAAA5nC,EAAA6nC,EAAAhzB,EAAApZ,EAAA,KAGAuoC,GAWA6X,EAAAgB,KAAAvW,UAAA,SAAAtC,EAAAvoC,EAAAgT,GACA,GAAAs6B,GAAA8T,KAAAc,UAAAC,KAAAniD,EAAA,GACAs9B,EAAA8jB,KAAAc,UAAAC,KAAAniD,EAAA,GACAu9B,EAAA6jB,KAAAc,UAAAC,KAAAniD,EAAA,GACAutC,EAAA6T,KAAAc,UAAAC,KAAAniD,EAAA,IACA8wC,EAAAsQ,KAAAc,UAAAlvC,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAEAhT,KAAAuoC,IACAA,EAAA,GAAAvoC,EAAA,GAAsBuoC,EAAA,GAAAvoC,EAAA,GAAeuoC,EAAA,GAAAvoC,EAAA,GAAeuoC,EAAA,GAAAvoC,EAAA,GACpDuoC,EAAA,GAAAvoC,EAAA,GAAsBuoC,EAAA,GAAAvoC,EAAA,GAAeuoC,EAAA,GAAAvoC,EAAA,GAAeuoC,EAAA,GAAAvoC,EAAA,GACpDuoC,EAAA,GAAAvoC,EAAA,GAAsBuoC,EAAA,GAAAvoC,EAAA,GAAeuoC,EAAA,IAAAvoC,EAAA,IAAiBuoC,EAAA,IAAAvoC,EAAA,KAGtDstC,EAAA8T,KAAAc,UAAAtX,IAAA0C,EAAA8T,KAAAc,UAAAa,QAAAjS,EAAA,UACAxT,EAAA8jB,KAAAc,UAAAtX,IAAAtN,EAAA8jB,KAAAc,UAAAa,QAAAjS,EAAA,UACAvT,EAAA6jB,KAAAc,UAAAtX,IAAArN,EAAA6jB,KAAAc,UAAAa,QAAAjS,EAAA,SAEA,IAAAmS,GAAA7B,KAAAc,UAAAviC,IAAA2tB,EAAA8T,KAAAc,UAAAviC,IAAA2d,EAAA8jB,KAAAc,UAAAviC,IAAA4d,EAAAgQ,IAGA,OAFA6T,MAAAc,UAAAG,MAAA9Z,EAAA,GAAA0a,GAEA1a,GAWA6X,EAAAvV,UAAA3nC,EAAAW,SAAAu8C,EAAAgB,KAAAvW,UAAAuV,EAAAe,OAAAtW,UAUAuV,EAAAe,OAAApb,MAAA,SAAAwC,EAAAvoC,EAAAgT,GACA,GAAA7R,GAAA6R,EAAA,GAAAzO,EAAAyO,EAAA,GAAAoG,EAAApG,EAAA,EAkBA,OAhBAu1B,GAAA,GAAAvoC,EAAA,GAAAmB,EACAonC,EAAA,GAAAvoC,EAAA,GAAAmB,EACAonC,EAAA,GAAAvoC,EAAA,GAAAmB,EACAonC,EAAA,GAAAvoC,EAAA,GAAAmB,EACAonC,EAAA,GAAAvoC,EAAA,GAAAuE,EACAgkC,EAAA,GAAAvoC,EAAA,GAAAuE,EACAgkC,EAAA,GAAAvoC,EAAA,GAAAuE,EACAgkC,EAAA,GAAAvoC,EAAA,GAAAuE,EACAgkC,EAAA,GAAAvoC,EAAA,GAAAoZ,EACAmvB,EAAA,GAAAvoC,EAAA,GAAAoZ,EACAmvB,EAAA,IAAAvoC,EAAA,IAAAoZ,EACAmvB,EAAA,IAAAvoC,EAAA,IAAAoZ,EACAmvB,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,GAWA6X,EAAAgB,KAAArb,MAAA,SAAAwC,EAAAvoC,EAAAgT,GACA,GAAAs6B,GAAAhQ,EAAAC,EACAuT,EAAAsQ,KAAAc,UAAAlvC,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAkBA,OAhBAs6B,GAAA8T,KAAAc,UAAAC,KAAAniD,EAAA,GACAohD,KAAAc,UAAAG,MACA9Z,EAAA,EAAA6Y,KAAAc,UAAAtX,IAAA0C,EAAA8T,KAAAc,UAAAa,QAAAjS,EAAA,WAEAxT,EAAA8jB,KAAAc,UAAAC,KAAAniD,EAAA,GACAohD,KAAAc,UAAAG,MACA9Z,EAAA,EAAA6Y,KAAAc,UAAAtX,IAAAtN,EAAA8jB,KAAAc,UAAAa,QAAAjS,EAAA,WAEAvT,EAAA6jB,KAAAc,UAAAC,KAAAniD,EAAA,GACAohD,KAAAc,UAAAG,MACA9Z,EAAA,EAAA6Y,KAAAc,UAAAtX,IAAArN,EAAA6jB,KAAAc,UAAAa,QAAAjS,EAAA,WAEAvI,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,GAWA6X,EAAAra,MAAA7iC,EAAAW,SAAAu8C,EAAAgB,KAAArb,MAAAqa,EAAAe,OAAApb,MAWAqa,EAAAtV,OAAA,SAAAvC,EAAAvoC,EAAA+qC,EAAAmY,GACA,GAEAz+C,GAAA1F,EAAAgH,EACA2jC,EAAAJ,EAAAC,EAAA2C,EACAvC,EAAAC,EAAAJ,EAAA2C,EACAtC,EAAAC,EAAAC,EAAAqC,EACA9B,EAAAN,EAAAO,EACAC,EAAAP,EAAAQ,EACAC,EAAAR,EAAAS,EARAxpC,EAAA+hD,EAAA,GAAA3+C,EAAA2+C,EAAA,GAAA9pC,EAAA8pC,EAAA,GACAxmB,EAAAl5B,KAAAkhC,KAAAvjC,IAAAoD,IAAA6U,IASA,OAAA5V,MAAAY,IAAAs4B,GAAAx5B,EAAAC,QAA2C,MAE3Cu5B,EAAA,EAAAA,EACAv7B,GAAAu7B,EACAn4B,GAAAm4B,EACAtjB,GAAAsjB,EAEAj4B,EAAAjB,KAAAshC,IAAAiG,GACAhsC,EAAAyE,KAAAuhC,IAAAgG,GACAhlC,EAAA,EAAAhH,EAEA2qC,EAAA1pC,EAAA,GAAespC,EAAAtpC,EAAA,GAAYupC,EAAAvpC,EAAA,GAAYksC,EAAAlsC,EAAA,GACvC2pC,EAAA3pC,EAAA,GAAe4pC,EAAA5pC,EAAA,GAAYwpC,EAAAxpC,EAAA,GAAYmsC,EAAAnsC,EAAA,GACvC6pC,EAAA7pC,EAAA,GAAe8pC,EAAA9pC,EAAA,GAAY+pC,EAAA/pC,EAAA,IAAaosC,EAAApsC,EAAA,IAGxCsqC,EAAAnpC,IAAA4E,EAAAhH,EAAwBirC,EAAAzlC,EAAApD,EAAA4E,EAAAqT,EAAA3U,EAAyB8lC,EAAAnxB,EAAAjY,EAAA4E,EAAAxB,EAAAE,EACjD+lC,EAAArpC,EAAAoD,EAAAwB,EAAAqT,EAAA3U,EAA4BwlC,EAAA1lC,IAAAwB,EAAAhH,EAAqB0rC,EAAArxB,EAAA7U,EAAAwB,EAAA5E,EAAAsD,EACjDimC,EAAAvpC,EAAAiY,EAAArT,EAAAxB,EAAAE,EAA4BylC,EAAA3lC,EAAA6U,EAAArT,EAAA5E,EAAAsD,EAAyBkmC,EAAAvxB,IAAArT,EAAAhH,EAGrDwpC,EAAA,GAAAmB,EAAAY,EAAAX,EAAAK,EAAAH,EAAAU,EACAhC,EAAA,GAAAe,EAAAgB,EAAAV,EAAAI,EAAAF,EAAAS,EACAhC,EAAA,GAAAgB,EAAAe,EAAAd,EAAAQ,EAAAD,EAAAQ,EACAhC,EAAA,GAAA2D,EAAA5B,EAAA6B,EAAAnC,EAAAoC,EAAA7B,EACAhC,EAAA,GAAAmB,EAAAc,EAAAb,EAAAM,EAAAJ,EAAAY,EACAlC,EAAA,GAAAe,EAAAkB,EAAAZ,EAAAK,EAAAH,EAAAW,EACAlC,EAAA,GAAAgB,EAAAiB,EAAAhB,EAAAS,EAAAF,EAAAU,EACAlC,EAAA,GAAA2D,EAAA1B,EAAA2B,EAAAlC,EAAAmC,EAAA3B,EACAlC,EAAA,GAAAmB,EAAAgB,EAAAf,EAAAO,EAAAL,EAAAc,EACApC,EAAA,GAAAe,EAAAoB,EAAAd,EAAAM,EAAAJ,EAAAa,EACApC,EAAA,IAAAgB,EAAAmB,EAAAlB,EAAAU,EAAAH,EAAAY,EACApC,EAAA,IAAA2D,EAAAxB,EAAAyB,EAAAjC,EAAAkC,EAAAzB,EAEA3qC,IAAAuoC,IACAA,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,KAEAuoC,IAWA6X,EAAAe,OAAAzQ,QAAA,SAAAnI,EAAAvoC,EAAA+qC,GACA,GAAAtmC,GAAAjB,KAAAshC,IAAAiG,GACAhsC,EAAAyE,KAAAuhC,IAAAgG,GACApB,EAAA3pC,EAAA,GACA4pC,EAAA5pC,EAAA,GACAwpC,EAAAxpC,EAAA,GACAmsC,EAAAnsC,EAAA,GACA6pC,EAAA7pC,EAAA,GACA8pC,EAAA9pC,EAAA,GACA+pC,EAAA/pC,EAAA,IACAosC,EAAApsC,EAAA,GAsBA,OApBAA,KAAAuoC,IACAA,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,KAIAuoC,EAAA,GAAAoB,EAAA5qC,EAAA8qC,EAAAplC,EACA8jC,EAAA,GAAAqB,EAAA7qC,EAAA+qC,EAAArlC,EACA8jC,EAAA,GAAAiB,EAAAzqC,EAAAgrC,EAAAtlC,EACA8jC,EAAA,GAAA4D,EAAAptC,EAAAqtC,EAAA3nC,EACA8jC,EAAA,GAAAsB,EAAA9qC,EAAA4qC,EAAAllC,EACA8jC,EAAA,GAAAuB,EAAA/qC,EAAA6qC,EAAAnlC,EACA8jC,EAAA,IAAAwB,EAAAhrC,EAAAyqC,EAAA/kC,EACA8jC,EAAA,IAAA6D,EAAArtC,EAAAotC,EAAA1nC,EACA8jC,GAWA6X,EAAAgB,KAAA1Q,QAAA,SAAAnI,EAAAvoC,EAAA+qC,GACA,GAAAtmC,GAAA28C,KAAAc,UAAAiB,MAAA3/C,KAAAshC,IAAAiG,IACAhsC,EAAAqiD,KAAAc,UAAAiB,MAAA3/C,KAAAuhC,IAAAgG,GAEA/qC,KAAAuoC,IACAA,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IAIA,IAAAojD,GAAAhC,KAAAc,UAAAC,KAAAniD,EAAA,GACAqjD,EAAAjC,KAAAc,UAAAC,KAAAniD,EAAA,EAKA,OAJAohD,MAAAc,UAAAG,MAAA9Z,EAAA,EACA6Y,KAAAc,UAAAviC,IAAAyhC,KAAAc,UAAAtX,IAAAwY,EAAArkD,GAAAqiD,KAAAc,UAAAtX,IAAAyY,EAAA5+C,KACA28C,KAAAc,UAAAG,MAAA9Z,EAAA,EACA6Y,KAAAc,UAAAhV,IAAAkU,KAAAc,UAAAtX,IAAAyY,EAAAtkD,GAAAqiD,KAAAc,UAAAtX,IAAAwY,EAAA3+C,KACA8jC,GAWA6X,EAAA1P,QAAAxtC,EAAAW,SAAAu8C,EAAAgB,KAAA1Q,QAAA0P,EAAAe,OAAAzQ,QAUA0P,EAAAe,OAAAxQ,QAAA,SAAApI,EAAAvoC,EAAA+qC,GACA,GAAAtmC,GAAAjB,KAAAshC,IAAAiG,GACAhsC,EAAAyE,KAAAuhC,IAAAgG,GACArB,EAAA1pC,EAAA,GACAspC,EAAAtpC,EAAA,GACAupC,EAAAvpC,EAAA,GACAksC,EAAAlsC,EAAA,GACA6pC,EAAA7pC,EAAA,GACA8pC,EAAA9pC,EAAA,GACA+pC,EAAA/pC,EAAA,IACAosC,EAAApsC,EAAA,GAsBA,OApBAA,KAAAuoC,IACAA,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,KAIAuoC,EAAA,GAAAmB,EAAA3qC,EAAA8qC,EAAAplC,EACA8jC,EAAA,GAAAe,EAAAvqC,EAAA+qC,EAAArlC,EACA8jC,EAAA,GAAAgB,EAAAxqC,EAAAgrC,EAAAtlC,EACA8jC,EAAA,GAAA2D,EAAAntC,EAAAqtC,EAAA3nC,EACA8jC,EAAA,GAAAmB,EAAAjlC,EAAAolC,EAAA9qC,EACAwpC,EAAA,GAAAe,EAAA7kC,EAAAqlC,EAAA/qC,EACAwpC,EAAA,IAAAgB,EAAA9kC,EAAAslC,EAAAhrC,EACAwpC,EAAA,IAAA2D,EAAAznC,EAAA2nC,EAAArtC,EACAwpC,GAWA6X,EAAAgB,KAAAzQ,QAAA,SAAApI,EAAAvoC,EAAA+qC,GACA,GAAAtmC,GAAA28C,KAAAc,UAAAiB,MAAA3/C,KAAAshC,IAAAiG,IACAhsC,EAAAqiD,KAAAc,UAAAiB,MAAA3/C,KAAAuhC,IAAAgG,GAEA/qC,KAAAuoC,IACAA,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IAIA,IAAAsjD,GAAAlC,KAAAc,UAAAC,KAAAniD,EAAA,GACAqjD,EAAAjC,KAAAc,UAAAC,KAAAniD,EAAA,EAKA,OAJAohD,MAAAc,UAAAG,MAAA9Z,EAAA,EACA6Y,KAAAc,UAAAhV,IAAAkU,KAAAc,UAAAtX,IAAA0Y,EAAAvkD,GAAAqiD,KAAAc,UAAAtX,IAAAyY,EAAA5+C,KACA28C,KAAAc,UAAAG,MAAA9Z,EAAA,EACA6Y,KAAAc,UAAAviC,IAAAyhC,KAAAc,UAAAtX,IAAA0Y,EAAA7+C,GAAA28C,KAAAc,UAAAtX,IAAAyY,EAAAtkD,KACAwpC,GAWA6X,EAAAzP,QAAAztC,EAAAW,SAAAu8C,EAAAgB,KAAAzQ,QAAAyP,EAAAe,OAAAxQ,QAUAyP,EAAAe,OAAAvQ,QAAA,SAAArI,EAAAvoC,EAAA+qC,GACA,GAAAtmC,GAAAjB,KAAAshC,IAAAiG,GACAhsC,EAAAyE,KAAAuhC,IAAAgG,GACArB,EAAA1pC,EAAA,GACAspC,EAAAtpC,EAAA,GACAupC,EAAAvpC,EAAA,GACAksC,EAAAlsC,EAAA,GACA2pC,EAAA3pC,EAAA,GACA4pC,EAAA5pC,EAAA,GACAwpC,EAAAxpC,EAAA,GACAmsC,EAAAnsC,EAAA,EAsBA,OApBAA,KAAAuoC,IACAA,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,KAIAuoC,EAAA,GAAAmB,EAAA3qC,EAAA4qC,EAAAllC,EACA8jC,EAAA,GAAAe,EAAAvqC,EAAA6qC,EAAAnlC,EACA8jC,EAAA,GAAAgB,EAAAxqC,EAAAyqC,EAAA/kC,EACA8jC,EAAA,GAAA2D,EAAAntC,EAAAotC,EAAA1nC,EACA8jC,EAAA,GAAAoB,EAAA5qC,EAAA2qC,EAAAjlC,EACA8jC,EAAA,GAAAqB,EAAA7qC,EAAAuqC,EAAA7kC,EACA8jC,EAAA,GAAAiB,EAAAzqC,EAAAwqC,EAAA9kC,EACA8jC,EAAA,GAAA4D,EAAAptC,EAAAmtC,EAAAznC,EACA8jC,GAWA6X,EAAAgB,KAAAxQ,QAAA,SAAArI,EAAAvoC,EAAA+qC,GACA,GAAAtmC,GAAA28C,KAAAc,UAAAiB,MAAA3/C,KAAAshC,IAAAiG,IACAhsC,EAAAqiD,KAAAc,UAAAiB,MAAA3/C,KAAAuhC,IAAAgG,GAEA/qC,KAAAuoC,IACAA,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IACAuoC,EAAA,IAAAvoC,EAAA,IAIA,IAAAsjD,GAAAlC,KAAAc,UAAAC,KAAAniD,EAAA,GACAojD,EAAAhC,KAAAc,UAAAC,KAAAniD,EAAA,EAKA,OAJAohD,MAAAc,UAAAG,MAAA9Z,EAAA,EACA6Y,KAAAc,UAAAviC,IAAAyhC,KAAAc,UAAAtX,IAAA0Y,EAAAvkD,GAAAqiD,KAAAc,UAAAtX,IAAAwY,EAAA3+C,KACA28C,KAAAc,UAAAG,MAAA9Z,EAAA,EACA6Y,KAAAc,UAAAhV,IAAAkU,KAAAc,UAAAtX,IAAAwY,EAAArkD,GAAAqiD,KAAAc,UAAAtX,IAAA0Y,EAAA7+C,KACA8jC,GAWA6X,EAAAxP,QAAA1tC,EAAAW,SAAAu8C,EAAAgB,KAAAxQ,QAAAwP,EAAAe,OAAAvQ,QAaAwP,EAAApV,gBAAA,SAAAzC,EAAAv1B,GAiBA,MAhBAu1B,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,IAAAv1B,EAAA,GACAu1B,EAAA,IAAAv1B,EAAA,GACAu1B,EAAA,IAAAv1B,EAAA,GACAu1B,EAAA,MACAA,GAcA6X,EAAAlV,YAAA,SAAA3C,EAAAv1B,GAiBA,MAhBAu1B,GAAA,GAAAv1B,EAAA,GACAu1B,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAAv1B,EAAA,GACAu1B,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,IAAAv1B,EAAA,GACAu1B,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,GAeA6X,EAAAnV,aAAA,SAAA1C,EAAAwC,EAAAmY,GACA,GAEAz+C,GAAA1F,EAAAgH,EAFA5E,EAAA+hD,EAAA,GAAA3+C,EAAA2+C,EAAA,GAAA9pC,EAAA8pC,EAAA,GACAxmB,EAAAl5B,KAAAkhC,KAAAvjC,IAAAoD,IAAA6U,IAGA,OAAA5V,MAAAY,IAAAs4B,GAAAx5B,EAAAC,QAA2C,MAE3Cu5B,EAAA,EAAAA,EACAv7B,GAAAu7B,EACAn4B,GAAAm4B,EACAtjB,GAAAsjB,EAEAj4B,EAAAjB,KAAAshC,IAAAiG,GACAhsC,EAAAyE,KAAAuhC,IAAAgG,GACAhlC,EAAA,EAAAhH,EAGAwpC,EAAA,GAAApnC,IAAA4E,EAAAhH,EACAwpC,EAAA,GAAAhkC,EAAApD,EAAA4E,EAAAqT,EAAA3U,EACA8jC,EAAA,GAAAnvB,EAAAjY,EAAA4E,EAAAxB,EAAAE,EACA8jC,EAAA,KACAA,EAAA,GAAApnC,EAAAoD,EAAAwB,EAAAqT,EAAA3U,EACA8jC,EAAA,GAAAhkC,IAAAwB,EAAAhH,EACAwpC,EAAA,GAAAnvB,EAAA7U,EAAAwB,EAAA5E,EAAAsD,EACA8jC,EAAA,KACAA,EAAA,GAAApnC,EAAAiY,EAAArT,EAAAxB,EAAAE,EACA8jC,EAAA,GAAAhkC,EAAA6U,EAAArT,EAAA5E,EAAAsD,EACA8jC,EAAA,IAAAnvB,IAAArT,EAAAhH,EACAwpC,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,IAcA6X,EAAAmD,cAAA,SAAAhb,EAAAwC,GACA,GAAAtmC,GAAAjB,KAAAshC,IAAAiG,GACAhsC,EAAAyE,KAAAuhC,IAAAgG,EAmBA,OAhBAxC,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAAxpC,EACAwpC,EAAA,GAAA9jC,EACA8jC,EAAA,KACAA,EAAA,KACAA,EAAA,IAAA9jC,EACA8jC,EAAA,IAAAxpC,EACAwpC,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,GAcA6X,EAAAoD,cAAA,SAAAjb,EAAAwC,GACA,GAAAtmC,GAAAjB,KAAAshC,IAAAiG,GACAhsC,EAAAyE,KAAAuhC,IAAAgG,EAmBA,OAhBAxC,GAAA,GAAAxpC,EACAwpC,EAAA,KACAA,EAAA,IAAA9jC,EACA8jC,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA9jC,EACA8jC,EAAA,KACAA,EAAA,IAAAxpC,EACAwpC,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,GAcA6X,EAAAqD,cAAA,SAAAlb,EAAAwC,GACA,GAAAtmC,GAAAjB,KAAAshC,IAAAiG,GACAhsC,EAAAyE,KAAAuhC,IAAAgG,EAmBA,OAhBAxC,GAAA,GAAAxpC,EACAwpC,EAAA,GAAA9jC,EACA8jC,EAAA,KACAA,EAAA,KACAA,EAAA,IAAA9jC,EACA8jC,EAAA,GAAAxpC,EACAwpC,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,GAkBA6X,EAAAsD,wBAAA,SAAAnb,EAAApyB,EAAAnD,GAEA,GAAA7R,GAAAgV,EAAA,GAAA5R,EAAA4R,EAAA,GAAAiD,EAAAjD,EAAA,GAAAtP,EAAAsP,EAAA,GACAk1B,EAAAlqC,IACAmqC,EAAA/mC,IACAgnC,EAAAnyB,IAEAoyB,EAAArqC,EAAAkqC,EACAoH,EAAAtxC,EAAAmqC,EACAqY,EAAAxiD,EAAAoqC,EACAG,EAAAnnC,EAAA+mC,EACAsY,EAAAr/C,EAAAgnC,EACAM,EAAAzyB,EAAAmyB,EACAO,EAAAjlC,EAAAwkC,EACAU,EAAAllC,EAAAykC,EACAU,EAAAnlC,EAAA0kC,CAmBA,OAjBAhD,GAAA,MAAAmD,EAAAG,GACAtD,EAAA,GAAAkK,EAAAzG,EACAzD,EAAA,GAAAob,EAAA5X,EACAxD,EAAA,KACAA,EAAA,GAAAkK,EAAAzG,EACAzD,EAAA,MAAAiD,EAAAK,GACAtD,EAAA,GAAAqb,EAAA9X,EACAvD,EAAA,KACAA,EAAA,GAAAob,EAAA5X,EACAxD,EAAA,GAAAqb,EAAA9X,EACAvD,EAAA,OAAAiD,EAAAE,GACAnD,EAAA,MACAA,EAAA,IAAAv1B,EAAA,GACAu1B,EAAA,IAAAv1B,EAAA,GACAu1B,EAAA,IAAAv1B,EAAA,GACAu1B,EAAA,MAEAA,GAYA6X,EAAAyD,eAAA,SAAAtb,EAAAub,GAKA,MAJAvb,GAAA,GAAAub,EAAA,IACAvb,EAAA,GAAAub,EAAA,IACAvb,EAAA,GAAAub,EAAA,IAEAvb,GAYA6X,EAAA2D,YAAA,SAAAxb,EAAAub,GAEA,GAAAE,GAAAF,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAG,EAAA,CA4BA,OA1BAD,GAAA,GACAC,EAAA,EAAAzgD,KAAAkhC,KAAAsf,EAAA,GACAzb,EAAA,OAAA0b,EACA1b,EAAA,IAAAub,EAAA,GAAAA,EAAA,IAAAG,EACA1b,EAAA,IAAAub,EAAA,GAAAA,EAAA,IAAAG,EACA1b,EAAA,IAAAub,EAAA,GAAAA,EAAA,IAAAG,GACGH,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACHG,EAAA,EAAAzgD,KAAAkhC,KAAA,EAAAof,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACAvb,EAAA,IAAAub,EAAA,GAAAA,EAAA,IAAAG,EACA1b,EAAA,OAAA0b,EACA1b,EAAA,IAAAub,EAAA,GAAAA,EAAA,IAAAG,EACA1b,EAAA,IAAAub,EAAA,GAAAA,EAAA,IAAAG,GACGH,EAAA,GAAAA,EAAA,KACHG,EAAA,EAAAzgD,KAAAkhC,KAAA,EAAAof,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACAvb,EAAA,IAAAub,EAAA,GAAAA,EAAA,IAAAG,EACA1b,EAAA,IAAAub,EAAA,GAAAA,EAAA,IAAAG,EACA1b,EAAA,OAAA0b,EACA1b,EAAA,IAAAub,EAAA,GAAAA,EAAA,IAAAG,IAEAA,EAAA,EAAAzgD,KAAAkhC,KAAA,EAAAof,EAAA,IAAAA,EAAA,GAAAA,EAAA,IACAvb,EAAA,IAAAub,EAAA,GAAAA,EAAA,IAAAG,EACA1b,EAAA,IAAAub,EAAA,GAAAA,EAAA,IAAAG,EACA1b,EAAA,IAAAub,EAAA,GAAAA,EAAA,IAAAG,EACA1b,EAAA,OAAA0b,GAGA1b,GAoBA6X,EAAA8D,6BAAA,SAAA3b,EAAApyB,EAAAnD,EAAAvO,GAEA,GAAAtD,GAAAgV,EAAA,GAAA5R,EAAA4R,EAAA,GAAAiD,EAAAjD,EAAA,GAAAtP,EAAAsP,EAAA,GACAk1B,EAAAlqC,IACAmqC,EAAA/mC,IACAgnC,EAAAnyB,IAEAoyB,EAAArqC,EAAAkqC,EACAoH,EAAAtxC,EAAAmqC,EACAqY,EAAAxiD,EAAAoqC,EACAG,EAAAnnC,EAAA+mC,EACAsY,EAAAr/C,EAAAgnC,EACAM,EAAAzyB,EAAAmyB,EACAO,EAAAjlC,EAAAwkC,EACAU,EAAAllC,EAAAykC,EACAU,EAAAnlC,EAAA0kC,EACA4Y,EAAA1/C,EAAA,GACA2/C,EAAA3/C,EAAA,GACA4/C,EAAA5/C,EAAA,EAmBA,OAjBA8jC,GAAA,OAAAmD,EAAAG,IAAAsY,EACA5b,EAAA,IAAAkK,EAAAzG,GAAAmY,EACA5b,EAAA,IAAAob,EAAA5X,GAAAoY,EACA5b,EAAA,KACAA,EAAA,IAAAkK,EAAAzG,GAAAoY,EACA7b,EAAA,OAAAiD,EAAAK,IAAAuY,EACA7b,EAAA,IAAAqb,EAAA9X,GAAAsY,EACA7b,EAAA,KACAA,EAAA,IAAAob,EAAA5X,GAAAsY,EACA9b,EAAA,IAAAqb,EAAA9X,GAAAuY,EACA9b,EAAA,QAAAiD,EAAAE,IAAA2Y,EACA9b,EAAA,MACAA,EAAA,IAAAv1B,EAAA,GACAu1B,EAAA,IAAAv1B,EAAA,GACAu1B,EAAA,IAAAv1B,EAAA,GACAu1B,EAAA,MAEAA,GAuBA6X,EAAAkE,mCAAA,SAAA/b,EAAApyB,EAAAnD,EAAAvO,EAAA8/C,GAEA,GAAApjD,GAAAgV,EAAA,GAAA5R,EAAA4R,EAAA,GAAAiD,EAAAjD,EAAA,GAAAtP,EAAAsP,EAAA,GACAk1B,EAAAlqC,IACAmqC,EAAA/mC,IACAgnC,EAAAnyB,IAEAoyB,EAAArqC,EAAAkqC,EACAoH,EAAAtxC,EAAAmqC,EACAqY,EAAAxiD,EAAAoqC,EACAG,EAAAnnC,EAAA+mC,EACAsY,EAAAr/C,EAAAgnC,EACAM,EAAAzyB,EAAAmyB,EACAO,EAAAjlC,EAAAwkC,EACAU,EAAAllC,EAAAykC,EACAU,EAAAnlC,EAAA0kC,EAEA4Y,EAAA1/C,EAAA,GACA2/C,EAAA3/C,EAAA,GACA4/C,EAAA5/C,EAAA,GAEA+/C,EAAAD,EAAA,GACAE,EAAAF,EAAA,GACAG,EAAAH,EAAA,EAmBA,OAjBAhc,GAAA,OAAAmD,EAAAG,IAAAsY,EACA5b,EAAA,IAAAkK,EAAAzG,GAAAmY,EACA5b,EAAA,IAAAob,EAAA5X,GAAAoY,EACA5b,EAAA,KACAA,EAAA,IAAAkK,EAAAzG,GAAAoY,EACA7b,EAAA,OAAAiD,EAAAK,IAAAuY,EACA7b,EAAA,IAAAqb,EAAA9X,GAAAsY,EACA7b,EAAA,KACAA,EAAA,IAAAob,EAAA5X,GAAAsY,EACA9b,EAAA,IAAAqb,EAAA9X,GAAAuY,EACA9b,EAAA,QAAAiD,EAAAE,IAAA2Y,EACA9b,EAAA,MACAA,EAAA,IAAAv1B,EAAA,GAAAwxC,GAAAjc,EAAA,GAAAic,EAAAjc,EAAA,GAAAkc,EAAAlc,EAAA,GAAAmc,GACAnc,EAAA,IAAAv1B,EAAA,GAAAyxC,GAAAlc,EAAA,GAAAic,EAAAjc,EAAA,GAAAkc,EAAAlc,EAAA,GAAAmc,GACAnc,EAAA,IAAAv1B,EAAA,GAAA0xC,GAAAnc,EAAA,GAAAic,EAAAjc,EAAA,GAAAkc,EAAAlc,EAAA,IAAAmc,GACAnc,EAAA,MAEAA,GAWA6X,EAAAhV,SAAA,SAAA7C,EAAApyB,GACA,GAAAhV,GAAAgV,EAAA,GAAA5R,EAAA4R,EAAA,GAAAiD,EAAAjD,EAAA,GAAAtP,EAAAsP,EAAA,GACAk1B,EAAAlqC,IACAmqC,EAAA/mC,IACAgnC,EAAAnyB,IAEAoyB,EAAArqC,EAAAkqC,EACAI,EAAAlnC,EAAA8mC,EACAK,EAAAnnC,EAAA+mC,EACAK,EAAAvyB,EAAAiyB,EACAO,EAAAxyB,EAAAkyB,EACAO,EAAAzyB,EAAAmyB,EACAO,EAAAjlC,EAAAwkC,EACAU,EAAAllC,EAAAykC,EACAU,EAAAnlC,EAAA0kC,CAsBA,OApBAhD,GAAA,KAAAmD,EAAAG,EACAtD,EAAA,GAAAkD,EAAAO,EACAzD,EAAA,GAAAoD,EAAAI,EACAxD,EAAA,KAEAA,EAAA,GAAAkD,EAAAO,EACAzD,EAAA,KAAAiD,EAAAK,EACAtD,EAAA,GAAAqD,EAAAE,EACAvD,EAAA,KAEAA,EAAA,GAAAoD,EAAAI,EACAxD,EAAA,GAAAqD,EAAAE,EACAvD,EAAA,MAAAiD,EAAAE,EACAnD,EAAA,MAEAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MAEAA,GAeA6X,EAAAuE,QAAA,SAAApc,EAAAzgB,EAAAE,EAAAC,EAAAF,EAAA68B,EAAAC,GACA,GAAAC,GAAA,GAAA98B,EAAAF,GACAi9B,EAAA,GAAAh9B,EAAAE,GACA+8B,EAAA,GAAAJ,EAAAC,EAiBA,OAhBAtc,GAAA,KAAAqc,EAAAE,EACAvc,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KAAAqc,EAAAG,EACAxc,EAAA,KACAA,EAAA,KACAA,EAAA,IAAAvgB,EAAAF,GAAAg9B,EACAvc,EAAA,IAAAxgB,EAAAE,GAAA88B,EACAxc,EAAA,KAAAsc,EAAAD,GAAAI,EACAzc,EAAA,OACAA,EAAA,MACAA,EAAA,MACAA,EAAA,IAAAsc,EAAAD,EAAA,EAAAI,EACAzc,EAAA,MACAA,GAaA6X,EAAA6E,YAAA,SAAA1c,EAAA2c,EAAAC,EAAAP,EAAAC,GACA,GAAAhpC,GAAA,EAAArY,KAAAkiC,IAAAwf,EAAA,GACAF,EAAA,GAAAJ,EAAAC,EAiBA,OAhBAtc,GAAA,GAAA1sB,EAAAspC,EACA5c,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAA1sB,EACA0sB,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KAAAsc,EAAAD,GAAAI,EACAzc,EAAA,OACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MAAAsc,EAAAD,EAAAI,EACAzc,EAAA,MACAA,GAcA6X,EAAAgF,2BAAA,SAAA7c,EAAA8c,EAAAT,EAAAC,GACA,GAAAS,GAAA9hD,KAAAkiC,IAAA2f,EAAAE,UAAA/hD,KAAAS,GAAA,KACAuhD,EAAAhiD,KAAAkiC,IAAA2f,EAAAI,YAAAjiD,KAAAS,GAAA,KACAyhD,EAAAliD,KAAAkiC,IAAA2f,EAAAM,YAAAniD,KAAAS,GAAA,KACA2hD,EAAApiD,KAAAkiC,IAAA2f,EAAAQ,aAAAriD,KAAAS,GAAA,KACA6hD,EAAA,GAAAJ,EAAAE,GACAG,EAAA,GAAAT,EAAAE,EAkBA,OAhBAjd,GAAA,GAAAud,EACAvd,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,GAAAwd,EACAxd,EAAA,KACAA,EAAA,KACAA,EAAA,MAAAmd,EAAAE,GAAAE,EAAA,IACAvd,EAAA,IAAA+c,EAAAE,GAAAO,EAAA,GACAxd,EAAA,IAAAsc,GAAAD,EAAAC,GACAtc,EAAA,OACAA,EAAA,MACAA,EAAA,MACAA,EAAA,IAAAsc,EAAAD,KAAAC,GACAtc,EAAA,MACAA,GAeA6X,EAAA4F,MAAA,SAAAzd,EAAAzgB,EAAAE,EAAAC,EAAAF,EAAA68B,EAAAC,GACA,GAAAoB,GAAA,GAAAn+B,EAAAE,GACAk+B,EAAA,GAAAj+B,EAAAF,GACAi9B,EAAA,GAAAJ,EAAAC,EAiBA,OAhBAtc,GAAA,MAAA0d,EACA1d,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAAA2d,EACA3d,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,MAAAyc,EACAzc,EAAA,MACAA,EAAA,KAAAzgB,EAAAE,GAAAi+B,EACA1d,EAAA,KAAAxgB,EAAAE,GAAAi+B,EACA3d,EAAA,KAAAsc,EAAAD,GAAAI,EACAzc,EAAA,MACAA,GAYA6X,EAAA+F,OAAA,SAAA5d,EAAA6d,EAAAC,EAAAC,GACA,GAAAC,GAAA7M,EAAArO,EAAA10B,EAAAgjC,EAAArO,EAAAkb,EAAAC,EAAAlb,EAAA7O,EACAgqB,EAAAN,EAAA,GACAO,EAAAP,EAAA,GACAQ,EAAAR,EAAA,GACAS,EAAAP,EAAA,GACAQ,EAAAR,EAAA,GACAS,EAAAT,EAAA,GACAU,EAAAX,EAAA,GACAY,EAAAZ,EAAA,GACAa,EAAAb,EAAA,EAEA,OAAA7iD,MAAAY,IAAAsiD,EAAAM,GAAA9jD,EAAAC,SACAK,KAAAY,IAAAuiD,EAAAM,GAAA/jD,EAAAC,SACAK,KAAAY,IAAAwiD,EAAAM,GAAAhkD,EAAAC,QACAi9C,EAAAhX,SAAAb,IAGAie,EAAAE,EAAAM,EACAP,EAAAE,EAAAM,EACA1b,EAAAqb,EAAAM,EAEAxqB,EAAA,EAAAl5B,KAAAkhC,KAAA8hB,IAAAC,IAAAlb,KACAib,GAAA9pB,EACA+pB,GAAA/pB,EACA6O,GAAA7O,EAEA6pB,EAAAO,EAAAvb,EAAAwb,EAAAN,EACA/M,EAAAqN,EAAAP,EAAAK,EAAAtb,EACAF,EAAAwb,EAAAJ,EAAAK,EAAAN,EACA9pB,EAAAl5B,KAAAkhC,KAAA6hB,IAAA7M,IAAArO,KACA3O,GAKAA,EAAA,EAAAA,EACA6pB,GAAA7pB,EACAgd,GAAAhd,EACA2O,GAAA3O,IAPA6pB,EAAA,EACA7M,EAAA,EACArO,EAAA,GAQA10B,EAAA8vC,EAAApb,EAAAE,EAAAmO,EACAC,EAAApO,EAAAgb,EAAAC,EAAAnb,EACAC,EAAAkb,EAAA9M,EAAA+M,EAAAF,EAEA7pB,EAAAl5B,KAAAkhC,KAAA/tB,IAAAgjC,IAAArO,KACA5O,GAKAA,EAAA,EAAAA,EACA/lB,GAAA+lB,EACAid,GAAAjd,EACA4O,GAAA5O,IAPA/lB,EAAA,EACAgjC,EAAA,EACArO,EAAA,GAQA/C,EAAA,GAAAge,EACAhe,EAAA,GAAA5xB,EACA4xB,EAAA,GAAAie,EACAje,EAAA,KACAA,EAAA,GAAAmR,EACAnR,EAAA,GAAAoR,EACApR,EAAA,GAAAke,EACAle,EAAA,KACAA,EAAA,GAAA8C,EACA9C,EAAA,GAAA+C,EACA/C,EAAA,IAAAgD,EACAhD,EAAA,MACAA,EAAA,MAAAge,EAAAG,EAAAhN,EAAAiN,EAAAtb,EAAAub,GACAre,EAAA,MAAA5xB,EAAA+vC,EAAA/M,EAAAgN,EAAArb,EAAAsb,GACAre,EAAA,MAAAie,EAAAE,EAAAD,EAAAE,EAAApb,EAAAqb,GACAre,EAAA,MAEAA,IASA6X,EAAApT,IAAA,SAAAhtC,GACA,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QACAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QACAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,SAAAA,EAAA,SACAA,EAAA,SAAAA,EAAA,SAAAA,EAAA,SAAAA,EAAA,SASAogD,EAAAnT,KAAA,SAAAjtC,GACA,MAAAwD,MAAAkhC,KAAAlhC,KAAAkX,IAAA1a,EAAA,MAAAwD,KAAAkX,IAAA1a,EAAA,MAAAwD,KAAAkX,IAAA1a,EAAA,MAAAwD,KAAAkX,IAAA1a,EAAA,MAAAwD,KAAAkX,IAAA1a,EAAA,MAAAwD,KAAAkX,IAAA1a,EAAA,MAAAwD,KAAAkX,IAAA1a,EAAA,MAAAwD,KAAAkX,IAAA1a,EAAA,MAAAwD,KAAAkX,IAAA1a,EAAA,MAAAwD,KAAAkX,IAAA1a,EAAA,MAAAwD,KAAAkX,IAAA1a,EAAA,OAAAwD,KAAAkX,IAAA1a,EAAA,OAAAwD,KAAAkX,IAAA1a,EAAA,OAAAwD,KAAAkX,IAAA1a,EAAA,OAAAwD,KAAAkX,IAAA1a,EAAA,OAAAwD,KAAAkX,IAAA1a,EAAA,SAWAogD,EAAAzgC,IAAA,SAAA4oB,EAAAvoC,EAAAC,GAiBA,MAhBAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,IAAAvoC,EAAA,IAAAC,EAAA,IACAsoC,EAAA,IAAAvoC,EAAA,IAAAC,EAAA,IACAsoC,EAAA,IAAAvoC,EAAA,IAAAC,EAAA,IACAsoC,EAAA,IAAAvoC,EAAA,IAAAC,EAAA,IACAsoC,EAAA,IAAAvoC,EAAA,IAAAC,EAAA,IACAsoC,EAAA,IAAAvoC,EAAA,IAAAC,EAAA,IACAsoC,GAWA6X,EAAA1gC,SAAA,SAAA6oB,EAAAvoC,EAAAC,GAiBA,MAhBAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,IAAAvoC,EAAA,IAAAC,EAAA,IACAsoC,EAAA,IAAAvoC,EAAA,IAAAC,EAAA,IACAsoC,EAAA,IAAAvoC,EAAA,IAAAC,EAAA,IACAsoC,EAAA,IAAAvoC,EAAA,IAAAC,EAAA,IACAsoC,EAAA,IAAAvoC,EAAA,IAAAC,EAAA,IACAsoC,EAAA,IAAAvoC,EAAA,IAAAC,EAAA,IACAsoC,GAOA6X,EAAAlT,IAAAkT,EAAA1gC,SAUA0gC,EAAAjT,eAAA,SAAA5E,EAAAvoC,EAAAC,GAiBA,MAhBAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,IAAAvoC,EAAA,IAAAC,EACAsoC,EAAA,IAAAvoC,EAAA,IAAAC,EACAsoC,EAAA,IAAAvoC,EAAA,IAAAC,EACAsoC,EAAA,IAAAvoC,EAAA,IAAAC,EACAsoC,EAAA,IAAAvoC,EAAA,IAAAC,EACAsoC,EAAA,IAAAvoC,EAAA,IAAAC,EACAsoC,GAYA6X,EAAAhT,qBAAA,SAAA7E,EAAAvoC,EAAAC,EAAA8lC,GAiBA,MAhBAwC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,IAAAvoC,EAAA,IAAAC,EAAA,IAAA8lC,EACAwC,EAAA,IAAAvoC,EAAA,IAAAC,EAAA,IAAA8lC,EACAwC,EAAA,IAAAvoC,EAAA,IAAAC,EAAA,IAAA8lC,EACAwC,EAAA,IAAAvoC,EAAA,IAAAC,EAAA,IAAA8lC,EACAwC,EAAA,IAAAvoC,EAAA,IAAAC,EAAA,IAAA8lC,EACAwC,EAAA,IAAAvoC,EAAA,IAAAC,EAAA,IAAA8lC,EACAwC,GAUA6X,EAAA/S,YAAA,SAAArtC,EAAAC,GACA,MAAAD,GAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IACAD,EAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IACAD,EAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IAAAD,EAAA,MAAAC,EAAA,KAAAD,EAAA,MAAAC,EAAA,KACAD,EAAA,MAAAC,EAAA,KAAAD,EAAA,MAAAC,EAAA,KAAAD,EAAA,MAAAC,EAAA,KAAAD,EAAA,MAAAC,EAAA,KAUAmgD,EAAAj8C,OAAA,SAAAnE,EAAAC,GACA,GAAAqtC,GAAAttC,EAAA,GAAAs9B,EAAAt9B,EAAA,GAAAu9B,EAAAv9B,EAAA,GAAAutC,EAAAvtC,EAAA,GACAwtC,EAAAxtC,EAAA,GAAAytC,EAAAztC,EAAA,GAAA0tC,EAAA1tC,EAAA,GAAA2tC,EAAA3tC,EAAA,GACA4tC,EAAA5tC,EAAA,GAAAmnD,EAAAnnD,EAAA,GAAA2pC,EAAA3pC,EAAA,IAAA4pC,EAAA5pC,EAAA,IACAwpC,EAAAxpC,EAAA,IAAAmsC,EAAAnsC,EAAA,IAAAonD,EAAApnD,EAAA,IAAAqnD,EAAArnD,EAAA,IAEA6tC,EAAA5tC,EAAA,GAAAm8B,EAAAn8B,EAAA,GAAAo8B,EAAAp8B,EAAA,GAAA6tC,EAAA7tC,EAAA,GACA8tC,EAAA9tC,EAAA,GAAA+tC,EAAA/tC,EAAA,GAAAguC,EAAAhuC,EAAA,GAAAiuC,EAAAjuC,EAAA,GACAkuC,EAAAluC,EAAA,GAAAqnD,EAAArnD,EAAA,GAAAuqC,EAAAvqC,EAAA,IAAAgqC,EAAAhqC,EAAA,IACAwqC,EAAAxqC,EAAA,IAAAsnD,EAAAtnD,EAAA,IAAAunD,EAAAvnD,EAAA,IAAAwnD,EAAAxnD,EAAA,GAEA,OAAAuD,MAAAY,IAAAkpC,EAAAO,IAAA3qC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAkpC,GAAA9pC,KAAAY,IAAAypC,KACArqC,KAAAY,IAAAk5B,EAAAlB,IAAAl5B,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAk5B,GAAA95B,KAAAY,IAAAg4B,KACA54B,KAAAY,IAAAm5B,EAAAlB,IAAAn5B,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAm5B,GAAA/5B,KAAAY,IAAAi4B,KACA74B,KAAAY,IAAAmpC,EAAAO,IAAA5qC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAmpC,GAAA/pC,KAAAY,IAAA0pC,KACAtqC,KAAAY,IAAAopC,EAAAO,IAAA7qC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAopC,GAAAhqC,KAAAY,IAAA2pC,KACAvqC,KAAAY,IAAAqpC,EAAAO,IAAA9qC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAqpC,GAAAjqC,KAAAY,IAAA4pC,KACAxqC,KAAAY,IAAAspC,EAAAO,IAAA/qC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAspC,GAAAlqC,KAAAY,IAAA6pC,KACAzqC,KAAAY,IAAAupC,EAAAO,IAAAhrC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAupC,GAAAnqC,KAAAY,IAAA8pC,KACA1qC,KAAAY,IAAAwpC,EAAAO,IAAAjrC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAwpC,GAAApqC,KAAAY,IAAA+pC,KACA3qC,KAAAY,IAAA+iD,EAAAG,IAAApkD,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAA+iD,GAAA3jD,KAAAY,IAAAkjD,KACA9jD,KAAAY,IAAAulC,EAAAa,IAAAtnC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAulC,GAAAnmC,KAAAY,IAAAomC,KACAhnC,KAAAY,IAAAwlC,EAAAK,IAAA/mC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAwlC,GAAApmC,KAAAY,IAAA6lC,KACAzmC,KAAAY,IAAAolC,EAAAiB,IAAAvnC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAolC,GAAAhmC,KAAAY,IAAAqmC,KACAjnC,KAAAY,IAAA+nC,EAAAob,IAAArkD,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAA+nC,GAAA3oC,KAAAY,IAAAmjD,KACA/jD,KAAAY,IAAAgjD,EAAAI,IAAAtkD,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAgjD,GAAA5jD,KAAAY,IAAAojD,KACAhkD,KAAAY,IAAAijD,EAAAI,IAAAvkD,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAijD,GAAA7jD,KAAAY,IAAAqjD,KAKAjoD,EAAAyB,QAAAm/C,GnB2saM,SAAU5gD,EAAQyB,EAASxG,GoB9wejC,GAAAyI,GAAAzI,EAAA,GACA4tC,EAAA5tC,EAAA,GACA2zC,EAAA3zC,EAAA,GACA62C,EAAA72C,EAAA,GAMA4lD,IAOAA,GAAA/X,OAAA,WACA,GAAAC,GAAA,GAAArlC,GAAAE,WAAA,EAKA,OAJAmlC,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GAcA8X,EAAAqH,WAAA,WACA,GAAAC,GAAAvZ,EAAA9F,SACAsf,EAAAxZ,EAAA1F,WAAA,OACAmf,EAAAzZ,EAAA1F,WAAA,MAEA,iBAAAH,EAAAvoC,EAAAC,GACA,GAAA6uC,GAAAV,EAAAU,IAAA9uC,EAAAC,EACA,OAAA6uC,IAAA,SACAV,EAAAW,MAAA4Y,EAAAC,EAAA5nD,GACAouC,EAAAlxC,OAAAyqD,GAAA,MACAvZ,EAAAW,MAAA4Y,EAAAE,EAAA7nD,GACAouC,EAAAS,UAAA8Y,KACAtH,EAAAyH,aAAAvf,EAAAof,EAAAnkD,KAAAS,IACAskC,GACSuG,EAAA,SACTvG,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,IAEA6F,EAAAW,MAAA4Y,EAAA3nD,EAAAC,GACAsoC,EAAA,GAAAof,EAAA,GACApf,EAAA,GAAAof,EAAA,GACApf,EAAA,GAAAof,EAAA,GACApf,EAAA,KAAAuG,EACAuR,EAAAxR,UAAAtG,UAeA8X,EAAA0H,QAAA,WACA,GAAAC,GAAA3f,EAAAC,QAEA,iBAAAC,EAAA0f,EAAAjgC,EAAAs+B,GAaA,MAZA0B,GAAA,GAAAhgC,EAAA,GACAggC,EAAA,GAAAhgC,EAAA,GACAggC,EAAA,GAAAhgC,EAAA,GAEAggC,EAAA,GAAA1B,EAAA,GACA0B,EAAA,GAAA1B,EAAA,GACA0B,EAAA,GAAA1B,EAAA,GAEA0B,EAAA,IAAAC,EAAA,GACAD,EAAA,IAAAC,EAAA,GACAD,EAAA,IAAAC,EAAA,GAEA5H,EAAAxR,UAAAtG,EAAA8X,EAAA6H,SAAA3f,EAAAyf,QAWA3H,EAAAjhC,MAAAkyB,EAAAlyB,MAYAihC,EAAA3X,WAAA4I,EAAA5I,WAUA2X,EAAA5X,KAAA6I,EAAA7I,KAaA4X,EAAA9jD,IAAA+0C,EAAA/0C,IAQA8jD,EAAAjX,SAAA,SAAAb,GAKA,MAJAA,GAAA,KACAA,EAAA,KACAA,EAAA,KACAA,EAAA,KACAA,GAYA8X,EAAAyH,aAAA,SAAAvf,EAAA2a,EAAAnY,GACAA,GAAA,EACA,IAAAtmC,GAAAjB,KAAAshC,IAAAiG,EAKA,OAJAxC,GAAA,GAAA9jC,EAAAy+C,EAAA,GACA3a,EAAA,GAAA9jC,EAAAy+C,EAAA,GACA3a,EAAA,GAAA9jC,EAAAy+C,EAAA,GACA3a,EAAA,GAAA/kC,KAAAuhC,IAAAgG,GACAxC,GAgBA8X,EAAA8H,aAAA,SAAAC,EAAAjyC,GACA,GAAA40B,GAAA,EAAAvnC,KAAAqhC,KAAA1uB,EAAA,IACA1R,EAAAjB,KAAAshC,IAAAiG,EAAA,EAWA,OAVA,IAAAtmC,GACA2jD,EAAA,GAAAjyC,EAAA,GAAA1R,EACA2jD,EAAA,GAAAjyC,EAAA,GAAA1R,EACA2jD,EAAA,GAAAjyC,EAAA,GAAA1R,IAGA2jD,EAAA,KACAA,EAAA,KACAA,EAAA,MAEArd,GAYAsV,EAAA1gC,IAAA2xB,EAAA3xB,IAUA0gC,EAAAr9B,SAAA,SAAAulB,EAAAvoC,EAAAC,GACA,GAAAinC,GAAAlnC,EAAA,GAAAmnC,EAAAnnC,EAAA,GAAAgvC,EAAAhvC,EAAA,GAAAuxC,EAAAvxC,EAAA,GACAivC,EAAAhvC,EAAA,GAAAivC,EAAAjvC,EAAA,GAAAkvC,EAAAlvC,EAAA,GAAAooD,EAAApoD,EAAA,EAMA,OAJAsoC,GAAA,GAAArB,EAAAmhB,EAAA9W,EAAAtC,EAAA9H,EAAAgI,EAAAH,EAAAE,EACA3G,EAAA,GAAApB,EAAAkhB,EAAA9W,EAAArC,EAAAF,EAAAC,EAAA/H,EAAAiI,EACA5G,EAAA,GAAAyG,EAAAqZ,EAAA9W,EAAApC,EAAAjI,EAAAgI,EAAA/H,EAAA8H,EACA1G,EAAA,GAAAgJ,EAAA8W,EAAAnhB,EAAA+H,EAAA9H,EAAA+H,EAAAF,EAAAG,EACA5G,GAOA8X,EAAAzV,IAAAyV,EAAAr9B,SAWAq9B,EAAAta,MAAAuL,EAAAvL,MAUAsa,EAAA3P,QAAA,SAAAnI,EAAAvoC,EAAA+qC,GACAA,GAAA,EAEA,IAAA7D,GAAAlnC,EAAA,GAAAmnC,EAAAnnC,EAAA,GAAAgvC,EAAAhvC,EAAA,GAAAuxC,EAAAvxC,EAAA,GACAivC,EAAAzrC,KAAAshC,IAAAiG,GAAAsd,EAAA7kD,KAAAuhC,IAAAgG,EAMA,OAJAxC,GAAA,GAAArB,EAAAmhB,EAAA9W,EAAAtC,EACA1G,EAAA,GAAApB,EAAAkhB,EAAArZ,EAAAC,EACA1G,EAAA,GAAAyG,EAAAqZ,EAAAlhB,EAAA8H,EACA1G,EAAA,GAAAgJ,EAAA8W,EAAAnhB,EAAA+H,EACA1G,GAWA8X,EAAA1P,QAAA,SAAApI,EAAAvoC,EAAA+qC,GACAA,GAAA,EAEA,IAAA7D,GAAAlnC,EAAA,GAAAmnC,EAAAnnC,EAAA,GAAAgvC,EAAAhvC,EAAA,GAAAuxC,EAAAvxC,EAAA,GACAkvC,EAAA1rC,KAAAshC,IAAAiG,GAAAsd,EAAA7kD,KAAAuhC,IAAAgG,EAMA,OAJAxC,GAAA,GAAArB,EAAAmhB,EAAArZ,EAAAE,EACA3G,EAAA,GAAApB,EAAAkhB,EAAA9W,EAAArC,EACA3G,EAAA,GAAAyG,EAAAqZ,EAAAnhB,EAAAgI,EACA3G,EAAA,GAAAgJ,EAAA8W,EAAAlhB,EAAA+H,EACA3G,GAWA8X,EAAAzP,QAAA,SAAArI,EAAAvoC,EAAA+qC,GACAA,GAAA,EAEA,IAAA7D,GAAAlnC,EAAA,GAAAmnC,EAAAnnC,EAAA,GAAAgvC,EAAAhvC,EAAA,GAAAuxC,EAAAvxC,EAAA,GACAmvC,EAAA3rC,KAAAshC,IAAAiG,GAAAsd,EAAA7kD,KAAAuhC,IAAAgG,EAMA,OAJAxC,GAAA,GAAArB,EAAAmhB,EAAAlhB,EAAAgI,EACA5G,EAAA,GAAApB,EAAAkhB,EAAAnhB,EAAAiI,EACA5G,EAAA,GAAAyG,EAAAqZ,EAAA9W,EAAApC,EACA5G,EAAA,GAAAgJ,EAAA8W,EAAArZ,EAAAG,EACA5G,GAYA8X,EAAAiI,WAAA,SAAA/f,EAAAvoC,GACA,GAAAmB,GAAAnB,EAAA,GAAAuE,EAAAvE,EAAA,GAAAoZ,EAAApZ,EAAA,EAMA,OAJAuoC,GAAA,GAAApnC,EACAonC,EAAA,GAAAhkC,EACAgkC,EAAA,GAAAnvB,EACAmvB,EAAA,GAAA/kC,KAAAkhC,KAAAlhC,KAAAY,IAAA,EAAAjD,IAAAoD,IAAA6U,MACAmvB,GAWA8X,EAAAvR,IAAAwC,EAAAxC,IAYAuR,EAAAjR,KAAAkC,EAAAlC,KAWAiR,EAAAkI,MAAA,SAAAhgB,EAAAvoC,EAAAC,EAAA8F,GAIA,GAGAyiD,GAAAC,EAAAC,EAAAC,EAAAC,EAHA1hB,EAAAlnC,EAAA,GAAAmnC,EAAAnnC,EAAA,GAAAgvC,EAAAhvC,EAAA,GAAAuxC,EAAAvxC,EAAA,GACAivC,EAAAhvC,EAAA,GAAAivC,EAAAjvC,EAAA,GAAAkvC,EAAAlvC,EAAA,GAAAooD,EAAApoD,EAAA,EAiCA,OA5BAwoD,GAAAvhB,EAAA+H,EAAA9H,EAAA+H,EAAAF,EAAAG,EAAAoC,EAAA8W,EAEAI,EAAA,IACAA,KACAxZ,KACAC,KACAC,KACAkZ,MAGA,EAAAI,EAAA,MAEAD,EAAAhlD,KAAAqhC,KAAA4jB,GACAC,EAAAllD,KAAAshC,IAAA0jB,GACAG,EAAAnlD,KAAAshC,KAAA,EAAA/+B,GAAAyiD,GAAAE,EACAE,EAAAplD,KAAAshC,IAAA/+B,EAAAyiD,GAAAE,IAIAC,EAAA,EAAA5iD,EACA6iD,EAAA7iD,GAGAwiC,EAAA,GAAAogB,EAAAzhB,EAAA0hB,EAAA3Z,EACA1G,EAAA,GAAAogB,EAAAxhB,EAAAyhB,EAAA1Z,EACA3G,EAAA,GAAAogB,EAAA3Z,EAAA4Z,EAAAzZ,EACA5G,EAAA,GAAAogB,EAAApX,EAAAqX,EAAAP,EAEA9f,GAcA8X,EAAAwI,OAAA,WACA,GAAAC,GAAAzI,EAAA/X,SACAygB,EAAA1I,EAAA/X,QAEA,iBAAAC,EAAAvoC,EAAAC,EAAAlB,EAAAgW,EAAAhP,GAKA,MAJAs6C,GAAAkI,MAAAO,EAAA9oD,EAAA+U,EAAAhP,GACAs6C,EAAAkI,MAAAQ,EAAA9oD,EAAAlB,EAAAgH,GACAs6C,EAAAkI,MAAAhgB,EAAAugB,EAAAC,EAAA,EAAAhjD,GAAA,EAAAA,IAEAwiC,MAWA8X,EAAA5W,OAAA,SAAAlB,EAAAvoC,GACA,GAAAstC,GAAAttC,EAAA,GAAAs9B,EAAAt9B,EAAA,GAAAu9B,EAAAv9B,EAAA,GAAAutC,EAAAvtC,EAAA,GACA8uC,EAAAxB,IAAAhQ,IAAAC,IAAAgQ,IACAyb,EAAAla,EAAA,EAAAA,EAAA,CAQA,OAJAvG,GAAA,IAAA+E,EAAA0b,EACAzgB,EAAA,IAAAjL,EAAA0rB,EACAzgB,EAAA,IAAAhL,EAAAyrB,EACAzgB,EAAA,GAAAgF,EAAAyb,EACAzgB,GAWA8X,EAAA4I,UAAA,SAAA1gB,EAAAvoC,GAKA,MAJAuoC,GAAA,IAAAvoC,EAAA,GACAuoC,EAAA,IAAAvoC,EAAA,GACAuoC,EAAA,IAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,GAUA8X,EAAAnjD,OAAAo0C,EAAAp0C,OAMAmjD,EAAA3jB,IAAA2jB,EAAAnjD,OASAmjD,EAAA3R,cAAA4C,EAAA5C,cAMA2R,EAAA1R,OAAA0R,EAAA3R,cAUA2R,EAAAxR,UAAAyC,EAAAzC,UAaAwR,EAAA6H,SAAA,SAAA3f,EAAAnnC,GAGA,GACA8nD,GADAC,EAAA/nD,EAAA,GAAAA,EAAA,GAAAA,EAAA,EAGA,IAAA+nD,EAAA,EAEAD,EAAA1lD,KAAAkhC,KAAAykB,EAAA,GACA5gB,EAAA,MAAA2gB,EACAA,EAAA,GAAAA,EACA3gB,EAAA,IAAAnnC,EAAA,GAAAA,EAAA,IAAA8nD,EACA3gB,EAAA,IAAAnnC,EAAA,GAAAA,EAAA,IAAA8nD,EACA3gB,EAAA,IAAAnnC,EAAA,GAAAA,EAAA,IAAA8nD,MACK,CAEL,GAAAjsD,GAAA,CACAmE,GAAA,GAAAA,EAAA,KACAnE,EAAA,GACAmE,EAAA,GAAAA,EAAA,EAAAnE,OACAA,EAAA,EACA,IAAAwD,IAAAxD,EAAA,KACAiX,GAAAjX,EAAA,IAEAisD,GAAA1lD,KAAAkhC,KAAAtjC,EAAA,EAAAnE,KAAAmE,EAAA,EAAAX,KAAAW,EAAA,EAAA8S,KAAA,GACAq0B,EAAAtrC,GAAA,GAAAisD,EACAA,EAAA,GAAAA,EACA3gB,EAAA,IAAAnnC,EAAA,EAAAX,EAAAyT,GAAA9S,EAAA,EAAA8S,EAAAzT,IAAAyoD,EACA3gB,EAAA9nC,IAAAW,EAAA,EAAAX,EAAAxD,GAAAmE,EAAA,EAAAnE,EAAAwD,IAAAyoD,EACA3gB,EAAAr0B,IAAA9S,EAAA,EAAA8S,EAAAjX,GAAAmE,EAAA,EAAAnE,EAAAiX,IAAAg1C,EAGA,MAAA3gB,IASA8X,EAAArT,IAAA,SAAAhtC,GACA,cAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAUAqgD,EAAAhT,YAAAiE,EAAAjE,YASAgT,EAAAl8C,OAAAmtC,EAAAntC,OAEA3E,EAAAyB,QAAAo/C,GpByyeM,SAAU7gD,EAAQyB,EAASxG,GqB52fjC,GAAAyI,GAAAzI,EAAA,GAMAohD,IAOAA,GAAAvT,OAAA,WACA,GAAAC,GAAA,GAAArlC,GAAAE,WAAA,EAGA,OAFAmlC,GAAA,KACAA,EAAA,KACAA,GASAsT,EAAAz8B,MAAA,SAAApf,GACA,GAAAuoC,GAAA,GAAArlC,GAAAE,WAAA,EAGA,OAFAmlC,GAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,GAUAsT,EAAAnT,WAAA,SAAAvnC,EAAAoD,GACA,GAAAgkC,GAAA,GAAArlC,GAAAE,WAAA,EAGA,OAFAmlC,GAAA,GAAApnC,EACAonC,EAAA,GAAAhkC,EACAgkC,GAUAsT,EAAApT,KAAA,SAAAF,EAAAvoC,GAGA,MAFAuoC,GAAA,GAAAvoC,EAAA,GACAuoC,EAAA,GAAAvoC,EAAA,GACAuoC,GAWAsT,EAAAt/C,IAAA,SAAAgsC,EAAApnC,EAAAoD,GAGA,MAFAgkC,GAAA,GAAApnC,EACAonC,EAAA,GAAAhkC,EACAgkC,GAWAsT,EAAAl8B,IAAA,SAAA4oB,EAAAvoC,EAAAC,GAGA,MAFAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,GAWAsT,EAAAn8B,SAAA,SAAA6oB,EAAAvoC,EAAAC,GAGA,MAFAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,GAOAsT,EAAA3O,IAAA2O,EAAAn8B,SAUAm8B,EAAA74B,SAAA,SAAAulB,EAAAvoC,EAAAC,GAGA,MAFAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,GAOAsT,EAAAjR,IAAAiR,EAAA74B,SAUA64B,EAAAt9B,OAAA,SAAAgqB,EAAAvoC,EAAAC,GAGA,MAFAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GACAsoC,GAOAsT,EAAAxN,IAAAwN,EAAAt9B,OASAs9B,EAAA50B,KAAA,SAAAshB,EAAAvoC,GAGA,MAFAuoC,GAAA,GAAA/kC,KAAAyjB,KAAAjnB,EAAA,IACAuoC,EAAA,GAAA/kC,KAAAyjB,KAAAjnB,EAAA,IACAuoC,GAUAsT,EAAA5oC,MAAA,SAAAs1B,EAAAvoC,GAGA,MAFAuoC,GAAA,GAAA/kC,KAAAyP,MAAAjT,EAAA,IACAuoC,EAAA,GAAA/kC,KAAAyP,MAAAjT,EAAA,IACAuoC,GAWAsT,EAAAtrC,IAAA,SAAAg4B,EAAAvoC,EAAAC,GAGA,MAFAsoC,GAAA,GAAA/kC,KAAA+M,IAAAvQ,EAAA,GAAAC,EAAA,IACAsoC,EAAA,GAAA/kC,KAAA+M,IAAAvQ,EAAA,GAAAC,EAAA,IACAsoC,GAWAsT,EAAAx3C,IAAA,SAAAkkC,EAAAvoC,EAAAC,GAGA,MAFAsoC,GAAA,GAAA/kC,KAAAa,IAAArE,EAAA,GAAAC,EAAA,IACAsoC,EAAA,GAAA/kC,KAAAa,IAAArE,EAAA,GAAAC,EAAA,IACAsoC,GAUAsT,EAAA/f,MAAA,SAAAyM,EAAAvoC,GAGA,MAFAuoC,GAAA,GAAA/kC,KAAAs4B,MAAA97B,EAAA,IACAuoC,EAAA,GAAA/kC,KAAAs4B,MAAA97B,EAAA,IACAuoC,GAWAsT,EAAA9V,MAAA,SAAAwC,EAAAvoC,EAAAC,GAGA,MAFAsoC,GAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,EAAA,GAAAvoC,EAAA,GAAAC,EACAsoC,GAYAsT,EAAAvN,YAAA,SAAA/F,EAAAvoC,EAAAC,EAAA8lC,GAGA,MAFAwC,GAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,EAAA,GAAAvoC,EAAA,GAAAC,EAAA,GAAA8lC,EACAwC,GAUAsT,EAAAva,SAAA,SAAAthC,EAAAC,GACA,GAAAkB,GAAAlB,EAAA,GAAAD,EAAA,GACAuE,EAAAtE,EAAA,GAAAD,EAAA,EACA,OAAAwD,MAAAkhC,KAAAvjC,IAAAoD,MAOAs3C,EAAAtN,KAAAsN,EAAAva,SASAua,EAAArN,gBAAA,SAAAxuC,EAAAC,GACA,GAAAkB,GAAAlB,EAAA,GAAAD,EAAA,GACAuE,EAAAtE,EAAA,GAAAD,EAAA,EACA,OAAAmB,KAAAoD,KAOAs3C,EAAApN,QAAAoN,EAAArN,gBAQAqN,EAAA3+C,OAAA,SAAA8C,GACA,GAAAmB,GAAAnB,EAAA,GACAuE,EAAAvE,EAAA,EACA,OAAAwD,MAAAkhC,KAAAvjC,IAAAoD,MAOAs3C,EAAAnf,IAAAmf,EAAA3+C,OAQA2+C,EAAAnN,cAAA,SAAA1uC,GACA,GAAAmB,GAAAnB,EAAA,GACAuE,EAAAvE,EAAA,EACA,OAAAmB,KAAAoD,KAOAs3C,EAAAlN,OAAAkN,EAAAnN,cASAmN,EAAAhnC,OAAA,SAAA0zB,EAAAvoC,GAGA,MAFAuoC,GAAA,IAAAvoC,EAAA,GACAuoC,EAAA,IAAAvoC,EAAA,GACAuoC,GAUAsT,EAAAjN,QAAA,SAAArG,EAAAvoC,GAGA,MAFAuoC,GAAA,KAAAvoC,EAAA,GACAuoC,EAAA,KAAAvoC,EAAA,GACAuoC,GAUAsT,EAAAhN,UAAA,SAAAtG,EAAAvoC,GACA,GAAAmB,GAAAnB,EAAA,GACAuE,EAAAvE,EAAA,GACA08B,EAAAv7B,IAAAoD,GAOA,OANAm4B,GAAA,IAEAA,EAAA,EAAAl5B,KAAAkhC,KAAAhI,GACA6L,EAAA,GAAAvoC,EAAA,GAAA08B,EACA6L,EAAA,GAAAvoC,EAAA,GAAA08B,GAEA6L,GAUAsT,EAAA/M,IAAA,SAAA9uC,EAAAC,GACA,MAAAD,GAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,IAYA47C,EAAA9M,MAAA,SAAAxG,EAAAvoC,EAAAC,GACA,GAAAmZ,GAAApZ,EAAA,GAAAC,EAAA,GAAAD,EAAA,GAAAC,EAAA,EAGA,OAFAsoC,GAAA,GAAAA,EAAA,KACAA,EAAA,GAAAnvB,EACAmvB,GAYAsT,EAAAzM,KAAA,SAAA7G,EAAAvoC,EAAAC,EAAA8F,GACA,GAAAmhC,GAAAlnC,EAAA,GACAmnC,EAAAnnC,EAAA,EAGA,OAFAuoC,GAAA,GAAArB,EAAAnhC,GAAA9F,EAAA,GAAAinC,GACAqB,EAAA,GAAApB,EAAAphC,GAAA9F,EAAA,GAAAknC,GACAoB,GAUAsT,EAAAp4C,OAAA,SAAA8kC,EAAAxC,GACAA,KAAA,CACA,IAAAlyB,GAAA,EAAA3Q,EAAAK,SAAAC,KAAAS,EAGA,OAFAskC,GAAA,GAAA/kC,KAAAuhC,IAAAlxB,GAAAkyB,EACAwC,EAAA,GAAA/kC,KAAAshC,IAAAjxB,GAAAkyB,EACAwC,GAWAsT,EAAAuN,cAAA,SAAA7gB,EAAAvoC,EAAAoB,GACA,GAAAD,GAAAnB,EAAA,GACAuE,EAAAvE,EAAA,EAGA,OAFAuoC,GAAA,GAAAnnC,EAAA,GAAAD,EAAAC,EAAA,GAAAmD,EACAgkC,EAAA,GAAAnnC,EAAA,GAAAD,EAAAC,EAAA,GAAAmD,EACAgkC,GAWAsT,EAAAwN,eAAA,SAAA9gB,EAAAvoC,EAAAoB,GACA,GAAAD,GAAAnB,EAAA,GACAuE,EAAAvE,EAAA,EAGA,OAFAuoC,GAAA,GAAAnnC,EAAA,GAAAD,EAAAC,EAAA,GAAAmD,EAAAnD,EAAA,GACAmnC,EAAA,GAAAnnC,EAAA,GAAAD,EAAAC,EAAA,GAAAmD,EAAAnD,EAAA,GACAmnC,GAYAsT,EAAA7L,cAAA,SAAAzH,EAAAvoC,EAAAoB,GACA,GAAAD,GAAAnB,EAAA,GACAuE,EAAAvE,EAAA,EAGA,OAFAuoC,GAAA,GAAAnnC,EAAA,GAAAD,EAAAC,EAAA,GAAAmD,EAAAnD,EAAA,GACAmnC,EAAA,GAAAnnC,EAAA,GAAAD,EAAAC,EAAA,GAAAmD,EAAAnD,EAAA,GACAmnC,GAaAsT,EAAA9L,cAAA,SAAAxH,EAAAvoC,EAAAoB,GACA,GAAAD,GAAAnB,EAAA,GACAuE,EAAAvE,EAAA,EAGA,OAFAuoC,GAAA,GAAAnnC,EAAA,GAAAD,EAAAC,EAAA,GAAAmD,EAAAnD,EAAA,IACAmnC,EAAA,GAAAnnC,EAAA,GAAAD,EAAAC,EAAA,GAAAmD,EAAAnD,EAAA,IACAmnC,GAeAsT,EAAAhL,QAAA,WACA,GAAAC,GAAA+K,EAAAvT,QAEA,iBAAAtoC,EAAA+wC,EAAA5/B,EAAA6/B,EAAA/1C,EAAAg2C,GACA,GAAAh0C,GAAAa,CAeA,KAdAizC,IACAA,EAAA,GAGA5/B,IACAA,EAAA,GAIArT,EADAkzC,EACAxtC,KAAA+M,IAAAygC,EAAAD,EAAA5/B,EAAAnR,EAAA9C,QAEA8C,EAAA9C,OAGAD,EAAAkU,EAAuBlU,EAAAa,EAAOb,GAAA8zC,EAC9BD,EAAA,GAAA9wC,EAAA/C,GAA0B6zC,EAAA,GAAA9wC,EAAA/C,EAAA,GAC1BhC,EAAA61C,IAAAG,GACAjxC,EAAA/C,GAAA6zC,EAAA,GAA0B9wC,EAAA/C,EAAA,GAAA6zC,EAAA,EAG1B,OAAA9wC,OAUA67C,EAAA7O,IAAA,SAAAhtC,GACA,cAAAA,EAAA,QAAAA,EAAA,QAUA67C,EAAAxO,YAAA,SAAArtC,EAAAC,GACA,MAAAD,GAAA,KAAAC,EAAA,IAAAD,EAAA,KAAAC,EAAA,IAUA47C,EAAA13C,OAAA,SAAAnE,EAAAC,GACA,GAAAqtC,GAAAttC,EAAA,GAAAs9B,EAAAt9B,EAAA,GACA6tC,EAAA5tC,EAAA,GAAAm8B,EAAAn8B,EAAA,EACA,OAAAuD,MAAAY,IAAAkpC,EAAAO,IAAA3qC,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAkpC,GAAA9pC,KAAAY,IAAAypC,KACArqC,KAAAY,IAAAk5B,EAAAlB,IAAAl5B,EAAAC,QAAAK,KAAAa,IAAA,EAAAb,KAAAY,IAAAk5B,GAAA95B,KAAAY,IAAAg4B,KAGA58B,EAAAyB,QAAA46C,GrBu4fM,SAAUr8C,EAAQyB,GsBr8gBxB,YAaA,SAAAqoD,GAAAC,EAAAjnD,GACA,IAAAinD,EACA,SAAA/qD,OAAA8D,GAAA,iBAGA9C,EAAAyB,QAAAqoD,GtB09gBM,SAAU9pD,EAAQyB,EAASxG,GuB5+gBjC,YAWA,IAAAg4C,GAAAh4C,EAAA,GAaA+uD,EAAA,SAAAroD,EAAAoD,GAKAX,KAAAzC,MAAA,EAKAyC,KAAAW,MAAA,EAUAX,KAAA6lD,eAAA,KAUAD,GAAAxtD,UAAAwI,SAAA,WACA,MAAAiuC,GAAAnuC,aAAAV,OASA4lD,EAAAxtD,UAAA0tD,OAAA,WACA,OAAYvoD,EAAAyC,KAAAzC,EAAAoD,EAAAX,KAAAW,IAOZilD,EAAAxtD,UAAAojB,MAAA,WACA,UAAAoqC,GAAA5lD,KAAAzC,EAAAyC,KAAAW,IAOAilD,EAAAxtD,UAAA2tD,SAAA,WAGA,MAFA/lD,MAAAzC,EAAA,EACAyC,KAAAW,EAAA,EACAX,MASA4lD,EAAAxtD,UAAAO,IAAA,SAAA4E,EAAAoD,GAGA,MAFAX,MAAAzC,MAAA,EACAyC,KAAAW,MAAA,EACAX,MAOA4lD,EAAAxtD,UAAA6Y,OAAA,WAGA,MAFAjR,MAAAzC,GAAAyC,KAAAzC,EACAyC,KAAAW,GAAAX,KAAAW,EACAX,MAQA4lD,EAAAxtD,UAAA2jB,IAAA,SAAA5M,GAGA,MAFAnP,MAAAzC,GAAA4R,EAAA5R,EACAyC,KAAAW,GAAAwO,EAAAxO,EACAX,MAQA4lD,EAAAxtD,UAAAkxC,IAAA,SAAAn6B,GAGA,MAFAnP,MAAAzC,GAAA4R,EAAA5R,EACAyC,KAAAW,GAAAwO,EAAAxO,EACAX,MAQA4lD,EAAAxtD,UAAA4uC,IAAA,SAAAnmC,GAGA,MAFAb,MAAAzC,GAAAsD,EACAb,KAAAW,GAAAE,EACAb,MAOA4lD,EAAAxtD,UAAAkB,OAAA,WACA,MAAAsG,MAAAkhC,KAAA9gC,KAAAzC,EAAAyC,KAAAzC,EAAAyC,KAAAW,EAAAX,KAAAW,IAOAilD,EAAAxtD,UAAA6yC,UAAA,WACA,GAAAnS,GAAA94B,KAAA1G,QAGA,OAFA0G,MAAAzC,GAAAu7B,EACA94B,KAAAW,GAAAm4B,EACAA,GAQA8sB,EAAAxtD,UAAAmI,OAAA,SAAA9C,GACA,MAAAuC,MAAAzC,IAAAE,EAAAF,GAAAyC,KAAAW,IAAAlD,EAAAkD,GAWAilD,EAAA30C,OAAA,SAAAxT,GACA,UAAAmoD,IAAAnoD,EAAAF,GAAAE,EAAAkD,IASAilD,EAAA7pC,IAAA,SAAA3f,EAAAC,GACA,UAAAupD,GAAAxpD,EAAAmB,EAAAlB,EAAAkB,EAAAnB,EAAAuE,EAAAtE,EAAAsE,IASAilD,EAAAtc,IAAA,SAAAltC,EAAAC,GACA,UAAAupD,GAAAxpD,EAAAmB,EAAAlB,EAAAkB,EAAAnB,EAAAuE,EAAAtE,EAAAsE,IASAilD,EAAA5e,IAAA,SAAAnmC,EAAApD,GACA,UAAAmoD,GAAA/kD,EAAApD,EAAAF,EAAAsD,EAAApD,EAAAkD,IAYAilD,EAAAza,MAAA,SAAA/uC,EAAAC,GACA,yBACA,mBACAD,EAAAC,EAEA,GAAAupD,IAAAxpD,EAAAC,EAAAsE,EAAAvE,EAAAC,EAAAkB,GAGA,mBACA,GAAAqoD,GAAAvpD,EAAAD,EAAAuE,GAAAtE,EAAAD,EAAAmB,GAEAnB,EAAAmB,EAAAlB,EAAAsE,EAAAvE,EAAAuE,EAAAtE,EAAAkB,GAYAqoD,EAAAhlD,SAAAiuC,EAAAjuC,SACAglD,EAAA9kD,QAAA+tC,EAAA/tC,QACA8kD,EAAAI,IAAAnX,EAAA/tC,QACA8kD,EAAArlD,OAAAsuC,EAAAtuC,OASAqlD,EAAA1a,IAAA,SAAA9uC,EAAAC,GACA,MAAAD,GAAAmB,EAAAlB,EAAAkB,EAAAnB,EAAAuE,EAAAtE,EAAAsE,GAMA/E,EAAAyB,QAAAuoD,GvB+/gBM,SAAUhqD,EAAQyB,EAASxG,GwBnwhBjC,YAiDA,SAAAsR,GAAA89C,GACAA,EAAAC,oBACAD,EAAAE,uBAEAC,EAAAH,GAEAI,EAAAJ,GAOA,QAAAG,GAAAH,GACA,GAAA5sD,GAAAy/B,EAAAmtB,EAAAK,YACA,KAAAjtD,EAAA,EAAeA,EAAAy/B,IAASz/B,EAIxB,OAHAiO,GAAA2+C,EAAAzW,SAAAn2C,GACAqO,EAAA6+C,EAAAN,EAAA3+C,GACAwkB,EAAAxkB,EAAAu+C,eACAhpD,EAAA,EAAuBivB,GAAAjvB,EAAAivB,EAAAxyB,SAA2BuD,EAClD2pD,EAAAP,EAAAn6B,EAAAjvB,GAAA6K,GAQA,QAAA2+C,GAAAJ,GAIA,IAFA,GAAA9jD,GAAA8jD,EAAAQ,QAAA1Y,OAAAzpC,KAAAupC,SACApwC,EAAAwoD,EAAAQ,QAAA1Y,OAAAzpC,KAAAgD,OACAnF,EAAAsuC,qBAAAhzC,IACA0E,IAAAquC,YAAA/yC,EAIAwoD,GAAAS,UAAAvkD,GAUA,QAAAokD,GAAAN,EAAA3+C,GACA,GAAAI,GAAAu+C,EAAAxX,WAAAnnC,GACAq/C,EAAAC,EAAAX,EAAA3+C,EAAAI,EAWA,OAPAJ,GAAA/J,GAAAmK,EAAAJ,MAAA/J,EAAA,GACAspD,EAAAZ,EAAAv+C,GAKAo/C,EAAAb,EAAAU,GACAA,EAGA,QAAAH,GAAAP,EAAAh1B,EAAAvpB,GACAu+C,EAAAc,WAAA1X,iBAAApe,EACAg1B,EAAAc,WAAA3iC,MAAA6M,EAAAxzB,EAAAF,EAAA0zB,EAAA1e,EAAAhV,EAEAypD,EAAAt/C,EAAAmmC,SAAA5c,EAAAxzB,EAAAwzB,EAAA1e,KAOA00C,EAAAhB,EAAAh1B,EAAAvpB,GACAw/C,EAAAjB,EAAAh1B,EAAAxzB,EAAAwzB,EAAA1e,EAAA7K,EAAAmmC,SAAA5c,EAAA1e,IAGA,QAAA20C,GAAAjB,EAAA7hB,EAAA+iB,EAAAtZ,EAAAvmC,GACA,IAAA0/C,EAAAnZ,EAAAzJ,EAAA+iB,GAAA,CAIA,GAAAnlD,GAAA6rC,EAAAyC,SAAAhpC,GACA8/C,EAAAC,EAAAF,EAAAnlD,EAAAoiC,EACA,IAAAgjB,IAAApuB,EAAAsuB,UAGA,SAAAxY,GAAA,gDAAAqY,EAAAnlD,EAAAoiC,GAGA,IAAAniC,GAAA4rC,EAAAwC,QAAA/oC,GACAigD,EAAAF,EAAAF,EAAAllD,EAAAmiC,EACA,IAAAmjB,IAAAvuB,EAAAsuB,UAGA,SAAAxY,GAAA,gDAAAqY,EAAAllD,EAAAmiC,GAGAgjB,KAAAG,GAIA1Z,EADAuZ,IAAApuB,EAAAwuB,GACA3Z,EAAA2C,YAAAlpC,GAEAumC,EAAA0C,WAAAjpC,GAEA4/C,EAAAjB,EAAA7hB,EAAA+iB,EAAAtZ,EAAAvmC,IAGAmgD,EAAAxB,EAAA7hB,EAAA+iB,EAAAtZ,EAAAvmC,IAIA,QAAA0/C,GAAAnZ,EAAAzJ,EAAA+iB,GACA,GAAAn3B,GAAA6d,EAAA2D,UAAApN,EAAA+iB,EACA,IAAAn3B,KAAA,GACA6d,EAAA4D,2BAAAzhB,EACA,IAAA7tB,GAAA0rC,EAAA6B,YAAA1f,EAIA,OAHA7tB,IACAA,EAAAwvC,4BAAAvN,EAAA+iB,IAEA,EAEA,SAOA,QAAAP,GAAAX,EAAA3+C,EAAAI,GACA,GAAAmmC,GAAA,GAAAoB,GAAA3nC,EAAAI,EAAAJ,MAAAI,EAAApD,KAAAgD,MAEAumC,GAAAqC,aAAAxoC,EAAAmmC,UACAoY,EAAAyB,SAAA7Z,EAEA,IAAA8Y,GAAA,GAAA/Y,GAAAtmC,EAUA,OATAq/C,GAAAriD,KAAAoD,EAAApD,KACAqiD,EAAA70B,KAAApqB,EACAA,EAAApD,KAAAwtB,KAAA60B,EACAj/C,EAAApD,KAAAqiD,EAEAtV,EAAA4U,EAAApY,IACAoY,EAAA0B,mBAAA9Z,GAGA8Y,EAQA,QAAAE,GAAAZ,EAAAv+C,GACA,GAAAmmC,GAAA,GAAAoB,GAAAvnC,EAAAoqB,KAAAxqB,MAAAI,EAAAJ,MAAAI,EAAApD,KAAAgD,MAIAumC,GAAAqC,aAAAxoC,EAAAoqB,KAAA+b,UACAA,EAAAqC,aAAAxoC,EAAAmmC,UAEAoY,EAAAyB,SAAA7Z,GAGAnmC,EAAAoqB,KAAAxtB,KAAAoD,EAAApD,KACAoD,EAAApD,KAAAwtB,KAAApqB,EAAAoqB,KAIAuf,EAAA4U,EAAApY,IACAoY,EAAA0B,mBAAA9Z,GAUA,QAAAiZ,GAAAb,EAAA92C,GAGA,IADA,GAAAzH,GAAAyH,EAAA7K,KACAoD,EAAApD,OAGAsjD,EAAAlgD,EAAAJ,MAAAI,EAAApD,KAAAgD,MAAAI,EAAAoqB,KAAAxqB,QAGAu/C,EAAAZ,EAAAv+C,GACAA,IAAApD,IAKA,KADAoD,EAAAyH,EAAA2iB,KACApqB,EAAAoqB,OAGA81B,EAAAlgD,EAAAJ,MAAAI,EAAApD,KAAAgD,MAAAI,EAAAoqB,KAAAxqB,QAGAu/C,EAAAZ,EAAAv+C,GACAA,IAAAoqB,IAIA3iB,GAAA7K,MAAA6K,EAAA7K,WACAujD,EAAA14C,IACA24C,EAAA7B,EAAA92C,GAUA,QAAA04C,GAAAngD,GACA,GAAA47B,GAAA57B,EAAAJ,MAAA/J,EAAAmK,EAAApD,UAAAgD,MAAA/J,EACAgmC,EAAA77B,EAAAJ,MAAA3G,EAAA+G,EAAApD,UAAAgD,MAAA3G,CAEA,OADA+kD,GAAAniB,GAAA,iBACAD,GAAA,GAAA1jC,KAAAY,IAAA8iC,GAAAC,EAQA,QAAA8N,GAAA4U,EAAA9jD,GAGA,OAAA9I,GAAA,EAAmBA,EAAA,IAAOA,EAC1B,IAAA8I,EAAAmtC,cAAAj2C,GAAA,CAGA,GAAA0uD,GAAA5lD,EAAAutC,YAAAr2C,EACA,IAAA0uD,EAAA,CACA,GAAAtqD,GAAA0E,EAAAqtC,SAAAn2C,GACA2E,EAAA+pD,EAAA5W,cAAAhvC,EAAA1E,GACAuqD,EAAAD,EAAA/3B,MAAAhyB,EAIA,IAAA+pD,EAAA1Y,iBAAA2Y,IAAAD,EAAAzY,cAAA0Y,GAAA,CACA7lD,EAAAktC,iBAAAh2C,GAAA0uD,EAAA1Y,iBAAA2Y,EACA,UAGA,GAAAC,GAAAC,EAAAzqD,EAAA0E,EAAAmuC,SAAA7yC,GAAA0E,EAAAkuC,QAAA5yC,GAAAO,EACA,IAAAiqD,EAAA,CAEA9lD,EAAAmtC,cAAAj2C,IAAA,EACA0uD,EAAAzY,cAAA0Y,IAAA,EAGAG,EAAAhmD,EAAA1E,EAAAsqD,EAAA/pD,EAMA,IAAAoqD,IAAA/W,EAAA4U,EAAA9jD,EAkBA,OAjBAimD,IACAnC,EAAA0B,mBAAAxlD,GAGAimD,GAAA/W,EAAA4U,EAAA8B,GACAK,GACAnC,EAAA0B,mBAAAI,GAMA5lD,EAAAmtC,cAAAj2C,IAAA,EACA0uD,EAAAzY,cAAA0Y,IAAA,GAIA,IAIA,SA2BA,QAAAE,GAAAG,EAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAJ,EAAA9qD,EAAAirD,EAAAjrD,EACAmrD,EAAAL,EAAA1nD,EAAA6nD,EAAA7nD,EACAgoD,EAAAL,EAAA/qD,EAAAirD,EAAAjrD,EACAqrD,EAAAN,EAAA3nD,EAAA6nD,EAAA7nD,EAEAkoD,EAAAJ,EAAAG,EACAE,EAAAH,EAAAD,EACAK,EAAAF,EAAAC,CACA,IAAAC,GAAA,EACA,QAGA,IAAAC,GAAAT,EAAAhrD,EAAAirD,EAAAjrD,EACA0rD,EAAAV,EAAA5nD,EAAA6nD,EAAA7nD,EAEAuoD,EAAAF,EAAAN,EACAS,EAAAV,EAAAQ,EACAG,EAAAF,EAAAC,CACA,IAAAC,GAAA,EACA,QAGA,IAAAC,GAAAV,EAAAM,EACAK,EAAAN,EAAAJ,EAEAW,EAAAd,IAAAC,IACAc,EAAAb,IAAAC,IACAa,EAAAT,IAAAC,IAEA1iB,EAAAgjB,GAAAF,EAAAC,GAAAE,EAAAJ,EAAAK,EAAAV,CACA,OAAAxiB,GAAA,EAiBA,QAAA4hB,GAAAhmD,EAAA1E,EAAAsqD,EAAA/pD,GACA,GAAAse,GAAAotC,EAAAC,EAAAC,CACAttC,GAAAna,EAAAquC,YAAA/yC,GACAisD,EAAAvnD,EAAAouC,WAAA9yC,GACAksD,EAAA5B,EAAAvX,YAAAxyC,GACA4rD,EAAA7B,EAAAxX,WAAAvyC,EAEA,IAAA6rD,GAAAjpC,EAAAkpC,EAAAC,CACAF,GAAA1nD,EAAAuuC,sBAAAjzC,GACAmjB,EAAAze,EAAAsuC,qBAAAhzC,GACAqsD,EAAA/B,EAAArX,sBAAA1yC,GACA+rD,EAAAhC,EAAAtX,qBAAAzyC,EAEA,IAAAgsD,GAAAC,EAAAC,EAAAC,CACAH,GAAA7nD,EAAA4uC,mBAAAtzC,GACAwsD,EAAA9nD,EAAA2uC,kBAAArzC,GACAysD,EAAAnC,EAAAhX,mBAAA/yC,GACAmsD,EAAApC,EAAAjX,kBAAA9yC,GAEAmE,EAAAkvC,SAAA5zC,EAAAO,GACA+pD,EAAA1W,SAAArzC,EAAAP,GAGAsqD,EAAA9W,mBAAAxzC,EAAAusD,GACA7nD,EAAA6uC,kBAAAvzC,EAAAwsD,GACA9nD,EAAA8uC,mBAAAjzC,EAAAksD,GACAnC,EAAA/W,kBAAAhzC,EAAAmsD,GAGApC,EAAAlX,sBAAApzC,EAAAosD,GACA1nD,EAAAyuC,qBAAAnzC,EAAAmjB,GACAze,EAAA0uC,sBAAA7yC,EAAA8rD,GACA/B,EAAAnX,qBAAA5yC,EAAA+rD,GAOA5nD,EAAAguC,iBACA4X,EAAA5X,iBACA7zB,GACAyrC,EAAA7X,aAAA5zB,GAEAotC,GACAvnD,EAAA+tC,aAAAwZ,GAEAC,GACAxnD,EAAA+tC,aAAAyZ,GAEAC,GACA7B,EAAA7X,aAAA0Z,GAEAznD,EAAA+tC,aAAA6X,GAYA,QAAAD,GAAA7B,EAAAv+C,GASA,IARA2/C,EAAA3/C,EAAAJ,MAAAI,EAAApD,KAAAgD,MAAAI,EAAApD,UAAAgD,SAAA0xB,EAAAoxB,IACAnE,EAAAoE,MAAAC,UAAA5iD,EAAApD,UAEA2hD,EAAAoE,MAAAC,UAAA5iD,EAAApD,KAIA2hD,EAAAoE,MAAAE,YAAAtE,EAAAoE,MAAAC,UACArE,EAAAoE,MAAAE,YAAAjmD,MAAA2hD,EAAAoE,MAAAE,YAAAjjD,MAAA3G,GAAAslD,EAAAoE,MAAAE,YAAAjmD,KAAAgD,MAAA3G,GACAslD,EAAAoE,MAAAE,YAAAtE,EAAAoE,MAAAE,YAAAjmD,IAEA,IAAA2hD,EAAAoE,MAAAE,cAAAtE,EAAAoE,MAAAC,UAAA,CAMA,IADArE,EAAAoE,MAAAG,WAAAvE,EAAAoE,MAAAE,YACAtE,EAAAoE,MAAAG,WAAAlmD,MAAA2hD,EAAAoE,MAAAG,WAAAljD,MAAA3G,EAAAslD,EAAAoE,MAAAG,WAAAlmD,KAAAgD,MAAA3G,GACAslD,EAAAoE,MAAAG,WAAAvE,EAAAoE,MAAAG,WAAAlmD,IAEA2hD,GAAAoE,MAAAG,aAAAvE,EAAAoE,MAAAE,cAKAtE,EAAAoE,MAAA/S,MAAA2O,EAAAoE,MAAAG,WAAAljD,MAAA/J,EAAA0oD,EAAAoE,MAAAC,UAAAhjD,MAAA/J,EACA0oD,EAAAoE,MAAAI,aAAAxE,EAAAoE,MAAAC,UAAAhjD,MAAA3G,EAAAslD,EAAAoE,MAAAG,WAAAljD,MAAA3G,EAEA+pD,EAAAzE,IAAAoE,MAAAE,eASA,QAAAG,GAAAzE,EAAAv+C,GAEA,IAAAijD,EAAA1E,EAAAv+C,GAAA,CAIAm/C,EAAAZ,EAAAv+C,EAEA,IAAAi5C,EACA,IAAAj5C,EAAAoqB,OAAAm0B,EAAAoE,MAAAC,WAAA5iD,EAAApD,OAAA2hD,EAAAoE,MAAAG,WAAA,CAEK,GAAA9iD,EAAAoqB,OAAAm0B,EAAAoE,MAAAC,UAAA,CAEL,GADA3J,EAAA0G,EAAA3/C,EAAAJ,MAAAI,EAAApD,KAAAgD,MAAAI,EAAApD,UAAAgD,OACAq5C,IAAA3nB,EAAAwuB,GACA,MAEA9/C,KAAApD,SACK,IAAAoD,EAAApD,OAAA2hD,EAAAoE,MAAAG,WAAA,CAEL,GADA7J,EAAA0G,EAAA3/C,EAAAJ,MAAAI,EAAAoqB,KAAAxqB,MAAAI,EAAAoqB,UAAAxqB,OACAq5C,IAAA3nB,EAAAoxB,IACA,MAEA1iD,KAAAoqB,SAIApqB,GADAA,EAAAoqB,KAAAxqB,MAAA3G,EAAA+G,EAAApD,KAAAgD,MAAA3G,EACA+G,EAAAoqB,KAEApqB,EAAApD,IAIAomD,GAAAzE,EAAAv+C,KAGA,QAAAijD,GAAA1E,EAAAv+C,GACA,GAAAkjD,EAQA,OANAA,GADA3E,EAAAoE,MAAAI,aACAxE,EAAAoE,MAAAC,UAAAhjD,MAAA3G,EAAA+G,EAAAJ,MAAA3G,EAEAslD,EAAAoE,MAAAG,WAAAljD,MAAA3G,EAAA+G,EAAAJ,MAAA3G,EAIAslD,EAAAoE,MAAA/S,MAAAsT,EAMA,QAAA3D,GAAAhB,EAAAh1B,EAAAvpB,GACAu+C,EAAAc,WAAA3iC,MACAymC,EAAA5E,EAAAh1B,EAAAvpB,GAEAojD,EAAA7E,EAAAh1B,EAAAvpB,GAIA,QAAAmjD,GAAA5E,EAAAh1B,EAAAvpB,GACA,KAAAA,EAAApD,KAAAgD,MAAA/J,EAAA0zB,EAAAxzB,EAAAF,GAEA8pD,EAAAp2B,EAAA1e,EAAA7K,EAAApD,KAAAgD,MAAA2pB,EAAAxzB,KAAAu7B,EAAAoxB,IACAW,EAAA9E,EAAAh1B,EAAAvpB,GAEAA,IAAApD,KAKA,QAAAymD,GAAA9E,EAAAh1B,EAAAvpB,GACAA,EAAAJ,MAAA/J,EAAA0zB,EAAAxzB,EAAAF,IACA8pD,EAAA3/C,EAAAJ,MAAAI,EAAApD,KAAAgD,MAAAI,EAAApD,UAAAgD,SAAA0xB,EAAAoxB,IAEAY,EAAA/E,EAAAh1B,EAAAvpB,IAGAujD,EAAAhF,EAAAh1B,EAAAvpB,GAEAqjD,EAAA9E,EAAAh1B,EAAAvpB,KAKA,QAAAsjD,GAAA/E,EAAAh1B,EAAAvpB,GACAm/C,EAAAZ,EAAAv+C,EAAApD;AACAoD,EAAApD,KAAAgD,QAAA2pB,EAAAxzB,GAEA4pD,EAAAp2B,EAAA1e,EAAA7K,EAAApD,KAAAgD,MAAA2pB,EAAAxzB,KAAAu7B,EAAAoxB,KAEA/C,EAAA3/C,EAAAJ,MAAAI,EAAApD,KAAAgD,MAAAI,EAAApD,UAAAgD,SAAA0xB,EAAAoxB,KAEAY,EAAA/E,EAAAh1B,EAAAvpB,GASA,QAAAujD,GAAAhF,EAAAh1B,EAAAvpB,GAEA2/C,EAAA3/C,EAAApD,KAAAgD,MAAAI,EAAApD,UAAAgD,MAAAI,EAAApD,eAAAgD,SAAA0xB,EAAAoxB,IAEAY,EAAA/E,EAAAh1B,EAAAvpB,EAAApD,MAIA+iD,EAAAp2B,EAAA1e,EAAA7K,EAAApD,UAAAgD,MAAA2pB,EAAAxzB,KAAAu7B,EAAAoxB,KAEAa,EAAAhF,EAAAh1B,EAAAvpB,EAAApD,MAQA,QAAAwmD,GAAA7E,EAAAh1B,EAAAvpB,GACA,KAAAA,EAAAoqB,KAAAxqB,MAAA/J,EAAA0zB,EAAAxzB,EAAAF,GAEA8pD,EAAAp2B,EAAA1e,EAAA7K,EAAAoqB,KAAAxqB,MAAA2pB,EAAAxzB,KAAAu7B,EAAAwuB,GACA0D,EAAAjF,EAAAh1B,EAAAvpB,GAEAA,IAAAoqB,KAKA,QAAAo5B,GAAAjF,EAAAh1B,EAAAvpB,GACAA,EAAAJ,MAAA/J,EAAA0zB,EAAAxzB,EAAAF,IACA8pD,EAAA3/C,EAAAJ,MAAAI,EAAAoqB,KAAAxqB,MAAAI,EAAAoqB,UAAAxqB,SAAA0xB,EAAAwuB,GAEA2D,EAAAlF,EAAAh1B,EAAAvpB,IAGA0jD,EAAAnF,EAAAh1B,EAAAvpB,GAEAwjD,EAAAjF,EAAAh1B,EAAAvpB,KAKA,QAAA0jD,GAAAnF,EAAAh1B,EAAAvpB,GAEA2/C,EAAA3/C,EAAAoqB,KAAAxqB,MAAAI,EAAAoqB,UAAAxqB,MAAAI,EAAAoqB,eAAAxqB,SAAA0xB,EAAAwuB,GAEA2D,EAAAlF,EAAAh1B,EAAAvpB,EAAAoqB,MAIAu1B,EAAAp2B,EAAA1e,EAAA7K,EAAAoqB,UAAAxqB,MAAA2pB,EAAAxzB,KAAAu7B,EAAAwuB,IAEA4D,EAAAnF,EAAAh1B,EAAAvpB,EAAAoqB,MAQA,QAAAq5B,GAAAlF,EAAAh1B,EAAAvpB,GACAm/C,EAAAZ,EAAAv+C,EAAAoqB,MACApqB,EAAAoqB,KAAAxqB,QAAA2pB,EAAAxzB,GAEA4pD,EAAAp2B,EAAA1e,EAAA7K,EAAAoqB,KAAAxqB,MAAA2pB,EAAAxzB,KAAAu7B,EAAAwuB,IAEAH,EAAA3/C,EAAAJ,MAAAI,EAAAoqB,KAAAxqB,MAAAI,EAAAoqB,UAAAxqB,SAAA0xB,EAAAwuB,IAEA2D,EAAAlF,EAAAh1B,EAAAvpB,GASA,QAAA+/C,GAAAxB,EAAA7hB,EAAA+iB,EAAAhlD,EAAA1E,GACA,GAAAsqD,GAAA5lD,EAAA+uC,eAAAzzC,EACAioD,GAAAqC,EAAA,uCAEA,IAAA/pD,GAAA+pD,EAAA5W,cAAAhvC,EAAA1E,EAGA,IAAA0E,EAAAwuC,yBAAAlzC,GAAA,CACA,GAAAuyB,GAAA7tB,EAAA6tB,MAAAvyB,EACA,UAAAqxC,GAAA,qCACArxC,EAAAO,EAAAmE,EAAAqtC,UAAAxf,EAAA,MAAA7tB,EAAAqtC,UAAAxf,EAAA,QAGA,GAAAq7B,EAAA5tD,EAAA0E,EAAAmuC,SAAA7yC,GAAA0E,EAAAkuC,QAAA5yC,GAAAO,GAWA,GATAmqD,EAAAhmD,EAAA1E,EAAAsqD,EAAA/pD,GACAioD,EAAA0B,mBAAAxlD,GACA8jD,EAAA0B,mBAAAI,GAOAtqD,IAAA0pD,GAAAnpD,IAAAomC,EACA+iB,IAAAlB,EAAAc,WAAA1X,iBAAA98B,GAAA6xB,IAAA6hB,EAAAc,WAAA1X,iBAAA5xC,IACA0E,EAAAwvC,4BAAAvN,EAAA+iB,GACAY,EAAApW,4BAAAvN,EAAA+iB,GACA9V,EAAA4U,EAAA9jD,GACAkvC,EAAA4U,EAAA8B,QAKS,CACT,GAAApH,GAAA0G,EAAAF,EAAAnpD,EAAAomC,EACAjiC,GAAAmpD,EAAArF,EAAAtF,EAAAx+C,EAAA4lD,EAAAtqD,EAAAO,GACAypD,EAAAxB,EAAA7hB,EAAA+iB,EAAAhlD,EAAA1E,OAEK,CACL,GAAA8tD,GAAAC,EAAApnB,EAAA+iB,EAAAY,EAAA/pD,EACAytD,GAAAxF,EAAA7hB,EAAA+iB,EAAAhlD,EAAA4lD,EAAAwD,GACArE,EAAAjB,EAAA7hB,EAAA+iB,EAAAhlD,EAAA1E,IAgBA,QAAA6tD,GAAArF,EAAAtF,EAAAx+C,EAAA4lD,EAAAtqD,EAAAO,GACA,GAAA0tD,EACA,OAAA/K,KAAA3nB,EAAAoxB,KAEAsB,EAAA3D,EAAAvW,UAAA/zC,EAAAO,GACA+pD,EAAAzY,cAAAoc,IAAA,EACAra,EAAA4U,EAAA8B,GACAA,EAAA3X,qBACAjuC,IAIAupD,EAAAvpD,EAAAqvC,UAAA/zC,EAAAO,GAEAmE,EAAAmtC,cAAAoc,IAAA,EACAra,EAAA4U,EAAA9jD,GACAA,EAAAiuC,qBACA2X,GAQA,QAAAyD,GAAApnB,EAAA+iB,EAAAY,EAAA/pD,GACA,GAAA2tD,GAAAtE,EAAAF,EAAAnpD,EAAAomC,EACA,IAAAunB,IAAA3yB,EAAAwuB,GAEA,MAAAO,GAAAzX,SAAAtyC,EACK,IAAA2tD,IAAA3yB,EAAAoxB,IAEL,MAAArC,GAAA1X,QAAAryC,EAEA,UAAA8wC,GAAA,6EAAAqY,EAAAnpD,EAAAomC,IAiBA,QAAAqnB,GAAAxF,EAAA7hB,EAAA+iB,EAAAyE,EAAAzpD,EAAA1E,GACA,GAAAsqD,GAAA5lD,EAAA+uC,eAAAzzC,EACAioD,GAAAqC,EAAA,sCAEA,IAAA/pD,GAAA+pD,EAAA5W,cAAAhvC,EAAA1E,EAEA,IAAA4tD,EAAAlE,EAAAyE,EAAAtb,SAAA6W,GAAAyE,EAAAvb,QAAA8W,GAAAnpD,GAEAypD,EAAAxB,EAAAkB,EAAAnpD,EAAA+pD,EAAA/pD,OACK,CACL,GAAAutD,GAAAC,EAAApnB,EAAA+iB,EAAAY,EAAA/pD,EACAytD,GAAAxF,EAAA7hB,EAAA+iB,EAAAyE,EAAA7D,EAAAwD,IA1xBA,GAAA7F,GAAA7uD,EAAA,IACAi4C,EAAAj4C,EAAA,GACAo4C,EAAAp4C,EAAA,IACA+2C,EAAA/2C,EAAA,GAAA+2C,KAKAie,EAAAh1D,EAAA,IAGA0I,EAAAssD,EAAAtsD,QAGAy5B,EAAA6yB,EAAA7yB,YAEAquB,EAAAwE,EAAAxE,SAEAgE,EAAAQ,EAAAR,WAEAzD,EAAAiE,EAAAjE,aA6wBAvqD,GAAA8K,exBwxhBM,SAAUvM,EAAQyB,EAASxG,GyB3kjBjC,YAWA,IAAAi4C,GAAAj4C,EAAA,GACA+uD,EAAA/uD,EAAA,IACAo4C,EAAAp4C,EAAA,IACAi1D,EAAAj1D,EAAA,IACAi3C,EAAAj3C,EAAA,GACA+2C,EAAAE,EAAAF,KAWAme,EAAA,GAaAC,EAAA,SAAAhqD,EAAAC,GAIA,GAHAjC,KAAAvC,EAAAuE,EACAhC,KAAAuS,EAAAtQ,EAEAD,EAAArB,EAAAsB,EAAAtB,EACAX,KAAAuS,EAAAvQ,EACAhC,KAAAvC,EAAAwE,MACK,IAAAD,EAAArB,IAAAsB,EAAAtB,EACL,GAAAqB,EAAAzE,EAAA0E,EAAA1E,EACAyC,KAAAuS,EAAAvQ,EACAhC,KAAAvC,EAAAwE,MACS,IAAAD,EAAAzE,IAAA0E,EAAA1E,EACT,SAAAuxC,GAAA,uDAAA9sC,GAIAhC,MAAAuS,EAAAszC,iBACA7lD,KAAAuS,EAAAszC,mBAEA7lD,KAAAuS,EAAAszC,eAAAhuD,KAAAmI,OAUAisD,EAAA,WAEAjsD,KAAAsqD,UAAA,KAEAtqD,KAAAuqD,YAAA,KAEAvqD,KAAAwqD,WAAA,KAEAxqD,KAAAs3C,MAAA,EAEAt3C,KAAAyqD,cAAA,EAGAwB,GAAA7zD,UAAA8zD,MAAA,WACAlsD,KAAAsqD,UAAA,KACAtqD,KAAAuqD,YAAA,KACAvqD,KAAAwqD,WAAA,KACAxqD,KAAAs3C,MAAA,EACAt3C,KAAAyqD,cAAA,EASA,IAAA0B,GAAA,WAEAnsD,KAAAqvC,iBAAA,KAEArvC,KAAAokB,OAAA,GAmCAgoC,EAAA,SAAAC,EAAA3wD,GACAA,QACAsE,KAAAssD,cACAtsD,KAAAusD,QACAvsD,KAAAkvC,QAAAxzC,EAAA8wD,YAAAH,EAAAtwD,MAAA,GAAAswD,EACArsD,KAAAysD,aAIAzsD,KAAA0sD,MAAA1sD,KAAA2sD,MAAA,KAOA3sD,KAAA4sD,OAAA,KAOA5sD,KAAAiuC,MAAA,KAOAjuC,KAAAkuC,MAAA,KAMAluC,KAAA6sD,SAAA,KAKA7sD,KAAA8sD,WAAA,KAKA9sD,KAAA+sD,SAAA,KAEA/sD,KAAAqqD,MAAA,GAAA4B,GACAjsD,KAAA+mD,WAAA,GAAAoF,GAEAnsD,KAAAgtD,UAAAhtD,KAAAkvC,SAoBAkd,GAAAh0D,UAAA60D,QAAA,SAAAC,GACAltD,KAAAgtD,UAAAE,EACA,IAAA7zD,GAAAy/B,EAAAo0B,EAAA5zD,MACA,KAAAD,EAAA,EAAeA,EAAAy/B,EAASz/B,IACxB2G,KAAAkvC,QAAAr3C,KAAAq1D,EAAA7zD,GAEA,OAAA2G,OAQAosD,EAAAh0D,UAAA+0D,QAAAf,EAAAh0D,UAAA60D,QAuBAb,EAAAh0D,UAAA8P,SAAA,SAAAJ,GACA,GAAAzO,GAAAy/B,EAAAhxB,EAAAxO,MACA,KAAAD,EAAA,EAAeA,EAAAy/B,EAASz/B,IACxB2G,KAAAgtD,UAAAllD,EAAAzO,GAGA,OADA2G,MAAAkvC,QAAAlvC,KAAAkvC,QAAA4H,OAAA/8C,MAAAiG,KAAAkvC,QAAApnC,GACA9H,MAgBAosD,EAAAh0D,UAAAg1D,SAAA,SAAA9lD,GAEA,MADAtH,MAAAkvC,QAAAr3C,KAAAyP,GACAtH,MAQAosD,EAAAh0D,UAAAi1D,SAAAjB,EAAAh0D,UAAAg1D,SAoBAhB,EAAAh0D,UAAAk1D,UAAA,SAAAve,GAEA,MADA/uC,MAAAkvC,QAAAlvC,KAAAkvC,QAAA4H,OAAA/H,GACA/uC,MAeAosD,EAAAh0D,UAAA+P,YAAA,WAEA,MADA2jD,GAAA3jD,YAAAnI,MACAA,MAYAosD,EAAAh0D,UAAAm1D,eAAA,WACA,OAAY5gD,IAAA3M,KAAA0sD,MAAAjsD,IAAAT,KAAA2sD,QAsBZP,EAAAh0D,UAAAiQ,aAAA,WACA,MAAArI,MAAAssD,YAQAF,EAAAh0D,UAAAo1D,aAAApB,EAAAh0D,UAAAiQ,aAMA+jD,EAAAh0D,UAAAquD,MAAA,WACA,MAAAzmD,MAAA4sD,QAIAR,EAAAh0D,UAAAkuD,WAAA,WACA,MAAAtmD,MAAAkvC,QAAA51C,QAIA8yD,EAAAh0D,UAAA21C,KAAA,WACA,MAAA/tC,MAAAiuC,OAIAme,EAAAh0D,UAAAg2C,QAAA,SAAApsC,GACAhC,KAAAiuC,MAAAjsC,GAIAoqD,EAAAh0D,UAAA41C,KAAA,WACA,MAAAhuC,MAAAkuC,OAIAke,EAAAh0D,UAAAi2C,QAAA,SAAArsC,GACAhC,KAAAkuC,MAAAlsC,GAIAoqD,EAAAh0D,UAAAq1D,OAAA,WACA,MAAAztD,MAAAusD,MAIAH,EAAAh0D,UAAA8tD,kBAAA,WACA,GAMA7sD,GANAq0D,EAAA1tD,KAAAkvC,QAAA,GAAA3xC,EACAowD,EAAA3tD,KAAAkvC,QAAA,GAAA3xC,EACAqwD,EAAA5tD,KAAAkvC,QAAA,GAAAvuC,EACAktD,EAAA7tD,KAAAkvC,QAAA,GAAAvuC,EAGAm4B,EAAA94B,KAAAkvC,QAAA51C,MACA,KAAAD,EAAA,EAAeA,EAAAy/B,EAASz/B,IAAA,CACxB,GAAAoE,GAAAuC,KAAAkvC,QAAA71C,EAEAoE,GAAAF,EAAAmwD,MAAAjwD,EAAAF,GACAE,EAAAF,EAAAowD,MAAAlwD,EAAAF,GACAE,EAAAkD,EAAAitD,MAAAnwD,EAAAkD,GACAlD,EAAAkD,EAAAktD,MAAApwD,EAAAkD,GAEAX,KAAA0sD,MAAA,GAAA9G,GAAA+H,EAAAE,GACA7tD,KAAA2sD,MAAA,GAAA/G,GAAA8H,EAAAE,EAEA,IAAA/wB,GAAAkvB,GAAA2B,EAAAC,GACA7wB,EAAAivB,GAAA6B,EAAAC,EACA7tD,MAAAiuC,MAAA,GAAA2X,GAAA8H,EAAA7wB,EAAAgxB,EAAA/wB,GACA98B,KAAAkuC,MAAA,GAAA0X,GAAA+H,EAAA9wB,EAAAgxB,EAAA/wB,GAGA98B,KAAAkvC,QAAAnX,KAAA6tB,EAAA9kD,UAIAsrD,EAAAh0D,UAAA40D,UAAA,SAAAE,GACA,GAAA7zD,GAAAy/B,EAAAo0B,EAAA5zD,MACA,KAAAD,EAAA,EAAeA,EAAAy/B,IAASz/B,EACxB2G,KAAAysD,UAAA50D,KAAA,GAAAm0D,GAAAkB,EAAA7zD,GAAA6zD,GAAA7zD,EAAA,GAAAy/B,MAKAszB,EAAAh0D,UAAAo3C,SAAA,SAAAxf,GACA,MAAAhwB,MAAAkvC,QAAAlf,IAIAo8B,EAAAh0D,UAAAsvD,SAAA,SAAA7Z,GACA7tC,KAAAusD,KAAA10D,KAAAg2C,IAIAue,EAAAh0D,UAAAq2C,WAAA,SAAAnnC,GACA,MAAAtH,MAAA4sD,OAAAne,WAAAnnC,EAAA/J,IAIA6uD,EAAAh0D,UAAA+tD,qBAAA,WACA,GAAApY,GACA+f,EACA9f,EAEAH,EAAA,GAAAoB,GAAAjvC,KAAAkvC,QAAA,GAAAlvC,KAAAkuC,MAAAluC,KAAAiuC,MAEAjuC,MAAAusD,KAAA10D,KAAAg2C,GAEAE,EAAA,GAAAH,GAAAC,EAAA2B,SAAA,GAAA3B,GACAigB,EAAA,GAAAlgB,GAAAC,EAAA2B,SAAA,GAAA3B,GACAG,EAAA,GAAAJ,GAAAC,EAAA2B,SAAA,IAEAxvC,KAAA4sD,OAAA,GAAA9e,GAAAC,EAAAC,GAEAD,EAAAzpC,KAAAwpD,EACAA,EAAAxpD,KAAA0pC,EACA8f,EAAAh8B,KAAAic,EACAC,EAAAlc,KAAAg8B,GAIA1B,EAAAh0D,UAAA21D,WAAA,SAAArmD,KAMA0kD,EAAAh0D,UAAAuvD,mBAAA,SAAAxlD,GACA,OAAA9I,GAAA,EAAmBA,EAAA,IAAOA,EAC1B,IAAA8I,EAAAutC,YAAAr2C,GAAA,CACA,GAAA8V,GAAAnP,KAAA4sD,OAAAle,YAAAvsC,EAAAkuC,QAAAluC,EAAAqtC,SAAAn2C,IACA8V,KACAA,EAAA0+B,SAAA1rC,KAOAiqD,EAAAh0D,UAAA41D,cAAA,SAAAngB,GACA,GAAAx0C,GAAA6J,EAAAlD,KAAAusD,KAAAzzB,EAAA51B,EAAA5J,MACA,KAAAD,EAAA,EAAeA,EAAAy/B,EAASz/B,IACxB,GAAA6J,EAAA7J,KAAAw0C,EAAA,CACA3qC,EAAAtJ,OAAAP,EAAA,EACA,SAUA+yD,EAAAh0D,UAAAsuD,UAAA,SAAA7Y,GAKA,IAFA,GAAA1rC,GAAA9I,EAAA+O,GAAAylC,GAEA1rC,EAAAiG,EAAApM,OACA,IAAAmG,EAAA2tC,aAGA,IAFA3tC,EAAA4tC,aAAA,GACA/vC,KAAAssD,WAAAz0D,KAAAsK,GACA9I,EAAA,EAAuBA,EAAA,EAAOA,IAC9B8I,EAAAktC,iBAAAh2C,IACA+O,EAAAvQ,KAAAsK,EAAAutC,YAAAr2C,KASAuC,EAAAyB,QAAA+uD,GzBgmjBM,SAAUxwD,EAAQyB,G0BhnkBxB,YAwCA,SAAAgqD,GAAAgB,EAAAC,EAAAC,GACA,GAAA0F,IAAA5F,EAAA9qD,EAAAgrD,EAAAhrD,IAAA+qD,EAAA3nD,EAAA4nD,EAAA5nD,GACAutD,GAAA7F,EAAA1nD,EAAA4nD,EAAA5nD,IAAA2nD,EAAA/qD,EAAAgrD,EAAAhrD,GACAwrB,EAAAklC,EAAAC,CACA,OAAAnlC,IAAA,OAAAA,EAAA,EACAiQ,EAAAsuB,UACKv+B,EAAA,EACLiQ,EAAAoxB,IAEApxB,EAAAwuB,GAeA,QAAA6D,GAAAhD,EAAAC,EAAAC,EAAAC,GACA,GAAA2F,IAAA9F,EAAA9qD,EAAA+qD,EAAA/qD,IAAAirD,EAAA7nD,EAAA2nD,EAAA3nD,IAAA6nD,EAAAjrD,EAAA+qD,EAAA/qD,IAAA8qD,EAAA1nD,EAAA2nD,EAAA3nD,EACA,IAAAwtD,IAAA,MACA,QAGA,IAAAC,IAAA/F,EAAA9qD,EAAAgrD,EAAAhrD,IAAAirD,EAAA7nD,EAAA4nD,EAAA5nD,IAAA6nD,EAAAjrD,EAAAgrD,EAAAhrD,IAAA8qD,EAAA1nD,EAAA4nD,EAAA5nD,EACA,SAAAytD,GAAA7uD,GAiBA,QAAAqoD,GAAAS,EAAAC,EAAAC,GACA,GAAAjlB,GAAAglB,EAAA/qD,EAAA8qD,EAAA9qD,EACAgmC,EAAA+kB,EAAA3nD,EAAA0nD,EAAA1nD,EACA0qC,EAAAkd,EAAAhrD,EAAA8qD,EAAA9qD,EACA+tC,EAAAid,EAAA5nD,EAAA0nD,EAAA1nD,CACA,OAAA2iC,GAAA+H,EAAA9H,EAAA+H,EAAA,EArFA,GAAA/rC,GAAA,KACAlC,GAAAkC,SAOA,IAAAy5B,IACAwuB,GAAA,EACA4C,KAAA,EACA9C,UAAA,EAEAjqD,GAAA27B,cA+BA37B,EAAAgqD,WAwBAhqD,EAAAguD,aAmBAhuD,EAAAuqD,iB1BookBM,SAAUhsD,EAAQyB,G2B/ukBxBzB,EAAAyB,QAAA;E3BqvkBM,SAAUzB,EAAQyB,G4BjvkBxBzB,EAAAyB,QAAA,SAAAgxD,GACA,mBAAAC,YACAA,WAAAD,GAEAE,KAAAn3D,KAAA,KAAAi3D,K5B6vkBM,SAAUzyD,EAAQyB,EAASxG,G6BrwkBjCA,EAAA,IAAAA,EAAA,M7B2wkBM,SAAU+E,EAAQyB,EAASxG,G8B3wkBjCimB,OAAA29B,IAAA5jD,EAAA,GAeA,IAAA23D,GAAA,SAAA/T,GACA,GAAAgU,MACAC,EAAA5xC,OAAA6xC,uBACA7xC,OAAA8xC,6BACA9xC,OAAA+xC,0BACA/xC,OAAAgyC,wBACAhyC,OAAAiyC,yBACA,SAAAt4D,GACAu4D,WAAAv4D,EAAA,KAEAw4D,EAAAvvD,MAAAuvD,SAAA,SAAA7yD,GACA,MAAAA,aAAAsD,QACA,kBAAAvH,OAAAC,UAAAwI,SAAAxJ,KAAAgF,IAEA8yD,EAAA,EACAC,EAAA,SAAAC,OAAAxuD,SAAA,IACAyuD,EAAA,WACA,MAAAF,IAAAD,KAAAtuD,SAAA,KAeA0uD,EAAAF,KAAAG,KAAA,WACA,UAAAH,OAEAI,EAAA,SAAAzmC,GACA,GAAA3sB,GAAA4D,IACA,UAAA+oB,EACA,MAAA3sB,GAAAyE,CAEA,IAAAmR,GAAA5V,EAAAyE,EAAAkoB,CACA3sB,GAAAC,GAAAD,EAAAqzD,IAAAz9C,EACA5V,EAAA+gC,GAAA/gC,EAAAqzD,IAAAz9C,EACA5V,EAAAyE,EAAAkoB,GAEA2mC,EAAA,SAAA3mC,GACA,GAAA3sB,GAAA4D,IACA,cAAA+oB,EACA3sB,EAAAuzD,SAEAvzD,EAAAuzD,IAAA5mC,IAEA6mC,EAAA,SAAA7mC,GACA,GAAA3sB,GAAA4D,IACA,cAAA+oB,EACA3sB,EAAAqzD,KAEArzD,EAAAyE,EAAAzE,EAAAyE,EAAAkoB,EAAA3sB,EAAAqzD,SACArzD,EAAAqzD,IAAA1mC,KAEA8mC,EAAA,WACA,GAAAzzD,GAAA4D,WACAyuD,GAAAryD,EAAA1B,IACA0B,EAAApB,SACAy/C,EAAA,aAAAr+C,EAAA1B,GAAA0B,IAEA0zD,EAAA,WACA,GAAA1zD,GAAA4D,IACA5D,GAAA2zD,aAGAtB,GAAAryD,EAAA1B,IACA0B,EAAApB,SACAoB,EAAA2zD,KAAA3zD,EAAA1D,MAAA0D,EAAAC,IAEA2zD,EAAA,WACA,GAAA5zD,GAAA4D,IACA5D,GAAA2zD,OAGA3zD,EAAAC,EAAAD,EAAA1D,MAAA0D,EAAA2zD,WACA3zD,GAAA2zD,KACAtB,EAAAryD,EAAA1B,IAAA0B,IAEApB,EAAA,WACA,GACA0gC,GADAt/B,EAAA4D,IAEA,IAAAivD,EAAA7yD,EAAA6zD,OAAA,CACAv0B,IACA,QAAA7+B,GAAA,EAAAs+C,EAAA/+C,EAAA6zD,MAAA32D,OAAgDuD,EAAAs+C,EAAQt+C,IACxD6+B,EAAA7+B,IAAAT,EAAA6zD,MAAApzD,IACAT,EAAA8zD,IAAArzD,GAAAT,EAAA6zD,MAAApzD,IAAAT,EAAA+zD,OAAA/zD,EAAAyE,OAGA66B,IAAAt/B,EAAA6zD,OAAA7zD,EAAA8zD,IAAA9zD,EAAA6zD,OAAA7zD,EAAA+zD,OAAA/zD,EAAAyE,EAEAzE,GAAAzD,IAAA+iC,IAEA00B,EAAA,WACA,GAAAt3B,GAAA,CACA,QAAAz/B,KAAAo1D,GAAA,GAAAA,EAAAp2D,eAAAgB,GAAA,CACA,GAAA+C,GAAAqyD,EAAAp1D,GACAgD,EAAAD,EAAA1D,KAEAogC,KACA18B,EAAAyE,GAAAxE,EAAAD,EAAAC,IAAAD,EAAAqzD,IAAArzD,EAAAuzD,KACAvzD,EAAAyE,GAAA,UACA4tD,GAAAp1D,GACA+C,EAAAyE,EAAA,EACAi4B,IACA,SAAA18B,GACA4yD,WAAA,WACAvU,EAAA,eAAAr+C,EAAA1B,GAAA0B,MAEiBA,IAEjBA,EAAApB,SAEA89B,GAAA41B,EAAA0B,IAoCA5B,EAAA,SAAApyD,EAAA8gC,EAAA7gC,EAAA8gC,EAAAzkC,EAAAC,EAAAw3D,GACA,GAAAE,IACA31D,GAAA20D,IACAY,MAAA7zD,EACA8zD,IAAAhzB,EACA7gC,IACAwE,EAAA,EACA4uD,IAAAtyB,EAAA9gC,EACAszD,IAAA,EACAj3D,MACAC,MACAw3D,UAAA3B,EAAA8B,OACAr2D,OAAAu1D,EACAE,QACAE,WACA9V,KAAA+V,EACAC,QACAE,SACAh1D,SAEAyzD,GAAA4B,EAAA31D,IAAA21D,CACA,IAAAh3D,GAAAy/B,EAAA,CACA,KAAAz/B,IAAAo1D,GAAA,GAAAA,EAAAp2D,eAAAgB,KACAy/B,IACA,GAAAA,GACA,KAIA,OADA,IAAAA,GAAA41B,EAAA0B,GACAC,EA8JA,OAnJA7B,GAAA+B,KAAAjB,EASAd,EAAAgC,QAAA,SAAA91D,GACA,MAAA+zD,GAAA/zD,IAAA,MAWA8zD,EAAA8B,OAAA,SAAAnhD,GACA,MAAAA,IAUAq/C,EAAAiC,QAAA,SAAAthD,GACA,MAAAvP,MAAAkX,IAAA3H,EAAA,MAUAq/C,EAAAkC,OAAA,SAAAvhD,GACA,MAAAvP,MAAAkX,IAAA3H,EAAA,MAUAq/C,EAAAmC,UAAA,SAAAxhD,GACA,MAAAA,EACA,QAEA,OAAAA,EACA,QAEA,IAAAoD,GAAA,IAAApD,EAAA,KACAyhD,EAAAhxD,KAAAkhC,KAAA,MAAAvuB,KACAhV,EAAAqzD,EAAAr+C,EACAvM,EAAApG,KAAAkX,IAAAlX,KAAAY,IAAAjD,GAAA,MAAAA,EAAA,QACAoD,GAAAiwD,EAAAr+C,EACArM,EAAAtG,KAAAkX,IAAAlX,KAAAY,IAAAG,GAAA,MAAAA,EAAA,QACAwB,EAAA6D,EAAAE,EAAA,EACA,aAAA/D,cAUAqsD,EAAAqC,OAAA,SAAA1hD,GACA,MAAAA,EACA,QAEA,IAAAtO,GAAA,OACA,OAAAsO,OAAAtO,EAAA,GAAAsO,EAAAtO,IAUA2tD,EAAAsC,QAAA,SAAA3hD,GACA,MAAAA,EACA,QAEAA,IAAA,CACA,IAAAtO,GAAA,OACA,OAAAsO,OAAAtO,EAAA,GAAAsO,EAAAtO,GAAA,GAUA2tD,EAAAuC,QAAA,SAAA5hD,GACA,MAAAA,QACAA,EAEAvP,KAAAkX,IAAA,MAAA3H,GAAAvP,KAAAshC,KAAA/xB,EAAA,OACA,EAAAvP,KAAAS,IAAA,OAUAmuD,EAAAwC,OAAA,SAAA7hD,GACA,GAEAjV,GAFA2G,EAAA,OACApD,EAAA,IAkBA,OAhBA0R,GAAA,EAAA1R,EACAvD,EAAA2G,EAAAsO,IAEAA,EAAA,EAAA1R,GACA0R,GAAA,IAAA1R,EACAvD,EAAA2G,EAAAsO,IAAA,KAEAA,EAAA,IAAA1R,GACA0R,GAAA,KAAA1R,EACAvD,EAAA2G,EAAAsO,IAAA,QAEAA,GAAA,MAAA1R,EACAvD,EAAA2G,EAAAsO,IAAA,SAIAjV,GAEA4iB,OAAA0xC,OACAA,GACC,mBAAA/T,KAAA,aAA4CA,KAe7C53C,EAAA,SAAAouD,GAkBA,QAAApuD,GAAAI,EAAA5H,GACA,GAAA4H,EAAA,CACA,GAAAA,EAAAiuD,SACA,MAAAC,GAAAluD,EAEA,IAAAmuD,EAAAnuD,EAAA,UAAAJ,EAAAlK,IACA,MAAAkK,GAAAlK,IAAAoB,MAAA8I,EAAAI,EAEA,IAAAA,YAAAouD,GACA,MAAApuD,EAEA,UAAA5H,EAEA,MADA4H,GAAA22C,EAAA0X,IAAAC,cAAA5W,OAAA13C,IACAkuD,EAAAluD,GAKA,MAFAA,GAAA,MAAAA,EAAA,OAAAA,EACA5H,EAAA,MAAAA,EAAA,OAAAA,EACA,GAAAm2D,GAAAvuD,EAAA5H,GAgDA,QAAAo2D,GAAAC,EAAA3uD,GACA,GAAAA,EAAA,CAUA,GATA,SAAA2uD,IACAA,EAAA9X,EAAA0X,IAAAK,eAAA5uD,EAAA6uD,MAAA7uD,EAAA,eAEA,YAAA2uD,IACAA,EAAA9X,EAAA0X,IAAAO,cAAA9uD,EAAA6uD,MAAA7uD,EAAA,eAEA,gBAAA2uD,KACAA,EAAAD,EAAAC,IAEA,gBAAA3uD,GACA,UAAA2uD,EAAAR,SACA,UAAAnuD,EAAA+uD,UAAA,KACAJ,EAAAK,eAAAC,EAAAjvD,EAAA+uD,UAAA,IAEA,QAAA/uD,EAAA+uD,UAAA,KACAJ,EAAAK,eAAAE,EAAAlvD,EAAA+uD,UAAA,IAEAJ,EAAAQ,aAAAnvD,GACa,QAAAA,EACb2uD,EAAAS,UAEA,IAGA,OAAAT,EAAAR,UACA,OAAAjV,KAAAl5C,GAAA,GAAAA,EAAAi3C,GAAAiC,GAAA,CACA,GAAAlzB,GAAAqpC,EAAArvD,EAAAk5C,GACAlzB,GACA,UAAAkzB,EAAA6V,UAAA,KACAJ,EAAAW,eAAAL,EAAA/V,EAAA6V,UAAA,GAAA/oC,GACqB,QAAAkzB,EAAA6V,UAAA,KACrBJ,EAAAW,eAAAJ,EAAAhW,EAAA6V,UAAA,GAAA/oC,GAEA2oC,EAAAY,aAAArW,EAAAlzB,GAGA2oC,EAAAa,gBAAAtW,QAGS,QAAAl5C,KACT2uD,EAAAS,UAAApvD,EAAA6uD,UAGAF,GAAA9X,EAAA0X,IAAAkB,gBAAAP,EAAAP,EAEA,OAAAA,GAmBA,QAAAN,GAAAzQ,EAAAxgD,GAEA,MADAA,GAAAiyD,EAAAh6D,UAAA+kB,YAAA/lB,KAAA+I,GACA,UAAAA,EACAsyD,SAAA9R,KAEA,SAAAxgD,KACAwgD,YAAAjhD,cAAAuvD,SAAAvvD,MAAAuvD,QAAAtO,OAGA,QAAAxgD,GAAA,OAAAwgD,GACAxgD,SAAAwgD,IAAA,OAAAA,GACA,UAAAxgD,GAAAwgD,IAAAxoD,OAAAwoD,IACA+R,EAAAt7D,KAAAupD,GAAA5kD,MAAA,MAAAohB,eAAAhd,GA8CA,QAAAqb,GAAAxa,GACA,qBAAAA,IAAA7I,OAAA6I,OACA,MAAAA,EAEA,IAAA06B,GAAA,GAAA16B,GAAAguC,WACA,QAAAiN,KAAAj7C,KAAAg5C,GAAAiC,KACAvgB,EAAAugB,GAAAzgC,EAAAxa,EAAAi7C,IAEA,OAAAvgB,GAGA,QAAAi3B,GAAAC,EAAAt2D,GACA,OAAAjD,GAAA,EAAAkhD,EAAAqY,EAAAt5D,OAAsCD,EAAAkhD,EAAQlhD,IAAA,GAAAu5D,EAAAv5D,KAAAiD,EAC9C,MAAAs2D,GAAA/6D,KAAA+6D,EAAAh5D,OAAAP,EAAA,OAGA,QAAAw5D,GAAA56C,EAAAyiC,EAAAoY,GACA,QAAAC,KACA,GAAA1lB,GAAA3tC,MAAAtH,UAAA2D,MAAA3E,KAAAgqB,UAAA,GACAy5B,EAAAxN,EAAAjR,KAAA,KACA42B,EAAAD,EAAAC,MAAAD,EAAAC,UACA5lB,EAAA2lB,EAAA3lB,MAAA2lB,EAAA3lB,SACA,OAAA4lB,GAAAhZ,GAAAa,IACA8X,EAAAvlB,EAAAyN,GACAiY,IAAAE,EAAAnY,IAAAmY,EAAAnY,KAEAzN,EAAA9zC,QAAA,WAAA05D,GAAA5lB,EAAA6lB,SACA7lB,EAAAv1C,KAAAgjD,GACAmY,EAAAnY,GAAA5iC,EAAAle,MAAA2gD,EAAArN,GACAylB,IAAAE,EAAAnY,IAAAmY,EAAAnY,IAEA,MAAAkY,GAGA,QAAAzlB,GAAAwI,EAAAC,EAAAtO,EAAAC,EAAAwrB,EAAAC,GACA,SAAAD,EAAA,CACA,GAAA31D,GAAAu4C,EAAArO,EACA9mC,EAAAo1C,EAAArO,CACA,OAAAnqC,IAAAoD,GAGA,QAAAyyD,EAAArxB,OAAAphC,GAAApD,GAAA8C,EAAA,SAFA,EAIA,MAAAitC,GAAAwI,EAAAC,EAAAmd,EAAAC,GAAA7lB,EAAA7F,EAAAC,EAAAwrB,EAAAC,GAGA,QAAAhsB,GAAAksB,GACA,MAAAA,GAAA,IAAAhzD,EAAA,IAEA,QAAAgzD,GAAAlsB,GACA,WAAAA,EAAA9mC,EAAA,IAkvBA,QAAAizD,GAAAC,GACA,GAAA73B,KAyBA,OAxBA63B,KAAAC,QAAA,qCAAAC,EAAAv7D,EAAAw7D,GAsBA,MArBAA,KAAApY,MAAA,eACA,UAAApjD,GAAA,GAAAw7D,EAAAp6D,QACAo6D,EAAA77D,KAAA,KAEA,SAAAK,IACAw7D,EAAAp6D,OAAA,EACAo6D,IAAA33D,MAAA,KACa,GAAA23D,EAAAp6D,QACbo6D,EAAA77D,KAAA,KAEA,GAAA67D,EAAAp6D,QACAo6D,EAAA77D,KAAA67D,EAAA,SAGA,SAAAx7D,EACAwjC,EAAA7jC,MAAA,QAAAu7D,EAAAtxB,IAAAqF,EAAAusB,EAAA,aACS,SAAAx7D,EACTwjC,EAAA7jC,MAAA,MAAAu7D,EAAAtxB,IAAAqF,EAAAusB,EAAA,eAEAh4B,EAAA7jC,MAAAK,EAAA0X,OAAA,IAAAknC,OAAA4c,IAEAD,IAEA/3B,EAIA,QAAAi4B,GAAAJ,EAAAK,GACA,GAAAC,GAAAC,EAAAP,GACA/1D,EAAA,GAAAqF,GAAAkxD,MACA,IAAAF,EACA,OAAAx6D,GAAA,EAAAkhD,EAAAsZ,EAAAv6D,OAA0CD,EAAAkhD,EAAQlhD,IAAA,CAClD,GAKAy8C,GACAC,EACAtO,EACAC,EACAssB,EATA7xD,EAAA0xD,EAAAx6D,GACA46D,EAAA9xD,EAAA7I,OACA46D,EAAA9B,EAAAjwD,EAAA,IAAAgb,cACAg3C,EAAAhyD,EAAA,IAAA+xD,EACAE,EAAAD,EAAA32D,EAAAqoC,SAAA,CAMA,MAAAquB,GAAA,GAAAD,EACAz2D,EAAAypC,UAAA9kC,EAAA,MACa,KAAA+xD,GAAA,GAAAD,EACbE,GACAre,EAAAse,EAAA72D,EAAA,KACAw4C,EAAAqe,EAAAzzD,EAAA,KACA8mC,EAAA2sB,EAAA72D,EAAA4E,EAAA,GAAAA,EAAA,IACAulC,EAAA0sB,EAAAzzD,EAAAwB,EAAA,GAAAA,EAAA,IACA3E,EAAAypC,UAAAQ,EAAAqO,EAAApO,EAAAqO,IAEAv4C,EAAAypC,UAAA9kC,EAAA,GAAAA,EAAA,IAEa,KAAA+xD,EACb,GAAAD,GACAD,KAAAJ,EACAp2D,EAAA0pC,OAAA/kC,EAAA,GAAA6xD,EAAAz2D,EAAAy2D,EAAA1c,MAAA,EAAA0c,EAAArzD,EAAAqzD,EAAApJ,OAAA,IACiB,GAAAqJ,IACjBE,GACA1sB,EAAA2sB,EAAA72D,EAAA4E,EAAA,GAAAA,EAAA,IACAulC,EAAA0sB,EAAAzzD,EAAAwB,EAAA,GAAAA,EAAA,IACA3E,EAAA0pC,OAAA/kC,EAAA,GAAAslC,EAAAC,IAEAlqC,EAAA0pC,OAAA/kC,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAGa,KAAA+xD,EACb,GAAAD,GAAA,GAAAA,GACAD,KAAAJ,EACAp2D,EAAA2kC,MAAAhgC,EAAA,GAAAA,EAAA8xD,EAAA,GAAAD,EAAAz2D,EAAAy2D,EAAA1c,MAAA,EAAA0c,EAAArzD,EAAAqzD,EAAApJ,OAAA,IACiB,GAAAqJ,EACjBE,GACA1sB,EAAA2sB,EAAA72D,EAAA4E,EAAA,GAAAA,EAAA,IACAulC,EAAA0sB,EAAAzzD,EAAAwB,EAAA,GAAAA,EAAA,IACA3E,EAAA2kC,MAAAhgC,EAAA,GAAAA,EAAA,GAAAslC,EAAAC,IAEAlqC,EAAA2kC,MAAAhgC,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAEiB,GAAA8xD,IACjBE,GACA1sB,EAAA2sB,EAAA72D,EAAA4E,EAAA,GAAAA,EAAA,IACAulC,EAAA0sB,EAAAzzD,EAAAwB,EAAA,GAAAA,EAAA,IACA3E,EAAA2kC,MAAAhgC,EAAA,GAAAA,EAAA,GAAAslC,EAAAC,IAEAlqC,EAAA2kC,MAAAhgC,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAGa,KAAA+xD,GAAA,GAAAD,GACbz2D,EAAAue,IAAA5Z,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAIA,MAAA3E,GAyBA,QAAA62D,GAAA3C,GACA,GAAAj0D,GAAAi0D,EAAAhqD,KAAA4sD,iBAAAnD,EAAAO,EAAAhqD,KAAA4sD,kBACA5C,EAAAhqD,KAAA6sD,YAAApD,EAAAO,EAAAhqD,KAAA6sD,aACA1xD,EAAA2xD,OAAA,QACA3xD,EAAA,KACA4xD,EAAAh3D,EAAA+2D,OAAA,QACAE,EAAA,MAAAD,KAAA/sD,IAIA,OAHAgtD,KACAA,EAAAC,EAAA,OAAAl3D,EAAAiK,YAEAgtD,EAEA,QAAAE,GAAAlD,GACA,MAAAA,GAAAhqD,KAAA4sD,iBAAAnD,EAAAO,EAAAhqD,KAAA4sD,kBAAAzxD,EAAA2xD,OAAA,OAIA,QAAAK,GAAAnD,EAAAx5D,EAAAU,GASA,QAAAk8D,GAAA/rC,GACA,SAAAA,EACA,MAAAiC,EAEA,IAAAjC,MACA,MAAAA,EAEA0oC,GAAAsD,GAAgBzd,MAAAvuB,GAChB,KACA,MAAAgsC,GAAAC,UAAA1d,MACS,MAAAxgD,GACT,UAGA,QAAAm+D,GAAAlsC,GACA,SAAAA,EACA,MAAAiC,EAEA,IAAAjC,MACA,MAAAA,EAEA0oC,GAAAsD,GAAgBnK,OAAA7hC,GAChB,KACA,MAAAgsC,GAAAC,UAAApK,OACS,MAAA9zD,GACT,UAGA,QAAA6B,GAAAu8D,EAAAj9C,GACA,MAAA/f,EACAysC,EAAAuwB,GAAAj9C,EAAAy5C,EAAA3uD,KAAAmyD,IAAA,GACSA,GAAAh9D,IACTysC,EAAA1sB,EAAA,MAAArf,EAAA84D,EAAA3uD,KAAAmyD,IAAA,EAAAt8D,IAxCA,GAAAu8D,GAAAP,EAAAlD,GAAAhqD,KACAi9B,KACAowB,EAAAI,EAAA5D,cAAA,aAyCA,QAxCAwD,IACAA,EAAAtD,EAAA,QACAA,EAAAsD,GAAgBx3D,GAAA,IAAAoD,GAAA,IAAA22C,MAAA,GAAAsT,OAAA,GAAAwK,MAAA,YAAAvO,KAAA,SAChBsO,EAAAE,YAAAN,IAqCArD,EAAAvxD,MACA,WACAxH,EAAA,KAAAm8D,GACAn8D,EAAA,KAAAs8D,EACA,aACAt8D,EAAA,QAAAm8D,GACAn8D,EAAA,SAAAs8D,EACA,YACAt8D,EAAA,IAAAm8D,GACAn8D,EAAA,IAAAs8D,EACA,MACA,cACAt8D,EAAA,KAAAm8D,GACAn8D,EAAA,KAAAs8D,GACAt8D,EAAA,IAAAm8D,EACA,MACA,eACAn8D,EAAA,KAAAm8D,GACAn8D,EAAA,KAAAs8D,GACAt8D,EAAA,KAAAm8D,GACAn8D,EAAA,KAAAs8D,EACA,MACA,YACAt8D,EAAA,KAAAm8D,GACAn8D,EAAA,KAAAm8D,GACAn8D,EAAA,KAAAs8D,GACAt8D,EAAA,KAAAs8D,EACA,MACA,cACAt8D,EAAA,OAAAm8D,GACAn8D,EAAA,cAAAm8D,GACAn8D,EAAA,OAAAs8D,GACAt8D,EAAA,eAAAs8D,EACA,MACA,sBACAt8D,EAAA,KAAAm8D,GACAn8D,EAAA,KAAAs8D,EACA,MACA,aACAt8D,EAAA,KAAAm8D,GACAn8D,EAAA,KAAAs8D,EACA,MACA,SACAt8D,EAAAT,EAAA48D,GAGA,MADAK,GAAAG,YAAAP,GACApwB,EA+BA,QAAA4wB,GAAAC,GACApE,EAAAoE,EAAA,WACAA,EAAA91D,MAAAtH,UAAA2D,MAAA3E,KAAAgqB,UAAA,GAKA,KAHA,GAAA/nB,GAAA,EACAwD,EAAA,EACA6K,EAAA1H,KAAA0H,KACA1H,KAAA3G,UAAA2G,MAAA3G,IACA,KAAAA,EAAA,EAAeA,EAAAm8D,EAAAl8D,OAAiBD,IAChC,OAAAm8D,EAAAn8D,GAAA8G,KACAq1D,EAAAn8D,GAAA4zC,QAAA,SAAAykB,GACAhqD,EAAA2tD,YAAA3D,EAAAhqD,QAGAA,EAAA2tD,YAAAG,EAAAn8D,GAAAqO,KAGA,IAAA5P,GAAA4P,EAAA+tD,UACA,KAAAp8D,EAAA,EAAeA,EAAAvB,EAAAwB,OAAqBD,IACpC2G,KAAAnD,KAAAs0D,EAAAr5D,EAAAuB,GAEA,OAAA2G,MAYA,QAAAqxD,GAAAK,GACA,GAAAA,EAAAgE,OAAAC,GACA,MAAAA,GAAAjE,EAAAgE,KAEA,IAAAP,EACA,KACAA,EAAAzD,EAAA4C,gBACK,MAAAx9D,IAaLkJ,KAAA0H,KAAAgqD,EACAyD,IACAn1D,KAAA41D,MAAA,GAAApE,GAAA2D,IAQAn1D,KAAAG,KAAAuxD,EAAAmE,SAAAnE,EAAAoE,QACA,IAAAp7D,GAAAsF,KAAAtF,GAAA20D,EAAArvD,KAUA,IATAA,KAAA+1D,SACA/1D,KAAAg2D,GACA7yD,cAEAuuD,EAAAgE,KAAAh7D,EACAi7D,EAAAj7D,GAAAsF,KACA,KAAAA,KAAAG,OACAH,KAAA+b,IAAAw5C,GAEAv1D,KAAAG,QAAsBuV,EAAA,EAAAugD,KAAA,EAAAp4B,QAAA,EAAAq4B,OAAA,GACtB,OAAAC,KAAA3E,GAAAp5D,UAAAo5D,EAAAp5D,UAAA4hD,GAAAmc,KACAn2D,KAAAm2D,GAAA3E,EAAAp5D,UAAA+9D,IA4FA,QAAAC,GAAAC,GACAr2D,KAAA0H,KAAA2uD,EA6BA,QAAA1B,GAAAz8D,EAAAgE,GACA,GAAAw/B,GAAA+1B,EAAAv5D,EACAgE,GAAAm5D,YAAA35B,EACA,IAAAg2B,GAAAP,EAAAz1B,EACA,OAAAg2B,GAEA,QAAAF,GAAAvuD,EAAA5H,GACA,GAAAqgC,GACA46B,EACA5B,EACA6B,EAAA/E,EAAAp5D,SACA,IAAA6K,GAAA,OAAAA,EAAA4yD,QAAA,CACA,GAAA5yD,EAAAyyD,OAAAC,GACA,MAAAA,GAAA1yD,EAAAyyD,KAEA,IAAApE,GAAAruD,EAAAuzD,aACA96B,GAAA,GAAA21B,GAAApuD,GACAqzD,EAAArzD,EAAAwzD,qBAAA,WACA/B,EAAAzxD,EAAAwzD,qBAAA,WACAH,IACAA,EAAA7E,EAAA,QACA6E,EAAAjB,YAAA/D,EAAAK,eAAA,sBACAj2B,EAAAh0B,KAAA2tD,YAAAiB,IAEA5B,IACAA,EAAAjD,EAAA,QACA/1B,EAAAh0B,KAAA2tD,YAAAX,IAEAh5B,EAAAg5B,MACA,QAAAzY,KAAAsa,KAAAvc,GAAAiC,KACAvgB,EAAAugB,GAAAsa,EAAAta,GAEAvgB,GAAAk6B,MAAAl6B,EAAAu1B,KAAAv1B,MAEAA,GAAAi5B,EAAA,MAAA/a,EAAA0X,IAAAoF,MACAjF,EAAA/1B,EAAAh0B,MACAkjD,OAAAvvD,EACA0+C,QAAA,IACAzC,MAAAr0C,EACAgvD,SAGA,OAAAv2B,GAEA,QAAAy1B,GAAAwF,GACA,MAAAA,GAGAA,YAAAtF,IAAAsF,YAAAP,GACAO,EAEAA,EAAAd,SAAA,OAAAc,EAAAd,QAAA14C,cACA,GAAAq0C,GAAAmF,GAEAA,EAAAd,SAAA,UAAAc,EAAAd,QAAA14C,eAAA,iBAAAw5C,EAAAx2D,KACA,GAAAqxD,GAAAmF,EAAAC,gBAAAH,qBAAA,WAEA,GAAApF,GAAAsF,GAXAA,EA2DA,QAAAE,GAAA5F,EAAAtQ,GACA,OAAAtnD,GAAA,EAAAkhD,EAAA0W,EAAA33D,OAAqCD,EAAAkhD,EAAQlhD,IAAA,CAC7C,GAAAiD,IACA6D,KAAA8wD,EAAA53D,GAAA8G,KACA4C,KAAAkuD,EAAA53D,GAAA0J,QAEAjL,EAAAm5D,EAAA53D,GAAAvB,UACA6oD,GAAA9oD,KAAAyE,GACAxE,EAAAwB,QACAu9D,EAAA/+D,EAAAwE,EAAAm5D,gBA9iDA5yD,EAAAk3C,QAAA,QAqCAl3C,EAAAjC,SAAA,WACA,eAAAZ,KAAA+5C,SAEAl3C,EAAAmzD,IACA,IAAApc,IACAkd,IAAA7F,EAAAn0C,OACAw0C,IAAAL,EAAAn0C,OAAAi6C,SAEAl0D,GAAAmzD,EAAApc,MACA,IAAAI,GAAA,iBACAoY,EAAAzX,OACAqc,EAAAv2C,WACAw2C,EAAA1zC,SACA6vC,EAAAxzD,KACAs3D,EAAA9D,EAAA3yD,IACA02D,EAAA/D,EAAAzmD,IACAnM,EAAA4yD,EAAA5yD,IAEAH,GADA+yD,EAAAt8C,IACAs8C,EAAA/yD,IAEA2qB,GADAooC,EAAAl7B,MACA,IAEAw6B,EAAAv6D,OAAAC,UAAAwI,SAEAw2D,EAAA,mTAKAC,GAFAx0D,EAAAmzD,EAAA/b,UAAA,SAEA,eACAqd,GAAYC,GAAA,EAAAC,GAAA,GACZC,EAAA,6DACAC,EAAA,8DACAC,EAAA,8CACAzI,EAAA,EACAC,EAAA,SAAAC,OAAAxuD,SAAA,IACAyuD,EAAA,SAAAqC,GACA,OAAAA,KAAAvxD,KAAAuxD,EAAAvxD,KAAA6qB,GAAAmkC,GAAAD,KAAAtuD,SAAA,KAEAoxD,EAAA,+BACAC,EAAA,6BACA0D,IACA9yD,GAAA+0D,IAAA,SAAAA,GACA,eAAAA,EAAA,KAoDA/0D,GAAAmzD,EAAAvE,IACA5uD,EAAAmzD,EAAAt7D,GAAA20D,EAmDAxsD,EAAAg1D,OAAA,WACA,GAAAC,GAAA,gBACAC,EAAA,2DACAC,EAAA,SAAAvE,EAAAxX,EAAAj7C,GACA,GAAA06B,GAAA16B,CAWA,OAVAi7C,GAAAuX,QAAAuE,EAAA,SAAAtE,EAAAv7D,EAAA+/D,EAAAC,EAAAC,GACAjgE,KAAAggE,EACAx8B,IACAxjC,IAAAwjC,KACAA,IAAAxjC,IAEA,kBAAAwjC,IAAAy8B,IAAAz8B,UAGAA,GAAA,MAAAA,MAAA16B,EAAAyyD,EAAA/3B,GAAA,GAGA,iBAAA0N,EAAApoC,GACA,MAAAoxD,GAAAhpB,GAAAoqB,QAAAsE,EAAA,SAAArE,EAAAxX,GACA,MAAA+b,GAAAvE,EAAAxX,EAAAj7C,SAcA6B,EAAAmzD,EAAAx6C,QAuBA3Y,EAAAmzD,EAAAnD,SAkCAhwD,EAAAskC,MASAtkC,EAAAwwD,MASAxwD,EAAAq+B,IAAA,SAAAoM,GACA,MAAA8lB,GAAAlyB,IAAAr+B,EAAAskC,IAAAmG,KAUAzqC,EAAAi/B,IAAA,SAAAwL,GACA,MAAA8lB,GAAAtxB,IAAAj/B,EAAAskC,IAAAmG,KAUAzqC,EAAAs+B,IAAA,SAAAmM,GACA,MAAA8lB,GAAAjyB,IAAAt+B,EAAAskC,IAAAmG,KAUAzqC,EAAAu1D,KAAA,SAAAC,GACA,MAAAx1D,GAAAwwD,IAAAD,EAAAgF,KAAAC,KAUAx1D,EAAAo+B,KAAA,SAAAo3B,GACA,MAAAx1D,GAAAwwD,IAAAD,EAAAnyB,KAAAo3B,KAUAx1D,EAAAy1D,KAAA,SAAAD,GACA,MAAAx1D,GAAAwwD,IAAAD,EAAAkF,KAAAD,KAUAx1D,EAAAk/B,MAAA,SAAAs2B,GACA,MAAAx1D,GAAAwwD,IAAAD,EAAArxB,MAAAs2B,KAgBAx1D,EAAAyqC,QAaAzqC,EAAAi2B,IAAA,SAAAgd,EAAAC,EAAAtO,EAAAC,GACA,MAAA9nC,MAAAkhC,KAAAj+B,EAAA01D,KAAAziB,EAAAC,EAAAtO,EAAAC,KAcA7kC,EAAA01D,KAAA,SAAAziB,EAAAC,EAAAtO,EAAAC,GACA,OAAAoO,EAAArO,IAAAqO,EAAArO,IAAAsO,EAAArO,IAAAqO,EAAArO,IAoBA7kC,EAAA21D,aAAA,SAAAh2D,EAAAjF,EAAAoD,GACA,QAAA83D,GAAAh7D,GACA,GAAAo/B,GAAAp/B,EAAAF,IACAu/B,EAAAr/B,EAAAkD,GACA,OAAAk8B,KAAAC,IAUA,OALA47B,GACAC,EAIAzgB,EAAA0gB,EARAC,EAAAr2D,EAAAkF,KACAoxD,EAAAD,EAAAE,iBACAC,EAAAF,EAAAD,EAAAI,YAAAC,cAAA,KAGAC,EAAAC,IAGAC,EAAA,EAAgDA,GAAAP,EAA0BO,GAAAL,GAC1EJ,EAAAH,EAAAvgB,EAAA2gB,EAAAS,iBAAAD,KAAAF,IACAT,EAAAxgB,EAAAygB,EAAAU,EAAAF,EAAAP,EAMA,KADAI,GAAA,GACAA,EAAA,KACA,GAAAO,GACAC,EACAC,EACAC,EACAC,EACAC,GACAH,EAAAd,EAAAK,IAAA,IAAAW,EAAAlB,EAAAc,EAAAV,EAAAS,iBAAAG,KAAAN,GACAT,EAAAa,EAAAZ,EAAAc,EAAAN,EAAAQ,IACSD,EAAAf,EAAAK,IAAAF,IAAAc,EAAAnB,EAAAe,EAAAX,EAAAS,iBAAAI,KAAAP,GACTT,EAAAc,EAAAb,EAAAe,EAAAP,EAAAS,GAEAZ,GAAA,GAUA,MANAN,IACAn7D,EAAAm7D,EAAAn7D,EACAoD,EAAA+3D,EAAA/3D,EACArH,OAAAq/D,EACAj7B,SAAA99B,KAAAkhC,KAAAq4B,KAaAt2D,EAAAuuD,KAWAvuD,EAAAg3D,OAAA,SAAAC,EAAAlhE,EAAA+vB,GAEA,GADAA,EAAAyoC,EAAAzoC,EAAA,UAAAA,EAAA,GACAyoC,EAAA0I,EAAA,UAEA,IADA,GAAAzgE,GAAAygE,EAAAxgE,OACAD,KAAA,GAAAmH,EAAAs5D,EAAAzgE,GAAAT,IAAA+vB,EACA,MAAAmxC,GAAAzgE,OAEK,CACLygE,IACA,IAAA52B,GAAAtqC,EAAAkhE,CACA,IAAA52B,EAAAva,EACA,MAAA/vB,GAAAsqC,CAEA,IAAAA,EAAA42B,EAAAnxC,EACA,MAAA/vB,GAAAsqC,EAAA42B,EAGA,MAAAlhE,IAoCAiK,EAAAk3D,OAAAlH,EAAA,SAAAmH,GACA,IAAAA,MAAA5H,EAAA4H,IAAApiE,QAAA,OACA,OAAgBqY,GAAA,EAAAyF,GAAA,EAAArZ,GAAA,EAAA49D,IAAA,OAAA98D,MAAA,EAAAyD,SAAAs5D,EAEhB,YAAAF,EACA,OAAgB/pD,GAAA,EAAAyF,GAAA,EAAArZ,GAAA,EAAA49D,IAAA,OAAAr5D,SAAAs5D,EAGhB,MADA5C,EAAAtd,GAAAggB,EAAA78C,cAAA20C,UAAA,YAAAkI,EAAApqD,YAAAoqD,EAAAG,EAAAH,KACAA,EACA,OAAgB/pD,GAAA,EAAAyF,GAAA,EAAArZ,GAAA,EAAA49D,IAAA,OAAA98D,MAAA,EAAAyD,SAAAs5D,EAEhB,IACAE,GACAC,EACAC,EACAC,EACAp4D,EACA23D,EACAU,EAAAR,EAAA76B,MAAAi4B,EACA,OAAAoD,IACAA,EAAA,KACAF,EAAArD,EAAAuD,EAAA,GAAA1I,UAAA,OACAuI,EAAApD,EAAAuD,EAAA,GAAA1I,UAAA,SACAsI,EAAAnD,EAAAuD,EAAA,GAAA1I,UAAA,UAEA0I,EAAA,KACAF,EAAArD,GAAA90D,EAAAq4D,EAAA,GAAA5qD,OAAA,IAAAzN,EAAA,IACAk4D,EAAApD,GAAA90D,EAAAq4D,EAAA,GAAA5qD,OAAA,IAAAzN,EAAA,IACAi4D,EAAAnD,GAAA90D,EAAAq4D,EAAA,GAAA5qD,OAAA,IAAAzN,EAAA,KAEAq4D,EAAA,KACAV,EAAAU,EAAA,GAAAlf,MAAA+b,GACA+C,EAAApD,EAAA8C,EAAA,IACA,KAAAA,EAAA,GAAA/9D,OAAA,KAAAq+D,GAAA,MACAC,EAAArD,EAAA8C,EAAA,IACA,KAAAA,EAAA,GAAA/9D,OAAA,KAAAs+D,GAAA,MACAC,EAAAtD,EAAA8C,EAAA,IACA,KAAAA,EAAA,GAAA/9D,OAAA,KAAAu+D,GAAA,MACA,QAAAE,EAAA,GAAAr9C,cAAAphB,MAAA,OAAAw+D,EAAAvD,EAAA8C,EAAA,KACAA,EAAA,SAAAA,EAAA,GAAA/9D,OAAA,KAAAw+D,GAAA,MAEAC,EAAA,IACAV,EAAAU,EAAA,GAAAlf,MAAA+b,GACA+C,EAAApD,EAAA8C,EAAA,IACA,KAAAA,EAAA,GAAA/9D,OAAA,KAAAq+D,GAAA,KACAC,EAAArD,EAAA8C,EAAA,IACA,KAAAA,EAAA,GAAA/9D,OAAA,KAAAs+D,GAAA,KACAC,EAAAtD,EAAA8C,EAAA,IACA,KAAAA,EAAA,GAAA/9D,OAAA,KAAAu+D,GAAA,MACA,OAAAR,EAAA,GAAA/9D,OAAA,SAAA+9D,EAAA,GAAA/9D,OAAA,MAAAq+D,GAAA,KACA,QAAAI,EAAA,GAAAr9C,cAAAphB,MAAA,OAAAw+D,EAAAvD,EAAA8C,EAAA,KACAA,EAAA,SAAAA,EAAA,GAAA/9D,OAAA,KAAAw+D,GAAA,KACA13D,EAAA43D,QAAAL,EAAAC,EAAAC,EAAAC,IAEAC,EAAA,IACAV,EAAAU,EAAA,GAAAlf,MAAA+b,GACA+C,EAAApD,EAAA8C,EAAA,IACA,KAAAA,EAAA,GAAA/9D,OAAA,KAAAq+D,GAAA,KACAC,EAAArD,EAAA8C,EAAA,IACA,KAAAA,EAAA,GAAA/9D,OAAA,KAAAs+D,GAAA,KACAC,EAAAtD,EAAA8C,EAAA,IACA,KAAAA,EAAA,GAAA/9D,OAAA,KAAAu+D,GAAA,MACA,OAAAR,EAAA,GAAA/9D,OAAA,SAAA+9D,EAAA,GAAA/9D,OAAA,MAAAq+D,GAAA,KACA,QAAAI,EAAA,GAAAr9C,cAAAphB,MAAA,OAAAw+D,EAAAvD,EAAA8C,EAAA,KACAA,EAAA,SAAAA,EAAA,GAAA/9D,OAAA,KAAAw+D,GAAA,KACA13D,EAAA63D,QAAAN,EAAAC,EAAAC,EAAAC,KAEAH,EAAAjD,EAAA/D,EAAAl7B,MAAAkiC,GAAA,KACAC,EAAAlD,EAAA/D,EAAAl7B,MAAAmiC,GAAA,KACAC,EAAAnD,EAAA/D,EAAAl7B,MAAAoiC,GAAA,KACAC,EAAApD,EAAAD,EAAAqD,EAAA,MACAC,GAAevqD,EAAAmqD,EAAA1kD,EAAA2kD,EAAAh+D,EAAAi+D,EAAA15D,SAAAs5D,GACfM,EAAAP,IAAA,cAAAK,EAAAD,GAAA,EAAAD,GAAA,IAAAx5D,SAAA,IAAA7E,MAAA,GACAy+D,EAAAD,QAAAnJ,EAAAmJ,EAAA,UAAAA,EAAA,EACAC,KAEYvqD,GAAA,EAAAyF,GAAA,EAAArZ,GAAA,EAAA49D,IAAA,OAAA98D,MAAA,EAAAyD,SAAAs5D,IACXr3D,GAWDA,EAAA83D,IAAA9H,EAAA,SAAAx3D,EAAAwF,EAAAxE,GACA,MAAAwG,GAAA43D,QAAAp/D,EAAAwF,EAAAxE,GAAA49D,MAYAp3D,EAAA+3D,IAAA/H,EAAA,SAAAx3D,EAAAwF,EAAA3G,GACA,MAAA2I,GAAA63D,QAAAr/D,EAAAwF,EAAA3G,GAAA+/D,MAYAp3D,EAAA23D,IAAA3H,EAAA,SAAA5iD,EAAAyF,EAAArZ,EAAAskD,GACA,GAAAyQ,EAAAzQ,EAAA,WACA,GAAAzoB,GAAAk7B,EAAAl7B,KACA,gBAAAA,EAAAjoB,GAAAioB,EAAAxiB,GAAAwiB,EAAA77B,IAAAskD,EAAAxO,QAAA,QAEA,oBAAA91C,EAAAqZ,GAAA,EAAAzF,GAAA,IAAArP,SAAA,IAAA7E,MAAA,IAEA,IAAAo+D,GAAA,SAAAU,GACA,GAAAxhE,GAAAugD,EAAA0X,IAAAmF,qBAAA,YAAA7c,EAAA0X,IAAAmF,qBAAA,UACA2D,EAAA,gBAUA,QATAD,EAAAtH,EAAA,SAAAgI,GACA,UAAAA,EAAA19C,cACA,MAAAi9C,EAEA/gE,GAAAyhE,MAAAD,MAAAT,EACA/gE,EAAAyhE,MAAAD,OACA,IAAAl2B,GAAAiV,EAAA0X,IAAAyJ,YAAAC,iBAAA3hE,EAAA2xB,GAAAiwC,iBAAA,QACA,OAAAt2B,IAAAy1B,EAAA,KAAAz1B,KAEAk2B,IAEAK,EAAA,WACA,cAAAl7D,KAAA3E,EAAA2E,KAAAa,EAAAb,KAAA3D,GAAA,KAEA8+D,EAAA,WACA,cAAAn7D,KAAA3E,EAAA2E,KAAAa,EAAAb,KAAA9F,GAAA,KAEAggE,EAAA,WACA,UAAAl6D,KAAAu6D,SAAA,MAAAv6D,KAAAu6D,QACAv6D,KAAAi6D,IACA,SAAAj6D,KAAAiQ,EAAAjQ,KAAA0V,EAAA1V,KAAA3D,EAAA2D,KAAAu6D,SAAA,KAEAa,EAAA,SAAAnrD,EAAAyF,EAAArZ,GAMA,GALA,MAAAqZ,GAAA07C,EAAAnhD,EAAA,gBAAAA,IAAA,KAAAA,IAAA,KAAAA,KACA5T,EAAA4T,EAAA5T,EACAqZ,EAAAzF,EAAAyF,EACAzF,OAEA,MAAAyF,GAAA07C,EAAAnhD,EAAAorD,QAAA,CACA,GAAAC,GAAAz4D,EAAAk3D,OAAA9pD,EACAA,GAAAqrD,EAAArrD,EACAyF,EAAA4lD,EAAA5lD,EACArZ,EAAAi/D,EAAAj/D,EAQA,OANA4T,EAAA,GAAAyF,EAAA,GAAArZ,EAAA,KACA4T,GAAA,IACAyF,GAAA,IACArZ,GAAA,MAGA4T,EAAAyF,EAAArZ,IAEAk/D,EAAA,SAAAtrD,EAAAyF,EAAArZ,EAAAskD,GACA1wC,EAAAmjD,EAAAl7B,MAAA,IAAAjoB,GACAyF,EAAA09C,EAAAl7B,MAAA,IAAAxiB,GACArZ,EAAA+2D,EAAAl7B,MAAA,IAAA77B,EACA,IAAAm+D,IACAvqD,IACAyF,IACArZ,IACAk+D,QAAAnJ,EAAAzQ,EAAA,UAAAA,EAAA,EACAsZ,IAAAp3D,EAAA23D,IAAAvqD,EAAAyF,EAAArZ,GACAuE,SAAAs5D,EAGA,OADA9I,GAAAzQ,EAAA,YAAA6Z,EAAAD,QAAA5Z,GACA6Z,EAqBA33D,GAAAg4D,MAAA,SAAAS,GACA,GAAAd,EAiCA,OAhCApJ,GAAAkK,EAAA,gBAAAA,IAAA,KAAAA,IAAA,KAAAA,IACAd,EAAA33D,EAAA43D,QAAAa,GACAA,EAAArrD,EAAAuqD,EAAAvqD,EACAqrD,EAAA5lD,EAAA8kD,EAAA9kD,EACA4lD,EAAAj/D,EAAAm+D,EAAAn+D,EACAi/D,EAAAf,QAAA,EACAe,EAAArB,IAAAO,EAAAP,KACK7I,EAAAkK,EAAA,gBAAAA,IAAA,KAAAA,IAAA,KAAAA,IACLd,EAAA33D,EAAA63D,QAAAY,GACAA,EAAArrD,EAAAuqD,EAAAvqD,EACAqrD,EAAA5lD,EAAA8kD,EAAA9kD,EACA4lD,EAAAj/D,EAAAm+D,EAAAn+D,EACAi/D,EAAAf,QAAA,EACAe,EAAArB,IAAAO,EAAAP,MAEA7I,EAAAkK,EAAA,YACAA,EAAAz4D,EAAAk3D,OAAAuB,IAEAlK,EAAAkK,EAAA,gBAAAA,IAAA,KAAAA,IAAA,KAAAA,MAAA,SAAAA,KACAd,EAAA33D,EAAA24D,QAAAF,GACAA,EAAAjgE,EAAAm/D,EAAAn/D,EACAigE,EAAAz6D,EAAA25D,EAAA35D,EACAy6D,EAAAphE,EAAAsgE,EAAAtgE,EACAsgE,EAAA33D,EAAA44D,QAAAH,GACAA,EAAAlsD,EAAAorD,EAAAn+D,IAEAi/D,GAAmBrB,IAAA,QACnBqB,EAAArrD,EAAAqrD,EAAA5lD,EAAA4lD,EAAAj/D,EAAAi/D,EAAAjgE,EAAAigE,EAAAz6D,EAAAy6D,EAAAlsD,EAAAksD,EAAAphE,GAAA,EACAohE,EAAAn+D,MAAA,IAGAm+D,EAAA16D,SAAAs5D,EACAoB,GAkBAz4D,EAAA43D,QAAA,SAAAp/D,EAAAwF,EAAAuO,EAAAuxC,GACAyQ,EAAA/1D,EAAA,gBAAAA,IAAA,KAAAA,IAAA,KAAAA,KACA+T,EAAA/T,EAAAgB,EACAwE,EAAAxF,EAAAwF,EACA8/C,EAAAtlD,EAAAslD,EACAtlD,OAEAA,GAAA,GACA,IAAAqgE,GAAAC,EAAAx+B,EAAAn3B,EAAAo3B,CAUA,OATA/hC,KAAA,OACA+hC,EAAAhuB,EAAAvO,EACAmF,EAAAo3B,GAAA,EAAA58B,EAAAnF,EAAA,MACAqgE,EAAAC,EAAAx+B,EAAA/tB,EAAAguB,EAEA/hC,MACAqgE,IAAAt+B,EAAAp3B,EAAA,IAAAA,EAAAo3B,GAAA/hC,GACAsgE,IAAA31D,EAAAo3B,IAAAp3B,EAAA,KAAA3K,GACA8hC,IAAA,IAAAn3B,EAAAo3B,IAAAp3B,GAAA3K,GACAkgE,EAAAG,EAAAC,EAAAx+B,EAAAwjB,IAkBA99C,EAAA63D,QAAA,SAAAr/D,EAAAwF,EAAA3G,EAAAymD,GACAyQ,EAAA/1D,EAAA,gBAAAA,IAAA,KAAAA,IAAA,KAAAA,KACAnB,EAAAmB,EAAAnB,EACA2G,EAAAxF,EAAAwF,EACAxF,QAEAA,EAAA,GAAAwF,EAAA,GAAA3G,EAAA,KACAmB,GAAA,IACAwF,GAAA,IACA3G,GAAA,KAEAmB,GAAA,GACA,IAAAqgE,GAAAC,EAAAx+B,EAAAn3B,EAAAo3B,CAUA,OATA/hC,KAAA,OACA+hC,EAAA,EAAAv8B,GAAA3G,EAAA,GAAAA,EAAA,EAAAA,GACA8L,EAAAo3B,GAAA,EAAA58B,EAAAnF,EAAA,MACAqgE,EAAAC,EAAAx+B,EAAAjjC,EAAAkjC,EAAA,EAEA/hC,MACAqgE,IAAAt+B,EAAAp3B,EAAA,IAAAA,EAAAo3B,GAAA/hC,GACAsgE,IAAA31D,EAAAo3B,IAAAp3B,EAAA,KAAA3K,GACA8hC,IAAA,IAAAn3B,EAAAo3B,IAAAp3B,GAAA3K,GACAkgE,EAAAG,EAAAC,EAAAx+B,EAAAwjB,IAiBA99C,EAAA44D,QAAA,SAAAxrD,EAAAyF,EAAArZ,GACAA,EAAA++D,EAAAnrD,EAAAyF,EAAArZ,GACA4T,EAAA5T,EAAA,GACAqZ,EAAArZ,EAAA,GACAA,IAAA,EAEA,IAAAu/D,GAAAvb,EAAAwb,EAAAz+B,CAUA,OATAy+B,GAAA3E,EAAAjnD,EAAAyF,EAAArZ,GACA+gC,EAAAy+B,EAAA1E,EAAAlnD,EAAAyF,EAAArZ,GACAu/D,EAAA,GAAAx+B,EAAA,KACAy+B,GAAA5rD,GAAAyF,EAAArZ,GAAA+gC,EACAy+B,GAAAnmD,GAAArZ,EAAA4T,GAAAmtB,EAAA,GACAntB,EAAAyF,GAAA0nB,EAAA,EAEAw+B,KAAA,cACAvb,EAAA,GAAAjjB,EAAA,EAAAA,EAAAy+B,GACYxgE,EAAAugE,EAAA/6D,EAAAw/C,EAAAhkD,EAAAw/D,EAAAj7D,SAAAs6D,IAiBZr4D,EAAA24D,QAAA,SAAAvrD,EAAAyF,EAAArZ,GACAA,EAAA++D,EAAAnrD,EAAAyF,EAAArZ,GACA4T,EAAA5T,EAAA,GACAqZ,EAAArZ,EAAA,GACAA,IAAA,EAEA,IAAAu/D,GAAAvb,EAAAxD,EAAAif,EAAAt+D,EAAA4/B,CAaA,OAZA0+B,GAAA5E,EAAAjnD,EAAAyF,EAAArZ,GACAmB,EAAA25D,EAAAlnD,EAAAyF,EAAArZ,GACA+gC,EAAA0+B,EAAAt+D,EACAo+D,EAAA,GAAAx+B,EAAA,KACA0+B,GAAA7rD,GAAAyF,EAAArZ,GAAA+gC,EACA0+B,GAAApmD,GAAArZ,EAAA4T,GAAAmtB,EAAA,GACAntB,EAAAyF,GAAA0nB,EAAA,EACAw+B,KAAA,cACA/e,GAAAif,EAAAt+D,GAAA,EACA6iD,EAAA,GAAAjjB,EAAA,EACAyf,EAAA,GAAAzf,GAAA,EAAAyf,GACAzf,GAAA,IAAAyf,IACYxhD,EAAAugE,EAAA/6D,EAAAw/C,EAAAnmD,EAAA2iD,EAAAj8C,SAAAu6D,IAcZt4D,EAAAQ,gBAAA,SAAA04D,GACA,IAAAA,EACA,WAEA,IAAAC,GAAAn5D,EAAAL,KAAAu5D,EACA,IAAAC,EAAAC,IACA,MAAAp5D,GAAAL,KAAAgZ,MAAAwgD,EAAAC,IAGA,IAAAC,IAAuB9/D,EAAA,EAAAjB,EAAA,EAAAwlD,EAAA,EAAAtlD,EAAA,EAAAnB,EAAA,EAAAsD,EAAA,EAAAyS,EAAA,EAAAsC,EAAA,EAAA1R,EAAA,EAAAsB,EAAA,EAAAiN,EAAA,EAAAyM,EAAA,EAAArG,EAAA,GACvBlb,IA+BA,OA9BA82D,GAAA2K,EAAA,UAAA3K,EAAA2K,EAAA,cACAzhE,EAAAuI,EAAAL,KAAAgZ,MAAAugD,IAEAzhE,EAAAhB,QACA84D,EAAA2J,GAAAvI,QAAAiE,EAAA,SAAAr7D,EAAAC,EAAAlB,GACA,GAAAu4D,MACAx7D,EAAAmE,EAAA8gB,aAYA,IAXAhiB,EAAAq4D,QAAAmE,EAAA,SAAAv7D,EAAAC,GACAA,GAAAq3D,EAAA77D,MAAAwE,KAEA,KAAAnE,GAAAw7D,EAAAp6D,OAAA,IACAgB,EAAAzC,MAAAwE,GAAAy6C,OAAA4c,EAAA95D,OAAA,OACA1B,EAAA,IACAmE,EAAA,KAAAA,EAAA,SAEA,KAAAnE,GAAA,GAAAw7D,EAAAp6D,QACAgB,EAAAzC,MAAAwE,EAAAq3D,EAAA,KAEA,KAAAx7D,EACAoC,EAAAzC,MAAAwE,GAAAy6C,OAAA4c,QACa,MAAAA,EAAAp6D,QAAA4iE,EAAAhkE,KACboC,EAAAzC,MAAAwE,GAAAy6C,OAAA4c,EAAA95D,OAAA,EAAAsiE,EAAAhkE,MACAgkE,EAAAhkE,SAMAoC,EAAAsG,SAAAiC,EAAAL,KAAA5B,SACAo7D,EAAAC,IAAAp5D,EAAAL,KAAAgZ,MAAAlhB,GACAA,EAYA,IAAAw5D,GAAAjxD,EAAAixD,qBAAA,SAAAqI,GACA,IAAAA,EACA,WAEA,IACA7hE,KAeA,OAdA82D,GAAA+K,EAAA,UAAA/K,EAAA+K,EAAA,cACA7hE,EAAAuI,EAAAL,KAAAgZ,MAAA2gD,IAEA7hE,EAAAhB,QACA84D,EAAA+J,GAAA3I,QAAAkE,EAAA,SAAAt7D,EAAAC,EAAAlB,GACA,GAAAu4D,KACAr3D,GAAA8gB,aACAhiB,GAAAq4D,QAAAmE,EAAA,SAAAv7D,EAAAC,GACAA,GAAAq3D,EAAA77D,MAAAwE,KAEA/B,EAAAzC,MAAAwE,GAAAy6C,OAAA4c,MAGAp5D,EAAAsG,SAAAiC,EAAAL,KAAA5B,SACAtG,EA8BAuI,GAAAmzD,EAAA1C,sBACAzwD,EAAAmzD,EAAAoG,YAAA,sBAqEAv5D,EAAAmzD,EAAArC,mBACA9wD,EAAAw5D,SAAAxH,CACAjb,GAAA0X,IAAAgL,UAAA1iB,EAAA0X,IAAAiL,wBACA,SAAAngE,EAAAC,GACA,GAAAmgE,GAAA,GAAApgE,EAAA80D,SAAA90D,EAAAqgE,gBAAArgE,EACAsgE,EAAArgE,KAAAk4D,UACA,OAAAn4D,IAAAsgE,SAAA,GAAAA,EAAAxL,YACAsL,EAAAF,SACAE,EAAAF,SAAAI,GACAtgE,EAAAmgE,yBAAA,GAAAngE,EAAAmgE,wBAAAG,MAGA,SAAAtgE,EAAAC,GACA,GAAAA,EACA,KAAAA,GAEA,GADAA,IAAAk4D,WACAl4D,GAAAD,EACA,QAIA,UAiBAyG,GAAAmzD,EAAA3B,cACAxxD,EAAAmzD,EAAApB,aAqGA/xD,EAAA2xD,OAAA,SAAAmI,GAEA,MADAA,GAAAvK,EAAAuK,GAAAnJ,QAAA,qBACArC,EAAAvX,EAAA0X,IAAAC,cAAAoL,KAUA95D,EAAA+5D,UAAA,SAAAD,GAGA,OAFAE,GAAAjjB,EAAA0X,IAAAwL,iBAAAH,GACAhkE,GAAAkK,EAAAlK,KAAA+G,SACArG,EAAA,EAAmBA,EAAAwjE,EAAAvjE,OAAqBD,IACxCV,EAAAd,KAAAs5D,EAAA0L,EAAAxjE,IAEA,OAAAV,IA2BAokE,YAAA,WACA,OAAA9gB,KAAA0Z,GAAA,GAAAA,EAAA3b,GAAAiC,GAAA,CACA,GAAAyV,GAAAiE,EAAA1Z,GACAv0C,EAAAgqD,EAAAhqD,MACA,OAAAgqD,EAAAvxD,OAAAuH,EAAA4sD,iBAAA,OAAA5C,EAAAvxD,QAAAuH,EAAA6sD,YAAA,mBAAA7sD,GAAA6sD,aAAA7sD,EAAA4sD,yBACAqB,GAAA1Z,KAGC,KAyEDoV,EAAAj5D,UAAA2K,KAAA,SAAA2wD,EAAA96D,GACA,GAAA84D,GAAA1xD,KACA0H,EAAAgqD,EAAAhqD,IACA,KAAAgsD,EAAA,CACA,MAAAhsD,EAAAwpD,SACA,OACAU,KAAAlqD,EAAAyqD,UAKA,QAFApvD,GAAA2E,EAAAs1D,WACAr4B,KACAtrC,EAAA,EAAAkhD,EAAAx3C,EAAAzJ,OAA6CD,EAAAkhD,EAAQlhD,IACrDsrC,EAAA5hC,EAAA1J,GAAAy8D,UAAA/yD,EAAA1J,GAAA84D,SAEA,OAAAxtB,GAEA,GAAAysB,EAAAsC,EAAA,WACA,KAAAtyC,UAAA9nB,OAAA,GAKA,MAAAmhD,KAAA,qBAAAiZ,EAAAhC,GAAApX,cAJA,IAAA2iB,KACAA,GAAAvJ,GAAA96D,EACA86D,EAAAuJ,EAKA,OAAAC,KAAAxJ,GACAA,EAAA1Z,GAAAkjB,IACAziB,IAAA,kBAAAyiB,EAAAxL,EAAAgC,EAAAwJ,GAGA,OAAAxL,IAWA7uD,EAAAs6D,MAAA,SAAAhI,GACA,GAAAl9C,GAAA2hC,EAAA0X,IAAA8L,yBACAC,GAAA,EACA5yB,EAAAmP,EAAA0X,IAAAgM,cAAA,MAQA,IAPAnI,EAAA/C,EAAA+C,GACAA,EAAAh2B,MAAA,yBACAg2B,EAAA,QAAAA,EAAA,SACAkI,GAAA,GAEA5yB,EAAA8yB,UAAApI,EACAA,EAAA1qB,EAAAgsB,qBAAA,UAEA,GAAA4G,EACAplD,EAAAk9C,MAEA,MAAAA,EAAAqI,YACAvlD,EAAAo9C,YAAAF,EAAAqI,WAIA,WAAApH,GAAAn+C,IAcApV,EAAA46D,SAAA,WAGA,OAFA5iB,GAAAn7C,MAAAtH,UAAA2D,MAAA3E,KAAAgqB,UAAA,GACAnJ,EAAA2hC,EAAA0X,IAAA8L,yBACA/jE,EAAA,EAAAkhD,EAAAM,EAAAvhD,OAAqCD,EAAAkhD,EAAQlhD,IAAA,CAC7C,GAAAiD,GAAAu+C,EAAAxhD,EACAiD,GAAAoL,MAAApL,EAAAoL,KAAAwpD,UACAj5C,EAAAo9C,YAAA/4D,EAAAoL,MAEApL,EAAA40D,UACAj5C,EAAAo9C,YAAA/4D,GAEA,gBAAAA,IACA2b,EAAAo9C,YAAAxyD,EAAAs6D,MAAA7gE,GAAAoL,MAGA,UAAA0uD,GAAAn+C,IA+DApV,EAAAmzD,EAAArB,OACA9xD,EAAAmzD,EAAA7E,OAwBAK,EAAAp5D,UAAAs5D,GAAA,SAAAx5D,EAAA6K,GACA,GAAA2uD,GAAAiD,EAAAz8D,EAAA8H,KAAA0H,KAEA,OADA3E,IAAA2uD,EAAA3uD,QACA2uD,GASAL,EAAAj5D,UAAAN,SAAA,WAGA,OAFA6sC,MACA+4B,EAAA19D,KAAA0H,KAAA+tD,WACAp8D,EAAA,EAAAkhD,EAAAmjB,EAAApkE,OAAmCD,EAAAkhD,EAAQlhD,IAC3CsrC,EAAAtrC,GAAAwJ,EAAA66D,EAAArkE,GAEA,OAAAsrC,IA2BA0sB,EAAAj5D,UAAA0tD,OAAA,WACA,GAAAnhB,KAEA,OADAkyB,IAAA72D,MAAA2kC,GACAA,EAAA,IAGA8V,IAAAe,GAAA,+BACA,GAAA0hB,GAAAziB,IAAAvb,IACAg+B,KAAApL,UAAAoL,EAAAS,YAAA,OACA,IAAAC,GAAAV,EAAA1J,QAAA,kBAAAqK,GACA,UAAAA,EAAA1gD,eAEA,OAAA2gD,IAAA9jB,GAAA4jB,GACA59D,KAAA0H,KAAA8uD,cAAAuE,YAAAC,iBAAAh7D,KAAA0H,KAAA,MAAAuzD,iBAAA2C,GAEAnM,EAAAzxD,KAAA0H,KAAAw1D,IAGA,IAAAY,KACAC,qBAAA,EACAC,iBAAA,EACApxD,KAAA,EACAqxD,YAAA,EACAC,YAAA,EACArD,MAAA,EACAsD,sBAAA,EACAC,8BAAA,EACAC,gBAAA,EACAC,kBAAA,EACAC,OAAA,EACArpB,UAAA,EACAspB,QAAA,EACAC,oBAAA,EACAC,oBAAA,EACA7X,KAAA,EACA8X,eAAA,EACAC,YAAA,EACAC,OAAA,EACAC,cAAA,EACAC,gBAAA,EACAC,KAAA,EACAC,cAAA,EACAC,YAAA,EACAC,mBAAA,EACAC,eAAA,EACAC,aAAA,EACAC,eAAA,EACAC,cAAA,EACAC,+BAAA,EACAC,6BAAA,EACAC,kBAAA,EACAC,QAAA,EACAC,iBAAA,EACAC,iBAAA,EACAC,OAAA,EACAC,aAAA,EACAC,aAAA,EACAC,eAAA,EACAhK,KAAA,EACAsE,QAAA,EACA2F,SAAA,EACAC,iBAAA,EACAC,kBAAA,EACAC,aAAA,EACAC,eAAA,EACAC,OAAA,EACAC,mBAAA,EACAC,oBAAA,EACAC,iBAAA,EACAC,kBAAA,EACAC,oBAAA,EACAC,iBAAA,EACAC,eAAA,EACAC,cAAA,EACAC,kBAAA,EACAC,iBAAA,EACAC,eAAA,EACAC,WAAA,EACAC,eAAA,EACAC,eAAA,EAGA5mB,KAAAe,GAAA,0BAAA5iD,GACA,GAAAskE,GAAAziB,IAAAvb,KACAn8B,IACAm6D,KAAApL,UAAAoL,EAAAS,YAAA,QACA56D,EAAAm6D,GAAAtkE,CACA,IAAAkiE,GAAAoC,EAAA1J,QAAA,mBAAAC,EAAAoK,GACA,MAAAA,GAAAyD,gBAEA1D,EAAAV,EAAA1J,QAAA,kBAAAqK,GACA,UAAAA,EAAA1gD,eAEA2gD,IAAA9jB,GAAA4jB,GACA59D,KAAA0H,KAAAozD,SAAA,MAAAliE,EAAAoyB,EAAApyB,EAEA64D,EAAAzxD,KAAA0H,KAAA3E,KAGA,SAAAwzD,KAAoB/E,EAAAp5D,WAmBpByK,EAAA0+D,KAAA,SAAA3J,EAAA4J,EAAA/qE,EAAAikD,GACA,GAAA+mB,GAAA,GAAAC,gBACAhnE,EAAA20D,GACA,IAAAoS,EAAA,CACA,GAAArQ,EAAAoQ,EAAA,YACA9mB,EAAAjkD,EACAA,EAAA+qE,EACAA,EAAA,SACS,IAAApQ,EAAAoQ,EAAA,WACT,GAAAhZ,KACA,QAAAvM,KAAAulB,KAAAnpE,eAAA4jD,IACAuM,EAAA3wD,KAAA8pE,mBAAA1lB,GAAA,IAAA0lB,mBAAAH,EAAAvlB,IAEAulB,GAAAhZ,EAAApsB,KAAA,KAgBA,MAdAqlC,GAAAG,KAAAJ,EAAA,aAAA5J,GAAA,GACA4J,IACAC,EAAAI,iBAAA,qCACAJ,EAAAI,iBAAA,qDAEAprE,IACAgkD,IAAA2B,KAAA,aAAA1hD,EAAA,KAAAjE,GACAgkD,IAAA2B,KAAA,aAAA1hD,EAAA,OAAAjE,GACAgkD,IAAA2B,KAAA,aAAA1hD,EAAA,OAAAjE,IAEAgrE,EAAAK,mBAAA,WACA,GAAAL,EAAAM,YACAtnB,IAAA,aAAA//C,EAAA,IAAA+mE,EAAAxnE,OAAAygD,EAAA+mB,IAEA,GAAAA,EAAAM,WACAN,GAEAA,EAAAO,KAAAR,GACAC,KAaA5+D,EAAA07C,KAAA,SAAAqZ,EAAAnhE,EAAAikD,GACA73C,EAAA0+D,KAAA3J,EAAA,SAAA6J,GACA,GAAAxpD,GAAApV,EAAAs6D,MAAAsE,EAAAQ,aACAvnB,GAAAjkD,EAAAW,KAAAsjD,EAAAziC,GAAAxhB,EAAAwhB,KAGA,IAAAiqD,IAAA,SAAAC,GACA,GAAAC,GAAAD,EAAAE,wBACA/Q,EAAA6Q,EAAA3L,cACAE,EAAApF,EAAAoF,KACA4L,EAAAhR,EAAAmL,gBACA8F,EAAAD,EAAAC,WAAA7L,EAAA6L,WAAA,EAAAC,EAAAF,EAAAE,YAAA9L,EAAA8L,YAAA,EACAr+C,EAAAi+C,EAAAj+C,KAAAzO,EAAAohD,IAAA2L,aAAAH,EAAAI,WAAAhM,EAAAgM,WAAAH,EACAr+C,EAAAk+C,EAAAl+C,MAAAxO,EAAAohD,IAAA6L,aAAAL,EAAAM,YAAAlM,EAAAkM,YAAAJ,CACA,QACA7hE,EAAAwjB,EACA5mB,EAAA2mB,GAsDA,OAvCArhB,GAAAggE,kBAAA,SAAAtlE,EAAAoD,GACA,GAAAi1D,GAAA51D,KAEA8iE,GADAlN,EAAAmN,OACAnpB,EAAA0X,IAAA0R,iBAAAzlE,EAAAoD,GACA,IAAAi5C,EAAAkd,IAAAj5C,OAAA,OAAAilD,EAAAjN,QAAA,CACA,GAAAoN,GAAAf,GAAAY,GACAI,EAAAJ,EAAAK,eACAD,GAAA3lE,IAAA0lE,EAAA1lE,EACA2lE,EAAAviE,IAAAsiE,EAAAtiE,EACAuiE,EAAA5rB,MAAA4rB,EAAAtY,OAAA,CACA,IAAAwY,GAAAN,EAAAO,oBAAAH,EAAA,KACAE,GAAA9pE,SACAwpE,EAAAM,IAAA9pE,OAAA,IAGA,MAAAwpE,GAGA3R,EAAA2R,GAFA,MAmBAjgE,EAAAygE,OAAA,SAAArrD,GACAA,EAAApV,EAAAwuD,EAAAG,EAAA5X,EAAAwc,IAEAxc,EAAAkd,IAAAj0D,OACAA,GACCia,QAAA9c,KAeD6C,GAAAygE,OAAA,SAAAzgE,EAAAwuD,EAAAG,EAAA5X,EAAAwc,GA2EA,QAAAmN,GAAA7R,EAAA6B,GACA,SAAAA,EAAA,CACA,GAAAiQ,IAAA,CAQA,IANAjQ,EADA,kBAAA7B,EAAAvxD,MAAA,kBAAAuxD,EAAAvxD,KACAuxD,EAAAhqD,KAAAwqD,aAAA,qBACa,WAAAR,EAAAvxD,KACbuxD,EAAAhqD,KAAAwqD,aAAA,oBAEAR,EAAAhqD,KAAAwqD,aAAA,cAEAqB,EACA,UAAA1wD,GAAAkxD,MAEAR,GAAA1wD,EAAAmzD,EAAA1C,oBAAAC,OAKAA,GAHA1wD,EAAAmzD,EAAAoG,YAAAvgB,KAAA0X,GAGAnB,EAAAmB,GAAAC,QAAA,gBAA+C9B,EAAAsE,EAAA7yD,WAAA6nB,GAF/CnoB,EAAAmzD,EAAA1C,oBAAAC,GAIAnC,EAAAmC,EAAA,WACAA,EAAA1wD,EAAAL,KAAAK,EAAAL,KAAA5B,SAAAxJ,KAAAm8D,GAAAnB,EAAAmB,IAEA7B,EAAAsE,EAAA7yD,UAAAowD,CAEA,IAAA/1D,GAAAqF,EAAAmzD,EAAArC,iBAAAJ,EAAA7B,EAAAsD,QAAA,GACA,OAAAwO,GACAhmE,OAEAk0D,EAAA+R,OAAAjmE,GAmWA,QAAAkmE,GAAAhS,GAMA,QAAAiS,GAAAC,EAAA1rE,GACA,GAAA6wB,GAAA0oC,EAAAmS,EAAAl8D,KAAAxP,EACA6wB,QAAAoW,MAAAy4B,GACA7uC,OAAA,GACAA,GAAA,KAAAA,EAAAnZ,WACAmZ,IAAA+oC,UAAA,GAIA/oC,IACA86C,EAAA96C,IAAA86C,EAAA96C,QAAA+tB,OAAA,SAAAp8C,GACA,GAAAqI,KACAA,GAAA7K,GAAA4rE,IAAAppE,GACA+2D,EAAAmS,EAAAl8D,KAAA3E,OAIA,QAAAghE,GAAAH,GACA,GAAA76C,GAAA0oC,EAAAmS,EAAAl8D,KAAA,aACAqhB,IAAA,KAAAA,EAAAnZ,WACAmZ,IAAA+oC,UAAA,GAIA/oC,IACA86C,EAAA96C,IAAA86C,EAAA96C,QAAA+tB,OAAA,SAAAp8C,GACAkpE,EAAA7gE,KAAA,iBAAArI,OAIA,OAlCAkpE,GADAI,EAAAtS,EAAAkL,UAAA,KAEAhF,EAAA,8BACAqM,KACAJ,KA+BAxqE,EAAA,EAAAkhD,EAAAypB,EAAA1qE,OAAwCD,EAAAkhD,EAAQlhD,IAAA,CAChDuqE,EAAAI,EAAA3qE,GACAsqE,EAAAC,EAAA,QACAD,EAAAC,EAAA,UACAD,EAAAC,EAAA,UACAD,EAAAC,EAAA,QACAD,EAAAC,EAAA,aACAG,EAAAH,EACA,IAAAM,GAAAzS,EAAAmS,EAAAl8D,KAAA,KACAw8D,KACAzS,EAAAmS,EAAAl8D,MAA4BhN,GAAAkpE,EAAAlpE,KAC5BupE,EAAApsE,MACAssE,IAAAD,EACAxpE,GAAAkpE,EAAAlpE,MAIA,IAAArB,EAAA,EAAAkhD,EAAA0pB,EAAA3qE,OAAoCD,EAAAkhD,EAAQlhD,IAAA,CAC5C,GAAA+qE,GAAAP,EAAAI,EAAA5qE,GAAA8qE,IACA,IAAAC,EACA,OAAAvnE,GAAA,EAAAs+C,EAAAipB,EAAA9qE,OAA+CuD,EAAAs+C,EAAQt+C,IACvDunE,EAAAvnE,GAAAonE,EAAA5qE,GAAAqB,KA8HA,QAAAqB,GAAAsoE,EAAAC,EAAArsD,GACA,gBAAAgkD,GACA,GAAAvgC,GAAAugC,EAAAlgE,MAAAsoE,EAAAC,EAIA,OAHA,IAAA5oC,EAAApiC,SACAoiC,IAAA,IAEAzjB,IAAAyjB,MAyQA,QAAA96B,GAAAT,GACA,kBACA,GAAAu7B,GAAAv7B,EAAA,IAAAH,KAAAG,KAAA,GACA4C,EAAA/C,KAAA0H,KAAAs1D,WACAuH,EAAAvkE,KAAA0H,KAAA+tD,UACA,IAAAt1D,EACA,OAAA9G,GAAA,EAAAkhD,EAAAx3C,EAAAzJ,OAAiDD,EAAAkhD,EAAQlhD,IACzDqiC,GAAA,IAAA34B,EAAA1J,GAAAnB,KAAA,KACA6K,EAAA1J,GAAAT,MAAA46D,QAAA,eAGA,IAAA+Q,EAAAjrE,OAAA,CAEA,IADA6G,IAAAu7B,GAAA,KACAriC,EAAA,EAAAkhD,EAAAgqB,EAAAjrE,OAA6CD,EAAAkhD,EAAQlhD,IACrD,GAAAkrE,EAAAlrE,GAAA63D,SACAx1B,GAAA6oC,EAAAlrE,GAAA84D,UACqB,GAAAoS,EAAAlrE,GAAA63D,WACrBx1B,GAAAy1B,EAAAoT,EAAAlrE,IAAAuH,WAGAT,KAAAu7B,GAAA,KAAA17B,KAAAG,KAAA,SAEAA,KAAAu7B,GAAA,KAEA,OAAAA,IAx6BA,GAAA8oC,GAAAnT,EAAAj5D,UACAg5D,EAAAvuD,EAAAuuD,GACAgB,EAAAzX,OACAka,EAAAhyD,EAAAw5D,SACA5K,EAAA5uD,EAAAmzD,EAAAvE,EACAkD,EAAA9xD,EAAAmzD,EAAArB,KACAN,EAAAxxD,EAAAmzD,EAAA3B,YACAra,EAAA,iBACAmX,EAAAtuD,EAAAmzD,EAAA7E,IA0BAqT,GAAAxP,QAAA,SAAAyP,GACA,IAAA5hE,EAAAkxD,SAAAlxD,EAAAL,KACA,MAAAxC,MAAA0H,KAAAstD,SAEA,IAAAtD,GAAA1xD,KACAxC,EAAA,GAAAqF,GAAAkxD,MACA,IAAArC,EAAAgT,QACA,MAAA7hE,GAAAmzD,EAAAoM,KAEA,aAAA1Q,EAAAvxD,MAIA,GAHAskE,IACAjnE,IAAAue,IAAA21C,EAAAvuD,YAAAwhE,YAAA19B,UAAAyqB,EAAA3uD,KAAA,QAAA2uD,EAAA3uD,KAAA,WAEA2uD,EAAAkT,SACAlT,IAAAkT,aACa,CACb,GAAAC,GAAAnT,EAAA3uD,KAAA,aACA2uD,KAAAkT,SAAAlT,EAAAhqD,KAAA8uD,cAAAsO,eAAAD,EAAA/S,UAAA+S,EAAAjtE,QAAA,SAGA,GAAAo+D,GAAAtE,EAAAsE,EACA+O,EAAAliE,EAAAL,KAAA9J,IAAAg5D,EAAAvxD,OAAA0C,EAAAL,KAAA9J,IAAAssE,KACA,KACA,MAAAP,IACAzO,EAAAiP,OAAAF,EAAAliE,EAAAL,KAAAwyD,QAAAtD,EAAAwT,SAAAH,EAAArT,IAAA7uD,EAAAmzD,EAAAoM,IAAA1Q,EAAAhqD,KAAAstD,WACAnyD,EAAAmzD,EAAAoM,IAAApM,EAAAiP,UAEAvT,EAAAwT,SAAAH,EAAArT,GACAA,EAAA+R,OAAA/R,EAAAvuD,YAAAwhE,YACA3O,EAAApC,KAAA/wD,EAAAL,KAAAwyD,QAAAnyD,EAAAL,KAAAU,IAAAwuD,EAAAwT,SAAA1nE,EAAAue,IAAA21C,EAAA+R,UACA5gE,EAAAmzD,EAAAoM,IAAApM,EAAApC,OAES,MAAA98D,GAET,MAAA+L,GAAAmzD,EAAAoM,OAGA,IAAA+C,GAAA,WACA,MAAAnlE,MAAAq7D,OAsDAmJ,GAAArhE,UAAA,SAAAowD,GACA,GAAAyC,GAAAh2D,KAAAg2D,CACA,UAAAzC,EAAA,CAUA,IATA,GAKAl6D,GALA+rE,EAAAplE,KACAqlE,EAAA,GAAAxiE,GAAAkxD,OAAA/zD,KAAA0H,KAAA49D,UACAC,EAAAhC,EAAAvjE,MACA2S,GAAA4yD,GACA/nE,EAAA,GAAAqF,GAAAkxD,OAEAyR,EAAAD,EAAAE,oBACApK,EAAAjJ,EAAAmT,IAAAnT,EAAApyD,KAAAyjE,QACArR,EAAA4D,EAAA7yD,WAAAqiE,EACA,OAAAJ,EAAAjlE,OAAAilE,IAAAlpE,WACAyW,EAAA9a,KAAA0rE,EAAA6B,GAGA,KADA/rE,EAAAsZ,EAAArZ,OACAD,KACAmE,EAAAue,IAAApJ,EAAAtZ,GAEA,QACAgiE,SACAj4D,aAAAiiE,EACAK,YAAAloE,EACAmnE,YAAAY,EACAI,WAAAN,EAAA7pD,QAAAO,IAAAwpD,EAAA1/B,UACAw/B,SAAAI,oBACAG,MAAApoE,EAAAioE,oBACAF,MAAAC,EACA5kE,SAAAukE,GAoBA,MAjBA5R,aAAA1wD,GAAAkxD,QACA/zD,KAAAyjE,OAAAlQ,EACAvzD,KAAAg2D,EAAA7yD,UAAAowD,EAAAkS,qBAEAlC,EAAAvjE,KAAAuzD,GAGAvzD,KAAA0H,OACA,kBAAA1H,KAAAG,MAAA,kBAAAH,KAAAG,KACAsxD,EAAAzxD,KAAA0H,MAA8Bm+D,kBAAA7lE,KAAAyjE,SACjB,WAAAzjE,KAAAG,KACbsxD,EAAAzxD,KAAA0H,MAA8Bo+D,iBAAA9lE,KAAAyjE,SAE9BhS,EAAAzxD,KAAA0H,MAA8BvE,UAAAnD,KAAAyjE,UAI9BzjE,MAUAwkE,EAAAtoE,OAAA,WACA,MAAAi1D,GAAAnxD,KAAA0H,KAAA6sD,aAiBAiQ,EAAAuB,OAAAvB,EAAAzoD,IAAA,SAAA21C,GACA,GAAAA,EAAA,CACA,UAAAA,EAAAvxD,KAAA,CACA,GAAAyjE,GAAA5jE,IAIA,OAHA0xD,GAAAzkB,QAAA,SAAAykB,GACAkS,EAAA7nD,IAAA21C,KAEA1xD,KAEA0xD,EAAAP,EAAAO,GACA1xD,KAAA0H,KAAA2tD,YAAA3D,EAAAhqD,MACAgqD,EAAAkE,MAAA51D,KAAA41D,MAEA,MAAA51D,OAWAwkE,EAAAwB,SAAA,SAAAtU,GAKA,MAJAA,KACAA,EAAAP,EAAAO,GACAA,EAAAqU,OAAA/lE,OAEAA,MAWAwkE,EAAAyB,QAAA,SAAAvU,GACA,GAAAA,EAAA,CACA,UAAAA,EAAAvxD,KAAA,CACA,GACA+lE,GADAtC,EAAA5jE,IAUA,OARA0xD,GAAAzkB,QAAA,SAAAykB,GACAwU,EACAA,EAAA1M,MAAA9H,GAEAkS,EAAAqC,QAAAvU,GAEAwU,EAAAxU,IAEA1xD,KAEA0xD,EAAAP,EAAAO,EACA,IAAAx1D,GAAAw1D,EAAAx1D,QACA8D,MAAA0H,KAAAy+D,aAAAzU,EAAAhqD,KAAA1H,KAAA0H,KAAA81D,YACAx9D,KAAA+b,KAAA/b,KAAA+b,MACA21C,EAAAkE,MAAA51D,KAAA41D,MACA51D,KAAA9D,UAAA8D,KAAA9D,SAAA6f,MACA7f,KAAA6f,MAEA,MAAA/b,OAWAwkE,EAAA4B,UAAA,SAAA1U,GAGA,MAFAA,GAAAP,EAAAO,GACAA,EAAAuU,QAAAjmE,MACAA,MAWAwkE,EAAAjL,OAAA,SAAA7H,GACA,UAAAA,EAAAvxD,KAAA,CACA,GAAAyjE,GAAA5jE,IAOA,OANA0xD,GAAAzkB,QAAA,SAAAykB,GACA,GAAAx1D,GAAAw1D,EAAAx1D,QACA0nE,GAAAl8D,KAAA6sD,WAAA4R,aAAAzU,EAAAhqD,KAAAk8D,EAAAl8D,MACAxL,KAAA6f,QAEA/b,KAAA9D,SAAA6f,MACA/b,KAEA0xD,EAAAP,EAAAO,EACA,IAAAx1D,GAAAw1D,EAAAx1D,QAKA,OAJA8D,MAAA0H,KAAA6sD,WAAA4R,aAAAzU,EAAAhqD,KAAA1H,KAAA0H,MACA1H,KAAA9D,UAAA8D,KAAA9D,SAAA6f,MACA7f,KAAA6f,MACA21C,EAAAkE,MAAA51D,KAAA41D,MACA51D,MAWAwkE,EAAAhL,MAAA,SAAA9H,GACAA,EAAAP,EAAAO,EACA,IAAAx1D,GAAAw1D,EAAAx1D,QASA,OARA8D,MAAA0H,KAAA2+D,YACArmE,KAAA0H,KAAA6sD,WAAA4R,aAAAzU,EAAAhqD,KAAA1H,KAAA0H,KAAA2+D,aAEArmE,KAAA0H,KAAA6sD,WAAAc,YAAA3D,EAAAhqD,MAEA1H,KAAA9D,UAAA8D,KAAA9D,SAAA6f,MACA7f,KAAA6f,MACA21C,EAAAkE,MAAA51D,KAAA41D,MACA51D,MAWAwkE,EAAA2B,aAAA,SAAAzU,GACAA,EAAAP,EAAAO,EACA,IAAAx1D,GAAA8D,KAAA9D,QAKA,OAJAw1D,GAAAhqD,KAAA6sD,WAAA4R,aAAAnmE,KAAA0H,KAAAgqD,EAAAhqD,MACA1H,KAAA41D,MAAAlE,EAAAkE,MACA15D,KAAA6f,MACA21C,EAAAx1D,UAAAw1D,EAAAx1D,SAAA6f,MACA/b,MAWAwkE,EAAA8B,YAAA,SAAA5U,GACAA,EAAAP,EAAAO,EACA,IAAAx1D,GAAA8D,KAAA9D,QAKA,OAJAw1D,GAAAhqD,KAAA6sD,WAAA4R,aAAAnmE,KAAA0H,KAAAgqD,EAAAhqD,KAAA2+D,aACArmE,KAAA41D,MAAAlE,EAAAkE,MACA15D,KAAA6f,MACA21C,EAAAx1D,UAAAw1D,EAAAx1D,SAAA6f,MACA/b,MASAwkE,EAAA+B,OAAA,WACA,GAAArqE,GAAA8D,KAAA9D,QAKA,OAJA8D,MAAA0H,KAAA6sD,YAAAv0D,KAAA0H,KAAA6sD,WAAAe,YAAAt1D,KAAA0H,YACA1H,MAAA41D,MACA51D,KAAA0kE,SAAA,EACAxoE,KAAA6f,MACA/b,MAWAwkE,EAAAhQ,OAAA,SAAAmI,GAEA,MADAA,GAAAvK,EAAAuK,GAAAnJ,QAAA,qBACArC,EAAAnxD,KAAA0H,KAAA6pD,cAAAoL,KAWA6H,EAAA5H,UAAA,SAAAD,GAGA,OAFAE,GAAA78D,KAAA0H,KAAAo1D,iBAAAH,GACAhkE,GAAAkK,EAAAlK,KAAA+G,SACArG,EAAA,EAAuBA,EAAAwjE,EAAAvjE,OAAqBD,IAC5CV,EAAAd,KAAAs5D,EAAA0L,EAAAxjE,IAEA,OAAAV,IAYA6rE,EAAAgC,KAAA,SAAAzjE,EAAAnK,GAIA,MAHA,OAAAA,IACAA,EAAAoH,KAAA+C,UAEA8xD,EAAA70D,KAAA+C,EAAAnK,IAWA4rE,EAAAiC,IAAA,WACA,GAAAA,GACA/rE,EAAAsF,KAAA0H,KAAAhN,EAiBA,OAhBAA,KACAA,EAAAsF,KAAAtF,GACA+2D,EAAAzxD,KAAA0H,MACAhN,QAKA+rE,EAFA,kBAAAzmE,KAAAG,MAAA,kBAAAH,KAAAG,MACA,WAAAH,KAAAG,KACAw0D,EAAA30D,KAAAG,KAAAH,KAAA0H,KAAA6sD,YAEAI,EAAA,MAAA30D,KAAA0H,KAAA6sD,YAEA9C,EAAAgV,EAAA/+D,MACAg/D,aAAA,IAAAhsE,IAEA+rE,EAAA7B,SAAA5kE,KACAymE,GAwEAjC,EAAAhpD,MAAA,WACA,GAAAA,GAAA21C,EAAAnxD,KAAA0H,KAAAi/D,WAAA,GAMA,OALAlV,GAAAj2C,EAAA9T,KAAA,OACA+pD,EAAAj2C,EAAA9T,MAA2BhN,GAAA8gB,EAAA9gB,KAE3BgpE,EAAAloD,GACAA,EAAA8qD,YAAAtmE,MACAwb,GAUAgpD,EAAAoC,OAAA,WACA,GAAAlS,GAAAL,EAAAr0D,KAEA,OADA00D,GAAAW,YAAAr1D,KAAA0H,MACA1H,MAyBAwkE,EAAA3mC,QAAA2mC,EAAAqC,UAAA,SAAAtpE,EAAAoD,EAAA22C,EAAAsT,GACA,GAAAntD,GAAAk3D,EAAA,UAAAN,EAAAr0D,MAoBA,OAnBA,OAAAzC,IACAA,EAAAyC,KAAAg1D,WAEA5D,EAAA7zD,EAAA,gBAAAA,KACAoD,EAAApD,EAAAoD,EACA22C,EAAA/5C,EAAA+5C,MACAsT,EAAArtD,EAAAqtD,OACArtD,OAEAk0D,EAAAh0D,EAAAiK,MACAnK,IACAoD,IACA22C,QACAsT,SACAkc,aAAA,iBACApsE,GAAA+C,EAAA/C,GACAqsE,SAAAxpE,EAAAoD,EAAA22C,EAAAsT,GAAAxuB,KAAA,OAEA3+B,EAAAiK,KAAA2tD,YAAAr1D,KAAA0H,MACAjK,GAqBA+mE,EAAA1E,OAAA,SAAAviE,EAAAoD,EAAA22C,EAAAsT,EAAAoc,EAAAC,GACA,GAAAxpE,GAAAk3D,EAAA,SAAAN,EAAAr0D,MAsBA,OArBA,OAAAzC,IACAA,EAAAyC,KAAAg1D,WAEA5D,EAAA7zD,EAAA,gBAAAA,KACAoD,EAAApD,EAAAoD,EACA22C,EAAA/5C,EAAA+5C,MACAsT,EAAArtD,EAAAqtD,OACAoc,EAAAzpE,EAAAypE,MAAAzpE,EAAAs6C,GACAovB,EAAA1pE,EAAA0pE,MAAA1pE,EAAAu6C,GACAv6C,OAEAk0D,EAAAh0D,EAAAiK,MACAq/D,SAAAxpE,EAAAoD,EAAA22C,EAAAsT,GAAAxuB,KAAA,KACA8qC,YAAA5vB,EACA6vB,aAAAvc,EACAwc,OAAA,OACAJ,QAAA,EACAC,QAAA,EACAvsE,GAAA+C,EAAA/C,KAEA+C,EAAAiK,KAAA2tD,YAAAr1D,KAAA0H,MACAjK,EAYA,IAAA4pE,GAAA,SAAAtkE,EAAA4P,EAAAw9C,EAAA15D,GACA,kBAAA05D,MAAA72D,SACA7C,EAAA05D,EACAA,EAAA3B,EAAA8B,QAEAtwD,KAAA+C,OACA/C,KAAAyvD,IAAA98C,EACAw9C,IAAAnwD,KAAAmwD,UACA15D,IAAAuJ,KAAAvJ,YAEAoM,GAAAmzD,EAAAqR,YAaAxkE,EAAAykE,UAAA,SAAAvkE,EAAA4P,EAAAw9C,EAAA15D,GACA,UAAA4wE,GAAAtkE,EAAA4P,EAAAw9C,EAAA15D,IAiBA+tE,EAAA+C,OAAA,WACA,GAAA7V,GAAA1xD,KACA07B,IACA,QAAAhhC,KAAAg3D,GAAAqE,MAAArE,EAAAqE,MAAA/b,GAAAt/C,KACA,SAAA0B,GACAs/B,EAAA7jC,MACAw4D,KAAA,GAAAgX,GAAAjrE,EAAAorE,OAAAprE,EAAAqzD,IAAArzD,EAAA+zD,OAAA/zD,EAAAqrE,WACAjZ,KAAApyD,EACAsrE,UAAAtrE,EAAAnC,SACAA,OAAA,SAAA8uB,GACA,MAAA3sB,GAAAnC,OAAA8uB,IAEA+wB,KAAA,WACA19C,EAAA09C,WAGa4X,EAAAqE,MAAAr7D,GAEb,OAAAghC,IAgCA74B,EAAA8kE,QAAA,SAAAtD,EAAAC,EAAAsD,EAAAj1D,EAAAw9C,EAAA15D,GACA,kBAAA05D,MAAA72D,SACA7C,EAAA05D,EACAA,EAAA3B,EAAA8B,OAEA,IAAAf,GAAAf,EAAA+B,OACAF,EAAA7B,EAAA6V,EAAAC,EAAA/U,IAAA58C,EAAA67C,EAAA+B,KAAAqX,EAAAzX,EAEA,OADA15D,IAAAgkD,IAAA2B,KAAA,eAAAiU,EAAA31D,GAAAjE,GACA45D,GAUAmU,EAAA1qB,KAAA,WAEA,OADAic,GAAA/1D,KAAAunE,SACAluE,EAAA,EAAAkhD,EAAAwb,EAAAz8D,OAA0CD,EAAAkhD,EAAQlhD,IAClD08D,EAAA18D,GAAAygD,MAEA,OAAA95C,OAcAwkE,EAAAmD,QAAA,SAAAjsB,EAAA/oC,EAAAw9C,EAAA15D,GACA,kBAAA05D,MAAA72D,SACA7C,EAAA05D,EACAA,EAAA3B,EAAA8B,QAEA5U,YAAA2rB,KACA5wE,EAAAilD,EAAAjlD,SACA05D,EAAAzU,EAAAyU,OACAx9C,EAAAw9C,EAAAV,IACA/T,IAAA34C,KAEA,IAA6CshE,GAAAC,EAAArsD,EAAAkvC,EAA7C0gB,KAAAC,KAAAC,KACArW,EAAA1xD,IACA,QAAAi8C,KAAAP,GAAA,GAAAA,EAAA1B,GAAAiC,GAAA,CACAyV,EAAAsW,OACA7gB,EAAAuK,EAAAsW,MAAA/rB,EAAAmW,EAAA1W,EAAAO,KACAooB,EAAAld,EAAAkd,KACAC,EAAAnd,EAAAmd,GACArsD,EAAAkvC,EAAAlvC,IAEAosD,GAAA3S,EAAA3uD,KAAAk5C,GACAqoB,GAAA5oB,EAAAO,GAEA,IAAAnjB,GAAAs4B,EAAAiT,EAAA,SAAAA,EAAA/qE,OAAA,CACAyuE,GAAA9rB,GAAAlgD,EAAA8rE,EAAAvuE,OAAAuuE,EAAAvuE,OAAAw/B,EAAA7gB,GACA4vD,IAAA/wB,OAAAutB,GACAyD,IAAAhxB,OAAAwtB,GAEA,GAAA/U,GAAAf,EAAA+B,OACAF,EAAA7B,EAAAqZ,EAAAC,EAAAvY,IAAA58C,EAAA67C,EAAA+B,KAAA,SAAAxnC,GACA,GAAAhmB,KACA,QAAAk5C,KAAA8rB,KAAA/tB,GAAAiC,KACAl5C,EAAAk5C,GAAA8rB,EAAA9rB,GAAAlzB,GAEA2oC,GAAA3uD,SACaotD,EAYb,OAXAuB,GAAAqE,MAAA1F,EAAA31D,IAAA21D,EACAA,EAAAmX,OAAA9rB,EACA2U,EAAAoX,UAAAhxE,EACAgkD,IAAA,oBAAAiX,EAAAh3D,GAAA21D,GACA5V,IAAA2B,KAAA,eAAAiU,EAAA31D,GAAA,iBACAg3D,GAAAqE,MAAA1F,EAAA31D,IACAjE,KAAAW,KAAAs6D,KAEAjX,IAAA2B,KAAA,aAAAiU,EAAA31D,GAAA,iBACAg3D,GAAAqE,MAAA1F,EAAA31D,MAEAg3D,EAEA,IAAAuW,KAwBAzD,GAAAlqE,KAAA,SAAA2hD,EAAArjD,GACA,GAAA0B,GAAA2tE,EAAAjoE,KAAAtF,IAAAutE,EAAAjoE,KAAAtF,OACA,OAAA0mB,UAAA9nB,OAEA,MADAmhD,KAAA,iBAAAz6C,KAAAtF,GAAAsF,KAAA1F,EAAA,MACAA,CAEA,OAAA8mB,UAAA9nB,OAAA,CACA,GAAAuJ,EAAAuuD,GAAAnV,EAAA,WACA,OAAA5iD,KAAA4iD,KAAAjC,GAAA3gD,IACA2G,KAAA1F,KAAAjB,EAAA4iD,EAAA5iD,GAEA,OAAA2G,MAGA,MADAy6C,KAAA,iBAAAz6C,KAAAtF,GAAAsF,KAAA1F,EAAA2hD,MACA3hD,EAAA2hD,GAIA,MAFA3hD,GAAA2hD,GAAArjD,EACA6hD,IAAA,iBAAAz6C,KAAAtF,GAAAsF,KAAApH,EAAAqjD,GACAj8C,MAWAwkE,EAAA0D,WAAA,SAAAjsB,GAMA,MALA,OAAAA,EACAgsB,EAAAjoE,KAAAtF,OAEAutE,EAAAjoE,KAAAtF,WAAAutE,GAAAjoE,KAAAtF,IAAAuhD,GAEAj8C,MAiBAwkE,EAAA2D,SAAA3D,EAAA5jE,WAAA,GAQA4jE,EAAA4D,SAAAxnE,IA4BA4jE,EAAA6D,UAAA,WACA,GAAAvrD,eAAAwrD,KAAA,CACA,GAAAtU,GAAAh0D,KAAAg1D,UACAG,EAAAtyD,EAAAg1D,OAAA,0LACAt6D,GAAAy2D,EAAAz2D,EAAA40C,QAAA,GACAxxC,GAAAqzD,EAAArzD,EAAAwxC,QAAA,GACAmF,OAAA0c,EAAA1c,MAAAnF,QAAA,GACAyY,QAAAoJ,EAAApJ,OAAAzY,QAAA,GACAo2B,SAAAvoE,KAAAmoE,YAEA,oCAAuCG,KAAAE,SAAA7G,mBAAAxM,OASvCiB,EAAAh+D,UAAAo8D,OAAAgQ,EAAAhQ,OAOA4B,EAAAh+D,UAAAwkE,UAAA4H,EAAA5H,YAgBA/5D,EAAAygE,OAAA,SAAAzgE,EAAAwuD,EAAAG,EAAA5X,EAAAwc,GAKA,QAAArC,GAAA33D,EAAAC,EAAAlB,EAAAgW,EAAAra,EAAAmhB,GACA,aAAA5b,GAAA,sBAAAq2D,EAAAt7D,KAAAgF,IACA4D,KAAA5D,MACA4D,KAAA3D,EAAAD,EAAAC,EACA2D,KAAA7E,EAAAiB,EAAAjB,EACA6E,KAAAmR,EAAA/U,EAAA+U,EACAnR,KAAAlJ,EAAAsF,EAAAtF,OACAkJ,KAAAiY,EAAA7b,EAAA6b,SAGA,MAAA7b,GACA4D,KAAA5D,KACA4D,KAAA3D,KACA2D,KAAA7E,KACA6E,KAAAmR,KACAnR,KAAAlJ,KACAkJ,KAAAiY,OAEAjY,KAAA5D,EAAA,EACA4D,KAAA3D,EAAA,EACA2D,KAAA7E,EAAA,EACA6E,KAAAmR,EAAA,EACAnR,KAAAlJ,EAAA,EACAkJ,KAAAiY,EAAA,IA3BA,GAAAy6C,GAAAv6D,OAAAC,UAAAwI,SACAwxD,EAAAzX,OACAyY,EAAAxzD,KACAorB,EAAA,IA2BA,SAAAy9C,GAgJA,QAAAC,GAAAtsE,GACA,MAAAA,GAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAEA,QAAA6uC,GAAA7uC,GACA,GAAAusE,GAAAvV,EAAAtyB,KAAA4nC,EAAAtsE,GACAA,GAAA,KAAAA,EAAA,IAAAusE,GACAvsE,EAAA,KAAAA,EAAA,IAAAusE,GAvIAF,EAAA1sD,IAAA,SAAA3f,EAAAC,EAAAlB,EAAAgW,EAAAra,EAAAmhB,GACA,GAGA1a,GAAAoD,EAAA6U,EAAAkmB,EAHAiJ,aACAnnC,IAAAwC,KAAA5D,EAAA4D,KAAA7E,EAAA6E,KAAAlJ,IAAAkJ,KAAA3D,EAAA2D,KAAAmR,EAAAnR,KAAAiY,IAAA,QACAwrD,IAAArnE,EAAAjB,EAAArE,IAAAuF,EAAA8U,EAAA8G,IAAA,OAOA,KAJA7b,eAAA23D,KACA0P,IAAArnE,MAAAjB,EAAAiB,EAAAtF,IAAAsF,EAAAC,EAAAD,EAAA+U,EAAA/U,EAAA6b,IAAA,SAGA1a,EAAA,EAAuBA,EAAA,EAAOA,IAC9B,IAAAoD,EAAA,EAA2BA,EAAA,EAAOA,IAAA,CAElC,IADA+6B,EAAA,EACAlmB,EAAA,EAA+BA,EAAA,EAAOA,IACtCkmB,GAAAl+B,EAAAD,GAAAiY,GAAAiuD,EAAAjuD,GAAA7U,EAEAgkC,GAAApnC,GAAAoD,GAAA+6B,EASA,MANA17B,MAAA5D,EAAAuoC,EAAA,MACA3kC,KAAA3D,EAAAsoC,EAAA,MACA3kC,KAAA7E,EAAAwpC,EAAA,MACA3kC,KAAAmR,EAAAwzB,EAAA,MACA3kC,KAAAlJ,EAAA6tC,EAAA,MACA3kC,KAAAiY,EAAA0sB,EAAA,MACA3kC,MASAyoE,EAAA5iC,OAAA,WACA,GAAAvuC,GAAA0I,KACAzC,EAAAjG,EAAA8E,EAAA9E,EAAA6Z,EAAA7Z,EAAA+E,EAAA/E,EAAA6D,CACA,WAAA44D,GAAAz8D,EAAA6Z,EAAA5T,GAAAjG,EAAA+E,EAAAkB,GAAAjG,EAAA6D,EAAAoC,EAAAjG,EAAA8E,EAAAmB,GAAAjG,EAAA6D,EAAA7D,EAAA2gB,EAAA3gB,EAAA6Z,EAAA7Z,EAAAR,GAAAyG,GAAAjG,EAAA+E,EAAA/E,EAAAR,EAAAQ,EAAA8E,EAAA9E,EAAA2gB,GAAA1a,IASAkrE,EAAAjtD,MAAA,WACA,UAAAu4C,GAAA/zD,KAAA5D,EAAA4D,KAAA3D,EAAA2D,KAAA7E,EAAA6E,KAAAmR,EAAAnR,KAAAlJ,EAAAkJ,KAAAiY,IAUAwwD,EAAAxhC,UAAA,SAAA1pC,EAAAoD,GACA,MAAAX,MAAA+b,IAAA,QAAAxe,EAAAoD,IAaA8nE,EAAAtmC,MAAA,SAAA5kC,EAAAoD,EAAAk3C,EAAAC,GAKA,MAJA,OAAAn3C,MAAApD,IACAs6C,GAAAC,IAAA93C,KAAA+b,IAAA,QAAA87B,EAAAC,GACA93C,KAAA+b,IAAAxe,EAAA,IAAAoD,EAAA,MACAk3C,GAAAC,IAAA93C,KAAA+b,IAAA,SAAA87B,GAAAC,GACA93C,MAWAyoE,EAAAvhC,OAAA,SAAA9qC,EAAAmB,EAAAoD,GACAvE,EAAAyG,EAAAskC,IAAA/qC,GACAmB,KAAA,EACAoD,KAAA,CACA,IAAAwgC,IAAAiyB,EAAAjyB,IAAA/kC,GAAA+1C,QAAA,GACAjR,GAAAkyB,EAAAlyB,IAAA9kC,GAAA+1C,QAAA,EAEA,OADAnyC,MAAA+b,IAAAolB,EAAAD,KAAAC,EAAA5jC,EAAAoD,GACAX,KAAA+b,IAAA,SAAAxe,GAAAoD,IAWA8nE,EAAAlrE,EAAA,SAAAA,EAAAoD,GACA,MAAApD,GAAAyC,KAAA5D,EAAAuE,EAAAX,KAAA7E,EAAA6E,KAAAlJ,GAWA2xE,EAAA9nE,EAAA,SAAApD,EAAAoD,GACA,MAAApD,GAAAyC,KAAA3D,EAAAsE,EAAAX,KAAAmR,EAAAnR,KAAAiY,GAEAwwD,EAAA/vE,IAAA,SAAAW,GACA,OAAA2G,KAAAoyD,EAAAwW,aAAA,GAAAvvE,IAAA84C,QAAA,IAEAs2B,EAAA7nE,SAAA,WACA,iBAAAZ,KAAAtH,IAAA,GAAAsH,KAAAtH,IAAA,GAAAsH,KAAAtH,IAAA,GAAAsH,KAAAtH,IAAA,GAAAsH,KAAAtH,IAAA,GAAAsH,KAAAtH,IAAA,IAAA0jC,OAAA,KAEAqsC,EAAAl7D,OAAA,WACA,OAAAvN,KAAAlJ,EAAAq7C,QAAA,GAAAnyC,KAAAiY,EAAAk6B,QAAA,KAiBAs2B,EAAAhiC,YAAA,WACA,MAAAzmC,MAAA5D,EAAA4D,KAAAmR,EAAAnR,KAAA3D,EAAA2D,KAAA7E;EAgBAstE,EAAAntB,MAAA,WACA,GAAA3W,KAEAA,GAAA9H,GAAA78B,KAAAlJ,EACA6tC,EAAA7H,GAAA98B,KAAAiY,CAGA,IAAA4wD,KAAA7oE,KAAA5D,EAAA4D,KAAA7E,IAAA6E,KAAA3D,EAAA2D,KAAAmR,GACAwzB,GAAAmkC,OAAA1V,EAAAtyB,KAAA4nC,EAAAG,EAAA,KACA59B,EAAA49B,EAAA,IAEAlkC,EAAAokC,MAAAF,EAAA,MAAAA,EAAA,MAAAA,EAAA,MAAAA,EAAA,MACAA,EAAA,IAAAA,EAAA,MAAAA,EAAA,MAAAlkC,EAAAokC,MAAAF,EAAA,MAAAA,EAAA,MAAAlkC,EAAAokC,OAEApkC,EAAAqkC,OAAA5V,EAAAtyB,KAAA4nC,EAAAG,EAAA,KACA59B,EAAA49B,EAAA,IACAlkC,EAAAokC,OAAApkC,EAAAqkC,OAEAhpE,KAAAymC,cAAA,IACA9B,EAAAmkC,QAAAnkC,EAAAmkC,OAIA,IAAA5nC,IAAA2nC,EAAA,MACA1nC,EAAA0nC,EAAA,KAaA,OAZA1nC,GAAA,GACAwD,EAAAuC,OAAArkC,EAAAwwD,IAAAD,EAAAnyB,KAAAE,IACAD,EAAA,IACAyD,EAAAuC,OAAA,IAAAvC,EAAAuC,SAGAvC,EAAAuC,OAAArkC,EAAAwwD,IAAAD,EAAAgF,KAAAl3B,IAGAyD,EAAAskC,YAAAtkC,EAAAokC,MAAA52B,QAAA,IAAAxN,EAAAmkC,OAAA32B,QAAA,IAAAxN,EAAAqkC,OAAA72B,QAAA,IAAAxN,EAAAuC,QACAvC,EAAAukC,gBAAAvkC,EAAAokC,MAAA52B,QAAA,IAAAxN,EAAAmkC,OAAA32B,QAAA,IAAAxN,EAAAqkC,OAAA72B,QAAA,KAAAxN,EAAAuC,OACAvC,EAAAwkC,aAAAxkC,EAAAokC,MAAA52B,QAAA,KAAAxN,EAAAuC,OACAvC,GASA8jC,EAAAhD,kBAAA,SAAA2D,GACA,GAAAvoE,GAAAuoE,GAAAppE,KAAAs7C,OACA,QAAAz6C,EAAAkoE,MAAA52B,QAAA,GAQA,KAAAnyC,KAAAtH,IAAA,GAAAsH,KAAAtH,IAAA,GAAAsH,KAAAtH,IAAA,GAAAsH,KAAAtH,IAAA,GAAAsH,KAAAtH,IAAA,GAAAsH,KAAAtH,IAAA,KAPAmI,EAAAioE,QAAAjoE,EAAAioE,OAAA32B,QAAA,GACAtxC,EAAAmoE,QAAAnoE,EAAAmoE,OAAA72B,QAAA,GACAtxC,EAAAqmC,QAAArmC,EAAAqmC,OAAAiL,QAAA,IACAtxC,EAAAg8B,IAAAh8B,EAAAi8B,GAAA,MAAAj8B,EAAAg8B,GAAAsV,QAAA,IAAAtxC,EAAAi8B,GAAAqV,QAAA,IAAAnnB,IACA,GAAAnqB,EAAAioE,QAAA,GAAAjoE,EAAAmoE,OAAA,KAAAnoE,EAAAioE,OAAAjoE,EAAAmoE,OAAA,KAAAh+C,IACAnqB,EAAAqmC,OAAA,MAAArmC,EAAAqmC,OAAAiL,QAAA,QAAAnnB,MAKK+oC,EAAA37D,WAQLyK,EAAAkxD,SAkBAlxD,EAAA4gE,OAAA,SAAArnE,EAAAC,EAAAlB,EAAAgW,EAAAra,EAAAmhB,GACA,UAAA87C,GAAA33D,EAAAC,EAAAlB,EAAAgW,EAAAra,EAAAmhB,MAgBApV,EAAAygE,OAAA,SAAAzgE,EAAAwuD,EAAAG,EAAA5X,EAAAwc,GAwDA,QAAAiT,GAAAnxE,GACA,gBAAAU,GAUA,GATA6hD,IAAAX,OACAlhD,YAAAw9D,IAAA,GAAAx9D,EAAA8O,KAAA+tD,WAAAn8D,SACA,kBAAAV,EAAA8O,KAAA81D,WAAA3H,SACA,kBAAAj9D,EAAA8O,KAAA81D,WAAA3H,SACA,WAAAj9D,EAAA8O,KAAA81D,WAAA3H,WACAj9D,IAAA8O,KAAA81D,WACAnJ,EAAAr0D,MAAAq1D,YAAAz8D,GACAA,EAAAu4D,EAAAv4D,IAEAA,YAAAy4D,GACA,qBAAAz4D,EAAAuH,MAAA,kBAAAvH,EAAAuH,MACA,WAAAvH,EAAAuH,KAAA,CACAvH,EAAA8O,KAAAhN,IACA+2D,EAAA74D,EAAA8O,MACAhN,GAAA9B,EAAA8B,IAGA,IAAAmsD,GAAAid,EAAAlrE,EAAA8O,KAAAhN,QAEAmsD,GAAAjuD,EAAAmK,KAAA7K,OAIA,IADA2uD,EAAAhkD,EAAAg4D,MAAAjiE,GACAiuD,EAAA1pD,MAAA,CACA,GAAAmsE,GAAAzmE,EAAAwxD,EAAAr0D,MAAAs0D,iBAAAiV,SAAA3wE,EACA0wE,IACAA,EAAA5hE,KAAAhN,IACA+2D,EAAA6X,EAAA5hE,MACAhN,GAAA4uE,EAAA5uE,KAGAmsD,EAAAid,EAAAwF,EAAA5hE,KAAAhN,KAEAmsD,EAAAjuD,MAGAiuD,GAAAuL,EAAAvL,EAGA,IAAAnL,KACAA,GAAAxjD,GAAA2uD,EACA4K,EAAAzxD,KAAA0H,KAAAg0C,GACA17C,KAAA0H,KAAAozD,MAAA5iE,GAAA8yB,GAuKA,QAAAw+C,GAAA5wE,GACA6hD,IAAAX,OACAlhD,QACAA,GAAA,MAEAoH,KAAA0H,KAAAozD,MAAA2O,SAAA7wE,EAgEA,QAAA8wE,GAAAhiE,GAGA,OAFAi9B,MACA7sC,EAAA4P,EAAA+tD,WACAp8D,EAAA,EAAAkhD,EAAAziD,EAAAwB,OAA6CD,EAAAkhD,EAAQlhD,IAAA,CACrD,GAAAswE,GAAA7xE,EAAAuB,EACA,IAAAswE,EAAAzY,UACAvsB,EAAA9sC,KAAA8xE,EAAAxX,WAEA,SAAAwX,EAAA9T,UACA,GAAA8T,EAAAlU,WAAAn8D,QAAA,GAAAqwE,EAAAnM,WAAAtM,SACAvsB,EAAA9sC,KAAA8xE,EAAAnM,WAAArL,WAEAxtB,EAAA9sC,KAAA6xE,EAAAC,KAIA,MAAAhlC,GAuCA,QAAAilC,KAEA,MADAnvB,KAAAX,OACA95C,KAAA0H,KAAAozD,MAAA2O,SAxYA,GACA9U,GAAA9xD,EAAAmzD,EAAArB,KACAxD,EAAAtuD,EAAAmzD,EAAA7E,KACAC,EAAAvuD,EAAAuuD,GACAiD,EAAAxxD,EAAAmzD,EAAA3B,YACAwV,EAAA,qBACApY,EAAA5uD,EAAAmzD,EAAAvE,EACAqS,EAAAjhE,EAAA+0D,IACAxF,EAAAzX,OACAV,EAAAp3C,EAAAmzD,EAAA/b,UACAjvB,EAAA,EAEAyvB,KAAAe,GAAA,+BAAA5iD,GACA,GAAAA,YAAAy4D,IAAAz4D,YAAAw9D,GAAA,CAOA,GANA3b,IAAAX,OACAlhD,YAAAw9D,IAAA,GAAAx9D,EAAA8O,KAAA+tD,WAAAn8D,SACAV,IAAA8O,KAAA81D,WACAnJ,EAAAr0D,MAAAq1D,YAAAz8D,GACAA,EAAAu4D,EAAAv4D,IAEA,QAAAA,EAAAuH,KACA,GAAA81D,GAAAr9D,MAEAq9D,GAAAtB,EAAA,OAAAN,EAAAr0D,OACAi2D,EAAAvuD,KAAA2tD,YAAAz8D,EAAA8O,OAEAuuD,EAAAvuD,KAAAhN,IAAA+2D,EAAAwE,EAAAvuD,MACAhN,GAAAu7D,EAAAv7D,KAEA+2D,EAAAzxD,KAAA0H,MACAuuD,KAAA6N,EAAA7N,EAAAv7D,SAIA,SAAAovE,GACArvB,IAAAe,GAAA,sBAAAsuB,GACArvB,IAAAe,GAAA,2BAAAsuB,GACArvB,IAAAe,GAAA,0BAAAsuB,IACK,SAAAlxE,GACL,GAAAA,YAAAy4D,IAAAz4D,YAAAw9D,GAAA,CAEA,GADA3b,IAAAX,OACA,YAAAlhD,EAAAuH,KACA,GAAAyM,GAAAhU,MAEAgU,GAAA+nD,EAAA,WAAAN,EAAAr0D,OACA4M,EAAAlF,KAAA2tD,YAAAz8D,EAAA8O,OACAkF,EAAAlF,KAAAhN,IAAA+2D,EAAA7kD,EAAAlF,MACAhN,GAAAkS,EAAAlS,IAGA+2D,GAAAzxD,KAAA0H,MACAu2D,YAAA6F,EAAAl3D,EAAAlF,KAAAhN,IAAAkS,EAAAlS,SAmDA+/C,IAAAe,GAAA,sBAAA6tB,EAAA,SACA5uB,IAAAe,GAAA,wBAAA6tB,EAAA,UACA,IAAAU,GAAA,+BACAtvB,KAAAe,GAAA,gCAAA6f,GACAA,EAAAjJ,EAAAiJ,EACA,IAAA2O,GAAA3O,EAAAl8B,MAAA4qC,EACA,KAAAC,EACA,WAEA,IAAA7pE,GAAA6pE,EAAA,GACAtW,EAAAsW,EAAA,GACAC,EAAAD,EAAA,EAkBA,OAjBAtW,KAAApY,MAAA,WAAAp4C,IAAA,SAAAwuD,GACA,OAAAA,YAEA,GAAAgC,EAAAp6D,QAAA,GAAAo6D,EAAA,KACAA,MAEAuW,IAAA3uB,MAAA,KACA2uB,IAAA/mE,IAAA,SAAAwuD,GACAA,IAAApW,MAAA,IACA,IAAA3W,IACAk2B,MAAAnJ,EAAA,GAKA,OAHAA,GAAA,KACA/sB,EAAAp3B,OAAAkT,WAAAixC,EAAA,KAEA/sB,KAGAxkC,OACAuzD,SACAuW,WAIAxvB,IAAAe,GAAA,4BAAA5iD,GACA6hD,IAAAX,OACAsX,EAAAx4D,EAAA,UAAAw4D,EAAAx4D,EAAA,cACAA,EAAAiK,EAAAL,KAAA5B,SAAAxJ,KAAAwB,IAEAA,EAAAw5D,EAAAx5D,GACAA,EAAAumC,MAAA,YACAvmC,EAAAiK,EAAAL,KAAA0nE,WAAAtxE,IAEA64D,EAAAzxD,KAAA0H,MAAsByJ,EAAAvY,OACjB,GACL6hD,IAAAe,GAAA,gCAAA5iD,GACA6hD,IAAAX,OACAlhD,EAAAw5D,EAAAx5D,EAEA,KADA,GAAAuxE,GAAAvwB,EAAA0X,IAAAK,eAAA/4D,GACAoH,KAAA0H,KAAA81D,YACAx9D,KAAA0H,KAAA4tD,YAAAt1D,KAAA0H,KAAA81D,WAEAx9D,MAAA0H,KAAA2tD,YAAA8U,MACK,GACL1vB,IAAAe,GAAA,+BAAA5iD,GACA6hD,IAAAX,OACA95C,KAAA+C,MAAmBoO,EAAAvY,OACd,GACL6hD,IAAAe,GAAA,gCAAA5iD,GACA6hD,IAAAX,OACA95C,KAAA0H,KAAA0iE,UAAAC,QAAAzxE,KACK,GACL6hD,IAAAe,GAAA,kCAAA5iD,GACA,GAAA0xE,EAEAA,GADAlZ,EAAAx4D,EAAA,gBAAAA,IACAA,EAAA2E,EAAA3E,EAAA+H,EAAA/H,EAAA0+C,MAAA1+C,EAAAgyD,QAAAxuB,KAAA,KACSg1B,EAAAx4D,EAAA,SACTA,EAAAwjC,KAAA,KAEAxjC,EAEA64D,EAAAzxD,KAAA0H,MACAq/D,QAAAuD,IAEA7vB,IAAAX,UACK,GACLW,IAAAe,GAAA,oCAAA5iD,GACAoH,KAAAmD,UAAAvK,GACA6hD,IAAAX,UACK,GACLW,IAAAe,GAAA,4BAAA5iD,GACA,QAAAoH,KAAAG,OACAs6C,IAAAX,OACA2X,EAAAzxD,KAAA0H,MACA6iE,GAAA3xE,EACA4xE,GAAA5xE,QAGK,GACL6hD,IAAAe,GAAA,mCAAA5iD,GAEA,GADA6hD,IAAAX,OACA,QAAA95C,KAAAG,KAAA,CACA,GAAAzF,GAAA+vE,EAAA/iE,CACA,KAAA9O,GAAAoH,KAAA0qE,SAAA,CAEA,IADAD,EAAAzqE,KAAA0qE,SACAD,EAAA/iE,KAAA81D,YACAx9D,KAAA0H,KAAA2tD,YAAAoV,EAAA/iE,KAAA81D,WAIA,OAFAiN,GAAAlE,oBACAvmE,MAAA0qE,SAGA,GAAAtZ,EAAAx4D,EAAA,WACA,GAAA87D,GAAAL,EAAAr0D,MACAwC,EAAA2uD,EAAAuD,EAAAH,YAAA/xD,KAAA5J,EACA87D,GAAAW,YAAA7yD,EAAAkF,MACAhN,EAAA8H,EAAA9H,GACA8H,EAAAO,MAA2BrI,WAE3B9B,GAAAu4D,EAAAv4D,GACAA,YAAAy4D,KACA32D,EAAA9B,EAAAmK,KAAA,MACArI,IACAA,EAAA9B,EAAA8B,GACA9B,EAAAmK,MAAoCrI,QAIpC,IAAAA,EAGA,GAFA+vE,EAAAzqE,KAAA0qE,SACAhjE,EAAA1H,KAAA0H,KACA+iE,EACAA,EAAA1nE,MAA6B2jE,aAAA,IAAAhsE,QACZ,CAIjB,IAHA+vE,EAAAhZ,EAAA,YACAiV,aAAA,IAAAhsE,IAEAgN,EAAA81D,YACAiN,EAAApV,YAAA3tD,EAAA81D,WAEA91D,GAAA2tD,YAAAoV,GACAzqE,KAAA0qE,SAAAvZ,EAAAsZ,QAIK,GACLhwB,IAAAe,GAAA,+BAAA5iD,GACA,WAAAoH,KAAAG,KAAA,CAeA,IAdA,GACAuH,GAAA1H,KAAA0H,KACAijE,EAAA,SAAAC,GACA,GAAAjmC,GAAA8sB,EAAA,QACA,IAAAL,EAAAwZ,EAAA,SACA,OAAAvxE,GAAA,EAAuCA,EAAAuxE,EAAAtxE,OAAkBD,IACzDsrC,EAAA0wB,YAAAsV,EAAAC,EAAAvxE,SAGAsrC,GAAA0wB,YAAAzb,EAAA0X,IAAAK,eAAAiZ,GAGA,OADAjmC,GAAAsG,WAAAtG,EAAAsG,YACAtG,GAEAj9B,EAAA81D,YACA91D,EAAA4tD,YAAA5tD,EAAA81D,WAGA,KADA,GAAAqN,GAAAF,EAAA/xE,GACAiyE,EAAArN,YACA91D,EAAA2tD,YAAAwV,EAAArN,YAGA/iB,IAAAX,UACK,GAQLW,IAAAe,GAAA,0BAAAguB,IAAA,GACA/uB,IAAAe,GAAA,2BAAAguB,IAAA,GAGA/uB,IAAAe,GAAA,yCAEA,MADAf,KAAAX,OACA95C,KAAAmD,eACK,GACLs3C,IAAAe,GAAA,wCAEA,MADAf,KAAAX,OACA95C,KAAA0qE,YACK,GAEL,WACA,QAAAI,GAAA5a,GACA,kBACAzV,IAAAX,MACA,IAAAghB,GAAAlhB,EAAA0X,IAAAyJ,YAAAC,iBAAAh7D,KAAA0H,KAAA,MAAAuzD,iBAAA,UAAA/K,EACA,eAAA4K,EACAA,EAEAj4D,EAAA+2C,EAAA0X,IAAAwT,eAAAhK,EAAA37B,MAAA0qC,GAAA,MAIA,QAAAjC,GAAA1X,GACA,gBAAAt3D,GACA6hD,IAAAX,MACA,IAAA5hD,GAAA,SAAAg4D,EAAAtgD,OAAA,GAAA0xD,cAAApR,EAAA4B,UAAA,EACA,QAAAl5D,MAEA,YADAoH,KAAA0H,KAAAozD,MAAA5iE,GAAA,OAGA,cAAAU,EAAAuH,KAAA,CACA,GAAAzF,GAAA9B,EAAA8O,KAAAhN,EAKA,OAJAA,IACA+2D,EAAA74D,EAAA8O,MAAuChN,GAAA9B,EAAA8B,UAEvCsF,KAAA0H,KAAAozD,MAAA5iE,GAAA4rE,EAAAppE,MAKA+/C,IAAAe,GAAA,+BAAAsvB,EAAA,YACArwB,IAAAe,GAAA,8BAAAsvB,EAAA,YACArwB,IAAAe,GAAA,iCAAAsvB,EAAA,cACArwB,IAAAe,GAAA,gCAAAsvB,EAAA,cACArwB,IAAAe,GAAA,+BAAAsvB,EAAA,YACArwB,IAAAe,GAAA,8BAAAsvB,EAAA,YACArwB,IAAAe,GAAA,4BAAAosB,EAAA,YACAntB,IAAAe,GAAA,2BAAAosB,EAAA,YACAntB,IAAAe,GAAA,8BAAAosB,EAAA,cACAntB,IAAAe,GAAA,6BAAAosB,EAAA,cACAntB,IAAAe,GAAA,4BAAAosB,EAAA,YACAntB,IAAAe,GAAA,2BAAAosB,EAAA,eAEAntB,IAAAe,GAAA,iCACA,WAAAx7C,KAAAG,MAAAsxD,EAAAzxD,KAAA0H,KAAA,OAAA+pD,EAAAzxD,KAAA0H,KAAA,MAEA,MADA+yC,KAAAX,OACA2X,EAAAzxD,KAAA0H,KAAA,SAEK,GAmBL+yC,IAAAe,GAAA,oCACA,WAAAx7C,KAAAG,MAAA,SAAAH,KAAAG,KAAA,CACAs6C,IAAAX,MACA,IAAAnV,GAAA+kC,EAAA1pE,KAAA0H,KACA,WAAAi9B,EAAArrC,OAAAqrC,EAAA,GAAAA,MAEK,GACL8V,IAAAe,GAAA,qCACA,MAAAx7C,MAAA0H,KAAAqjE,eACK,GACLtwB,IAAAe,GAAA,uCACAf,IAAAX,MACA,IAAAwwB,GAAA7Y,EAAAzxD,KAAA0H,KAAA,UACA,OAAA4iE,IACAA,IAAAhvB,MAAArB,GACAp3C,EAAAmzD,EAAAoM,KAAAkI,EAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,KAEA,UAEK,GACL7vB,IAAAe,GAAA,sCACA,GAAA/9C,GAAAg0D,EAAAzxD,KAAA0H,KAAA,SAEA,OADA+yC,KAAAX,OACAr8C,EACAA,EAAA69C,MAAArB,GAEA,UAEK,GACLQ,IAAAe,GAAA,oCACA,GAAA/9C,GAAAg0D,EAAAzxD,KAAA0H,KAAA,IAEA,OADA+yC,KAAAX,OACAr8C,KACK,GACLg9C,IAAAe,GAAA,qCACA,MAAAx7C,MAAA0H,KAAA0iE,UAAAC,WACK,GAKL5vB,IAAAe,GAAA,6BAAAouB,IAAA,GACAnvB,IAAAe,GAAA,8BAAAouB,IAAA,KAgBA/mE,EAAAygE,OAAA,SAAAzgE,EAAAwuD,EAAAG,EAAA5X,EAAAwc,GACA,GAAA4U,GAAA,OAGA5Y,EAAAzX,OACA6pB,EAAAnT,EAAAj5D,SAUAosE,GAAAyG,SAAA,SAAAryE,GACA,GAIAiE,GACAquE,EACAC,EACAC,EAPAC,EAAAjZ,EAAAx5D,GAAA,IAAAumC,MAAA6rC,OACA7I,EAAAniE,KAAA0H,KACA0iE,EAAAjI,EAAAiI,UAAAC,QACAiB,EAAAlB,EAAAjrC,MAAA6rC,MAMA,IAAAK,EAAA/xE,OAAA,CAEA,IADAuD,EAAA,EACAsuE,EAAAE,EAAAxuE,MACAquE,EAAAI,EAAA1zE,QAAAuzE,IACAD,GACAI,EAAAzzE,KAAAszE,EAIAC,GAAAE,EAAAlvC,KAAA,KACAguC,GAAAgB,IACAjJ,EAAAiI,UAAAC,QAAAe,GAGA,MAAAprE,OAWAwkE,EAAA+G,YAAA,SAAA3yE,GACA,GAIAiE,GACAquE,EACAC,EACAC,EAPAC,EAAAjZ,EAAAx5D,GAAA,IAAAumC,MAAA6rC,OACA7I,EAAAniE,KAAA0H,KACA0iE,EAAAjI,EAAAiI,UAAAC,QACAiB,EAAAlB,EAAAjrC,MAAA6rC,MAKA,IAAAM,EAAAhyE,OAAA,CAEA,IADAuD,EAAA,EACAsuE,EAAAE,EAAAxuE,MACAquE,EAAAI,EAAA1zE,QAAAuzE,IACAD,GACAI,EAAA1xE,OAAAsxE,EAAA,EAIAE,GAAAE,EAAAlvC,KAAA,KACAguC,GAAAgB,IACAjJ,EAAAiI,UAAAC,QAAAe,GAGA,MAAAprE,OAWAwkE,EAAAgH,SAAA,SAAA5yE,GACA,GAAAupE,GAAAniE,KAAA0H,KACA0iE,EAAAjI,EAAAiI,UAAAC,QACAiB,EAAAlB,EAAAjrC,MAAA6rC,MACA,UAAAM,EAAA1zE,QAAAgB,IAaA4rE,EAAAiH,YAAA,SAAA7yE,EAAA8yE,GACA,SAAAA,EACA,MAAAA,GACA1rE,KAAAirE,SAAAryE,GAEAoH,KAAAurE,YAAA3yE,EAGA,IAIAiE,GACAquE,EACAC,EACAC,EAPAC,GAAAzyE,GAAA,IAAAumC,MAAA6rC,OACA7I,EAAAniE,KAAA0H,KACA0iE,EAAAjI,EAAAiI,UAAAC,QACAiB,EAAAlB,EAAAjrC,MAAA6rC,MAMA,KADAnuE,EAAA,EACAsuE,EAAAE,EAAAxuE,MACAquE,EAAAI,EAAA1zE,QAAAuzE,IACAD,EACAI,EAAA1xE,OAAAsxE,EAAA,GAEAI,EAAAzzE,KAAAszE,EAQA,OAJAC,GAAAE,EAAAlvC,KAAA,KACAguC,GAAAgB,IACAjJ,EAAAiI,UAAAC,QAAAe,GAEAprE,QAiBA6C,EAAAygE,OAAA,SAAAzgE,EAAAwuD,EAAAG,EAAA5X,EAAAwc,GAkBA,QAAAuV,GAAA5iD,GACA,MAAAA,GAEA,QAAA6iD,GAAAC,GACA,gBAAA9iD,GACA,OAAAA,EAAAopB,QAAA,GAAA05B,GAtBA,GAAAC,IACAC,IAAA,SAAAxuE,EAAAoD,GACA,MAAApD,GAAAoD,GAEAqrE,IAAA,SAAAzuE,EAAAoD,GACA,MAAApD,GAAAoD,GAEAsrE,IAAA,SAAA1uE,EAAAoD,GACA,MAAApD,GAAAoD,GAEAurE,IAAA,SAAA3uE,EAAAoD,GACA,MAAApD,GAAAoD,IAGAyxD,EAAAzX,OACAwxB,EAAA,WACAC,EAAA,sDASA3xB,KAAAe,GAAA,0BAAAzyB,GACA,GAAAsjD,GAAAja,EAAArpC,GAAAoW,MAAAitC,EACA,IAAAC,EAAA,CACA,GAAAC,GAAA7xB,IAAAvb,KACAhnC,EAAAo0E,EAAAxa,UAAAwa,EAAA3O,YAAA,QACAvhE,EAAA4D,KAAA+C,KAAA7K,GACAq0E,IACA9xB,KAAAX,MACA,IAAA+xB,GAAAQ,EAAA,OACAG,EAAApwE,EAAA+iC,MAAAgtC,GACAnuE,EAAA8tE,EAAAO,EAAA,GAOA,IANAG,MAAAX,EACA9iD,EAAA/qB,EAAAyiB,WAAArkB,IAAAiwE,EAAA,KAEAjwE,EAAA4D,KAAAwmE,KAAAtuE,GACA6wB,EAAA/qB,EAAAgC,KAAAwmE,KAAAtuE,GAAA8H,KAAAwmE,KAAAtuE,EAAAm0E,EAAA,GAAAR,KAEAn3B,MAAAt4C,IAAAs4C,MAAA3rB,GACA,MAEAwjD,GAAAr0E,GAAA6wB,EACA/oB,KAAA+C,KAAAwpE,OAEK,IACL9xB,IAAAe,GAAA,2BAAAtjD,EAAAmE,GACA,GAAAD,GAAAg2D,EAAApyD,KAAA+C,KAAA7K,IAAA,IAEAu0E,EAAAra,EAAA/1D,GAAA8iC,MAAAitC,EACA,IAAAK,EAAA,CACAhyB,IAAAX,MACA,IAAA+xB,GAAAY,EAAA,OACAD,EAAApwE,EAAA+iC,MAAAgtC,GACAnuE,EAAA8tE,EAAAW,EAAA,GACA,OAAAD,OAAAX,GAEAxH,KAAA5jD,WAAArkB,GACAkoE,GAAAtmE,EAAAyiB,WAAArkB,IAAAqwE,EAAA,IACAx0D,EAAA2zD,EAAAY,KAGApwE,EAAA4D,KAAAwmE,KAAAtuE,IAEAmsE,KAAAjoE,EACAkoE,GAAAtmE,EAAA5B,EAAA4D,KAAAwmE,KAAAtuE,EAAAu0E,EAAA,GAAAZ,IACA5zD,EAAA0zD,QAIK,MAeL9oE,EAAAygE,OAAA,SAAAzgE,EAAAwuD,EAAAG,EAAA5X,EAAAwc,GACA,GAAAG,GAAA/E,EAAAp5D,UACAg5D,EAAAvuD,EAAAuuD,EAqBAmF,GAAAmW,KAAA,SAAAnvE,EAAAoD,EAAAsC,EAAA5H,EAAAkvE,EAAAC,GACA,GAAAznE,EAkBA,OAjBA,OAAAynE,IACAA,EAAAD,GAEAnZ,EAAA7zD,EAAA,8BAAAA,EACAwF,EAAAxF,EACS,MAAAA,IACTwF,GACAxF,IACAoD,IACA22C,MAAAr0C,EACA2nD,OAAAvvD,GAEA,MAAAkvE,IACAxnE,EAAAwnE,KACAxnE,EAAAynE,OAGAxqE,KAAA0xD,GAAA,OAAA3uD,IAgBAwzD,EAAAoW,OAAA,SAAA90B,EAAAC,EAAA7nC,GACA,GAAAlN,EAUA,OATAquD,GAAAvZ,EAAA,8BAAAA,EACA90C,EAAA80C,EACS,MAAAA,IACT90C,GACA80C,KACAC,KACA7nC,MAGAjQ,KAAA0xD,GAAA,SAAA3uD,GAGA,IAAA6pE,GAAA,WACA,QAAAC,KACA7sE,KAAAu0D,WAAAe,YAAAt1D,MAEA,gBAAAquD,EAAAp2C,GACA,GAAA60D,GAAAlzB,EAAA0X,IAAAgM,cAAA,OACA5G,EAAA9c,EAAA0X,IAAAoF,IACAoW,GAAAhS,MAAAiS,QAAA,6CACAD,EAAAE,OAAA,WACA/0D,EAAA7gB,KAAA01E,GACAA,EAAAE,OAAAF,EAAAD,QAAA,KACAnW,EAAApB,YAAAwX,IAEAA,EAAAD,UACAnW,EAAArB,YAAAyX,GACAA,EAAAze,SAsBAkI,GAAA0W,MAAA,SAAA5e,EAAA9wD,EAAAoD,EAAA22C,EAAAsT,GACA,GAAA8G,GAAA1xD,KAAA0xD,GAAA,QACA,IAAAN,EAAA/C,EAAA,kBAAAA,GACAqD,EAAA3uD,KAAAsrD,OACS,UAAAA,EAAA,CACT,GAAA11D,IACA+tE,aAAArY,EACA6e,oBAAA,OAEA,OAAA3vE,GAAA,MAAAoD,IACAhI,EAAA4E,IACA5E,EAAAgI,KAEA,MAAA22C,GAAA,MAAAsT,GACAjyD,EAAA2+C,QACA3+C,EAAAiyD,UAEAgiB,EAAAve,EAAA,WACAxrD,EAAAmzD,EAAAvE,EAAAC,EAAAhqD,MACA4vC,MAAAt3C,KAAAmtE,YACAviB,OAAA5qD,KAAAotE,iBAIAvqE,EAAAmzD,EAAAvE,EAAAC,EAAAhqD,KAAA/O,GAEA,MAAA+4D,IAiBA6E,EAAA8W,QAAA,SAAAx1B,EAAAC,EAAAyyB,EAAAC,GACA,GAAAznE,EAWA,OAVAquD,GAAAvZ,EAAA,8BAAAA,EACA90C,EAAA80C,EACS,MAAAA,IACT90C,GACA80C,KACAC,KACAyyB,KACAC,OAGAxqE,KAAA0xD,GAAA,UAAA3uD,IAiCAwzD,EAAA/zD,KAAA,SAAA2O,GACA,GAAApO,EAMA,OALAquD,GAAAjgD,EAAA,YAAAigD,EAAAjgD,EAAA,SACApO,EAAAoO,EACSA,IACTpO,GAAoBoO,MAEpBnR,KAAA0xD,GAAA,OAAA3uD,IA2BAwzD,EAAA+W,MAAA/W,EAAA7gD,EAAA,SAAAwwD,GACA,GACAxU,GAAA1xD,KAAA0xD,GAAA,IAMA,OALA,IAAAtwC,UAAA9nB,QAAA4sE,MAAA/lE,KACAuxD,EAAA3uD,KAAAmjE,GACS9kD,UAAA9nB,QACTo4D,EAAA31C,IAAArc,MAAAtH,UAAA2D,MAAA3E,KAAAgqB,UAAA,IAEAswC,GAmBA6E,EAAApB,IAAA,SAAA53D,EAAAoD,EAAA22C,EAAAsT,EAAA2iB,EAAAC,EAAAC,EAAAC,GACA,GAAAhyB,KAoBA,OAnBA0V,GAAA7zD,EAAA,iBAAAoD,EACA+6C,EAAAn+C,GAEA,MAAAA,IACAm+C,EAAAn+C,KAEA,MAAAoD,IACA+6C,EAAA/6C,KAEA,MAAA22C,IACAoE,EAAApE,SAEA,MAAAsT,IACAlP,EAAAkP,UAEA,MAAA2iB,GAAA,MAAAC,GAAA,MAAAC,GAAA,MAAAC,IACAhyB,EAAAqrB,SAAAwG,EAAAC,EAAAC,EAAAC,KAGA1tE,KAAA0xD,GAAA,MAAAhW,IAWA6a,EAAAN,KAAA,SAAAiQ,GACA,GACAxU,GAAA1xD,KAAA0xD,GAAA,OAMA,OALA,IAAAtwC,UAAA9nB,QAAA4sE,MAAA/lE,KACAuxD,EAAA3uD,KAAAmjE,GACS9kD,UAAA9nB,QACTo4D,EAAA31C,IAAArc,MAAAtH,UAAA2D,MAAA3E,KAAAgqB,UAAA,IAEAswC,GAmBA6E,EAAAoX,KAAA,SAAApwE,EAAAoD,EAAA22C,EAAAsT,EAAAgjB,EAAAC,EAAAC,EAAAC,GACA,GAAA3c,EAAA7zD,EAAA,UACA,GAAAwF,GAAAxF,MAEAwF,IAAoB+jE,aAAA,kBACpBvpE,IACAwF,EAAAxF,KAEAoD,IACAoC,EAAApC,KAEA,MAAA22C,IACAv0C,EAAAu0C,SAEA,MAAAsT,IACA7nD,EAAA6nD,UAEA,MAAAgjB,GAAA,MAAAC,GAAA,MAAAC,GAAA,MAAAC,EACAhrE,EAAAgkE,SAAA6G,EAAAC,EAAAC,EAAAC,GAEAhrE,EAAAgkE,SAAAxpE,GAAA,EAAAoD,GAAA,EAAA22C,GAAA,EAAAsT,GAAA,EAGA,OAAA5qD,MAAA0xD,GAAA,UAAA3uD,IAcAwzD,EAAAkQ,IAAA,SAAA/rE,GACA,aAAAA,GACAA,YAAA22D,KACA32D,EAAAqI,KAAA,OACArI,EAAAqI,MAA6BrI,GAAAmI,EAAAmzD,EAAAt7D,QAE7BA,IAAAqI,KAAA,OAEA,KAAA43C,OAAAjgD,GAAAkV,WACAlV,IAAAo3D,UAAA,IAEA9xD,KAAA0xD,GAAA,OAAmCgV,aAAA,IAAAhsE,KAEnC22D,EAAAj5D,UAAAquE,IAAArvE,KAAA4I,OAeAu2D,EAAAL,OAAA,SAAA0X,EAAAC,EAAAC,EAAAC,GACA,GAAAhrE,KAKA,OAJA,OAAA6qE,GAAA,MAAAC,GAAA,MAAAC,GAAA,MAAAC,IACAhrE,EAAAgkE,SAAA6G,EAAAC,EAAAC,EAAAC,IAGA/tE,KAAA0xD,GAAA,SAAA3uD,IAsBAwzD,EAAA3E,KAAA,SAAAr0D,EAAAoD,EAAAixD,GACA,GAAA7uD,KAUA,OATAquD,GAAA7zD,EAAA,UACAwF,EAAAxF,EACS,MAAAA,IACTwF,GACAxF,IACAoD,IACAixD,QAAA,KAGA5xD,KAAA0xD,GAAA,OAAA3uD,IAiBAwzD,EAAAyX,KAAA,SAAAl4B,EAAAC,EAAAtO,EAAAC,GACA,GAAA3kC,KAWA,OAVAquD,GAAAtb,EAAA,UACA/yC,EAAA+yC,EACS,MAAAA,IACT/yC,GACA+yC,KACArO,KACAsO,KACArO,OAGA1nC,KAAA0xD,GAAA,OAAA3uD,IAiBAwzD,EAAArJ,SAAA,SAAAne,GACA3tB,UAAA9nB,OAAA,IACAy1C,EAAArvC,MAAAtH,UAAA2D,MAAA3E,KAAAgqB,UAAA,GAEA,IAAAre,KAMA,OALAquD,GAAAriB,EAAA,YAAAqiB,EAAAriB,EAAA,SACAhsC,EAAAgsC,EACS,MAAAA,IACThsC,GAAoBgsC,WAEpB/uC,KAAA0xD,GAAA,WAAA3uD,IAQAwzD,EAAA7zB,QAAA,SAAAqM,GACA3tB,UAAA9nB,OAAA,IACAy1C,EAAArvC,MAAAtH,UAAA2D,MAAA3E,KAAAgqB,UAAA,GAEA,IAAAre,KAMA,OALAquD,GAAAriB,EAAA,YAAAqiB,EAAAriB,EAAA,SACAhsC,EAAAgsC,EACS,MAAAA,IACThsC,GAAoBgsC,WAEpB/uC,KAAA0xD,GAAA,UAAA3uD,IAGA,WAGA,QAAAkrE,KACA,MAAAjuE,MAAA48D,UAAA,QAEA,QAAAsR,GAAArT,EAAAttD,GACA,GAAAusC,GAAA2X,EAAA,QACA1uD,GACAwK,UAAA,IASA,OAPAstD,GAAAh4D,EAAAg4D,SACA93D,EAAA,cAAA83D,EAAAZ,IACAY,EAAAN,QAAA,IACAx3D,EAAA,gBAAA83D,EAAAN,SAEA9I,EAAA3X,EAAA/2C,GACA/C,KAAA0H,KAAA2tD,YAAAvb,GACA95C,KAEA,QAAAmuE,KACA,qBAAAnuE,KAAAG,KAAA,CACA,GAAA21C,GAAA2b,EAAAzxD,KAAA0H,KAAA,SACA+/B,EAAAgqB,EAAAzxD,KAAA0H,KAAA,SACAquC,EAAA0b,EAAAzxD,KAAA0H,KAAA,SACAggC,EAAA+pB,EAAAzxD,KAAA0H,KAAA,QACA,OAAA7E,GAAAmzD,EAAAoM,IAAAtsB,EAAAC,EAAAqd,KAAA5yD,IAAAinC,EAAAqO,GAAAsd,KAAA5yD,IAAAknC,EAAAqO,IAEA,GAAA8B,GAAA73C,KAAA0H,KAAAmwC,IAAA,GACAC,EAAA93C,KAAA0H,KAAAowC,IAAA,GACA7nC,EAAAjQ,KAAA0H,KAAAuI,GAAA,CACA,OAAApN,GAAAmzD,EAAAoM,IAAAvqB,EAAA5nC,EAAA6nC,EAAA7nC,EAAA,EAAAA,EAAA,EAAAA,GAGA,QAAAs5D,GAAA7U,EAAAtrB,GAqBA,QAAAglC,GAAA/0E,EAAA62D,GAEA,OADAme,IAAAne,EAAAD,IAAA52D,EAAAwD,GACAyT,EAAAzT,EAA+ByT,EAAAjX,EAAOiX,IACtC25D,EAAA35D,GAAA/C,UAAA0iD,EAAAoe,GAAA/9D,EAAAzT,IAAAs1C,QAAA,EAEAt1C,GAAAxD,EACA42D,EAAAC,EA1BA,GACAwB,GADA4X,EAAA7uB,IAAA,4BAAArR,GAAAkR,cAEA,KAAAgvB,EACA,WAEAA,GAAA5V,OAAA4a,QAAA5Z,GAEAhD,EADA,KAAA4X,EAAAnpE,KAAAgd,cACAoxD,EAAAx0E,MAAA,EAAAuvE,EAAA5V,QAEA8a,EAAAz0E,MAAA,EAAAuvE,EAAA5V,QAEA4V,EAAAnpE,MAAAmpE,EAAAnpE,KAAAgd,eACAs0C,EAAAC,EAAAhqD,MACA+mE,cAAA,kBAGA,IAAAxE,GAAAX,EAAAW,MACAnxC,EAAAmxC,EAAA3wE,OACA22D,EAAA,EACApzD,EAAA,CASAi8B,IACA,QAAAz/B,GAAA,EAA2BA,EAAAy/B,EAASz/B,IAAA,UAAA4wE,GAAA5wE,IACpC+0E,EAAA/0E,EAAA4wE,EAAA5wE,GAAAkU,OAIA,KAFA08D,EAAAnxC,GAAAvrB,OAAA08D,EAAAnxC,GAAAvrB,QAAA,IACA6gE,EAAAt1C,EAAAmxC,EAAAnxC,GAAAvrB,QACAlU,EAAA,EAAuBA,GAAAy/B,EAAUz/B,IAAA,CACjC,GAAAygD,GAAAmwB,EAAA5wE,EACAq4D,GAAAgd,QAAA50B,EAAA+gB,MAAA/gB,EAAAvsC,QAEA,MAAAmkD,GAEA,QAAA6c,GAAA7Z,EAAA5e,EAAAC,EAAAtO,EAAAC,GACA,GAAAgqB,GAAA7uD,EAAAmzD,EAAArB,KAAA,iBAAAD,EAYA,OAXAhD,GAAAuY,MAAAgE,EACAvc,EAAAgd,QAAAR,EACAxc,EAAAsD,QAAAmZ,EACA,MAAAr4B,GACA2b,EAAAC,EAAAhqD,MACAouC,KACAC,KACAtO,KACAC,OAGAgqB,EAEA,QAAA8c,GAAA9Z,EAAA7c,EAAAC,EAAA7nC,EAAA0+D,EAAAC,GACA,GAAAld,GAAA7uD,EAAAmzD,EAAArB,KAAA,iBAAAD,EAiBA,OAhBAhD,GAAAuY,MAAAgE,EACAvc,EAAAgd,QAAAR,EACAxc,EAAAsD,QAAAmZ,EACA,MAAAt2B,GACA4Z,EAAAC,EAAAhqD,MACAmwC,KACAC,KACA7nC,MAGA,MAAA0+D,GAAA,MAAAC,GACAnd,EAAAC,EAAAhqD,MACAinE,KACAC,OAGAld,EA3GA,GAAAD,GAAA5uD,EAAAmzD,EAAAvE,CAkJA8E,GAAAgT,SAAA,SAAAngC,GACA,MAAAmgC,GAAAvpE,KAAA00D,KAAAtrB,IAEAmtB,EAAAgY,eAAA,SAAAz4B,EAAAC,EAAAtO,EAAAC,GACA,MAAA6mC,GAAAvuE,KAAA00D,KAAA5e,EAAAC,EAAAtO,EAAAC,IAEA6uB,EAAAiY,eAAA,SAAA32B,EAAAC,EAAA7nC,EAAA0+D,EAAAC,GACA,MAAAJ,GAAAxuE,KAAA00D,KAAA7c,EAAAC,EAAA7nC,EAAA0+D,EAAAC,IASArY,EAAA31D,SAAA,WACA,GAIA86B,GAJA41B,EAAAtxD,KAAA0H,KAAA8uD,cACAv+C,EAAAq5C,EAAA8L,yBACAjsD,EAAAmgD,EAAAgM,cAAA,OACAnI,EAAAn1D,KAAA0H,KAAAi/D,WAAA,EAOA,OALA1uD,GAAAo9C,YAAAlkD,GACAA,EAAAkkD,YAAAF,GACAtyD,EAAAmzD,EAAAvE,EAAA0D,GAA2BlD,MAAA,+BAC3Bv2B,EAAAvqB,EAAAosD,UACAtlD,EAAAq9C,YAAAr9C,EAAAulD,YACA9hC,GASA66B,EAAA8R,UAAA,WACA,GAAAvrD,eAAAwrD,KACA,mCAA2CA,KAAAE,SAAA7G,mBAAA3hE,SAS3Cu2D,EAAArK,MAAA,WAGA,IAFA,GACA5nD,GADAoD,EAAA1H,KAAA0H,KAAA81D,WAEA91D,GACApD,EAAAoD,EAAA2+D,YACA,QAAA3+D,EAAAmuD,QACAnuD,EAAA6sD,WAAAe,YAAA5tD,GAEA6uD,EAAArK,MAAA90D,MAAsCsQ,SAEtCA,EAAApD,QAmBAzB,EAAAygE,OAAA,SAAAzgE,EAAAwuD,EAAAG,EAAA5X,GAaA,QAAAjzC,GAAAkoE,GACA,GAAApxE,GAAAkJ,EAAAkoE,GAAAloE,EAAAkoE,MAcA,OAbApxE,GAAAoxE,GACApxE,EAAAoxE,GAAAC,MAAA,IAEArxE,EAAAoxE,IACAC,MAAA,KAGA9f,WAAA,WACA,OAAA/S,KAAAx+C,KAAAu8C,GAAAiC,OAAA4yB,IACApxE,EAAAw+C,GAAA6yB,SACArxE,EAAAw+C,GAAA6yB,aAAArxE,GAAAw+C,MAGAx+C,EAAAoxE,GAEA,QAAAzM,GAAA7kE,EAAAoD,EAAA22C,EAAAsT,GAUA,MATA,OAAArtD,IACAA,EAAAoD,EAAA22C,EAAAsT,EAAA,GAEA,MAAAjqD,IACAA,EAAApD,EAAAoD,EACA22C,EAAA/5C,EAAA+5C,MACAsT,EAAArtD,EAAAqtD,OACArtD,QAGAA,IACAoD,IACA22C,QACAr0C,EAAAq0C,EACAsT,SACAvvD,EAAAuvD,EACAnjB,GAAAlqC,EAAA+5C,EACA5P,GAAA/mC,EAAAiqD,EACA/S,GAAAt6C,EAAA+5C,EAAA,EACAQ,GAAAn3C,EAAAiqD,EAAA,EACAmkB,GAAA3b,EAAAzmD,IAAA2qC,EAAAsT,GAAA,EACAn1C,GAAA29C,EAAA3yD,IAAA62C,EAAAsT,GAAA,EACAokB,GAAA5b,EAAAtyB,KAAAwW,IAAAsT,KAAA,EACApoD,KAAAysE,EAAA1xE,EAAAoD,EAAA22C,EAAAsT,GACA0f,IAAA/sE,EAAAoD,EAAA22C,EAAAsT,GAAAxuB,KAAA,MAGA,QAAAx7B,KACA,MAAAZ,MAAAo8B,KAAA,KAAAo3B,QAAAjkB,EAAA,MAEA,QAAA2/B,GAAAzkE,GACA,GAAAixB,GAAAlgB,EAAA/Q,EAEA,OADAixB,GAAA96B,WACA86B,EAEA,QAAAyzC,GAAA/tE,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAArI,GACA,aAAAA,EACA81E,EAAAhuE,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA0tE,EAAAjuE,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACA2tE,EAAAluE,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAArI,IAGA,QAAAi2E,GAAAC,EAAA9sE,GACA,QAAA+sE,GAAA1mD,GACA,SAAAA,GAAAopB,QAAA,GAEA,MAAAtvC,GAAAmzD,EAAAnD,OAAA,SAAArwD,EAAAlJ,EAAAo2E,GACAltE,YAAA6uD,KACA7uD,IAAAO,KAAA,MAEAP,EAAAmtE,EAAAntE,EAGA,QAFAjF,GAAAoD,EAAAlD,EAAAvD,EAAkDoN,EAAlDsoE,EAAA,GAAAC,KACA/2C,EAAA,EACAz/B,EAAA,EAAAkhD,EAAA/3C,EAAAlJ,OAA6CD,EAAAkhD,EAAQlhD,IAAA,CAErD,GADAoE,EAAA+E,EAAAnJ,GACA,KAAAoE,EAAA,GACAF,GAAAE,EAAA,GACAkD,GAAAlD,EAAA,OACiB,CAEjB,GADAvD,EAAAi1E,EAAA5xE,EAAAoD,EAAAlD,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAq7B,EAAA5+B,EAAAZ,EAAA,CACA,GAAAoJ,IAAAmtE,EAAA5f,MAAA,CAUA,GATA3oD,EAAA6nE,EAAA5xE,EAAAoD,EAAAlD,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAnE,EAAAw/B,GACA82C,IACA,IAAAH,EAAAnoE,EAAA2oD,MAAA1yD,GACAkyE,EAAAnoE,EAAA2oD,MAAAtvD,GACA8uE,EAAAnoE,EAAA9J,EAAAD,GACAkyE,EAAAnoE,EAAA9J,EAAAmD,GACA8uE,EAAAnoE,EAAA/J,GACAkyE,EAAAnoE,EAAA3G,IAEA+uE,EAA4C,MAAAE,EAC5CC,GAAA5f,MAAA2f,EACAA,GACA,IAAAH,EAAAnoE,EAAA/J,GACAkyE,EAAAnoE,EAAA3G,GAAA,IAAA8uE,EAAAnoE,EAAA6H,EAAA5R,GACAkyE,EAAAnoE,EAAA6H,EAAAxO,GACA8uE,EAAAnoE,EAAA4oD,IAAA3yD,GACAkyE,EAAAnoE,EAAA4oD,IAAAvvD,GACA8uE,EAAAhyE,EAAA,IACAgyE,EAAAhyE,EAAA,KACA2+B,OACAtD,GAAA5+B,EACAqD,GAAAE,EAAA,GACAkD,GAAAlD,EAAA,EACA,UAEA,IAAA+xE,IAAA9sE,EAEA,MADA4E,GAAA6nE,EAAA5xE,EAAAoD,EAAAlD,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAnE,EAAAw/B,GAIAA,GAAA5+B,EACAqD,GAAAE,EAAA,GACAkD,GAAAlD,EAAA,GAEAmyE,GAAAnyE,EAAAw1D,QAAAx1D,EAIA,MAFAoyE,GAAA3f,IAAA0f,EACAtoE,EAAAkoE,EAAA12C,EAAAp2B,EAAAmtE,EAAAR,EAAA9xE,EAAAoD,EAAAlD,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,OAES,KAAAoF,EAAAmzD,EAAAx6C,OAKT,QAAA6zD,GAAAjuE,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAQ,GACA,GAAA2tE,GAAA,EAAA3tE,EACA4tE,EAAAj5D,EAAAg5D,EAAA,GACAE,EAAAl5D,EAAAg5D,EAAA,GACAG,EAAA9tE,IACA+tE,EAAAD,EAAA9tE,EACA5E,EAAAwyE,EAAA3uE,EAAA,EAAA4uE,EAAA7tE,EAAAb,EAAA,EAAAwuE,EAAA3tE,IAAAX,EAAA0uE,EAAAxuE,EACAf,EAAAovE,EAAA1uE,EAAA,EAAA2uE,EAAA7tE,EAAAZ,EAAA,EAAAuuE,EAAA3tE,IAAAV,EAAAyuE,EAAAvuE,EACAwuE,EAAA/uE,EAAA,EAAAe,GAAAb,EAAAF,GAAA6uE,GAAAzuE,EAAA,EAAAF,EAAAF,GACAgvE,EAAA/uE,EAAA,EAAAc,GAAAZ,EAAAF,GAAA4uE,GAAAxuE,EAAA,EAAAF,EAAAF,GACAutC,EAAAttC,EAAA,EAAAa,GAAAX,EAAAF,GAAA2uE,GAAAvuE,EAAA,EAAAF,EAAAF,GACA+uE,EAAA9uE,EAAA,EAAAY,GAAAV,EAAAF,GAAA0uE,GAAAtuE,EAAA,EAAAF,EAAAF,GACA+hC,EAAAwsC,EAAA1uE,EAAAe,EAAAb,EACAiiC,EAAAusC,EAAAzuE,EAAAc,EAAAZ,EACAs2C,EAAAi4B,EAAAtuE,EAAAW,EAAAT,EACAo2C,EAAAg4B,EAAAruE,EAAAU,EAAAR,EACA2uE,EAAA,OAAAld,EAAArxB,MAAAouC,EAAAvhC,EAAAwhC,EAAAC,GAAAhwE,CAEA,QACA9C,IACAoD,IACAnD,GAAgBD,EAAA4yE,EAAAxvE,EAAAyvE,GAChBjhE,GAAgB5R,EAAAqxC,EAAAjuC,EAAA0vE,GAChBpgB,OAAoB1yD,EAAA+lC,EAAA3iC,EAAA4iC,GACpB2sB,KAAkB3yD,EAAAs6C,EAAAl3C,EAAAm3C,GAClBw4B,SAGA,QAAAC,GAAAnvE,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACAkB,EAAAuuD,GAAAhwD,EAAA,WACAA,KAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,IAAAiyD,GAAA4c,EAAAz2E,MAAA,KAAAqH,EACA,OAAAghE,GACAxO,EAAAjnD,IAAApP,EACAq2D,EAAAjnD,IAAAhM,EACAizD,EAAAnzD,IAAAlD,EAAAq2D,EAAAjnD,IAAApP,EACAq2D,EAAAnzD,IAAAE,EAAAizD,EAAAjnD,IAAAhM,GAGA,QAAA8vE,GAAA7c,EAAAr2D,EAAAoD,GACA,MAAApD,IAAAq2D,EAAAr2D,GACAA,GAAAq2D,EAAAr2D,EAAAq2D,EAAAtc,OACA32C,GAAAizD,EAAAjzD,GACAA,GAAAizD,EAAAjzD,EAAAizD,EAAAhJ,OAEA,QAAA8lB,GAAAC,EAAAC,GAGA,MAFAD,GAAAvO,EAAAuO,GACAC,EAAAxO,EAAAwO,GACAH,EAAAG,EAAAD,EAAApzE,EAAAozE,EAAAhwE,IACA8vE,EAAAG,EAAAD,EAAAlpC,GAAAkpC,EAAAhwE,IACA8vE,EAAAG,EAAAD,EAAApzE,EAAAozE,EAAAjpC,KACA+oC,EAAAG,EAAAD,EAAAlpC,GAAAkpC,EAAAjpC,KACA+oC,EAAAE,EAAAC,EAAArzE,EAAAqzE,EAAAjwE,IACA8vE,EAAAE,EAAAC,EAAAnpC,GAAAmpC,EAAAjwE,IACA8vE,EAAAE,EAAAC,EAAArzE,EAAAqzE,EAAAlpC,KACA+oC,EAAAE,EAAAC,EAAAnpC,GAAAmpC,EAAAlpC,MACAipC,EAAApzE,EAAAqzE,EAAAnpC,IAAAkpC,EAAApzE,EAAAqzE,EAAArzE,GACAqzE,EAAArzE,EAAAozE,EAAAlpC,IAAAmpC,EAAArzE,EAAAozE,EAAApzE,KACAozE,EAAAhwE,EAAAiwE,EAAAlpC,IAAAipC,EAAAhwE,EAAAiwE,EAAAjwE,GACAiwE,EAAAjwE,EAAAgwE,EAAAjpC,IAAAkpC,EAAAjwE,EAAAgwE,EAAAhwE,GAEA,QAAAkwE,GAAA1uE,EAAAH,EAAAC,EAAAC,EAAA4uE,GACA,GAAAhB,IAAA,EAAA9tE,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAA4uE,EACAb,EAAA9tE,EAAA2tE,EAAA,EAAA9tE,EAAA,GAAAC,EAAA,EAAAC,CACA,OAAAC,GAAA8tE,EAAA,EAAAjuE,EAAA,EAAAC,EAEA,QAAAmtE,GAAAt5B,EAAAC,EAAAtO,EAAAC,EAAAwrB,EAAAC,EAAA4d,EAAAC,EAAAx7D,GACA,MAAAA,IACAA,EAAA,GAEAA,IAAA,IAAAA,EAAA,IAAAA,CAMA,QALAmyB,GAAAnyB,EAAA,EACArG,EAAA,GACA8hE,IAAA,8EACAC,GAAA,yEACAC,EAAA,EACA93E,EAAA,EAAuBA,EAAA8V,EAAO9V,IAAA,CAC9B,GAAA+3E,GAAAzpC,EAAAspC,EAAA53E,GAAAsuC,EACA0pC,EAAAR,EAAAO,EAAAt7B,EAAArO,EAAAyrB,EAAA6d,GACAO,EAAAT,EAAAO,EAAAr7B,EAAArO,EAAAyrB,EAAA6d,GACAO,EAAAF,IAAAC,GACAH,IAAAD,EAAA73E,GAAA+5D,EAAAtyB,KAAAywC,GAEA,MAAA5pC,GAAAwpC,EAEA,QAAA7B,GAAAx5B,EAAAC,EAAAtO,EAAAC,EAAAwrB,EAAAC,EAAA4d,EAAAC,EAAAQ,GACA,KAAAA,EAAA,GAAApC,EAAAt5B,EAAAC,EAAAtO,EAAAC,EAAAwrB,EAAAC,EAAA4d,EAAAC,GAAAQ,GAAA,CAGA,GAGAt3E,GAHAiI,EAAA,EACAksE,EAAAlsE,EAAA,EACA8tE,EAAA9tE,EAAAksE,EAEAv3E,EAAA,GAEA,KADAoD,EAAAk1E,EAAAt5B,EAAAC,EAAAtO,EAAAC,EAAAwrB,EAAAC,EAAA4d,EAAAC,EAAAf,GACAzvE,EAAAtG,EAAAs3E,GAAA16E,GACAu3E,GAAA,EACA4B,IAAA/1E,EAAAs3E,EAAA,MAAAnD,EACAn0E,EAAAk1E,EAAAt5B,EAAAC,EAAAtO,EAAAC,EAAAwrB,EAAAC,EAAA4d,EAAAC,EAAAf,EAEA,OAAAA,IAEA,QAAAwB,GAAA37B,EAAAC,EAAAtO,EAAAC,EAAAwrB,EAAAC,EAAA4d,EAAAC,GACA,KACA9Z,EAAAphB,EAAArO,GAAA0vB,EAAAjE,EAAA6d,IACA5Z,EAAArhB,EAAArO,GAAAyvB,EAAAhE,EAAA6d,IACA7Z,EAAAnhB,EAAArO,GAAAyvB,EAAAhE,EAAA6d,IACA7Z,EAAAphB,EAAArO,GAAAwvB,EAAA/D,EAAA6d,IAJA,CAQA,GAAApiC,IAAAkH,EAAApO,EAAAqO,EAAAtO,IAAAyrB,EAAA6d,IAAAj7B,EAAArO,IAAAyrB,EAAA8d,EAAA7d,EAAA4d,GACAV,GAAAv6B,EAAApO,EAAAqO,EAAAtO,IAAA0rB,EAAA6d,IAAAj7B,EAAArO,IAAAwrB,EAAA8d,EAAA7d,EAAA4d,GACAW,GAAA57B,EAAArO,IAAA0rB,EAAA6d,IAAAj7B,EAAArO,IAAAwrB,EAAA6d,EAEA,IAAAW,EAAA,CAGA,GAAA/iC,GAAAC,EAAA8iC,EACAC,EAAAtB,EAAAqB,EACAE,GAAAjjC,EAAAwD,QAAA,GACA0/B,GAAAF,EAAAx/B,QAAA,EACA,MACAy/B,GAAAza,EAAArhB,EAAArO,GAAA0K,QAAA,IACAy/B,GAAA1a,EAAAphB,EAAArO,GAAA0K,QAAA,IACAy/B,GAAAza,EAAAjE,EAAA6d,GAAA5+B,QAAA,IACAy/B,GAAA1a,EAAAhE,EAAA6d,GAAA5+B,QAAA,IACA0/B,GAAA1a,EAAAphB,EAAArO,GAAAyK,QAAA,IACA0/B,GAAA3a,EAAAnhB,EAAArO,GAAAyK,QAAA,IACA0/B,GAAA1a,EAAAhE,EAAA6d,GAAA7+B,QAAA,IACA0/B,GAAA3a,EAAA/D,EAAA6d,GAAA7+B,QAAA,IAIA,OAAgB50C,EAAAoxC,EAAAhuC,EAAAgxE,KAQhB,QAAAG,GAAAC,EAAAC,EAAAC,GACA,GAAAtB,GAAAJ,EAAAwB,GACAnB,EAAAL,EAAAyB,EACA,KAAAtB,EAAAC,EAAAC,GACA,MAAAqB,GAAA,IAUA,QARAC,GAAA9C,EAAAr1E,MAAA,EAAAg4E,GACAI,EAAA/C,EAAAr1E,MAAA,EAAAi4E,GACA11D,KAAA41D,EAAA,GACAxoB,KAAAyoB,EAAA,GACAC,KACAC,KACAxjC,KACAnT,EAAAu2C,EAAA,KACA54E,EAAA,EAAuBA,EAAAijB,EAAA,EAAYjjB,IAAA,CACnC,GAAAoE,GAAA4xE,EAAAt1E,MAAA,EAAAg4E,EAAAj7B,OAAAz9C,EAAAijB,GACA81D,GAAAv6E,MAAwB0F,EAAAE,EAAAF,EAAAoD,EAAAlD,EAAAkD,EAAAwB,EAAA9I,EAAAijB,IAExB,IAAAjjB,EAAA,EAAmBA,EAAAqwD,EAAA,EAAYrwD,IAC/BoE,EAAA4xE,EAAAt1E,MAAA,EAAAi4E,EAAAl7B,OAAAz9C,EAAAqwD,IACA2oB,EAAAx6E,MAAwB0F,EAAAE,EAAAF,EAAAoD,EAAAlD,EAAAkD,EAAAwB,EAAA9I,EAAAqwD,GAExB,KAAArwD,EAAA,EAAmBA,EAAAijB,EAAQjjB,IAC3B,OAAAwD,GAAA,EAA2BA,EAAA6sD,EAAQ7sD,IAAA,CACnC,GAAAy1E,GAAAF,EAAA/4E,GACAk5E,EAAAH,EAAA/4E,EAAA,GACAm5E,EAAAH,EAAAx1E,GACA41E,EAAAJ,EAAAx1E,EAAA,GACA61E,EAAAlyE,EAAA+xE,EAAAh1E,EAAA+0E,EAAA/0E,GAAA,aACAo1E,EAAAnyE,EAAAiyE,EAAAl1E,EAAAi1E,EAAAj1E,GAAA,aACA6zD,EAAAqgB,EAAAa,EAAA/0E,EAAA+0E,EAAA3xE,EAAA4xE,EAAAh1E,EAAAg1E,EAAA5xE,EAAA6xE,EAAAj1E,EAAAi1E,EAAA7xE,EAAA8xE,EAAAl1E,EAAAk1E,EAAA9xE,EACA,IAAAywD,EAAA,CACA,GAAAviB,EAAAuiB,EAAA7zD,EAAA40C,QAAA,KAAAif,EAAAzwD,EAAAwxC,QAAA,GACA,QAEAtD,GAAAuiB,EAAA7zD,EAAA40C,QAAA,IAAAif,EAAAzwD,EAAAwxC,QAAA,EACA,IAAA29B,GAAAwC,EAAAnwE,EAAA3B,GAAA4wD,EAAAshB,GAAAJ,EAAAI,KAAAH,EAAAG,GAAAJ,EAAAI,MAAAH,EAAApwE,EAAAmwE,EAAAnwE,GACA8tE,EAAAuC,EAAArwE,EAAA3B,GAAA4wD,EAAAuhB,GAAAH,EAAAG,KAAAF,EAAAE,GAAAH,EAAAG,MAAAF,EAAAtwE,EAAAqwE,EAAArwE,EACA2tE,IAAA,GAAAA,GAAA,GAAAG,GAAA,GAAAA,GAAA,IACAgC,EACAv2C,IAEAA,EAAA7jC,MACA0F,EAAA6zD,EAAA7zD,EACAoD,EAAAywD,EAAAzwD,EACAmvE,KACAG,SAOA,MAAAv0C,GAEA,QAAAk3C,GAAAC,EAAAC,GACA,MAAAC,GAAAF,EAAAC,GAEA,QAAAE,GAAAH,EAAAC,GACA,MAAAC,GAAAF,EAAAC,EAAA,GAEA,QAAAC,GAAAF,EAAAC,EAAAb,GACAY,EAAAlD,EAAAkD,GACAC,EAAAnD,EAAAmD,EAGA,QAFAh9B,GAAAC,EAAAtO,EAAAC,EAAAurC,EAAAC,EAAAC,EAAAC,EAAArB,EAAAC,EACAt2C,EAAAu2C,EAAA,KACA54E,EAAA,EAAAkhD,EAAAs4B,EAAAv5E,OAA0CD,EAAAkhD,EAAQlhD,IAAA,CAClD,GAAAg6E,GAAAR,EAAAx5E,EACA,SAAAg6E,EAAA,GACAv9B,EAAAm9B,EAAAI,EAAA,GACAt9B,EAAAm9B,EAAAG,EAAA,OACa,CACb,KAAAA,EAAA,IACAtB,GAAAj8B,EAAAC,GAAAe,OAAAu8B,EAAAt3E,MAAA,IACA+5C,EAAAi8B,EAAA,GACAh8B,EAAAg8B,EAAA,KAEAA,GAAAj8B,EAAAC,EAAAD,EAAAC,EAAAk9B,EAAAC,EAAAD,EAAAC,GACAp9B,EAAAm9B,EACAl9B,EAAAm9B,EAEA,QAAAr2E,GAAA,EAAAs+C,EAAA23B,EAAAx5E,OAAkDuD,EAAAs+C,EAAQt+C,IAAA,CAC1D,GAAAy2E,GAAAR,EAAAj2E,EACA,SAAAy2E,EAAA,GACA7rC,EAAA0rC,EAAAG,EAAA,GACA5rC,EAAA0rC,EAAAE,EAAA,OACqB,CACrB,KAAAA,EAAA,IACAtB,GAAAvqC,EAAAC,GAAAoP,OAAAw8B,EAAAv3E,MAAA,IACA0rC,EAAAuqC,EAAA,GACAtqC,EAAAsqC,EAAA,KAEAA,GAAAvqC,EAAAC,EAAAD,EAAAC,EAAAyrC,EAAAC,EAAAD,EAAAC,GACA3rC,EAAA0rC,EACAzrC,EAAA0rC,EAEA,IAAAG,GAAAzB,EAAAC,EAAAC,EAAAC,EACA,IAAAA,EACAv2C,GAAA63C,MACyB,CACzB,OAAAjjE,GAAA,EAAAkjE,EAAAD,EAAAj6E,OAA6DgX,EAAAkjE,EAAQljE,IACrEijE,EAAAjjE,GAAAmjE,SAAAp6E,EACAk6E,EAAAjjE,GAAAojE,SAAA72E,EACA02E,EAAAjjE,GAAAyhE,OACAwB,EAAAjjE,GAAA0hE,MAEAt2C,KAAAob,OAAAy8B,OAMA,MAAA73C,GAEA,QAAAi4C,GAAAnxE,EAAAjF,EAAAoD,GACA,GAAAizD,GAAAggB,EAAApxE,EACA,OAAAiuE,GAAA7c,EAAAr2D,EAAAoD,IACAoyE,EAAAvwE,IAAA,IAAAjF,EAAAoD,IAAA,IAAAizD,EAAAnsB,GAAA,aAEA,QAAAmsC,GAAApxE,GACA,GAAAw5D,GAAAr1D,EAAAnE,EACA,IAAAw5D,EAAApI,KACA,MAAAp4C,GAAAwgD,EAAApI,KAEA,KAAApxD,EACA,MAAA4/D,IAEA5/D,GAAAmtE,EAAAntE,EAMA,QADA/E,GAJAF,EAAA,EACAoD,EAAA,EACAqF,KACAE,KAEA7M,EAAA,EAAAkhD,EAAA/3C,EAAAlJ,OAAyCD,EAAAkhD,EAAQlhD,IAEjD,GADAoE,EAAA+E,EAAAnJ,GACA,KAAAoE,EAAA,GACAF,EAAAE,EAAA,GACAkD,EAAAlD,EAAA,GACAuI,EAAAnO,KAAA0F,GACA2I,EAAArO,KAAA8I,OACa,CACb,GAAAkzE,GAAArD,EAAAjzE,EAAAoD,EAAAlD,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAuI,KAAA8wC,OAAA+8B,EAAAlnE,IAAApP,EAAAs2E,EAAApzE,IAAAlD,GACA2I,IAAA4wC,OAAA+8B,EAAAlnE,IAAAhM,EAAAkzE,EAAApzE,IAAAE,GACApD,EAAAE,EAAA,GACAkD,EAAAlD,EAAA,GAGA,GAAAkwD,GAAAwJ,EAAAp9D,MAAA,EAAAiM,GACA6nD,EAAAsJ,EAAAp9D,MAAA,EAAAmM,GACAwnD,EAAAwJ,EAAAn9D,MAAA,EAAAiM,GACA4nD,EAAAsJ,EAAAn9D,MAAA,EAAAmM,GACA8tD,EAAAoO,EAAAzU,EAAAE,EAAAH,EAAAC,EAAAC,EAAAC,EAEA,OADAmO,GAAApI,KAAAp4C,EAAAw4C,GACAA,EAEA,QAAAib,GAAA1xE,EAAAoD,EAAAsC,EAAA5H,EAAA4U,GACA,GAAAA,EACA,QACA,KAAA1S,IAAA0S,EAAAtP,IACA,IAAAsC,EAAA,EAAAgN,EAAA,IACA,IAAAA,IAAA,MAAAA,MACA,MAAA5U,EAAA,EAAA4U,IACA,IAAAA,IAAA,OAAAA,MACA,MAAAA,EAAAhN,EAAA,IACA,IAAAgN,IAAA,OAAAA,OACA,QAAAA,EAAA5U,IACA,IAAA4U,IAAA,MAAAA,OACA,KAGA,IAAAyrB,KAAA,IAAAn+B,EAAAoD,IAAA,IAAAsC,EAAA,UAAA5H,IAAA,KAAA4H,EAAA,SAEA,OADAy4B,GAAA96B,WACA86B,EAEA,QAAAo4C,GAAAv2E,EAAAoD,EAAA4pE,EAAAC,EAAApuE,GAQA,GAPA,MAAAA,GAAA,MAAAouE,IACAA,EAAAD,GAEAhtE,KACAoD,KACA4pE,KACAC,KACA,MAAApuE,EACA,GAAA+qC,GAAAvnC,KAAAS,GAAA,IACAy1C,EAAAv4C,EAAAgtE,EAAA3qE,KAAAuhC,KAAAqpC,EAAArjC,GACAM,EAAAlqC,EAAAgtE,EAAA3qE,KAAAuhC,KAAA/kC,EAAA+qC,GACA4O,EAAAp1C,EAAA4pE,EAAA3qE,KAAAshC,KAAAspC,EAAArjC,GACAO,EAAA/mC,EAAA4pE,EAAA3qE,KAAAshC,KAAA9kC,EAAA+qC,GACAzL,IAAA,IAAAoa,EAAAC,IAAA,IAAAw0B,IAAA,IAAAnuE,EAAAouE,EAAA,OAAA/iC,EAAAC,QAEAhM,KACA,IAAAn+B,EAAAoD,IACA,OAAA6pE,IACA,IAAAD,EAAAC,EAAA,UAAAA,IACA,IAAAD,EAAAC,EAAA,WAAAA,IACA,KAIA,OADA9uC,GAAA96B,WACA86B,EAqCA,QAAAq4C,GAAAtpE,GACA,GAAAuxD,GAAAr1D,EAAA8D,GACAupE,EAAAr5B,OAAAviD,UAAA+kB,WACA,IAAA6+C,EAAAiY,IACA,MAAA/E,GAAAlT,EAAAiY,IAEApxE,GAAAuuD,GAAA3mD,EAAA,UAAA5H,EAAAuuD,GAAA3mD,KAAA,cACAA,EAAA5H,EAAAQ,gBAAAoH,GAEA,IAAAixB,MACAn+B,EAAA,EACAoD,EAAA,EACAwvE,EAAA,EACAC,EAAA,EACAngB,EAAA,CACA,MAAAxlD,EAAA,QACAlN,EAAAkN,EAAA,MACA9J,EAAA8J,EAAA,MACA0lE,EAAA5yE,EACA6yE,EAAAzvE,EACAsvD,IACAv0B,EAAA7jC,MAAA,IAAA0F,EAAAoD,IAEA,QAAAtH,GAAA42D,EAAA1V,EAAA9vC,EAAAnR,OAAkDD,EAAAkhD,EAAQlhD,IAAA,CAC1D,GAAA4W,GAAAyrB,EAAAriC,MACAgvD,EAAA59C,EAAApR,EACA,IAAAgvD,EAAA,IAAA2rB,EAAA58E,KAAAixD,EAAA,IAEA,OADAp4C,EAAA,GAAA+jE,EAAA58E,KAAAixD,EAAA,IACAp4C,EAAA,IACA,QACAA,EAAA,GAAAo4C,EAAA,GACAp4C,EAAA,GAAAo4C,EAAA,GACAp4C,EAAA,GAAAo4C,EAAA,GACAp4C,EAAA,GAAAo4C,EAAA,GACAp4C,EAAA,GAAAo4C,EAAA,GACAp4C,EAAA,KAAAo4C,EAAA,GAAA9qD,GAAA40C,QAAA,GACAliC,EAAA,KAAAo4C,EAAA,GAAA1nD,GAAAwxC,QAAA,EACA,MACA,SACAliC,EAAA,KAAAo4C,EAAA,GAAA1nD,GAAAwxC,QAAA,EACA,MACA,SACAg+B,EAAA9nB,EAAA,GACA+nB,EAAA/nB,EAAA,EACA,SACA,OAAAxrD,GAAA,EAAAs+C,EAAAkN,EAAA/uD,OAAuDuD,EAAAs+C,EAAQt+C,IAC/DoT,EAAApT,KAAAwrD,EAAAxrD,MAAA,EAAAU,EAAAoD,IAAAwxC,QAAA,OAGa,CACbliC,EAAAyrB,EAAAriC,MACA,KAAAgvD,EAAA,KACA8nB,EAAA9nB,EAAA,GAAA9qD,EACA6yE,EAAA/nB,EAAA,GAAA1nD,EAEA,QAAA2P,GAAA,EAAAkjE,EAAAnrB,EAAA/uD,OAA+CgX,EAAAkjE,EAAQljE,IACvDorB,EAAAriC,GAAAiX,GAAA+3C,EAAA/3C,GAGA,GAAAwoB,GAAA4C,EAAAriC,GAAAC,MACA,QAAAoiC,EAAAriC,GAAA,IACA,QACAkE,EAAA4yE,EACAxvE,EAAAyvE,CACA,MACA,SACA7yE,IAAAm+B,EAAAriC,GAAAy/B,EAAA,EACA,MACA,SACAn4B,IAAA+6B,EAAAriC,GAAAy/B,EAAA,EACA,MACA,SACAv7B,IAAAm+B,EAAAriC,GAAAy/B,EAAA,GACAn4B,IAAA+6B,EAAAriC,GAAAy/B,EAAA,IAKA,MAFA4C,GAAA96B,WACAo7D,EAAAiY,IAAA/E,EAAAxzC,GACAA,EAEA,QAAAw4C,GAAAzpE,GACA,GAAAuxD,GAAAr1D,EAAA8D,EACA,IAAAuxD,EAAAx7D,IACA,MAAA0uE,GAAAlT,EAAAx7D,IAKA,IAHA4wD,EAAA3mD,EAAA,UAAA2mD,EAAA3mD,KAAA,cACAA,EAAA5H,EAAAQ,gBAAAoH,KAEAA,MAAAnR,OACA,iBAEA,IAMA66E,GANAz4C,KACAn+B,EAAA,EACAoD,EAAA,EACAwvE,EAAA,EACAC,EAAA,EACAngB,EAAA,CAEA,MAAAxlD,EAAA,QACAlN,GAAAkN,EAAA,MACA9J,GAAA8J,EAAA,MACA0lE,EAAA5yE,EACA6yE,EAAAzvE,EACAsvD,IACAv0B,EAAA,QAAAn+B,EAAAoD,GAMA,QAAAsP,GAAAo4C,EAJA+rB,EAAA,GAAA3pE,EAAAnR,QACA,KAAAmR,EAAA,OACA,KAAAA,EAAA,MAAA62D,eACA,KAAA72D,EAAA,MAAA62D,cACAjoE,EAAA42D,EAAA1V,EAAA9vC,EAAAnR,OAAyDD,EAAAkhD,EAAQlhD,IAAA,CAIjE,GAHAqiC,EAAA7jC,KAAAoY,MACAo4C,EAAA59C,EAAApR,GACA86E,EAAA9rB,EAAA,GACA8rB,KAAA7S,cAEA,OADArxD,EAAA,GAAAkkE,EAAA7S,cACArxD,EAAA,IACA,QACAA,EAAA,GAAAo4C,EAAA,GACAp4C,EAAA,GAAAo4C,EAAA,GACAp4C,EAAA,GAAAo4C,EAAA,GACAp4C,EAAA,GAAAo4C,EAAA,GACAp4C,EAAA,GAAAo4C,EAAA,GACAp4C,EAAA,IAAAo4C,EAAA,GAAA9qD,EACA0S,EAAA,IAAAo4C,EAAA,GAAA1nD,CACA,MACA,SACAsP,EAAA,IAAAo4C,EAAA,GAAA1nD,CACA,MACA,SACAsP,EAAA,IAAAo4C,EAAA,GAAA9qD,CACA,MACA,SAEA,OADA82E,IAAA92E,EAAAoD,GAAAm2C,OAAAuR,EAAAtsD,MAAA,IACAc,EAAA,EAAAs+C,EAAAk5B,EAAA/6E,OAAyDuD,EAAAs+C,EAAQt+C,IACjEw3E,EAAAx3E,IAAAw3E,EAAAx3E,GAAAU,EACA82E,IAAAx3E,IAAAw3E,EAAAx3E,GAAA8D,CAEA+6B,GAAA1/B,MACA0/B,IAAAob,OAAAw9B,EAAAD,EAAAD,GACA,MACA,SACA14C,EAAA1/B,MACAq4E,EAAAP,EAAAv2E,EAAAoD,EAAA0nD,EAAA,GAAAA,EAAA,IACAgsB,EAAAx8E,KAAAw8E,EAAA,IACA34C,IAAAob,OAAAu9B,EACA,MACA,SACA34C,EAAA1/B,MACA0/B,IAAAob,OAAAg9B,EAAAv2E,EAAAoD,EAAA0nD,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACAp4C,GAAA,KAAA6mC,OAAApb,IAAApiC,OAAA,GAAAyC,OAAA,GACA,MACA,SACAo0E,GAAA9nB,EAAA,GAAA9qD,EACA6yE,GAAA/nB,EAAA,GAAA1nD,CACA,SACA,IAAA9D,EAAA,EAAAs+C,EAAAkN,EAAA/uD,OAAmDuD,EAAAs+C,EAAQt+C,IAC3DoT,EAAApT,IAAAwrD,EAAAxrD,MAAA,EAAAU,EAAAoD,OAGa,SAAAwzE,EACbE,GAAA92E,EAAAoD,GAAAm2C,OAAAuR,EAAAtsD,MAAA,IACA2/B,EAAA1/B,MACA0/B,IAAAob,OAAAw9B,EAAAD,EAAAD,IACAnkE,GAAA,KAAA6mC,OAAAuR,EAAAtsD,OAAA,QACa,SAAAo4E,EACbz4C,EAAA1/B,MACAq4E,EAAAP,EAAAv2E,EAAAoD,EAAA0nD,EAAA,GAAAA,EAAA,IACAgsB,EAAAx8E,KAAAw8E,EAAA,IACA34C,IAAAob,OAAAu9B,OACa,SAAAF,EACbz4C,EAAA1/B,MACA0/B,IAAAob,OAAAg9B,EAAAv2E,EAAAoD,EAAA0nD,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACAp4C,GAAA,KAAA6mC,OAAApb,IAAApiC,OAAA,GAAAyC,OAAA,QAEA,QAAAuU,GAAA,EAAAkjE,EAAAnrB,EAAA/uD,OAA+CgX,EAAAkjE,EAAQljE,IACvDL,EAAAK,GAAA+3C,EAAA/3C,EAIA,IADA6jE,IAAA7S,cACA,KAAA6S,EACA,OAAAlkE,EAAA,IACA,QACA1S,GAAA4yE,EACAxvE,GAAAyvE,CACA,MACA,SACA7yE,EAAA0S,EAAA,EACA,MACA,SACAtP,EAAAsP,EAAA,EACA,MACA,SACAkgE,EAAAlgE,IAAA3W,OAAA,GACA82E,EAAAngE,IAAA3W,OAAA,EACA,SACAiE,EAAA0S,IAAA3W,OAAA,GACAqH,EAAAsP,IAAA3W,OAAA,IAMA,MAFAoiC,GAAA96B,WACAo7D,EAAAx7D,IAAA0uE,EAAAxzC,GACAA,EAEA,QAAA64C,GAAAz+B,EAAAC,EAAAtO,EAAAC,GACA,OAAAoO,EAAAC,EAAAtO,EAAAC,EAAAD,EAAAC,GAEA,QAAA8sC,GAAA1+B,EAAAC,EAAAzS,EAAAC,EAAAkE,EAAAC,GACA,GAAA+sC,GAAA,IACAC,EAAA,GACA,QACAD,EAAA3+B,EAAA4+B,EAAApxC,EACAmxC,EAAA1+B,EAAA2+B,EAAAnxC,EACAkxC,EAAAhtC,EAAAitC,EAAApxC,EACAmxC,EAAA/sC,EAAAgtC,EAAAnxC,EACAkE,EACAC,GAGA,QAAAitC,GAAA7+B,EAAAC,EAAAw0B,EAAAC,EAAAl9B,EAAAsnC,EAAAC,EAAAptC,EAAAC,EAAAotC,GAGA,GAGAjmC,GAHAkmC,EAAA,IAAA10E,EAAA,IACA8mC,EAAA9mC,EAAA,MAAAitC,GAAA,GACA5R,KAEAwL,EAAArkC,EAAAmzD,EAAAnD,OAAA,SAAAt1D,EAAAoD,EAAAwmC,GACA,GAAAnhC,GAAAzI,EAAA61D,EAAAjyB,IAAAgG,GAAAxmC,EAAAyyD,EAAAlyB,IAAAiG,GACAjhC,EAAA3I,EAAA61D,EAAAlyB,IAAAiG,GAAAxmC,EAAAyyD,EAAAjyB,IAAAgG,EACA,QAAwB5pC,EAAAyI,EAAArF,EAAAuF,IAExB,IAAA4uE,EAqCAE,EAAAF,EAAA,GACAz4B,EAAAy4B,EAAA,GACAj9B,EAAAi9B,EAAA,GACAh9B,EAAAg9B,EAAA,OAxCA,CACAjmC,EAAA3H,EAAA4O,EAAAC,GAAA5O,GACA2O,EAAAjH,EAAAtxC,EACAw4C,EAAAlH,EAAAluC,EACAkuC,EAAA3H,EAAAO,EAAAC,GAAAP,GACAM,EAAAoH,EAAAtxC,EACAmqC,EAAAmH,EAAAluC,CACA,IAEApD,IAFA61D,EAAAjyB,IAAA9gC,EAAA,IAAAitC,GACA8lB,EAAAlyB,IAAA7gC,EAAA,IAAAitC,IACAwI,EAAArO,GAAA,GACA9mC,GAAAo1C,EAAArO,GAAA,EACArsC,EAAAkC,KAAAgtE,KAAA5pE,KAAA6pE,IACAnvE,GAAA,IACAA,EAAA+3D,EAAAtyB,KAAAzlC,GACAkvE,GAAAlvE,EACAmvE,GAAAnvE,EAEA,IAAA45E,GAAA1K,IACA2K,EAAA1K,IACAl6D,GAAAskE,GAAAC,GAAA,KACAzhB,EAAAtyB,KAAAtgC,GAAAy0E,EAAAC,EAAAD,EAAAt0E,IAAAu0E,EAAA33E,MAAA03E,EAAAt0E,IAAAu0E,EAAA33E,OACAs6C,EAAAvnC,EAAAi6D,EAAA5pE,EAAA6pE,GAAA10B,EAAArO,GAAA,EACAqQ,EAAAxnC,GAAAk6D,EAAAjtE,EAAAgtE,GAAAx0B,EAAArO,GAAA,EACAstC,EAAA5hB,EAAAgF,OAAAriB,EAAA+B,GAAA0yB,GAAAr4B,QAAA,IACAkK,EAAA+W,EAAAgF,OAAA1wB,EAAAoQ,GAAA0yB,GAAAr4B,QAAA,GAEA6iC,GAAAl/B,EAAA+B,EAAAx3C,EAAA20E,IACA34B,EAAA5U,EAAAoQ,EAAAx3C,EAAAg8C,IACA24B,EAAA,IAAAA,EAAA,EAAA30E,EAAA20E,GACA34B,EAAA,IAAAA,EAAA,EAAAh8C,EAAAg8C,GACAw4B,GAAAG,EAAA34B,IACA24B,GAAA,EAAA30E,IAEAw0E,GAAAx4B,EAAA24B,IACA34B,GAAA,EAAAh8C,GAQA,GAAA80E,GAAA94B,EAAA24B,CACA,IAAAx0E,EAAA20E,GAAAJ,EAAA,CACA,GAAAK,GAAA/4B,EACAg5B,EAAA5tC,EACA6tC,EAAA5tC,CACA2U,GAAA24B,EAAAD,GAAAF,GAAAx4B,EAAA24B,EAAA,MACAvtC,EAAAoQ,EAAA0yB,EAAAnX,EAAAjyB,IAAAkb,GACA3U,EAAAoQ,EAAA0yB,EAAApX,EAAAlyB,IAAAmb,GACA3gB,EAAAi5C,EAAAltC,EAAAC,EAAA6iC,EAAAC,EAAAl9B,EAAA,EAAAunC,EAAAQ,EAAAC,GAAAj5B,EAAA+4B,EAAAv9B,EAAAC,IAEAq9B,EAAA94B,EAAA24B,CACA,IAAAO,GAAAniB,EAAAjyB,IAAA6zC,GACAQ,EAAApiB,EAAAlyB,IAAA8zC,GACAS,EAAAriB,EAAAjyB,IAAAkb,GACAq5B,EAAAtiB,EAAAlyB,IAAAmb,GACAl6C,EAAAixD,EAAAtxB,IAAAqzC,EAAA,GACAQ,EAAA,IAAApL,EAAApoE,EACAyzE,EAAA,IAAApL,EAAAroE,EACA0zE,GAAA//B,EAAAC,GACA+/B,GAAAhgC,EAAA6/B,EAAAH,EAAAz/B,EAAA6/B,EAAAL,GACAQ,GAAAtuC,EAAAkuC,EAAAD,EAAAhuC,EAAAkuC,EAAAH,GACAO,GAAAvuC,EAAAC,EAGA,IAFAouC,EAAA,KAAAD,EAAA,GAAAC,EAAA,GACAA,EAAA,KAAAD,EAAA,GAAAC,EAAA,GACAhB,EACA,OAAAgB,EAAAC,EAAAC,GAAAl/B,OAAApb,EAEAA,IAAAo6C,EAAAC,EAAAC,GAAAl/B,OAAApb,GAAAU,OAAAkf,MAAA,IAEA,QADA26B,MACA58E,EAAA,EAAAkhD,EAAA7e,EAAApiC,OAA4CD,EAAAkhD,EAAQlhD,IACpD48E,EAAA58E,KAAA,EAAA6tC,EAAAxL,EAAAriC,EAAA,GAAAqiC,EAAAriC,GAAA8tC,GAAAxmC,EAAAumC,EAAAxL,EAAAriC,GAAAqiC,EAAAriC,EAAA,GAAA8tC,GAAA5pC,CAEA,OAAA04E,GAeA,QAAAzF,GAAA7tB,EAAA5vC,EAAA+iC,EAAAC,EAAAtO,EAAAC,EAAAwrB,EAAAC,GAIA,OADA/2D,GAAAC,EAAAlB,EAAAgH,EAAA2tE,EAAAG,EAAAiG,EAAAC,EAFAC,KACA5zC,UAEAnpC,EAAA,EAAuBA,EAAA,IAAOA,EAU9B,GATA,GAAAA,GACAgD,EAAA,EAAAsmD,EAAA,GAAA7M,EAAA,EAAArO,EACArrC,GAAA,EAAAumD,EAAA,EAAA7M,EAAA,EAAArO,EAAA,EAAAyrB,EACA/3D,EAAA,EAAA26C,EAAA,EAAA6M,IAEAtmD,EAAA,EAAA0W,EAAA,GAAAgjC,EAAA,EAAArO,EACAtrC,GAAA,EAAA2W,EAAA,EAAAgjC,EAAA,EAAArO,EAAA,EAAAyrB,EACAh4D,EAAA,EAAA46C,EAAA,EAAAhjC,GAEAvS,EAAApE,GAAA,OACA,GAAAoE,EAAAnE,GAAA,MACA,QAEA8F,IAAAhH,EAAAkB,EACA,EAAA8F,KAAA,GACAi0E,EAAAv+E,KAAAsK,OAIA+zE,GAAA75E,IAAA,EAAAlB,EAAAiB,EACA+5E,EAAA/iB,EAAAtyB,KAAAo1C,GACAA,EAAA,IAGApG,IAAAzzE,EAAA85E,IAAA,EAAA/5E,GACA,EAAA0zE,KAAA,GACAsG,EAAAv+E,KAAAi4E,GAEAG,IAAA5zE,EAAA85E,IAAA,EAAA/5E,GACA,EAAA6zE,KAAA,GACAmG,EAAAv+E,KAAAo4E,GAOA,KAHA,GAEAoG,GAFAx5E,EAAAu5E,EAAA98E,OACA8wB,EAAAvtB,EAEAA,KACAsF,EAAAi0E,EAAAv5E,GACAw5E,EAAA,EAAAl0E,EACAqgC,EAAA,GAAA3lC,GAAAw5E,MAAA1zB,EAAA,EAAA0zB,IAAAl0E,EAAA2zC,EAAA,EAAAugC,EAAAl0E,IAAAslC,EAAAtlC,MAAA+wD,EACA1wB,EAAA,GAAA3lC,GAAAw5E,MAAAtjE,EAAA,EAAAsjE,IAAAl0E,EAAA4zC,EAAA,EAAAsgC,EAAAl0E,IAAAulC,EAAAvlC,MAAAgxD,CAUA,OAPA3wB,GAAA,GAAApY,GAAAu4B,EACAngB,EAAA,GAAApY,GAAArX,EACAyvB,EAAA,GAAApY,EAAA,GAAA8oC,EACA1wB,EAAA,GAAApY,EAAA,GAAA+oC,EACA3wB,EAAA,GAAAlpC,OAAAkpC,EAAA,GAAAlpC,OAAA8wB,EAAA,GAIAzd,KAAgBpP,EAAA45D,EAAAp9D,MAAA,EAAAyoC,EAAA,IAAA7hC,EAAAw2D,EAAAp9D,MAAA,EAAAyoC,EAAA,KAChB/hC,KAAgBlD,EAAA25D,EAAAn9D,MAAA,EAAAyoC,EAAA,IAAA7hC,EAAAu2D,EAAAn9D,MAAA,EAAAyoC,EAAA,MAIhB,QAAAmtC,GAAAntE,EAAAswE,GACA,GAAA9W,IAAA8W,GAAAnsE,EAAAnE,EACA,KAAAswE,GAAA9W,EAAAsa,MACA,MAAApH,GAAAlT,EAAAsa,MAyFA,QAvFA74E,GAAAy2E,EAAA1xE,GACAP,EAAA6wE,GAAAoB,EAAApB,GACAp3B,GAAqBn+C,EAAA,EAAAoD,EAAA,EAAA0qC,GAAA,EAAAC,GAAA,EAAAtlC,EAAA,EAAAE,EAAA,EAAAomC,GAAA,KAAAC,GAAA,MACrBgqC,GAAsBh5E,EAAA,EAAAoD,EAAA,EAAA0qC,GAAA,EAAAC,GAAA,EAAAtlC,EAAA,EAAAE,EAAA,EAAAomC,GAAA,KAAAC,GAAA,MACtBiqC,GAAA,SAAAh0E,EAAA2O,EAAAslE,GACA,GAAA7nC,GAAAyhC,CACA,KAAA7tE,EACA,WAAA2O,EAAA5T,EAAA4T,EAAAxQ,EAAAwQ,EAAA5T,EAAA4T,EAAAxQ,EAAAwQ,EAAA5T,EAAA4T,EAAAxQ,EAGA,UADA6B,EAAA,KAA8Bk0E,EAAA,EAAA9lB,EAAA,MAAWz/C,EAAAm7B,GAAAn7B,EAAAo7B,GAAA,MACzC/pC,EAAA,IACA,QACA2O,EAAAnL,EAAAxD,EAAA,GACA2O,EAAAjL,EAAA1D,EAAA,EACA,MACA,SACAA,GAAA,KAAAs0C,OAAA69B,EAAA56E,MAAA,GAAAoX,EAAA5T,EAAA4T,EAAAxQ,GAAAm2C,OAAAt0C,EAAAzG,MAAA,KACA,MACA,SACA,KAAA06E,GAAA,KAAAA,GACA7nC,EAAA,EAAAz9B,EAAA5T,EAAA4T,EAAAk6B,GACAglC,EAAA,EAAAl/D,EAAAxQ,EAAAwQ,EAAAm6B,KAGAsD,EAAAz9B,EAAA5T,EACA8yE,EAAAl/D,EAAAxQ,GAEA6B,GAAA,IAAAosC,EAAAyhC,GAAAv5B,OAAAt0C,EAAAzG,MAAA,GACA,MACA,SACA,KAAA06E,GAAA,KAAAA,GACAtlE,EAAAm7B,GAAA,EAAAn7B,EAAA5T,EAAA4T,EAAAm7B,GACAn7B,EAAAo7B,GAAA,EAAAp7B,EAAAxQ,EAAAwQ,EAAAo7B,KAGAp7B,EAAAm7B,GAAAn7B,EAAA5T,EACA4T,EAAAo7B,GAAAp7B,EAAAxQ,GAEA6B,GAAA,KAAAs0C,OAAA09B,EAAArjE,EAAA5T,EAAA4T,EAAAxQ,EAAAwQ,EAAAm7B,GAAAn7B,EAAAo7B,GAAA/pC,EAAA,GAAAA,EAAA,IACA,MACA,SACA2O,EAAAm7B,GAAA9pC,EAAA,GACA2O,EAAAo7B,GAAA/pC,EAAA,GACAA,GAAA,KAAAs0C,OAAA09B,EAAArjE,EAAA5T,EAAA4T,EAAAxQ,EAAA6B,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACA,MACA,SACAA,GAAA,KAAAs0C,OAAAy9B,EAAApjE,EAAA5T,EAAA4T,EAAAxQ,EAAA6B,EAAA,GAAAA,EAAA,IACA,MACA,SACAA,GAAA,KAAAs0C,OAAAy9B,EAAApjE,EAAA5T,EAAA4T,EAAAxQ,EAAA6B,EAAA,GAAA2O,EAAAxQ,GACA,MACA,SACA6B,GAAA,KAAAs0C,OAAAy9B,EAAApjE,EAAA5T,EAAA4T,EAAAxQ,EAAAwQ,EAAA5T,EAAAiF,EAAA,IACA,MACA,SACAA,GAAA,KAAAs0C,OAAAy9B,EAAApjE,EAAA5T,EAAA4T,EAAAxQ,EAAAwQ,EAAAnL,EAAAmL,EAAAjL,IAGA,MAAA1D,KAEAm0E,EAAA,SAAAztD,EAAA7vB,GACA,GAAA6vB,EAAA7vB,GAAAC,OAAA,GACA4vB,EAAA7vB,GAAA45D,OAEA,KADA,GAAAogB,GAAAnqD,EAAA7vB,GACAg6E,EAAA/5E,QACAs9E,EAAAv9E,GAAA,IACA4I,IAAA40E,EAAAx9E,GAAA,KACA6vB,EAAAtvB,OAAAP,IAAA,QAAAy9C,OAAAu8B,EAAAz5E,OAAA,MAEAsvB,GAAAtvB,OAAAP,EAAA,GACAkhD,EAAA2c,EAAAz5D,EAAAnE,OAAA2I,KAAA3I,QAAA,KAGAw9E,EAAA,SAAAjE,EAAAC,EAAAp5C,EAAAC,EAAAtgC,GACAw5E,GAAAC,GAAA,KAAAD,EAAAx5E,GAAA,SAAAy5E,EAAAz5E,GAAA,KACAy5E,EAAAl5E,OAAAP,EAAA,OAAAsgC,EAAAp8B,EAAAo8B,EAAAh5B,IACA+4B,EAAA2R,GAAA,EACA3R,EAAA4R,GAAA,EACA5R,EAAAn8B,EAAAs1E,EAAAx5E,GAAA,GACAqgC,EAAA/4B,EAAAkyE,EAAAx5E,GAAA,GACAkhD,EAAA2c,EAAAz5D,EAAAnE,OAAA2I,KAAA3I,QAAA,KAGAs9E,KACAC,KACAE,EAAA,GACAN,EAAA,GACAp9E,EAAA,EAAAkhD,EAAA2c,EAAAz5D,EAAAnE,OAAA2I,KAAA3I,QAAA,GAAkED,EAAAkhD,EAAQlhD,IAAA,CAC1EoE,EAAApE,KAAA09E,EAAAt5E,EAAApE,GAAA,IAEA,KAAA09E,IAEAH,EAAAv9E,GAAA09E,EACA19E,IAAAo9E,EAAAG,EAAAv9E,EAAA,KAEAoE,EAAApE,GAAAm9E,EAAA/4E,EAAApE,GAAAqiD,EAAA+6B,GAEA,KAAAG,EAAAv9E,IAAA,KAAA09E,IAAAH,EAAAv9E,GAAA,KAIAs9E,EAAAl5E,EAAApE,GAEA4I,IACAA,EAAA5I,KAAA09E,EAAA90E,EAAA5I,GAAA,IACA,KAAA09E,IACAF,EAAAx9E,GAAA09E,EACA19E,IAAAo9E,EAAAI,EAAAx9E,EAAA,KAEA4I,EAAA5I,GAAAm9E,EAAAv0E,EAAA5I,GAAAk9E,EAAAE,GAEA,KAAAI,EAAAx9E,IAAA,KAAA09E,IACAF,EAAAx9E,GAAA,KAGAs9E,EAAA10E,EAAA5I,IAEAy9E,EAAAr5E,EAAAwE,EAAAy5C,EAAA66B,EAAAl9E,GACAy9E,EAAA70E,EAAAxE,EAAA84E,EAAA76B,EAAAriD,EACA,IAAA29E,GAAAv5E,EAAApE,GACA49E,EAAAh1E,KAAA5I,GACA69E,EAAAF,EAAA19E,OACA69E,EAAAl1E,GAAAg1E,EAAA39E,MACAoiD,GAAAn+C,EAAAy5E,EAAAE,EAAA,GACAx7B,EAAA/6C,EAAAq2E,EAAAE,EAAA,GACAx7B,EAAArQ,GAAA2rB,EAAAggB,EAAAE,EAAA,KAAAx7B,EAAAn+C,EACAm+C,EAAApQ,GAAA0rB,EAAAggB,EAAAE,EAAA,KAAAx7B,EAAA/6C,EACA41E,EAAAlrC,GAAAppC,IAAA+0D,EAAAigB,EAAAE,EAAA,KAAAZ,EAAAh5E,GACAg5E,EAAAjrC,GAAArpC,IAAA+0D,EAAAigB,EAAAE,EAAA,KAAAZ,EAAA51E,GACA41E,EAAAh5E,EAAA0E,GAAAg1E,EAAAE,EAAA,GACAZ,EAAA51E,EAAAsB,GAAAg1E,EAAAE,EAAA,GAKA,MAHAl1E,KACA+5D,EAAAsa,MAAApH,EAAAzxE,IAEAwE,GAAAxE,EAAAwE,GAAAxE,EAEA,QAAA25E,GAAA50E,EAAAihE,GACA,IAAAA,EACA,MAAAjhE,EAEA,IAAAjF,GAAAoD,EAAAtH,EAAAwD,EAAA09C,EAAAY,EAAAk8B,CAEA,KADA70E,EAAAmtE,EAAAntE,GACAnJ,EAAA,EAAAkhD,EAAA/3C,EAAAlJ,OAAqCD,EAAAkhD,EAAQlhD,IAE7C,IADAg+E,EAAA70E,EAAAnJ,GACAwD,EAAA,EAAAs+C,EAAAk8B,EAAA/9E,OAA0CuD,EAAAs+C,EAAQt+C,GAAA,EAClDU,EAAAkmE,EAAAlmE,EAAA85E,EAAAx6E,GAAAw6E,EAAAx6E,EAAA,IACA8D,EAAA8iE,EAAA9iE,EAAA02E,EAAAx6E,GAAAw6E,EAAAx6E,EAAA,IACAw6E,EAAAx6E,GAAAU,EACA85E,EAAAx6E,EAAA,GAAA8D,CAGA,OAAA6B,GAIA,QAAA8xE,GAAAgD,EAAA9hE,GAEA,OADArE,MACA9X,EAAA,EAAAk+E,EAAAD,EAAAh+E,OAA0Ci+E,EAAA,GAAA/hE,EAAAnc,EAAmBA,GAAA,GAC7D,GAAAoE,KACyBF,GAAA+5E,EAAAj+E,EAAA,GAAAsH,GAAA22E,EAAAj+E,EAAA,KACAkE,GAAA+5E,EAAAj+E,GAAAsH,GAAA22E,EAAAj+E,EAAA,KACAkE,GAAA+5E,EAAAj+E,EAAA,GAAAsH,GAAA22E,EAAAj+E,EAAA,KACAkE,GAAA+5E,EAAAj+E,EAAA,GAAAsH,GAAA22E,EAAAj+E,EAAA,IAEzBmc,GACAnc,EAEiBk+E,EAAA,GAAAl+E,EACjBoE,EAAA,IAA4BF,GAAA+5E,EAAA,GAAA32E,GAAA22E,EAAA,IACXC,EAAA,GAAAl+E,IACjBoE,EAAA,IAA4BF,GAAA+5E,EAAA,GAAA32E,GAAA22E,EAAA,IAC5B75E,EAAA,IAA4BF,GAAA+5E,EAAA,GAAA32E,GAAA22E,EAAA,KAL5B75E,EAAA,IAA4BF,GAAA+5E,EAAAC,EAAA,GAAA52E,GAAA22E,EAAAC,EAAA,IAQ5BA,EAAA,GAAAl+E,EACAoE,EAAA,GAAAA,EAAA,GACiBpE,IACjBoE,EAAA,IAA4BF,GAAA+5E,EAAAj+E,GAAAsH,GAAA22E,EAAAj+E,EAAA,KAG5B8X,EAAAtZ,MAAA,MACA4F,EAAA,GAAAF,EAAA,EAAAE,EAAA,GAAAF,EAAAE,EAAA,GAAAF,GAAA,IACAE,EAAA,GAAAkD,EAAA,EAAAlD,EAAA,GAAAkD,EAAAlD,EAAA,GAAAkD,GAAA,GACAlD,EAAA,GAAAF,EAAA,EAAAE,EAAA,GAAAF,EAAAE,EAAA,GAAAF,GAAA,GACAE,EAAA,GAAAkD,EAAA,EAAAlD,EAAA,GAAAkD,EAAAlD,EAAA,GAAAkD,GAAA,EACAlD,EAAA,GAAAF,EACAE,EAAA,GAAAkD,IAIA,MAAAwQ,GAxkCA,GAAAqzD,GAAAnT,EAAAj5D,UACAg5D,EAAAvuD,EAAAuuD,GACA51C,EAAA3Y,EAAAmzD,EAAAx6C,MACAw+B,EAAA,iBACAzK,EAAA,gBACAynB,EAAAv2C,WACA2yC,EAAAxzD,KACAS,EAAA+yD,EAAA/yD,GACA82D,EAAA/D,EAAAzmD,IACAuqD,EAAA9D,EAAA3yD,IACAqW,EAAAs8C,EAAAt8C,IACAtW,EAAA4yD,EAAA5yD,IA2HAu4D,EAAAwW,EAAA,GACAjW,EAAAiW,IACAiI,EAAAjI,EAAA,KA0VA1a,EAAAhyD,EAAAw5D,SACAob,GACAj1E,KAAA,SAAAkvD,GACA,MAAAA,GAAA3uD,KAAA,SAEA4pE,OAAA,SAAAjb,GACA,GAAA3uD,GAAA8xD,EAAAnD,EACA,OAAAoiB,GAAA/wE,EAAA80C,GAAA90C,EAAA+0C,GAAA/0C,EAAAkN,IAEAo9D,QAAA,SAAA3b,GACA,GAAA3uD,GAAA8xD,EAAAnD,EACA,OAAAoiB,GAAA/wE,EAAA80C,IAAA,EAAA90C,EAAA+0C,IAAA,EAAA/0C,EAAAwnE,GAAAxnE,EAAAynE,KAEAkC,KAAA,SAAAhb,GACA,GAAA3uD,GAAA8xD,EAAAnD,EACA,OAAAud,GAAAlsE,EAAAxF,GAAA,EAAAwF,EAAApC,GAAA,EAAAoC,EAAAu0C,MAAAv0C,EAAA6nD,OAAA7nD,EAAAwnE,GAAAxnE,EAAAynE,KAEAyC,MAAA,SAAAvb,GACA,GAAA3uD,GAAA8xD,EAAAnD,EACA,OAAAud,GAAAlsE,EAAAxF,GAAA,EAAAwF,EAAApC,GAAA,EAAAoC,EAAAu0C,MAAAv0C,EAAA6nD,SAEAojB,KAAA,SAAAtc,GACA,WAAAA,EAAA3uD,KAAA,SAAA2uD,EAAA3uD,KAAA,SAAA2uD,EAAA3uD,KAAA,MAAA2uD,EAAA3uD,KAAA,QAEAmqD,SAAA,SAAAwE,GACA,UAAAA,EAAA3uD,KAAA,WAEA2/B,QAAA,SAAAgvB,GACA,UAAAA,EAAA3uD,KAAA,eAEAiiE,MAAA,SAAAtT,GACA,GAAAkC,GAAAlC,EAAAhqD,KAAAstD,SACA,OAAAia,GAAArb,EAAAr2D,EAAAq2D,EAAAjzD,EAAAizD,EAAAtc,MAAAsc,EAAAhJ,SA0kBA/nD,GAAAL,KAAAmE,EAYA9D,EAAAL,KAAAu2D,iBAiBAl2D,EAAAL,KAAA82D,mBAaAz2D,EAAAL,KAAAk1E,WAAA,SAAAl1E,EAAA6hE,EAAAC,GACA,GAAAtkE,KAAA+4D,eAAAv2D,GAAA8hE,EAAA,KACA,MAAAkT,GAAAh1E,EAAA6hE,GAAAnU,GAEA,IAAA9zD,GAAAo7E,EAAAh1E,EAAA8hE,EAAA,EACA,OAAAD,GAAAmT,EAAAp7E,EAAAioE,GAAAnU,IAAA9zD,GASAooE,EAAAzL,eAAA,WACA,GAAA/4D,KAAA0H,KAAAqxD,eACA,MAAA/4D,MAAA0H,KAAAqxD,kBAmBAyL,EAAAlL,iBAAA,SAAAhgE,GACA,MAAAggE,GAAAt5D,KAAA+C,KAAA,KAAAzJ,IAcAkrE,EAAAkT,WAAA,SAAArT,EAAAC,GACA,MAAAzhE,GAAAL,KAAAk1E,WAAA13E,KAAA+C,KAAA,KAAAshE,EAAAC,IAEAzhE,EAAAmzD,EAAAoM,MAwCAv/D,EAAAL,KAAA6sE,oBA4BAxsE,EAAAL,KAAA+tE,aAaA1tE,EAAAL,KAAAiuE,oBACA5tE,EAAA80E,QAAA,SAAAp6E,EAAAoD,EAAAqF,EAAAE,GAgBA,IAfA,GAAA+J,GAAA,IACA5T,EAAA+lE,EAAA7kE,EAAA0S,EAAA,EAAAtP,EAAAsP,EAAA,EAAAA,KACAg4C,KACA6iB,EAAA9kE,EAAA,GAAA3N,eAAA,cAAAgB,GACA,OACAkE,EAAAyI,EAAA3M,GAAAkE,EACAoD,EAAAqF,EAAA3M,GAAAsH,IAEa,SAAAtH,GACb,OACAkE,EAAAyI,EAAA3M,GACAsH,EAAAuF,EAAA7M,KAGAu+E,EAAA,EACA3nE,GAAA,MAAA2nE,GAAA,CACA,OAAAv+E,GAAA,EAAAkhD,EAAAv0C,EAAA1M,OAA0CD,EAAAkhD,EAAQlhD,IAAA,CAClD,GAAAw1C,GAAAi8B,EAAAzxE,EACA,IAAAo3E,EAAAp0E,EAAAwyC,EAAAtxC,EAAAsxC,EAAAluC,GAAA,CACAi3E,IACA3vB,EAAApwD,KAAAg3C,EACA,QAGA+oC,IACA3nE,GAAA,EACA5T,EAAA+lE,EAAA7kE,EAAA0S,EAAA,EAAAtP,EAAAsP,EAAA,EAAAA,MAGA,QAAAA,EAAA,CAGA,GACAyrB,GADA5C,EAAAsgC,GAEA,KAAA//D,EAAA,EAAAkhD,EAAA0N,EAAA3uD,OAAuCD,EAAAkhD,EAAQlhD,IAAA,CAC/C,GAAAa,GAAA2I,EAAAi2B,IAAAv7B,EAAAoD,EAAAsnD,EAAA5uD,GAAAkE,EAAA0qD,EAAA5uD,GAAAsH,EACAm4B,GAAA5+B,IACA4+B,EAAA5+B,EACA+tD,EAAA5uD,GAAAy/B,IAAA5+B,EACAwhC,EAAAusB,EAAA5uD,IAGA,MAAAqiC,KAaA74B,EAAAL,KAAAkuE,kBAwBA7tE,EAAAL,KAAAq1E,aAAAjF,EACA/vE,EAAAL,KAAAs1E,mBAAA9E,EAeAnwE,EAAAL,KAAAu1E,cAAApE,EAmBA9wE,EAAAL,KAAAwyD,QAAA4e,EACA/wE,EAAAL,KAAA9J,IAAA++E,EAWA50E,EAAAL,KAAAw1E,WAAAjE,EAWAlxE,EAAAL,KAAA0nE,WAAAgK,EAWArxE,EAAAL,KAAAy1E,QAAAtI,EAUA9sE,EAAAL,KAAAU,IAAAk0E,EACAv0E,EAAAL,KAAA5B,WACAiC,EAAAL,KAAAgZ,MAAA0zD,IAgBArsE,EAAAygE,OAAA,SAAAzgE,EAAAwuD,EAAAG,EAAA5X,GACA,GAAAsd,GAAAt3D,KAAAa,IACA02D,EAAAv3D,KAAA+M,IAGAurE,EAAA,SAAAh9B,GAKA,GAJAl7C,KAAAk7C,SACAl7C,KAAAm4E,YACAn4E,KAAA1G,OAAA,EACA0G,KAAAG,KAAA,MACA+6C,EACA,OAAA7hD,GAAA,EAAAkhD,EAAAW,EAAA5hD,OAA8CD,EAAAkhD,EAAQlhD,IACtD6hD,EAAA7hD,KACA2G,UAAAk7C,MAAA5hD,QAAA0G,KAAAk7C,MAAAl7C,KAAAk7C,MAAA5hD,QAAA4hD,EAAA7hD,GACA2G,KAAA1G,WAKA8+E,EAAAF,EAAA9/E,SAQAggF,GAAAvgF,KAAA,WAGA,OAFAyE,GACAw8B,EACAz/B,EAAA,EAAAkhD,EAAAn5B,UAAA9nB,OAA8CD,EAAAkhD,EAAQlhD,IACtDiD,EAAA8kB,UAAA/nB,GACAiD,IACAw8B,EAAA94B,KAAAk7C,MAAA5hD,OACA0G,KAAA84B,GAAA94B,KAAAk7C,MAAApiB,GAAAx8B,EACA0D,KAAA1G,SAGA,OAAA0G,OASAo4E,EAAAp8E,IAAA,WAEA,MADAgE,MAAA1G,cAAA0G,WAAA1G,UACA0G,KAAAk7C,MAAAl/C,OAcAo8E,EAAAnrC,QAAA,SAAAx2C,EAAA4hF,GACA,OAAAh/E,GAAA,EAAAkhD,EAAAv6C,KAAAk7C,MAAA5hD,OAA+CD,EAAAkhD,EAAQlhD,IACvD,GAAA5C,EAAAW,KAAAihF,EAAAr4E,KAAAk7C,MAAA7hD,SAAA,EACA,MAAA2G,KAGA,OAAAA,OAuBAo4E,EAAAzQ,QAAA,SAAAjsB,EAAA/oC,EAAAw9C,EAAA15D,GACA,kBAAA05D,MAAA72D,SACA7C,EAAA05D,EACAA,EAAA3B,EAAA8B,QAEA5U,YAAA74C,GAAAmzD,EAAAqR,YACA5wE,EAAAilD,EAAAjlD,SACA05D,EAAAzU,EAAAyU,OACAx9C,EAAAw9C,EAAAV,IACA/T,IAAA34C,KAEA,IAAA83C,GAAAz5B,SACA,IAAAve,EAAAuuD,GAAA1V,EAAA,UAAA74C,EAAAuuD,GAAAvW,IAAAvhD,OAAA,YACA,GAAAg/E,IAAA,CAEA,IAAAC,GACAC,EAAA,WACAD,EACAv4E,KAAA3D,EAAAk8E,EAEAA,EAAAv4E,KAAA3D,GAGAS,EAAA,EACAnE,EAAAqH,KACAy4E,EAAAhiF,GAAA,aACAqG,GAAAnE,EAAAW,QACA7C,EAAAW,KAAA4I,MAGA,OAAAA,MAAAitC,QAAA,SAAAykB,EAAAr4D,GACAohD,IAAA2B,KAAA,oBAAAsV,EAAAh3D,GAAA89E,GACAF,EACAz9B,EAAAxhD,IAAAq4D,EAAAiW,QAAA5tE,MAAA23D,EAAA7W,EAAAxhD,IAEAq4D,EAAAiW,QAAAjsB,EAAA/oC,EAAAw9C,EAAAsoB,MAIAL,EAAA7R,OAAA,WACA,KAAAvmE,KAAA1G,QACA0G,KAAAhE,MAAAuqE,QAEA,OAAAvmE,OAqBAo4E,EAAAM,KAAA,SAAA31E,EAAA3G,EAAAC,GACA,GAAA/B,KACA,sBAAA8B,GACA4D,KAAAm4E,SAAAp1E,GAAA3G,MACS,CACT,GAAAu8E,GAAAt8E,GAAA0G,CACA/C,MAAAm4E,SAAAp1E,GAAA,SAAAqM,GACA9U,EAAAq+E,GAAAvpE,EACAhT,EAAA2G,KAAAzI,IAGA,MAAA0F,OAEAo4E,EAAAr1E,KAAA,SAAAnK,GACA,GAAAggF,KACA,QAAAtoE,KAAA1X,GACAoH,KAAAm4E,SAAA7nE,GACAtQ,KAAAm4E,SAAA7nE,GAAA1X,EAAA0X,IAEAsoE,EAAAtoE,GAAA1X,EAAA0X,EAGA,QAAAjX,GAAA,EAAAkhD,EAAAv6C,KAAAk7C,MAAA5hD,OAA+CD,EAAAkhD,EAAQlhD,IACvD2G,KAAAk7C,MAAA7hD,GAAA0J,KAAA61E,EAEA,OAAA54E,OAQAo4E,EAAAlsB,MAAA,WACA,KAAAlsD,KAAA1G,QACA0G,KAAAhE,OAcAo8E,EAAAx+E,OAAA,SAAAo2B,EAAAod,EAAAyrC,GACA7oD,IAAA,EAAAknC,EAAAl3D,KAAA1G,OAAA02B,EAAA,GAAAA,EACAod,EAAA8pB,EAAA,EAAAC,EAAAn3D,KAAA1G,OAAA02B,EAAAod,GACA,IAGA/zC,GAHA20C,KACA8qC,KACAj+B,IAEA,KAAAxhD,EAAA,EAAmBA,EAAA+nB,UAAA9nB,OAAsBD,IACzCwhD,EAAAhjD,KAAAupB,UAAA/nB,GAEA,KAAAA,EAAA,EAAmBA,EAAA+zC,EAAW/zC,IAC9By/E,EAAAjhF,KAAAmI,KAAAgwB,EAAA32B,GAEA,MAAcA,EAAA2G,KAAA1G,OAAA02B,EAAyB32B,IACvC20C,EAAAn2C,KAAAmI,KAAAgwB,EAAA32B,GAEA,IAAA0/E,GAAAl+B,EAAAvhD,MACA,KAAAD,EAAA,EAAmBA,EAAA0/E,EAAA/qC,EAAA10C,OAA0BD,IAC7C2G,KAAAk7C,MAAAlrB,EAAA32B,GAAA2G,KAAAgwB,EAAA32B,KAAA0/E,EAAAl+B,EAAAxhD,GAAA20C,EAAA30C,EAAA0/E,EAGA,KADA1/E,EAAA2G,KAAAk7C,MAAA5hD,OAAA0G,KAAA1G,QAAA8zC,EAAA2rC,EACA/4E,KAAA3G,UACA2G,MAAA3G,IAEA,WAAA6+E,GAAAY,IAWAV,EAAAY,QAAA,SAAAtnB,GACA,OAAAr4D,GAAA,EAAAkhD,EAAAv6C,KAAA1G,OAAyCD,EAAAkhD,EAAQlhD,IAAA,GAAA2G,KAAA3G,IAAAq4D,EAEjD,MADA1xD,MAAApG,OAAAP,EAAA,IACA,CAEA,WAEA++E,EAAA9R,YAAA,SAAA5U,GAEA,IADA,GAAAr4D,GAAA2G,KAAAk7C,MAAA5hD,OACAD,KACA2G,KAAAk7C,MAAA7hD,GAAAitE,YAAA5U,EAEA,OAAA1xD,OAEAo4E,EAAApjB,QAAA,WAKA,OAJAz3D,MACAoD,KACA8mC,KACAC,KACAruC,EAAA2G,KAAAk7C,MAAA5hD,OAAuCD,KAAK,IAAA2G,KAAAk7C,MAAA7hD,GAAAqrE,QAAA,CAC5C,GAAAtC,GAAApiE,KAAAk7C,MAAA7hD,GAAA27D,SACAz3D,GAAA1F,KAAAuqE,EAAA7kE,GACAoD,EAAA9I,KAAAuqE,EAAAzhE,GACA8mC,EAAA5vC,KAAAuqE,EAAA7kE,EAAA6kE,EAAA9qB,OACA5P,EAAA7vC,KAAAuqE,EAAAzhE,EAAAyhE,EAAAxX,QAMA,MAJArtD,GAAA45D,EAAAp9D,MAAA,EAAAwD,GACAoD,EAAAw2D,EAAAp9D,MAAA,EAAA4G,GACA8mC,EAAAyvB,EAAAn9D,MAAA,EAAA0tC,GACAC,EAAAwvB,EAAAn9D,MAAA,EAAA2tC,IAEAnqC,IACAoD,IACA8mC,KACAC,KACA4P,MAAA7P,EAAAlqC,EACAqtD,OAAAljB,EAAA/mC,EACAk3C,GAAAt6C,GAAAkqC,EAAAlqC,GAAA,EACAu6C,GAAAn3C,GAAA+mC,EAAA/mC,GAAA,IAGAy3E,EAAA58D,MAAA,SAAA3a,GACAA,EAAA,GAAAq3E,EACA,QAAA7+E,GAAA,EAAAkhD,EAAAv6C,KAAAk7C,MAAA5hD,OAA+CD,EAAAkhD,EAAQlhD,IACvDwH,EAAAhJ,KAAAmI,KAAAk7C,MAAA7hD,GAAAmiB,QAEA,OAAA3a,IAEAu3E,EAAAx3E,SAAA,WACA,oBAEAw3E,EAAAj4E,KAAA,MAEA0C,EAAAq1E,MACAr1E,EAAAlK,IAAA,WACA,GAAAA,GAAA,GAAAu/E,EAIA,OAHA92D,WAAA9nB,QACAX,EAAAd,KAAAkC,MAAApB,EAAA+G,MAAAtH,UAAA2D,MAAA3E,KAAAgqB,UAAA,IAEAzoB,KAiBAkK,EAAAygE,OAAA,SAAAzgE,EAAAwuD,EAAAG,EAAA5X,GAKA,QAAAq/B,GAAA38E,GACA,GAAApC,GAAAoC,EAAA,EACA,QAAApC,EAAAijB,eACA,eAAAjjB,EAAA,IACA,gBAAAA,EAAA,YACA,mBAAAoC,EAAAhD,QACAY,EAAA,EAAAoC,EAAA,GAAAA,EAAA,KAEApC,EAAA,EAEA,mBAAAoC,EAAAhD,QACAY,EAAA,IAAAoC,EAAA,GAAAA,EAAA,IACa,GAAAA,EAAAhD,QACbY,EAAA,MAEAA,EAAA,IAIA,QAAAg/E,GAAApJ,EAAAG,EAAAjb,GACAib,EAAA7d,EAAA6d,GAAAzc,QAAA,gBAAmCsc,GACnCA,EAAAjtE,EAAAixD,qBAAAgc,OACAG,EAAAptE,EAAAixD,qBAAAmc,MAMA,KALA,GAGApzE,GAAAs+C,EACAg+B,EAAAC,EAJAC,EAAAz5E,KAAAa,IAAAqvE,EAAAx2E,OAAA22E,EAAA32E,QACA+qE,KACAC,KACAjrE,EAAA,EAEcA,EAAAggF,EAAehgF,IAAA,CAG7B,GAFA8/E,EAAArJ,EAAAz2E,IAAA4/E,EAAAhJ,EAAA52E,IACA+/E,EAAAnJ,EAAA52E,IAAA4/E,EAAAE,GACAA,EAAA,IAAAC,EAAA,IACA,KAAAD,EAAA,GAAAh8D,gBAAAg8D,EAAA,IAAAC,EAAA,IAAAD,EAAA,IAAAC,EAAA,KACA,KAAAD,EAAA,GAAAh8D,gBAAAg8D,EAAA,IAAAC,EAAA,IAAAD,EAAA,IAAAC,EAAA,IACA,CACAtJ,EAAAjtE,EAAAmzD,EAAArC,iBAAAmc,EAAA9a,KACAib,EAAAptE,EAAAmzD,EAAArC,iBAAAsc,EAAAjb,KACAqP,IAAA,IAAAyL,EAAA1zE,EAAA0zE,EAAAzzE,EAAAyzE,EAAA30E,EAAA20E,EAAA3+D,EAAA2+D,EAAAh5E,EAAAg5E,EAAA73D,IACAqsD,IAAA,IAAA2L,EAAA7zE,EAAA6zE,EAAA5zE,EAAA4zE,EAAA90E,EAAA80E,EAAA9+D,EAAA8+D,EAAAn5E,EAAAm5E,EAAAh4D;AACA,MAIA,IAFAosD,EAAAhrE,MACAirE,EAAAjrE,MACAwD,EAAA,EAAAs+C,EAAAv7C,KAAAa,IAAA04E,EAAA7/E,OAAA8/E,EAAA9/E,QAA8DuD,EAAAs+C,EAAQt+C,IACtEA,IAAAs8E,KAAA9U,EAAAhrE,GAAAwD,GAAAs8E,EAAAt8E,IACAA,IAAAu8E,KAAA9U,EAAAjrE,GAAAwD,GAAAu8E,EAAAv8E,IAGA,OACAwnE,KAAAiV,EAAAjV,GACAC,GAAAgV,EAAAhV,GACArsD,EAAAw/D,EAAApT,IAGA,QAAAsH,GAAA5iD,GACA,MAAAA,GAEA,QAAA6iD,GAAAC,GACA,gBAAA9iD,GACA,OAAAA,EAAAopB,QAAA,GAAA05B,GAGA,QAAA0N,GAAAxwD,GACA,MAAAA,GAAAqT,KAAA,KAEA,QAAAo9C,GAAAle,GACA,MAAAz4D,GAAA23D,IAAAc,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAEA,QAAAmc,GAAAj1E,GACA,GAAAnJ,GAAAkhD,EAAA19C,EAAAs+C,EAAAxW,EAAAvoC,EAAAkU,EAAA,EAAAjU,IACA,KAAAhD,EAAA,EAAAkhD,EAAA/3C,EAAAlJ,OAAqCD,EAAAkhD,EAAQlhD,IAAA,CAG7C,IAFAsrC,EAAA,IACAvoC,GAAA,IAAAoG,EAAAnJ,GAAA,QACAwD,EAAA,EAAAs+C,EAAA34C,EAAAnJ,GAAAC,OAA4CuD,EAAAs+C,EAAQt+C,IACpDT,EAAAS,GAAA,OAAAyT,KAAA,GAEAq0B,IAAAvoC,EAAA,IACAC,EAAAhD,GAAAsrC,EAEA,MAAA80C,UAAA,yCAAAp9E,EAAA,MAEA,QAAAi9E,GAAA92E,GAEA,OADAmiC,MACAtrC,EAAA,EAAAkhD,EAAA/3C,EAAAlJ,OAAyCD,EAAAkhD,EAAQlhD,IACjD,OAAAwD,GAAA,EAAAs+C,EAAA34C,EAAAnJ,GAAAC,OAAgDuD,EAAAs+C,EAAQt+C,IACxD8nC,EAAA9sC,KAAA2K,EAAAnJ,GAAAwD,GAGA,OAAA8nC,GAEA,QAAA+0C,GAAA14E,GACA,MAAAyxD,UAAAhyC,WAAAzf,IAEA,QAAA24E,GAAAC,EAAAC,GACA,SAAAh3E,EAAAuuD,GAAAwoB,EAAA,WAAA/2E,EAAAuuD,GAAAyoB,EAAA,WAGAD,EAAAh5E,YAAAi5E,EAAAj5E,WArGA,GAAAy6C,MACA8wB,EAAA,WACA/Z,EAAAzX,MACAU,GAAAklB,OAAAllB,EAAAwL,KAAA,SAoGAwK,EAAAj5D,UAAA4vE,MAAA,SAAA9vE,EAAAmE,GACA,MAAAo+C,KAAA,kBAAAz6C,KAAA9H,EAAAmE,GAAAi+C,gBAEAG,IAAAe,GAAA,2BAAAtjD,EAAAmE,GACA,GAAA6gC,GAAAC,EAAA/gC,EAAAg2D,EAAApyD,KAAA+C,KAAA7K,IAAA,IACAw5D,EAAA1xD,IACA,IAAA05E,EAAAt9E,IAAAs9E,EAAAr9E,GACA,OACAgoE,KAAA5jD,WAAArkB,GACAkoE,GAAA7jD,WAAApkB,GACA4b,EAAA0zD,EAGA,cAAAtwB,EAAAnjD,GAGA,MAFAglC,GAAAr6B,EAAAg4D,MAAAz+D,GACA+gC,EAAAt6B,EAAAg4D,MAAAx+D,IAEAgoE,MAAAnnC,EAAAjtB,EAAAitB,EAAAxnB,EAAAwnB,EAAA7gC,EAAA6gC,EAAAq9B,SACA+J,IAAAnnC,EAAAltB,EAAAktB,EAAAznB,EAAAynB,EAAA9gC,EAAA8gC,EAAAo9B,SACAtiD,EAAAuhE,EAGA,eAAAthF,EAGA,MAFAglC,GAAAl9B,KAAA+C,KAAA7K,GAAAoyE,GAAAhvB,MAAA,KAAAp4C,IAAAF,QACAm6B,EAAA9gC,EAAAi/C,MAAA,KAAAp4C,IAAAF,SAEAqhE,KAAAnnC,EACAonC,GAAAnnC,EACAllB,EAAAshE,EAGA,iBAAArhF,GAAA,qBAAAA,GAAA,oBAAAA,EAOA,MANAmE,aAAAwG,GAAAkxD,SACA13D,IAAAopE,qBAEA5iE,EAAAmzD,EAAAoG,YAAAvgB,KAAAx/C,KACAA,EAAAwG,EAAAmzD,EAAA1C,oBAAAj3D,IAEA68E,EAAA98E,EAAAC,EAAA,WACA,MAAAq1D,GAAAsD,QAAA,IAGA,SAAA98D,GAAA,QAAAA,EAEA,MADAglC,GAAAr6B,EAAAL,KAAAy1E,QAAA77E,EAAAC,IAEAgoE,KAAAiV,EAAAp8C,EAAA,IACAonC,GAAAgV,EAAAp8C,EAAA,IACAjlB,EAAAw/D,EAAAv6C,EAAA,IAGA,cAAAhlC,EAGA,MAFAglC,GAAAk1B,EAAAh2D,GAAAk/C,MAAAz4C,EAAAmzD,EAAA/b,WACA9c,EAAAi1B,EAAA/1D,GAAAi/C,MAAAz4C,EAAAmzD,EAAA/b,YAEAoqB,KAAAnnC,EACAonC,GAAAnnC,EACAllB,EAAA,SAAA8Q,GAAmC,MAAAA,IAGnC,IAAAyjD,GAAApwE,EAAA+iC,MAAAgtC,GACA2N,EAAA1nB,EAAA/1D,GAAA8iC,MAAAgtC,EACA,OAAAK,IAAAmN,EAAAnN,EAAAsN,IAEAzV,KAAA5jD,WAAArkB,GACAkoE,GAAA7jD,WAAApkB,GACA4b,EAAA2zD,EAAAY,KAIAnI,KAAArkE,KAAAwmE,KAAAtuE,GACAosE,GAAAtkE,KAAAwmE,KAAAtuE,EAAAmE,GACA4b,EAAA0zD,OAmBA9oE,EAAAygE,OAAA,SAAAzgE,EAAAwuD,EAAAG,EAAA5X,GAmTA,OAlTA4qB,GAAAnT,EAAAj5D,UACA4hD,EAAA,iBACA+/B,GAAA,eAAAngC,GAAA0X,KACAjX,GACA,sDACA,0DACA,eAEA2/B,GACAC,UAAA,aACAC,UAAA,YACAC,QAAA,YAEAC,GAAA,SAAAvrC,EAAA6iB,GACA,GAAAx5D,GAAA,KAAA22C,EAAA,yBACAyiB,EAAAI,KAAAhqD,KAAAgqD,EAAAhqD,KAAA8uD,cAAA5c,EAAA0X,GACA,OAAAA,GAAAp5D,IAAAo5D,GAAAmL,gBAAA,0BAAAvkE,KAKAmiF,EAAA,WACA,MAAAr6E,MAAAs6E,cAAAC,kBAKAC,EAAA,WACA,MAAAx6E,MAAAs6E,cAAAG,mBAEAC,EAAA,SAAA15E,EAAAb,EAAA9I,EAAAuL,GACA,GAAA+3E,GAAAZ,GAAAC,EAAA75E,GAAA65E,EAAA75E,KACA8X,EAAA,SAAAnhB,GACA,GAAA8jF,GAAAR,EAAA,IAAAx3E,GACAi4E,EAAAT,EAAA,IAAAx3E,EACA,IAAAm3E,GAAAC,EAAAhgC,GAAA75C,GACA,OAAA9G,GAAA,EAAAkhD,EAAAzjD,EAAAgkF,eAAAhkF,EAAAgkF,cAAAxhF,OAAmFD,EAAAkhD,EAAQlhD,IAC3F,GAAAvC,EAAAgkF,cAAAzhF,GAAAypE,QAAA9hE,KAAAs7D,SAAAxlE,EAAAgkF,cAAAzhF,GAAAypE,QAAA,CACA,GAAAiY,GAAAjkF,CACAA,KAAAgkF,cAAAzhF,GACAvC,EAAAwjF,cAAAS,EACAjkF,EAAAyjF,eAAAF,EACAvjF,EAAA2jF,gBAAAD,CACA,OAIA,GAAAj9E,GAAAzG,EAAAkkF,QAAAH,EACAl6E,EAAA7J,EAAAmkF,QAAAL,CACA,OAAAvjF,GAAAD,KAAAwL,EAAA9L,EAAAyG,EAAAoD,GASA,OANAR,KAAAw6E,GACA35E,EAAAk6E,iBAAA/6E,EAAA8X,GAAA,GAGAjX,EAAAk6E,iBAAAP,EAAA1iE,GAAA,GAEA,WAMA,MALA9X,KAAAw6E,GACA35E,EAAAm6E,oBAAAh7E,EAAA8X,GAAA,GAGAjX,EAAAm6E,oBAAAR,EAAA1iE,GAAA,IACA,IAGAmjE,KACAC,EAAA,SAAAvkF,GAOA,IANA,GAIAwkF,GAJA/9E,EAAAzG,EAAAkkF,QACAr6E,EAAA7J,EAAAmkF,QACAL,EAAAR,EAAA,KACAS,EAAAT,EAAA,KAEAv9E,EAAAu+E,EAAA9hF,OACAuD,KAAA,CAEA,GADAy+E,EAAAF,EAAAv+E,GACAk9E,GAGA,IAFA,GACAwB,GADAliF,EAAAvC,EAAA0kF,SAAA1kF,EAAA0kF,QAAAliF,OAEAD,KAEA,GADAkiF,EAAAzkF,EAAA0kF,QAAAniF,GACAkiF,EAAAE,YAAAH,EAAA5pB,GAAAgqB,MAAAhhF,IAAA4gF,EAAA5pB,GAAAhqD,KAAA40D,SAAAif,EAAAzY,QAAA,CACAvlE,EAAAg+E,EAAAP,QACAr6E,EAAA46E,EAAAN,SACAnkF,EAAAwjF,cAAAxjF,EAAAwjF,cAAAxjF,GAAAyjF,gBACA,YAIAzjF,GAAAyjF,gBAEA,IAAA7yE,GAAA4zE,EAAA5pB,GAAAhqD,IAEAA,GAAA2+D,YACA3+D,EAAA6sD,WACA7sD,EAAAozD,MAAA0D,OAOAjhE,IAAAs9E,EACAl6E,GAAAi6E,EACAngC,IAAA,kBAAA6gC,EAAA5pB,GAAAh3D,GAAA4gF,EAAAK,YAAAL,EAAA5pB,GAAAn0D,EAAA+9E,EAAA5pB,GAAAgqB,MAAAn+E,EAAAoD,EAAA26E,EAAA5pB,GAAAgqB,MAAA/6E,EAAApD,EAAAoD,EAAA7J,KAGA8kF,EAAA,SAAA9kF,GACA+L,EAAAg5E,YAAAR,GAAAS,UAAAF,EAGA,KAFA,GACAN,GADAjiF,EAAA+hF,EAAA9hF,OAEAD,KACAiiF,EAAAF,EAAA/hF,GACAiiF,EAAA5pB,GAAAgqB,SACAjhC,IAAA,iBAAA6gC,EAAA5pB,GAAAh3D,GAAA4gF,EAAAS,WAAAT,EAAAU,aAAAV,EAAAK,YAAAL,EAAA5pB,GAAA56D,GACA2jD,IAAAsB,IAAA,eAAAu/B,EAAA5pB,GAAAh3D,GAEA0gF,OA4LA/hF,EAAAghD,EAAA/gD,OAA+BD,MAC/B,SAAA4iF,GACAp5E,EAAAo5E,GAAAzX,EAAAyX,GAAA,SAAA5kF,EAAAqjD,GACA,GAAA73C,EAAAuuD,GAAA/5D,EAAA,YACA2I,KAAAq6C,OAAAr6C,KAAAq6C,WACAr6C,KAAAq6C,OAAAxiD,MACAK,KAAA+jF,EACAhkE,EAAA5gB,EACA2kD,OAAA0+B,EAAA16E,KAAA0H,MAAAqvD,SAAAklB,EAAA5kF,EAAAqjD,GAAA16C,YAGA,QAAA3G,GAAA,EAAAkhD,EAAAv6C,KAAAq6C,OAAA/gD,OAA4DD,EAAAkhD,EAAQlhD,IAAA,GAAA2G,KAAAq6C,OAAAhhD,GAAAnB,MAAA+jF,EACpE,IACAj8E,KAAAq6C,OAAAhhD,GAAA4e,EAAA7gB,KAAA4I,MACyB,MAAAlJ,IAGzB,MAAAkJ,OAEA6C,EAAA,KAAAo5E,GACAzX,EAAA,KAAAyX,GAAA,SAAA5kF,GAGA,IAFA,GAAAgjD,GAAAr6C,KAAAq6C,WACAngD,EAAAmgD,EAAA/gD,OACAY,KAAA,GAAAmgD,EAAAngD,GAAAhC,MAAA+jF,IACA5hC,EAAAngD,GAAA+d,GAAA5gB,OAIA,MAHAgjD,GAAAngD,GAAA8hD,SACA3B,EAAAzgD,OAAAM,EAAA,IACAmgD,EAAA/gD,cAAA0G,MAAAq6C,OACAr6C,IAEA,OAAAA,QAESq6C,EAAAhhD,GAaTmrE,GAAA0X,MAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,MAAAt8E,MAAAu8E,UAAAJ,EAAAE,GAAAG,SAAAJ,EAAAE,GAAAD,IAWA7X,EAAAiY,QAAA,SAAAN,EAAAC,GACA,MAAAp8E,MAAA08E,YAAAP,GAAAQ,WAAAP,GAEA,IAAAQ,KAmCApY,GAAA4W,KAAA,SAAAyB,EAAAC,EAAAC,EAAApB,EAAAK,EAAAD,GAYA,QAAA9rB,GAAAn5D,EAAAyG,EAAAoD,IACA7J,EAAAwjF,eAAAxjF,GAAAyjF,iBACA7oB,EAAAgqB,MAAAn+E,IACAm0D,EAAAgqB,MAAA/6E,IACA+wD,EAAAgqB,MAAAhhF,GAAA5D,EAAA2kF,YACAL,EAAA9hF,QAAAuJ,EAAAq3E,UAAAmB,GAAAlB,QAAAyB,GACAR,EAAAvjF,MAAuB65D,KAAAiqB,aAAAK,cAAAD,cACvBe,GAAAriC,IAAAe,GAAA,mBAAAkW,EAAAh3D,GAAAoiF,GACAD,GAAApiC,IAAAe,GAAA,kBAAAkW,EAAAh3D,GAAAmiF,GACAE,GAAAtiC,IAAAe,GAAA,iBAAAkW,EAAAh3D,GAAAqiF,GACAtiC,IAAA,mBAAAiX,EAAAh3D,GAAAshF,GAAAL,GAAAjqB,EAAAn0D,EAAAoD,EAAA7J,GAEA,QAAAkmF,GAAAlmF,EAAAyG,EAAAoD,GACA85C,IAAA,iBAAAiX,EAAAh3D,GAAAg3D,EAAA56D,EAAAyG,EAAAoD,GAxBA,GAAA+wD,GAAA1xD,IACA,KAAAohB,UAAA9nB,OAAA,CACA,GAAA2jF,EACA,OAAAvrB,GAAA0pB,KAAA,SAAAv+C,EAAAC,GACA98B,KAAA+C,MACAI,UAAA85E,KAAA,UAAApgD,EAAAC,MAEa,WACbmgD,EAAAj9E,KAAAmD,YAAAoiE,QAsBA,MAJA9qB,KAAAe,GAAA,iBAAAkW,EAAAh3D,GAAAu1D,GACAyB,EAAAgqB,SACAkB,EAAA/kF,MAAwB65D,KAAAzB,QAAA+sB,SACxBtrB,EAAAuoB,UAAA+C,GACAtrB,GAkBA8S,EAAA0Y,OAAA,WAEA,IADA,GAAA7jF,GAAAujF,EAAAtjF,OACAD,KAAAujF,EAAAvjF,GAAAq4D,IAAA1xD,OACAA,KAAAm9E,YAAAP,EAAAvjF,GAAA2jF,MACAJ,EAAAhjF,OAAAP,EAAA,GACAohD,IAAAuB,OAAA,eAAAh8C,KAAAtF,IACA+/C,IAAAuB,OAAA,iBAAAh8C,KAAAtF,IAGA,QADAkiF,EAAAtjF,QAAAuJ,EAAAg5E,YAAAR,GAAAS,UAAAF,GACA57E,QAiBA6C,EAAAygE,OAAA,SAAAzgE,EAAAwuD,EAAAG,EAAA5X,GACA,GACAwjC,IADA/rB,EAAAj5D,UACAo5D,EAAAp5D,WACAilF,EAAA,kBACAjrB,EAAAzX,OACA8W,EAAA5uD,EAAAmzD,EAAAvE,CACA5uD,GAAAg8D,UAgBAue,EAAAve,OAAA,SAAAye,GACA,GAAA1nB,GAAA51D,IACA,QAAA41D,EAAAz1D,OACAy1D,UAEA,IAAA39C,GAAApV,EAAAs6D,MAAA/K,EAAAkrB,IACA5iF,EAAAmI,EAAAmzD,EAAAt7D,KAGAmkE,GAFAjJ,EAAAluD,KAAAylE,YACAvX,EAAAluD,KAAA0lE,aACA3b,EAAA,UAOA,OANAA,GAAAoN,GACAnkE,KACA6iF,YAAA,mBAEA1e,EAAAxJ,YAAAp9C,EAAAvQ,MACAkuD,EAAAlB,KAAAW,YAAAwJ,GACA,GAAAxN,GAAAwN,IAGApkB,IAAAe,GAAA,sCACAf,IAAAX,MACA,IAAAr8C,GAAAg0D,EAAAzxD,KAAA0H,KAAA,SACA,IAAAjK,EAAA,CACA,GAAA0hC,GAAAizB,EAAA30D,GAAA0hC,MAAAk+C,EACA,OAAAl+C,IAAAt8B,EAAA2xD,OAAAr1B,EAAA,OAGAsb,IAAAe,GAAA,iCAAA5iD,GACA,GAAAA,YAAAy4D,IAAA,UAAAz4D,EAAAuH,KAAA,CACAs6C,IAAAX,MACA,IAAAp/C,GAAA9B,EAAA8O,KAAAhN,EACAA,KACA+2D,EAAA74D,EAAA8O,MAA+BhN,GAAA9B,EAAA8B,KAC/BA,EAAA9B,EAAA8B,IAEA+2D,EAAAzxD,KAAA0H,MACAm3D,OAAAh8D,EAAA+0D,IAAAl9D,KAGA9B,GAAA,QAAAA,IACA6hD,IAAAX,OACA95C,KAAA0H,KAAA6qD,gBAAA,aAkBA1vD,EAAAg8D,OAAA2e,KAAA,SAAAjgF,EAAAoD,GACA,MAAApD,IACAA,EAAA,EAEA,IAAAkgF,GAAA,MAAA98E,EAAApD,KAAAoD,EACA,OAAAkC,GAAAg1D,OAAA,0CACA4lB,SAGA56E,EAAAg8D,OAAA2e,KAAA58E,SAAA,WACA,MAAAZ,SA6BA6C,EAAAg8D,OAAA6e,OAAA,SAAA7gD,EAAAC,EAAA0gD,EAAA3iB,EAAAN,GAyBA,MAxBA,gBAAAijB,KACA3iB,EAAA2iB,EACAjjB,EAAAM,EACA2iB,EAAA,GAEA,gBAAA3iB,KACAN,EAAAM,EACAA,EAAA,QAEAA,KAAA,OACA,MAAA2iB,IACAA,EAAA,GAEA,MAAAjjB,IACAA,EAAA,GAEA,MAAA19B,IACAA,EAAA,EACAC,EAAA,GAEA,MAAAA,IACAA,EAAAD,GAEAg+B,EAAAh4D,EAAAg4D,SACAh4D,EAAAg1D,OAAA,mVACAgD,QACAh+B,KACAC,KACA0gD,OACAjjB,aAGA13D,EAAAg8D,OAAA6e,OAAA98E,SAAA,WACA,MAAAZ,SAWA6C,EAAAg8D,OAAA8e,UAAA,SAAAnwE,GAIA,MAHA,OAAAA,IACAA,EAAA,GAEA3K,EAAAg1D,OAAA,qGACAz7D,EAAA,eAAAoR,GACAnR,EAAA,eAAAmR,GACArS,EAAA,eAAAqS,GACA2D,EAAA,eAAA3D,GACA1W,EAAA,eAAA0W,GACAyK,EAAA,eAAAzK,GACAkI,EAAA,eAAAlI,GACAnS,EAAA,eAAAmS,MAGA3K,EAAAg8D,OAAA8e,UAAA/8E,SAAA,WACA,MAAAZ,SAWA6C,EAAAg8D,OAAA+e,MAAA,SAAApwE,GAIA,MAHA,OAAAA,IACAA,EAAA,GAEA3K,EAAAg1D,OAAA,qGACAz7D,EAAA,aAAAoR,GACAnR,EAAA,aAAAmR,GACArS,EAAA,aAAAqS,GACA2D,EAAA,aAAA3D,GACA1W,EAAA,aAAA0W,GACAyK,EAAA,aAAAzK,GACAkI,EAAA,aAAAlI,GACAnS,EAAA,aAAAmS,GACAnU,EAAA,aAAAmU,MAGA3K,EAAAg8D,OAAA+e,MAAAh9E,SAAA,WACA,MAAAZ,SAWA6C,EAAAg8D,OAAAgf,SAAA,SAAArwE,GAIA,MAHA,OAAAA,IACAA,EAAA,GAEA3K,EAAAg1D,OAAA,sDACArqD,OAAA,EAAAA,KAGA3K,EAAAg8D,OAAAgf,SAAAj9E,SAAA,WACA,MAAAZ,SAWA6C,EAAAg8D,OAAAif,UAAA,SAAAxwC,GAEA,MADAA,MAAA,EACAzqC,EAAAg1D,OAAA,sDACAvqB,WAGAzqC,EAAAg8D,OAAAif,UAAAl9E,SAAA,WACA,MAAAZ,SAWA6C,EAAAg8D,OAAAh5B,OAAA,SAAAr4B,GAKA,MAJA,OAAAA,IACAA,EAAA,GAGA3K,EAAAg1D,OAAA,uNACArqD,SACAuwE,QAAA,EAAAvwE,KAGA3K,EAAAg8D,OAAAh5B,OAAAjlC,SAAA,WACA,MAAAZ,SAWA6C,EAAAg8D,OAAAmf,WAAA,SAAAxwE,GAIA,MAHA,OAAAA,IACAA,EAAA,GAEA3K,EAAAg1D,OAAA,0KACArqD,YAGA3K,EAAAg8D,OAAAmf,WAAAp9E,SAAA,WACA,MAAAZ,SAWA6C,EAAAg8D,OAAAof,SAAA,SAAAzwE,GAIA,MAHA,OAAAA,IACAA,EAAA,GAEA3K,EAAAg1D,OAAA,4OACArqD,SACAuwE,QAAA,GAAAvwE,EAAA,KAGA3K,EAAAg8D,OAAAof,SAAAr9E,SAAA,WACA,MAAAZ,WAiBA6C,EAAAygE,OAAA,SAAAzgE,EAAAwuD,EAAAG,EAAA5X,EAAAwc,GACA,GAAAgM,GAAAv/D,EAAAmzD,EAAAoM,IACAhR,EAAAvuD,EAAAuuD,GACA8sB,EAAA,sBACAt9E,EAAA,WACA,UAAAZ,KAAA68B,GAAA,IAAA78B,KAAA88B,GAgBAu0B,GAAAj5D,UAAA+lF,SAAA,SAAAzsB,EAAA0sB,GACA,MAAAA,GAAAhtB,EAAAM,EAAA,YACA0sB,EAAA1sB,EACAA,EAAA,MAEAA,KAAA1xD,KAAA41D,KACA,IAAAvqB,GAAAqmB,EAAAsD,QAAAtD,EAAAsD,UAAAoN,EAAA1Q,GACAsC,EAAAh0D,KAAAg1D,UACArwB,IAGA,QAFAy5C,OAAAj/C,MAAA++C,GACAE,MAAA,GAAAjhE,cAAA,KAEA,QACAwnB,EAAA9H,GAAA,EACA8H,EAAA7H,GAAAuO,EAAA1qC,EAAAqzD,EAAArzD,CACA,MACA,SACAgkC,EAAA9H,GAAA,EACA8H,EAAA7H,GAAAuO,EAAA3D,GAAAssB,EAAAtsB,EACA,MACA,SACA/C,EAAA9H,GAAA,EACA8H,EAAA7H,GAAAuO,EAAAyM,GAAAkc,EAAAlc,EACA,MACA,SACAnT,EAAA9H,GAAAwO,EAAA9tC,EAAAy2D,EAAAz2D,EACAonC,EAAA7H,GAAA,CACA,MACA,SACA6H,EAAA9H,GAAAwO,EAAA5D,GAAAusB,EAAAvsB,GACA9C,EAAA7H,GAAA,CACA,MACA,SACA6H,EAAA9H,GAAAwO,EAAAwM,GAAAmc,EAAAnc,GACAlT,EAAA7H,GAAA,EAIA,MADA6H,GAAA/jC,WACA+jC,GAgBA0sB,EAAAj5D,UAAAimF,MAAA,SAAA3sB,EAAA0sB,GACA,MAAAp+E,MAAAmD,UAAA,MAAAnD,KAAAm+E,SAAAzsB,EAAA0sB,OAIAxiF,EAAAyB,QAAAwF","file":"d0f1c55809dfbbfeb7ad.worker.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// Copied from https://github.com/facebook/react/blob/bef45b0/src/shared/utils/canDefineProperty.js\r\n/******/ \tvar canDefineProperty = false;\r\n/******/ \ttry {\r\n/******/ \t\tObject.defineProperty({}, \"x\", {\r\n/******/ \t\t\tget: function() {}\r\n/******/ \t\t});\r\n/******/ \t\tcanDefineProperty = true;\r\n/******/ \t} catch(x) {\r\n/******/ \t\t// IE will fail on defineProperty\r\n/******/ \t}\r\n/******/ \t\r\n/******/ \tvar hotApplyOnUpdate = true;\r\n/******/ \tvar hotCurrentHash = \"d0f1c55809dfbbfeb7ad\"; // eslint-disable-line no-unused-vars\r\n/******/ \tvar hotCurrentModuleData = {};\r\n/******/ \tvar hotCurrentParents = []; // eslint-disable-line no-unused-vars\r\n/******/ \t\r\n/******/ \tfunction hotCreateRequire(moduleId) { // eslint-disable-line no-unused-vars\r\n/******/ \t\tvar me = installedModules[moduleId];\r\n/******/ \t\tif(!me) return __webpack_require__;\r\n/******/ \t\tvar fn = function(request) {\r\n/******/ \t\t\tif(me.hot.active) {\r\n/******/ \t\t\t\tif(installedModules[request]) {\r\n/******/ \t\t\t\t\tif(installedModules[request].parents.indexOf(moduleId) < 0)\r\n/******/ \t\t\t\t\t\tinstalledModules[request].parents.push(moduleId);\r\n/******/ \t\t\t\t\tif(me.children.indexOf(request) < 0)\r\n/******/ \t\t\t\t\t\tme.children.push(request);\r\n/******/ \t\t\t\t} else hotCurrentParents = [moduleId];\r\n/******/ \t\t\t} else {\r\n/******/ \t\t\t\tconsole.warn(\"[HMR] unexpected require(\" + request + \") from disposed module \" + moduleId);\r\n/******/ \t\t\t\thotCurrentParents = [];\r\n/******/ \t\t\t}\r\n/******/ \t\t\treturn __webpack_require__(request);\r\n/******/ \t\t};\r\n/******/ \t\tfor(var name in __webpack_require__) {\r\n/******/ \t\t\tif(Object.prototype.hasOwnProperty.call(__webpack_require__, name)) {\r\n/******/ \t\t\t\tif(canDefineProperty) {\r\n/******/ \t\t\t\t\tObject.defineProperty(fn, name, (function(name) {\r\n/******/ \t\t\t\t\t\treturn {\r\n/******/ \t\t\t\t\t\t\tconfigurable: true,\r\n/******/ \t\t\t\t\t\t\tenumerable: true,\r\n/******/ \t\t\t\t\t\t\tget: function() {\r\n/******/ \t\t\t\t\t\t\t\treturn __webpack_require__[name];\r\n/******/ \t\t\t\t\t\t\t},\r\n/******/ \t\t\t\t\t\t\tset: function(value) {\r\n/******/ \t\t\t\t\t\t\t\t__webpack_require__[name] = value;\r\n/******/ \t\t\t\t\t\t\t}\r\n/******/ \t\t\t\t\t\t};\r\n/******/ \t\t\t\t\t}(name)));\r\n/******/ \t\t\t\t} else {\r\n/******/ \t\t\t\t\tfn[name] = __webpack_require__[name];\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t}\r\n/******/ \t\t}\r\n/******/ \t\r\n/******/ \t\tfunction ensure(chunkId, callback) {\r\n/******/ \t\t\tif(hotStatus === \"ready\")\r\n/******/ \t\t\t\thotSetStatus(\"prepare\");\r\n/******/ \t\t\thotChunksLoading++;\r\n/******/ \t\t\t__webpack_require__.e(chunkId, function() {\r\n/******/ \t\t\t\ttry {\r\n/******/ \t\t\t\t\tcallback.call(null, fn);\r\n/******/ \t\t\t\t} finally {\r\n/******/ \t\t\t\t\tfinishChunkLoading();\r\n/******/ \t\t\t\t}\r\n/******/ \t\r\n/******/ \t\t\t\tfunction finishChunkLoading() {\r\n/******/ \t\t\t\t\thotChunksLoading--;\r\n/******/ \t\t\t\t\tif(hotStatus === \"prepare\") {\r\n/******/ \t\t\t\t\t\tif(!hotWaitingFilesMap[chunkId]) {\r\n/******/ \t\t\t\t\t\t\thotEnsureUpdateChunk(chunkId);\r\n/******/ \t\t\t\t\t\t}\r\n/******/ \t\t\t\t\t\tif(hotChunksLoading === 0 && hotWaitingFiles === 0) {\r\n/******/ \t\t\t\t\t\t\thotUpdateDownloaded();\r\n/******/ \t\t\t\t\t\t}\r\n/******/ \t\t\t\t\t}\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t});\r\n/******/ \t\t}\r\n/******/ \t\tif(canDefineProperty) {\r\n/******/ \t\t\tObject.defineProperty(fn, \"e\", {\r\n/******/ \t\t\t\tenumerable: true,\r\n/******/ \t\t\t\tvalue: ensure\r\n/******/ \t\t\t});\r\n/******/ \t\t} else {\r\n/******/ \t\t\tfn.e = ensure;\r\n/******/ \t\t}\r\n/******/ \t\treturn fn;\r\n/******/ \t}\r\n/******/ \t\r\n/******/ \tfunction hotCreateModule(moduleId) { // eslint-disable-line no-unused-vars\r\n/******/ \t\tvar hot = {\r\n/******/ \t\t\t// private stuff\r\n/******/ \t\t\t_acceptedDependencies: {},\r\n/******/ \t\t\t_declinedDependencies: {},\r\n/******/ \t\t\t_selfAccepted: false,\r\n/******/ \t\t\t_selfDeclined: false,\r\n/******/ \t\t\t_disposeHandlers: [],\r\n/******/ \t\r\n/******/ \t\t\t// Module API\r\n/******/ \t\t\tactive: true,\r\n/******/ \t\t\taccept: function(dep, callback) {\r\n/******/ \t\t\t\tif(typeof dep === \"undefined\")\r\n/******/ \t\t\t\t\thot._selfAccepted = true;\r\n/******/ \t\t\t\telse if(typeof dep === \"function\")\r\n/******/ \t\t\t\t\thot._selfAccepted = dep;\r\n/******/ \t\t\t\telse if(typeof dep === \"object\")\r\n/******/ \t\t\t\t\tfor(var i = 0; i < dep.length; i++)\r\n/******/ \t\t\t\t\t\thot._acceptedDependencies[dep[i]] = callback;\r\n/******/ \t\t\t\telse\r\n/******/ \t\t\t\t\thot._acceptedDependencies[dep] = callback;\r\n/******/ \t\t\t},\r\n/******/ \t\t\tdecline: function(dep) {\r\n/******/ \t\t\t\tif(typeof dep === \"undefined\")\r\n/******/ \t\t\t\t\thot._selfDeclined = true;\r\n/******/ \t\t\t\telse if(typeof dep === \"number\")\r\n/******/ \t\t\t\t\thot._declinedDependencies[dep] = true;\r\n/******/ \t\t\t\telse\r\n/******/ \t\t\t\t\tfor(var i = 0; i < dep.length; i++)\r\n/******/ \t\t\t\t\t\thot._declinedDependencies[dep[i]] = true;\r\n/******/ \t\t\t},\r\n/******/ \t\t\tdispose: function(callback) {\r\n/******/ \t\t\t\thot._disposeHandlers.push(callback);\r\n/******/ \t\t\t},\r\n/******/ \t\t\taddDisposeHandler: function(callback) {\r\n/******/ \t\t\t\thot._disposeHandlers.push(callback);\r\n/******/ \t\t\t},\r\n/******/ \t\t\tremoveDisposeHandler: function(callback) {\r\n/******/ \t\t\t\tvar idx = hot._disposeHandlers.indexOf(callback);\r\n/******/ \t\t\t\tif(idx >= 0) hot._disposeHandlers.splice(idx, 1);\r\n/******/ \t\t\t},\r\n/******/ \t\r\n/******/ \t\t\t// Management API\r\n/******/ \t\t\tcheck: hotCheck,\r\n/******/ \t\t\tapply: hotApply,\r\n/******/ \t\t\tstatus: function(l) {\r\n/******/ \t\t\t\tif(!l) return hotStatus;\r\n/******/ \t\t\t\thotStatusHandlers.push(l);\r\n/******/ \t\t\t},\r\n/******/ \t\t\taddStatusHandler: function(l) {\r\n/******/ \t\t\t\thotStatusHandlers.push(l);\r\n/******/ \t\t\t},\r\n/******/ \t\t\tremoveStatusHandler: function(l) {\r\n/******/ \t\t\t\tvar idx = hotStatusHandlers.indexOf(l);\r\n/******/ \t\t\t\tif(idx >= 0) hotStatusHandlers.splice(idx, 1);\r\n/******/ \t\t\t},\r\n/******/ \t\r\n/******/ \t\t\t//inherit from previous dispose call\r\n/******/ \t\t\tdata: hotCurrentModuleData[moduleId]\r\n/******/ \t\t};\r\n/******/ \t\treturn hot;\r\n/******/ \t}\r\n/******/ \t\r\n/******/ \tvar hotStatusHandlers = [];\r\n/******/ \tvar hotStatus = \"idle\";\r\n/******/ \t\r\n/******/ \tfunction hotSetStatus(newStatus) {\r\n/******/ \t\thotStatus = newStatus;\r\n/******/ \t\tfor(var i = 0; i < hotStatusHandlers.length; i++)\r\n/******/ \t\t\thotStatusHandlers[i].call(null, newStatus);\r\n/******/ \t}\r\n/******/ \t\r\n/******/ \t// while downloading\r\n/******/ \tvar hotWaitingFiles = 0;\r\n/******/ \tvar hotChunksLoading = 0;\r\n/******/ \tvar hotWaitingFilesMap = {};\r\n/******/ \tvar hotRequestedFilesMap = {};\r\n/******/ \tvar hotAvailibleFilesMap = {};\r\n/******/ \tvar hotCallback;\r\n/******/ \t\r\n/******/ \t// The update info\r\n/******/ \tvar hotUpdate, hotUpdateNewHash;\r\n/******/ \t\r\n/******/ \tfunction toModuleId(id) {\r\n/******/ \t\tvar isNumber = (+id) + \"\" === id;\r\n/******/ \t\treturn isNumber ? +id : id;\r\n/******/ \t}\r\n/******/ \t\r\n/******/ \tfunction hotCheck(apply, callback) {\r\n/******/ \t\tif(hotStatus !== \"idle\") throw new Error(\"check() is only allowed in idle status\");\r\n/******/ \t\tif(typeof apply === \"function\") {\r\n/******/ \t\t\thotApplyOnUpdate = false;\r\n/******/ \t\t\tcallback = apply;\r\n/******/ \t\t} else {\r\n/******/ \t\t\thotApplyOnUpdate = apply;\r\n/******/ \t\t\tcallback = callback || function(err) {\r\n/******/ \t\t\t\tif(err) throw err;\r\n/******/ \t\t\t};\r\n/******/ \t\t}\r\n/******/ \t\thotSetStatus(\"check\");\r\n/******/ \t\thotDownloadManifest(function(err, update) {\r\n/******/ \t\t\tif(err) return callback(err);\r\n/******/ \t\t\tif(!update) {\r\n/******/ \t\t\t\thotSetStatus(\"idle\");\r\n/******/ \t\t\t\tcallback(null, null);\r\n/******/ \t\t\t\treturn;\r\n/******/ \t\t\t}\r\n/******/ \t\r\n/******/ \t\t\thotRequestedFilesMap = {};\r\n/******/ \t\t\thotAvailibleFilesMap = {};\r\n/******/ \t\t\thotWaitingFilesMap = {};\r\n/******/ \t\t\tfor(var i = 0; i < update.c.length; i++)\r\n/******/ \t\t\t\thotAvailibleFilesMap[update.c[i]] = true;\r\n/******/ \t\t\thotUpdateNewHash = update.h;\r\n/******/ \t\r\n/******/ \t\t\thotSetStatus(\"prepare\");\r\n/******/ \t\t\thotCallback = callback;\r\n/******/ \t\t\thotUpdate = {};\r\n/******/ \t\t\tvar chunkId = 0;\r\n/******/ \t\t\t{ // eslint-disable-line no-lone-blocks\r\n/******/ \t\t\t\t/*globals chunkId */\r\n/******/ \t\t\t\thotEnsureUpdateChunk(chunkId);\r\n/******/ \t\t\t}\r\n/******/ \t\t\tif(hotStatus === \"prepare\" && hotChunksLoading === 0 && hotWaitingFiles === 0) {\r\n/******/ \t\t\t\thotUpdateDownloaded();\r\n/******/ \t\t\t}\r\n/******/ \t\t});\r\n/******/ \t}\r\n/******/ \t\r\n/******/ \tfunction hotAddUpdateChunk(chunkId, moreModules) { // eslint-disable-line no-unused-vars\r\n/******/ \t\tif(!hotAvailibleFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])\r\n/******/ \t\t\treturn;\r\n/******/ \t\thotRequestedFilesMap[chunkId] = false;\r\n/******/ \t\tfor(var moduleId in moreModules) {\r\n/******/ \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\r\n/******/ \t\t\t\thotUpdate[moduleId] = moreModules[moduleId];\r\n/******/ \t\t\t}\r\n/******/ \t\t}\r\n/******/ \t\tif(--hotWaitingFiles === 0 && hotChunksLoading === 0) {\r\n/******/ \t\t\thotUpdateDownloaded();\r\n/******/ \t\t}\r\n/******/ \t}\r\n/******/ \t\r\n/******/ \tfunction hotEnsureUpdateChunk(chunkId) {\r\n/******/ \t\tif(!hotAvailibleFilesMap[chunkId]) {\r\n/******/ \t\t\thotWaitingFilesMap[chunkId] = true;\r\n/******/ \t\t} else {\r\n/******/ \t\t\thotRequestedFilesMap[chunkId] = true;\r\n/******/ \t\t\thotWaitingFiles++;\r\n/******/ \t\t\thotDownloadUpdateChunk(chunkId);\r\n/******/ \t\t}\r\n/******/ \t}\r\n/******/ \t\r\n/******/ \tfunction hotUpdateDownloaded() {\r\n/******/ \t\thotSetStatus(\"ready\");\r\n/******/ \t\tvar callback = hotCallback;\r\n/******/ \t\thotCallback = null;\r\n/******/ \t\tif(!callback) return;\r\n/******/ \t\tif(hotApplyOnUpdate) {\r\n/******/ \t\t\thotApply(hotApplyOnUpdate, callback);\r\n/******/ \t\t} else {\r\n/******/ \t\t\tvar outdatedModules = [];\r\n/******/ \t\t\tfor(var id in hotUpdate) {\r\n/******/ \t\t\t\tif(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {\r\n/******/ \t\t\t\t\toutdatedModules.push(toModuleId(id));\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t}\r\n/******/ \t\t\tcallback(null, outdatedModules);\r\n/******/ \t\t}\r\n/******/ \t}\r\n/******/ \t\r\n/******/ \tfunction hotApply(options, callback) {\r\n/******/ \t\tif(hotStatus !== \"ready\") throw new Error(\"apply() is only allowed in ready status\");\r\n/******/ \t\tif(typeof options === \"function\") {\r\n/******/ \t\t\tcallback = options;\r\n/******/ \t\t\toptions = {};\r\n/******/ \t\t} else if(options && typeof options === \"object\") {\r\n/******/ \t\t\tcallback = callback || function(err) {\r\n/******/ \t\t\t\tif(err) throw err;\r\n/******/ \t\t\t};\r\n/******/ \t\t} else {\r\n/******/ \t\t\toptions = {};\r\n/******/ \t\t\tcallback = callback || function(err) {\r\n/******/ \t\t\t\tif(err) throw err;\r\n/******/ \t\t\t};\r\n/******/ \t\t}\r\n/******/ \t\r\n/******/ \t\tfunction getAffectedStuff(module) {\r\n/******/ \t\t\tvar outdatedModules = [module];\r\n/******/ \t\t\tvar outdatedDependencies = {};\r\n/******/ \t\r\n/******/ \t\t\tvar queue = outdatedModules.slice();\r\n/******/ \t\t\twhile(queue.length > 0) {\r\n/******/ \t\t\t\tvar moduleId = queue.pop();\r\n/******/ \t\t\t\tvar module = installedModules[moduleId];\r\n/******/ \t\t\t\tif(!module || module.hot._selfAccepted)\r\n/******/ \t\t\t\t\tcontinue;\r\n/******/ \t\t\t\tif(module.hot._selfDeclined) {\r\n/******/ \t\t\t\t\treturn new Error(\"Aborted because of self decline: \" + moduleId);\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t\tif(moduleId === 0) {\r\n/******/ \t\t\t\t\treturn;\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t\tfor(var i = 0; i < module.parents.length; i++) {\r\n/******/ \t\t\t\t\tvar parentId = module.parents[i];\r\n/******/ \t\t\t\t\tvar parent = installedModules[parentId];\r\n/******/ \t\t\t\t\tif(parent.hot._declinedDependencies[moduleId]) {\r\n/******/ \t\t\t\t\t\treturn new Error(\"Aborted because of declined dependency: \" + moduleId + \" in \" + parentId);\r\n/******/ \t\t\t\t\t}\r\n/******/ \t\t\t\t\tif(outdatedModules.indexOf(parentId) >= 0) continue;\r\n/******/ \t\t\t\t\tif(parent.hot._acceptedDependencies[moduleId]) {\r\n/******/ \t\t\t\t\t\tif(!outdatedDependencies[parentId])\r\n/******/ \t\t\t\t\t\t\toutdatedDependencies[parentId] = [];\r\n/******/ \t\t\t\t\t\taddAllToSet(outdatedDependencies[parentId], [moduleId]);\r\n/******/ \t\t\t\t\t\tcontinue;\r\n/******/ \t\t\t\t\t}\r\n/******/ \t\t\t\t\tdelete outdatedDependencies[parentId];\r\n/******/ \t\t\t\t\toutdatedModules.push(parentId);\r\n/******/ \t\t\t\t\tqueue.push(parentId);\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t}\r\n/******/ \t\r\n/******/ \t\t\treturn [outdatedModules, outdatedDependencies];\r\n/******/ \t\t}\r\n/******/ \t\r\n/******/ \t\tfunction addAllToSet(a, b) {\r\n/******/ \t\t\tfor(var i = 0; i < b.length; i++) {\r\n/******/ \t\t\t\tvar item = b[i];\r\n/******/ \t\t\t\tif(a.indexOf(item) < 0)\r\n/******/ \t\t\t\t\ta.push(item);\r\n/******/ \t\t\t}\r\n/******/ \t\t}\r\n/******/ \t\r\n/******/ \t\t// at begin all updates modules are outdated\r\n/******/ \t\t// the \"outdated\" status can propagate to parents if they don't accept the children\r\n/******/ \t\tvar outdatedDependencies = {};\r\n/******/ \t\tvar outdatedModules = [];\r\n/******/ \t\tvar appliedUpdate = {};\r\n/******/ \t\tfor(var id in hotUpdate) {\r\n/******/ \t\t\tif(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {\r\n/******/ \t\t\t\tvar moduleId = toModuleId(id);\r\n/******/ \t\t\t\tvar result = getAffectedStuff(moduleId);\r\n/******/ \t\t\t\tif(!result) {\r\n/******/ \t\t\t\t\tif(options.ignoreUnaccepted)\r\n/******/ \t\t\t\t\t\tcontinue;\r\n/******/ \t\t\t\t\thotSetStatus(\"abort\");\r\n/******/ \t\t\t\t\treturn callback(new Error(\"Aborted because \" + moduleId + \" is not accepted\"));\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t\tif(result instanceof Error) {\r\n/******/ \t\t\t\t\thotSetStatus(\"abort\");\r\n/******/ \t\t\t\t\treturn callback(result);\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t\tappliedUpdate[moduleId] = hotUpdate[moduleId];\r\n/******/ \t\t\t\taddAllToSet(outdatedModules, result[0]);\r\n/******/ \t\t\t\tfor(var moduleId in result[1]) {\r\n/******/ \t\t\t\t\tif(Object.prototype.hasOwnProperty.call(result[1], moduleId)) {\r\n/******/ \t\t\t\t\t\tif(!outdatedDependencies[moduleId])\r\n/******/ \t\t\t\t\t\t\toutdatedDependencies[moduleId] = [];\r\n/******/ \t\t\t\t\t\taddAllToSet(outdatedDependencies[moduleId], result[1][moduleId]);\r\n/******/ \t\t\t\t\t}\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t}\r\n/******/ \t\t}\r\n/******/ \t\r\n/******/ \t\t// Store self accepted outdated modules to require them later by the module system\r\n/******/ \t\tvar outdatedSelfAcceptedModules = [];\r\n/******/ \t\tfor(var i = 0; i < outdatedModules.length; i++) {\r\n/******/ \t\t\tvar moduleId = outdatedModules[i];\r\n/******/ \t\t\tif(installedModules[moduleId] && installedModules[moduleId].hot._selfAccepted)\r\n/******/ \t\t\t\toutdatedSelfAcceptedModules.push({\r\n/******/ \t\t\t\t\tmodule: moduleId,\r\n/******/ \t\t\t\t\terrorHandler: installedModules[moduleId].hot._selfAccepted\r\n/******/ \t\t\t\t});\r\n/******/ \t\t}\r\n/******/ \t\r\n/******/ \t\t// Now in \"dispose\" phase\r\n/******/ \t\thotSetStatus(\"dispose\");\r\n/******/ \t\tvar queue = outdatedModules.slice();\r\n/******/ \t\twhile(queue.length > 0) {\r\n/******/ \t\t\tvar moduleId = queue.pop();\r\n/******/ \t\t\tvar module = installedModules[moduleId];\r\n/******/ \t\t\tif(!module) continue;\r\n/******/ \t\r\n/******/ \t\t\tvar data = {};\r\n/******/ \t\r\n/******/ \t\t\t// Call dispose handlers\r\n/******/ \t\t\tvar disposeHandlers = module.hot._disposeHandlers;\r\n/******/ \t\t\tfor(var j = 0; j < disposeHandlers.length; j++) {\r\n/******/ \t\t\t\tvar cb = disposeHandlers[j];\r\n/******/ \t\t\t\tcb(data);\r\n/******/ \t\t\t}\r\n/******/ \t\t\thotCurrentModuleData[moduleId] = data;\r\n/******/ \t\r\n/******/ \t\t\t// disable module (this disables requires from this module)\r\n/******/ \t\t\tmodule.hot.active = false;\r\n/******/ \t\r\n/******/ \t\t\t// remove module from cache\r\n/******/ \t\t\tdelete installedModules[moduleId];\r\n/******/ \t\r\n/******/ \t\t\t// remove \"parents\" references from all children\r\n/******/ \t\t\tfor(var j = 0; j < module.children.length; j++) {\r\n/******/ \t\t\t\tvar child = installedModules[module.children[j]];\r\n/******/ \t\t\t\tif(!child) continue;\r\n/******/ \t\t\t\tvar idx = child.parents.indexOf(moduleId);\r\n/******/ \t\t\t\tif(idx >= 0) {\r\n/******/ \t\t\t\t\tchild.parents.splice(idx, 1);\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t}\r\n/******/ \t\t}\r\n/******/ \t\r\n/******/ \t\t// remove outdated dependency from module children\r\n/******/ \t\tfor(var moduleId in outdatedDependencies) {\r\n/******/ \t\t\tif(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {\r\n/******/ \t\t\t\tvar module = installedModules[moduleId];\r\n/******/ \t\t\t\tvar moduleOutdatedDependencies = outdatedDependencies[moduleId];\r\n/******/ \t\t\t\tfor(var j = 0; j < moduleOutdatedDependencies.length; j++) {\r\n/******/ \t\t\t\t\tvar dependency = moduleOutdatedDependencies[j];\r\n/******/ \t\t\t\t\tvar idx = module.children.indexOf(dependency);\r\n/******/ \t\t\t\t\tif(idx >= 0) module.children.splice(idx, 1);\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t}\r\n/******/ \t\t}\r\n/******/ \t\r\n/******/ \t\t// Not in \"apply\" phase\r\n/******/ \t\thotSetStatus(\"apply\");\r\n/******/ \t\r\n/******/ \t\thotCurrentHash = hotUpdateNewHash;\r\n/******/ \t\r\n/******/ \t\t// insert new code\r\n/******/ \t\tfor(var moduleId in appliedUpdate) {\r\n/******/ \t\t\tif(Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {\r\n/******/ \t\t\t\tmodules[moduleId] = appliedUpdate[moduleId];\r\n/******/ \t\t\t}\r\n/******/ \t\t}\r\n/******/ \t\r\n/******/ \t\t// call accept handlers\r\n/******/ \t\tvar error = null;\r\n/******/ \t\tfor(var moduleId in outdatedDependencies) {\r\n/******/ \t\t\tif(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {\r\n/******/ \t\t\t\tvar module = installedModules[moduleId];\r\n/******/ \t\t\t\tvar moduleOutdatedDependencies = outdatedDependencies[moduleId];\r\n/******/ \t\t\t\tvar callbacks = [];\r\n/******/ \t\t\t\tfor(var i = 0; i < moduleOutdatedDependencies.length; i++) {\r\n/******/ \t\t\t\t\tvar dependency = moduleOutdatedDependencies[i];\r\n/******/ \t\t\t\t\tvar cb = module.hot._acceptedDependencies[dependency];\r\n/******/ \t\t\t\t\tif(callbacks.indexOf(cb) >= 0) continue;\r\n/******/ \t\t\t\t\tcallbacks.push(cb);\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t\tfor(var i = 0; i < callbacks.length; i++) {\r\n/******/ \t\t\t\t\tvar cb = callbacks[i];\r\n/******/ \t\t\t\t\ttry {\r\n/******/ \t\t\t\t\t\tcb(outdatedDependencies);\r\n/******/ \t\t\t\t\t} catch(err) {\r\n/******/ \t\t\t\t\t\tif(!error)\r\n/******/ \t\t\t\t\t\t\terror = err;\r\n/******/ \t\t\t\t\t}\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t}\r\n/******/ \t\t}\r\n/******/ \t\r\n/******/ \t\t// Load self accepted modules\r\n/******/ \t\tfor(var i = 0; i < outdatedSelfAcceptedModules.length; i++) {\r\n/******/ \t\t\tvar item = outdatedSelfAcceptedModules[i];\r\n/******/ \t\t\tvar moduleId = item.module;\r\n/******/ \t\t\thotCurrentParents = [moduleId];\r\n/******/ \t\t\ttry {\r\n/******/ \t\t\t\t__webpack_require__(moduleId);\r\n/******/ \t\t\t} catch(err) {\r\n/******/ \t\t\t\tif(typeof item.errorHandler === \"function\") {\r\n/******/ \t\t\t\t\ttry {\r\n/******/ \t\t\t\t\t\titem.errorHandler(err);\r\n/******/ \t\t\t\t\t} catch(err) {\r\n/******/ \t\t\t\t\t\tif(!error)\r\n/******/ \t\t\t\t\t\t\terror = err;\r\n/******/ \t\t\t\t\t}\r\n/******/ \t\t\t\t} else if(!error)\r\n/******/ \t\t\t\t\terror = err;\r\n/******/ \t\t\t}\r\n/******/ \t\t}\r\n/******/ \t\r\n/******/ \t\t// handle errors in accept handlers and self accepted module load\r\n/******/ \t\tif(error) {\r\n/******/ \t\t\thotSetStatus(\"fail\");\r\n/******/ \t\t\treturn callback(error);\r\n/******/ \t\t}\r\n/******/ \t\r\n/******/ \t\thotSetStatus(\"idle\");\r\n/******/ \t\tcallback(null, outdatedModules);\r\n/******/ \t}\r\n/******/\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false,\n/******/ \t\t\thot: hotCreateModule(moduleId),\n/******/ \t\t\tparents: hotCurrentParents,\n/******/ \t\t\tchildren: []\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// __webpack_hash__\n/******/ \t__webpack_require__.h = function() { return hotCurrentHash; };\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn hotCreateRequire(0)(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _camGcodeLaserCut = __webpack_require__(11);\n\t\n\tonmessage = function onmessage(event) {\n\t    var _event$data = event.data,\n\t        settings = _event$data.settings,\n\t        opIndex = _event$data.opIndex,\n\t        op = _event$data.op,\n\t        _event$data$geometry = _event$data.geometry,\n\t        geometry = _event$data$geometry === undefined ? [] : _event$data$geometry,\n\t        _event$data$openGeome = _event$data.openGeometry,\n\t        openGeometry = _event$data$openGeome === undefined ? [] : _event$data$openGeome,\n\t        _event$data$tabGeomet = _event$data.tabGeometry,\n\t        tabGeometry = _event$data$tabGeomet === undefined ? [] : _event$data$tabGeomet;\n\t\n\t\n\t    var errors = [];\n\t\n\t    var showAlert = function showAlert(message, level) {\n\t        errors.push({ message: message, level: level });\n\t    };\n\t    var progress = function progress() {\n\t        postMessage(JSON.stringify({ event: \"onProgress\", gcode: gcode, errors: errors }));\n\t    };\n\t    var done = function done(gcode) {\n\t        if (gcode === false && errors.length) {\n\t            postMessage(JSON.stringify({ event: \"onError\", errors: errors }));\n\t        } else {\n\t            postMessage(JSON.stringify({ event: \"onDone\", gcode: gcode }));\n\t        }\n\t        self.close();\n\t    };\n\t\n\t    _camGcodeLaserCut.getLaserCutGcodeFromOp.apply(undefined, [settings, opIndex, op, geometry, openGeometry, tabGeometry, showAlert, done, progress]);\n\t};\n\t;\n\n\tvar _temp = function () {\n\t    if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n\t        return;\n\t    }\n\t}();\n\n\t;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n\t/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\t\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\t\n\tThe above copyright notice and this permission notice shall be included in\n\tall copies or substantial portions of the Software.\n\t\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\tTHE SOFTWARE. */\n\t\n\t/**\n\t * @class Common utilities\n\t * @name glMatrix\n\t */\n\tvar glMatrix = {};\n\t\n\t// Configuration Constants\n\tglMatrix.EPSILON = 0.000001;\n\tglMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\n\tglMatrix.RANDOM = Math.random;\n\tglMatrix.ENABLE_SIMD = false;\n\t\n\t// Capability detection\n\tglMatrix.SIMD_AVAILABLE = (glMatrix.ARRAY_TYPE === Float32Array) && ('SIMD' in this);\n\tglMatrix.USE_SIMD = glMatrix.ENABLE_SIMD && glMatrix.SIMD_AVAILABLE;\n\t\n\t/**\n\t * Sets the type of array used when creating new vectors and matrices\n\t *\n\t * @param {Type} type Array type, such as Float32Array or Array\n\t */\n\tglMatrix.setMatrixArrayType = function(type) {\n\t    glMatrix.ARRAY_TYPE = type;\n\t}\n\t\n\tvar degree = Math.PI / 180;\n\t\n\t/**\n\t* Convert Degree To Radian\n\t*\n\t* @param {Number} Angle in Degrees\n\t*/\n\tglMatrix.toRadian = function(a){\n\t     return a * degree;\n\t}\n\t\n\t/**\n\t * Tests whether or not the arguments have approximately the same value, within an absolute\n\t * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less \n\t * than or equal to 1.0, and a relative tolerance is used for larger values)\n\t * \n\t * @param {Number} a The first number to test.\n\t * @param {Number} b The second number to test.\n\t * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n\t */\n\tglMatrix.equals = function(a, b) {\n\t\treturn Math.abs(a - b) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n\t}\n\t\n\tmodule.exports = glMatrix;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\t/*\n\t * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n\t * http://code.google.com/p/poly2tri/\n\t * \n\t * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n\t * https://github.com/r3mi/poly2tri.js\n\t * \n\t * All rights reserved.\n\t * \n\t * Distributed under the 3-clause BSD License, see LICENSE.txt\n\t */\n\t\n\t\"use strict\";\n\t\n\t/**\n\t * The following functions operate on \"Point\" or any \"Point like\" object with {x,y},\n\t * as defined by the {@link XY} type\n\t * ([duck typing]{@link http://en.wikipedia.org/wiki/Duck_typing}).\n\t * @module\n\t * @private\n\t */\n\t\n\t/**\n\t * poly2tri.js supports using custom point class instead of {@linkcode Point}.\n\t * Any \"Point like\" object with <code>{x, y}</code> attributes is supported\n\t * to initialize the SweepContext polylines and points\n\t * ([duck typing]{@link http://en.wikipedia.org/wiki/Duck_typing}).\n\t *\n\t * poly2tri.js might add extra fields to the point objects when computing the\n\t * triangulation : they are prefixed with <code>_p2t_</code> to avoid collisions\n\t * with fields in the custom class.\n\t *\n\t * @example\n\t *      var contour = [{x:100, y:100}, {x:100, y:300}, {x:300, y:300}, {x:300, y:100}];\n\t *      var swctx = new poly2tri.SweepContext(contour);\n\t *\n\t * @typedef {Object} XY\n\t * @property {number} x - x coordinate\n\t * @property {number} y - y coordinate\n\t */\n\t\n\t\n\t/**\n\t * Point pretty printing : prints x and y coordinates.\n\t * @example\n\t *      xy.toStringBase({x:5, y:42})\n\t *      // → \"(5;42)\"\n\t * @protected\n\t * @param {!XY} p - point object with {x,y}\n\t * @returns {string} <code>\"(x;y)\"</code>\n\t */\n\tfunction toStringBase(p) {\n\t    return (\"(\" + p.x + \";\" + p.y + \")\");\n\t}\n\t\n\t/**\n\t * Point pretty printing. Delegates to the point's custom \"toString()\" method if exists,\n\t * else simply prints x and y coordinates.\n\t * @example\n\t *      xy.toString({x:5, y:42})\n\t *      // → \"(5;42)\"\n\t * @example\n\t *      xy.toString({x:5,y:42,toString:function() {return this.x+\":\"+this.y;}})\n\t *      // → \"5:42\"\n\t * @param {!XY} p - point object with {x,y}\n\t * @returns {string} <code>\"(x;y)\"</code>\n\t */\n\tfunction toString(p) {\n\t    // Try a custom toString first, and fallback to own implementation if none\n\t    var s = p.toString();\n\t    return (s === '[object Object]' ? toStringBase(p) : s);\n\t}\n\t\n\t\n\t/**\n\t * Compare two points component-wise. Ordered by y axis first, then x axis.\n\t * @param {!XY} a - point object with {x,y}\n\t * @param {!XY} b - point object with {x,y}\n\t * @return {number} <code>&lt; 0</code> if <code>a &lt; b</code>,\n\t *         <code>&gt; 0</code> if <code>a &gt; b</code>, \n\t *         <code>0</code> otherwise.\n\t */\n\tfunction compare(a, b) {\n\t    if (a.y === b.y) {\n\t        return a.x - b.x;\n\t    } else {\n\t        return a.y - b.y;\n\t    }\n\t}\n\t\n\t/**\n\t * Test two Point objects for equality.\n\t * @param {!XY} a - point object with {x,y}\n\t * @param {!XY} b - point object with {x,y}\n\t * @return {boolean} <code>True</code> if <code>a == b</code>, <code>false</code> otherwise.\n\t */\n\tfunction equals(a, b) {\n\t    return a.x === b.x && a.y === b.y;\n\t}\n\t\n\t\n\tmodule.exports = {\n\t    toString: toString,\n\t    toStringBase: toStringBase,\n\t    compare: compare,\n\t    equals: equals\n\t};\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// Copyright 2014-2016 Todd Fleming\n\t//\n\t// This program is free software: you can redistribute it and/or modify\n\t// it under the terms of the GNU Affero General Public License as published by\n\t// the Free Software Foundation, either version 3 of the License, or\n\t// (at your option) any later version.\n\t// \n\t// This program is distributed in the hope that it will be useful,\n\t// but WITHOUT ANY WARRANTY; without even the implied warranty of\n\t// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\t// GNU Affero General Public License for more details.\n\t// \n\t// You should have received a copy of the GNU Affero General Public License\n\t// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\t\n\t// TODO: pass React elements to alertFn\n\t\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.arcTolerance = exports.cleanPolyDist = exports.clipperToCppScale = exports.mmToClipperScale = exports.inchToClipperScale = undefined;\n\texports.elementToRawPaths = elementToRawPaths;\n\texports.flipY = flipY;\n\texports.hasClosedRawPaths = hasClosedRawPaths;\n\texports.filterClosedRawPaths = filterClosedRawPaths;\n\texports.rawPathsToClipperPaths = rawPathsToClipperPaths;\n\texports.triangulateRawPaths = triangulateRawPaths;\n\texports.clipperPathsToCPaths = clipperPathsToCPaths;\n\texports.cPathsToClipperPaths = cPathsToClipperPaths;\n\texports.cPathsToCamPaths = cPathsToCamPaths;\n\texports.clipperBounds = clipperBounds;\n\texports.clip = clip;\n\texports.union = union;\n\texports.diff = diff;\n\texports.xor = xor;\n\texports.offset = offset;\n\t\n\tvar _clipperLib = __webpack_require__(4);\n\t\n\tvar _clipperLib2 = _interopRequireDefault(_clipperLib);\n\t\n\tvar _sweepcontext = __webpack_require__(23);\n\t\n\tvar _sweepcontext2 = _interopRequireDefault(_sweepcontext);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar inchToClipperScale = exports.inchToClipperScale = 1270000000;\n\tvar mmToClipperScale = exports.mmToClipperScale = inchToClipperScale / 25.4; // 50000000;\n\tvar clipperToCppScale = exports.clipperToCppScale = 1 / 128; // Prevent overflow for coordinates up to ~1000 mm\n\tvar cleanPolyDist = exports.cleanPolyDist = 100;\n\tvar arcTolerance = exports.arcTolerance = 10000;\n\t\n\t// Linearize a cubic bezier. Returns ['L', x2, y2, x3, y3, ...]. The return value doesn't\n\t// include (p1x, p1y); it's part of the previous segment.\n\tfunction linearizeCubicBezier(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, minNumSegments, minSegmentLength) {\n\t    function bez(p0, p1, p2, p3, t) {\n\t        return (1 - t) * (1 - t) * (1 - t) * p0 + 3 * (1 - t) * (1 - t) * t * p1 + 3 * (1 - t) * t * t * p2 + t * t * t * p3;\n\t    }\n\t\n\t    if (p1x == c1x && p1y == c1y && p2x == c2x && p2y == c2y) return ['L', p2x, p2y];\n\t\n\t    var numSegments = minNumSegments;\n\t    while (true) {\n\t        var x = p1x;\n\t        var y = p1y;\n\t        var result = ['L'];\n\t        for (var i = 1; i <= numSegments; ++i) {\n\t            var t = 1.0 * i / numSegments;\n\t            var nextX = bez(p1x, c1x, c2x, p2x, t);\n\t            var nextY = bez(p1y, c1y, c2y, p2y, t);\n\t            if ((nextX - x) * (nextX - x) + (nextY - y) * (nextY - y) > minSegmentLength * minSegmentLength) {\n\t                numSegments *= 2;\n\t                result = null;\n\t                break;\n\t            }\n\t            result.push(nextX, nextY);\n\t            x = nextX;\n\t            y = nextY;\n\t        }\n\t        if (result) return result;\n\t    }\n\t}\n\t\n\t// Linearize a path. Both the input path and the returned path are in snap.svg's format.\n\t// Calls alertFn with an error message and returns null if there's a problem.\n\tfunction linearizeSnapPath(path, minNumSegments, minSegmentLength, alertFn) {\n\t    if (path.length < 2 || path[0].length != 3 || path[0][0] != 'M') {\n\t        alertFn('Path does not begin with M');\n\t        return null;\n\t    }\n\t    var x = path[0][1];\n\t    var y = path[0][2];\n\t    var result = [path[0]];\n\t    for (var i = 1; i < path.length; ++i) {\n\t        var subpath = path[i];\n\t        if (subpath[0] == 'C' && subpath.length == 7) {\n\t            result.push(linearizeCubicBezier(x, y, subpath[1], subpath[2], subpath[3], subpath[4], subpath[5], subpath[6], minNumSegments, minSegmentLength));\n\t            x = subpath[5];\n\t            y = subpath[6];\n\t        } else if (subpath[0] == 'M' && subpath.length == 3) {\n\t            result.push(subpath);\n\t            x = subpath[1];\n\t            y = subpath[2];\n\t        } else {\n\t            alertFn('Subpath has an unknown prefix: ' + subpath[0]);\n\t            return null;\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t// Get linear paths (snap format) from an SVG element. Calls alertFn with an \n\t// error message and returns null if there's a problem.\n\tfunction elementToLinearSnapPaths(element, minNumSegments, minSegmentLength, alertFn) {\n\t    var path = null;\n\t    var Snap = __webpack_require__(28);\n\t    var snapElement = Snap(element);\n\t\n\t    if (snapElement.type == 'path') path = snapElement.attr('d');else if (snapElement.type == 'rect') {\n\t        var x = Number(snapElement.attr('x'));\n\t        var y = Number(snapElement.attr('y'));\n\t        var w = Number(snapElement.attr('width'));\n\t        var h = Number(snapElement.attr('height'));\n\t        path = 'm' + x + ',' + y + ' ' + w + ',' + 0 + ' ' + 0 + ',' + h + ' ' + -w + ',' + 0 + ' ' + 0 + ',' + -h + ' ';\n\t    } else {\n\t        alertFn('<b>' + snapElement.type + \"</b> is not supported; try Inkscape's <strong>Object to Path</strong> command\");\n\t        return null;\n\t    }\n\t\n\t    if (snapElement.attr('clip-path') != '') {\n\t        alertFn('clip-path is not supported');\n\t        return null;\n\t    }\n\t\n\t    if (snapElement.attr('mask') != '') {\n\t        alertFn('mask is not supported');\n\t        return null;\n\t    }\n\t\n\t    if (path == null) {\n\t        alertFn('path is missing');\n\t        return;\n\t    }\n\t\n\t    path = Snap.path.map(path, snapElement.transform().globalMatrix);\n\t    path = Snap.parsePathString(path);\n\t    path = linearizeSnapPath(path, minNumSegments, minSegmentLength, alertFn);\n\t    return path;\n\t};\n\t\n\t// Convert a path in snap.svg format to [[x0, y0, x1, y1, ...], ...].\n\t// Result is in mm. Returns multiple paths. Only supports linear paths.\n\t// Calls alertFn with an error message and returns null if there's a problem.\n\tfunction snapPathToRawPaths(snapPath, pxPerInch, alertFn) {\n\t    var factor = 25.4 / pxPerInch;\n\t    if (snapPath.length < 2 || snapPath[0].length != 3 || snapPath[0][0] != 'M') {\n\t        alertFn('Path does not begin with M');\n\t        return null;\n\t    }\n\t    var currentPath = [snapPath[0][1] * factor, snapPath[0][2] * factor];\n\t    var result = [currentPath];\n\t    for (var i = 1; i < snapPath.length; ++i) {\n\t        var subpath = snapPath[i];\n\t        if (subpath[0] == 'M' && subpath.length == 3) {\n\t            currentPath = [subpath[1] * factor, subpath[2] * factor];\n\t            result.push(currentPath);\n\t        } else if (subpath[0] == 'L') {\n\t            for (var j = 0; j < (subpath.length - 1) / 2; ++j) {\n\t                currentPath.push(subpath[1 + j * 2] * factor, subpath[2 + j * 2] * factor);\n\t            }\n\t        } else {\n\t            alertFn('Subpath has a non-linear prefix: ' + subpath[0]);\n\t            return null;\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t// Convert a path in an SVG element to [[x0, y0, x1, y1, ...], ...].\n\t// Result is in mm. Returns multiple paths. Converts curves.\n\t// Calls alertFn with an error message and returns null if there's a problem.\n\tfunction elementToRawPaths(element, pxPerInch, minNumSegments, minSegmentLength, alertFn) {\n\t    var path = elementToLinearSnapPaths(element, minNumSegments, minSegmentLength, alertFn);\n\t    if (path !== null) return snapPathToRawPaths(path, pxPerInch, alertFn);\n\t    return null;\n\t}\n\t\n\t// [[[x0, y0, x1, y1, ...], ...], ...]\n\tfunction flipY(allRawPaths, deltaY) {\n\t    var _iteratorNormalCompletion = true;\n\t    var _didIteratorError = false;\n\t    var _iteratorError = undefined;\n\t\n\t    try {\n\t        for (var _iterator = allRawPaths[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t            var rawPaths = _step.value;\n\t            var _iteratorNormalCompletion2 = true;\n\t            var _didIteratorError2 = false;\n\t            var _iteratorError2 = undefined;\n\t\n\t            try {\n\t                for (var _iterator2 = rawPaths[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t                    var rawPath = _step2.value;\n\t\n\t                    for (var i = 0; i < rawPath.length; i += 2) {\n\t                        rawPath[i + 1] = deltaY - rawPath[i + 1];\n\t                    }\n\t                }\n\t            } catch (err) {\n\t                _didIteratorError2 = true;\n\t                _iteratorError2 = err;\n\t            } finally {\n\t                try {\n\t                    if (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t                        _iterator2.return();\n\t                    }\n\t                } finally {\n\t                    if (_didIteratorError2) {\n\t                        throw _iteratorError2;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t    } finally {\n\t        try {\n\t            if (!_iteratorNormalCompletion && _iterator.return) {\n\t                _iterator.return();\n\t            }\n\t        } finally {\n\t            if (_didIteratorError) {\n\t                throw _iteratorError;\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction hasClosedRawPaths(rawPaths) {\n\t    var _iteratorNormalCompletion3 = true;\n\t    var _didIteratorError3 = false;\n\t    var _iteratorError3 = undefined;\n\t\n\t    try {\n\t        for (var _iterator3 = rawPaths[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n\t            var path = _step3.value;\n\t\n\t            if (path.length >= 4 && path[0] == path[path.length - 2] && path[1] == path[path.length - 1]) return true;\n\t        }\n\t    } catch (err) {\n\t        _didIteratorError3 = true;\n\t        _iteratorError3 = err;\n\t    } finally {\n\t        try {\n\t            if (!_iteratorNormalCompletion3 && _iterator3.return) {\n\t                _iterator3.return();\n\t            }\n\t        } finally {\n\t            if (_didIteratorError3) {\n\t                throw _iteratorError3;\n\t            }\n\t        }\n\t    }\n\t\n\t    return false;\n\t}\n\t\n\tfunction filterClosedRawPaths(rawPaths) {\n\t    var result = [];\n\t    var _iteratorNormalCompletion4 = true;\n\t    var _didIteratorError4 = false;\n\t    var _iteratorError4 = undefined;\n\t\n\t    try {\n\t        for (var _iterator4 = rawPaths[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n\t            var path = _step4.value;\n\t\n\t            if (path.length >= 4 && path[0] == path[path.length - 2] && path[1] == path[path.length - 1]) result.push(path);\n\t        }\n\t    } catch (err) {\n\t        _didIteratorError4 = true;\n\t        _iteratorError4 = err;\n\t    } finally {\n\t        try {\n\t            if (!_iteratorNormalCompletion4 && _iterator4.return) {\n\t                _iterator4.return();\n\t            }\n\t        } finally {\n\t            if (_didIteratorError4) {\n\t                throw _iteratorError4;\n\t            }\n\t        }\n\t    }\n\t\n\t    return result;\n\t}\n\t\n\tfunction rawPathsToClipperPaths(rawPaths, scaleX, scaleY, translateX, translateY) {\n\t    var result = rawPaths.map(function (p) {\n\t        var result = [];\n\t        for (var i = 0; i < p.length; i += 2) {\n\t            result.push({ X: (p[i] * scaleX + translateX) * mmToClipperScale, Y: (p[i + 1] * scaleY + translateY) * mmToClipperScale });\n\t        }return result;\n\t    });\n\t    if (hasClosedRawPaths(rawPaths)) {\n\t        result = _clipperLib2.default.Clipper.CleanPolygons(result, cleanPolyDist);\n\t        result = _clipperLib2.default.Clipper.SimplifyPolygons(result, _clipperLib2.default.PolyFillType.pftEvenOdd);\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction clipperPathsToPolyTree(paths) {\n\t    var c = new _clipperLib2.default.Clipper();\n\t    c.AddPaths(paths, _clipperLib2.default.PolyType.ptSubject, true);\n\t    var polyTree = new _clipperLib2.default.PolyTree();\n\t    c.Execute(_clipperLib2.default.ClipType.ctUnion, polyTree, _clipperLib2.default.PolyFillType.pftEvenOdd, _clipperLib2.default.PolyFillType.pftEvenOdd);\n\t    return polyTree;\n\t}\n\t\n\tfunction triangulatePolyTree(polyTree) {\n\t    var result = [];\n\t    var pointToVertex = function pointToVertex(point) {\n\t        return { x: point.X / mmToClipperScale, y: point.Y / mmToClipperScale };\n\t    };\n\t    var contourToVertexes = function contourToVertexes(path) {\n\t        return path.map(pointToVertex);\n\t    };\n\t    var nodesToVertexes = function nodesToVertexes(nodes) {\n\t        return nodes.map(function (node) {\n\t            return contourToVertexes(node.Contour());\n\t        });\n\t    };\n\t    var processNode = function processNode(node) {\n\t        var vertexes = contourToVertexes(node.Contour());\n\t        var holes = nodesToVertexes(node.Childs());\n\t        var context = new _sweepcontext2.default(vertexes);\n\t        context.addHoles(holes);\n\t        context.triangulate();\n\t        var triangles = context.getTriangles();\n\t        var _iteratorNormalCompletion5 = true;\n\t        var _didIteratorError5 = false;\n\t        var _iteratorError5 = undefined;\n\t\n\t        try {\n\t            for (var _iterator5 = triangles[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n\t                var t = _step5.value;\n\t\n\t                var p = t.getPoints();\n\t                result.push(p[0].x, p[0].y, p[1].x, p[1].y, p[2].x, p[2].y);\n\t            }\n\t        } catch (err) {\n\t            _didIteratorError5 = true;\n\t            _iteratorError5 = err;\n\t        } finally {\n\t            try {\n\t                if (!_iteratorNormalCompletion5 && _iterator5.return) {\n\t                    _iterator5.return();\n\t                }\n\t            } finally {\n\t                if (_didIteratorError5) {\n\t                    throw _iteratorError5;\n\t                }\n\t            }\n\t        }\n\t\n\t        var _iteratorNormalCompletion6 = true;\n\t        var _didIteratorError6 = false;\n\t        var _iteratorError6 = undefined;\n\t\n\t        try {\n\t            for (var _iterator6 = node.Childs()[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n\t                var hole = _step6.value;\n\t                var _iteratorNormalCompletion7 = true;\n\t                var _didIteratorError7 = false;\n\t                var _iteratorError7 = undefined;\n\t\n\t                try {\n\t                    for (var _iterator7 = hole.Childs()[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n\t                        var next = _step7.value;\n\t\n\t                        processNode(next);\n\t                    }\n\t                } catch (err) {\n\t                    _didIteratorError7 = true;\n\t                    _iteratorError7 = err;\n\t                } finally {\n\t                    try {\n\t                        if (!_iteratorNormalCompletion7 && _iterator7.return) {\n\t                            _iterator7.return();\n\t                        }\n\t                    } finally {\n\t                        if (_didIteratorError7) {\n\t                            throw _iteratorError7;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        } catch (err) {\n\t            _didIteratorError6 = true;\n\t            _iteratorError6 = err;\n\t        } finally {\n\t            try {\n\t                if (!_iteratorNormalCompletion6 && _iterator6.return) {\n\t                    _iterator6.return();\n\t                }\n\t            } finally {\n\t                if (_didIteratorError6) {\n\t                    throw _iteratorError6;\n\t                }\n\t            }\n\t        }\n\t    };\n\t    var _iteratorNormalCompletion8 = true;\n\t    var _didIteratorError8 = false;\n\t    var _iteratorError8 = undefined;\n\t\n\t    try {\n\t        for (var _iterator8 = polyTree.Childs()[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n\t            var node = _step8.value;\n\t\n\t            processNode(node);\n\t        }\n\t    } catch (err) {\n\t        _didIteratorError8 = true;\n\t        _iteratorError8 = err;\n\t    } finally {\n\t        try {\n\t            if (!_iteratorNormalCompletion8 && _iterator8.return) {\n\t                _iterator8.return();\n\t            }\n\t        } finally {\n\t            if (_didIteratorError8) {\n\t                throw _iteratorError8;\n\t            }\n\t        }\n\t    }\n\t\n\t    return result;\n\t}\n\t\n\tfunction triangulateRawPaths(rawPaths) {\n\t    return triangulatePolyTree(clipperPathsToPolyTree(rawPathsToClipperPaths(rawPaths, 1, 1, 0, 0)));\n\t}\n\t\n\t// Convert Clipper paths to C. Returns [double** cPaths, int cNumPaths, int* cPathSizes].\n\tfunction clipperPathsToCPaths(memoryBlocks, clipperPaths) {\n\t    var doubleSize = 8;\n\t\n\t    var cPaths = Module._malloc(clipperPaths.length * 4);\n\t    memoryBlocks.push(cPaths);\n\t    var cPathsBase = cPaths >> 2;\n\t\n\t    var cPathSizes = Module._malloc(clipperPaths.length * 4);\n\t    memoryBlocks.push(cPathSizes);\n\t    var cPathSizesBase = cPathSizes >> 2;\n\t\n\t    for (var i = 0; i < clipperPaths.length; ++i) {\n\t        var clipperPath = clipperPaths[i];\n\t\n\t        var cPath = Module._malloc(clipperPath.length * 2 * doubleSize + 4);\n\t        memoryBlocks.push(cPath);\n\t        if (cPath & 4) cPath += 4;\n\t        //console.log(\"-> \" + cPath.toString(16));\n\t        var pathArray = new Float64Array(Module.HEAPU32.buffer, Module.HEAPU32.byteOffset + cPath);\n\t\n\t        for (var j = 0; j < clipperPath.length; ++j) {\n\t            var point = clipperPath[j];\n\t            pathArray[j * 2] = point.X * clipperToCppScale;\n\t            pathArray[j * 2 + 1] = point.Y * clipperToCppScale;\n\t        }\n\t\n\t        Module.HEAPU32[cPathsBase + i] = cPath;\n\t        Module.HEAPU32[cPathSizesBase + i] = clipperPath.length;\n\t    }\n\t\n\t    return [cPaths, clipperPaths.length, cPathSizes];\n\t}\n\t\n\t// Convert C paths to Clipper paths. double**& cPathsRef, int& cNumPathsRef, int*& cPathSizesRef\n\t// Each point has X, Y (stride = 2).\n\tfunction cPathsToClipperPaths(memoryBlocks, cPathsRef, cNumPathsRef, cPathSizesRef) {\n\t    var cPaths = Module.HEAPU32[cPathsRef >> 2];\n\t    memoryBlocks.push(cPaths);\n\t    var cPathsBase = cPaths >> 2;\n\t\n\t    var cNumPaths = Module.HEAPU32[cNumPathsRef >> 2];\n\t\n\t    var cPathSizes = Module.HEAPU32[cPathSizesRef >> 2];\n\t    memoryBlocks.push(cPathSizes);\n\t    var cPathSizesBase = cPathSizes >> 2;\n\t\n\t    var clipperPaths = [];\n\t    for (var i = 0; i < cNumPaths; ++i) {\n\t        var pathSize = Module.HEAPU32[cPathSizesBase + i];\n\t        var cPath = Module.HEAPU32[cPathsBase + i];\n\t        // cPath contains value to pass to Module._free(). The aligned version contains the actual data.\n\t        memoryBlocks.push(cPath);\n\t        if (cPath & 4) cPath += 4;\n\t        var pathArray = new Float64Array(Module.HEAPU32.buffer, Module.HEAPU32.byteOffset + cPath);\n\t\n\t        var clipperPath = [];\n\t        clipperPaths.push(clipperPath);\n\t        for (var j = 0; j < pathSize; ++j) {\n\t            clipperPath.push({\n\t                X: pathArray[j * 2] / clipperToCppScale,\n\t                Y: pathArray[j * 2 + 1] / clipperToCppScale\n\t            });\n\t        }\n\t    }\n\t\n\t    return clipperPaths;\n\t}\n\t\n\t// Convert C paths to array of CamPath. double**& cPathsRef, int& cNumPathsRef, int*& cPathSizesRef\n\t// Each point has X, Y, Z (stride = 3).\n\tfunction cPathsToCamPaths(memoryBlocks, cPathsRef, cNumPathsRef, cPathSizesRef) {\n\t    var cPaths = Module.HEAPU32[cPathsRef >> 2];\n\t    memoryBlocks.push(cPaths);\n\t    var cPathsBase = cPaths >> 2;\n\t\n\t    var cNumPaths = Module.HEAPU32[cNumPathsRef >> 2];\n\t\n\t    var cPathSizes = Module.HEAPU32[cPathSizesRef >> 2];\n\t    memoryBlocks.push(cPathSizes);\n\t    var cPathSizesBase = cPathSizes >> 2;\n\t\n\t    var convertedPaths = [];\n\t    for (var i = 0; i < cNumPaths; ++i) {\n\t        var pathSize = Module.HEAPU32[cPathSizesBase + i];\n\t        var cPath = Module.HEAPU32[cPathsBase + i];\n\t        // cPath contains value to pass to Module._free(). The aligned version contains the actual data.\n\t        memoryBlocks.push(cPath);\n\t        if (cPath & 4) cPath += 4;\n\t        var pathArray = new Float64Array(Module.HEAPU32.buffer, Module.HEAPU32.byteOffset + cPath);\n\t\n\t        var convertedPath = [];\n\t        convertedPaths.push({ path: convertedPath, safeToClose: false });\n\t        for (var j = 0; j < pathSize; ++j) {\n\t            convertedPath.push({\n\t                X: pathArray[j * 3] / clipperToCppScale,\n\t                Y: pathArray[j * 3 + 1] / clipperToCppScale,\n\t                Z: pathArray[j * 3 + 2] / clipperToCppScale\n\t            });\n\t        } //console.log('got: path', i, ':', pathArray[0], pathArray[1], pathArray[2]);\n\t    }\n\t\n\t    return convertedPaths;\n\t}\n\t\n\tfunction clipperBounds(paths) {\n\t    var minX = Number.MAX_VALUE;\n\t    var minY = Number.MAX_VALUE;\n\t    var maxX = -Number.MAX_VALUE;\n\t    var maxY = -Number.MAX_VALUE;\n\t    var _iteratorNormalCompletion9 = true;\n\t    var _didIteratorError9 = false;\n\t    var _iteratorError9 = undefined;\n\t\n\t    try {\n\t        for (var _iterator9 = paths[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n\t            var path = _step9.value;\n\t            var _iteratorNormalCompletion10 = true;\n\t            var _didIteratorError10 = false;\n\t            var _iteratorError10 = undefined;\n\t\n\t            try {\n\t                for (var _iterator10 = path[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n\t                    var pt = _step10.value;\n\t\n\t                    minX = Math.min(minX, pt.X);\n\t                    maxX = Math.max(maxX, pt.X);\n\t                    minY = Math.min(minY, pt.Y);\n\t                    maxY = Math.max(maxY, pt.Y);\n\t                }\n\t            } catch (err) {\n\t                _didIteratorError10 = true;\n\t                _iteratorError10 = err;\n\t            } finally {\n\t                try {\n\t                    if (!_iteratorNormalCompletion10 && _iterator10.return) {\n\t                        _iterator10.return();\n\t                    }\n\t                } finally {\n\t                    if (_didIteratorError10) {\n\t                        throw _iteratorError10;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    } catch (err) {\n\t        _didIteratorError9 = true;\n\t        _iteratorError9 = err;\n\t    } finally {\n\t        try {\n\t            if (!_iteratorNormalCompletion9 && _iterator9.return) {\n\t                _iterator9.return();\n\t            }\n\t        } finally {\n\t            if (_didIteratorError9) {\n\t                throw _iteratorError9;\n\t            }\n\t        }\n\t    }\n\t\n\t    return { minX: minX, minY: minY, maxX: maxX, maxY: maxY };\n\t}\n\t\n\t// Clip Clipper geometry. clipType is a ClipperLib.ClipType constant. Returns new geometry.\n\tfunction clip(paths1, paths2, clipType) {\n\t    var clipper = new _clipperLib2.default.Clipper();\n\t    clipper.AddPaths(paths1, _clipperLib2.default.PolyType.ptSubject, true);\n\t    clipper.AddPaths(paths2, _clipperLib2.default.PolyType.ptClip, true);\n\t    var result = [];\n\t    clipper.Execute(clipType, result, _clipperLib2.default.PolyFillType.pftEvenOdd, _clipperLib2.default.PolyFillType.pftEvenOdd);\n\t    return result;\n\t}\n\t\n\t// Return union of two Clipper geometries. Returns new geometry.\n\tfunction union(paths1, paths2) {\n\t    return clip(paths1, paths2, _clipperLib2.default.ClipType.ctUnion);\n\t}\n\t\n\t// Return difference between two Clipper geometries. Returns new geometry.\n\tfunction diff(paths1, paths2) {\n\t    return clip(paths1, paths2, _clipperLib2.default.ClipType.ctDifference);\n\t}\n\t\n\t// Return xor of two Clipper geometries. Returns new geometry.\n\tfunction xor(paths1, paths2) {\n\t    return clip(paths1, paths2, _clipperLib2.default.ClipType.ctXor);\n\t}\n\t\n\t// Offset Clipper geometries by amount (positive expands, negative shrinks). Returns new geometry.\n\tfunction offset(paths, amount, joinType, endType) {\n\t    if (joinType === undefined) joinType = _clipperLib2.default.JoinType.jtRound;\n\t    if (endType === undefined) endType = _clipperLib2.default.EndType.etClosedPolygon;\n\t\n\t    // bug workaround: join types are swapped in ClipperLib 6.1.3.2\n\t    if (joinType === _clipperLib2.default.JoinType.jtSquare) joinType = _clipperLib2.default.JoinType.jtMiter;else if (joinType === _clipperLib2.default.JoinType.jtMiter) joinType = _clipperLib2.default.JoinType.jtSquare;\n\t\n\t    var co = new _clipperLib2.default.ClipperOffset(2, arcTolerance);\n\t    co.AddPaths(paths, joinType, endType);\n\t    var offsetted = [];\n\t    co.Execute(offsetted, amount);\n\t    return offsetted;\n\t}\n\t;\n\t\n\tvar _temp = function () {\n\t    if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n\t        return;\n\t    }\n\t\n\t    __REACT_HOT_LOADER__.register(inchToClipperScale, 'inchToClipperScale', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/mesh.js');\n\t\n\t    __REACT_HOT_LOADER__.register(mmToClipperScale, 'mmToClipperScale', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/mesh.js');\n\t\n\t    __REACT_HOT_LOADER__.register(clipperToCppScale, 'clipperToCppScale', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/mesh.js');\n\t\n\t    __REACT_HOT_LOADER__.register(cleanPolyDist, 'cleanPolyDist', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/mesh.js');\n\t\n\t    __REACT_HOT_LOADER__.register(arcTolerance, 'arcTolerance', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/mesh.js');\n\t\n\t    __REACT_HOT_LOADER__.register(linearizeCubicBezier, 'linearizeCubicBezier', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/mesh.js');\n\t\n\t    __REACT_HOT_LOADER__.register(linearizeSnapPath, 'linearizeSnapPath', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/mesh.js');\n\t\n\t    __REACT_HOT_LOADER__.register(elementToLinearSnapPaths, 'elementToLinearSnapPaths', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/mesh.js');\n\t\n\t    __REACT_HOT_LOADER__.register(snapPathToRawPaths, 'snapPathToRawPaths', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/mesh.js');\n\t\n\t    __REACT_HOT_LOADER__.register(elementToRawPaths, 'elementToRawPaths', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/mesh.js');\n\t\n\t    __REACT_HOT_LOADER__.register(flipY, 'flipY', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/mesh.js');\n\t\n\t    __REACT_HOT_LOADER__.register(hasClosedRawPaths, 'hasClosedRawPaths', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/mesh.js');\n\t\n\t    __REACT_HOT_LOADER__.register(filterClosedRawPaths, 'filterClosedRawPaths', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/mesh.js');\n\t\n\t    __REACT_HOT_LOADER__.register(rawPathsToClipperPaths, 'rawPathsToClipperPaths', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/mesh.js');\n\t\n\t    __REACT_HOT_LOADER__.register(clipperPathsToPolyTree, 'clipperPathsToPolyTree', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/mesh.js');\n\t\n\t    __REACT_HOT_LOADER__.register(triangulatePolyTree, 'triangulatePolyTree', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/mesh.js');\n\t\n\t    __REACT_HOT_LOADER__.register(triangulateRawPaths, 'triangulateRawPaths', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/mesh.js');\n\t\n\t    __REACT_HOT_LOADER__.register(clipperPathsToCPaths, 'clipperPathsToCPaths', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/mesh.js');\n\t\n\t    __REACT_HOT_LOADER__.register(cPathsToClipperPaths, 'cPathsToClipperPaths', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/mesh.js');\n\t\n\t    __REACT_HOT_LOADER__.register(cPathsToCamPaths, 'cPathsToCamPaths', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/mesh.js');\n\t\n\t    __REACT_HOT_LOADER__.register(clipperBounds, 'clipperBounds', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/mesh.js');\n\t\n\t    __REACT_HOT_LOADER__.register(clip, 'clip', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/mesh.js');\n\t\n\t    __REACT_HOT_LOADER__.register(union, 'union', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/mesh.js');\n\t\n\t    __REACT_HOT_LOADER__.register(diff, 'diff', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/mesh.js');\n\t\n\t    __REACT_HOT_LOADER__.register(xor, 'xor', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/mesh.js');\n\t\n\t    __REACT_HOT_LOADER__.register(offset, 'offset', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/mesh.js');\n\t}();\n\n\t;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;// rev 482\n\t/********************************************************************************\n\t *                                                                              *\n\t * Author    :  Angus Johnson                                                   *\n\t * Version   :  6.2.1                                                          *\n\t * Date      :  31 October 2014                                                 *\n\t * Website   :  http://www.angusj.com                                           *\n\t * Copyright :  Angus Johnson 2010-2014                                         *\n\t *                                                                              *\n\t * License:                                                                     *\n\t * Use, modification & distribution is subject to Boost Software License Ver 1. *\n\t * http://www.boost.org/LICENSE_1_0.txt                                         *\n\t *                                                                              *\n\t * Attributions:                                                                *\n\t * The code in this library is an extension of Bala Vatti's clipping algorithm: *\n\t * \"A generic solution to polygon clipping\"                                     *\n\t * Communications of the ACM, Vol 35, Issue 7 (July 1992) pp 56-63.             *\n\t * http://portal.acm.org/citation.cfm?id=129906                                 *\n\t *                                                                              *\n\t * Computer graphics and geometric modeling: implementation and algorithms      *\n\t * By Max K. Agoston                                                            *\n\t * Springer; 1 edition (January 4, 2005)                                        *\n\t * http://books.google.com/books?q=vatti+clipping+agoston                       *\n\t *                                                                              *\n\t * See also:                                                                    *\n\t * \"Polygon Offsetting by Computing Winding Numbers\"                            *\n\t * Paper no. DETC2005-85513 pp. 565-575                                         *\n\t * ASME 2005 International Design Engineering Technical Conferences             *\n\t * and Computers and Information in Engineering Conference (IDETC/CIE2005)      *\n\t * September 24-28, 2005 , Long Beach, California, USA                          *\n\t * http://www.me.berkeley.edu/~mcmains/pubs/DAC05OffsetPolygon.pdf              *\n\t *                                                                              *\n\t *******************************************************************************/\n\t/*******************************************************************************\n\t *                                                                              *\n\t * Author    :  Timo                                                            *\n\t * Version   :  6.2.1.0                                                         *\n\t * Date      :  17 June 2016                                                 *\n\t *                                                                              *\n\t * This is a translation of the C# Clipper library to Javascript.               *\n\t * Int128 struct of C# is implemented using JSBN of Tom Wu.                     *\n\t * Because Javascript lacks support for 64-bit integers, the space              *\n\t * is a little more restricted than in C# version.                              *\n\t *                                                                              *\n\t * C# version has support for coordinate space:                                 *\n\t * +-4611686018427387903 ( sqrt(2^127 -1)/2 )                                   *\n\t * while Javascript version has support for space:                              *\n\t * +-4503599627370495 ( sqrt(2^106 -1)/2 )                                      *\n\t *                                                                              *\n\t * Tom Wu's JSBN proved to be the fastest big integer library:                  *\n\t * http://jsperf.com/big-integer-library-test                                   *\n\t *                                                                              *\n\t * This class can be made simpler when (if ever) 64-bit integer support comes.  *\n\t *                                                                              *\n\t *******************************************************************************/\n\t/*******************************************************************************\n\t *                                                                              *\n\t * Basic JavaScript BN library - subset useful for RSA encryption.              *\n\t * http://www-cs-students.stanford.edu/~tjw/jsbn/                               *\n\t * Copyright (c) 2005  Tom Wu                                                   *\n\t * All Rights Reserved.                                                         *\n\t * See \"LICENSE\" for details:                                                   *\n\t * http://www-cs-students.stanford.edu/~tjw/jsbn/LICENSE                        *\n\t *                                                                              *\n\t *******************************************************************************/\n\t(function ()\n\t{\n\t  \"use strict\";\n\t  //use_int32: When enabled 32bit ints are used instead of 64bit ints. This\n\t  //improve performance but coordinate values are limited to the range +/- 46340\n\t  var use_int32 = false;\n\t  //use_xyz: adds a Z member to IntPoint. Adds a minor cost to performance.\n\t  var use_xyz = false;\n\t  //UseLines: Enables open path clipping. Adds a very minor cost to performance.\n\t  var use_lines = true;\n\t\n\t  var ClipperLib = {};\n\t  var isNode = false;\n\t  if (typeof module !== 'undefined' && module.exports)\n\t  {\n\t    module.exports = ClipperLib;\n\t    isNode = true;\n\t  }\n\t  else\n\t  {\n\t    if (true) {\n\t      !(__WEBPACK_AMD_DEFINE_FACTORY__ = (ClipperLib), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    }\n\t    if (typeof (document) !== \"undefined\") window.ClipperLib = ClipperLib;\n\t    else self['ClipperLib'] = ClipperLib;\n\t  }\n\t  var navigator_appName;\n\t  if (!isNode)\n\t  {\n\t    var nav = navigator.userAgent.toString().toLowerCase();\n\t    navigator_appName = navigator.appName;\n\t  }\n\t  else\n\t  {\n\t    var nav = \"chrome\"; // Node.js uses Chrome's V8 engine\n\t    navigator_appName = \"Netscape\"; // Firefox, Chrome and Safari returns \"Netscape\", so Node.js should also\n\t  }\n\t  // Browser test to speedup performance critical functions\n\t  var browser = {};\n\t  if (nav.indexOf(\"chrome\") != -1 && nav.indexOf(\"chromium\") == -1) browser.chrome = 1;\n\t  else browser.chrome = 0;\n\t  if (nav.indexOf(\"chromium\") != -1) browser.chromium = 1;\n\t  else browser.chromium = 0;\n\t  if (nav.indexOf(\"safari\") != -1 && nav.indexOf(\"chrome\") == -1 && nav.indexOf(\"chromium\") == -1) browser.safari = 1;\n\t  else browser.safari = 0;\n\t  if (nav.indexOf(\"firefox\") != -1) browser.firefox = 1;\n\t  else browser.firefox = 0;\n\t  if (nav.indexOf(\"firefox/17\") != -1) browser.firefox17 = 1;\n\t  else browser.firefox17 = 0;\n\t  if (nav.indexOf(\"firefox/15\") != -1) browser.firefox15 = 1;\n\t  else browser.firefox15 = 0;\n\t  if (nav.indexOf(\"firefox/3\") != -1) browser.firefox3 = 1;\n\t  else browser.firefox3 = 0;\n\t  if (nav.indexOf(\"opera\") != -1) browser.opera = 1;\n\t  else browser.opera = 0;\n\t  if (nav.indexOf(\"msie 10\") != -1) browser.msie10 = 1;\n\t  else browser.msie10 = 0;\n\t  if (nav.indexOf(\"msie 9\") != -1) browser.msie9 = 1;\n\t  else browser.msie9 = 0;\n\t  if (nav.indexOf(\"msie 8\") != -1) browser.msie8 = 1;\n\t  else browser.msie8 = 0;\n\t  if (nav.indexOf(\"msie 7\") != -1) browser.msie7 = 1;\n\t  else browser.msie7 = 0;\n\t  if (nav.indexOf(\"msie \") != -1) browser.msie = 1;\n\t  else browser.msie = 0;\n\t  ClipperLib.biginteger_used = null;\n\t\n\t  // Copyright (c) 2005  Tom Wu\n\t  // All Rights Reserved.\n\t  // See \"LICENSE\" for details.\n\t  // Basic JavaScript BN library - subset useful for RSA encryption.\n\t  // Bits per digit\n\t  var dbits;\n\t  // JavaScript engine analysis\n\t  var canary = 0xdeadbeefcafe;\n\t  var j_lm = ((canary & 0xffffff) == 0xefcafe);\n\t  // (public) Constructor\n\t  function BigInteger(a, b, c)\n\t  {\n\t    // This test variable can be removed,\n\t    // but at least for performance tests it is useful piece of knowledge\n\t    // This is the only ClipperLib related variable in BigInteger library\n\t    ClipperLib.biginteger_used = 1;\n\t    if (a != null)\n\t      if (\"number\" == typeof a && \"undefined\" == typeof (b)) this.fromInt(a); // faster conversion\n\t      else if (\"number\" == typeof a) this.fromNumber(a, b, c);\n\t    else if (b == null && \"string\" != typeof a) this.fromString(a, 256);\n\t    else this.fromString(a, b);\n\t  }\n\t  // return new, unset BigInteger\n\t  function nbi()\n\t  {\n\t    return new BigInteger(null,undefined,undefined);\n\t  }\n\t  // am: Compute w_j += (x*this_i), propagate carries,\n\t  // c is initial carry, returns final carry.\n\t  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n\t  // We need to select the fastest one that works in this environment.\n\t  // am1: use a single mult and divide to get the high bits,\n\t  // max digit bits should be 26 because\n\t  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)\n\t  function am1(i, x, w, j, c, n)\n\t  {\n\t    while (--n >= 0)\n\t    {\n\t      var v = x * this[i++] + w[j] + c;\n\t      c = Math.floor(v / 0x4000000);\n\t      w[j++] = v & 0x3ffffff;\n\t    }\n\t    return c;\n\t  }\n\t  // am2 avoids a big mult-and-extract completely.\n\t  // Max digit bits should be <= 30 because we do bitwise ops\n\t  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\n\t  function am2(i, x, w, j, c, n)\n\t  {\n\t    var xl = x & 0x7fff,\n\t      xh = x >> 15;\n\t    while (--n >= 0)\n\t    {\n\t      var l = this[i] & 0x7fff;\n\t      var h = this[i++] >> 15;\n\t      var m = xh * l + h * xl;\n\t      l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n\t      c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n\t      w[j++] = l & 0x3fffffff;\n\t    }\n\t    return c;\n\t  }\n\t  // Alternately, set max digit bits to 28 since some\n\t  // browsers slow down when dealing with 32-bit numbers.\n\t  function am3(i, x, w, j, c, n)\n\t  {\n\t    var xl = x & 0x3fff,\n\t      xh = x >> 14;\n\t    while (--n >= 0)\n\t    {\n\t      var l = this[i] & 0x3fff;\n\t      var h = this[i++] >> 14;\n\t      var m = xh * l + h * xl;\n\t      l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n\t      c = (l >> 28) + (m >> 14) + xh * h;\n\t      w[j++] = l & 0xfffffff;\n\t    }\n\t    return c;\n\t  }\n\t  if (j_lm && (navigator_appName == \"Microsoft Internet Explorer\"))\n\t  {\n\t    BigInteger.prototype.am = am2;\n\t    dbits = 30;\n\t  }\n\t  else if (j_lm && (navigator_appName != \"Netscape\"))\n\t  {\n\t    BigInteger.prototype.am = am1;\n\t    dbits = 26;\n\t  }\n\t  else\n\t  { // Mozilla/Netscape seems to prefer am3\n\t    BigInteger.prototype.am = am3;\n\t    dbits = 28;\n\t  }\n\t  BigInteger.prototype.DB = dbits;\n\t  BigInteger.prototype.DM = ((1 << dbits) - 1);\n\t  BigInteger.prototype.DV = (1 << dbits);\n\t  var BI_FP = 52;\n\t  BigInteger.prototype.FV = Math.pow(2, BI_FP);\n\t  BigInteger.prototype.F1 = BI_FP - dbits;\n\t  BigInteger.prototype.F2 = 2 * dbits - BI_FP;\n\t  // Digit conversions\n\t  var BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n\t  var BI_RC = new Array();\n\t  var rr, vv;\n\t  rr = \"0\".charCodeAt(0);\n\t  for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\n\t  rr = \"a\".charCodeAt(0);\n\t  for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\t  rr = \"A\".charCodeAt(0);\n\t  for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\t\n\t  function int2char(n)\n\t  {\n\t    return BI_RM.charAt(n);\n\t  }\n\t\n\t  function intAt(s, i)\n\t  {\n\t    var c = BI_RC[s.charCodeAt(i)];\n\t    return (c == null) ? -1 : c;\n\t  }\n\t  // (protected) copy this to r\n\t  function bnpCopyTo(r)\n\t  {\n\t    for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];\n\t    r.t = this.t;\n\t    r.s = this.s;\n\t  }\n\t  // (protected) set from integer value x, -DV <= x < DV\n\t  function bnpFromInt(x)\n\t  {\n\t    this.t = 1;\n\t    this.s = (x < 0) ? -1 : 0;\n\t    if (x > 0) this[0] = x;\n\t    else if (x < -1) this[0] = x + this.DV;\n\t    else this.t = 0;\n\t  }\n\t  // return bigint initialized to value\n\t  function nbv(i)\n\t  {\n\t    var r = nbi();\n\t    r.fromInt(i);\n\t    return r;\n\t  }\n\t  // (protected) set from string and radix\n\t  function bnpFromString(s, b)\n\t  {\n\t    var k;\n\t    if (b == 16) k = 4;\n\t    else if (b == 8) k = 3;\n\t    else if (b == 256) k = 8; // byte array\n\t    else if (b == 2) k = 1;\n\t    else if (b == 32) k = 5;\n\t    else if (b == 4) k = 2;\n\t    else\n\t    {\n\t      this.fromRadix(s, b);\n\t      return;\n\t    }\n\t    this.t = 0;\n\t    this.s = 0;\n\t    var i = s.length,\n\t      mi = false,\n\t      sh = 0;\n\t    while (--i >= 0)\n\t    {\n\t      var x = (k == 8) ? s[i] & 0xff : intAt(s, i);\n\t      if (x < 0)\n\t      {\n\t        if (s.charAt(i) == \"-\") mi = true;\n\t        continue;\n\t      }\n\t      mi = false;\n\t      if (sh == 0)\n\t        this[this.t++] = x;\n\t      else if (sh + k > this.DB)\n\t      {\n\t        this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;\n\t        this[this.t++] = (x >> (this.DB - sh));\n\t      }\n\t      else\n\t        this[this.t - 1] |= x << sh;\n\t      sh += k;\n\t      if (sh >= this.DB) sh -= this.DB;\n\t    }\n\t    if (k == 8 && (s[0] & 0x80) != 0)\n\t    {\n\t      this.s = -1;\n\t      if (sh > 0) this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;\n\t    }\n\t    this.clamp();\n\t    if (mi) BigInteger.ZERO.subTo(this, this);\n\t  }\n\t  // (protected) clamp off excess high words\n\t  function bnpClamp()\n\t  {\n\t    var c = this.s & this.DM;\n\t    while (this.t > 0 && this[this.t - 1] == c)--this.t;\n\t  }\n\t  // (public) return string representation in given radix\n\t  function bnToString(b)\n\t  {\n\t    if (this.s < 0) return \"-\" + this.negate().toString(b);\n\t    var k;\n\t    if (b == 16) k = 4;\n\t    else if (b == 8) k = 3;\n\t    else if (b == 2) k = 1;\n\t    else if (b == 32) k = 5;\n\t    else if (b == 4) k = 2;\n\t    else return this.toRadix(b);\n\t    var km = (1 << k) - 1,\n\t      d, m = false,\n\t      r = \"\",\n\t      i = this.t;\n\t    var p = this.DB - (i * this.DB) % k;\n\t    if (i-- > 0)\n\t    {\n\t      if (p < this.DB && (d = this[i] >> p) > 0)\n\t      {\n\t        m = true;\n\t        r = int2char(d);\n\t      }\n\t      while (i >= 0)\n\t      {\n\t        if (p < k)\n\t        {\n\t          d = (this[i] & ((1 << p) - 1)) << (k - p);\n\t          d |= this[--i] >> (p += this.DB - k);\n\t        }\n\t        else\n\t        {\n\t          d = (this[i] >> (p -= k)) & km;\n\t          if (p <= 0)\n\t          {\n\t            p += this.DB;\n\t            --i;\n\t          }\n\t        }\n\t        if (d > 0) m = true;\n\t        if (m) r += int2char(d);\n\t      }\n\t    }\n\t    return m ? r : \"0\";\n\t  }\n\t  // (public) -this\n\t  function bnNegate()\n\t  {\n\t    var r = nbi();\n\t    BigInteger.ZERO.subTo(this, r);\n\t    return r;\n\t  }\n\t  // (public) |this|\n\t  function bnAbs()\n\t  {\n\t    return (this.s < 0) ? this.negate() : this;\n\t  }\n\t  // (public) return + if this > a, - if this < a, 0 if equal\n\t  function bnCompareTo(a)\n\t  {\n\t    var r = this.s - a.s;\n\t    if (r != 0) return r;\n\t    var i = this.t;\n\t    r = i - a.t;\n\t    if (r != 0) return (this.s < 0) ? -r : r;\n\t    while (--i >= 0)\n\t      if ((r = this[i] - a[i]) != 0) return r;\n\t    return 0;\n\t  }\n\t  // returns bit length of the integer x\n\t  function nbits(x)\n\t  {\n\t    var r = 1,\n\t      t;\n\t    if ((t = x >>> 16) != 0)\n\t    {\n\t      x = t;\n\t      r += 16;\n\t    }\n\t    if ((t = x >> 8) != 0)\n\t    {\n\t      x = t;\n\t      r += 8;\n\t    }\n\t    if ((t = x >> 4) != 0)\n\t    {\n\t      x = t;\n\t      r += 4;\n\t    }\n\t    if ((t = x >> 2) != 0)\n\t    {\n\t      x = t;\n\t      r += 2;\n\t    }\n\t    if ((t = x >> 1) != 0)\n\t    {\n\t      x = t;\n\t      r += 1;\n\t    }\n\t    return r;\n\t  }\n\t  // (public) return the number of bits in \"this\"\n\t  function bnBitLength()\n\t  {\n\t    if (this.t <= 0) return 0;\n\t    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));\n\t  }\n\t  // (protected) r = this << n*DB\n\t  function bnpDLShiftTo(n, r)\n\t  {\n\t    var i;\n\t    for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];\n\t    for (i = n - 1; i >= 0; --i) r[i] = 0;\n\t    r.t = this.t + n;\n\t    r.s = this.s;\n\t  }\n\t  // (protected) r = this >> n*DB\n\t  function bnpDRShiftTo(n, r)\n\t  {\n\t    for (var i = n; i < this.t; ++i) r[i - n] = this[i];\n\t    r.t = Math.max(this.t - n, 0);\n\t    r.s = this.s;\n\t  }\n\t  // (protected) r = this << n\n\t  function bnpLShiftTo(n, r)\n\t  {\n\t    var bs = n % this.DB;\n\t    var cbs = this.DB - bs;\n\t    var bm = (1 << cbs) - 1;\n\t    var ds = Math.floor(n / this.DB),\n\t      c = (this.s << bs) & this.DM,\n\t      i;\n\t    for (i = this.t - 1; i >= 0; --i)\n\t    {\n\t      r[i + ds + 1] = (this[i] >> cbs) | c;\n\t      c = (this[i] & bm) << bs;\n\t    }\n\t    for (i = ds - 1; i >= 0; --i) r[i] = 0;\n\t    r[ds] = c;\n\t    r.t = this.t + ds + 1;\n\t    r.s = this.s;\n\t    r.clamp();\n\t  }\n\t  // (protected) r = this >> n\n\t  function bnpRShiftTo(n, r)\n\t  {\n\t    r.s = this.s;\n\t    var ds = Math.floor(n / this.DB);\n\t    if (ds >= this.t)\n\t    {\n\t      r.t = 0;\n\t      return;\n\t    }\n\t    var bs = n % this.DB;\n\t    var cbs = this.DB - bs;\n\t    var bm = (1 << bs) - 1;\n\t    r[0] = this[ds] >> bs;\n\t    for (var i = ds + 1; i < this.t; ++i)\n\t    {\n\t      r[i - ds - 1] |= (this[i] & bm) << cbs;\n\t      r[i - ds] = this[i] >> bs;\n\t    }\n\t    if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;\n\t    r.t = this.t - ds;\n\t    r.clamp();\n\t  }\n\t  // (protected) r = this - a\n\t  function bnpSubTo(a, r)\n\t  {\n\t    var i = 0,\n\t      c = 0,\n\t      m = Math.min(a.t, this.t);\n\t    while (i < m)\n\t    {\n\t      c += this[i] - a[i];\n\t      r[i++] = c & this.DM;\n\t      c >>= this.DB;\n\t    }\n\t    if (a.t < this.t)\n\t    {\n\t      c -= a.s;\n\t      while (i < this.t)\n\t      {\n\t        c += this[i];\n\t        r[i++] = c & this.DM;\n\t        c >>= this.DB;\n\t      }\n\t      c += this.s;\n\t    }\n\t    else\n\t    {\n\t      c += this.s;\n\t      while (i < a.t)\n\t      {\n\t        c -= a[i];\n\t        r[i++] = c & this.DM;\n\t        c >>= this.DB;\n\t      }\n\t      c -= a.s;\n\t    }\n\t    r.s = (c < 0) ? -1 : 0;\n\t    if (c < -1) r[i++] = this.DV + c;\n\t    else if (c > 0) r[i++] = c;\n\t    r.t = i;\n\t    r.clamp();\n\t  }\n\t  // (protected) r = this * a, r != this,a (HAC 14.12)\n\t  // \"this\" should be the larger one if appropriate.\n\t  function bnpMultiplyTo(a, r)\n\t  {\n\t    var x = this.abs(),\n\t      y = a.abs();\n\t    var i = x.t;\n\t    r.t = i + y.t;\n\t    while (--i >= 0) r[i] = 0;\n\t    for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n\t    r.s = 0;\n\t    r.clamp();\n\t    if (this.s != a.s) BigInteger.ZERO.subTo(r, r);\n\t  }\n\t  // (protected) r = this^2, r != this (HAC 14.16)\n\t  function bnpSquareTo(r)\n\t  {\n\t    var x = this.abs();\n\t    var i = r.t = 2 * x.t;\n\t    while (--i >= 0) r[i] = 0;\n\t    for (i = 0; i < x.t - 1; ++i)\n\t    {\n\t      var c = x.am(i, x[i], r, 2 * i, 0, 1);\n\t      if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV)\n\t      {\n\t        r[i + x.t] -= x.DV;\n\t        r[i + x.t + 1] = 1;\n\t      }\n\t    }\n\t    if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n\t    r.s = 0;\n\t    r.clamp();\n\t  }\n\t  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n\t  // r != q, this != m.  q or r may be null.\n\t  function bnpDivRemTo(m, q, r)\n\t  {\n\t    var pm = m.abs();\n\t    if (pm.t <= 0) return;\n\t    var pt = this.abs();\n\t    if (pt.t < pm.t)\n\t    {\n\t      if (q != null) q.fromInt(0);\n\t      if (r != null) this.copyTo(r);\n\t      return;\n\t    }\n\t    if (r == null) r = nbi();\n\t    var y = nbi(),\n\t      ts = this.s,\n\t      ms = m.s;\n\t    var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus\n\t    if (nsh > 0)\n\t    {\n\t      pm.lShiftTo(nsh, y);\n\t      pt.lShiftTo(nsh, r);\n\t    }\n\t    else\n\t    {\n\t      pm.copyTo(y);\n\t      pt.copyTo(r);\n\t    }\n\t    var ys = y.t;\n\t    var y0 = y[ys - 1];\n\t    if (y0 == 0) return;\n\t    var yt = y0 * (1 << this.F1) + ((ys > 1) ? y[ys - 2] >> this.F2 : 0);\n\t    var d1 = this.FV / yt,\n\t      d2 = (1 << this.F1) / yt,\n\t      e = 1 << this.F2;\n\t    var i = r.t,\n\t      j = i - ys,\n\t      t = (q == null) ? nbi() : q;\n\t    y.dlShiftTo(j, t);\n\t    if (r.compareTo(t) >= 0)\n\t    {\n\t      r[r.t++] = 1;\n\t      r.subTo(t, r);\n\t    }\n\t    BigInteger.ONE.dlShiftTo(ys, t);\n\t    t.subTo(y, y); // \"negative\" y so we can replace sub with am later\n\t    while (y.t < ys) y[y.t++] = 0;\n\t    while (--j >= 0)\n\t    {\n\t      // Estimate quotient digit\n\t      var qd = (r[--i] == y0) ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n\t      if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd)\n\t      { // Try it out\n\t        y.dlShiftTo(j, t);\n\t        r.subTo(t, r);\n\t        while (r[i] < --qd) r.subTo(t, r);\n\t      }\n\t    }\n\t    if (q != null)\n\t    {\n\t      r.drShiftTo(ys, q);\n\t      if (ts != ms) BigInteger.ZERO.subTo(q, q);\n\t    }\n\t    r.t = ys;\n\t    r.clamp();\n\t    if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder\n\t    if (ts < 0) BigInteger.ZERO.subTo(r, r);\n\t  }\n\t  // (public) this mod a\n\t  function bnMod(a)\n\t  {\n\t    var r = nbi();\n\t    this.abs().divRemTo(a, null, r);\n\t    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);\n\t    return r;\n\t  }\n\t  // Modular reduction using \"classic\" algorithm\n\t  function Classic(m)\n\t  {\n\t    this.m = m;\n\t  }\n\t\n\t  function cConvert(x)\n\t  {\n\t    if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\n\t    else return x;\n\t  }\n\t\n\t  function cRevert(x)\n\t  {\n\t    return x;\n\t  }\n\t\n\t  function cReduce(x)\n\t  {\n\t    x.divRemTo(this.m, null, x);\n\t  }\n\t\n\t  function cMulTo(x, y, r)\n\t  {\n\t    x.multiplyTo(y, r);\n\t    this.reduce(r);\n\t  }\n\t\n\t  function cSqrTo(x, r)\n\t  {\n\t    x.squareTo(r);\n\t    this.reduce(r);\n\t  }\n\t  Classic.prototype.convert = cConvert;\n\t  Classic.prototype.revert = cRevert;\n\t  Classic.prototype.reduce = cReduce;\n\t  Classic.prototype.mulTo = cMulTo;\n\t  Classic.prototype.sqrTo = cSqrTo;\n\t  // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n\t  // justification:\n\t  //         xy == 1 (mod m)\n\t  //         xy =  1+km\n\t  //   xy(2-xy) = (1+km)(1-km)\n\t  // x[y(2-xy)] = 1-k^2m^2\n\t  // x[y(2-xy)] == 1 (mod m^2)\n\t  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n\t  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n\t  // JS multiply \"overflows\" differently from C/C++, so care is needed here.\n\t  function bnpInvDigit()\n\t  {\n\t    if (this.t < 1) return 0;\n\t    var x = this[0];\n\t    if ((x & 1) == 0) return 0;\n\t    var y = x & 3; // y == 1/x mod 2^2\n\t    y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4\n\t    y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8\n\t    y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16\n\t    // last step - calculate inverse mod DV directly;\n\t    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n\t    y = (y * (2 - x * y % this.DV)) % this.DV; // y == 1/x mod 2^dbits\n\t    // we really want the negative inverse, and -DV < y < DV\n\t    return (y > 0) ? this.DV - y : -y;\n\t  }\n\t  // Montgomery reduction\n\t  function Montgomery(m)\n\t  {\n\t    this.m = m;\n\t    this.mp = m.invDigit();\n\t    this.mpl = this.mp & 0x7fff;\n\t    this.mph = this.mp >> 15;\n\t    this.um = (1 << (m.DB - 15)) - 1;\n\t    this.mt2 = 2 * m.t;\n\t  }\n\t  // xR mod m\n\t  function montConvert(x)\n\t  {\n\t    var r = nbi();\n\t    x.abs().dlShiftTo(this.m.t, r);\n\t    r.divRemTo(this.m, null, r);\n\t    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);\n\t    return r;\n\t  }\n\t  // x/R mod m\n\t  function montRevert(x)\n\t  {\n\t    var r = nbi();\n\t    x.copyTo(r);\n\t    this.reduce(r);\n\t    return r;\n\t  }\n\t  // x = x/R mod m (HAC 14.32)\n\t  function montReduce(x)\n\t  {\n\t    while (x.t <= this.mt2) // pad x so am has enough room later\n\t      x[x.t++] = 0;\n\t    for (var i = 0; i < this.m.t; ++i)\n\t    {\n\t      // faster way of calculating u0 = x[i]*mp mod DV\n\t      var j = x[i] & 0x7fff;\n\t      var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;\n\t      // use am to combine the multiply-shift-add into one call\n\t      j = i + this.m.t;\n\t      x[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n\t      // propagate carry\n\t      while (x[j] >= x.DV)\n\t      {\n\t        x[j] -= x.DV;\n\t        x[++j]++;\n\t      }\n\t    }\n\t    x.clamp();\n\t    x.drShiftTo(this.m.t, x);\n\t    if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n\t  }\n\t  // r = \"x^2/R mod m\"; x != r\n\t  function montSqrTo(x, r)\n\t  {\n\t    x.squareTo(r);\n\t    this.reduce(r);\n\t  }\n\t  // r = \"xy/R mod m\"; x,y != r\n\t  function montMulTo(x, y, r)\n\t  {\n\t    x.multiplyTo(y, r);\n\t    this.reduce(r);\n\t  }\n\t  Montgomery.prototype.convert = montConvert;\n\t  Montgomery.prototype.revert = montRevert;\n\t  Montgomery.prototype.reduce = montReduce;\n\t  Montgomery.prototype.mulTo = montMulTo;\n\t  Montgomery.prototype.sqrTo = montSqrTo;\n\t  // (protected) true iff this is even\n\t  function bnpIsEven()\n\t  {\n\t    return ((this.t > 0) ? (this[0] & 1) : this.s) == 0;\n\t  }\n\t  // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n\t  function bnpExp(e, z)\n\t  {\n\t    if (e > 0xffffffff || e < 1) return BigInteger.ONE;\n\t    var r = nbi(),\n\t      r2 = nbi(),\n\t      g = z.convert(this),\n\t      i = nbits(e) - 1;\n\t    g.copyTo(r);\n\t    while (--i >= 0)\n\t    {\n\t      z.sqrTo(r, r2);\n\t      if ((e & (1 << i)) > 0) z.mulTo(r2, g, r);\n\t      else\n\t      {\n\t        var t = r;\n\t        r = r2;\n\t        r2 = t;\n\t      }\n\t    }\n\t    return z.revert(r);\n\t  }\n\t  // (public) this^e % m, 0 <= e < 2^32\n\t  function bnModPowInt(e, m)\n\t  {\n\t    var z;\n\t    if (e < 256 || m.isEven()) z = new Classic(m);\n\t    else z = new Montgomery(m);\n\t    return this.exp(e, z);\n\t  }\n\t  // protected\n\t  BigInteger.prototype.copyTo = bnpCopyTo;\n\t  BigInteger.prototype.fromInt = bnpFromInt;\n\t  BigInteger.prototype.fromString = bnpFromString;\n\t  BigInteger.prototype.clamp = bnpClamp;\n\t  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;\n\t  BigInteger.prototype.drShiftTo = bnpDRShiftTo;\n\t  BigInteger.prototype.lShiftTo = bnpLShiftTo;\n\t  BigInteger.prototype.rShiftTo = bnpRShiftTo;\n\t  BigInteger.prototype.subTo = bnpSubTo;\n\t  BigInteger.prototype.multiplyTo = bnpMultiplyTo;\n\t  BigInteger.prototype.squareTo = bnpSquareTo;\n\t  BigInteger.prototype.divRemTo = bnpDivRemTo;\n\t  BigInteger.prototype.invDigit = bnpInvDigit;\n\t  BigInteger.prototype.isEven = bnpIsEven;\n\t  BigInteger.prototype.exp = bnpExp;\n\t  // public\n\t  BigInteger.prototype.toString = bnToString;\n\t  BigInteger.prototype.negate = bnNegate;\n\t  BigInteger.prototype.abs = bnAbs;\n\t  BigInteger.prototype.compareTo = bnCompareTo;\n\t  BigInteger.prototype.bitLength = bnBitLength;\n\t  BigInteger.prototype.mod = bnMod;\n\t  BigInteger.prototype.modPowInt = bnModPowInt;\n\t  // \"constants\"\n\t  BigInteger.ZERO = nbv(0);\n\t  BigInteger.ONE = nbv(1);\n\t  // Copyright (c) 2005-2009  Tom Wu\n\t  // All Rights Reserved.\n\t  // See \"LICENSE\" for details.\n\t  // Extended JavaScript BN functions, required for RSA private ops.\n\t  // Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n\t  // Version 1.2: square() API, isProbablePrime fix\n\t  // (public)\n\t  function bnClone()\n\t  {\n\t    var r = nbi();\n\t    this.copyTo(r);\n\t    return r;\n\t  }\n\t  // (public) return value as integer\n\t  function bnIntValue()\n\t  {\n\t    if (this.s < 0)\n\t    {\n\t      if (this.t == 1) return this[0] - this.DV;\n\t      else if (this.t == 0) return -1;\n\t    }\n\t    else if (this.t == 1) return this[0];\n\t    else if (this.t == 0) return 0;\n\t    // assumes 16 < DB < 32\n\t    return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0];\n\t  }\n\t  // (public) return value as byte\n\t  function bnByteValue()\n\t  {\n\t    return (this.t == 0) ? this.s : (this[0] << 24) >> 24;\n\t  }\n\t  // (public) return value as short (assumes DB>=16)\n\t  function bnShortValue()\n\t  {\n\t    return (this.t == 0) ? this.s : (this[0] << 16) >> 16;\n\t  }\n\t  // (protected) return x s.t. r^x < DV\n\t  function bnpChunkSize(r)\n\t  {\n\t    return Math.floor(Math.LN2 * this.DB / Math.log(r));\n\t  }\n\t  // (public) 0 if this == 0, 1 if this > 0\n\t  function bnSigNum()\n\t  {\n\t    if (this.s < 0) return -1;\n\t    else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;\n\t    else return 1;\n\t  }\n\t  // (protected) convert to radix string\n\t  function bnpToRadix(b)\n\t  {\n\t    if (b == null) b = 10;\n\t    if (this.signum() == 0 || b < 2 || b > 36) return \"0\";\n\t    var cs = this.chunkSize(b);\n\t    var a = Math.pow(b, cs);\n\t    var d = nbv(a),\n\t      y = nbi(),\n\t      z = nbi(),\n\t      r = \"\";\n\t    this.divRemTo(d, y, z);\n\t    while (y.signum() > 0)\n\t    {\n\t      r = (a + z.intValue()).toString(b).substr(1) + r;\n\t      y.divRemTo(d, y, z);\n\t    }\n\t    return z.intValue().toString(b) + r;\n\t  }\n\t  // (protected) convert from radix string\n\t  function bnpFromRadix(s, b)\n\t  {\n\t    this.fromInt(0);\n\t    if (b == null) b = 10;\n\t    var cs = this.chunkSize(b);\n\t    var d = Math.pow(b, cs),\n\t      mi = false,\n\t      j = 0,\n\t      w = 0;\n\t    for (var i = 0; i < s.length; ++i)\n\t    {\n\t      var x = intAt(s, i);\n\t      if (x < 0)\n\t      {\n\t        if (s.charAt(i) == \"-\" && this.signum() == 0) mi = true;\n\t        continue;\n\t      }\n\t      w = b * w + x;\n\t      if (++j >= cs)\n\t      {\n\t        this.dMultiply(d);\n\t        this.dAddOffset(w, 0);\n\t        j = 0;\n\t        w = 0;\n\t      }\n\t    }\n\t    if (j > 0)\n\t    {\n\t      this.dMultiply(Math.pow(b, j));\n\t      this.dAddOffset(w, 0);\n\t    }\n\t    if (mi) BigInteger.ZERO.subTo(this, this);\n\t  }\n\t  // (protected) alternate constructor\n\t  function bnpFromNumber(a, b, c)\n\t  {\n\t    if (\"number\" == typeof b)\n\t    {\n\t      // new BigInteger(int,int,RNG)\n\t      if (a < 2) this.fromInt(1);\n\t      else\n\t      {\n\t        this.fromNumber(a, c);\n\t        if (!this.testBit(a - 1)) // force MSB set\n\t          this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n\t        if (this.isEven()) this.dAddOffset(1, 0); // force odd\n\t        while (!this.isProbablePrime(b))\n\t        {\n\t          this.dAddOffset(2, 0);\n\t          if (this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);\n\t        }\n\t      }\n\t    }\n\t    else\n\t    {\n\t      // new BigInteger(int,RNG)\n\t      var x = new Array(),\n\t        t = a & 7;\n\t      x.length = (a >> 3) + 1;\n\t      b.nextBytes(x);\n\t      if (t > 0) x[0] &= ((1 << t) - 1);\n\t      else x[0] = 0;\n\t      this.fromString(x, 256);\n\t    }\n\t  }\n\t  // (public) convert to bigendian byte array\n\t  function bnToByteArray()\n\t  {\n\t    var i = this.t,\n\t      r = new Array();\n\t    r[0] = this.s;\n\t    var p = this.DB - (i * this.DB) % 8,\n\t      d, k = 0;\n\t    if (i-- > 0)\n\t    {\n\t      if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p)\n\t        r[k++] = d | (this.s << (this.DB - p));\n\t      while (i >= 0)\n\t      {\n\t        if (p < 8)\n\t        {\n\t          d = (this[i] & ((1 << p) - 1)) << (8 - p);\n\t          d |= this[--i] >> (p += this.DB - 8);\n\t        }\n\t        else\n\t        {\n\t          d = (this[i] >> (p -= 8)) & 0xff;\n\t          if (p <= 0)\n\t          {\n\t            p += this.DB;\n\t            --i;\n\t          }\n\t        }\n\t        if ((d & 0x80) != 0) d |= -256;\n\t        if (k == 0 && (this.s & 0x80) != (d & 0x80))++k;\n\t        if (k > 0 || d != this.s) r[k++] = d;\n\t      }\n\t    }\n\t    return r;\n\t  }\n\t\n\t  function bnEquals(a)\n\t  {\n\t    return (this.compareTo(a) == 0);\n\t  }\n\t\n\t  function bnMin(a)\n\t  {\n\t    return (this.compareTo(a) < 0) ? this : a;\n\t  }\n\t\n\t  function bnMax(a)\n\t  {\n\t    return (this.compareTo(a) > 0) ? this : a;\n\t  }\n\t  // (protected) r = this op a (bitwise)\n\t  function bnpBitwiseTo(a, op, r)\n\t  {\n\t    var i, f, m = Math.min(a.t, this.t);\n\t    for (i = 0; i < m; ++i) r[i] = op(this[i], a[i]);\n\t    if (a.t < this.t)\n\t    {\n\t      f = a.s & this.DM;\n\t      for (i = m; i < this.t; ++i) r[i] = op(this[i], f);\n\t      r.t = this.t;\n\t    }\n\t    else\n\t    {\n\t      f = this.s & this.DM;\n\t      for (i = m; i < a.t; ++i) r[i] = op(f, a[i]);\n\t      r.t = a.t;\n\t    }\n\t    r.s = op(this.s, a.s);\n\t    r.clamp();\n\t  }\n\t  // (public) this & a\n\t  function op_and(x, y)\n\t  {\n\t    return x & y;\n\t  }\n\t\n\t  function bnAnd(a)\n\t  {\n\t    var r = nbi();\n\t    this.bitwiseTo(a, op_and, r);\n\t    return r;\n\t  }\n\t  // (public) this | a\n\t  function op_or(x, y)\n\t  {\n\t    return x | y;\n\t  }\n\t\n\t  function bnOr(a)\n\t  {\n\t    var r = nbi();\n\t    this.bitwiseTo(a, op_or, r);\n\t    return r;\n\t  }\n\t  // (public) this ^ a\n\t  function op_xor(x, y)\n\t  {\n\t    return x ^ y;\n\t  }\n\t\n\t  function bnXor(a)\n\t  {\n\t    var r = nbi();\n\t    this.bitwiseTo(a, op_xor, r);\n\t    return r;\n\t  }\n\t  // (public) this & ~a\n\t  function op_andnot(x, y)\n\t  {\n\t    return x & ~y;\n\t  }\n\t\n\t  function bnAndNot(a)\n\t  {\n\t    var r = nbi();\n\t    this.bitwiseTo(a, op_andnot, r);\n\t    return r;\n\t  }\n\t  // (public) ~this\n\t  function bnNot()\n\t  {\n\t    var r = nbi();\n\t    for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i];\n\t    r.t = this.t;\n\t    r.s = ~this.s;\n\t    return r;\n\t  }\n\t  // (public) this << n\n\t  function bnShiftLeft(n)\n\t  {\n\t    var r = nbi();\n\t    if (n < 0) this.rShiftTo(-n, r);\n\t    else this.lShiftTo(n, r);\n\t    return r;\n\t  }\n\t  // (public) this >> n\n\t  function bnShiftRight(n)\n\t  {\n\t    var r = nbi();\n\t    if (n < 0) this.lShiftTo(-n, r);\n\t    else this.rShiftTo(n, r);\n\t    return r;\n\t  }\n\t  // return index of lowest 1-bit in x, x < 2^31\n\t  function lbit(x)\n\t  {\n\t    if (x == 0) return -1;\n\t    var r = 0;\n\t    if ((x & 0xffff) == 0)\n\t    {\n\t      x >>= 16;\n\t      r += 16;\n\t    }\n\t    if ((x & 0xff) == 0)\n\t    {\n\t      x >>= 8;\n\t      r += 8;\n\t    }\n\t    if ((x & 0xf) == 0)\n\t    {\n\t      x >>= 4;\n\t      r += 4;\n\t    }\n\t    if ((x & 3) == 0)\n\t    {\n\t      x >>= 2;\n\t      r += 2;\n\t    }\n\t    if ((x & 1) == 0)++r;\n\t    return r;\n\t  }\n\t  // (public) returns index of lowest 1-bit (or -1 if none)\n\t  function bnGetLowestSetBit()\n\t  {\n\t    for (var i = 0; i < this.t; ++i)\n\t      if (this[i] != 0) return i * this.DB + lbit(this[i]);\n\t    if (this.s < 0) return this.t * this.DB;\n\t    return -1;\n\t  }\n\t  // return number of 1 bits in x\n\t  function cbit(x)\n\t  {\n\t    var r = 0;\n\t    while (x != 0)\n\t    {\n\t      x &= x - 1;\n\t      ++r;\n\t    }\n\t    return r;\n\t  }\n\t  // (public) return number of set bits\n\t  function bnBitCount()\n\t  {\n\t    var r = 0,\n\t      x = this.s & this.DM;\n\t    for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x);\n\t    return r;\n\t  }\n\t  // (public) true iff nth bit is set\n\t  function bnTestBit(n)\n\t  {\n\t    var j = Math.floor(n / this.DB);\n\t    if (j >= this.t) return (this.s != 0);\n\t    return ((this[j] & (1 << (n % this.DB))) != 0);\n\t  }\n\t  // (protected) this op (1<<n)\n\t  function bnpChangeBit(n, op)\n\t  {\n\t    var r = BigInteger.ONE.shiftLeft(n);\n\t    this.bitwiseTo(r, op, r);\n\t    return r;\n\t  }\n\t  // (public) this | (1<<n)\n\t  function bnSetBit(n)\n\t  {\n\t    return this.changeBit(n, op_or);\n\t  }\n\t  // (public) this & ~(1<<n)\n\t  function bnClearBit(n)\n\t  {\n\t    return this.changeBit(n, op_andnot);\n\t  }\n\t  // (public) this ^ (1<<n)\n\t  function bnFlipBit(n)\n\t  {\n\t    return this.changeBit(n, op_xor);\n\t  }\n\t  // (protected) r = this + a\n\t  function bnpAddTo(a, r)\n\t  {\n\t    var i = 0,\n\t      c = 0,\n\t      m = Math.min(a.t, this.t);\n\t    while (i < m)\n\t    {\n\t      c += this[i] + a[i];\n\t      r[i++] = c & this.DM;\n\t      c >>= this.DB;\n\t    }\n\t    if (a.t < this.t)\n\t    {\n\t      c += a.s;\n\t      while (i < this.t)\n\t      {\n\t        c += this[i];\n\t        r[i++] = c & this.DM;\n\t        c >>= this.DB;\n\t      }\n\t      c += this.s;\n\t    }\n\t    else\n\t    {\n\t      c += this.s;\n\t      while (i < a.t)\n\t      {\n\t        c += a[i];\n\t        r[i++] = c & this.DM;\n\t        c >>= this.DB;\n\t      }\n\t      c += a.s;\n\t    }\n\t    r.s = (c < 0) ? -1 : 0;\n\t    if (c > 0) r[i++] = c;\n\t    else if (c < -1) r[i++] = this.DV + c;\n\t    r.t = i;\n\t    r.clamp();\n\t  }\n\t  // (public) this + a\n\t  function bnAdd(a)\n\t  {\n\t    var r = nbi();\n\t    this.addTo(a, r);\n\t    return r;\n\t  }\n\t  // (public) this - a\n\t  function bnSubtract(a)\n\t  {\n\t    var r = nbi();\n\t    this.subTo(a, r);\n\t    return r;\n\t  }\n\t  // (public) this * a\n\t  function bnMultiply(a)\n\t  {\n\t    var r = nbi();\n\t    this.multiplyTo(a, r);\n\t    return r;\n\t  }\n\t  // (public) this^2\n\t  function bnSquare()\n\t  {\n\t    var r = nbi();\n\t    this.squareTo(r);\n\t    return r;\n\t  }\n\t  // (public) this / a\n\t  function bnDivide(a)\n\t  {\n\t    var r = nbi();\n\t    this.divRemTo(a, r, null);\n\t    return r;\n\t  }\n\t  // (public) this % a\n\t  function bnRemainder(a)\n\t  {\n\t    var r = nbi();\n\t    this.divRemTo(a, null, r);\n\t    return r;\n\t  }\n\t  // (public) [this/a,this%a]\n\t  function bnDivideAndRemainder(a)\n\t  {\n\t    var q = nbi(),\n\t      r = nbi();\n\t    this.divRemTo(a, q, r);\n\t    return new Array(q, r);\n\t  }\n\t  // (protected) this *= n, this >= 0, 1 < n < DV\n\t  function bnpDMultiply(n)\n\t  {\n\t    this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\n\t    ++this.t;\n\t    this.clamp();\n\t  }\n\t  // (protected) this += n << w words, this >= 0\n\t  function bnpDAddOffset(n, w)\n\t  {\n\t    if (n == 0) return;\n\t    while (this.t <= w) this[this.t++] = 0;\n\t    this[w] += n;\n\t    while (this[w] >= this.DV)\n\t    {\n\t      this[w] -= this.DV;\n\t      if (++w >= this.t) this[this.t++] = 0;\n\t      ++this[w];\n\t    }\n\t  }\n\t  // A \"null\" reducer\n\t  function NullExp()\n\t  {}\n\t\n\t  function nNop(x)\n\t  {\n\t    return x;\n\t  }\n\t\n\t  function nMulTo(x, y, r)\n\t  {\n\t    x.multiplyTo(y, r);\n\t  }\n\t\n\t  function nSqrTo(x, r)\n\t  {\n\t    x.squareTo(r);\n\t  }\n\t  NullExp.prototype.convert = nNop;\n\t  NullExp.prototype.revert = nNop;\n\t  NullExp.prototype.mulTo = nMulTo;\n\t  NullExp.prototype.sqrTo = nSqrTo;\n\t  // (public) this^e\n\t  function bnPow(e)\n\t  {\n\t    return this.exp(e, new NullExp());\n\t  }\n\t  // (protected) r = lower n words of \"this * a\", a.t <= n\n\t  // \"this\" should be the larger one if appropriate.\n\t  function bnpMultiplyLowerTo(a, n, r)\n\t  {\n\t    var i = Math.min(this.t + a.t, n);\n\t    r.s = 0; // assumes a,this >= 0\n\t    r.t = i;\n\t    while (i > 0) r[--i] = 0;\n\t    var j;\n\t    for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);\n\t    for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i);\n\t    r.clamp();\n\t  }\n\t  // (protected) r = \"this * a\" without lower n words, n > 0\n\t  // \"this\" should be the larger one if appropriate.\n\t  function bnpMultiplyUpperTo(a, n, r)\n\t  {\n\t    --n;\n\t    var i = r.t = this.t + a.t - n;\n\t    r.s = 0; // assumes a,this >= 0\n\t    while (--i >= 0) r[i] = 0;\n\t    for (i = Math.max(n - this.t, 0); i < a.t; ++i)\n\t      r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);\n\t    r.clamp();\n\t    r.drShiftTo(1, r);\n\t  }\n\t  // Barrett modular reduction\n\t  function Barrett(m)\n\t  {\n\t    // setup Barrett\n\t    this.r2 = nbi();\n\t    this.q3 = nbi();\n\t    BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\n\t    this.mu = this.r2.divide(m);\n\t    this.m = m;\n\t  }\n\t\n\t  function barrettConvert(x)\n\t  {\n\t    if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);\n\t    else if (x.compareTo(this.m) < 0) return x;\n\t    else\n\t    {\n\t      var r = nbi();\n\t      x.copyTo(r);\n\t      this.reduce(r);\n\t      return r;\n\t    }\n\t  }\n\t\n\t  function barrettRevert(x)\n\t  {\n\t    return x;\n\t  }\n\t  // x = x mod m (HAC 14.42)\n\t  function barrettReduce(x)\n\t  {\n\t    x.drShiftTo(this.m.t - 1, this.r2);\n\t    if (x.t > this.m.t + 1)\n\t    {\n\t      x.t = this.m.t + 1;\n\t      x.clamp();\n\t    }\n\t    this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\n\t    this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\n\t    while (x.compareTo(this.r2) < 0) x.dAddOffset(1, this.m.t + 1);\n\t    x.subTo(this.r2, x);\n\t    while (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n\t  }\n\t  // r = x^2 mod m; x != r\n\t  function barrettSqrTo(x, r)\n\t  {\n\t    x.squareTo(r);\n\t    this.reduce(r);\n\t  }\n\t  // r = x*y mod m; x,y != r\n\t  function barrettMulTo(x, y, r)\n\t  {\n\t    x.multiplyTo(y, r);\n\t    this.reduce(r);\n\t  }\n\t  Barrett.prototype.convert = barrettConvert;\n\t  Barrett.prototype.revert = barrettRevert;\n\t  Barrett.prototype.reduce = barrettReduce;\n\t  Barrett.prototype.mulTo = barrettMulTo;\n\t  Barrett.prototype.sqrTo = barrettSqrTo;\n\t  // (public) this^e % m (HAC 14.85)\n\t  function bnModPow(e, m)\n\t  {\n\t    var i = e.bitLength(),\n\t      k, r = nbv(1),\n\t      z;\n\t    if (i <= 0) return r;\n\t    else if (i < 18) k = 1;\n\t    else if (i < 48) k = 3;\n\t    else if (i < 144) k = 4;\n\t    else if (i < 768) k = 5;\n\t    else k = 6;\n\t    if (i < 8)\n\t      z = new Classic(m);\n\t    else if (m.isEven())\n\t      z = new Barrett(m);\n\t    else\n\t      z = new Montgomery(m);\n\t    // precomputation\n\t    var g = new Array(),\n\t      n = 3,\n\t      k1 = k - 1,\n\t      km = (1 << k) - 1;\n\t    g[1] = z.convert(this);\n\t    if (k > 1)\n\t    {\n\t      var g2 = nbi();\n\t      z.sqrTo(g[1], g2);\n\t      while (n <= km)\n\t      {\n\t        g[n] = nbi();\n\t        z.mulTo(g2, g[n - 2], g[n]);\n\t        n += 2;\n\t      }\n\t    }\n\t    var j = e.t - 1,\n\t      w, is1 = true,\n\t      r2 = nbi(),\n\t      t;\n\t    i = nbits(e[j]) - 1;\n\t    while (j >= 0)\n\t    {\n\t      if (i >= k1) w = (e[j] >> (i - k1)) & km;\n\t      else\n\t      {\n\t        w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);\n\t        if (j > 0) w |= e[j - 1] >> (this.DB + i - k1);\n\t      }\n\t      n = k;\n\t      while ((w & 1) == 0)\n\t      {\n\t        w >>= 1;\n\t        --n;\n\t      }\n\t      if ((i -= n) < 0)\n\t      {\n\t        i += this.DB;\n\t        --j;\n\t      }\n\t      if (is1)\n\t      { // ret == 1, don't bother squaring or multiplying it\n\t        g[w].copyTo(r);\n\t        is1 = false;\n\t      }\n\t      else\n\t      {\n\t        while (n > 1)\n\t        {\n\t          z.sqrTo(r, r2);\n\t          z.sqrTo(r2, r);\n\t          n -= 2;\n\t        }\n\t        if (n > 0) z.sqrTo(r, r2);\n\t        else\n\t        {\n\t          t = r;\n\t          r = r2;\n\t          r2 = t;\n\t        }\n\t        z.mulTo(r2, g[w], r);\n\t      }\n\t      while (j >= 0 && (e[j] & (1 << i)) == 0)\n\t      {\n\t        z.sqrTo(r, r2);\n\t        t = r;\n\t        r = r2;\n\t        r2 = t;\n\t        if (--i < 0)\n\t        {\n\t          i = this.DB - 1;\n\t          --j;\n\t        }\n\t      }\n\t    }\n\t    return z.revert(r);\n\t  }\n\t  // (public) gcd(this,a) (HAC 14.54)\n\t  function bnGCD(a)\n\t  {\n\t    var x = (this.s < 0) ? this.negate() : this.clone();\n\t    var y = (a.s < 0) ? a.negate() : a.clone();\n\t    if (x.compareTo(y) < 0)\n\t    {\n\t      var t = x;\n\t      x = y;\n\t      y = t;\n\t    }\n\t    var i = x.getLowestSetBit(),\n\t      g = y.getLowestSetBit();\n\t    if (g < 0) return x;\n\t    if (i < g) g = i;\n\t    if (g > 0)\n\t    {\n\t      x.rShiftTo(g, x);\n\t      y.rShiftTo(g, y);\n\t    }\n\t    while (x.signum() > 0)\n\t    {\n\t      if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);\n\t      if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);\n\t      if (x.compareTo(y) >= 0)\n\t      {\n\t        x.subTo(y, x);\n\t        x.rShiftTo(1, x);\n\t      }\n\t      else\n\t      {\n\t        y.subTo(x, y);\n\t        y.rShiftTo(1, y);\n\t      }\n\t    }\n\t    if (g > 0) y.lShiftTo(g, y);\n\t    return y;\n\t  }\n\t  // (protected) this % n, n < 2^26\n\t  function bnpModInt(n)\n\t  {\n\t    if (n <= 0) return 0;\n\t    var d = this.DV % n,\n\t      r = (this.s < 0) ? n - 1 : 0;\n\t    if (this.t > 0)\n\t      if (d == 0) r = this[0] % n;\n\t      else\n\t        for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n;\n\t    return r;\n\t  }\n\t  // (public) 1/this % m (HAC 14.61)\n\t  function bnModInverse(m)\n\t  {\n\t    var ac = m.isEven();\n\t    if ((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;\n\t    var u = m.clone(),\n\t      v = this.clone();\n\t    var a = nbv(1),\n\t      b = nbv(0),\n\t      c = nbv(0),\n\t      d = nbv(1);\n\t    while (u.signum() != 0)\n\t    {\n\t      while (u.isEven())\n\t      {\n\t        u.rShiftTo(1, u);\n\t        if (ac)\n\t        {\n\t          if (!a.isEven() || !b.isEven())\n\t          {\n\t            a.addTo(this, a);\n\t            b.subTo(m, b);\n\t          }\n\t          a.rShiftTo(1, a);\n\t        }\n\t        else if (!b.isEven()) b.subTo(m, b);\n\t        b.rShiftTo(1, b);\n\t      }\n\t      while (v.isEven())\n\t      {\n\t        v.rShiftTo(1, v);\n\t        if (ac)\n\t        {\n\t          if (!c.isEven() || !d.isEven())\n\t          {\n\t            c.addTo(this, c);\n\t            d.subTo(m, d);\n\t          }\n\t          c.rShiftTo(1, c);\n\t        }\n\t        else if (!d.isEven()) d.subTo(m, d);\n\t        d.rShiftTo(1, d);\n\t      }\n\t      if (u.compareTo(v) >= 0)\n\t      {\n\t        u.subTo(v, u);\n\t        if (ac) a.subTo(c, a);\n\t        b.subTo(d, b);\n\t      }\n\t      else\n\t      {\n\t        v.subTo(u, v);\n\t        if (ac) c.subTo(a, c);\n\t        d.subTo(b, d);\n\t      }\n\t    }\n\t    if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n\t    if (d.compareTo(m) >= 0) return d.subtract(m);\n\t    if (d.signum() < 0) d.addTo(m, d);\n\t    else return d;\n\t    if (d.signum() < 0) return d.add(m);\n\t    else return d;\n\t  }\n\t  var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n\t  var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];\n\t  // (public) test primality with certainty >= 1-.5^t\n\t  function bnIsProbablePrime(t)\n\t  {\n\t    var i, x = this.abs();\n\t    if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1])\n\t    {\n\t      for (i = 0; i < lowprimes.length; ++i)\n\t        if (x[0] == lowprimes[i]) return true;\n\t      return false;\n\t    }\n\t    if (x.isEven()) return false;\n\t    i = 1;\n\t    while (i < lowprimes.length)\n\t    {\n\t      var m = lowprimes[i],\n\t        j = i + 1;\n\t      while (j < lowprimes.length && m < lplim) m *= lowprimes[j++];\n\t      m = x.modInt(m);\n\t      while (i < j)\n\t        if (m % lowprimes[i++] == 0) return false;\n\t    }\n\t    return x.millerRabin(t);\n\t  }\n\t  // (protected) true if probably prime (HAC 4.24, Miller-Rabin)\n\t  function bnpMillerRabin(t)\n\t  {\n\t    var n1 = this.subtract(BigInteger.ONE);\n\t    var k = n1.getLowestSetBit();\n\t    if (k <= 0) return false;\n\t    var r = n1.shiftRight(k);\n\t    t = (t + 1) >> 1;\n\t    if (t > lowprimes.length) t = lowprimes.length;\n\t    var a = nbi();\n\t    for (var i = 0; i < t; ++i)\n\t    {\n\t      //Pick bases at random, instead of starting at 2\n\t      a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);\n\t      var y = a.modPow(r, this);\n\t      if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0)\n\t      {\n\t        var j = 1;\n\t        while (j++ < k && y.compareTo(n1) != 0)\n\t        {\n\t          y = y.modPowInt(2, this);\n\t          if (y.compareTo(BigInteger.ONE) == 0) return false;\n\t        }\n\t        if (y.compareTo(n1) != 0) return false;\n\t      }\n\t    }\n\t    return true;\n\t  }\n\t  // protected\n\t  BigInteger.prototype.chunkSize = bnpChunkSize;\n\t  BigInteger.prototype.toRadix = bnpToRadix;\n\t  BigInteger.prototype.fromRadix = bnpFromRadix;\n\t  BigInteger.prototype.fromNumber = bnpFromNumber;\n\t  BigInteger.prototype.bitwiseTo = bnpBitwiseTo;\n\t  BigInteger.prototype.changeBit = bnpChangeBit;\n\t  BigInteger.prototype.addTo = bnpAddTo;\n\t  BigInteger.prototype.dMultiply = bnpDMultiply;\n\t  BigInteger.prototype.dAddOffset = bnpDAddOffset;\n\t  BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\n\t  BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\n\t  BigInteger.prototype.modInt = bnpModInt;\n\t  BigInteger.prototype.millerRabin = bnpMillerRabin;\n\t  // public\n\t  BigInteger.prototype.clone = bnClone;\n\t  BigInteger.prototype.intValue = bnIntValue;\n\t  BigInteger.prototype.byteValue = bnByteValue;\n\t  BigInteger.prototype.shortValue = bnShortValue;\n\t  BigInteger.prototype.signum = bnSigNum;\n\t  BigInteger.prototype.toByteArray = bnToByteArray;\n\t  BigInteger.prototype.equals = bnEquals;\n\t  BigInteger.prototype.min = bnMin;\n\t  BigInteger.prototype.max = bnMax;\n\t  BigInteger.prototype.and = bnAnd;\n\t  BigInteger.prototype.or = bnOr;\n\t  BigInteger.prototype.xor = bnXor;\n\t  BigInteger.prototype.andNot = bnAndNot;\n\t  BigInteger.prototype.not = bnNot;\n\t  BigInteger.prototype.shiftLeft = bnShiftLeft;\n\t  BigInteger.prototype.shiftRight = bnShiftRight;\n\t  BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\n\t  BigInteger.prototype.bitCount = bnBitCount;\n\t  BigInteger.prototype.testBit = bnTestBit;\n\t  BigInteger.prototype.setBit = bnSetBit;\n\t  BigInteger.prototype.clearBit = bnClearBit;\n\t  BigInteger.prototype.flipBit = bnFlipBit;\n\t  BigInteger.prototype.add = bnAdd;\n\t  BigInteger.prototype.subtract = bnSubtract;\n\t  BigInteger.prototype.multiply = bnMultiply;\n\t  BigInteger.prototype.divide = bnDivide;\n\t  BigInteger.prototype.remainder = bnRemainder;\n\t  BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\n\t  BigInteger.prototype.modPow = bnModPow;\n\t  BigInteger.prototype.modInverse = bnModInverse;\n\t  BigInteger.prototype.pow = bnPow;\n\t  BigInteger.prototype.gcd = bnGCD;\n\t  BigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n\t  // JSBN-specific extension\n\t  BigInteger.prototype.square = bnSquare;\n\t  var Int128 = BigInteger;\n\t  // BigInteger interfaces not implemented in jsbn:\n\t  // BigInteger(int signum, byte[] magnitude)\n\t  // double doubleValue()\n\t  // float floatValue()\n\t  // int hashCode()\n\t  // long longValue()\n\t  // static BigInteger valueOf(long val)\n\t  // Helper functions to make BigInteger functions callable with two parameters\n\t  // as in original C# Clipper\n\t  Int128.prototype.IsNegative = function ()\n\t  {\n\t    if (this.compareTo(Int128.ZERO) == -1) return true;\n\t    else return false;\n\t  };\n\t  Int128.op_Equality = function (val1, val2)\n\t  {\n\t    if (val1.compareTo(val2) == 0) return true;\n\t    else return false;\n\t  };\n\t  Int128.op_Inequality = function (val1, val2)\n\t  {\n\t    if (val1.compareTo(val2) != 0) return true;\n\t    else return false;\n\t  };\n\t  Int128.op_GreaterThan = function (val1, val2)\n\t  {\n\t    if (val1.compareTo(val2) > 0) return true;\n\t    else return false;\n\t  };\n\t  Int128.op_LessThan = function (val1, val2)\n\t  {\n\t    if (val1.compareTo(val2) < 0) return true;\n\t    else return false;\n\t  };\n\t  Int128.op_Addition = function (lhs, rhs)\n\t  {\n\t    return new Int128(lhs).add(new Int128(rhs));\n\t  };\n\t  Int128.op_Subtraction = function (lhs, rhs)\n\t  {\n\t    return new Int128(lhs).subtract(new Int128(rhs));\n\t  };\n\t  Int128.Int128Mul = function (lhs, rhs)\n\t  {\n\t    return new Int128(lhs).multiply(new Int128(rhs));\n\t  };\n\t  Int128.op_Division = function (lhs, rhs)\n\t  {\n\t    return lhs.divide(rhs);\n\t  };\n\t  Int128.prototype.ToDouble = function ()\n\t  {\n\t    return parseFloat(this.toString()); // This could be something faster\n\t  };\n\t  // end of Int128 section\n\t  /*\n\t  // Uncomment the following two lines if you want to use Int128 outside ClipperLib\n\t  if (typeof(document) !== \"undefined\") window.Int128 = Int128;\n\t  else self.Int128 = Int128;\n\t  */\n\t\n\t\n\t  // ---------------------------------------------\n\t  // Here starts the actual Clipper library:\n\t  // Helper function to support Inheritance in Javascript\n\t\tvar Inherit = function (ce, ce2)\n\t\t{\n\t\t\tvar p;\n\t\t\tif (typeof (Object.getOwnPropertyNames) == 'undefined')\n\t\t\t{\n\t\t\t\tfor (p in ce2.prototype)\n\t\t\t\t\tif (typeof (ce.prototype[p]) == 'undefined' || ce.prototype[p] == Object.prototype[p]) ce.prototype[p] = ce2.prototype[p];\n\t\t\t\tfor (p in ce2)\n\t\t\t\t\tif (typeof (ce[p]) == 'undefined') ce[p] = ce2[p];\n\t\t\t\tce.$baseCtor = ce2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar props = Object.getOwnPropertyNames(ce2.prototype);\n\t\t\t\tfor (var i = 0; i < props.length; i++)\n\t\t\t\t\tif (typeof (Object.getOwnPropertyDescriptor(ce.prototype, props[i])) == 'undefined') Object.defineProperty(ce.prototype, props[i], Object.getOwnPropertyDescriptor(ce2.prototype, props[i]));\n\t\t\t\tfor (p in ce2)\n\t\t\t\t\tif (typeof (ce[p]) == 'undefined') ce[p] = ce2[p];\n\t\t\t\tce.$baseCtor = ce2;\n\t\t\t}\n\t\t};\n\t  ClipperLib.Path = function ()\n\t  {\n\t    return [];\n\t  };\n\t  ClipperLib.Paths = function ()\n\t  {\n\t    return []; // Was previously [[]], but caused problems when pushed\n\t  };\n\t  // Preserves the calling way of original C# Clipper\n\t  // Is essential due to compatibility, because DoublePoint is public class in original C# version\n\t  ClipperLib.DoublePoint = function ()\n\t  {\n\t    var a = arguments;\n\t    this.X = 0;\n\t    this.Y = 0;\n\t    // public DoublePoint(DoublePoint dp)\n\t    // public DoublePoint(IntPoint ip)\n\t    if (a.length == 1)\n\t    {\n\t      this.X = a[0].X;\n\t      this.Y = a[0].Y;\n\t    }\n\t    else if (a.length == 2)\n\t    {\n\t      this.X = a[0];\n\t      this.Y = a[1];\n\t    }\n\t  }; // This is internal faster function when called without arguments\n\t  ClipperLib.DoublePoint0 = function ()\n\t  {\n\t    this.X = 0;\n\t    this.Y = 0;\n\t  };\n\t  // This is internal faster function when called with 1 argument (dp or ip)\n\t  ClipperLib.DoublePoint1 = function (dp)\n\t  {\n\t    this.X = dp.X;\n\t    this.Y = dp.Y;\n\t  };\n\t  // This is internal faster function when called with 2 arguments (x and y)\n\t  ClipperLib.DoublePoint2 = function (x, y)\n\t  {\n\t    this.X = x;\n\t    this.Y = y;\n\t  };\n\t  // PolyTree & PolyNode start\n\t  // -------------------------------\n\t  ClipperLib.PolyNode = function ()\n\t  {\n\t    this.m_Parent = null;\n\t    this.m_polygon = new ClipperLib.Path();\n\t    this.m_Index = 0;\n\t    this.m_jointype = 0;\n\t    this.m_endtype = 0;\n\t    this.m_Childs = [];\n\t    this.IsOpen = false;\n\t  };\n\t  ClipperLib.PolyNode.prototype.IsHoleNode = function ()\n\t  {\n\t    var result = true;\n\t    var node = this.m_Parent;\n\t    while (node !== null)\n\t    {\n\t      result = !result;\n\t      node = node.m_Parent;\n\t    }\n\t    return result;\n\t  };\n\t  ClipperLib.PolyNode.prototype.ChildCount = function ()\n\t  {\n\t    return this.m_Childs.length;\n\t  };\n\t  ClipperLib.PolyNode.prototype.Contour = function ()\n\t  {\n\t    return this.m_polygon;\n\t  };\n\t  ClipperLib.PolyNode.prototype.AddChild = function (Child)\n\t  {\n\t    var cnt = this.m_Childs.length;\n\t    this.m_Childs.push(Child);\n\t    Child.m_Parent = this;\n\t    Child.m_Index = cnt;\n\t  };\n\t  ClipperLib.PolyNode.prototype.GetNext = function ()\n\t  {\n\t    if (this.m_Childs.length > 0)\n\t      return this.m_Childs[0];\n\t    else\n\t      return this.GetNextSiblingUp();\n\t  };\n\t  ClipperLib.PolyNode.prototype.GetNextSiblingUp = function ()\n\t  {\n\t    if (this.m_Parent === null)\n\t      return null;\n\t    else if (this.m_Index == this.m_Parent.m_Childs.length - 1)\n\t      return this.m_Parent.GetNextSiblingUp();\n\t    else\n\t      return this.m_Parent.m_Childs[this.m_Index + 1];\n\t  };\n\t  ClipperLib.PolyNode.prototype.Childs = function ()\n\t  {\n\t    return this.m_Childs;\n\t  };\n\t  ClipperLib.PolyNode.prototype.Parent = function ()\n\t  {\n\t    return this.m_Parent;\n\t  };\n\t  ClipperLib.PolyNode.prototype.IsHole = function ()\n\t  {\n\t    return this.IsHoleNode();\n\t  };\n\t  // PolyTree : PolyNode\n\t  ClipperLib.PolyTree = function ()\n\t  {\n\t    this.m_AllPolys = [];\n\t    ClipperLib.PolyNode.call(this);\n\t  };\n\t  ClipperLib.PolyTree.prototype.Clear = function ()\n\t  {\n\t    for (var i = 0, ilen = this.m_AllPolys.length; i < ilen; i++)\n\t      this.m_AllPolys[i] = null;\n\t    this.m_AllPolys.length = 0;\n\t    this.m_Childs.length = 0;\n\t  };\n\t  ClipperLib.PolyTree.prototype.GetFirst = function ()\n\t  {\n\t    if (this.m_Childs.length > 0)\n\t      return this.m_Childs[0];\n\t    else\n\t      return null;\n\t  };\n\t  ClipperLib.PolyTree.prototype.Total = function ()\n\t  {\n\t\t\tvar result = this.m_AllPolys.length;\n\t\t\t//with negative offsets, ignore the hidden outer polygon ...\n\t\t\tif (result > 0 && this.m_Childs[0] != this.m_AllPolys[0]) result--;\n\t\t\treturn result;\n\t  };\n\t  Inherit(ClipperLib.PolyTree, ClipperLib.PolyNode);\n\t  // -------------------------------\n\t  // PolyTree & PolyNode end\n\t  ClipperLib.Math_Abs_Int64 = ClipperLib.Math_Abs_Int32 = ClipperLib.Math_Abs_Double = function (a)\n\t  {\n\t    return Math.abs(a);\n\t  };\n\t  ClipperLib.Math_Max_Int32_Int32 = function (a, b)\n\t  {\n\t    return Math.max(a, b);\n\t  };\n\t  /*\n\t  -----------------------------------\n\t  cast_32 speedtest: http://jsperf.com/truncate-float-to-integer/2\n\t  -----------------------------------\n\t  */\n\t  if (browser.msie || browser.opera || browser.safari) ClipperLib.Cast_Int32 = function (a)\n\t  {\n\t    return a | 0;\n\t  };\n\t  else ClipperLib.Cast_Int32 = function (a)\n\t  { // eg. browser.chrome || browser.chromium || browser.firefox\n\t    return~~ a;\n\t  };\n\t  /*\n\t  --------------------------\n\t  cast_64 speedtests: http://jsperf.com/truncate-float-to-integer\n\t  Chrome: bitwise_not_floor\n\t  Firefox17: toInteger (typeof test)\n\t  IE9: bitwise_or_floor\n\t  IE7 and IE8: to_parseint\n\t  Chromium: to_floor_or_ceil\n\t  Firefox3: to_floor_or_ceil\n\t  Firefox15: to_floor_or_ceil\n\t  Opera: to_floor_or_ceil\n\t  Safari: to_floor_or_ceil\n\t  --------------------------\n\t  */\n\t  if (browser.chrome) ClipperLib.Cast_Int64 = function (a)\n\t  {\n\t    if (a < -2147483648 || a > 2147483647)\n\t      return a < 0 ? Math.ceil(a) : Math.floor(a);\n\t    else return~~ a;\n\t  };\n\t  else if (browser.firefox && typeof (Number.toInteger) == \"function\") ClipperLib.Cast_Int64 = function (a)\n\t  {\n\t    return Number.toInteger(a);\n\t  };\n\t  else if (browser.msie7 || browser.msie8) ClipperLib.Cast_Int64 = function (a)\n\t  {\n\t    return parseInt(a, 10);\n\t  };\n\t  else if (browser.msie) ClipperLib.Cast_Int64 = function (a)\n\t  {\n\t    if (a < -2147483648 || a > 2147483647)\n\t      return a < 0 ? Math.ceil(a) : Math.floor(a);\n\t    return a | 0;\n\t  };\n\t  // eg. browser.chromium || browser.firefox || browser.opera || browser.safari\n\t  else ClipperLib.Cast_Int64 = function (a)\n\t  {\n\t    return a < 0 ? Math.ceil(a) : Math.floor(a);\n\t  };\n\t  ClipperLib.Clear = function (a)\n\t  {\n\t    a.length = 0;\n\t  };\n\t  //ClipperLib.MaxSteps = 64; // How many steps at maximum in arc in BuildArc() function\n\t  ClipperLib.PI = 3.141592653589793;\n\t  ClipperLib.PI2 = 2 * 3.141592653589793;\n\t  ClipperLib.IntPoint = function ()\n\t  {\n\t    var a = arguments,\n\t      alen = a.length;\n\t    this.X = 0;\n\t    this.Y = 0;\n\t    if (use_xyz)\n\t    {\n\t      this.Z = 0;\n\t      if (alen == 3) // public IntPoint(cInt x, cInt y, cInt z = 0)\n\t      {\n\t        this.X = a[0];\n\t        this.Y = a[1];\n\t        this.Z = a[2];\n\t      }\n\t      else if (alen == 2) // public IntPoint(cInt x, cInt y)\n\t      {\n\t        this.X = a[0];\n\t        this.Y = a[1];\n\t        this.Z = 0;\n\t      }\n\t      else if (alen == 1)\n\t      {\n\t        if (a[0] instanceof ClipperLib.DoublePoint) // public IntPoint(DoublePoint dp)\n\t        {\n\t          var dp = a[0];\n\t          this.X = ClipperLib.Clipper.Round(dp.X);\n\t          this.Y = ClipperLib.Clipper.Round(dp.Y);\n\t          this.Z = 0;\n\t        }\n\t        else // public IntPoint(IntPoint pt)\n\t        {\n\t          var pt = a[0];\n\t          if (typeof (pt.Z) == \"undefined\") pt.Z = 0;\n\t          this.X = pt.X;\n\t          this.Y = pt.Y;\n\t          this.Z = pt.Z;\n\t        }\n\t      }\n\t      else // public IntPoint()\n\t      {\n\t        this.X = 0;\n\t        this.Y = 0;\n\t        this.Z = 0;\n\t      }\n\t    }\n\t    else // if (!use_xyz)\n\t    {\n\t      if (alen == 2) // public IntPoint(cInt X, cInt Y)\n\t      {\n\t        this.X = a[0];\n\t        this.Y = a[1];\n\t      }\n\t      else if (alen == 1)\n\t      {\n\t        if (a[0] instanceof ClipperLib.DoublePoint) // public IntPoint(DoublePoint dp)\n\t        {\n\t          var dp = a[0];\n\t          this.X = ClipperLib.Clipper.Round(dp.X);\n\t          this.Y = ClipperLib.Clipper.Round(dp.Y);\n\t        }\n\t        else // public IntPoint(IntPoint pt)\n\t        {\n\t          var pt = a[0];\n\t          this.X = pt.X;\n\t          this.Y = pt.Y;\n\t        }\n\t      }\n\t      else // public IntPoint(IntPoint pt)\n\t      {\n\t        this.X = 0;\n\t        this.Y = 0;\n\t      }\n\t    }\n\t  };\n\t  ClipperLib.IntPoint.op_Equality = function (a, b)\n\t  {\n\t    //return a == b;\n\t    return a.X == b.X && a.Y == b.Y;\n\t  };\n\t  ClipperLib.IntPoint.op_Inequality = function (a, b)\n\t  {\n\t    //return a != b;\n\t    return a.X != b.X || a.Y != b.Y;\n\t  };\n\t  /*\n\t  ClipperLib.IntPoint.prototype.Equals = function (obj)\n\t  {\n\t    if (obj === null)\n\t        return false;\n\t    if (obj instanceof ClipperLib.IntPoint)\n\t    {\n\t        var a = Cast(obj, ClipperLib.IntPoint);\n\t        return (this.X == a.X) && (this.Y == a.Y);\n\t    }\n\t    else\n\t        return false;\n\t  };\n\t*/\n\t  if (use_xyz)\n\t  {\n\t    ClipperLib.IntPoint0 = function ()\n\t    {\n\t      this.X = 0;\n\t      this.Y = 0;\n\t      this.Z = 0;\n\t    };\n\t    ClipperLib.IntPoint1 = function (pt)\n\t    {\n\t      this.X = pt.X;\n\t      this.Y = pt.Y;\n\t      this.Z = pt.Z;\n\t    };\n\t    ClipperLib.IntPoint1dp = function (dp)\n\t    {\n\t      this.X = ClipperLib.Clipper.Round(dp.X);\n\t      this.Y = ClipperLib.Clipper.Round(dp.Y);\n\t      this.Z = 0;\n\t    };\n\t    ClipperLib.IntPoint2 = function (x, y)\n\t    {\n\t      this.X = x;\n\t      this.Y = y;\n\t      this.Z = 0;\n\t    };\n\t    ClipperLib.IntPoint3 = function (x, y, z)\n\t    {\n\t      this.X = x;\n\t      this.Y = y;\n\t      this.Z = z;\n\t    };\n\t  }\n\t  else // if (!use_xyz)\n\t  {\n\t    ClipperLib.IntPoint0 = function ()\n\t    {\n\t      this.X = 0;\n\t      this.Y = 0;\n\t    };\n\t    ClipperLib.IntPoint1 = function (pt)\n\t    {\n\t      this.X = pt.X;\n\t      this.Y = pt.Y;\n\t    };\n\t    ClipperLib.IntPoint1dp = function (dp)\n\t    {\n\t      this.X = ClipperLib.Clipper.Round(dp.X);\n\t      this.Y = ClipperLib.Clipper.Round(dp.Y);\n\t    };\n\t    ClipperLib.IntPoint2 = function (x, y)\n\t    {\n\t      this.X = x;\n\t      this.Y = y;\n\t    };\n\t  }\n\t  ClipperLib.IntRect = function ()\n\t  {\n\t    var a = arguments,\n\t      alen = a.length;\n\t    if (alen == 4) // function (l, t, r, b)\n\t    {\n\t      this.left = a[0];\n\t      this.top = a[1];\n\t      this.right = a[2];\n\t      this.bottom = a[3];\n\t    }\n\t    else if (alen == 1) // function (ir)\n\t    {\n\t      this.left = ir.left;\n\t      this.top = ir.top;\n\t      this.right = ir.right;\n\t      this.bottom = ir.bottom;\n\t    }\n\t    else // function ()\n\t    {\n\t      this.left = 0;\n\t      this.top = 0;\n\t      this.right = 0;\n\t      this.bottom = 0;\n\t    }\n\t  };\n\t  ClipperLib.IntRect0 = function ()\n\t  {\n\t    this.left = 0;\n\t    this.top = 0;\n\t    this.right = 0;\n\t    this.bottom = 0;\n\t  };\n\t  ClipperLib.IntRect1 = function (ir)\n\t  {\n\t    this.left = ir.left;\n\t    this.top = ir.top;\n\t    this.right = ir.right;\n\t    this.bottom = ir.bottom;\n\t  };\n\t  ClipperLib.IntRect4 = function (l, t, r, b)\n\t  {\n\t    this.left = l;\n\t    this.top = t;\n\t    this.right = r;\n\t    this.bottom = b;\n\t  };\n\t  ClipperLib.ClipType = {\n\t    ctIntersection: 0,\n\t    ctUnion: 1,\n\t    ctDifference: 2,\n\t    ctXor: 3\n\t  };\n\t  ClipperLib.PolyType = {\n\t    ptSubject: 0,\n\t    ptClip: 1\n\t  };\n\t  ClipperLib.PolyFillType = {\n\t    pftEvenOdd: 0,\n\t    pftNonZero: 1,\n\t    pftPositive: 2,\n\t    pftNegative: 3\n\t  };\n\t  ClipperLib.JoinType = {\n\t    jtSquare: 0,\n\t    jtRound: 1,\n\t    jtMiter: 2\n\t  };\n\t  ClipperLib.EndType = {\n\t    etOpenSquare: 0,\n\t    etOpenRound: 1,\n\t    etOpenButt: 2,\n\t    etClosedLine: 3,\n\t    etClosedPolygon: 4\n\t  };\n\t  ClipperLib.EdgeSide = {\n\t    esLeft: 0,\n\t    esRight: 1\n\t  };\n\t  ClipperLib.Direction = {\n\t    dRightToLeft: 0,\n\t    dLeftToRight: 1\n\t  };\n\t  ClipperLib.TEdge = function ()\n\t  {\n\t    this.Bot = new ClipperLib.IntPoint();\n\t    this.Curr = new ClipperLib.IntPoint();\n\t    this.Top = new ClipperLib.IntPoint();\n\t    this.Delta = new ClipperLib.IntPoint();\n\t    this.Dx = 0;\n\t    this.PolyTyp = ClipperLib.PolyType.ptSubject;\n\t    this.Side = ClipperLib.EdgeSide.esLeft;\n\t    this.WindDelta = 0;\n\t    this.WindCnt = 0;\n\t    this.WindCnt2 = 0;\n\t    this.OutIdx = 0;\n\t    this.Next = null;\n\t    this.Prev = null;\n\t    this.NextInLML = null;\n\t    this.NextInAEL = null;\n\t    this.PrevInAEL = null;\n\t    this.NextInSEL = null;\n\t    this.PrevInSEL = null;\n\t  };\n\t  ClipperLib.IntersectNode = function ()\n\t  {\n\t    this.Edge1 = null;\n\t    this.Edge2 = null;\n\t    this.Pt = new ClipperLib.IntPoint();\n\t  };\n\t  ClipperLib.MyIntersectNodeSort = function () {};\n\t  ClipperLib.MyIntersectNodeSort.Compare = function (node1, node2)\n\t  {\n\t    var i = node2.Pt.Y - node1.Pt.Y;\n\t    if (i > 0) return 1;\n\t    else if (i < 0) return -1;\n\t    else return 0;\n\t  };\n\t\n\t  ClipperLib.LocalMinima = function ()\n\t  {\n\t    this.Y = 0;\n\t    this.LeftBound = null;\n\t    this.RightBound = null;\n\t    this.Next = null;\n\t  };\n\t  ClipperLib.Scanbeam = function ()\n\t  {\n\t    this.Y = 0;\n\t    this.Next = null;\n\t  };\n\t  ClipperLib.OutRec = function ()\n\t  {\n\t    this.Idx = 0;\n\t    this.IsHole = false;\n\t    this.IsOpen = false;\n\t    this.FirstLeft = null;\n\t    this.Pts = null;\n\t    this.BottomPt = null;\n\t    this.PolyNode = null;\n\t  };\n\t  ClipperLib.OutPt = function ()\n\t  {\n\t    this.Idx = 0;\n\t    this.Pt = new ClipperLib.IntPoint();\n\t    this.Next = null;\n\t    this.Prev = null;\n\t  };\n\t  ClipperLib.Join = function ()\n\t  {\n\t    this.OutPt1 = null;\n\t    this.OutPt2 = null;\n\t    this.OffPt = new ClipperLib.IntPoint();\n\t  };\n\t  ClipperLib.ClipperBase = function ()\n\t  {\n\t    this.m_MinimaList = null;\n\t    this.m_CurrentLM = null;\n\t    this.m_edges = new Array();\n\t    this.m_UseFullRange = false;\n\t    this.m_HasOpenPaths = false;\n\t    this.PreserveCollinear = false;\n\t    this.m_MinimaList = null;\n\t    this.m_CurrentLM = null;\n\t    this.m_UseFullRange = false;\n\t    this.m_HasOpenPaths = false;\n\t  };\n\t  // Ranges are in original C# too high for Javascript (in current state 2013 september):\n\t  // protected const double horizontal = -3.4E+38;\n\t  // internal const cInt loRange = 0x3FFFFFFF; // = 1073741823 = sqrt(2^63 -1)/2\n\t  // internal const cInt hiRange = 0x3FFFFFFFFFFFFFFFL; // = 4611686018427387903 = sqrt(2^127 -1)/2\n\t  // So had to adjust them to more suitable for Javascript.\n\t  // If JS some day supports truly 64-bit integers, then these ranges can be as in C#\n\t  // and biginteger library can be more simpler (as then 128bit can be represented as two 64bit numbers)\n\t  ClipperLib.ClipperBase.horizontal = -9007199254740992; //-2^53\n\t  ClipperLib.ClipperBase.Skip = -2;\n\t  ClipperLib.ClipperBase.Unassigned = -1;\n\t  ClipperLib.ClipperBase.tolerance = 1E-20;\n\t  if (use_int32)\n\t  {\n\t    ClipperLib.ClipperBase.loRange = 0x7FFF;\n\t    ClipperLib.ClipperBase.hiRange = 0x7FFF;\n\t  }\n\t  else\n\t  {\n\t    ClipperLib.ClipperBase.loRange = 47453132; // sqrt(2^53 -1)/2\n\t    ClipperLib.ClipperBase.hiRange = 4503599627370495; // sqrt(2^106 -1)/2\n\t  }\n\t\n\t  ClipperLib.ClipperBase.near_zero = function (val)\n\t  {\n\t    return (val > -ClipperLib.ClipperBase.tolerance) && (val < ClipperLib.ClipperBase.tolerance);\n\t  };\n\t  ClipperLib.ClipperBase.IsHorizontal = function (e)\n\t  {\n\t    return e.Delta.Y === 0;\n\t  };\n\t  ClipperLib.ClipperBase.prototype.PointIsVertex = function (pt, pp)\n\t  {\n\t    var pp2 = pp;\n\t    do {\n\t      if (ClipperLib.IntPoint.op_Equality(pp2.Pt, pt))\n\t        return true;\n\t      pp2 = pp2.Next;\n\t    }\n\t    while (pp2 != pp)\n\t    return false;\n\t  };\n\t  ClipperLib.ClipperBase.prototype.PointOnLineSegment = function (pt, linePt1, linePt2, UseFullRange)\n\t  {\n\t    if (UseFullRange)\n\t      return ((pt.X == linePt1.X) && (pt.Y == linePt1.Y)) ||\n\t        ((pt.X == linePt2.X) && (pt.Y == linePt2.Y)) ||\n\t        (((pt.X > linePt1.X) == (pt.X < linePt2.X)) &&\n\t        ((pt.Y > linePt1.Y) == (pt.Y < linePt2.Y)) &&\n\t        (Int128.op_Equality(Int128.Int128Mul((pt.X - linePt1.X), (linePt2.Y - linePt1.Y)),\n\t          Int128.Int128Mul((linePt2.X - linePt1.X), (pt.Y - linePt1.Y)))));\n\t    else\n\t      return ((pt.X == linePt1.X) && (pt.Y == linePt1.Y)) || ((pt.X == linePt2.X) && (pt.Y == linePt2.Y)) || (((pt.X > linePt1.X) == (pt.X < linePt2.X)) && ((pt.Y > linePt1.Y) == (pt.Y < linePt2.Y)) && ((pt.X - linePt1.X) * (linePt2.Y - linePt1.Y) == (linePt2.X - linePt1.X) * (pt.Y - linePt1.Y)));\n\t  };\n\t  ClipperLib.ClipperBase.prototype.PointOnPolygon = function (pt, pp, UseFullRange)\n\t  {\n\t    var pp2 = pp;\n\t    while (true)\n\t    {\n\t      if (this.PointOnLineSegment(pt, pp2.Pt, pp2.Next.Pt, UseFullRange))\n\t        return true;\n\t      pp2 = pp2.Next;\n\t      if (pp2 == pp)\n\t        break;\n\t    }\n\t    return false;\n\t  };\n\t  ClipperLib.ClipperBase.prototype.SlopesEqual = ClipperLib.ClipperBase.SlopesEqual = function ()\n\t  {\n\t    var a = arguments,\n\t      alen = a.length;\n\t    var e1, e2, pt1, pt2, pt3, pt4, UseFullRange;\n\t    if (alen == 3) // function (e1, e2, UseFullRange)\n\t    {\n\t      e1 = a[0];\n\t      e2 = a[1];\n\t      UseFullRange = a[2];\n\t      if (UseFullRange)\n\t        return Int128.op_Equality(Int128.Int128Mul(e1.Delta.Y, e2.Delta.X), Int128.Int128Mul(e1.Delta.X, e2.Delta.Y));\n\t      else\n\t        return ClipperLib.Cast_Int64((e1.Delta.Y) * (e2.Delta.X)) == ClipperLib.Cast_Int64((e1.Delta.X) * (e2.Delta.Y));\n\t    }\n\t    else if (alen == 4) // function (pt1, pt2, pt3, UseFullRange)\n\t    {\n\t      pt1 = a[0];\n\t      pt2 = a[1];\n\t      pt3 = a[2];\n\t      UseFullRange = a[3];\n\t      if (UseFullRange)\n\t        return Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt2.X - pt3.X), Int128.Int128Mul(pt1.X - pt2.X, pt2.Y - pt3.Y));\n\t      else\n\t        return ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt2.X - pt3.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt2.Y - pt3.Y)) === 0;\n\t    }\n\t    else // function (pt1, pt2, pt3, pt4, UseFullRange)\n\t    {\n\t      pt1 = a[0];\n\t      pt2 = a[1];\n\t      pt3 = a[2];\n\t      pt4 = a[3];\n\t      UseFullRange = a[4];\n\t      if (UseFullRange)\n\t        return Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt3.X - pt4.X), Int128.Int128Mul(pt1.X - pt2.X, pt3.Y - pt4.Y));\n\t      else\n\t        return ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt3.X - pt4.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt3.Y - pt4.Y)) === 0;\n\t    }\n\t  };\n\t  ClipperLib.ClipperBase.SlopesEqual3 = function (e1, e2, UseFullRange)\n\t  {\n\t    if (UseFullRange)\n\t      return Int128.op_Equality(Int128.Int128Mul(e1.Delta.Y, e2.Delta.X), Int128.Int128Mul(e1.Delta.X, e2.Delta.Y));\n\t    else\n\t      return ClipperLib.Cast_Int64((e1.Delta.Y) * (e2.Delta.X)) == ClipperLib.Cast_Int64((e1.Delta.X) * (e2.Delta.Y));\n\t  };\n\t  ClipperLib.ClipperBase.SlopesEqual4 = function (pt1, pt2, pt3, UseFullRange)\n\t  {\n\t    if (UseFullRange)\n\t      return Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt2.X - pt3.X), Int128.Int128Mul(pt1.X - pt2.X, pt2.Y - pt3.Y));\n\t    else\n\t      return ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt2.X - pt3.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt2.Y - pt3.Y)) === 0;\n\t  };\n\t  ClipperLib.ClipperBase.SlopesEqual5 = function (pt1, pt2, pt3, pt4, UseFullRange)\n\t  {\n\t    if (UseFullRange)\n\t      return Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt3.X - pt4.X), Int128.Int128Mul(pt1.X - pt2.X, pt3.Y - pt4.Y));\n\t    else\n\t      return ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt3.X - pt4.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt3.Y - pt4.Y)) === 0;\n\t  };\n\t  ClipperLib.ClipperBase.prototype.Clear = function ()\n\t  {\n\t    this.DisposeLocalMinimaList();\n\t    for (var i = 0, ilen = this.m_edges.length; i < ilen; ++i)\n\t    {\n\t      for (var j = 0, jlen = this.m_edges[i].length; j < jlen; ++j)\n\t        this.m_edges[i][j] = null;\n\t      ClipperLib.Clear(this.m_edges[i]);\n\t    }\n\t    ClipperLib.Clear(this.m_edges);\n\t    this.m_UseFullRange = false;\n\t    this.m_HasOpenPaths = false;\n\t  };\n\t  ClipperLib.ClipperBase.prototype.DisposeLocalMinimaList = function ()\n\t  {\n\t    while (this.m_MinimaList !== null)\n\t    {\n\t      var tmpLm = this.m_MinimaList.Next;\n\t      this.m_MinimaList = null;\n\t      this.m_MinimaList = tmpLm;\n\t    }\n\t    this.m_CurrentLM = null;\n\t  };\n\t  ClipperLib.ClipperBase.prototype.RangeTest = function (Pt, useFullRange)\n\t  {\n\t    if (useFullRange.Value)\n\t    {\n\t      if (Pt.X > ClipperLib.ClipperBase.hiRange || Pt.Y > ClipperLib.ClipperBase.hiRange || -Pt.X > ClipperLib.ClipperBase.hiRange || -Pt.Y > ClipperLib.ClipperBase.hiRange)\n\t        ClipperLib.Error(\"Coordinate outside allowed range in RangeTest().\");\n\t    }\n\t    else if (Pt.X > ClipperLib.ClipperBase.loRange || Pt.Y > ClipperLib.ClipperBase.loRange || -Pt.X > ClipperLib.ClipperBase.loRange || -Pt.Y > ClipperLib.ClipperBase.loRange)\n\t    {\n\t      useFullRange.Value = true;\n\t      this.RangeTest(Pt, useFullRange);\n\t    }\n\t  };\n\t  ClipperLib.ClipperBase.prototype.InitEdge = function (e, eNext, ePrev, pt)\n\t  {\n\t    e.Next = eNext;\n\t    e.Prev = ePrev;\n\t    //e.Curr = pt;\n\t    e.Curr.X = pt.X;\n\t    e.Curr.Y = pt.Y;\n\t    e.OutIdx = -1;\n\t  };\n\t  ClipperLib.ClipperBase.prototype.InitEdge2 = function (e, polyType)\n\t  {\n\t    if (e.Curr.Y >= e.Next.Curr.Y)\n\t    {\n\t      //e.Bot = e.Curr;\n\t      e.Bot.X = e.Curr.X;\n\t      e.Bot.Y = e.Curr.Y;\n\t      //e.Top = e.Next.Curr;\n\t      e.Top.X = e.Next.Curr.X;\n\t      e.Top.Y = e.Next.Curr.Y;\n\t    }\n\t    else\n\t    {\n\t      //e.Top = e.Curr;\n\t      e.Top.X = e.Curr.X;\n\t      e.Top.Y = e.Curr.Y;\n\t      //e.Bot = e.Next.Curr;\n\t      e.Bot.X = e.Next.Curr.X;\n\t      e.Bot.Y = e.Next.Curr.Y;\n\t    }\n\t    this.SetDx(e);\n\t    e.PolyTyp = polyType;\n\t  };\n\t  ClipperLib.ClipperBase.prototype.FindNextLocMin = function (E)\n\t  {\n\t    var E2;\n\t    for (;;)\n\t    {\n\t      while (ClipperLib.IntPoint.op_Inequality(E.Bot, E.Prev.Bot) || ClipperLib.IntPoint.op_Equality(E.Curr, E.Top))\n\t        E = E.Next;\n\t      if (E.Dx != ClipperLib.ClipperBase.horizontal && E.Prev.Dx != ClipperLib.ClipperBase.horizontal)\n\t        break;\n\t      while (E.Prev.Dx == ClipperLib.ClipperBase.horizontal)\n\t        E = E.Prev;\n\t      E2 = E;\n\t      while (E.Dx == ClipperLib.ClipperBase.horizontal)\n\t        E = E.Next;\n\t      if (E.Top.Y == E.Prev.Bot.Y)\n\t        continue;\n\t      //ie just an intermediate horz.\n\t      if (E2.Prev.Bot.X < E.Bot.X)\n\t        E = E2;\n\t      break;\n\t    }\n\t    return E;\n\t  };\n\t  ClipperLib.ClipperBase.prototype.ProcessBound = function (E, LeftBoundIsForward)\n\t  {\n\t    var EStart;\n\t    var Result = E;\n\t    var Horz;\n\t\n\t      if (Result.OutIdx == ClipperLib.ClipperBase.Skip)\n\t      {\n\t        //check if there are edges beyond the skip edge in the bound and if so\n\t        //create another LocMin and calling ProcessBound once more ...\n\t        E = Result;\n\t        if (LeftBoundIsForward)\n\t        {\n\t          while (E.Top.Y == E.Next.Bot.Y) E = E.Next;\n\t          while (E != Result && E.Dx == ClipperLib.ClipperBase.horizontal) E = E.Prev;\n\t        }\n\t        else\n\t        {\n\t          while (E.Top.Y == E.Prev.Bot.Y) E = E.Prev;\n\t          while (E != Result && E.Dx == ClipperLib.ClipperBase.horizontal) E = E.Next;\n\t        }\n\t        if (E == Result)\n\t        {\n\t          if (LeftBoundIsForward) Result = E.Next;\n\t          else Result = E.Prev;\n\t        }\n\t        else\n\t        {\n\t          //there are more edges in the bound beyond result starting with E\n\t          if (LeftBoundIsForward)\n\t            E = Result.Next;\n\t          else\n\t            E = Result.Prev;\n\t          var locMin = new ClipperLib.LocalMinima();\n\t          locMin.Next = null;\n\t          locMin.Y = E.Bot.Y;\n\t          locMin.LeftBound = null;\n\t          locMin.RightBound = E;\n\t          E.WindDelta = 0;\n\t          Result = this.ProcessBound(E, LeftBoundIsForward);\n\t          this.InsertLocalMinima(locMin);\n\t        }\n\t        return Result;\n\t      }\n\t\n\t      if (E.Dx == ClipperLib.ClipperBase.horizontal)\n\t      {\n\t        //We need to be careful with open paths because this may not be a\n\t        //true local minima (ie E may be following a skip edge).\n\t        //Also, consecutive horz. edges may start heading left before going right.\n\t        if (LeftBoundIsForward) EStart = E.Prev;\n\t        else EStart = E.Next;\n\t        if (EStart.OutIdx != ClipperLib.ClipperBase.Skip)\n\t        {\n\t          if (EStart.Dx == ClipperLib.ClipperBase.horizontal) //ie an adjoining horizontal skip edge\n\t          {\n\t            if (EStart.Bot.X != E.Bot.X && EStart.Top.X != E.Bot.X)\n\t              this.ReverseHorizontal(E);\n\t          }\n\t          else if (EStart.Bot.X != E.Bot.X)\n\t            this.ReverseHorizontal(E);\n\t        }\n\t      }\n\t\n\t      EStart = E;\n\t      if (LeftBoundIsForward)\n\t      {\n\t        while (Result.Top.Y == Result.Next.Bot.Y && Result.Next.OutIdx != ClipperLib.ClipperBase.Skip)\n\t          Result = Result.Next;\n\t        if (Result.Dx == ClipperLib.ClipperBase.horizontal && Result.Next.OutIdx != ClipperLib.ClipperBase.Skip)\n\t        {\n\t          //nb: at the top of a bound, horizontals are added to the bound\n\t          //only when the preceding edge attaches to the horizontal's left vertex\n\t          //unless a Skip edge is encountered when that becomes the top divide\n\t          Horz = Result;\n\t          while (Horz.Prev.Dx == ClipperLib.ClipperBase.horizontal)\n\t            Horz = Horz.Prev;\n\t          if (Horz.Prev.Top.X == Result.Next.Top.X)\n\t          {\n\t            if (!LeftBoundIsForward)\n\t              Result = Horz.Prev;\n\t          }\n\t          else if (Horz.Prev.Top.X > Result.Next.Top.X)\n\t            Result = Horz.Prev;\n\t        }\n\t        while (E != Result)\n\t        {\n\t          E.NextInLML = E.Next;\n\t          if (E.Dx == ClipperLib.ClipperBase.horizontal && E != EStart && E.Bot.X != E.Prev.Top.X)\n\t            this.ReverseHorizontal(E);\n\t          E = E.Next;\n\t        }\n\t        if (E.Dx == ClipperLib.ClipperBase.horizontal && E != EStart && E.Bot.X != E.Prev.Top.X)\n\t          this.ReverseHorizontal(E);\n\t        Result = Result.Next;\n\t        //move to the edge just beyond current bound\n\t      }\n\t      else\n\t      {\n\t        while (Result.Top.Y == Result.Prev.Bot.Y && Result.Prev.OutIdx != ClipperLib.ClipperBase.Skip)\n\t          Result = Result.Prev;\n\t        if (Result.Dx == ClipperLib.ClipperBase.horizontal && Result.Prev.OutIdx != ClipperLib.ClipperBase.Skip)\n\t        {\n\t          Horz = Result;\n\t          while (Horz.Next.Dx == ClipperLib.ClipperBase.horizontal)\n\t            Horz = Horz.Next;\n\t          if (Horz.Next.Top.X == Result.Prev.Top.X)\n\t          {\n\t            if (!LeftBoundIsForward)\n\t              Result = Horz.Next;\n\t          }\n\t          else if (Horz.Next.Top.X > Result.Prev.Top.X)\n\t            Result = Horz.Next;\n\t        }\n\t        while (E != Result)\n\t        {\n\t          E.NextInLML = E.Prev;\n\t          if (E.Dx == ClipperLib.ClipperBase.horizontal && E != EStart && E.Bot.X != E.Next.Top.X)\n\t            this.ReverseHorizontal(E);\n\t          E = E.Prev;\n\t        }\n\t        if (E.Dx == ClipperLib.ClipperBase.horizontal && E != EStart && E.Bot.X != E.Next.Top.X)\n\t          this.ReverseHorizontal(E);\n\t        Result = Result.Prev;\n\t        //move to the edge just beyond current bound\n\t      }\n\t\n\t    return Result;\n\t  };\n\t\n\t  ClipperLib.ClipperBase.prototype.AddPath = function (pg, polyType, Closed)\n\t  {\n\t    if (use_lines)\n\t    {\n\t      if (!Closed && polyType == ClipperLib.PolyType.ptClip)\n\t        ClipperLib.Error(\"AddPath: Open paths must be subject.\");\n\t    }\n\t    else\n\t    {\n\t      if (!Closed)\n\t        ClipperLib.Error(\"AddPath: Open paths have been disabled.\");\n\t    }\n\t    var highI = pg.length - 1;\n\t    if (Closed)\n\t      while (highI > 0 && (ClipperLib.IntPoint.op_Equality(pg[highI], pg[0])))\n\t    --highI;\n\t    while (highI > 0 && (ClipperLib.IntPoint.op_Equality(pg[highI], pg[highI - 1])))\n\t    --highI;\n\t    if ((Closed && highI < 2) || (!Closed && highI < 1))\n\t      return false;\n\t    //create a new edge array ...\n\t    var edges = new Array();\n\t    for (var i = 0; i <= highI; i++)\n\t      edges.push(new ClipperLib.TEdge());\n\t    var IsFlat = true;\n\t    //1. Basic (first) edge initialization ...\n\t\n\t    //edges[1].Curr = pg[1];\n\t    edges[1].Curr.X = pg[1].X;\n\t    edges[1].Curr.Y = pg[1].Y;\n\t\n\t    var $1 = {Value: this.m_UseFullRange};\n\t    this.RangeTest(pg[0], $1);\n\t    this.m_UseFullRange = $1.Value;\n\t\n\t    $1.Value = this.m_UseFullRange;\n\t    this.RangeTest(pg[highI], $1);\n\t    this.m_UseFullRange = $1.Value;\n\t\n\t    this.InitEdge(edges[0], edges[1], edges[highI], pg[0]);\n\t    this.InitEdge(edges[highI], edges[0], edges[highI - 1], pg[highI]);\n\t    for (var i = highI - 1; i >= 1; --i)\n\t    {\n\t      $1.Value = this.m_UseFullRange;\n\t      this.RangeTest(pg[i], $1);\n\t      this.m_UseFullRange = $1.Value;\n\t\n\t      this.InitEdge(edges[i], edges[i + 1], edges[i - 1], pg[i]);\n\t    }\n\t\n\t    var eStart = edges[0];\n\t    //2. Remove duplicate vertices, and (when closed) collinear edges ...\n\t    var E = eStart,\n\t      eLoopStop = eStart;\n\t    for (;;)\n\t    {\n\t    //console.log(E.Next, eStart);\n\t    \t//nb: allows matching start and end points when not Closed ...\n\t      if (E.Curr == E.Next.Curr && (Closed || E.Next != eStart))\n\t      {\n\t        if (E == E.Next)\n\t          break;\n\t        if (E == eStart)\n\t          eStart = E.Next;\n\t        E = this.RemoveEdge(E);\n\t        eLoopStop = E;\n\t        continue;\n\t      }\n\t      if (E.Prev == E.Next)\n\t        break;\n\t      else if (Closed && ClipperLib.ClipperBase.SlopesEqual(E.Prev.Curr, E.Curr, E.Next.Curr, this.m_UseFullRange) && (!this.PreserveCollinear || !this.Pt2IsBetweenPt1AndPt3(E.Prev.Curr, E.Curr, E.Next.Curr)))\n\t      {\n\t        //Collinear edges are allowed for open paths but in closed paths\n\t        //the default is to merge adjacent collinear edges into a single edge.\n\t        //However, if the PreserveCollinear property is enabled, only overlapping\n\t        //collinear edges (ie spikes) will be removed from closed paths.\n\t        if (E == eStart)\n\t          eStart = E.Next;\n\t        E = this.RemoveEdge(E);\n\t        E = E.Prev;\n\t        eLoopStop = E;\n\t        continue;\n\t      }\n\t      E = E.Next;\n\t      if ((E == eLoopStop) || (!Closed && E.Next == eStart)) break;\n\t    }\n\t    if ((!Closed && (E == E.Next)) || (Closed && (E.Prev == E.Next)))\n\t      return false;\n\t    if (!Closed)\n\t    {\n\t      this.m_HasOpenPaths = true;\n\t      eStart.Prev.OutIdx = ClipperLib.ClipperBase.Skip;\n\t    }\n\t    //3. Do second stage of edge initialization ...\n\t    E = eStart;\n\t    do {\n\t      this.InitEdge2(E, polyType);\n\t      E = E.Next;\n\t      if (IsFlat && E.Curr.Y != eStart.Curr.Y)\n\t        IsFlat = false;\n\t    }\n\t    while (E != eStart)\n\t    //4. Finally, add edge bounds to LocalMinima list ...\n\t    //Totally flat paths must be handled differently when adding them\n\t    //to LocalMinima list to avoid endless loops etc ...\n\t    if (IsFlat)\n\t    {\n\t      if (Closed)\n\t        return false;\n\t      E.Prev.OutIdx = ClipperLib.ClipperBase.Skip;\n\t      if (E.Prev.Bot.X < E.Prev.Top.X)\n\t        this.ReverseHorizontal(E.Prev);\n\t      var locMin = new ClipperLib.LocalMinima();\n\t      locMin.Next = null;\n\t      locMin.Y = E.Bot.Y;\n\t      locMin.LeftBound = null;\n\t      locMin.RightBound = E;\n\t      locMin.RightBound.Side = ClipperLib.EdgeSide.esRight;\n\t      locMin.RightBound.WindDelta = 0;\n\t      while (E.Next.OutIdx != ClipperLib.ClipperBase.Skip)\n\t      {\n\t        E.NextInLML = E.Next;\n\t        if (E.Bot.X != E.Prev.Top.X)\n\t          this.ReverseHorizontal(E);\n\t        E = E.Next;\n\t      }\n\t      this.InsertLocalMinima(locMin);\n\t      this.m_edges.push(edges);\n\t      return true;\n\t    }\n\t    this.m_edges.push(edges);\n\t    var leftBoundIsForward;\n\t    var EMin = null;\n\t\n\t\t\t//workaround to avoid an endless loop in the while loop below when\n\t    //open paths have matching start and end points ...\n\t    if(ClipperLib.IntPoint.op_Equality(E.Prev.Bot, E.Prev.Top))\n\t    \tE = E.Next;\n\t\n\t    for (;;)\n\t    {\n\t      E = this.FindNextLocMin(E);\n\t      if (E == EMin)\n\t        break;\n\t      else if (EMin == null)\n\t        EMin = E;\n\t      //E and E.Prev now share a local minima (left aligned if horizontal).\n\t      //Compare their slopes to find which starts which bound ...\n\t      var locMin = new ClipperLib.LocalMinima();\n\t      locMin.Next = null;\n\t      locMin.Y = E.Bot.Y;\n\t      if (E.Dx < E.Prev.Dx)\n\t      {\n\t        locMin.LeftBound = E.Prev;\n\t        locMin.RightBound = E;\n\t        leftBoundIsForward = false;\n\t        //Q.nextInLML = Q.prev\n\t      }\n\t      else\n\t      {\n\t        locMin.LeftBound = E;\n\t        locMin.RightBound = E.Prev;\n\t        leftBoundIsForward = true;\n\t        //Q.nextInLML = Q.next\n\t      }\n\t      locMin.LeftBound.Side = ClipperLib.EdgeSide.esLeft;\n\t      locMin.RightBound.Side = ClipperLib.EdgeSide.esRight;\n\t      if (!Closed)\n\t        locMin.LeftBound.WindDelta = 0;\n\t      else if (locMin.LeftBound.Next == locMin.RightBound)\n\t        locMin.LeftBound.WindDelta = -1;\n\t      else\n\t        locMin.LeftBound.WindDelta = 1;\n\t      locMin.RightBound.WindDelta = -locMin.LeftBound.WindDelta;\n\t      E = this.ProcessBound(locMin.LeftBound, leftBoundIsForward);\n\t      if (E.OutIdx == ClipperLib.ClipperBase.Skip)\n\t      \tE = this.ProcessBound(E, leftBoundIsForward);\n\t      var E2 = this.ProcessBound(locMin.RightBound, !leftBoundIsForward);\n\t      if (E2.OutIdx == ClipperLib.ClipperBase.Skip) E2 = this.ProcessBound(E2, !leftBoundIsForward);\n\t      if (locMin.LeftBound.OutIdx == ClipperLib.ClipperBase.Skip)\n\t        locMin.LeftBound = null;\n\t      else if (locMin.RightBound.OutIdx == ClipperLib.ClipperBase.Skip)\n\t        locMin.RightBound = null;\n\t      this.InsertLocalMinima(locMin);\n\t      if (!leftBoundIsForward)\n\t        E = E2;\n\t    }\n\t    return true;\n\t  };\n\t  ClipperLib.ClipperBase.prototype.AddPaths = function (ppg, polyType, closed)\n\t  {\n\t    //  console.log(\"-------------------------------------------\");\n\t    //  console.log(JSON.stringify(ppg));\n\t    var result = false;\n\t    for (var i = 0, ilen = ppg.length; i < ilen; ++i)\n\t      if (this.AddPath(ppg[i], polyType, closed))\n\t        result = true;\n\t    return result;\n\t  };\n\t  //------------------------------------------------------------------------------\n\t  ClipperLib.ClipperBase.prototype.Pt2IsBetweenPt1AndPt3 = function (pt1, pt2, pt3)\n\t  {\n\t    if ((ClipperLib.IntPoint.op_Equality(pt1, pt3)) || (ClipperLib.IntPoint.op_Equality(pt1, pt2)) ||       (ClipperLib.IntPoint.op_Equality(pt3, pt2)))\n\t\n\t   //if ((pt1 == pt3) || (pt1 == pt2) || (pt3 == pt2))\n\t   return false;\n\t\n\t    else if (pt1.X != pt3.X)\n\t      return (pt2.X > pt1.X) == (pt2.X < pt3.X);\n\t    else\n\t      return (pt2.Y > pt1.Y) == (pt2.Y < pt3.Y);\n\t  };\n\t  ClipperLib.ClipperBase.prototype.RemoveEdge = function (e)\n\t  {\n\t    //removes e from double_linked_list (but without removing from memory)\n\t    e.Prev.Next = e.Next;\n\t    e.Next.Prev = e.Prev;\n\t    var result = e.Next;\n\t    e.Prev = null; //flag as removed (see ClipperBase.Clear)\n\t    return result;\n\t  };\n\t  ClipperLib.ClipperBase.prototype.SetDx = function (e)\n\t  {\n\t    e.Delta.X = (e.Top.X - e.Bot.X);\n\t    e.Delta.Y = (e.Top.Y - e.Bot.Y);\n\t    if (e.Delta.Y === 0) e.Dx = ClipperLib.ClipperBase.horizontal;\n\t    else e.Dx = (e.Delta.X) / (e.Delta.Y);\n\t  };\n\t  ClipperLib.ClipperBase.prototype.InsertLocalMinima = function (newLm)\n\t  {\n\t    if (this.m_MinimaList === null)\n\t    {\n\t      this.m_MinimaList = newLm;\n\t    }\n\t    else if (newLm.Y >= this.m_MinimaList.Y)\n\t    {\n\t      newLm.Next = this.m_MinimaList;\n\t      this.m_MinimaList = newLm;\n\t    }\n\t    else\n\t    {\n\t      var tmpLm = this.m_MinimaList;\n\t      while (tmpLm.Next !== null && (newLm.Y < tmpLm.Next.Y))\n\t        tmpLm = tmpLm.Next;\n\t      newLm.Next = tmpLm.Next;\n\t      tmpLm.Next = newLm;\n\t    }\n\t  };\n\t  ClipperLib.ClipperBase.prototype.PopLocalMinima = function ()\n\t  {\n\t    if (this.m_CurrentLM === null)\n\t      return;\n\t    this.m_CurrentLM = this.m_CurrentLM.Next;\n\t  };\n\t  ClipperLib.ClipperBase.prototype.ReverseHorizontal = function (e)\n\t  {\n\t    //swap horizontal edges' top and bottom x's so they follow the natural\n\t    //progression of the bounds - ie so their xbots will align with the\n\t    //adjoining lower edge. [Helpful in the ProcessHorizontal() method.]\n\t    var tmp = e.Top.X;\n\t    e.Top.X = e.Bot.X;\n\t    e.Bot.X = tmp;\n\t    if (use_xyz)\n\t    {\n\t      tmp = e.Top.Z;\n\t      e.Top.Z = e.Bot.Z;\n\t      e.Bot.Z = tmp;\n\t    }\n\t  };\n\t  ClipperLib.ClipperBase.prototype.Reset = function ()\n\t  {\n\t    this.m_CurrentLM = this.m_MinimaList;\n\t    if (this.m_CurrentLM == null)\n\t      return;\n\t    //ie nothing to process\n\t    //reset all edges ...\n\t    var lm = this.m_MinimaList;\n\t    while (lm != null)\n\t    {\n\t      var e = lm.LeftBound;\n\t      if (e != null)\n\t      {\n\t        //e.Curr = e.Bot;\n\t        e.Curr.X = e.Bot.X;\n\t        e.Curr.Y = e.Bot.Y;\n\t        e.Side = ClipperLib.EdgeSide.esLeft;\n\t        e.OutIdx = ClipperLib.ClipperBase.Unassigned;\n\t      }\n\t      e = lm.RightBound;\n\t      if (e != null)\n\t      {\n\t        //e.Curr = e.Bot;\n\t        e.Curr.X = e.Bot.X;\n\t        e.Curr.Y = e.Bot.Y;\n\t        e.Side = ClipperLib.EdgeSide.esRight;\n\t        e.OutIdx = ClipperLib.ClipperBase.Unassigned;\n\t      }\n\t      lm = lm.Next;\n\t    }\n\t  };\n\t  ClipperLib.Clipper = function (InitOptions) // public Clipper(int InitOptions = 0)\n\t  {\n\t    if (typeof (InitOptions) == \"undefined\") InitOptions = 0;\n\t    this.m_PolyOuts = null;\n\t    this.m_ClipType = ClipperLib.ClipType.ctIntersection;\n\t    this.m_Scanbeam = null;\n\t    this.m_ActiveEdges = null;\n\t    this.m_SortedEdges = null;\n\t    this.m_IntersectList = null;\n\t    this.m_IntersectNodeComparer = null;\n\t    this.m_ExecuteLocked = false;\n\t    this.m_ClipFillType = ClipperLib.PolyFillType.pftEvenOdd;\n\t    this.m_SubjFillType = ClipperLib.PolyFillType.pftEvenOdd;\n\t    this.m_Joins = null;\n\t    this.m_GhostJoins = null;\n\t    this.m_UsingPolyTree = false;\n\t    this.ReverseSolution = false;\n\t    this.StrictlySimple = false;\n\t    ClipperLib.ClipperBase.call(this);\n\t    this.m_Scanbeam = null;\n\t    this.m_ActiveEdges = null;\n\t    this.m_SortedEdges = null;\n\t    this.m_IntersectList = new Array();\n\t    this.m_IntersectNodeComparer = ClipperLib.MyIntersectNodeSort.Compare;\n\t    this.m_ExecuteLocked = false;\n\t    this.m_UsingPolyTree = false;\n\t    this.m_PolyOuts = new Array();\n\t    this.m_Joins = new Array();\n\t    this.m_GhostJoins = new Array();\n\t    this.ReverseSolution = (1 & InitOptions) !== 0;\n\t    this.StrictlySimple = (2 & InitOptions) !== 0;\n\t    this.PreserveCollinear = (4 & InitOptions) !== 0;\n\t    if (use_xyz)\n\t    {\n\t      this.ZFillFunction = null; // function (IntPoint vert1, IntPoint vert2, ref IntPoint intersectPt);\n\t    }\n\t  };\n\t  ClipperLib.Clipper.ioReverseSolution = 1;\n\t  ClipperLib.Clipper.ioStrictlySimple = 2;\n\t  ClipperLib.Clipper.ioPreserveCollinear = 4;\n\t\n\t  ClipperLib.Clipper.prototype.Clear = function ()\n\t  {\n\t    if (this.m_edges.length === 0)\n\t      return;\n\t    //avoids problems with ClipperBase destructor\n\t    this.DisposeAllPolyPts();\n\t    ClipperLib.ClipperBase.prototype.Clear.call(this);\n\t  };\n\t\n\t  ClipperLib.Clipper.prototype.DisposeScanbeamList = function ()\n\t  {\n\t    while (this.m_Scanbeam !== null)\n\t    {\n\t      var sb2 = this.m_Scanbeam.Next;\n\t      this.m_Scanbeam = null;\n\t      this.m_Scanbeam = sb2;\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.Reset = function ()\n\t  {\n\t    ClipperLib.ClipperBase.prototype.Reset.call(this);\n\t    this.m_Scanbeam = null;\n\t    this.m_ActiveEdges = null;\n\t    this.m_SortedEdges = null;\n\t\n\t    var lm = this.m_MinimaList;\n\t    while (lm !== null)\n\t    {\n\t      this.InsertScanbeam(lm.Y);\n\t      lm = lm.Next;\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.InsertScanbeam = function (Y)\n\t  {\n\t    if (this.m_Scanbeam === null)\n\t    {\n\t      this.m_Scanbeam = new ClipperLib.Scanbeam();\n\t      this.m_Scanbeam.Next = null;\n\t      this.m_Scanbeam.Y = Y;\n\t    }\n\t    else if (Y > this.m_Scanbeam.Y)\n\t    {\n\t      var newSb = new ClipperLib.Scanbeam();\n\t      newSb.Y = Y;\n\t      newSb.Next = this.m_Scanbeam;\n\t      this.m_Scanbeam = newSb;\n\t    }\n\t    else\n\t    {\n\t      var sb2 = this.m_Scanbeam;\n\t      while (sb2.Next !== null && (Y <= sb2.Next.Y))\n\t        sb2 = sb2.Next;\n\t      if (Y == sb2.Y)\n\t        return;\n\t      //ie ignores duplicates\n\t      var newSb = new ClipperLib.Scanbeam();\n\t      newSb.Y = Y;\n\t      newSb.Next = sb2.Next;\n\t      sb2.Next = newSb;\n\t    }\n\t  };\n\t  // ************************************\n\t  ClipperLib.Clipper.prototype.Execute = function ()\n\t  {\n\t    var a = arguments,\n\t      alen = a.length,\n\t      ispolytree = a[1] instanceof ClipperLib.PolyTree;\n\t    if (alen == 4 && !ispolytree) // function (clipType, solution, subjFillType, clipFillType)\n\t    {\n\t      var clipType = a[0],\n\t        solution = a[1],\n\t        subjFillType = a[2],\n\t        clipFillType = a[3];\n\t      if (this.m_ExecuteLocked)\n\t        return false;\n\t      if (this.m_HasOpenPaths)\n\t        ClipperLib.Error(\"Error: PolyTree struct is need for open path clipping.\");\n\t      this.m_ExecuteLocked = true;\n\t      ClipperLib.Clear(solution);\n\t      this.m_SubjFillType = subjFillType;\n\t      this.m_ClipFillType = clipFillType;\n\t      this.m_ClipType = clipType;\n\t      this.m_UsingPolyTree = false;\n\t      try\n\t      {\n\t        var succeeded = this.ExecuteInternal();\n\t        //build the return polygons ...\n\t        if (succeeded) this.BuildResult(solution);\n\t      }\n\t      finally\n\t      {\n\t        this.DisposeAllPolyPts();\n\t        this.m_ExecuteLocked = false;\n\t      }\n\t      return succeeded;\n\t    }\n\t    else if (alen == 4 && ispolytree) // function (clipType, polytree, subjFillType, clipFillType)\n\t    {\n\t      var clipType = a[0],\n\t        polytree = a[1],\n\t        subjFillType = a[2],\n\t        clipFillType = a[3];\n\t      if (this.m_ExecuteLocked)\n\t        return false;\n\t      this.m_ExecuteLocked = true;\n\t      this.m_SubjFillType = subjFillType;\n\t      this.m_ClipFillType = clipFillType;\n\t      this.m_ClipType = clipType;\n\t      this.m_UsingPolyTree = true;\n\t      try\n\t      {\n\t        var succeeded = this.ExecuteInternal();\n\t        //build the return polygons ...\n\t        if (succeeded) this.BuildResult2(polytree);\n\t      }\n\t      finally\n\t      {\n\t        this.DisposeAllPolyPts();\n\t        this.m_ExecuteLocked = false;\n\t      }\n\t      return succeeded;\n\t    }\n\t    else if (alen == 2 && !ispolytree) // function (clipType, solution)\n\t    {\n\t      var clipType = a[0],\n\t        solution = a[1];\n\t      return this.Execute(clipType, solution, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);\n\t    }\n\t    else if (alen == 2 && ispolytree) // function (clipType, polytree)\n\t    {\n\t      var clipType = a[0],\n\t        polytree = a[1];\n\t      return this.Execute(clipType, polytree, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.FixHoleLinkage = function (outRec)\n\t  {\n\t    //skip if an outermost polygon or\n\t    //already already points to the correct FirstLeft ...\n\t    if (outRec.FirstLeft === null || (outRec.IsHole != outRec.FirstLeft.IsHole && outRec.FirstLeft.Pts !== null))\n\t      return;\n\t    var orfl = outRec.FirstLeft;\n\t    while (orfl !== null && ((orfl.IsHole == outRec.IsHole) || orfl.Pts === null))\n\t      orfl = orfl.FirstLeft;\n\t    outRec.FirstLeft = orfl;\n\t  };\n\t  ClipperLib.Clipper.prototype.ExecuteInternal = function ()\n\t  {\n\t    try\n\t    {\n\t      this.Reset();\n\t      if (this.m_CurrentLM === null)\n\t        return false;\n\t      var botY = this.PopScanbeam();\n\t      do {\n\t        this.InsertLocalMinimaIntoAEL(botY);\n\t        ClipperLib.Clear(this.m_GhostJoins);\n\t        this.ProcessHorizontals(false);\n\t        if (this.m_Scanbeam === null)\n\t          break;\n\t        var topY = this.PopScanbeam();\n\t        if (!this.ProcessIntersections(topY)) return false;\n\t\n\t        this.ProcessEdgesAtTopOfScanbeam(topY);\n\t        botY = topY;\n\t      }\n\t      while (this.m_Scanbeam !== null || this.m_CurrentLM !== null)\n\t      //fix orientations ...\n\t      for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t      {\n\t        var outRec = this.m_PolyOuts[i];\n\t        if (outRec.Pts === null || outRec.IsOpen)\n\t          continue;\n\t        if ((outRec.IsHole ^ this.ReverseSolution) == (this.Area(outRec) > 0))\n\t          this.ReversePolyPtLinks(outRec.Pts);\n\t      }\n\t      this.JoinCommonEdges();\n\t      for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t      {\n\t        var outRec = this.m_PolyOuts[i];\n\t        if (outRec.Pts !== null && !outRec.IsOpen)\n\t          this.FixupOutPolygon(outRec);\n\t      }\n\t      if (this.StrictlySimple)\n\t        this.DoSimplePolygons();\n\t      return true;\n\t    }\n\t    finally\n\t    {\n\t      ClipperLib.Clear(this.m_Joins);\n\t      ClipperLib.Clear(this.m_GhostJoins);\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.PopScanbeam = function ()\n\t  {\n\t    var Y = this.m_Scanbeam.Y;\n\t    this.m_Scanbeam = this.m_Scanbeam.Next;\n\t    return Y;\n\t  };\n\t\n\t  ClipperLib.Clipper.prototype.DisposeAllPolyPts = function ()\n\t  {\n\t    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; ++i)\n\t      this.DisposeOutRec(i);\n\t    ClipperLib.Clear(this.m_PolyOuts);\n\t  };\n\t  ClipperLib.Clipper.prototype.DisposeOutRec = function (index)\n\t  {\n\t    var outRec = this.m_PolyOuts[index];\n\t    outRec.Pts = null;\n\t    outRec = null;\n\t    this.m_PolyOuts[index] = null;\n\t  };\n\t\n\t  ClipperLib.Clipper.prototype.AddJoin = function (Op1, Op2, OffPt)\n\t  {\n\t    var j = new ClipperLib.Join();\n\t    j.OutPt1 = Op1;\n\t    j.OutPt2 = Op2;\n\t    //j.OffPt = OffPt;\n\t    j.OffPt.X = OffPt.X;\n\t    j.OffPt.Y = OffPt.Y;\n\t    this.m_Joins.push(j);\n\t  };\n\t  ClipperLib.Clipper.prototype.AddGhostJoin = function (Op, OffPt)\n\t  {\n\t    var j = new ClipperLib.Join();\n\t    j.OutPt1 = Op;\n\t    //j.OffPt = OffPt;\n\t    j.OffPt.X = OffPt.X;\n\t    j.OffPt.Y = OffPt.Y;\n\t    this.m_GhostJoins.push(j);\n\t  };\n\t  if (use_xyz)\n\t  {\n\t    ClipperLib.Clipper.prototype.SetZ = function (pt, e1, e2)\n\t    {\n\t      if (this.ZFillFunction !== null)\n\t      {\n\t        if (pt.Z != 0 || this.ZFillFunction === null) return;\n\t        else if (ClipperLib.IntPoint.op_Equality(pt, e1.Bot)) pt.Z = e1.Bot.Z;\n\t        else if (ClipperLib.IntPoint.op_Equality(pt, e1.Top)) pt.Z = e1.Top.Z;\n\t        else if (ClipperLib.IntPoint.op_Equality(pt, e2.Bot)) pt.Z = e2.Bot.Z;\n\t        else if (ClipperLib.IntPoint.op_Equality(pt, e2.Top)) pt.Z = e2.Top.Z;\n\t        else ZFillFunction(e1.Bot, e1.Top, e2.Bot, e2.Top, pt);\n\t      }\n\t    };\n\t\n\t    //------------------------------------------------------------------------------\n\t  }\n\t\n\t  ClipperLib.Clipper.prototype.InsertLocalMinimaIntoAEL = function (botY)\n\t  {\n\t    while (this.m_CurrentLM !== null && (this.m_CurrentLM.Y == botY))\n\t    {\n\t      var lb = this.m_CurrentLM.LeftBound;\n\t      var rb = this.m_CurrentLM.RightBound;\n\t      this.PopLocalMinima();\n\t      var Op1 = null;\n\t      if (lb === null)\n\t      {\n\t        this.InsertEdgeIntoAEL(rb, null);\n\t        this.SetWindingCount(rb);\n\t        if (this.IsContributing(rb))\n\t          Op1 = this.AddOutPt(rb, rb.Bot);\n\t      }\n\t      else if (rb == null)\n\t      {\n\t        this.InsertEdgeIntoAEL(lb, null);\n\t        this.SetWindingCount(lb);\n\t        if (this.IsContributing(lb))\n\t          Op1 = this.AddOutPt(lb, lb.Bot);\n\t        this.InsertScanbeam(lb.Top.Y);\n\t      }\n\t      else\n\t      {\n\t        this.InsertEdgeIntoAEL(lb, null);\n\t        this.InsertEdgeIntoAEL(rb, lb);\n\t        this.SetWindingCount(lb);\n\t        rb.WindCnt = lb.WindCnt;\n\t        rb.WindCnt2 = lb.WindCnt2;\n\t        if (this.IsContributing(lb))\n\t          Op1 = this.AddLocalMinPoly(lb, rb, lb.Bot);\n\t        this.InsertScanbeam(lb.Top.Y);\n\t      }\n\t      if (rb != null)\n\t      {\n\t        if (ClipperLib.ClipperBase.IsHorizontal(rb))\n\t          this.AddEdgeToSEL(rb);\n\t        else\n\t          this.InsertScanbeam(rb.Top.Y);\n\t      }\n\t      if (lb == null || rb == null) continue;\n\t      //if output polygons share an Edge with a horizontal rb, they'll need joining later ...\n\t      if (Op1 !== null && ClipperLib.ClipperBase.IsHorizontal(rb) && this.m_GhostJoins.length > 0 && rb.WindDelta !== 0)\n\t      {\n\t        for (var i = 0, ilen = this.m_GhostJoins.length; i < ilen; i++)\n\t        {\n\t          //if the horizontal Rb and a 'ghost' horizontal overlap, then convert\n\t          //the 'ghost' join to a real join ready for later ...\n\t          var j = this.m_GhostJoins[i];\n\t\n\t\t\t\t\t\tif (this.HorzSegmentsOverlap(j.OutPt1.Pt.X, j.OffPt.X, rb.Bot.X, rb.Top.X))\n\t            this.AddJoin(j.OutPt1, Op1, j.OffPt);\n\t        }\n\t      }\n\t      if (lb.OutIdx >= 0 && lb.PrevInAEL !== null &&\n\t        lb.PrevInAEL.Curr.X == lb.Bot.X &&\n\t        lb.PrevInAEL.OutIdx >= 0 &&\n\t        ClipperLib.ClipperBase.SlopesEqual(lb.PrevInAEL, lb, this.m_UseFullRange) &&\n\t        lb.WindDelta !== 0 && lb.PrevInAEL.WindDelta !== 0)\n\t      {\n\t        var Op2 = this.AddOutPt(lb.PrevInAEL, lb.Bot);\n\t        this.AddJoin(Op1, Op2, lb.Top);\n\t      }\n\t      if (lb.NextInAEL != rb)\n\t      {\n\t        if (rb.OutIdx >= 0 && rb.PrevInAEL.OutIdx >= 0 &&\n\t          ClipperLib.ClipperBase.SlopesEqual(rb.PrevInAEL, rb, this.m_UseFullRange) &&\n\t          rb.WindDelta !== 0 && rb.PrevInAEL.WindDelta !== 0)\n\t        {\n\t          var Op2 = this.AddOutPt(rb.PrevInAEL, rb.Bot);\n\t          this.AddJoin(Op1, Op2, rb.Top);\n\t        }\n\t        var e = lb.NextInAEL;\n\t        if (e !== null)\n\t          while (e != rb)\n\t          {\n\t            //nb: For calculating winding counts etc, IntersectEdges() assumes\n\t            //that param1 will be to the right of param2 ABOVE the intersection ...\n\t            this.IntersectEdges(rb, e, lb.Curr, false);\n\t            //order important here\n\t            e = e.NextInAEL;\n\t          }\n\t      }\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.InsertEdgeIntoAEL = function (edge, startEdge)\n\t  {\n\t    if (this.m_ActiveEdges === null)\n\t    {\n\t      edge.PrevInAEL = null;\n\t      edge.NextInAEL = null;\n\t      this.m_ActiveEdges = edge;\n\t    }\n\t    else if (startEdge === null && this.E2InsertsBeforeE1(this.m_ActiveEdges, edge))\n\t    {\n\t      edge.PrevInAEL = null;\n\t      edge.NextInAEL = this.m_ActiveEdges;\n\t      this.m_ActiveEdges.PrevInAEL = edge;\n\t      this.m_ActiveEdges = edge;\n\t    }\n\t    else\n\t    {\n\t      if (startEdge === null)\n\t        startEdge = this.m_ActiveEdges;\n\t      while (startEdge.NextInAEL !== null && !this.E2InsertsBeforeE1(startEdge.NextInAEL, edge))\n\t        startEdge = startEdge.NextInAEL;\n\t      edge.NextInAEL = startEdge.NextInAEL;\n\t      if (startEdge.NextInAEL !== null)\n\t        startEdge.NextInAEL.PrevInAEL = edge;\n\t      edge.PrevInAEL = startEdge;\n\t      startEdge.NextInAEL = edge;\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.E2InsertsBeforeE1 = function (e1, e2)\n\t  {\n\t    if (e2.Curr.X == e1.Curr.X)\n\t    {\n\t      if (e2.Top.Y > e1.Top.Y)\n\t        return e2.Top.X < ClipperLib.Clipper.TopX(e1, e2.Top.Y);\n\t      else\n\t        return e1.Top.X > ClipperLib.Clipper.TopX(e2, e1.Top.Y);\n\t    }\n\t    else\n\t      return e2.Curr.X < e1.Curr.X;\n\t  };\n\t  ClipperLib.Clipper.prototype.IsEvenOddFillType = function (edge)\n\t  {\n\t    if (edge.PolyTyp == ClipperLib.PolyType.ptSubject)\n\t      return this.m_SubjFillType == ClipperLib.PolyFillType.pftEvenOdd;\n\t    else\n\t      return this.m_ClipFillType == ClipperLib.PolyFillType.pftEvenOdd;\n\t  };\n\t  ClipperLib.Clipper.prototype.IsEvenOddAltFillType = function (edge)\n\t  {\n\t    if (edge.PolyTyp == ClipperLib.PolyType.ptSubject)\n\t      return this.m_ClipFillType == ClipperLib.PolyFillType.pftEvenOdd;\n\t    else\n\t      return this.m_SubjFillType == ClipperLib.PolyFillType.pftEvenOdd;\n\t  };\n\t  ClipperLib.Clipper.prototype.IsContributing = function (edge)\n\t  {\n\t    var pft, pft2;\n\t    if (edge.PolyTyp == ClipperLib.PolyType.ptSubject)\n\t    {\n\t      pft = this.m_SubjFillType;\n\t      pft2 = this.m_ClipFillType;\n\t    }\n\t    else\n\t    {\n\t      pft = this.m_ClipFillType;\n\t      pft2 = this.m_SubjFillType;\n\t    }\n\t    switch (pft)\n\t    {\n\t    case ClipperLib.PolyFillType.pftEvenOdd:\n\t      if (edge.WindDelta === 0 && edge.WindCnt != 1)\n\t        return false;\n\t      break;\n\t    case ClipperLib.PolyFillType.pftNonZero:\n\t      if (Math.abs(edge.WindCnt) != 1)\n\t        return false;\n\t      break;\n\t    case ClipperLib.PolyFillType.pftPositive:\n\t      if (edge.WindCnt != 1)\n\t        return false;\n\t      break;\n\t    default:\n\t      if (edge.WindCnt != -1)\n\t        return false;\n\t      break;\n\t    }\n\t    switch (this.m_ClipType)\n\t    {\n\t    case ClipperLib.ClipType.ctIntersection:\n\t      switch (pft2)\n\t      {\n\t      case ClipperLib.PolyFillType.pftEvenOdd:\n\t      case ClipperLib.PolyFillType.pftNonZero:\n\t        return (edge.WindCnt2 !== 0);\n\t      case ClipperLib.PolyFillType.pftPositive:\n\t        return (edge.WindCnt2 > 0);\n\t      default:\n\t        return (edge.WindCnt2 < 0);\n\t      }\n\t    case ClipperLib.ClipType.ctUnion:\n\t      switch (pft2)\n\t      {\n\t      case ClipperLib.PolyFillType.pftEvenOdd:\n\t      case ClipperLib.PolyFillType.pftNonZero:\n\t        return (edge.WindCnt2 === 0);\n\t      case ClipperLib.PolyFillType.pftPositive:\n\t        return (edge.WindCnt2 <= 0);\n\t      default:\n\t        return (edge.WindCnt2 >= 0);\n\t      }\n\t    case ClipperLib.ClipType.ctDifference:\n\t      if (edge.PolyTyp == ClipperLib.PolyType.ptSubject)\n\t        switch (pft2)\n\t        {\n\t        case ClipperLib.PolyFillType.pftEvenOdd:\n\t        case ClipperLib.PolyFillType.pftNonZero:\n\t          return (edge.WindCnt2 === 0);\n\t        case ClipperLib.PolyFillType.pftPositive:\n\t          return (edge.WindCnt2 <= 0);\n\t        default:\n\t          return (edge.WindCnt2 >= 0);\n\t        }\n\t      else\n\t        switch (pft2)\n\t        {\n\t        case ClipperLib.PolyFillType.pftEvenOdd:\n\t        case ClipperLib.PolyFillType.pftNonZero:\n\t          return (edge.WindCnt2 !== 0);\n\t        case ClipperLib.PolyFillType.pftPositive:\n\t          return (edge.WindCnt2 > 0);\n\t        default:\n\t          return (edge.WindCnt2 < 0);\n\t        }\n\t    case ClipperLib.ClipType.ctXor:\n\t      if (edge.WindDelta === 0)\n\t        switch (pft2)\n\t        {\n\t        case ClipperLib.PolyFillType.pftEvenOdd:\n\t        case ClipperLib.PolyFillType.pftNonZero:\n\t          return (edge.WindCnt2 === 0);\n\t        case ClipperLib.PolyFillType.pftPositive:\n\t          return (edge.WindCnt2 <= 0);\n\t        default:\n\t          return (edge.WindCnt2 >= 0);\n\t        }\n\t      else\n\t        return true;\n\t    }\n\t    return true;\n\t  };\n\t  ClipperLib.Clipper.prototype.SetWindingCount = function (edge)\n\t  {\n\t    var e = edge.PrevInAEL;\n\t    //find the edge of the same polytype that immediately preceeds 'edge' in AEL\n\t    while (e !== null && ((e.PolyTyp != edge.PolyTyp) || (e.WindDelta === 0)))\n\t      e = e.PrevInAEL;\n\t    if (e === null)\n\t    {\n\t      edge.WindCnt = (edge.WindDelta === 0 ? 1 : edge.WindDelta);\n\t      edge.WindCnt2 = 0;\n\t      e = this.m_ActiveEdges;\n\t      //ie get ready to calc WindCnt2\n\t    }\n\t    else if (edge.WindDelta === 0 && this.m_ClipType != ClipperLib.ClipType.ctUnion)\n\t    {\n\t      edge.WindCnt = 1;\n\t      edge.WindCnt2 = e.WindCnt2;\n\t      e = e.NextInAEL;\n\t      //ie get ready to calc WindCnt2\n\t    }\n\t    else if (this.IsEvenOddFillType(edge))\n\t    {\n\t      //EvenOdd filling ...\n\t      if (edge.WindDelta === 0)\n\t      {\n\t        //are we inside a subj polygon ...\n\t        var Inside = true;\n\t        var e2 = e.PrevInAEL;\n\t        while (e2 !== null)\n\t        {\n\t          if (e2.PolyTyp == e.PolyTyp && e2.WindDelta !== 0)\n\t            Inside = !Inside;\n\t          e2 = e2.PrevInAEL;\n\t        }\n\t        edge.WindCnt = (Inside ? 0 : 1);\n\t      }\n\t      else\n\t      {\n\t        edge.WindCnt = edge.WindDelta;\n\t      }\n\t      edge.WindCnt2 = e.WindCnt2;\n\t      e = e.NextInAEL;\n\t      //ie get ready to calc WindCnt2\n\t    }\n\t    else\n\t    {\n\t      //nonZero, Positive or Negative filling ...\n\t      if (e.WindCnt * e.WindDelta < 0)\n\t      {\n\t        //prev edge is 'decreasing' WindCount (WC) toward zero\n\t        //so we're outside the previous polygon ...\n\t        if (Math.abs(e.WindCnt) > 1)\n\t        {\n\t          //outside prev poly but still inside another.\n\t          //when reversing direction of prev poly use the same WC\n\t          if (e.WindDelta * edge.WindDelta < 0)\n\t            edge.WindCnt = e.WindCnt;\n\t          else\n\t            edge.WindCnt = e.WindCnt + edge.WindDelta;\n\t        }\n\t        else\n\t          edge.WindCnt = (edge.WindDelta === 0 ? 1 : edge.WindDelta);\n\t      }\n\t      else\n\t      {\n\t        //prev edge is 'increasing' WindCount (WC) away from zero\n\t        //so we're inside the previous polygon ...\n\t        if (edge.WindDelta === 0)\n\t          edge.WindCnt = (e.WindCnt < 0 ? e.WindCnt - 1 : e.WindCnt + 1);\n\t        else if (e.WindDelta * edge.WindDelta < 0)\n\t          edge.WindCnt = e.WindCnt;\n\t        else\n\t          edge.WindCnt = e.WindCnt + edge.WindDelta;\n\t      }\n\t      edge.WindCnt2 = e.WindCnt2;\n\t      e = e.NextInAEL;\n\t      //ie get ready to calc WindCnt2\n\t    }\n\t    //update WindCnt2 ...\n\t    if (this.IsEvenOddAltFillType(edge))\n\t    {\n\t      //EvenOdd filling ...\n\t      while (e != edge)\n\t      {\n\t        if (e.WindDelta !== 0)\n\t          edge.WindCnt2 = (edge.WindCnt2 === 0 ? 1 : 0);\n\t        e = e.NextInAEL;\n\t      }\n\t    }\n\t    else\n\t    {\n\t      //nonZero, Positive or Negative filling ...\n\t      while (e != edge)\n\t      {\n\t        edge.WindCnt2 += e.WindDelta;\n\t        e = e.NextInAEL;\n\t      }\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.AddEdgeToSEL = function (edge)\n\t  {\n\t    //SEL pointers in PEdge are reused to build a list of horizontal edges.\n\t    //However, we don't need to worry about order with horizontal edge processing.\n\t    if (this.m_SortedEdges === null)\n\t    {\n\t      this.m_SortedEdges = edge;\n\t      edge.PrevInSEL = null;\n\t      edge.NextInSEL = null;\n\t    }\n\t    else\n\t    {\n\t      edge.NextInSEL = this.m_SortedEdges;\n\t      edge.PrevInSEL = null;\n\t      this.m_SortedEdges.PrevInSEL = edge;\n\t      this.m_SortedEdges = edge;\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.CopyAELToSEL = function ()\n\t  {\n\t    var e = this.m_ActiveEdges;\n\t    this.m_SortedEdges = e;\n\t    while (e !== null)\n\t    {\n\t      e.PrevInSEL = e.PrevInAEL;\n\t      e.NextInSEL = e.NextInAEL;\n\t      e = e.NextInAEL;\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.SwapPositionsInAEL = function (edge1, edge2)\n\t  {\n\t    //check that one or other edge hasn't already been removed from AEL ...\n\t    if (edge1.NextInAEL == edge1.PrevInAEL || edge2.NextInAEL == edge2.PrevInAEL)\n\t      return;\n\t    if (edge1.NextInAEL == edge2)\n\t    {\n\t      var next = edge2.NextInAEL;\n\t      if (next !== null)\n\t        next.PrevInAEL = edge1;\n\t      var prev = edge1.PrevInAEL;\n\t      if (prev !== null)\n\t        prev.NextInAEL = edge2;\n\t      edge2.PrevInAEL = prev;\n\t      edge2.NextInAEL = edge1;\n\t      edge1.PrevInAEL = edge2;\n\t      edge1.NextInAEL = next;\n\t    }\n\t    else if (edge2.NextInAEL == edge1)\n\t    {\n\t      var next = edge1.NextInAEL;\n\t      if (next !== null)\n\t        next.PrevInAEL = edge2;\n\t      var prev = edge2.PrevInAEL;\n\t      if (prev !== null)\n\t        prev.NextInAEL = edge1;\n\t      edge1.PrevInAEL = prev;\n\t      edge1.NextInAEL = edge2;\n\t      edge2.PrevInAEL = edge1;\n\t      edge2.NextInAEL = next;\n\t    }\n\t    else\n\t    {\n\t      var next = edge1.NextInAEL;\n\t      var prev = edge1.PrevInAEL;\n\t      edge1.NextInAEL = edge2.NextInAEL;\n\t      if (edge1.NextInAEL !== null)\n\t        edge1.NextInAEL.PrevInAEL = edge1;\n\t      edge1.PrevInAEL = edge2.PrevInAEL;\n\t      if (edge1.PrevInAEL !== null)\n\t        edge1.PrevInAEL.NextInAEL = edge1;\n\t      edge2.NextInAEL = next;\n\t      if (edge2.NextInAEL !== null)\n\t        edge2.NextInAEL.PrevInAEL = edge2;\n\t      edge2.PrevInAEL = prev;\n\t      if (edge2.PrevInAEL !== null)\n\t        edge2.PrevInAEL.NextInAEL = edge2;\n\t    }\n\t    if (edge1.PrevInAEL === null)\n\t      this.m_ActiveEdges = edge1;\n\t    else if (edge2.PrevInAEL === null)\n\t      this.m_ActiveEdges = edge2;\n\t  };\n\t  ClipperLib.Clipper.prototype.SwapPositionsInSEL = function (edge1, edge2)\n\t  {\n\t    if (edge1.NextInSEL === null && edge1.PrevInSEL === null)\n\t      return;\n\t    if (edge2.NextInSEL === null && edge2.PrevInSEL === null)\n\t      return;\n\t    if (edge1.NextInSEL == edge2)\n\t    {\n\t      var next = edge2.NextInSEL;\n\t      if (next !== null)\n\t        next.PrevInSEL = edge1;\n\t      var prev = edge1.PrevInSEL;\n\t      if (prev !== null)\n\t        prev.NextInSEL = edge2;\n\t      edge2.PrevInSEL = prev;\n\t      edge2.NextInSEL = edge1;\n\t      edge1.PrevInSEL = edge2;\n\t      edge1.NextInSEL = next;\n\t    }\n\t    else if (edge2.NextInSEL == edge1)\n\t    {\n\t      var next = edge1.NextInSEL;\n\t      if (next !== null)\n\t        next.PrevInSEL = edge2;\n\t      var prev = edge2.PrevInSEL;\n\t      if (prev !== null)\n\t        prev.NextInSEL = edge1;\n\t      edge1.PrevInSEL = prev;\n\t      edge1.NextInSEL = edge2;\n\t      edge2.PrevInSEL = edge1;\n\t      edge2.NextInSEL = next;\n\t    }\n\t    else\n\t    {\n\t      var next = edge1.NextInSEL;\n\t      var prev = edge1.PrevInSEL;\n\t      edge1.NextInSEL = edge2.NextInSEL;\n\t      if (edge1.NextInSEL !== null)\n\t        edge1.NextInSEL.PrevInSEL = edge1;\n\t      edge1.PrevInSEL = edge2.PrevInSEL;\n\t      if (edge1.PrevInSEL !== null)\n\t        edge1.PrevInSEL.NextInSEL = edge1;\n\t      edge2.NextInSEL = next;\n\t      if (edge2.NextInSEL !== null)\n\t        edge2.NextInSEL.PrevInSEL = edge2;\n\t      edge2.PrevInSEL = prev;\n\t      if (edge2.PrevInSEL !== null)\n\t        edge2.PrevInSEL.NextInSEL = edge2;\n\t    }\n\t    if (edge1.PrevInSEL === null)\n\t      this.m_SortedEdges = edge1;\n\t    else if (edge2.PrevInSEL === null)\n\t      this.m_SortedEdges = edge2;\n\t  };\n\t  ClipperLib.Clipper.prototype.AddLocalMaxPoly = function (e1, e2, pt)\n\t  {\n\t    this.AddOutPt(e1, pt);\n\t    if (e2.WindDelta == 0) this.AddOutPt(e2, pt);\n\t    if (e1.OutIdx == e2.OutIdx)\n\t    {\n\t      e1.OutIdx = -1;\n\t      e2.OutIdx = -1;\n\t    }\n\t    else if (e1.OutIdx < e2.OutIdx)\n\t      this.AppendPolygon(e1, e2);\n\t    else\n\t      this.AppendPolygon(e2, e1);\n\t  };\n\t  ClipperLib.Clipper.prototype.AddLocalMinPoly = function (e1, e2, pt)\n\t  {\n\t    var result;\n\t    var e, prevE;\n\t    if (ClipperLib.ClipperBase.IsHorizontal(e2) || (e1.Dx > e2.Dx))\n\t    {\n\t      result = this.AddOutPt(e1, pt);\n\t      e2.OutIdx = e1.OutIdx;\n\t      e1.Side = ClipperLib.EdgeSide.esLeft;\n\t      e2.Side = ClipperLib.EdgeSide.esRight;\n\t      e = e1;\n\t      if (e.PrevInAEL == e2)\n\t        prevE = e2.PrevInAEL;\n\t      else\n\t        prevE = e.PrevInAEL;\n\t    }\n\t    else\n\t    {\n\t      result = this.AddOutPt(e2, pt);\n\t      e1.OutIdx = e2.OutIdx;\n\t      e1.Side = ClipperLib.EdgeSide.esRight;\n\t      e2.Side = ClipperLib.EdgeSide.esLeft;\n\t      e = e2;\n\t      if (e.PrevInAEL == e1)\n\t        prevE = e1.PrevInAEL;\n\t      else\n\t        prevE = e.PrevInAEL;\n\t    }\n\t    if (prevE !== null && prevE.OutIdx >= 0 && (ClipperLib.Clipper.TopX(prevE, pt.Y) == ClipperLib.Clipper.TopX(e, pt.Y)) && ClipperLib.ClipperBase.SlopesEqual(e, prevE, this.m_UseFullRange) && (e.WindDelta !== 0) && (prevE.WindDelta !== 0))\n\t    {\n\t      var outPt = this.AddOutPt(prevE, pt);\n\t      this.AddJoin(result, outPt, e.Top);\n\t    }\n\t    return result;\n\t  };\n\t  ClipperLib.Clipper.prototype.CreateOutRec = function ()\n\t  {\n\t    var result = new ClipperLib.OutRec();\n\t    result.Idx = -1;\n\t    result.IsHole = false;\n\t    result.IsOpen = false;\n\t    result.FirstLeft = null;\n\t    result.Pts = null;\n\t    result.BottomPt = null;\n\t    result.PolyNode = null;\n\t    this.m_PolyOuts.push(result);\n\t    result.Idx = this.m_PolyOuts.length - 1;\n\t    return result;\n\t  };\n\t  ClipperLib.Clipper.prototype.AddOutPt = function (e, pt)\n\t  {\n\t    var ToFront = (e.Side == ClipperLib.EdgeSide.esLeft);\n\t    if (e.OutIdx < 0)\n\t    {\n\t      var outRec = this.CreateOutRec();\n\t      outRec.IsOpen = (e.WindDelta === 0);\n\t      var newOp = new ClipperLib.OutPt();\n\t      outRec.Pts = newOp;\n\t      newOp.Idx = outRec.Idx;\n\t      //newOp.Pt = pt;\n\t      newOp.Pt.X = pt.X;\n\t      newOp.Pt.Y = pt.Y;\n\t      newOp.Next = newOp;\n\t      newOp.Prev = newOp;\n\t      if (!outRec.IsOpen)\n\t        this.SetHoleState(e, outRec);\n\t      e.OutIdx = outRec.Idx;\n\t      //nb: do this after SetZ !\n\t      return newOp;\n\t    }\n\t    else\n\t    {\n\t      var outRec = this.m_PolyOuts[e.OutIdx];\n\t      //OutRec.Pts is the 'Left-most' point & OutRec.Pts.Prev is the 'Right-most'\n\t      var op = outRec.Pts;\n\t      if (ToFront && ClipperLib.IntPoint.op_Equality(pt, op.Pt))\n\t        return op;\n\t      else if (!ToFront && ClipperLib.IntPoint.op_Equality(pt, op.Prev.Pt))\n\t        return op.Prev;\n\t      var newOp = new ClipperLib.OutPt();\n\t      newOp.Idx = outRec.Idx;\n\t      //newOp.Pt = pt;\n\t      newOp.Pt.X = pt.X;\n\t      newOp.Pt.Y = pt.Y;\n\t      newOp.Next = op;\n\t      newOp.Prev = op.Prev;\n\t      newOp.Prev.Next = newOp;\n\t      op.Prev = newOp;\n\t      if (ToFront)\n\t        outRec.Pts = newOp;\n\t      return newOp;\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.SwapPoints = function (pt1, pt2)\n\t  {\n\t    var tmp = new ClipperLib.IntPoint(pt1.Value);\n\t    //pt1.Value = pt2.Value;\n\t    pt1.Value.X = pt2.Value.X;\n\t    pt1.Value.Y = pt2.Value.Y;\n\t    //pt2.Value = tmp;\n\t    pt2.Value.X = tmp.X;\n\t    pt2.Value.Y = tmp.Y;\n\t  };\n\t  ClipperLib.Clipper.prototype.HorzSegmentsOverlap = function (seg1a, seg1b, seg2a, seg2b)\n\t\t{\n\t\t\tvar tmp;\n\t\t\tif (seg1a > seg1b)\n\t\t\t{\n\t\t\t\ttmp = seg1a;\n\t\t\t\tseg1a = seg1b;\n\t\t\t\tseg1b = tmp;\n\t\t\t}\n\t\t\tif (seg2a > seg2b)\n\t\t\t{\n\t\t\t\ttmp = seg2a;\n\t\t\t\tseg2a = seg2b;\n\t\t\t\tseg2b = tmp;\n\t\t\t}\n\t\t\treturn (seg1a < seg2b) && (seg2a < seg1b);\n\t\t}\n\t\n\t  ClipperLib.Clipper.prototype.SetHoleState = function (e, outRec)\n\t  {\n\t    var isHole = false;\n\t    var e2 = e.PrevInAEL;\n\t    while (e2 !== null)\n\t    {\n\t      if (e2.OutIdx >= 0 && e2.WindDelta != 0)\n\t      {\n\t        isHole = !isHole;\n\t        if (outRec.FirstLeft === null)\n\t          outRec.FirstLeft = this.m_PolyOuts[e2.OutIdx];\n\t      }\n\t      e2 = e2.PrevInAEL;\n\t    }\n\t    if (isHole)\n\t      outRec.IsHole = true;\n\t  };\n\t  ClipperLib.Clipper.prototype.GetDx = function (pt1, pt2)\n\t  {\n\t    if (pt1.Y == pt2.Y)\n\t      return ClipperLib.ClipperBase.horizontal;\n\t    else\n\t      return (pt2.X - pt1.X) / (pt2.Y - pt1.Y);\n\t  };\n\t  ClipperLib.Clipper.prototype.FirstIsBottomPt = function (btmPt1, btmPt2)\n\t  {\n\t    var p = btmPt1.Prev;\n\t    while ((ClipperLib.IntPoint.op_Equality(p.Pt, btmPt1.Pt)) && (p != btmPt1))\n\t      p = p.Prev;\n\t    var dx1p = Math.abs(this.GetDx(btmPt1.Pt, p.Pt));\n\t    p = btmPt1.Next;\n\t    while ((ClipperLib.IntPoint.op_Equality(p.Pt, btmPt1.Pt)) && (p != btmPt1))\n\t      p = p.Next;\n\t    var dx1n = Math.abs(this.GetDx(btmPt1.Pt, p.Pt));\n\t    p = btmPt2.Prev;\n\t    while ((ClipperLib.IntPoint.op_Equality(p.Pt, btmPt2.Pt)) && (p != btmPt2))\n\t      p = p.Prev;\n\t    var dx2p = Math.abs(this.GetDx(btmPt2.Pt, p.Pt));\n\t    p = btmPt2.Next;\n\t    while ((ClipperLib.IntPoint.op_Equality(p.Pt, btmPt2.Pt)) && (p != btmPt2))\n\t      p = p.Next;\n\t    var dx2n = Math.abs(this.GetDx(btmPt2.Pt, p.Pt));\n\t    return (dx1p >= dx2p && dx1p >= dx2n) || (dx1n >= dx2p && dx1n >= dx2n);\n\t  };\n\t  ClipperLib.Clipper.prototype.GetBottomPt = function (pp)\n\t  {\n\t    var dups = null;\n\t    var p = pp.Next;\n\t    while (p != pp)\n\t    {\n\t      if (p.Pt.Y > pp.Pt.Y)\n\t      {\n\t        pp = p;\n\t        dups = null;\n\t      }\n\t      else if (p.Pt.Y == pp.Pt.Y && p.Pt.X <= pp.Pt.X)\n\t      {\n\t        if (p.Pt.X < pp.Pt.X)\n\t        {\n\t          dups = null;\n\t          pp = p;\n\t        }\n\t        else\n\t        {\n\t          if (p.Next != pp && p.Prev != pp)\n\t            dups = p;\n\t        }\n\t      }\n\t      p = p.Next;\n\t    }\n\t    if (dups !== null)\n\t    {\n\t      //there appears to be at least 2 vertices at bottomPt so ...\n\t      while (dups != p)\n\t      {\n\t        if (!this.FirstIsBottomPt(p, dups))\n\t          pp = dups;\n\t        dups = dups.Next;\n\t        while (ClipperLib.IntPoint.op_Inequality(dups.Pt, pp.Pt))\n\t          dups = dups.Next;\n\t      }\n\t    }\n\t    return pp;\n\t  };\n\t  ClipperLib.Clipper.prototype.GetLowermostRec = function (outRec1, outRec2)\n\t  {\n\t    //work out which polygon fragment has the correct hole state ...\n\t    if (outRec1.BottomPt === null)\n\t      outRec1.BottomPt = this.GetBottomPt(outRec1.Pts);\n\t    if (outRec2.BottomPt === null)\n\t      outRec2.BottomPt = this.GetBottomPt(outRec2.Pts);\n\t    var bPt1 = outRec1.BottomPt;\n\t    var bPt2 = outRec2.BottomPt;\n\t    if (bPt1.Pt.Y > bPt2.Pt.Y)\n\t      return outRec1;\n\t    else if (bPt1.Pt.Y < bPt2.Pt.Y)\n\t      return outRec2;\n\t    else if (bPt1.Pt.X < bPt2.Pt.X)\n\t      return outRec1;\n\t    else if (bPt1.Pt.X > bPt2.Pt.X)\n\t      return outRec2;\n\t    else if (bPt1.Next == bPt1)\n\t      return outRec2;\n\t    else if (bPt2.Next == bPt2)\n\t      return outRec1;\n\t    else if (this.FirstIsBottomPt(bPt1, bPt2))\n\t      return outRec1;\n\t    else\n\t      return outRec2;\n\t  };\n\t  ClipperLib.Clipper.prototype.Param1RightOfParam2 = function (outRec1, outRec2)\n\t  {\n\t    do {\n\t      outRec1 = outRec1.FirstLeft;\n\t      if (outRec1 == outRec2)\n\t        return true;\n\t    }\n\t    while (outRec1 !== null)\n\t    return false;\n\t  };\n\t  ClipperLib.Clipper.prototype.GetOutRec = function (idx)\n\t  {\n\t    var outrec = this.m_PolyOuts[idx];\n\t    while (outrec != this.m_PolyOuts[outrec.Idx])\n\t      outrec = this.m_PolyOuts[outrec.Idx];\n\t    return outrec;\n\t  };\n\t  ClipperLib.Clipper.prototype.AppendPolygon = function (e1, e2)\n\t  {\n\t    //get the start and ends of both output polygons ...\n\t    var outRec1 = this.m_PolyOuts[e1.OutIdx];\n\t    var outRec2 = this.m_PolyOuts[e2.OutIdx];\n\t    var holeStateRec;\n\t    if (this.Param1RightOfParam2(outRec1, outRec2))\n\t      holeStateRec = outRec2;\n\t    else if (this.Param1RightOfParam2(outRec2, outRec1))\n\t      holeStateRec = outRec1;\n\t    else\n\t      holeStateRec = this.GetLowermostRec(outRec1, outRec2);\n\t    var p1_lft = outRec1.Pts;\n\t    var p1_rt = p1_lft.Prev;\n\t    var p2_lft = outRec2.Pts;\n\t    var p2_rt = p2_lft.Prev;\n\t    var side;\n\t    //join e2 poly onto e1 poly and delete pointers to e2 ...\n\t    if (e1.Side == ClipperLib.EdgeSide.esLeft)\n\t    {\n\t      if (e2.Side == ClipperLib.EdgeSide.esLeft)\n\t      {\n\t        //z y x a b c\n\t        this.ReversePolyPtLinks(p2_lft);\n\t        p2_lft.Next = p1_lft;\n\t        p1_lft.Prev = p2_lft;\n\t        p1_rt.Next = p2_rt;\n\t        p2_rt.Prev = p1_rt;\n\t        outRec1.Pts = p2_rt;\n\t      }\n\t      else\n\t      {\n\t        //x y z a b c\n\t        p2_rt.Next = p1_lft;\n\t        p1_lft.Prev = p2_rt;\n\t        p2_lft.Prev = p1_rt;\n\t        p1_rt.Next = p2_lft;\n\t        outRec1.Pts = p2_lft;\n\t      }\n\t      side = ClipperLib.EdgeSide.esLeft;\n\t    }\n\t    else\n\t    {\n\t      if (e2.Side == ClipperLib.EdgeSide.esRight)\n\t      {\n\t        //a b c z y x\n\t        this.ReversePolyPtLinks(p2_lft);\n\t        p1_rt.Next = p2_rt;\n\t        p2_rt.Prev = p1_rt;\n\t        p2_lft.Next = p1_lft;\n\t        p1_lft.Prev = p2_lft;\n\t      }\n\t      else\n\t      {\n\t        //a b c x y z\n\t        p1_rt.Next = p2_lft;\n\t        p2_lft.Prev = p1_rt;\n\t        p1_lft.Prev = p2_rt;\n\t        p2_rt.Next = p1_lft;\n\t      }\n\t      side = ClipperLib.EdgeSide.esRight;\n\t    }\n\t    outRec1.BottomPt = null;\n\t    if (holeStateRec == outRec2)\n\t    {\n\t      if (outRec2.FirstLeft != outRec1)\n\t        outRec1.FirstLeft = outRec2.FirstLeft;\n\t      outRec1.IsHole = outRec2.IsHole;\n\t    }\n\t    outRec2.Pts = null;\n\t    outRec2.BottomPt = null;\n\t    outRec2.FirstLeft = outRec1;\n\t    var OKIdx = e1.OutIdx;\n\t    var ObsoleteIdx = e2.OutIdx;\n\t    e1.OutIdx = -1;\n\t    //nb: safe because we only get here via AddLocalMaxPoly\n\t    e2.OutIdx = -1;\n\t    var e = this.m_ActiveEdges;\n\t    while (e !== null)\n\t    {\n\t      if (e.OutIdx == ObsoleteIdx)\n\t      {\n\t        e.OutIdx = OKIdx;\n\t        e.Side = side;\n\t        break;\n\t      }\n\t      e = e.NextInAEL;\n\t    }\n\t    outRec2.Idx = outRec1.Idx;\n\t  };\n\t  ClipperLib.Clipper.prototype.ReversePolyPtLinks = function (pp)\n\t  {\n\t    if (pp === null)\n\t      return;\n\t    var pp1;\n\t    var pp2;\n\t    pp1 = pp;\n\t    do {\n\t      pp2 = pp1.Next;\n\t      pp1.Next = pp1.Prev;\n\t      pp1.Prev = pp2;\n\t      pp1 = pp2;\n\t    }\n\t    while (pp1 != pp)\n\t  };\n\t  ClipperLib.Clipper.SwapSides = function (edge1, edge2)\n\t  {\n\t    var side = edge1.Side;\n\t    edge1.Side = edge2.Side;\n\t    edge2.Side = side;\n\t  };\n\t  ClipperLib.Clipper.SwapPolyIndexes = function (edge1, edge2)\n\t  {\n\t    var outIdx = edge1.OutIdx;\n\t    edge1.OutIdx = edge2.OutIdx;\n\t    edge2.OutIdx = outIdx;\n\t  };\n\t  ClipperLib.Clipper.prototype.IntersectEdges = function (e1, e2, pt)\n\t  {\n\t    //e1 will be to the left of e2 BELOW the intersection. Therefore e1 is before\n\t    //e2 in AEL except when e1 is being inserted at the intersection point ...\n\t    var e1Contributing = (e1.OutIdx >= 0);\n\t    var e2Contributing = (e2.OutIdx >= 0);\n\t\n\t    if (use_xyz)\n\t    \tthis.SetZ(pt, e1, e2);\n\t\n\t    if (use_lines)\n\t    {\n\t      //if either edge is on an OPEN path ...\n\t      if (e1.WindDelta === 0 || e2.WindDelta === 0)\n\t      {\n\t        //ignore subject-subject open path intersections UNLESS they\n\t        //are both open paths, AND they are both 'contributing maximas' ...\n\t\t\t\t\tif (e1.WindDelta == 0 && e2.WindDelta == 0) return;\n\t        //if intersecting a subj line with a subj poly ...\n\t        else if (e1.PolyTyp == e2.PolyTyp &&\n\t          e1.WindDelta != e2.WindDelta && this.m_ClipType == ClipperLib.ClipType.ctUnion)\n\t        {\n\t          if (e1.WindDelta === 0)\n\t          {\n\t            if (e2Contributing)\n\t            {\n\t              this.AddOutPt(e1, pt);\n\t              if (e1Contributing)\n\t                e1.OutIdx = -1;\n\t            }\n\t          }\n\t          else\n\t          {\n\t            if (e1Contributing)\n\t            {\n\t              this.AddOutPt(e2, pt);\n\t              if (e2Contributing)\n\t                e2.OutIdx = -1;\n\t            }\n\t          }\n\t        }\n\t        else if (e1.PolyTyp != e2.PolyTyp)\n\t        {\n\t          if ((e1.WindDelta === 0) && Math.abs(e2.WindCnt) == 1 &&\n\t            (this.m_ClipType != ClipperLib.ClipType.ctUnion || e2.WindCnt2 === 0))\n\t          {\n\t            this.AddOutPt(e1, pt);\n\t            if (e1Contributing)\n\t              e1.OutIdx = -1;\n\t          }\n\t          else if ((e2.WindDelta === 0) && (Math.abs(e1.WindCnt) == 1) &&\n\t            (this.m_ClipType != ClipperLib.ClipType.ctUnion || e1.WindCnt2 === 0))\n\t          {\n\t            this.AddOutPt(e2, pt);\n\t            if (e2Contributing)\n\t              e2.OutIdx = -1;\n\t          }\n\t        }\n\t        return;\n\t      }\n\t    }\n\t    //update winding counts...\n\t    //assumes that e1 will be to the Right of e2 ABOVE the intersection\n\t    if (e1.PolyTyp == e2.PolyTyp)\n\t    {\n\t      if (this.IsEvenOddFillType(e1))\n\t      {\n\t        var oldE1WindCnt = e1.WindCnt;\n\t        e1.WindCnt = e2.WindCnt;\n\t        e2.WindCnt = oldE1WindCnt;\n\t      }\n\t      else\n\t      {\n\t        if (e1.WindCnt + e2.WindDelta === 0)\n\t          e1.WindCnt = -e1.WindCnt;\n\t        else\n\t          e1.WindCnt += e2.WindDelta;\n\t        if (e2.WindCnt - e1.WindDelta === 0)\n\t          e2.WindCnt = -e2.WindCnt;\n\t        else\n\t          e2.WindCnt -= e1.WindDelta;\n\t      }\n\t    }\n\t    else\n\t    {\n\t      if (!this.IsEvenOddFillType(e2))\n\t        e1.WindCnt2 += e2.WindDelta;\n\t      else\n\t        e1.WindCnt2 = (e1.WindCnt2 === 0) ? 1 : 0;\n\t      if (!this.IsEvenOddFillType(e1))\n\t        e2.WindCnt2 -= e1.WindDelta;\n\t      else\n\t        e2.WindCnt2 = (e2.WindCnt2 === 0) ? 1 : 0;\n\t    }\n\t    var e1FillType, e2FillType, e1FillType2, e2FillType2;\n\t    if (e1.PolyTyp == ClipperLib.PolyType.ptSubject)\n\t    {\n\t      e1FillType = this.m_SubjFillType;\n\t      e1FillType2 = this.m_ClipFillType;\n\t    }\n\t    else\n\t    {\n\t      e1FillType = this.m_ClipFillType;\n\t      e1FillType2 = this.m_SubjFillType;\n\t    }\n\t    if (e2.PolyTyp == ClipperLib.PolyType.ptSubject)\n\t    {\n\t      e2FillType = this.m_SubjFillType;\n\t      e2FillType2 = this.m_ClipFillType;\n\t    }\n\t    else\n\t    {\n\t      e2FillType = this.m_ClipFillType;\n\t      e2FillType2 = this.m_SubjFillType;\n\t    }\n\t    var e1Wc, e2Wc;\n\t    switch (e1FillType)\n\t    {\n\t    case ClipperLib.PolyFillType.pftPositive:\n\t      e1Wc = e1.WindCnt;\n\t      break;\n\t    case ClipperLib.PolyFillType.pftNegative:\n\t      e1Wc = -e1.WindCnt;\n\t      break;\n\t    default:\n\t      e1Wc = Math.abs(e1.WindCnt);\n\t      break;\n\t    }\n\t    switch (e2FillType)\n\t    {\n\t    case ClipperLib.PolyFillType.pftPositive:\n\t      e2Wc = e2.WindCnt;\n\t      break;\n\t    case ClipperLib.PolyFillType.pftNegative:\n\t      e2Wc = -e2.WindCnt;\n\t      break;\n\t    default:\n\t      e2Wc = Math.abs(e2.WindCnt);\n\t      break;\n\t    }\n\t    if (e1Contributing && e2Contributing)\n\t    {\n\t\t\t\tif ((e1Wc != 0 && e1Wc != 1) || (e2Wc != 0 && e2Wc != 1) ||\n\t\t\t\t(e1.PolyTyp != e2.PolyTyp && this.m_ClipType != ClipperLib.ClipType.ctXor))\n\t\t\t\t{\n\t\t\t\t\tthis.AddLocalMaxPoly(e1, e2, pt);\n\t\t\t\t}\n\t      else\n\t      {\n\t        this.AddOutPt(e1, pt);\n\t        this.AddOutPt(e2, pt);\n\t        ClipperLib.Clipper.SwapSides(e1, e2);\n\t        ClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n\t      }\n\t    }\n\t    else if (e1Contributing)\n\t    {\n\t      if (e2Wc === 0 || e2Wc == 1)\n\t      {\n\t        this.AddOutPt(e1, pt);\n\t        ClipperLib.Clipper.SwapSides(e1, e2);\n\t        ClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n\t      }\n\t    }\n\t    else if (e2Contributing)\n\t    {\n\t      if (e1Wc === 0 || e1Wc == 1)\n\t      {\n\t        this.AddOutPt(e2, pt);\n\t        ClipperLib.Clipper.SwapSides(e1, e2);\n\t        ClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n\t      }\n\t    }\n\t\t\telse if ( (e1Wc == 0 || e1Wc == 1) && (e2Wc == 0 || e2Wc == 1))\n\t    {\n\t      //neither edge is currently contributing ...\n\t      var e1Wc2, e2Wc2;\n\t      switch (e1FillType2)\n\t      {\n\t      case ClipperLib.PolyFillType.pftPositive:\n\t        e1Wc2 = e1.WindCnt2;\n\t        break;\n\t      case ClipperLib.PolyFillType.pftNegative:\n\t        e1Wc2 = -e1.WindCnt2;\n\t        break;\n\t      default:\n\t        e1Wc2 = Math.abs(e1.WindCnt2);\n\t        break;\n\t      }\n\t      switch (e2FillType2)\n\t      {\n\t      case ClipperLib.PolyFillType.pftPositive:\n\t        e2Wc2 = e2.WindCnt2;\n\t        break;\n\t      case ClipperLib.PolyFillType.pftNegative:\n\t        e2Wc2 = -e2.WindCnt2;\n\t        break;\n\t      default:\n\t        e2Wc2 = Math.abs(e2.WindCnt2);\n\t        break;\n\t      }\n\t      if (e1.PolyTyp != e2.PolyTyp)\n\t      {\n\t        this.AddLocalMinPoly(e1, e2, pt);\n\t      }\n\t      else if (e1Wc == 1 && e2Wc == 1)\n\t        switch (this.m_ClipType)\n\t        {\n\t        case ClipperLib.ClipType.ctIntersection:\n\t          if (e1Wc2 > 0 && e2Wc2 > 0)\n\t            this.AddLocalMinPoly(e1, e2, pt);\n\t          break;\n\t        case ClipperLib.ClipType.ctUnion:\n\t          if (e1Wc2 <= 0 && e2Wc2 <= 0)\n\t            this.AddLocalMinPoly(e1, e2, pt);\n\t          break;\n\t        case ClipperLib.ClipType.ctDifference:\n\t          if (((e1.PolyTyp == ClipperLib.PolyType.ptClip) && (e1Wc2 > 0) && (e2Wc2 > 0)) ||\n\t            ((e1.PolyTyp == ClipperLib.PolyType.ptSubject) && (e1Wc2 <= 0) && (e2Wc2 <= 0)))\n\t            this.AddLocalMinPoly(e1, e2, pt);\n\t          break;\n\t        case ClipperLib.ClipType.ctXor:\n\t          this.AddLocalMinPoly(e1, e2, pt);\n\t          break;\n\t        }\n\t      else\n\t        ClipperLib.Clipper.SwapSides(e1, e2);\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.DeleteFromAEL = function (e)\n\t  {\n\t    var AelPrev = e.PrevInAEL;\n\t    var AelNext = e.NextInAEL;\n\t    if (AelPrev === null && AelNext === null && (e != this.m_ActiveEdges))\n\t      return;\n\t    //already deleted\n\t    if (AelPrev !== null)\n\t      AelPrev.NextInAEL = AelNext;\n\t    else\n\t      this.m_ActiveEdges = AelNext;\n\t    if (AelNext !== null)\n\t      AelNext.PrevInAEL = AelPrev;\n\t    e.NextInAEL = null;\n\t    e.PrevInAEL = null;\n\t  };\n\t  ClipperLib.Clipper.prototype.DeleteFromSEL = function (e)\n\t  {\n\t    var SelPrev = e.PrevInSEL;\n\t    var SelNext = e.NextInSEL;\n\t    if (SelPrev === null && SelNext === null && (e != this.m_SortedEdges))\n\t      return;\n\t    //already deleted\n\t    if (SelPrev !== null)\n\t      SelPrev.NextInSEL = SelNext;\n\t    else\n\t      this.m_SortedEdges = SelNext;\n\t    if (SelNext !== null)\n\t      SelNext.PrevInSEL = SelPrev;\n\t    e.NextInSEL = null;\n\t    e.PrevInSEL = null;\n\t  };\n\t  ClipperLib.Clipper.prototype.UpdateEdgeIntoAEL = function (e)\n\t  {\n\t    if (e.NextInLML === null)\n\t      ClipperLib.Error(\"UpdateEdgeIntoAEL: invalid call\");\n\t    var AelPrev = e.PrevInAEL;\n\t    var AelNext = e.NextInAEL;\n\t    e.NextInLML.OutIdx = e.OutIdx;\n\t    if (AelPrev !== null)\n\t      AelPrev.NextInAEL = e.NextInLML;\n\t    else\n\t      this.m_ActiveEdges = e.NextInLML;\n\t    if (AelNext !== null)\n\t      AelNext.PrevInAEL = e.NextInLML;\n\t    e.NextInLML.Side = e.Side;\n\t    e.NextInLML.WindDelta = e.WindDelta;\n\t    e.NextInLML.WindCnt = e.WindCnt;\n\t    e.NextInLML.WindCnt2 = e.WindCnt2;\n\t    e = e.NextInLML;\n\t    //    e.Curr = e.Bot;\n\t    e.Curr.X = e.Bot.X;\n\t    e.Curr.Y = e.Bot.Y;\n\t    e.PrevInAEL = AelPrev;\n\t    e.NextInAEL = AelNext;\n\t    if (!ClipperLib.ClipperBase.IsHorizontal(e))\n\t      this.InsertScanbeam(e.Top.Y);\n\t    return e;\n\t  };\n\t  ClipperLib.Clipper.prototype.ProcessHorizontals = function (isTopOfScanbeam)\n\t  {\n\t    var horzEdge = this.m_SortedEdges;\n\t    while (horzEdge !== null)\n\t    {\n\t      this.DeleteFromSEL(horzEdge);\n\t      this.ProcessHorizontal(horzEdge, isTopOfScanbeam);\n\t      horzEdge = this.m_SortedEdges;\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.GetHorzDirection = function (HorzEdge, $var)\n\t  {\n\t    if (HorzEdge.Bot.X < HorzEdge.Top.X)\n\t    {\n\t        $var.Left = HorzEdge.Bot.X;\n\t        $var.Right = HorzEdge.Top.X;\n\t        $var.Dir = ClipperLib.Direction.dLeftToRight;\n\t    }\n\t    else\n\t    {\n\t        $var.Left = HorzEdge.Top.X;\n\t        $var.Right = HorzEdge.Bot.X;\n\t        $var.Dir = ClipperLib.Direction.dRightToLeft;\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.ProcessHorizontal = function (horzEdge, isTopOfScanbeam)\n\t  {\n\t    var $var = {Dir: null, Left: null, Right: null};\n\t    this.GetHorzDirection(horzEdge, $var);\n\t    var dir = $var.Dir;\n\t    var horzLeft = $var.Left;\n\t    var horzRight = $var.Right;\n\t\n\t    var eLastHorz = horzEdge,\n\t      eMaxPair = null;\n\t    while (eLastHorz.NextInLML !== null && ClipperLib.ClipperBase.IsHorizontal(eLastHorz.NextInLML))\n\t      eLastHorz = eLastHorz.NextInLML;\n\t    if (eLastHorz.NextInLML === null)\n\t      eMaxPair = this.GetMaximaPair(eLastHorz);\n\t    for (;;)\n\t    {\n\t      var IsLastHorz = (horzEdge == eLastHorz);\n\t      var e = this.GetNextInAEL(horzEdge, dir);\n\t      while (e !== null)\n\t      {\n\t        //Break if we've got to the end of an intermediate horizontal edge ...\n\t        //nb: Smaller Dx's are to the right of larger Dx's ABOVE the horizontal.\n\t        if (e.Curr.X == horzEdge.Top.X && horzEdge.NextInLML !== null && e.Dx < horzEdge.NextInLML.Dx)\n\t          break;\n\t        var eNext = this.GetNextInAEL(e, dir);\n\t        //saves eNext for later\n\t        if ((dir == ClipperLib.Direction.dLeftToRight && e.Curr.X <= horzRight) || (dir == ClipperLib.Direction.dRightToLeft && e.Curr.X >= horzLeft))\n\t        {\n\t          //so far we're still in range of the horizontal Edge  but make sure\n\t          //we're at the last of consec. horizontals when matching with eMaxPair\n\t          if (e == eMaxPair && IsLastHorz)\n\t          {\n\t\t\t\t\t\t\tif (horzEdge.OutIdx >= 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar op1 = this.AddOutPt(horzEdge, horzEdge.Top);\n\t\t\t\t\t\t\t\tvar eNextHorz = this.m_SortedEdges;\n\t\t\t\t\t\t\t\twhile (eNextHorz !== null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (eNextHorz.OutIdx >= 0 &&\n\t\t\t\t\t\t\t\t\t\tthis.HorzSegmentsOverlap(horzEdge.Bot.X,\n\t\t\t\t\t\t\t\t\t\thorzEdge.Top.X, eNextHorz.Bot.X, eNextHorz.Top.X))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar op2 = this.AddOutPt(eNextHorz, eNextHorz.Bot);\n\t\t\t\t\t\t\t\t\t\tthis.AddJoin(op2, op1, eNextHorz.Top);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\teNextHorz = eNextHorz.NextInSEL;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tthis.AddGhostJoin(op1, horzEdge.Bot);\n\t\t\t\t\t\t\t\tthis.AddLocalMaxPoly(horzEdge, eMaxPair, horzEdge.Top);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.DeleteFromAEL(horzEdge);\n\t\t\t\t\t\t\tthis.DeleteFromAEL(eMaxPair);\n\t            return;\n\t          }\n\t          else if (dir == ClipperLib.Direction.dLeftToRight)\n\t          {\n\t            var Pt = new ClipperLib.IntPoint(e.Curr.X, horzEdge.Curr.Y);\n\t            this.IntersectEdges(horzEdge, e, Pt);\n\t          }\n\t          else\n\t          {\n\t            var Pt = new ClipperLib.IntPoint(e.Curr.X, horzEdge.Curr.Y);\n\t            this.IntersectEdges(e, horzEdge, Pt);\n\t          }\n\t          this.SwapPositionsInAEL(horzEdge, e);\n\t        }\n\t        else if ((dir == ClipperLib.Direction.dLeftToRight && e.Curr.X >= horzRight) || (dir == ClipperLib.Direction.dRightToLeft && e.Curr.X <= horzLeft))\n\t          break;\n\t        e = eNext;\n\t      }\n\t      //end while\n\t      if (horzEdge.NextInLML !== null && ClipperLib.ClipperBase.IsHorizontal(horzEdge.NextInLML))\n\t      {\n\t        horzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n\t        if (horzEdge.OutIdx >= 0)\n\t          this.AddOutPt(horzEdge, horzEdge.Bot);\n\t\n\t          var $var = {Dir: dir, Left: horzLeft, Right: horzRight};\n\t          this.GetHorzDirection(horzEdge, $var);\n\t          dir = $var.Dir;\n\t          horzLeft = $var.Left;\n\t          horzRight = $var.Right;\n\t      }\n\t      else\n\t        break;\n\t    }\n\t    //end for (;;)\n\t    if (horzEdge.NextInLML !== null)\n\t    {\n\t      if (horzEdge.OutIdx >= 0)\n\t      {\n\t        var op1 = this.AddOutPt(horzEdge, horzEdge.Top);\n\t\t\t\t\tif (isTopOfScanbeam) this.AddGhostJoin(op1, horzEdge.Bot);\n\t        horzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n\t        if (horzEdge.WindDelta === 0)\n\t          return;\n\t        //nb: HorzEdge is no longer horizontal here\n\t        var ePrev = horzEdge.PrevInAEL;\n\t        var eNext = horzEdge.NextInAEL;\n\t        if (ePrev !== null && ePrev.Curr.X == horzEdge.Bot.X &&\n\t          ePrev.Curr.Y == horzEdge.Bot.Y && ePrev.WindDelta !== 0 &&\n\t          (ePrev.OutIdx >= 0 && ePrev.Curr.Y > ePrev.Top.Y &&\n\t            ClipperLib.ClipperBase.SlopesEqual(horzEdge, ePrev, this.m_UseFullRange)))\n\t        {\n\t          var op2 = this.AddOutPt(ePrev, horzEdge.Bot);\n\t          this.AddJoin(op1, op2, horzEdge.Top);\n\t        }\n\t        else if (eNext !== null && eNext.Curr.X == horzEdge.Bot.X &&\n\t          eNext.Curr.Y == horzEdge.Bot.Y && eNext.WindDelta !== 0 &&\n\t          eNext.OutIdx >= 0 && eNext.Curr.Y > eNext.Top.Y &&\n\t          ClipperLib.ClipperBase.SlopesEqual(horzEdge, eNext, this.m_UseFullRange))\n\t        {\n\t          var op2 = this.AddOutPt(eNext, horzEdge.Bot);\n\t          this.AddJoin(op1, op2, horzEdge.Top);\n\t        }\n\t      }\n\t      else horzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n\t    }\n\t  \telse\n\t    {\n\t      if (horzEdge.OutIdx >= 0)\n\t        this.AddOutPt(horzEdge, horzEdge.Top);\n\t      this.DeleteFromAEL(horzEdge);\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.GetNextInAEL = function (e, Direction)\n\t  {\n\t    return Direction == ClipperLib.Direction.dLeftToRight ? e.NextInAEL : e.PrevInAEL;\n\t  };\n\t  ClipperLib.Clipper.prototype.IsMinima = function (e)\n\t  {\n\t    return e !== null && (e.Prev.NextInLML != e) && (e.Next.NextInLML != e);\n\t  };\n\t  ClipperLib.Clipper.prototype.IsMaxima = function (e, Y)\n\t  {\n\t    return (e !== null && e.Top.Y == Y && e.NextInLML === null);\n\t  };\n\t  ClipperLib.Clipper.prototype.IsIntermediate = function (e, Y)\n\t  {\n\t    return (e.Top.Y == Y && e.NextInLML !== null);\n\t  };\n\t  ClipperLib.Clipper.prototype.GetMaximaPair = function (e)\n\t  {\n\t    var result = null;\n\t    if ((ClipperLib.IntPoint.op_Equality(e.Next.Top, e.Top)) && e.Next.NextInLML === null)\n\t      result = e.Next;\n\t    else if ((ClipperLib.IntPoint.op_Equality(e.Prev.Top, e.Top)) && e.Prev.NextInLML === null)\n\t      result = e.Prev;\n\t    if (result !== null && (result.OutIdx == -2 || (result.NextInAEL == result.PrevInAEL && !ClipperLib.ClipperBase.IsHorizontal(result))))\n\t      return null;\n\t    return result;\n\t  };\n\t\n\t  ClipperLib.Clipper.prototype.ProcessIntersections = function (topY)\n\t  {\n\t    if (this.m_ActiveEdges == null)\n\t      return true;\n\t    try\n\t    {\n\t      this.BuildIntersectList(topY);\n\t      if (this.m_IntersectList.length == 0)\n\t        return true;\n\t      if (this.m_IntersectList.length == 1 || this.FixupIntersectionOrder())\n\t        this.ProcessIntersectList();\n\t      else\n\t        return false;\n\t    }\n\t    catch ($$e2)\n\t    {\n\t      this.m_SortedEdges = null;\n\t      this.m_IntersectList.length = 0;\n\t      ClipperLib.Error(\"ProcessIntersections error\");\n\t    }\n\t    this.m_SortedEdges = null;\n\t    return true;\n\t  };\n\t  ClipperLib.Clipper.prototype.BuildIntersectList = function (topY)\n\t  {\n\t    if (this.m_ActiveEdges === null)\n\t      return;\n\t    //prepare for sorting ...\n\t    var e = this.m_ActiveEdges;\n\t    //console.log(JSON.stringify(JSON.decycle( e )));\n\t    this.m_SortedEdges = e;\n\t    while (e !== null)\n\t    {\n\t      e.PrevInSEL = e.PrevInAEL;\n\t      e.NextInSEL = e.NextInAEL;\n\t      e.Curr.X = ClipperLib.Clipper.TopX(e, topY);\n\t      e = e.NextInAEL;\n\t    }\n\t    //bubblesort ...\n\t    var isModified = true;\n\t    while (isModified && this.m_SortedEdges !== null)\n\t    {\n\t      isModified = false;\n\t      e = this.m_SortedEdges;\n\t      while (e.NextInSEL !== null)\n\t      {\n\t        var eNext = e.NextInSEL;\n\t        var pt = new ClipperLib.IntPoint();\n\t        //console.log(\"e.Curr.X: \" + e.Curr.X + \" eNext.Curr.X\" + eNext.Curr.X);\n\t        if (e.Curr.X > eNext.Curr.X)\n\t        {\n\t\t\t\t\t\tthis.IntersectPoint(e, eNext, pt);\n\t          var newNode = new ClipperLib.IntersectNode();\n\t          newNode.Edge1 = e;\n\t          newNode.Edge2 = eNext;\n\t          //newNode.Pt = pt;\n\t          newNode.Pt.X = pt.X;\n\t          newNode.Pt.Y = pt.Y;\n\t          this.m_IntersectList.push(newNode);\n\t          this.SwapPositionsInSEL(e, eNext);\n\t          isModified = true;\n\t        }\n\t        else\n\t          e = eNext;\n\t      }\n\t      if (e.PrevInSEL !== null)\n\t        e.PrevInSEL.NextInSEL = null;\n\t      else\n\t        break;\n\t    }\n\t    this.m_SortedEdges = null;\n\t  };\n\t  ClipperLib.Clipper.prototype.EdgesAdjacent = function (inode)\n\t  {\n\t    return (inode.Edge1.NextInSEL == inode.Edge2) || (inode.Edge1.PrevInSEL == inode.Edge2);\n\t  };\n\t  ClipperLib.Clipper.IntersectNodeSort = function (node1, node2)\n\t  {\n\t    //the following typecast is safe because the differences in Pt.Y will\n\t    //be limited to the height of the scanbeam.\n\t    return (node2.Pt.Y - node1.Pt.Y);\n\t  };\n\t  ClipperLib.Clipper.prototype.FixupIntersectionOrder = function ()\n\t  {\n\t    //pre-condition: intersections are sorted bottom-most first.\n\t    //Now it's crucial that intersections are made only between adjacent edges,\n\t    //so to ensure this the order of intersections may need adjusting ...\n\t    this.m_IntersectList.sort(this.m_IntersectNodeComparer);\n\t    this.CopyAELToSEL();\n\t    var cnt = this.m_IntersectList.length;\n\t    for (var i = 0; i < cnt; i++)\n\t    {\n\t      if (!this.EdgesAdjacent(this.m_IntersectList[i]))\n\t      {\n\t        var j = i + 1;\n\t        while (j < cnt && !this.EdgesAdjacent(this.m_IntersectList[j]))\n\t          j++;\n\t        if (j == cnt)\n\t          return false;\n\t        var tmp = this.m_IntersectList[i];\n\t        this.m_IntersectList[i] = this.m_IntersectList[j];\n\t        this.m_IntersectList[j] = tmp;\n\t      }\n\t      this.SwapPositionsInSEL(this.m_IntersectList[i].Edge1, this.m_IntersectList[i].Edge2);\n\t    }\n\t    return true;\n\t  };\n\t  ClipperLib.Clipper.prototype.ProcessIntersectList = function ()\n\t  {\n\t    for (var i = 0, ilen = this.m_IntersectList.length; i < ilen; i++)\n\t    {\n\t      var iNode = this.m_IntersectList[i];\n\t      this.IntersectEdges(iNode.Edge1, iNode.Edge2, iNode.Pt);\n\t      this.SwapPositionsInAEL(iNode.Edge1, iNode.Edge2);\n\t    }\n\t    this.m_IntersectList.length = 0;\n\t  };\n\t  /*\n\t  --------------------------------\n\t  Round speedtest: http://jsperf.com/fastest-round\n\t  --------------------------------\n\t  */\n\t  var R1 = function (a)\n\t  {\n\t    return a < 0 ? Math.ceil(a - 0.5) : Math.round(a)\n\t  };\n\t  var R2 = function (a)\n\t  {\n\t    return a < 0 ? Math.ceil(a - 0.5) : Math.floor(a + 0.5)\n\t  };\n\t  var R3 = function (a)\n\t  {\n\t    return a < 0 ? -Math.round(Math.abs(a)) : Math.round(a)\n\t  };\n\t  var R4 = function (a)\n\t  {\n\t    if (a < 0)\n\t    {\n\t      a -= 0.5;\n\t      return a < -2147483648 ? Math.ceil(a) : a | 0;\n\t    }\n\t    else\n\t    {\n\t      a += 0.5;\n\t      return a > 2147483647 ? Math.floor(a) : a | 0;\n\t    }\n\t  };\n\t  if (browser.msie) ClipperLib.Clipper.Round = R1;\n\t  else if (browser.chromium) ClipperLib.Clipper.Round = R3;\n\t  else if (browser.safari) ClipperLib.Clipper.Round = R4;\n\t  else ClipperLib.Clipper.Round = R2; // eg. browser.chrome || browser.firefox || browser.opera\n\t  ClipperLib.Clipper.TopX = function (edge, currentY)\n\t  {\n\t    //if (edge.Bot == edge.Curr) alert (\"edge.Bot = edge.Curr\");\n\t    //if (edge.Bot == edge.Top) alert (\"edge.Bot = edge.Top\");\n\t    if (currentY == edge.Top.Y)\n\t      return edge.Top.X;\n\t    return edge.Bot.X + ClipperLib.Clipper.Round(edge.Dx * (currentY - edge.Bot.Y));\n\t  };\n\t  ClipperLib.Clipper.prototype.IntersectPoint = function (edge1, edge2, ip)\n\t  {\n\t    ip.X = 0;\n\t    ip.Y = 0;\n\t    var b1, b2;\n\t    //nb: with very large coordinate values, it's possible for SlopesEqual() to\n\t    //return false but for the edge.Dx value be equal due to double precision rounding.\n\t    if (edge1.Dx == edge2.Dx)\n\t\t\t{\n\t\t\t\tip.Y = edge1.Curr.Y;\n\t\t\t\tip.X = ClipperLib.Clipper.TopX(edge1, ip.Y);\n\t\t\t\treturn;\n\t    }\n\t    if (edge1.Delta.X === 0)\n\t    {\n\t      ip.X = edge1.Bot.X;\n\t      if (ClipperLib.ClipperBase.IsHorizontal(edge2))\n\t      {\n\t        ip.Y = edge2.Bot.Y;\n\t      }\n\t      else\n\t      {\n\t        b2 = edge2.Bot.Y - (edge2.Bot.X / edge2.Dx);\n\t        ip.Y = ClipperLib.Clipper.Round(ip.X / edge2.Dx + b2);\n\t      }\n\t    }\n\t    else if (edge2.Delta.X === 0)\n\t    {\n\t      ip.X = edge2.Bot.X;\n\t      if (ClipperLib.ClipperBase.IsHorizontal(edge1))\n\t      {\n\t        ip.Y = edge1.Bot.Y;\n\t      }\n\t      else\n\t      {\n\t        b1 = edge1.Bot.Y - (edge1.Bot.X / edge1.Dx);\n\t        ip.Y = ClipperLib.Clipper.Round(ip.X / edge1.Dx + b1);\n\t      }\n\t    }\n\t    else\n\t    {\n\t      b1 = edge1.Bot.X - edge1.Bot.Y * edge1.Dx;\n\t      b2 = edge2.Bot.X - edge2.Bot.Y * edge2.Dx;\n\t      var q = (b2 - b1) / (edge1.Dx - edge2.Dx);\n\t      ip.Y = ClipperLib.Clipper.Round(q);\n\t      if (Math.abs(edge1.Dx) < Math.abs(edge2.Dx))\n\t        ip.X = ClipperLib.Clipper.Round(edge1.Dx * q + b1);\n\t      else\n\t        ip.X = ClipperLib.Clipper.Round(edge2.Dx * q + b2);\n\t    }\n\t    if (ip.Y < edge1.Top.Y || ip.Y < edge2.Top.Y)\n\t    {\n\t      if (edge1.Top.Y > edge2.Top.Y)\n\t      {\n\t        ip.Y = edge1.Top.Y;\n\t        ip.X = ClipperLib.Clipper.TopX(edge2, edge1.Top.Y);\n\t        return ip.X < edge1.Top.X;\n\t      }\n\t      else\n\t        ip.Y = edge2.Top.Y;\n\t      if (Math.abs(edge1.Dx) < Math.abs(edge2.Dx))\n\t        ip.X = ClipperLib.Clipper.TopX(edge1, ip.Y);\n\t      else\n\t        ip.X = ClipperLib.Clipper.TopX(edge2, ip.Y);\n\t    }\n\t\t\t//finally, don't allow 'ip' to be BELOW curr.Y (ie bottom of scanbeam) ...\n\t\t\tif (ip.Y > edge1.Curr.Y)\n\t\t\t{\n\t\t\t\tip.Y = edge1.Curr.Y;\n\t\t\t\t//better to use the more vertical edge to derive X ...\n\t\t\t\tif (Math.abs(edge1.Dx) > Math.abs(edge2.Dx))\n\t\t\t\t\tip.X = ClipperLib.Clipper.TopX(edge2, ip.Y);\n\t\t\t\telse\n\t\t\t\t\tip.X = ClipperLib.Clipper.TopX(edge1, ip.Y);\n\t\t\t}\n\t  };\n\t\n\t  ClipperLib.Clipper.prototype.ProcessEdgesAtTopOfScanbeam = function (topY)\n\t  {\n\t    var e = this.m_ActiveEdges;\n\t    while (e !== null)\n\t    {\n\t      //1. process maxima, treating them as if they're 'bent' horizontal edges,\n\t      //   but exclude maxima with horizontal edges. nb: e can't be a horizontal.\n\t      var IsMaximaEdge = this.IsMaxima(e, topY);\n\t      if (IsMaximaEdge)\n\t      {\n\t        var eMaxPair = this.GetMaximaPair(e);\n\t        IsMaximaEdge = (eMaxPair === null || !ClipperLib.ClipperBase.IsHorizontal(eMaxPair));\n\t      }\n\t      if (IsMaximaEdge)\n\t      {\n\t        var ePrev = e.PrevInAEL;\n\t        this.DoMaxima(e);\n\t        if (ePrev === null)\n\t          e = this.m_ActiveEdges;\n\t        else\n\t          e = ePrev.NextInAEL;\n\t      }\n\t      else\n\t      {\n\t        //2. promote horizontal edges, otherwise update Curr.X and Curr.Y ...\n\t        if (this.IsIntermediate(e, topY) && ClipperLib.ClipperBase.IsHorizontal(e.NextInLML))\n\t        {\n\t          e = this.UpdateEdgeIntoAEL(e);\n\t          if (e.OutIdx >= 0)\n\t            this.AddOutPt(e, e.Bot);\n\t          this.AddEdgeToSEL(e);\n\t        }\n\t        else\n\t        {\n\t          e.Curr.X = ClipperLib.Clipper.TopX(e, topY);\n\t          e.Curr.Y = topY;\n\t        }\n\t        if (this.StrictlySimple)\n\t        {\n\t          var ePrev = e.PrevInAEL;\n\t          if ((e.OutIdx >= 0) && (e.WindDelta !== 0) && ePrev !== null &&\n\t            (ePrev.OutIdx >= 0) && (ePrev.Curr.X == e.Curr.X) &&\n\t            (ePrev.WindDelta !== 0))\n\t          {\n\t           \tvar ip = new ClipperLib.IntPoint(e.Curr);\n\t\n\t\t\t\t\t\t\tif(use_xyz)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.SetZ(ip, ePrev, e);\n\t\t\t\t\t\t\t}\n\t\n\t            var op = this.AddOutPt(ePrev, ip);\n\t            var op2 = this.AddOutPt(e, ip);\n\t            this.AddJoin(op, op2, ip);\n\t            //StrictlySimple (type-3) join\n\t          }\n\t        }\n\t        e = e.NextInAEL;\n\t      }\n\t    }\n\t    //3. Process horizontals at the Top of the scanbeam ...\n\t    this.ProcessHorizontals(true);\n\t    //4. Promote intermediate vertices ...\n\t    e = this.m_ActiveEdges;\n\t    while (e !== null)\n\t    {\n\t      if (this.IsIntermediate(e, topY))\n\t      {\n\t        var op = null;\n\t        if (e.OutIdx >= 0)\n\t          op = this.AddOutPt(e, e.Top);\n\t        e = this.UpdateEdgeIntoAEL(e);\n\t        //if output polygons share an edge, they'll need joining later ...\n\t        var ePrev = e.PrevInAEL;\n\t        var eNext = e.NextInAEL;\n\t        if (ePrev !== null && ePrev.Curr.X == e.Bot.X &&\n\t          ePrev.Curr.Y == e.Bot.Y && op !== null &&\n\t          ePrev.OutIdx >= 0 && ePrev.Curr.Y > ePrev.Top.Y &&\n\t          ClipperLib.ClipperBase.SlopesEqual(e, ePrev, this.m_UseFullRange) &&\n\t          (e.WindDelta !== 0) && (ePrev.WindDelta !== 0))\n\t        {\n\t          var op2 = this.AddOutPt(ePrev, e.Bot);\n\t          this.AddJoin(op, op2, e.Top);\n\t        }\n\t        else if (eNext !== null && eNext.Curr.X == e.Bot.X &&\n\t          eNext.Curr.Y == e.Bot.Y && op !== null &&\n\t          eNext.OutIdx >= 0 && eNext.Curr.Y > eNext.Top.Y &&\n\t          ClipperLib.ClipperBase.SlopesEqual(e, eNext, this.m_UseFullRange) &&\n\t          (e.WindDelta !== 0) && (eNext.WindDelta !== 0))\n\t        {\n\t          var op2 = this.AddOutPt(eNext, e.Bot);\n\t          this.AddJoin(op, op2, e.Top);\n\t        }\n\t      }\n\t      e = e.NextInAEL;\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.DoMaxima = function (e)\n\t  {\n\t    var eMaxPair = this.GetMaximaPair(e);\n\t    if (eMaxPair === null)\n\t    {\n\t      if (e.OutIdx >= 0)\n\t        this.AddOutPt(e, e.Top);\n\t      this.DeleteFromAEL(e);\n\t      return;\n\t    }\n\t    var eNext = e.NextInAEL;\n\t    var use_lines = true;\n\t    while (eNext !== null && eNext != eMaxPair)\n\t    {\n\t      this.IntersectEdges(e, eNext, e.Top);\n\t      this.SwapPositionsInAEL(e, eNext);\n\t      eNext = e.NextInAEL;\n\t    }\n\t    if (e.OutIdx == -1 && eMaxPair.OutIdx == -1)\n\t    {\n\t      this.DeleteFromAEL(e);\n\t      this.DeleteFromAEL(eMaxPair);\n\t    }\n\t    else if (e.OutIdx >= 0 && eMaxPair.OutIdx >= 0)\n\t    {\n\t    \tif (e.OutIdx >= 0) this.AddLocalMaxPoly(e, eMaxPair, e.Top);\n\t      this.DeleteFromAEL(e);\n\t      this.DeleteFromAEL(eMaxPair);\n\t    }\n\t    else if (use_lines && e.WindDelta === 0)\n\t    {\n\t      if (e.OutIdx >= 0)\n\t      {\n\t        this.AddOutPt(e, e.Top);\n\t        e.OutIdx = -1;\n\t      }\n\t      this.DeleteFromAEL(e);\n\t      if (eMaxPair.OutIdx >= 0)\n\t      {\n\t        this.AddOutPt(eMaxPair, e.Top);\n\t        eMaxPair.OutIdx = -1;\n\t      }\n\t      this.DeleteFromAEL(eMaxPair);\n\t    }\n\t    else\n\t      ClipperLib.Error(\"DoMaxima error\");\n\t  };\n\t  ClipperLib.Clipper.ReversePaths = function (polys)\n\t  {\n\t    for (var i = 0, len = polys.length; i < len; i++)\n\t      polys[i].reverse();\n\t  };\n\t  ClipperLib.Clipper.Orientation = function (poly)\n\t  {\n\t    return ClipperLib.Clipper.Area(poly) >= 0;\n\t  };\n\t  ClipperLib.Clipper.prototype.PointCount = function (pts)\n\t  {\n\t    if (pts === null)\n\t      return 0;\n\t    var result = 0;\n\t    var p = pts;\n\t    do {\n\t      result++;\n\t      p = p.Next;\n\t    }\n\t    while (p != pts)\n\t    return result;\n\t  };\n\t  ClipperLib.Clipper.prototype.BuildResult = function (polyg)\n\t  {\n\t    ClipperLib.Clear(polyg);\n\t    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t    {\n\t      var outRec = this.m_PolyOuts[i];\n\t      if (outRec.Pts === null)\n\t        continue;\n\t      var p = outRec.Pts.Prev;\n\t      var cnt = this.PointCount(p);\n\t      if (cnt < 2)\n\t        continue;\n\t      var pg = new Array(cnt);\n\t      for (var j = 0; j < cnt; j++)\n\t      {\n\t        pg[j] = p.Pt;\n\t        p = p.Prev;\n\t      }\n\t      polyg.push(pg);\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.BuildResult2 = function (polytree)\n\t  {\n\t    polytree.Clear();\n\t    //add each output polygon/contour to polytree ...\n\t    //polytree.m_AllPolys.set_Capacity(this.m_PolyOuts.length);\n\t    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t    {\n\t      var outRec = this.m_PolyOuts[i];\n\t      var cnt = this.PointCount(outRec.Pts);\n\t      if ((outRec.IsOpen && cnt < 2) || (!outRec.IsOpen && cnt < 3))\n\t        continue;\n\t      this.FixHoleLinkage(outRec);\n\t      var pn = new ClipperLib.PolyNode();\n\t      polytree.m_AllPolys.push(pn);\n\t      outRec.PolyNode = pn;\n\t      pn.m_polygon.length = cnt;\n\t      var op = outRec.Pts.Prev;\n\t      for (var j = 0; j < cnt; j++)\n\t      {\n\t        pn.m_polygon[j] = op.Pt;\n\t        op = op.Prev;\n\t      }\n\t    }\n\t    //fixup PolyNode links etc ...\n\t    //polytree.m_Childs.set_Capacity(this.m_PolyOuts.length);\n\t    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t    {\n\t      var outRec = this.m_PolyOuts[i];\n\t      if (outRec.PolyNode === null)\n\t        continue;\n\t      else if (outRec.IsOpen)\n\t      {\n\t        outRec.PolyNode.IsOpen = true;\n\t        polytree.AddChild(outRec.PolyNode);\n\t      }\n\t      else if (outRec.FirstLeft !== null && outRec.FirstLeft.PolyNode != null)\n\t        outRec.FirstLeft.PolyNode.AddChild(outRec.PolyNode);\n\t      else\n\t        polytree.AddChild(outRec.PolyNode);\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.FixupOutPolygon = function (outRec)\n\t  {\n\t    //FixupOutPolygon() - removes duplicate points and simplifies consecutive\n\t    //parallel edges by removing the middle vertex.\n\t    var lastOK = null;\n\t    outRec.BottomPt = null;\n\t    var pp = outRec.Pts;\n\t    for (;;)\n\t    {\n\t      if (pp.Prev == pp || pp.Prev == pp.Next)\n\t      {\n\t        outRec.Pts = null;\n\t        return;\n\t      }\n\t      //test for duplicate points and collinear edges ...\n\t      if ((ClipperLib.IntPoint.op_Equality(pp.Pt, pp.Next.Pt)) || (ClipperLib.IntPoint.op_Equality(pp.Pt, pp.Prev.Pt)) ||\n\t        (ClipperLib.ClipperBase.SlopesEqual(pp.Prev.Pt, pp.Pt, pp.Next.Pt, this.m_UseFullRange) &&\n\t          (!this.PreserveCollinear || !this.Pt2IsBetweenPt1AndPt3(pp.Prev.Pt, pp.Pt, pp.Next.Pt))))\n\t      {\n\t        lastOK = null;\n\t        pp.Prev.Next = pp.Next;\n\t        pp.Next.Prev = pp.Prev;\n\t        pp = pp.Prev;\n\t      }\n\t      else if (pp == lastOK)\n\t        break;\n\t      else\n\t      {\n\t        if (lastOK === null)\n\t          lastOK = pp;\n\t        pp = pp.Next;\n\t      }\n\t    }\n\t    outRec.Pts = pp;\n\t  };\n\t  ClipperLib.Clipper.prototype.DupOutPt = function (outPt, InsertAfter)\n\t  {\n\t    var result = new ClipperLib.OutPt();\n\t    //result.Pt = outPt.Pt;\n\t    result.Pt.X = outPt.Pt.X;\n\t    result.Pt.Y = outPt.Pt.Y;\n\t    result.Idx = outPt.Idx;\n\t    if (InsertAfter)\n\t    {\n\t      result.Next = outPt.Next;\n\t      result.Prev = outPt;\n\t      outPt.Next.Prev = result;\n\t      outPt.Next = result;\n\t    }\n\t    else\n\t    {\n\t      result.Prev = outPt.Prev;\n\t      result.Next = outPt;\n\t      outPt.Prev.Next = result;\n\t      outPt.Prev = result;\n\t    }\n\t    return result;\n\t  };\n\t  ClipperLib.Clipper.prototype.GetOverlap = function (a1, a2, b1, b2, $val)\n\t  {\n\t    if (a1 < a2)\n\t    {\n\t      if (b1 < b2)\n\t      {\n\t        $val.Left = Math.max(a1, b1);\n\t        $val.Right = Math.min(a2, b2);\n\t      }\n\t      else\n\t      {\n\t        $val.Left = Math.max(a1, b2);\n\t        $val.Right = Math.min(a2, b1);\n\t      }\n\t    }\n\t    else\n\t    {\n\t      if (b1 < b2)\n\t      {\n\t        $val.Left = Math.max(a2, b1);\n\t        $val.Right = Math.min(a1, b2);\n\t      }\n\t      else\n\t      {\n\t        $val.Left = Math.max(a2, b2);\n\t        $val.Right = Math.min(a1, b1);\n\t      }\n\t    }\n\t    return $val.Left < $val.Right;\n\t  };\n\t  ClipperLib.Clipper.prototype.JoinHorz = function (op1, op1b, op2, op2b, Pt, DiscardLeft)\n\t  {\n\t    var Dir1 = (op1.Pt.X > op1b.Pt.X ? ClipperLib.Direction.dRightToLeft : ClipperLib.Direction.dLeftToRight);\n\t    var Dir2 = (op2.Pt.X > op2b.Pt.X ? ClipperLib.Direction.dRightToLeft : ClipperLib.Direction.dLeftToRight);\n\t    if (Dir1 == Dir2)\n\t      return false;\n\t    //When DiscardLeft, we want Op1b to be on the Left of Op1, otherwise we\n\t    //want Op1b to be on the Right. (And likewise with Op2 and Op2b.)\n\t    //So, to facilitate this while inserting Op1b and Op2b ...\n\t    //when DiscardLeft, make sure we're AT or RIGHT of Pt before adding Op1b,\n\t    //otherwise make sure we're AT or LEFT of Pt. (Likewise with Op2b.)\n\t    if (Dir1 == ClipperLib.Direction.dLeftToRight)\n\t    {\n\t      while (op1.Next.Pt.X <= Pt.X &&\n\t        op1.Next.Pt.X >= op1.Pt.X && op1.Next.Pt.Y == Pt.Y)\n\t        op1 = op1.Next;\n\t      if (DiscardLeft && (op1.Pt.X != Pt.X))\n\t        op1 = op1.Next;\n\t      op1b = this.DupOutPt(op1, !DiscardLeft);\n\t      if (ClipperLib.IntPoint.op_Inequality(op1b.Pt, Pt))\n\t      {\n\t        op1 = op1b;\n\t        //op1.Pt = Pt;\n\t        op1.Pt.X = Pt.X;\n\t        op1.Pt.Y = Pt.Y;\n\t        op1b = this.DupOutPt(op1, !DiscardLeft);\n\t      }\n\t    }\n\t    else\n\t    {\n\t      while (op1.Next.Pt.X >= Pt.X &&\n\t        op1.Next.Pt.X <= op1.Pt.X && op1.Next.Pt.Y == Pt.Y)\n\t        op1 = op1.Next;\n\t      if (!DiscardLeft && (op1.Pt.X != Pt.X))\n\t        op1 = op1.Next;\n\t      op1b = this.DupOutPt(op1, DiscardLeft);\n\t      if (ClipperLib.IntPoint.op_Inequality(op1b.Pt, Pt))\n\t      {\n\t        op1 = op1b;\n\t        //op1.Pt = Pt;\n\t        op1.Pt.X = Pt.X;\n\t        op1.Pt.Y = Pt.Y;\n\t        op1b = this.DupOutPt(op1, DiscardLeft);\n\t      }\n\t    }\n\t    if (Dir2 == ClipperLib.Direction.dLeftToRight)\n\t    {\n\t      while (op2.Next.Pt.X <= Pt.X &&\n\t        op2.Next.Pt.X >= op2.Pt.X && op2.Next.Pt.Y == Pt.Y)\n\t        op2 = op2.Next;\n\t      if (DiscardLeft && (op2.Pt.X != Pt.X))\n\t        op2 = op2.Next;\n\t      op2b = this.DupOutPt(op2, !DiscardLeft);\n\t      if (ClipperLib.IntPoint.op_Inequality(op2b.Pt, Pt))\n\t      {\n\t        op2 = op2b;\n\t        //op2.Pt = Pt;\n\t        op2.Pt.X = Pt.X;\n\t        op2.Pt.Y = Pt.Y;\n\t        op2b = this.DupOutPt(op2, !DiscardLeft);\n\t      }\n\t    }\n\t    else\n\t    {\n\t      while (op2.Next.Pt.X >= Pt.X &&\n\t        op2.Next.Pt.X <= op2.Pt.X && op2.Next.Pt.Y == Pt.Y)\n\t        op2 = op2.Next;\n\t      if (!DiscardLeft && (op2.Pt.X != Pt.X))\n\t        op2 = op2.Next;\n\t      op2b = this.DupOutPt(op2, DiscardLeft);\n\t      if (ClipperLib.IntPoint.op_Inequality(op2b.Pt, Pt))\n\t      {\n\t        op2 = op2b;\n\t        //op2.Pt = Pt;\n\t        op2.Pt.X = Pt.X;\n\t        op2.Pt.Y = Pt.Y;\n\t        op2b = this.DupOutPt(op2, DiscardLeft);\n\t      }\n\t    }\n\t    if ((Dir1 == ClipperLib.Direction.dLeftToRight) == DiscardLeft)\n\t    {\n\t      op1.Prev = op2;\n\t      op2.Next = op1;\n\t      op1b.Next = op2b;\n\t      op2b.Prev = op1b;\n\t    }\n\t    else\n\t    {\n\t      op1.Next = op2;\n\t      op2.Prev = op1;\n\t      op1b.Prev = op2b;\n\t      op2b.Next = op1b;\n\t    }\n\t    return true;\n\t  };\n\t  ClipperLib.Clipper.prototype.JoinPoints = function (j, outRec1, outRec2)\n\t  {\n\t    var op1 = j.OutPt1,\n\t      op1b = new ClipperLib.OutPt();\n\t    var op2 = j.OutPt2,\n\t      op2b = new ClipperLib.OutPt();\n\t    //There are 3 kinds of joins for output polygons ...\n\t    //1. Horizontal joins where Join.OutPt1 & Join.OutPt2 are a vertices anywhere\n\t    //along (horizontal) collinear edges (& Join.OffPt is on the same horizontal).\n\t    //2. Non-horizontal joins where Join.OutPt1 & Join.OutPt2 are at the same\n\t    //location at the Bottom of the overlapping segment (& Join.OffPt is above).\n\t    //3. StrictlySimple joins where edges touch but are not collinear and where\n\t    //Join.OutPt1, Join.OutPt2 & Join.OffPt all share the same point.\n\t    var isHorizontal = (j.OutPt1.Pt.Y == j.OffPt.Y);\n\t    if (isHorizontal && (ClipperLib.IntPoint.op_Equality(j.OffPt, j.OutPt1.Pt)) && (ClipperLib.IntPoint.op_Equality(j.OffPt, j.OutPt2.Pt)))\n\t    {\n\t      //Strictly Simple join ...\n\t\t\t\tif (outRec1 != outRec2) return false;\n\t\n\t      op1b = j.OutPt1.Next;\n\t      while (op1b != op1 && (ClipperLib.IntPoint.op_Equality(op1b.Pt, j.OffPt)))\n\t        op1b = op1b.Next;\n\t      var reverse1 = (op1b.Pt.Y > j.OffPt.Y);\n\t      op2b = j.OutPt2.Next;\n\t      while (op2b != op2 && (ClipperLib.IntPoint.op_Equality(op2b.Pt, j.OffPt)))\n\t        op2b = op2b.Next;\n\t      var reverse2 = (op2b.Pt.Y > j.OffPt.Y);\n\t      if (reverse1 == reverse2)\n\t        return false;\n\t      if (reverse1)\n\t      {\n\t        op1b = this.DupOutPt(op1, false);\n\t        op2b = this.DupOutPt(op2, true);\n\t        op1.Prev = op2;\n\t        op2.Next = op1;\n\t        op1b.Next = op2b;\n\t        op2b.Prev = op1b;\n\t        j.OutPt1 = op1;\n\t        j.OutPt2 = op1b;\n\t        return true;\n\t      }\n\t      else\n\t      {\n\t        op1b = this.DupOutPt(op1, true);\n\t        op2b = this.DupOutPt(op2, false);\n\t        op1.Next = op2;\n\t        op2.Prev = op1;\n\t        op1b.Prev = op2b;\n\t        op2b.Next = op1b;\n\t        j.OutPt1 = op1;\n\t        j.OutPt2 = op1b;\n\t        return true;\n\t      }\n\t    }\n\t    else if (isHorizontal)\n\t    {\n\t      //treat horizontal joins differently to non-horizontal joins since with\n\t      //them we're not yet sure where the overlapping is. OutPt1.Pt & OutPt2.Pt\n\t      //may be anywhere along the horizontal edge.\n\t      op1b = op1;\n\t      while (op1.Prev.Pt.Y == op1.Pt.Y && op1.Prev != op1b && op1.Prev != op2)\n\t        op1 = op1.Prev;\n\t      while (op1b.Next.Pt.Y == op1b.Pt.Y && op1b.Next != op1 && op1b.Next != op2)\n\t        op1b = op1b.Next;\n\t      if (op1b.Next == op1 || op1b.Next == op2)\n\t        return false;\n\t      //a flat 'polygon'\n\t      op2b = op2;\n\t      while (op2.Prev.Pt.Y == op2.Pt.Y && op2.Prev != op2b && op2.Prev != op1b)\n\t        op2 = op2.Prev;\n\t      while (op2b.Next.Pt.Y == op2b.Pt.Y && op2b.Next != op2 && op2b.Next != op1)\n\t        op2b = op2b.Next;\n\t      if (op2b.Next == op2 || op2b.Next == op1)\n\t        return false;\n\t      //a flat 'polygon'\n\t      //Op1 -. Op1b & Op2 -. Op2b are the extremites of the horizontal edges\n\t\n\t      var $val = {Left: null, Right: null};\n\t      if (!this.GetOverlap(op1.Pt.X, op1b.Pt.X, op2.Pt.X, op2b.Pt.X, $val))\n\t        return false;\n\t      var Left = $val.Left;\n\t      var Right = $val.Right;\n\t\n\t      //DiscardLeftSide: when overlapping edges are joined, a spike will created\n\t      //which needs to be cleaned up. However, we don't want Op1 or Op2 caught up\n\t      //on the discard Side as either may still be needed for other joins ...\n\t      var Pt = new ClipperLib.IntPoint();\n\t      var DiscardLeftSide;\n\t      if (op1.Pt.X >= Left && op1.Pt.X <= Right)\n\t      {\n\t        //Pt = op1.Pt;\n\t        Pt.X = op1.Pt.X;\n\t        Pt.Y = op1.Pt.Y;\n\t        DiscardLeftSide = (op1.Pt.X > op1b.Pt.X);\n\t      }\n\t      else if (op2.Pt.X >= Left && op2.Pt.X <= Right)\n\t      {\n\t        //Pt = op2.Pt;\n\t        Pt.X = op2.Pt.X;\n\t        Pt.Y = op2.Pt.Y;\n\t        DiscardLeftSide = (op2.Pt.X > op2b.Pt.X);\n\t      }\n\t      else if (op1b.Pt.X >= Left && op1b.Pt.X <= Right)\n\t      {\n\t        //Pt = op1b.Pt;\n\t        Pt.X = op1b.Pt.X;\n\t        Pt.Y = op1b.Pt.Y;\n\t        DiscardLeftSide = op1b.Pt.X > op1.Pt.X;\n\t      }\n\t      else\n\t      {\n\t        //Pt = op2b.Pt;\n\t        Pt.X = op2b.Pt.X;\n\t        Pt.Y = op2b.Pt.Y;\n\t        DiscardLeftSide = (op2b.Pt.X > op2.Pt.X);\n\t      }\n\t      j.OutPt1 = op1;\n\t      j.OutPt2 = op2;\n\t      return this.JoinHorz(op1, op1b, op2, op2b, Pt, DiscardLeftSide);\n\t    }\n\t    else\n\t    {\n\t      //nb: For non-horizontal joins ...\n\t      //    1. Jr.OutPt1.Pt.Y == Jr.OutPt2.Pt.Y\n\t      //    2. Jr.OutPt1.Pt > Jr.OffPt.Y\n\t      //make sure the polygons are correctly oriented ...\n\t      op1b = op1.Next;\n\t      while ((ClipperLib.IntPoint.op_Equality(op1b.Pt, op1.Pt)) && (op1b != op1))\n\t        op1b = op1b.Next;\n\t      var Reverse1 = ((op1b.Pt.Y > op1.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual(op1.Pt, op1b.Pt, j.OffPt, this.m_UseFullRange));\n\t      if (Reverse1)\n\t      {\n\t        op1b = op1.Prev;\n\t        while ((ClipperLib.IntPoint.op_Equality(op1b.Pt, op1.Pt)) && (op1b != op1))\n\t          op1b = op1b.Prev;\n\t        if ((op1b.Pt.Y > op1.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual(op1.Pt, op1b.Pt, j.OffPt, this.m_UseFullRange))\n\t          return false;\n\t      }\n\t      op2b = op2.Next;\n\t      while ((ClipperLib.IntPoint.op_Equality(op2b.Pt, op2.Pt)) && (op2b != op2))\n\t        op2b = op2b.Next;\n\t      var Reverse2 = ((op2b.Pt.Y > op2.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual(op2.Pt, op2b.Pt, j.OffPt, this.m_UseFullRange));\n\t      if (Reverse2)\n\t      {\n\t        op2b = op2.Prev;\n\t        while ((ClipperLib.IntPoint.op_Equality(op2b.Pt, op2.Pt)) && (op2b != op2))\n\t          op2b = op2b.Prev;\n\t        if ((op2b.Pt.Y > op2.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual(op2.Pt, op2b.Pt, j.OffPt, this.m_UseFullRange))\n\t          return false;\n\t      }\n\t      if ((op1b == op1) || (op2b == op2) || (op1b == op2b) ||\n\t        ((outRec1 == outRec2) && (Reverse1 == Reverse2)))\n\t        return false;\n\t      if (Reverse1)\n\t      {\n\t        op1b = this.DupOutPt(op1, false);\n\t        op2b = this.DupOutPt(op2, true);\n\t        op1.Prev = op2;\n\t        op2.Next = op1;\n\t        op1b.Next = op2b;\n\t        op2b.Prev = op1b;\n\t        j.OutPt1 = op1;\n\t        j.OutPt2 = op1b;\n\t        return true;\n\t      }\n\t      else\n\t      {\n\t        op1b = this.DupOutPt(op1, true);\n\t        op2b = this.DupOutPt(op2, false);\n\t        op1.Next = op2;\n\t        op2.Prev = op1;\n\t        op1b.Prev = op2b;\n\t        op2b.Next = op1b;\n\t        j.OutPt1 = op1;\n\t        j.OutPt2 = op1b;\n\t        return true;\n\t      }\n\t    }\n\t  };\n\t  ClipperLib.Clipper.GetBounds = function (paths)\n\t  {\n\t    var i = 0,\n\t      cnt = paths.length;\n\t    while (i < cnt && paths[i].length == 0) i++;\n\t    if (i == cnt) return new ClipperLib.IntRect(0, 0, 0, 0);\n\t    var result = new ClipperLib.IntRect();\n\t    result.left = paths[i][0].X;\n\t    result.right = result.left;\n\t    result.top = paths[i][0].Y;\n\t    result.bottom = result.top;\n\t    for (; i < cnt; i++)\n\t      for (var j = 0, jlen = paths[i].length; j < jlen; j++)\n\t      {\n\t        if (paths[i][j].X < result.left) result.left = paths[i][j].X;\n\t        else if (paths[i][j].X > result.right) result.right = paths[i][j].X;\n\t        if (paths[i][j].Y < result.top) result.top = paths[i][j].Y;\n\t        else if (paths[i][j].Y > result.bottom) result.bottom = paths[i][j].Y;\n\t      }\n\t    return result;\n\t  }\n\t  ClipperLib.Clipper.prototype.GetBounds2 = function (ops)\n\t  {\n\t    var opStart = ops;\n\t    var result = new ClipperLib.IntRect();\n\t    result.left = ops.Pt.X;\n\t    result.right = ops.Pt.X;\n\t    result.top = ops.Pt.Y;\n\t    result.bottom = ops.Pt.Y;\n\t    ops = ops.Next;\n\t    while (ops != opStart)\n\t    {\n\t      if (ops.Pt.X < result.left)\n\t        result.left = ops.Pt.X;\n\t      if (ops.Pt.X > result.right)\n\t        result.right = ops.Pt.X;\n\t      if (ops.Pt.Y < result.top)\n\t        result.top = ops.Pt.Y;\n\t      if (ops.Pt.Y > result.bottom)\n\t        result.bottom = ops.Pt.Y;\n\t      ops = ops.Next;\n\t    }\n\t    return result;\n\t  };\n\t\n\t  ClipperLib.Clipper.PointInPolygon = function (pt, path)\n\t  {\n\t    //returns 0 if false, +1 if true, -1 if pt ON polygon boundary\n\t\t\t//See \"The Point in Polygon Problem for Arbitrary Polygons\" by Hormann & Agathos\n\t    //http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.88.5498&rep=rep1&type=pdf\n\t    var result = 0,\n\t      cnt = path.length;\n\t    if (cnt < 3)\n\t      return 0;\n\t    var ip = path[0];\n\t    for (var i = 1; i <= cnt; ++i)\n\t    {\n\t      var ipNext = (i == cnt ? path[0] : path[i]);\n\t      if (ipNext.Y == pt.Y)\n\t      {\n\t        if ((ipNext.X == pt.X) || (ip.Y == pt.Y && ((ipNext.X > pt.X) == (ip.X < pt.X))))\n\t          return -1;\n\t      }\n\t      if ((ip.Y < pt.Y) != (ipNext.Y < pt.Y))\n\t      {\n\t        if (ip.X >= pt.X)\n\t        {\n\t          if (ipNext.X > pt.X)\n\t            result = 1 - result;\n\t          else\n\t          {\n\t            var d = (ip.X - pt.X) * (ipNext.Y - pt.Y) - (ipNext.X - pt.X) * (ip.Y - pt.Y);\n\t            if (d == 0)\n\t              return -1;\n\t            else if ((d > 0) == (ipNext.Y > ip.Y))\n\t              result = 1 - result;\n\t          }\n\t        }\n\t        else\n\t        {\n\t          if (ipNext.X > pt.X)\n\t          {\n\t            var d = (ip.X - pt.X) * (ipNext.Y - pt.Y) - (ipNext.X - pt.X) * (ip.Y - pt.Y);\n\t            if (d == 0)\n\t              return -1;\n\t            else if ((d > 0) == (ipNext.Y > ip.Y))\n\t              result = 1 - result;\n\t          }\n\t        }\n\t      }\n\t      ip = ipNext;\n\t    }\n\t    return result;\n\t  };\n\t\n\t  ClipperLib.Clipper.prototype.PointInPolygon = function (pt, op)\n\t  {\n\t    //returns 0 if false, +1 if true, -1 if pt ON polygon boundary\n\t\t\t//See \"The Point in Polygon Problem for Arbitrary Polygons\" by Hormann & Agathos\n\t    //http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.88.5498&rep=rep1&type=pdf\n\t    var result = 0;\n\t    var startOp = op;\n\t\t\tvar ptx = pt.X, pty = pt.Y;\n\t    var poly0x = op.Pt.X, poly0y = op.Pt.Y;\n\t    do\n\t    {\n\t\t\t\top = op.Next;\n\t\t\t\tvar poly1x = op.Pt.X, poly1y = op.Pt.Y;\n\t      if (poly1y == pty)\n\t      {\n\t        if ((poly1x == ptx) || (poly0y == pty && ((poly1x > ptx) == (poly0x < ptx))))\n\t          return -1;\n\t      }\n\t      if ((poly0y < pty) != (poly1y < pty))\n\t      {\n\t        if (poly0x >= ptx)\n\t        {\n\t          if (poly1x > ptx)\n\t            result = 1 - result;\n\t          else\n\t          {\n\t            var d = (poly0x - ptx) * (poly1y - pty) - (poly1x - ptx) * (poly0y - pty);\n\t            if (d == 0)\n\t              return -1;\n\t            if ((d > 0) == (poly1y > poly0y))\n\t              result = 1 - result;\n\t          }\n\t        }\n\t        else\n\t        {\n\t          if (poly1x > ptx)\n\t          {\n\t            var d = (poly0x - ptx) * (poly1y - pty) - (poly1x - ptx) * (poly0y - pty);\n\t            if (d == 0)\n\t              return -1;\n\t            if ((d > 0) == (poly1y > poly0y))\n\t              result = 1 - result;\n\t          }\n\t        }\n\t      }\n\t      poly0x = poly1x;\n\t      poly0y = poly1y;\n\t    } while (startOp != op);\n\t\n\t    return result;\n\t  };\n\t\n\t  ClipperLib.Clipper.prototype.Poly2ContainsPoly1 = function (outPt1, outPt2)\n\t  {\n\t    var op = outPt1;\n\t    do\n\t    {\n\t\t\t\t//nb: PointInPolygon returns 0 if false, +1 if true, -1 if pt on polygon\n\t      var res = this.PointInPolygon(op.Pt, outPt2);\n\t      if (res >= 0)\n\t        return res > 0;\n\t      op = op.Next;\n\t    }\n\t    while (op != outPt1)\n\t    return true;\n\t  };\n\t  ClipperLib.Clipper.prototype.FixupFirstLefts1 = function (OldOutRec, NewOutRec)\n\t  {\n\t    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n\t    {\n\t\t\t\tvar outRec = this.m_PolyOuts[i];\n\t\t\t\tif (outRec.Pts == null || outRec.FirstLeft == null)\n\t\t\t\t\tcontinue;\n\t\t\t\tvar firstLeft = this.ParseFirstLeft(outRec.FirstLeft);\n\t\t\t\tif (firstLeft == OldOutRec)\n\t\t\t\t{\n\t        if (this.Poly2ContainsPoly1(outRec.Pts, NewOutRec.Pts))\n\t          outRec.FirstLeft = NewOutRec;\n\t      }\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.FixupFirstLefts2 = function (OldOutRec, NewOutRec)\n\t  {\n\t    for (var $i2 = 0, $t2 = this.m_PolyOuts, $l2 = $t2.length, outRec = $t2[$i2]; $i2 < $l2; $i2++, outRec = $t2[$i2])\n\t      if (outRec.FirstLeft == OldOutRec)\n\t        outRec.FirstLeft = NewOutRec;\n\t  };\n\t  ClipperLib.Clipper.ParseFirstLeft = function (FirstLeft)\n\t  {\n\t    while (FirstLeft != null && FirstLeft.Pts == null)\n\t      FirstLeft = FirstLeft.FirstLeft;\n\t    return FirstLeft;\n\t  };\n\t  ClipperLib.Clipper.prototype.JoinCommonEdges = function ()\n\t  {\n\t    for (var i = 0, ilen = this.m_Joins.length; i < ilen; i++)\n\t    {\n\t      var join = this.m_Joins[i];\n\t      var outRec1 = this.GetOutRec(join.OutPt1.Idx);\n\t      var outRec2 = this.GetOutRec(join.OutPt2.Idx);\n\t      if (outRec1.Pts == null || outRec2.Pts == null)\n\t        continue;\n\t      //get the polygon fragment with the correct hole state (FirstLeft)\n\t      //before calling JoinPoints() ...\n\t      var holeStateRec;\n\t      if (outRec1 == outRec2)\n\t        holeStateRec = outRec1;\n\t      else if (this.Param1RightOfParam2(outRec1, outRec2))\n\t        holeStateRec = outRec2;\n\t      else if (this.Param1RightOfParam2(outRec2, outRec1))\n\t        holeStateRec = outRec1;\n\t      else\n\t        holeStateRec = this.GetLowermostRec(outRec1, outRec2);\n\t\n\t      if (!this.JoinPoints(join, outRec1, outRec2)) continue;\n\t\n\t      if (outRec1 == outRec2)\n\t      {\n\t        //instead of joining two polygons, we've just created a new one by\n\t        //splitting one polygon into two.\n\t        outRec1.Pts = join.OutPt1;\n\t        outRec1.BottomPt = null;\n\t        outRec2 = this.CreateOutRec();\n\t        outRec2.Pts = join.OutPt2;\n\t        //update all OutRec2.Pts Idx's ...\n\t        this.UpdateOutPtIdxs(outRec2);\n\t        //We now need to check every OutRec.FirstLeft pointer. If it points\n\t        //to OutRec1 it may need to point to OutRec2 instead ...\n\t        if (this.m_UsingPolyTree)\n\t          for (var j = 0, jlen = this.m_PolyOuts.length; j < jlen - 1; j++)\n\t          {\n\t            var oRec = this.m_PolyOuts[j];\n\t            if (oRec.Pts == null || ClipperLib.Clipper.ParseFirstLeft(oRec.FirstLeft) != outRec1 || oRec.IsHole == outRec1.IsHole)\n\t              continue;\n\t            if (this.Poly2ContainsPoly1(oRec.Pts, join.OutPt2))\n\t              oRec.FirstLeft = outRec2;\n\t          }\n\t        if (this.Poly2ContainsPoly1(outRec2.Pts, outRec1.Pts))\n\t        {\n\t          //outRec2 is contained by outRec1 ...\n\t          outRec2.IsHole = !outRec1.IsHole;\n\t          outRec2.FirstLeft = outRec1;\n\t          //fixup FirstLeft pointers that may need reassigning to OutRec1\n\t          if (this.m_UsingPolyTree)\n\t            this.FixupFirstLefts2(outRec2, outRec1);\n\t          if ((outRec2.IsHole ^ this.ReverseSolution) == (this.Area(outRec2) > 0))\n\t            this.ReversePolyPtLinks(outRec2.Pts);\n\t        }\n\t        else if (this.Poly2ContainsPoly1(outRec1.Pts, outRec2.Pts))\n\t        {\n\t          //outRec1 is contained by outRec2 ...\n\t          outRec2.IsHole = outRec1.IsHole;\n\t          outRec1.IsHole = !outRec2.IsHole;\n\t          outRec2.FirstLeft = outRec1.FirstLeft;\n\t          outRec1.FirstLeft = outRec2;\n\t          //fixup FirstLeft pointers that may need reassigning to OutRec1\n\t          if (this.m_UsingPolyTree)\n\t            this.FixupFirstLefts2(outRec1, outRec2);\n\t          if ((outRec1.IsHole ^ this.ReverseSolution) == (this.Area(outRec1) > 0))\n\t            this.ReversePolyPtLinks(outRec1.Pts);\n\t        }\n\t        else\n\t        {\n\t          //the 2 polygons are completely separate ...\n\t          outRec2.IsHole = outRec1.IsHole;\n\t          outRec2.FirstLeft = outRec1.FirstLeft;\n\t          //fixup FirstLeft pointers that may need reassigning to OutRec2\n\t          if (this.m_UsingPolyTree)\n\t            this.FixupFirstLefts1(outRec1, outRec2);\n\t        }\n\t      }\n\t      else\n\t      {\n\t        //joined 2 polygons together ...\n\t        outRec2.Pts = null;\n\t        outRec2.BottomPt = null;\n\t        outRec2.Idx = outRec1.Idx;\n\t        outRec1.IsHole = holeStateRec.IsHole;\n\t        if (holeStateRec == outRec2)\n\t          outRec1.FirstLeft = outRec2.FirstLeft;\n\t        outRec2.FirstLeft = outRec1;\n\t        //fixup FirstLeft pointers that may need reassigning to OutRec1\n\t        if (this.m_UsingPolyTree)\n\t          this.FixupFirstLefts2(outRec2, outRec1);\n\t      }\n\t    }\n\t  };\n\t  ClipperLib.Clipper.prototype.UpdateOutPtIdxs = function (outrec)\n\t  {\n\t    var op = outrec.Pts;\n\t    do {\n\t      op.Idx = outrec.Idx;\n\t      op = op.Prev;\n\t    }\n\t    while (op != outrec.Pts)\n\t  };\n\t  ClipperLib.Clipper.prototype.DoSimplePolygons = function ()\n\t  {\n\t    var i = 0;\n\t    while (i < this.m_PolyOuts.length)\n\t    {\n\t      var outrec = this.m_PolyOuts[i++];\n\t      var op = outrec.Pts;\n\t\t\t\tif (op == null || outrec.IsOpen)\n\t\t\t\t\tcontinue;\n\t      do //for each Pt in Polygon until duplicate found do ...\n\t      {\n\t        var op2 = op.Next;\n\t        while (op2 != outrec.Pts)\n\t        {\n\t          if ((ClipperLib.IntPoint.op_Equality(op.Pt, op2.Pt)) && op2.Next != op && op2.Prev != op)\n\t          {\n\t            //split the polygon into two ...\n\t            var op3 = op.Prev;\n\t            var op4 = op2.Prev;\n\t            op.Prev = op4;\n\t            op4.Next = op;\n\t            op2.Prev = op3;\n\t            op3.Next = op2;\n\t            outrec.Pts = op;\n\t            var outrec2 = this.CreateOutRec();\n\t            outrec2.Pts = op2;\n\t            this.UpdateOutPtIdxs(outrec2);\n\t            if (this.Poly2ContainsPoly1(outrec2.Pts, outrec.Pts))\n\t            {\n\t              //OutRec2 is contained by OutRec1 ...\n\t              outrec2.IsHole = !outrec.IsHole;\n\t              outrec2.FirstLeft = outrec;\n\t\t\t\t\t\t\t\tif (this.m_UsingPolyTree) this.FixupFirstLefts2(outrec2, outrec);\n\t\n\t            }\n\t            else if (this.Poly2ContainsPoly1(outrec.Pts, outrec2.Pts))\n\t            {\n\t              //OutRec1 is contained by OutRec2 ...\n\t              outrec2.IsHole = outrec.IsHole;\n\t              outrec.IsHole = !outrec2.IsHole;\n\t              outrec2.FirstLeft = outrec.FirstLeft;\n\t              outrec.FirstLeft = outrec2;\n\t              if (this.m_UsingPolyTree) this.FixupFirstLefts2(outrec, outrec2);\n\t            }\n\t            else\n\t            {\n\t              //the 2 polygons are separate ...\n\t              outrec2.IsHole = outrec.IsHole;\n\t              outrec2.FirstLeft = outrec.FirstLeft;\n\t\t\t\t\t\t\t\tif (this.m_UsingPolyTree) this.FixupFirstLefts1(outrec, outrec2);\n\t            }\n\t            op2 = op;\n\t            //ie get ready for the next iteration\n\t          }\n\t          op2 = op2.Next;\n\t        }\n\t        op = op.Next;\n\t      }\n\t      while (op != outrec.Pts)\n\t    }\n\t  };\n\t  ClipperLib.Clipper.Area = function (poly)\n\t  {\n\t    var cnt = poly.length;\n\t    if (cnt < 3)\n\t      return 0;\n\t    var a = 0;\n\t    for (var i = 0, j = cnt - 1; i < cnt; ++i)\n\t    {\n\t      a += (poly[j].X + poly[i].X) * (poly[j].Y - poly[i].Y);\n\t      j = i;\n\t    }\n\t    return -a * 0.5;\n\t  };\n\t  ClipperLib.Clipper.prototype.Area = function (outRec)\n\t  {\n\t    var op = outRec.Pts;\n\t    if (op == null)\n\t      return 0;\n\t    var a = 0;\n\t    do {\n\t      a = a + (op.Prev.Pt.X + op.Pt.X) * (op.Prev.Pt.Y - op.Pt.Y);\n\t      op = op.Next;\n\t    }\n\t    while (op != outRec.Pts)\n\t    return a * 0.5;\n\t  };\n\t  ClipperLib.Clipper.SimplifyPolygon = function (poly, fillType)\n\t  {\n\t    var result = new Array();\n\t    var c = new ClipperLib.Clipper(0);\n\t    c.StrictlySimple = true;\n\t    c.AddPath(poly, ClipperLib.PolyType.ptSubject, true);\n\t    c.Execute(ClipperLib.ClipType.ctUnion, result, fillType, fillType);\n\t    return result;\n\t  };\n\t  ClipperLib.Clipper.SimplifyPolygons = function (polys, fillType)\n\t  {\n\t    if (typeof (fillType) == \"undefined\") fillType = ClipperLib.PolyFillType.pftEvenOdd;\n\t    var result = new Array();\n\t    var c = new ClipperLib.Clipper(0);\n\t    c.StrictlySimple = true;\n\t    c.AddPaths(polys, ClipperLib.PolyType.ptSubject, true);\n\t    c.Execute(ClipperLib.ClipType.ctUnion, result, fillType, fillType);\n\t    return result;\n\t  };\n\t  ClipperLib.Clipper.DistanceSqrd = function (pt1, pt2)\n\t  {\n\t    var dx = (pt1.X - pt2.X);\n\t    var dy = (pt1.Y - pt2.Y);\n\t    return (dx * dx + dy * dy);\n\t  };\n\t  ClipperLib.Clipper.DistanceFromLineSqrd = function (pt, ln1, ln2)\n\t  {\n\t    //The equation of a line in general form (Ax + By + C = 0)\n\t    //given 2 points (x¹,y¹) & (x²,y²) is ...\n\t    //(y¹ - y²)x + (x² - x¹)y + (y² - y¹)x¹ - (x² - x¹)y¹ = 0\n\t    //A = (y¹ - y²); B = (x² - x¹); C = (y² - y¹)x¹ - (x² - x¹)y¹\n\t    //perpendicular distance of point (x³,y³) = (Ax³ + By³ + C)/Sqrt(A² + B²)\n\t    //see http://en.wikipedia.org/wiki/Perpendicular_distance\n\t    var A = ln1.Y - ln2.Y;\n\t    var B = ln2.X - ln1.X;\n\t    var C = A * ln1.X + B * ln1.Y;\n\t    C = A * pt.X + B * pt.Y - C;\n\t    return (C * C) / (A * A + B * B);\n\t  };\n\t\n\t\tClipperLib.Clipper.SlopesNearCollinear = function(pt1, pt2, pt3, distSqrd)\n\t\t{\n\t\t\t//this function is more accurate when the point that's GEOMETRICALLY\n\t\t\t//between the other 2 points is the one that's tested for distance.\n\t\t\t//nb: with 'spikes', either pt1 or pt3 is geometrically between the other pts\n\t\t\tif (Math.abs(pt1.X - pt2.X) > Math.abs(pt1.Y - pt2.Y))\n\t\t\t{\n\t\t\tif ((pt1.X > pt2.X) == (pt1.X < pt3.X))\n\t\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt1, pt2, pt3) < distSqrd;\n\t\t\telse if ((pt2.X > pt1.X) == (pt2.X < pt3.X))\n\t\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt2, pt1, pt3) < distSqrd;\n\t\t\t\t\telse\n\t\t\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt3, pt1, pt2) < distSqrd;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tif ((pt1.Y > pt2.Y) == (pt1.Y < pt3.Y))\n\t\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt1, pt2, pt3) < distSqrd;\n\t\t\telse if ((pt2.Y > pt1.Y) == (pt2.Y < pt3.Y))\n\t\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt2, pt1, pt3) < distSqrd;\n\t\t\t\t\telse\n\t\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt3, pt1, pt2) < distSqrd;\n\t\t\t}\n\t\t}\n\t\n\t  ClipperLib.Clipper.PointsAreClose = function (pt1, pt2, distSqrd)\n\t  {\n\t    var dx = pt1.X - pt2.X;\n\t    var dy = pt1.Y - pt2.Y;\n\t    return ((dx * dx) + (dy * dy) <= distSqrd);\n\t  };\n\t  //------------------------------------------------------------------------------\n\t  ClipperLib.Clipper.ExcludeOp = function (op)\n\t  {\n\t    var result = op.Prev;\n\t    result.Next = op.Next;\n\t    op.Next.Prev = result;\n\t    result.Idx = 0;\n\t    return result;\n\t  };\n\t  ClipperLib.Clipper.CleanPolygon = function (path, distance)\n\t  {\n\t    if (typeof (distance) == \"undefined\") distance = 1.415;\n\t    //distance = proximity in units/pixels below which vertices will be stripped.\n\t    //Default ~= sqrt(2) so when adjacent vertices or semi-adjacent vertices have\n\t    //both x & y coords within 1 unit, then the second vertex will be stripped.\n\t    var cnt = path.length;\n\t    if (cnt == 0)\n\t      return new Array();\n\t    var outPts = new Array(cnt);\n\t    for (var i = 0; i < cnt; ++i)\n\t      outPts[i] = new ClipperLib.OutPt();\n\t    for (var i = 0; i < cnt; ++i)\n\t    {\n\t      outPts[i].Pt = path[i];\n\t      outPts[i].Next = outPts[(i + 1) % cnt];\n\t      outPts[i].Next.Prev = outPts[i];\n\t      outPts[i].Idx = 0;\n\t    }\n\t    var distSqrd = distance * distance;\n\t    var op = outPts[0];\n\t    while (op.Idx == 0 && op.Next != op.Prev)\n\t    {\n\t      if (ClipperLib.Clipper.PointsAreClose(op.Pt, op.Prev.Pt, distSqrd))\n\t      {\n\t        op = ClipperLib.Clipper.ExcludeOp(op);\n\t        cnt--;\n\t      }\n\t      else if (ClipperLib.Clipper.PointsAreClose(op.Prev.Pt, op.Next.Pt, distSqrd))\n\t      {\n\t        ClipperLib.Clipper.ExcludeOp(op.Next);\n\t        op = ClipperLib.Clipper.ExcludeOp(op);\n\t        cnt -= 2;\n\t      }\n\t      else if (ClipperLib.Clipper.SlopesNearCollinear(op.Prev.Pt, op.Pt, op.Next.Pt, distSqrd))\n\t      {\n\t        op = ClipperLib.Clipper.ExcludeOp(op);\n\t        cnt--;\n\t      }\n\t      else\n\t      {\n\t        op.Idx = 1;\n\t        op = op.Next;\n\t      }\n\t    }\n\t    if (cnt < 3)\n\t      cnt = 0;\n\t    var result = new Array(cnt);\n\t    for (var i = 0; i < cnt; ++i)\n\t    {\n\t      result[i] = new ClipperLib.IntPoint(op.Pt);\n\t      op = op.Next;\n\t    }\n\t    outPts = null;\n\t    return result;\n\t  };\n\t  ClipperLib.Clipper.CleanPolygons = function (polys, distance)\n\t  {\n\t    var result = new Array(polys.length);\n\t    for (var i = 0, ilen = polys.length; i < ilen; i++)\n\t      result[i] = ClipperLib.Clipper.CleanPolygon(polys[i], distance);\n\t    return result;\n\t  };\n\t  ClipperLib.Clipper.Minkowski = function (pattern, path, IsSum, IsClosed)\n\t  {\n\t    var delta = (IsClosed ? 1 : 0);\n\t    var polyCnt = pattern.length;\n\t    var pathCnt = path.length;\n\t    var result = new Array();\n\t    if (IsSum)\n\t      for (var i = 0; i < pathCnt; i++)\n\t      {\n\t        var p = new Array(polyCnt);\n\t        for (var j = 0, jlen = pattern.length, ip = pattern[j]; j < jlen; j++, ip = pattern[j])\n\t          p[j] = new ClipperLib.IntPoint(path[i].X + ip.X, path[i].Y + ip.Y);\n\t        result.push(p);\n\t      }\n\t    else\n\t      for (var i = 0; i < pathCnt; i++)\n\t      {\n\t        var p = new Array(polyCnt);\n\t        for (var j = 0, jlen = pattern.length, ip = pattern[j]; j < jlen; j++, ip = pattern[j])\n\t          p[j] = new ClipperLib.IntPoint(path[i].X - ip.X, path[i].Y - ip.Y);\n\t        result.push(p);\n\t      }\n\t    var quads = new Array();\n\t    for (var i = 0; i < pathCnt - 1 + delta; i++)\n\t      for (var j = 0; j < polyCnt; j++)\n\t      {\n\t        var quad = new Array();\n\t        quad.push(result[i % pathCnt][j % polyCnt]);\n\t        quad.push(result[(i + 1) % pathCnt][j % polyCnt]);\n\t        quad.push(result[(i + 1) % pathCnt][(j + 1) % polyCnt]);\n\t        quad.push(result[i % pathCnt][(j + 1) % polyCnt]);\n\t        if (!ClipperLib.Clipper.Orientation(quad))\n\t          quad.reverse();\n\t        quads.push(quad);\n\t      }\n\t\t\t\treturn quads;\n\t  };\n\t\n\t\tClipperLib.Clipper.MinkowskiSum = function(pattern, path_or_paths, pathIsClosed)\n\t\t{\n\t\t\tif(!(path_or_paths[0] instanceof Array))\n\t\t\t{\n\t\t\t\tvar path = path_or_paths;\n\t\t\t\tvar paths = ClipperLib.Clipper.Minkowski(pattern, path, true, pathIsClosed);\n\t\t\t\tvar c = new ClipperLib.Clipper();\n\t\t\t\tc.AddPaths(paths, ClipperLib.PolyType.ptSubject, true);\n\t\t\t\tc.Execute(ClipperLib.ClipType.ctUnion, paths, ClipperLib.PolyFillType.pftNonZero, ClipperLib.PolyFillType.pftNonZero);\n\t\t\t\treturn paths;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t \t\t\tvar paths = path_or_paths;\n\t\t\t\tvar solution = new ClipperLib.Paths();\n\t\t\t\tvar c = new ClipperLib.Clipper();\n\t\t\t\tfor (var i = 0; i < paths.length; ++i)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = ClipperLib.Clipper.Minkowski(pattern, paths[i], true, pathIsClosed);\n\t\t\t\t\tc.AddPaths(tmp, ClipperLib.PolyType.ptSubject, true);\n\t\t\t\t\tif (pathIsClosed)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar path = ClipperLib.Clipper.TranslatePath(paths[i], pattern[0]);\n\t\t\t\t\t\tc.AddPath(path, ClipperLib.PolyType.ptClip, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tc.Execute(ClipperLib.ClipType.ctUnion, solution,\n\t\t\t\t\tClipperLib.PolyFillType.pftNonZero, ClipperLib.PolyFillType.pftNonZero);\n\t\t\t\treturn solution;\n\t\t\t}\n\t\t}\n\t\t//------------------------------------------------------------------------------\n\t\n\t\tClipperLib.Clipper.TranslatePath = function (path, delta)\n\t\t{\n\t\t\tvar outPath = new ClipperLib.Path();\n\t\t\tfor (var i = 0; i < path.length; i++)\n\t\t\t\toutPath.push(new ClipperLib.IntPoint(path[i].X + delta.X, path[i].Y + delta.Y));\n\t\t\treturn outPath;\n\t\t}\n\t\t//------------------------------------------------------------------------------\n\t\n\t\tClipperLib.Clipper.MinkowskiDiff = function (poly1, poly2)\n\t\t{\n\t\t\tvar paths = ClipperLib.Clipper.Minkowski(poly1, poly2, false, true);\n\t\t\tvar c = new ClipperLib.Clipper();\n\t\t\tc.AddPaths(paths, ClipperLib.PolyType.ptSubject, true);\n\t\t\tc.Execute(ClipperLib.ClipType.ctUnion, paths, ClipperLib.PolyFillType.pftNonZero, ClipperLib.PolyFillType.pftNonZero);\n\t\t\treturn paths;\n\t\t}\n\t\n\t  ClipperLib.Clipper.PolyTreeToPaths = function (polytree)\n\t  {\n\t    var result = new Array();\n\t    //result.set_Capacity(polytree.get_Total());\n\t    ClipperLib.Clipper.AddPolyNodeToPaths(polytree, ClipperLib.Clipper.NodeType.ntAny, result);\n\t    return result;\n\t  };\n\t  ClipperLib.Clipper.AddPolyNodeToPaths = function (polynode, nt, paths)\n\t  {\n\t    var match = true;\n\t    switch (nt)\n\t    {\n\t    case ClipperLib.Clipper.NodeType.ntOpen:\n\t      return;\n\t    case ClipperLib.Clipper.NodeType.ntClosed:\n\t      match = !polynode.IsOpen;\n\t      break;\n\t    default:\n\t      break;\n\t    }\n\t    if (polynode.m_polygon.length > 0 && match)\n\t      paths.push(polynode.m_polygon);\n\t    for (var $i3 = 0, $t3 = polynode.Childs(), $l3 = $t3.length, pn = $t3[$i3]; $i3 < $l3; $i3++, pn = $t3[$i3])\n\t      ClipperLib.Clipper.AddPolyNodeToPaths(pn, nt, paths);\n\t  };\n\t  ClipperLib.Clipper.OpenPathsFromPolyTree = function (polytree)\n\t  {\n\t    var result = new ClipperLib.Paths();\n\t    //result.set_Capacity(polytree.ChildCount());\n\t    for (var i = 0, ilen = polytree.ChildCount(); i < ilen; i++)\n\t      if (polytree.Childs()[i].IsOpen)\n\t        result.push(polytree.Childs()[i].m_polygon);\n\t    return result;\n\t  };\n\t  ClipperLib.Clipper.ClosedPathsFromPolyTree = function (polytree)\n\t  {\n\t    var result = new ClipperLib.Paths();\n\t    //result.set_Capacity(polytree.Total());\n\t    ClipperLib.Clipper.AddPolyNodeToPaths(polytree, ClipperLib.Clipper.NodeType.ntClosed, result);\n\t    return result;\n\t  };\n\t  Inherit(ClipperLib.Clipper, ClipperLib.ClipperBase);\n\t  ClipperLib.Clipper.NodeType = {\n\t    ntAny: 0,\n\t    ntOpen: 1,\n\t    ntClosed: 2\n\t  };\n\t  ClipperLib.ClipperOffset = function (miterLimit, arcTolerance)\n\t  {\n\t    if (typeof (miterLimit) == \"undefined\") miterLimit = 2;\n\t    if (typeof (arcTolerance) == \"undefined\") arcTolerance = ClipperLib.ClipperOffset.def_arc_tolerance;\n\t    this.m_destPolys = new ClipperLib.Paths();\n\t    this.m_srcPoly = new ClipperLib.Path();\n\t    this.m_destPoly = new ClipperLib.Path();\n\t    this.m_normals = new Array();\n\t    this.m_delta = 0;\n\t    this.m_sinA = 0;\n\t    this.m_sin = 0;\n\t    this.m_cos = 0;\n\t    this.m_miterLim = 0;\n\t    this.m_StepsPerRad = 0;\n\t    this.m_lowest = new ClipperLib.IntPoint();\n\t    this.m_polyNodes = new ClipperLib.PolyNode();\n\t    this.MiterLimit = miterLimit;\n\t    this.ArcTolerance = arcTolerance;\n\t    this.m_lowest.X = -1;\n\t  };\n\t  ClipperLib.ClipperOffset.two_pi = 6.28318530717959;\n\t  ClipperLib.ClipperOffset.def_arc_tolerance = 0.25;\n\t  ClipperLib.ClipperOffset.prototype.Clear = function ()\n\t  {\n\t    ClipperLib.Clear(this.m_polyNodes.Childs());\n\t    this.m_lowest.X = -1;\n\t  };\n\t  ClipperLib.ClipperOffset.Round = ClipperLib.Clipper.Round;\n\t  ClipperLib.ClipperOffset.prototype.AddPath = function (path, joinType, endType)\n\t  {\n\t    var highI = path.length - 1;\n\t    if (highI < 0)\n\t      return;\n\t    var newNode = new ClipperLib.PolyNode();\n\t    newNode.m_jointype = joinType;\n\t    newNode.m_endtype = endType;\n\t    //strip duplicate points from path and also get index to the lowest point ...\n\t    if (endType == ClipperLib.EndType.etClosedLine || endType == ClipperLib.EndType.etClosedPolygon)\n\t      while (highI > 0 && ClipperLib.IntPoint.op_Equality(path[0], path[highI]))\n\t        highI--;\n\t    //newNode.m_polygon.set_Capacity(highI + 1);\n\t    newNode.m_polygon.push(path[0]);\n\t    var j = 0,\n\t      k = 0;\n\t    for (var i = 1; i <= highI; i++)\n\t      if (ClipperLib.IntPoint.op_Inequality(newNode.m_polygon[j], path[i]))\n\t      {\n\t        j++;\n\t        newNode.m_polygon.push(path[i]);\n\t        if (path[i].Y > newNode.m_polygon[k].Y || (path[i].Y == newNode.m_polygon[k].Y && path[i].X < newNode.m_polygon[k].X))\n\t          k = j;\n\t      }\n\t    if (endType == ClipperLib.EndType.etClosedPolygon && j < 2) return;\n\t\n\t    this.m_polyNodes.AddChild(newNode);\n\t    //if this path's lowest pt is lower than all the others then update m_lowest\n\t    if (endType != ClipperLib.EndType.etClosedPolygon)\n\t      return;\n\t    if (this.m_lowest.X < 0)\n\t      this.m_lowest = new ClipperLib.IntPoint(this.m_polyNodes.ChildCount() - 1, k);\n\t    else\n\t    {\n\t      var ip = this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon[this.m_lowest.Y];\n\t      if (newNode.m_polygon[k].Y > ip.Y || (newNode.m_polygon[k].Y == ip.Y && newNode.m_polygon[k].X < ip.X))\n\t        this.m_lowest = new ClipperLib.IntPoint(this.m_polyNodes.ChildCount() - 1, k);\n\t    }\n\t  };\n\t  ClipperLib.ClipperOffset.prototype.AddPaths = function (paths, joinType, endType)\n\t  {\n\t    for (var i = 0, ilen = paths.length; i < ilen; i++)\n\t      this.AddPath(paths[i], joinType, endType);\n\t  };\n\t  ClipperLib.ClipperOffset.prototype.FixOrientations = function ()\n\t  {\n\t    //fixup orientations of all closed paths if the orientation of the\n\t    //closed path with the lowermost vertex is wrong ...\n\t    if (this.m_lowest.X >= 0 && !ClipperLib.Clipper.Orientation(this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon))\n\t    {\n\t      for (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n\t      {\n\t        var node = this.m_polyNodes.Childs()[i];\n\t        if (node.m_endtype == ClipperLib.EndType.etClosedPolygon || (node.m_endtype == ClipperLib.EndType.etClosedLine && ClipperLib.Clipper.Orientation(node.m_polygon)))\n\t          node.m_polygon.reverse();\n\t      }\n\t    }\n\t    else\n\t    {\n\t      for (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n\t      {\n\t        var node = this.m_polyNodes.Childs()[i];\n\t        if (node.m_endtype == ClipperLib.EndType.etClosedLine && !ClipperLib.Clipper.Orientation(node.m_polygon))\n\t          node.m_polygon.reverse();\n\t      }\n\t    }\n\t  };\n\t  ClipperLib.ClipperOffset.GetUnitNormal = function (pt1, pt2)\n\t  {\n\t    var dx = (pt2.X - pt1.X);\n\t    var dy = (pt2.Y - pt1.Y);\n\t    if ((dx == 0) && (dy == 0))\n\t      return new ClipperLib.DoublePoint(0, 0);\n\t    var f = 1 / Math.sqrt(dx * dx + dy * dy);\n\t    dx *= f;\n\t    dy *= f;\n\t    return new ClipperLib.DoublePoint(dy, -dx);\n\t  };\n\t  ClipperLib.ClipperOffset.prototype.DoOffset = function (delta)\n\t  {\n\t    this.m_destPolys = new Array();\n\t    this.m_delta = delta;\n\t    //if Zero offset, just copy any CLOSED polygons to m_p and return ...\n\t    if (ClipperLib.ClipperBase.near_zero(delta))\n\t    {\n\t      //this.m_destPolys.set_Capacity(this.m_polyNodes.ChildCount);\n\t      for (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n\t      {\n\t        var node = this.m_polyNodes.Childs()[i];\n\t        if (node.m_endtype == ClipperLib.EndType.etClosedPolygon)\n\t          this.m_destPolys.push(node.m_polygon);\n\t      }\n\t      return;\n\t    }\n\t    //see offset_triginometry3.svg in the documentation folder ...\n\t    if (this.MiterLimit > 2)\n\t      this.m_miterLim = 2 / (this.MiterLimit * this.MiterLimit);\n\t    else\n\t      this.m_miterLim = 0.5;\n\t    var y;\n\t    if (this.ArcTolerance <= 0)\n\t      y = ClipperLib.ClipperOffset.def_arc_tolerance;\n\t    else if (this.ArcTolerance > Math.abs(delta) * ClipperLib.ClipperOffset.def_arc_tolerance)\n\t      y = Math.abs(delta) * ClipperLib.ClipperOffset.def_arc_tolerance;\n\t    else\n\t      y = this.ArcTolerance;\n\t    //see offset_triginometry2.svg in the documentation folder ...\n\t    var steps = 3.14159265358979 / Math.acos(1 - y / Math.abs(delta));\n\t    this.m_sin = Math.sin(ClipperLib.ClipperOffset.two_pi / steps);\n\t    this.m_cos = Math.cos(ClipperLib.ClipperOffset.two_pi / steps);\n\t    this.m_StepsPerRad = steps / ClipperLib.ClipperOffset.two_pi;\n\t    if (delta < 0)\n\t      this.m_sin = -this.m_sin;\n\t    //this.m_destPolys.set_Capacity(this.m_polyNodes.ChildCount * 2);\n\t    for (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n\t    {\n\t      var node = this.m_polyNodes.Childs()[i];\n\t      this.m_srcPoly = node.m_polygon;\n\t      var len = this.m_srcPoly.length;\n\t      if (len == 0 || (delta <= 0 && (len < 3 || node.m_endtype != ClipperLib.EndType.etClosedPolygon)))\n\t        continue;\n\t      this.m_destPoly = new Array();\n\t      if (len == 1)\n\t      {\n\t        if (node.m_jointype == ClipperLib.JoinType.jtRound)\n\t        {\n\t          var X = 1,\n\t            Y = 0;\n\t          for (var j = 1; j <= steps; j++)\n\t          {\n\t            this.m_destPoly.push(new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X + X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y + Y * delta)));\n\t            var X2 = X;\n\t            X = X * this.m_cos - this.m_sin * Y;\n\t            Y = X2 * this.m_sin + Y * this.m_cos;\n\t          }\n\t        }\n\t        else\n\t        {\n\t          var X = -1,\n\t            Y = -1;\n\t          for (var j = 0; j < 4; ++j)\n\t          {\n\t            this.m_destPoly.push(new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X + X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y + Y * delta)));\n\t            if (X < 0)\n\t              X = 1;\n\t            else if (Y < 0)\n\t              Y = 1;\n\t            else\n\t              X = -1;\n\t          }\n\t        }\n\t        this.m_destPolys.push(this.m_destPoly);\n\t        continue;\n\t      }\n\t      //build m_normals ...\n\t      this.m_normals.length = 0;\n\t      //this.m_normals.set_Capacity(len);\n\t      for (var j = 0; j < len - 1; j++)\n\t        this.m_normals.push(ClipperLib.ClipperOffset.GetUnitNormal(this.m_srcPoly[j], this.m_srcPoly[j + 1]));\n\t      if (node.m_endtype == ClipperLib.EndType.etClosedLine || node.m_endtype == ClipperLib.EndType.etClosedPolygon)\n\t        this.m_normals.push(ClipperLib.ClipperOffset.GetUnitNormal(this.m_srcPoly[len - 1], this.m_srcPoly[0]));\n\t      else\n\t        this.m_normals.push(new ClipperLib.DoublePoint(this.m_normals[len - 2]));\n\t      if (node.m_endtype == ClipperLib.EndType.etClosedPolygon)\n\t      {\n\t        var k = len - 1;\n\t        for (var j = 0; j < len; j++)\n\t          k = this.OffsetPoint(j, k, node.m_jointype);\n\t        this.m_destPolys.push(this.m_destPoly);\n\t      }\n\t      else if (node.m_endtype == ClipperLib.EndType.etClosedLine)\n\t      {\n\t        var k = len - 1;\n\t        for (var j = 0; j < len; j++)\n\t          k = this.OffsetPoint(j, k, node.m_jointype);\n\t        this.m_destPolys.push(this.m_destPoly);\n\t        this.m_destPoly = new Array();\n\t        //re-build m_normals ...\n\t        var n = this.m_normals[len - 1];\n\t        for (var j = len - 1; j > 0; j--)\n\t          this.m_normals[j] = new ClipperLib.DoublePoint(-this.m_normals[j - 1].X, -this.m_normals[j - 1].Y);\n\t        this.m_normals[0] = new ClipperLib.DoublePoint(-n.X, -n.Y);\n\t        k = 0;\n\t        for (var j = len - 1; j >= 0; j--)\n\t          k = this.OffsetPoint(j, k, node.m_jointype);\n\t        this.m_destPolys.push(this.m_destPoly);\n\t      }\n\t      else\n\t      {\n\t        var k = 0;\n\t        for (var j = 1; j < len - 1; ++j)\n\t          k = this.OffsetPoint(j, k, node.m_jointype);\n\t        var pt1;\n\t        if (node.m_endtype == ClipperLib.EndType.etOpenButt)\n\t        {\n\t          var j = len - 1;\n\t          pt1 = new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[j].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[j].Y * delta));\n\t          this.m_destPoly.push(pt1);\n\t          pt1 = new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X - this.m_normals[j].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y - this.m_normals[j].Y * delta));\n\t          this.m_destPoly.push(pt1);\n\t        }\n\t        else\n\t        {\n\t          var j = len - 1;\n\t          k = len - 2;\n\t          this.m_sinA = 0;\n\t          this.m_normals[j] = new ClipperLib.DoublePoint(-this.m_normals[j].X, -this.m_normals[j].Y);\n\t          if (node.m_endtype == ClipperLib.EndType.etOpenSquare)\n\t            this.DoSquare(j, k);\n\t          else\n\t            this.DoRound(j, k);\n\t        }\n\t        //re-build m_normals ...\n\t        for (var j = len - 1; j > 0; j--)\n\t          this.m_normals[j] = new ClipperLib.DoublePoint(-this.m_normals[j - 1].X, -this.m_normals[j - 1].Y);\n\t        this.m_normals[0] = new ClipperLib.DoublePoint(-this.m_normals[1].X, -this.m_normals[1].Y);\n\t        k = len - 1;\n\t        for (var j = k - 1; j > 0; --j)\n\t          k = this.OffsetPoint(j, k, node.m_jointype);\n\t        if (node.m_endtype == ClipperLib.EndType.etOpenButt)\n\t        {\n\t          pt1 = new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X - this.m_normals[0].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y - this.m_normals[0].Y * delta));\n\t          this.m_destPoly.push(pt1);\n\t          pt1 = new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X + this.m_normals[0].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y + this.m_normals[0].Y * delta));\n\t          this.m_destPoly.push(pt1);\n\t        }\n\t        else\n\t        {\n\t          k = 1;\n\t          this.m_sinA = 0;\n\t          if (node.m_endtype == ClipperLib.EndType.etOpenSquare)\n\t            this.DoSquare(0, 1);\n\t          else\n\t            this.DoRound(0, 1);\n\t        }\n\t        this.m_destPolys.push(this.m_destPoly);\n\t      }\n\t    }\n\t  };\n\t  ClipperLib.ClipperOffset.prototype.Execute = function ()\n\t  {\n\t    var a = arguments,\n\t      ispolytree = a[0] instanceof ClipperLib.PolyTree;\n\t    if (!ispolytree) // function (solution, delta)\n\t    {\n\t      var solution = a[0],\n\t        delta = a[1];\n\t      ClipperLib.Clear(solution);\n\t      this.FixOrientations();\n\t      this.DoOffset(delta);\n\t      //now clean up 'corners' ...\n\t      var clpr = new ClipperLib.Clipper(0);\n\t      clpr.AddPaths(this.m_destPolys, ClipperLib.PolyType.ptSubject, true);\n\t      if (delta > 0)\n\t      {\n\t        clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftPositive, ClipperLib.PolyFillType.pftPositive);\n\t      }\n\t      else\n\t      {\n\t        var r = ClipperLib.Clipper.GetBounds(this.m_destPolys);\n\t        var outer = new ClipperLib.Path();\n\t        outer.push(new ClipperLib.IntPoint(r.left - 10, r.bottom + 10));\n\t        outer.push(new ClipperLib.IntPoint(r.right + 10, r.bottom + 10));\n\t        outer.push(new ClipperLib.IntPoint(r.right + 10, r.top - 10));\n\t        outer.push(new ClipperLib.IntPoint(r.left - 10, r.top - 10));\n\t        clpr.AddPath(outer, ClipperLib.PolyType.ptSubject, true);\n\t        clpr.ReverseSolution = true;\n\t        clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftNegative, ClipperLib.PolyFillType.pftNegative);\n\t        if (solution.length > 0)\n\t          solution.splice(0, 1);\n\t      }\n\t      //console.log(JSON.stringify(solution));\n\t    }\n\t    else // function (polytree, delta)\n\t    {\n\t      var solution = a[0],\n\t        delta = a[1];\n\t      solution.Clear();\n\t      this.FixOrientations();\n\t      this.DoOffset(delta);\n\t      //now clean up 'corners' ...\n\t      var clpr = new ClipperLib.Clipper(0);\n\t      clpr.AddPaths(this.m_destPolys, ClipperLib.PolyType.ptSubject, true);\n\t      if (delta > 0)\n\t      {\n\t        clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftPositive, ClipperLib.PolyFillType.pftPositive);\n\t      }\n\t      else\n\t      {\n\t        var r = ClipperLib.Clipper.GetBounds(this.m_destPolys);\n\t        var outer = new ClipperLib.Path();\n\t        outer.push(new ClipperLib.IntPoint(r.left - 10, r.bottom + 10));\n\t        outer.push(new ClipperLib.IntPoint(r.right + 10, r.bottom + 10));\n\t        outer.push(new ClipperLib.IntPoint(r.right + 10, r.top - 10));\n\t        outer.push(new ClipperLib.IntPoint(r.left - 10, r.top - 10));\n\t        clpr.AddPath(outer, ClipperLib.PolyType.ptSubject, true);\n\t        clpr.ReverseSolution = true;\n\t        clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftNegative, ClipperLib.PolyFillType.pftNegative);\n\t        //remove the outer PolyNode rectangle ...\n\t        if (solution.ChildCount() == 1 && solution.Childs()[0].ChildCount() > 0)\n\t        {\n\t          var outerNode = solution.Childs()[0];\n\t          //solution.Childs.set_Capacity(outerNode.ChildCount);\n\t          solution.Childs()[0] = outerNode.Childs()[0];\n\t          solution.Childs()[0].m_Parent = solution;\n\t          for (var i = 1; i < outerNode.ChildCount(); i++)\n\t            solution.AddChild(outerNode.Childs()[i]);\n\t        }\n\t        else\n\t          solution.Clear();\n\t      }\n\t    }\n\t  };\n\t  ClipperLib.ClipperOffset.prototype.OffsetPoint = function (j, k, jointype)\n\t  {\n\t\t\t//cross product ...\n\t\t\tthis.m_sinA = (this.m_normals[k].X * this.m_normals[j].Y - this.m_normals[j].X * this.m_normals[k].Y);\n\t\n\t\t\tif (Math.abs(this.m_sinA * this.m_delta) < 1.0)\n\t\t\t{\n\t\t\t\t//dot product ...\n\t\t\t\tvar cosA = (this.m_normals[k].X * this.m_normals[j].X + this.m_normals[j].Y * this.m_normals[k].Y);\n\t\t\t\tif (cosA > 0) // angle ==> 0 degrees\n\t\t\t\t{\n\t\t\t\t\tthis.m_destPoly.push(new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[k].X * this.m_delta),\n\t\t\t\t\t\tClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[k].Y * this.m_delta)));\n\t\t\t\t\treturn k;\n\t\t\t\t}\n\t\t\t\t//else angle ==> 180 degrees\n\t\t\t}\n\t    else if (this.m_sinA > 1)\n\t      this.m_sinA = 1.0;\n\t    else if (this.m_sinA < -1)\n\t      this.m_sinA = -1.0;\n\t    if (this.m_sinA * this.m_delta < 0)\n\t    {\n\t      this.m_destPoly.push(new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[k].X * this.m_delta),\n\t        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[k].Y * this.m_delta)));\n\t      this.m_destPoly.push(new ClipperLib.IntPoint(this.m_srcPoly[j]));\n\t      this.m_destPoly.push(new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[j].X * this.m_delta),\n\t        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[j].Y * this.m_delta)));\n\t    }\n\t    else\n\t      switch (jointype)\n\t      {\n\t      case ClipperLib.JoinType.jtMiter:\n\t        {\n\t          var r = 1 + (this.m_normals[j].X * this.m_normals[k].X + this.m_normals[j].Y * this.m_normals[k].Y);\n\t          if (r >= this.m_miterLim)\n\t            this.DoMiter(j, k, r);\n\t          else\n\t            this.DoSquare(j, k);\n\t          break;\n\t        }\n\t      case ClipperLib.JoinType.jtSquare:\n\t        this.DoSquare(j, k);\n\t        break;\n\t      case ClipperLib.JoinType.jtRound:\n\t        this.DoRound(j, k);\n\t        break;\n\t      }\n\t    k = j;\n\t    return k;\n\t  };\n\t  ClipperLib.ClipperOffset.prototype.DoSquare = function (j, k)\n\t  {\n\t    var dx = Math.tan(Math.atan2(this.m_sinA,\n\t      this.m_normals[k].X * this.m_normals[j].X + this.m_normals[k].Y * this.m_normals[j].Y) / 4);\n\t    this.m_destPoly.push(new ClipperLib.IntPoint(\n\t      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_delta * (this.m_normals[k].X - this.m_normals[k].Y * dx)),\n\t      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_delta * (this.m_normals[k].Y + this.m_normals[k].X * dx))));\n\t    this.m_destPoly.push(new ClipperLib.IntPoint(\n\t      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_delta * (this.m_normals[j].X + this.m_normals[j].Y * dx)),\n\t      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_delta * (this.m_normals[j].Y - this.m_normals[j].X * dx))));\n\t  };\n\t  ClipperLib.ClipperOffset.prototype.DoMiter = function (j, k, r)\n\t  {\n\t    var q = this.m_delta / r;\n\t    this.m_destPoly.push(new ClipperLib.IntPoint(\n\t      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + (this.m_normals[k].X + this.m_normals[j].X) * q),\n\t      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + (this.m_normals[k].Y + this.m_normals[j].Y) * q)));\n\t  };\n\t  ClipperLib.ClipperOffset.prototype.DoRound = function (j, k)\n\t  {\n\t    var a = Math.atan2(this.m_sinA,\n\t      this.m_normals[k].X * this.m_normals[j].X + this.m_normals[k].Y * this.m_normals[j].Y);\n\t\n\t    \tvar steps = Math.max(ClipperLib.Cast_Int32(ClipperLib.ClipperOffset.Round(this.m_StepsPerRad * Math.abs(a))), 1);\n\t\n\t    var X = this.m_normals[k].X,\n\t      Y = this.m_normals[k].Y,\n\t      X2;\n\t    for (var i = 0; i < steps; ++i)\n\t    {\n\t      this.m_destPoly.push(new ClipperLib.IntPoint(\n\t        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + X * this.m_delta),\n\t        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + Y * this.m_delta)));\n\t      X2 = X;\n\t      X = X * this.m_cos - this.m_sin * Y;\n\t      Y = X2 * this.m_sin + Y * this.m_cos;\n\t    }\n\t    this.m_destPoly.push(new ClipperLib.IntPoint(\n\t      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[j].X * this.m_delta),\n\t      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[j].Y * this.m_delta)));\n\t  };\n\t  ClipperLib.Error = function (message)\n\t  {\n\t    try\n\t    {\n\t      throw new Error(message);\n\t    }\n\t    catch (err)\n\t    {\n\t      alert(err.message);\n\t    }\n\t  };\n\t  // ---------------------------------\n\t  // JS extension by Timo 2013\n\t  ClipperLib.JS = {};\n\t  ClipperLib.JS.AreaOfPolygon = function (poly, scale)\n\t  {\n\t    if (!scale) scale = 1;\n\t    return ClipperLib.Clipper.Area(poly) / (scale * scale);\n\t  };\n\t  ClipperLib.JS.AreaOfPolygons = function (poly, scale)\n\t  {\n\t    if (!scale) scale = 1;\n\t    var area = 0;\n\t    for (var i = 0; i < poly.length; i++)\n\t    {\n\t      area += ClipperLib.Clipper.Area(poly[i]);\n\t    }\n\t    return area / (scale * scale);\n\t  };\n\t  ClipperLib.JS.BoundsOfPath = function (path, scale)\n\t  {\n\t    return ClipperLib.JS.BoundsOfPaths([path], scale);\n\t  };\n\t  ClipperLib.JS.BoundsOfPaths = function (paths, scale)\n\t  {\n\t    if (!scale) scale = 1;\n\t    var bounds = ClipperLib.Clipper.GetBounds(paths);\n\t    bounds.left /= scale;\n\t    bounds.bottom /= scale;\n\t    bounds.right /= scale;\n\t    bounds.top /= scale;\n\t    return bounds;\n\t  };\n\t  // Clean() joins vertices that are too near each other\n\t  // and causes distortion to offsetted polygons without cleaning\n\t  ClipperLib.JS.Clean = function (polygon, delta)\n\t  {\n\t    if (!(polygon instanceof Array)) return [];\n\t    var isPolygons = polygon[0] instanceof Array;\n\t    var polygon = ClipperLib.JS.Clone(polygon);\n\t    if (typeof delta != \"number\" || delta === null)\n\t    {\n\t      ClipperLib.Error(\"Delta is not a number in Clean().\");\n\t      return polygon;\n\t    }\n\t    if (polygon.length === 0 || (polygon.length == 1 && polygon[0].length === 0) || delta < 0) return polygon;\n\t    if (!isPolygons) polygon = [polygon];\n\t    var k_length = polygon.length;\n\t    var len, poly, result, d, p, j, i;\n\t    var results = [];\n\t    for (var k = 0; k < k_length; k++)\n\t    {\n\t      poly = polygon[k];\n\t      len = poly.length;\n\t      if (len === 0) continue;\n\t      else if (len < 3)\n\t      {\n\t        result = poly;\n\t        results.push(result);\n\t        continue;\n\t      }\n\t      result = poly;\n\t      d = delta * delta;\n\t      //d = Math.floor(c_delta * c_delta);\n\t      p = poly[0];\n\t      j = 1;\n\t      for (i = 1; i < len; i++)\n\t      {\n\t        if ((poly[i].X - p.X) * (poly[i].X - p.X) +\n\t          (poly[i].Y - p.Y) * (poly[i].Y - p.Y) <= d)\n\t          continue;\n\t        result[j] = poly[i];\n\t        p = poly[i];\n\t        j++;\n\t      }\n\t      p = poly[j - 1];\n\t      if ((poly[0].X - p.X) * (poly[0].X - p.X) +\n\t        (poly[0].Y - p.Y) * (poly[0].Y - p.Y) <= d)\n\t        j--;\n\t      if (j < len)\n\t        result.splice(j, len - j);\n\t      if (result.length) results.push(result);\n\t    }\n\t    if (!isPolygons && results.length) results = results[0];\n\t    else if (!isPolygons && results.length === 0) results = [];\n\t    else if (isPolygons && results.length === 0) results = [\n\t      []\n\t    ];\n\t    return results;\n\t  }\n\t  // Make deep copy of Polygons or Polygon\n\t  // so that also IntPoint objects are cloned and not only referenced\n\t  // This should be the fastest way\n\t  ClipperLib.JS.Clone = function (polygon)\n\t  {\n\t    if (!(polygon instanceof Array)) return [];\n\t    if (polygon.length === 0) return [];\n\t    else if (polygon.length == 1 && polygon[0].length === 0) return [[]];\n\t    var isPolygons = polygon[0] instanceof Array;\n\t    if (!isPolygons) polygon = [polygon];\n\t    var len = polygon.length,\n\t      plen, i, j, result;\n\t    var results = new Array(len);\n\t    for (i = 0; i < len; i++)\n\t    {\n\t      plen = polygon[i].length;\n\t      result = new Array(plen);\n\t      for (j = 0; j < plen; j++)\n\t      {\n\t        result[j] = {\n\t          X: polygon[i][j].X,\n\t          Y: polygon[i][j].Y\n\t        };\n\t      }\n\t      results[i] = result;\n\t    }\n\t    if (!isPolygons) results = results[0];\n\t    return results;\n\t  };\n\t  // Removes points that doesn't affect much to the visual appearance.\n\t  // If middle point is at or under certain distance (tolerance) of the line segment between\n\t  // start and end point, the middle point is removed.\n\t  ClipperLib.JS.Lighten = function (polygon, tolerance)\n\t  {\n\t    if (!(polygon instanceof Array)) return [];\n\t    if (typeof tolerance != \"number\" || tolerance === null)\n\t    {\n\t      ClipperLib.Error(\"Tolerance is not a number in Lighten().\")\n\t      return ClipperLib.JS.Clone(polygon);\n\t    }\n\t    if (polygon.length === 0 || (polygon.length == 1 && polygon[0].length === 0) || tolerance < 0)\n\t    {\n\t      return ClipperLib.JS.Clone(polygon);\n\t    }\n\t    if (!(polygon[0] instanceof Array)) polygon = [polygon];\n\t    var i, j, poly, k, poly2, plen, A, B, P, d, rem, addlast;\n\t    var bxax, byay, l, ax, ay;\n\t    var len = polygon.length;\n\t    var toleranceSq = tolerance * tolerance;\n\t    var results = [];\n\t    for (i = 0; i < len; i++)\n\t    {\n\t      poly = polygon[i];\n\t      plen = poly.length;\n\t      if (plen == 0) continue;\n\t      for (k = 0; k < 1000000; k++) // could be forever loop, but wiser to restrict max repeat count\n\t      {\n\t        poly2 = [];\n\t        plen = poly.length;\n\t        // the first have to added to the end, if first and last are not the same\n\t        // this way we ensure that also the actual last point can be removed if needed\n\t        if (poly[plen - 1].X != poly[0].X || poly[plen - 1].Y != poly[0].Y)\n\t        {\n\t          addlast = 1;\n\t          poly.push(\n\t          {\n\t            X: poly[0].X,\n\t            Y: poly[0].Y\n\t          });\n\t          plen = poly.length;\n\t        }\n\t        else addlast = 0;\n\t        rem = []; // Indexes of removed points\n\t        for (j = 0; j < plen - 2; j++)\n\t        {\n\t          A = poly[j]; // Start point of line segment\n\t          P = poly[j + 1]; // Middle point. This is the one to be removed.\n\t          B = poly[j + 2]; // End point of line segment\n\t          ax = A.X;\n\t          ay = A.Y;\n\t          bxax = B.X - ax;\n\t          byay = B.Y - ay;\n\t          if (bxax !== 0 || byay !== 0) // To avoid Nan, when A==P && P==B. And to avoid peaks (A==B && A!=P), which have lenght, but not area.\n\t          {\n\t            l = ((P.X - ax) * bxax + (P.Y - ay) * byay) / (bxax * bxax + byay * byay);\n\t            if (l > 1)\n\t            {\n\t              ax = B.X;\n\t              ay = B.Y;\n\t            }\n\t            else if (l > 0)\n\t            {\n\t              ax += bxax * l;\n\t              ay += byay * l;\n\t            }\n\t          }\n\t          bxax = P.X - ax;\n\t          byay = P.Y - ay;\n\t          d = bxax * bxax + byay * byay;\n\t          if (d <= toleranceSq)\n\t          {\n\t            rem[j + 1] = 1;\n\t            j++; // when removed, transfer the pointer to the next one\n\t          }\n\t        }\n\t        // add all unremoved points to poly2\n\t        poly2.push(\n\t        {\n\t          X: poly[0].X,\n\t          Y: poly[0].Y\n\t        });\n\t        for (j = 1; j < plen - 1; j++)\n\t          if (!rem[j]) poly2.push(\n\t          {\n\t            X: poly[j].X,\n\t            Y: poly[j].Y\n\t          });\n\t        poly2.push(\n\t        {\n\t          X: poly[plen - 1].X,\n\t          Y: poly[plen - 1].Y\n\t        });\n\t        // if the first point was added to the end, remove it\n\t        if (addlast) poly.pop();\n\t        // break, if there was not anymore removed points\n\t        if (!rem.length) break;\n\t        // else continue looping using poly2, to check if there are points to remove\n\t        else poly = poly2;\n\t      }\n\t      plen = poly2.length;\n\t      // remove duplicate from end, if needed\n\t      if (poly2[plen - 1].X == poly2[0].X && poly2[plen - 1].Y == poly2[0].Y)\n\t      {\n\t        poly2.pop();\n\t      }\n\t      if (poly2.length > 2) // to avoid two-point-polygons\n\t        results.push(poly2);\n\t    }\n\t    if (!(polygon[0] instanceof Array)) results = results[0];\n\t    if (typeof (results) == \"undefined\") results = [\n\t      []\n\t    ];\n\t    return results;\n\t  }\n\t  ClipperLib.JS.PerimeterOfPath = function (path, closed, scale)\n\t  {\n\t    if (typeof (path) == \"undefined\") return 0;\n\t    var sqrt = Math.sqrt;\n\t    var perimeter = 0.0;\n\t    var p1, p2, p1x = 0.0,\n\t      p1y = 0.0,\n\t      p2x = 0.0,\n\t      p2y = 0.0;\n\t    var j = path.length;\n\t    if (j < 2) return 0;\n\t    if (closed)\n\t    {\n\t      path[j] = path[0];\n\t      j++;\n\t    }\n\t    while (--j)\n\t    {\n\t      p1 = path[j];\n\t      p1x = p1.X;\n\t      p1y = p1.Y;\n\t      p2 = path[j - 1];\n\t      p2x = p2.X;\n\t      p2y = p2.Y;\n\t      perimeter += sqrt((p1x - p2x) * (p1x - p2x) + (p1y - p2y) * (p1y - p2y));\n\t    }\n\t    if (closed) path.pop();\n\t    return perimeter / scale;\n\t  };\n\t  ClipperLib.JS.PerimeterOfPaths = function (paths, closed, scale)\n\t  {\n\t    if (!scale) scale = 1;\n\t    var perimeter = 0;\n\t    for (var i = 0; i < paths.length; i++)\n\t    {\n\t      perimeter += ClipperLib.JS.PerimeterOfPath(paths[i], closed, scale);\n\t    }\n\t    return perimeter;\n\t  };\n\t  ClipperLib.JS.ScaleDownPath = function (path, scale)\n\t  {\n\t    var i, p;\n\t    if (!scale) scale = 1;\n\t    i = path.length;\n\t    while (i--)\n\t    {\n\t      p = path[i];\n\t      p.X = p.X / scale;\n\t      p.Y = p.Y / scale;\n\t    }\n\t  };\n\t  ClipperLib.JS.ScaleDownPaths = function (paths, scale)\n\t  {\n\t    var i, j, p;\n\t    if (!scale) scale = 1;\n\t    i = paths.length;\n\t    while (i--)\n\t    {\n\t      j = paths[i].length;\n\t      while (j--)\n\t      {\n\t        p = paths[i][j];\n\t        p.X = p.X / scale;\n\t        p.Y = p.Y / scale;\n\t      }\n\t    }\n\t  };\n\t  ClipperLib.JS.ScaleUpPath = function (path, scale)\n\t  {\n\t    var i, p, round = Math.round;\n\t    if (!scale) scale = 1;\n\t    i = path.length;\n\t    while (i--)\n\t    {\n\t      p = path[i];\n\t      p.X = round(p.X * scale);\n\t      p.Y = round(p.Y * scale);\n\t    }\n\t  };\n\t  ClipperLib.JS.ScaleUpPaths = function (paths, scale)\n\t  {\n\t    var i, j, p, round = Math.round;\n\t    if (!scale) scale = 1;\n\t    i = paths.length;\n\t    while (i--)\n\t    {\n\t      j = paths[i].length;\n\t      while (j--)\n\t      {\n\t        p = paths[i][j];\n\t        p.X = round(p.X * scale);\n\t        p.Y = round(p.Y * scale);\n\t      }\n\t    }\n\t  };\n\t  ClipperLib.ExPolygons = function ()\n\t  {\n\t    return [];\n\t  }\n\t  ClipperLib.ExPolygon = function ()\n\t  {\n\t    this.outer = null;\n\t    this.holes = null;\n\t  };\n\t  ClipperLib.JS.AddOuterPolyNodeToExPolygons = function (polynode, expolygons)\n\t  {\n\t    var ep = new ClipperLib.ExPolygon();\n\t    ep.outer = polynode.Contour();\n\t    var childs = polynode.Childs();\n\t    var ilen = childs.length;\n\t    ep.holes = new Array(ilen);\n\t    var node, n, i, j, childs2, jlen;\n\t    for (i = 0; i < ilen; i++)\n\t    {\n\t      node = childs[i];\n\t      ep.holes[i] = node.Contour();\n\t      //Add outer polygons contained by (nested within) holes ...\n\t      for (j = 0, childs2 = node.Childs(), jlen = childs2.length; j < jlen; j++)\n\t      {\n\t        n = childs2[j];\n\t        ClipperLib.JS.AddOuterPolyNodeToExPolygons(n, expolygons);\n\t      }\n\t    }\n\t    expolygons.push(ep);\n\t  };\n\t  ClipperLib.JS.ExPolygonsToPaths = function (expolygons)\n\t  {\n\t    var a, i, alen, ilen;\n\t    var paths = new ClipperLib.Paths();\n\t    for (a = 0, alen = expolygons.length; a < alen; a++)\n\t    {\n\t      paths.push(expolygons[a].outer);\n\t      for (i = 0, ilen = expolygons[a].holes.length; i < ilen; i++)\n\t      {\n\t        paths.push(expolygons[a].holes[i]);\n\t      }\n\t    }\n\t    return paths;\n\t  }\n\t  ClipperLib.JS.PolyTreeToExPolygons = function (polytree)\n\t  {\n\t    var expolygons = new ClipperLib.ExPolygons();\n\t    var node, i, childs, ilen;\n\t    for (i = 0, childs = polytree.Childs(), ilen = childs.length; i < ilen; i++)\n\t    {\n\t      node = childs[i];\n\t      ClipperLib.JS.AddOuterPolyNodeToExPolygons(node, expolygons);\n\t    }\n\t    return expolygons;\n\t  };\n\t})();\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\t\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\t\n\tThe above copyright notice and this permission notice shall be included in\n\tall copies or substantial portions of the Software.\n\t\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\tTHE SOFTWARE. */\n\t\n\tvar glMatrix = __webpack_require__(1);\n\t\n\t/**\n\t * @class 3x3 Matrix\n\t * @name mat3\n\t */\n\tvar mat3 = {};\n\t\n\t/**\n\t * Creates a new identity mat3\n\t *\n\t * @returns {mat3} a new 3x3 matrix\n\t */\n\tmat3.create = function() {\n\t    var out = new glMatrix.ARRAY_TYPE(9);\n\t    out[0] = 1;\n\t    out[1] = 0;\n\t    out[2] = 0;\n\t    out[3] = 0;\n\t    out[4] = 1;\n\t    out[5] = 0;\n\t    out[6] = 0;\n\t    out[7] = 0;\n\t    out[8] = 1;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Copies the upper-left 3x3 values into the given mat3.\n\t *\n\t * @param {mat3} out the receiving 3x3 matrix\n\t * @param {mat4} a   the source 4x4 matrix\n\t * @returns {mat3} out\n\t */\n\tmat3.fromMat4 = function(out, a) {\n\t    out[0] = a[0];\n\t    out[1] = a[1];\n\t    out[2] = a[2];\n\t    out[3] = a[4];\n\t    out[4] = a[5];\n\t    out[5] = a[6];\n\t    out[6] = a[8];\n\t    out[7] = a[9];\n\t    out[8] = a[10];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Creates a new mat3 initialized with values from an existing matrix\n\t *\n\t * @param {mat3} a matrix to clone\n\t * @returns {mat3} a new 3x3 matrix\n\t */\n\tmat3.clone = function(a) {\n\t    var out = new glMatrix.ARRAY_TYPE(9);\n\t    out[0] = a[0];\n\t    out[1] = a[1];\n\t    out[2] = a[2];\n\t    out[3] = a[3];\n\t    out[4] = a[4];\n\t    out[5] = a[5];\n\t    out[6] = a[6];\n\t    out[7] = a[7];\n\t    out[8] = a[8];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Copy the values from one mat3 to another\n\t *\n\t * @param {mat3} out the receiving matrix\n\t * @param {mat3} a the source matrix\n\t * @returns {mat3} out\n\t */\n\tmat3.copy = function(out, a) {\n\t    out[0] = a[0];\n\t    out[1] = a[1];\n\t    out[2] = a[2];\n\t    out[3] = a[3];\n\t    out[4] = a[4];\n\t    out[5] = a[5];\n\t    out[6] = a[6];\n\t    out[7] = a[7];\n\t    out[8] = a[8];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Create a new mat3 with the given values\n\t *\n\t * @param {Number} m00 Component in column 0, row 0 position (index 0)\n\t * @param {Number} m01 Component in column 0, row 1 position (index 1)\n\t * @param {Number} m02 Component in column 0, row 2 position (index 2)\n\t * @param {Number} m10 Component in column 1, row 0 position (index 3)\n\t * @param {Number} m11 Component in column 1, row 1 position (index 4)\n\t * @param {Number} m12 Component in column 1, row 2 position (index 5)\n\t * @param {Number} m20 Component in column 2, row 0 position (index 6)\n\t * @param {Number} m21 Component in column 2, row 1 position (index 7)\n\t * @param {Number} m22 Component in column 2, row 2 position (index 8)\n\t * @returns {mat3} A new mat3\n\t */\n\tmat3.fromValues = function(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n\t    var out = new glMatrix.ARRAY_TYPE(9);\n\t    out[0] = m00;\n\t    out[1] = m01;\n\t    out[2] = m02;\n\t    out[3] = m10;\n\t    out[4] = m11;\n\t    out[5] = m12;\n\t    out[6] = m20;\n\t    out[7] = m21;\n\t    out[8] = m22;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Set the components of a mat3 to the given values\n\t *\n\t * @param {mat3} out the receiving matrix\n\t * @param {Number} m00 Component in column 0, row 0 position (index 0)\n\t * @param {Number} m01 Component in column 0, row 1 position (index 1)\n\t * @param {Number} m02 Component in column 0, row 2 position (index 2)\n\t * @param {Number} m10 Component in column 1, row 0 position (index 3)\n\t * @param {Number} m11 Component in column 1, row 1 position (index 4)\n\t * @param {Number} m12 Component in column 1, row 2 position (index 5)\n\t * @param {Number} m20 Component in column 2, row 0 position (index 6)\n\t * @param {Number} m21 Component in column 2, row 1 position (index 7)\n\t * @param {Number} m22 Component in column 2, row 2 position (index 8)\n\t * @returns {mat3} out\n\t */\n\tmat3.set = function(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n\t    out[0] = m00;\n\t    out[1] = m01;\n\t    out[2] = m02;\n\t    out[3] = m10;\n\t    out[4] = m11;\n\t    out[5] = m12;\n\t    out[6] = m20;\n\t    out[7] = m21;\n\t    out[8] = m22;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Set a mat3 to the identity matrix\n\t *\n\t * @param {mat3} out the receiving matrix\n\t * @returns {mat3} out\n\t */\n\tmat3.identity = function(out) {\n\t    out[0] = 1;\n\t    out[1] = 0;\n\t    out[2] = 0;\n\t    out[3] = 0;\n\t    out[4] = 1;\n\t    out[5] = 0;\n\t    out[6] = 0;\n\t    out[7] = 0;\n\t    out[8] = 1;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Transpose the values of a mat3\n\t *\n\t * @param {mat3} out the receiving matrix\n\t * @param {mat3} a the source matrix\n\t * @returns {mat3} out\n\t */\n\tmat3.transpose = function(out, a) {\n\t    // If we are transposing ourselves we can skip a few steps but have to cache some values\n\t    if (out === a) {\n\t        var a01 = a[1], a02 = a[2], a12 = a[5];\n\t        out[1] = a[3];\n\t        out[2] = a[6];\n\t        out[3] = a01;\n\t        out[5] = a[7];\n\t        out[6] = a02;\n\t        out[7] = a12;\n\t    } else {\n\t        out[0] = a[0];\n\t        out[1] = a[3];\n\t        out[2] = a[6];\n\t        out[3] = a[1];\n\t        out[4] = a[4];\n\t        out[5] = a[7];\n\t        out[6] = a[2];\n\t        out[7] = a[5];\n\t        out[8] = a[8];\n\t    }\n\t    \n\t    return out;\n\t};\n\t\n\t/**\n\t * Inverts a mat3\n\t *\n\t * @param {mat3} out the receiving matrix\n\t * @param {mat3} a the source matrix\n\t * @returns {mat3} out\n\t */\n\tmat3.invert = function(out, a) {\n\t    var a00 = a[0], a01 = a[1], a02 = a[2],\n\t        a10 = a[3], a11 = a[4], a12 = a[5],\n\t        a20 = a[6], a21 = a[7], a22 = a[8],\n\t\n\t        b01 = a22 * a11 - a12 * a21,\n\t        b11 = -a22 * a10 + a12 * a20,\n\t        b21 = a21 * a10 - a11 * a20,\n\t\n\t        // Calculate the determinant\n\t        det = a00 * b01 + a01 * b11 + a02 * b21;\n\t\n\t    if (!det) { \n\t        return null; \n\t    }\n\t    det = 1.0 / det;\n\t\n\t    out[0] = b01 * det;\n\t    out[1] = (-a22 * a01 + a02 * a21) * det;\n\t    out[2] = (a12 * a01 - a02 * a11) * det;\n\t    out[3] = b11 * det;\n\t    out[4] = (a22 * a00 - a02 * a20) * det;\n\t    out[5] = (-a12 * a00 + a02 * a10) * det;\n\t    out[6] = b21 * det;\n\t    out[7] = (-a21 * a00 + a01 * a20) * det;\n\t    out[8] = (a11 * a00 - a01 * a10) * det;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Calculates the adjugate of a mat3\n\t *\n\t * @param {mat3} out the receiving matrix\n\t * @param {mat3} a the source matrix\n\t * @returns {mat3} out\n\t */\n\tmat3.adjoint = function(out, a) {\n\t    var a00 = a[0], a01 = a[1], a02 = a[2],\n\t        a10 = a[3], a11 = a[4], a12 = a[5],\n\t        a20 = a[6], a21 = a[7], a22 = a[8];\n\t\n\t    out[0] = (a11 * a22 - a12 * a21);\n\t    out[1] = (a02 * a21 - a01 * a22);\n\t    out[2] = (a01 * a12 - a02 * a11);\n\t    out[3] = (a12 * a20 - a10 * a22);\n\t    out[4] = (a00 * a22 - a02 * a20);\n\t    out[5] = (a02 * a10 - a00 * a12);\n\t    out[6] = (a10 * a21 - a11 * a20);\n\t    out[7] = (a01 * a20 - a00 * a21);\n\t    out[8] = (a00 * a11 - a01 * a10);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Calculates the determinant of a mat3\n\t *\n\t * @param {mat3} a the source matrix\n\t * @returns {Number} determinant of a\n\t */\n\tmat3.determinant = function (a) {\n\t    var a00 = a[0], a01 = a[1], a02 = a[2],\n\t        a10 = a[3], a11 = a[4], a12 = a[5],\n\t        a20 = a[6], a21 = a[7], a22 = a[8];\n\t\n\t    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n\t};\n\t\n\t/**\n\t * Multiplies two mat3's\n\t *\n\t * @param {mat3} out the receiving matrix\n\t * @param {mat3} a the first operand\n\t * @param {mat3} b the second operand\n\t * @returns {mat3} out\n\t */\n\tmat3.multiply = function (out, a, b) {\n\t    var a00 = a[0], a01 = a[1], a02 = a[2],\n\t        a10 = a[3], a11 = a[4], a12 = a[5],\n\t        a20 = a[6], a21 = a[7], a22 = a[8],\n\t\n\t        b00 = b[0], b01 = b[1], b02 = b[2],\n\t        b10 = b[3], b11 = b[4], b12 = b[5],\n\t        b20 = b[6], b21 = b[7], b22 = b[8];\n\t\n\t    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n\t    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n\t    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\t\n\t    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n\t    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n\t    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\t\n\t    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n\t    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n\t    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Alias for {@link mat3.multiply}\n\t * @function\n\t */\n\tmat3.mul = mat3.multiply;\n\t\n\t/**\n\t * Translate a mat3 by the given vector\n\t *\n\t * @param {mat3} out the receiving matrix\n\t * @param {mat3} a the matrix to translate\n\t * @param {vec2} v vector to translate by\n\t * @returns {mat3} out\n\t */\n\tmat3.translate = function(out, a, v) {\n\t    var a00 = a[0], a01 = a[1], a02 = a[2],\n\t        a10 = a[3], a11 = a[4], a12 = a[5],\n\t        a20 = a[6], a21 = a[7], a22 = a[8],\n\t        x = v[0], y = v[1];\n\t\n\t    out[0] = a00;\n\t    out[1] = a01;\n\t    out[2] = a02;\n\t\n\t    out[3] = a10;\n\t    out[4] = a11;\n\t    out[5] = a12;\n\t\n\t    out[6] = x * a00 + y * a10 + a20;\n\t    out[7] = x * a01 + y * a11 + a21;\n\t    out[8] = x * a02 + y * a12 + a22;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Rotates a mat3 by the given angle\n\t *\n\t * @param {mat3} out the receiving matrix\n\t * @param {mat3} a the matrix to rotate\n\t * @param {Number} rad the angle to rotate the matrix by\n\t * @returns {mat3} out\n\t */\n\tmat3.rotate = function (out, a, rad) {\n\t    var a00 = a[0], a01 = a[1], a02 = a[2],\n\t        a10 = a[3], a11 = a[4], a12 = a[5],\n\t        a20 = a[6], a21 = a[7], a22 = a[8],\n\t\n\t        s = Math.sin(rad),\n\t        c = Math.cos(rad);\n\t\n\t    out[0] = c * a00 + s * a10;\n\t    out[1] = c * a01 + s * a11;\n\t    out[2] = c * a02 + s * a12;\n\t\n\t    out[3] = c * a10 - s * a00;\n\t    out[4] = c * a11 - s * a01;\n\t    out[5] = c * a12 - s * a02;\n\t\n\t    out[6] = a20;\n\t    out[7] = a21;\n\t    out[8] = a22;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Scales the mat3 by the dimensions in the given vec2\n\t *\n\t * @param {mat3} out the receiving matrix\n\t * @param {mat3} a the matrix to rotate\n\t * @param {vec2} v the vec2 to scale the matrix by\n\t * @returns {mat3} out\n\t **/\n\tmat3.scale = function(out, a, v) {\n\t    var x = v[0], y = v[1];\n\t\n\t    out[0] = x * a[0];\n\t    out[1] = x * a[1];\n\t    out[2] = x * a[2];\n\t\n\t    out[3] = y * a[3];\n\t    out[4] = y * a[4];\n\t    out[5] = y * a[5];\n\t\n\t    out[6] = a[6];\n\t    out[7] = a[7];\n\t    out[8] = a[8];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Creates a matrix from a vector translation\n\t * This is equivalent to (but much faster than):\n\t *\n\t *     mat3.identity(dest);\n\t *     mat3.translate(dest, dest, vec);\n\t *\n\t * @param {mat3} out mat3 receiving operation result\n\t * @param {vec2} v Translation vector\n\t * @returns {mat3} out\n\t */\n\tmat3.fromTranslation = function(out, v) {\n\t    out[0] = 1;\n\t    out[1] = 0;\n\t    out[2] = 0;\n\t    out[3] = 0;\n\t    out[4] = 1;\n\t    out[5] = 0;\n\t    out[6] = v[0];\n\t    out[7] = v[1];\n\t    out[8] = 1;\n\t    return out;\n\t}\n\t\n\t/**\n\t * Creates a matrix from a given angle\n\t * This is equivalent to (but much faster than):\n\t *\n\t *     mat3.identity(dest);\n\t *     mat3.rotate(dest, dest, rad);\n\t *\n\t * @param {mat3} out mat3 receiving operation result\n\t * @param {Number} rad the angle to rotate the matrix by\n\t * @returns {mat3} out\n\t */\n\tmat3.fromRotation = function(out, rad) {\n\t    var s = Math.sin(rad), c = Math.cos(rad);\n\t\n\t    out[0] = c;\n\t    out[1] = s;\n\t    out[2] = 0;\n\t\n\t    out[3] = -s;\n\t    out[4] = c;\n\t    out[5] = 0;\n\t\n\t    out[6] = 0;\n\t    out[7] = 0;\n\t    out[8] = 1;\n\t    return out;\n\t}\n\t\n\t/**\n\t * Creates a matrix from a vector scaling\n\t * This is equivalent to (but much faster than):\n\t *\n\t *     mat3.identity(dest);\n\t *     mat3.scale(dest, dest, vec);\n\t *\n\t * @param {mat3} out mat3 receiving operation result\n\t * @param {vec2} v Scaling vector\n\t * @returns {mat3} out\n\t */\n\tmat3.fromScaling = function(out, v) {\n\t    out[0] = v[0];\n\t    out[1] = 0;\n\t    out[2] = 0;\n\t\n\t    out[3] = 0;\n\t    out[4] = v[1];\n\t    out[5] = 0;\n\t\n\t    out[6] = 0;\n\t    out[7] = 0;\n\t    out[8] = 1;\n\t    return out;\n\t}\n\t\n\t/**\n\t * Copies the values from a mat2d into a mat3\n\t *\n\t * @param {mat3} out the receiving matrix\n\t * @param {mat2d} a the matrix to copy\n\t * @returns {mat3} out\n\t **/\n\tmat3.fromMat2d = function(out, a) {\n\t    out[0] = a[0];\n\t    out[1] = a[1];\n\t    out[2] = 0;\n\t\n\t    out[3] = a[2];\n\t    out[4] = a[3];\n\t    out[5] = 0;\n\t\n\t    out[6] = a[4];\n\t    out[7] = a[5];\n\t    out[8] = 1;\n\t    return out;\n\t};\n\t\n\t/**\n\t* Calculates a 3x3 matrix from the given quaternion\n\t*\n\t* @param {mat3} out mat3 receiving operation result\n\t* @param {quat} q Quaternion to create matrix from\n\t*\n\t* @returns {mat3} out\n\t*/\n\tmat3.fromQuat = function (out, q) {\n\t    var x = q[0], y = q[1], z = q[2], w = q[3],\n\t        x2 = x + x,\n\t        y2 = y + y,\n\t        z2 = z + z,\n\t\n\t        xx = x * x2,\n\t        yx = y * x2,\n\t        yy = y * y2,\n\t        zx = z * x2,\n\t        zy = z * y2,\n\t        zz = z * z2,\n\t        wx = w * x2,\n\t        wy = w * y2,\n\t        wz = w * z2;\n\t\n\t    out[0] = 1 - yy - zz;\n\t    out[3] = yx - wz;\n\t    out[6] = zx + wy;\n\t\n\t    out[1] = yx + wz;\n\t    out[4] = 1 - xx - zz;\n\t    out[7] = zy - wx;\n\t\n\t    out[2] = zx - wy;\n\t    out[5] = zy + wx;\n\t    out[8] = 1 - xx - yy;\n\t\n\t    return out;\n\t};\n\t\n\t/**\n\t* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n\t*\n\t* @param {mat3} out mat3 receiving operation result\n\t* @param {mat4} a Mat4 to derive the normal matrix from\n\t*\n\t* @returns {mat3} out\n\t*/\n\tmat3.normalFromMat4 = function (out, a) {\n\t    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n\t        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n\t        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n\t        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\t\n\t        b00 = a00 * a11 - a01 * a10,\n\t        b01 = a00 * a12 - a02 * a10,\n\t        b02 = a00 * a13 - a03 * a10,\n\t        b03 = a01 * a12 - a02 * a11,\n\t        b04 = a01 * a13 - a03 * a11,\n\t        b05 = a02 * a13 - a03 * a12,\n\t        b06 = a20 * a31 - a21 * a30,\n\t        b07 = a20 * a32 - a22 * a30,\n\t        b08 = a20 * a33 - a23 * a30,\n\t        b09 = a21 * a32 - a22 * a31,\n\t        b10 = a21 * a33 - a23 * a31,\n\t        b11 = a22 * a33 - a23 * a32,\n\t\n\t        // Calculate the determinant\n\t        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\t\n\t    if (!det) { \n\t        return null; \n\t    }\n\t    det = 1.0 / det;\n\t\n\t    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n\t    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n\t    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\t\n\t    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n\t    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n\t    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\t\n\t    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n\t    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n\t    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\t\n\t    return out;\n\t};\n\t\n\t/**\n\t * Returns a string representation of a mat3\n\t *\n\t * @param {mat3} mat matrix to represent as a string\n\t * @returns {String} string representation of the matrix\n\t */\n\tmat3.str = function (a) {\n\t    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n\t                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + \n\t                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n\t};\n\t\n\t/**\n\t * Returns Frobenius norm of a mat3\n\t *\n\t * @param {mat3} a the matrix to calculate Frobenius norm of\n\t * @returns {Number} Frobenius norm\n\t */\n\tmat3.frob = function (a) {\n\t    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n\t};\n\t\n\t/**\n\t * Adds two mat3's\n\t *\n\t * @param {mat3} out the receiving matrix\n\t * @param {mat3} a the first operand\n\t * @param {mat3} b the second operand\n\t * @returns {mat3} out\n\t */\n\tmat3.add = function(out, a, b) {\n\t    out[0] = a[0] + b[0];\n\t    out[1] = a[1] + b[1];\n\t    out[2] = a[2] + b[2];\n\t    out[3] = a[3] + b[3];\n\t    out[4] = a[4] + b[4];\n\t    out[5] = a[5] + b[5];\n\t    out[6] = a[6] + b[6];\n\t    out[7] = a[7] + b[7];\n\t    out[8] = a[8] + b[8];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Subtracts matrix b from matrix a\n\t *\n\t * @param {mat3} out the receiving matrix\n\t * @param {mat3} a the first operand\n\t * @param {mat3} b the second operand\n\t * @returns {mat3} out\n\t */\n\tmat3.subtract = function(out, a, b) {\n\t    out[0] = a[0] - b[0];\n\t    out[1] = a[1] - b[1];\n\t    out[2] = a[2] - b[2];\n\t    out[3] = a[3] - b[3];\n\t    out[4] = a[4] - b[4];\n\t    out[5] = a[5] - b[5];\n\t    out[6] = a[6] - b[6];\n\t    out[7] = a[7] - b[7];\n\t    out[8] = a[8] - b[8];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Alias for {@link mat3.subtract}\n\t * @function\n\t */\n\tmat3.sub = mat3.subtract;\n\t\n\t/**\n\t * Multiply each element of the matrix by a scalar.\n\t *\n\t * @param {mat3} out the receiving matrix\n\t * @param {mat3} a the matrix to scale\n\t * @param {Number} b amount to scale the matrix's elements by\n\t * @returns {mat3} out\n\t */\n\tmat3.multiplyScalar = function(out, a, b) {\n\t    out[0] = a[0] * b;\n\t    out[1] = a[1] * b;\n\t    out[2] = a[2] * b;\n\t    out[3] = a[3] * b;\n\t    out[4] = a[4] * b;\n\t    out[5] = a[5] * b;\n\t    out[6] = a[6] * b;\n\t    out[7] = a[7] * b;\n\t    out[8] = a[8] * b;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n\t *\n\t * @param {mat3} out the receiving vector\n\t * @param {mat3} a the first operand\n\t * @param {mat3} b the second operand\n\t * @param {Number} scale the amount to scale b's elements by before adding\n\t * @returns {mat3} out\n\t */\n\tmat3.multiplyScalarAndAdd = function(out, a, b, scale) {\n\t    out[0] = a[0] + (b[0] * scale);\n\t    out[1] = a[1] + (b[1] * scale);\n\t    out[2] = a[2] + (b[2] * scale);\n\t    out[3] = a[3] + (b[3] * scale);\n\t    out[4] = a[4] + (b[4] * scale);\n\t    out[5] = a[5] + (b[5] * scale);\n\t    out[6] = a[6] + (b[6] * scale);\n\t    out[7] = a[7] + (b[7] * scale);\n\t    out[8] = a[8] + (b[8] * scale);\n\t    return out;\n\t};\n\t\n\t/*\n\t * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n\t *\n\t * @param {mat3} a The first matrix.\n\t * @param {mat3} b The second matrix.\n\t * @returns {Boolean} True if the matrices are equal, false otherwise.\n\t */\n\tmat3.exactEquals = function (a, b) {\n\t    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && \n\t           a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n\t           a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n\t};\n\t\n\t/**\n\t * Returns whether or not the matrices have approximately the same elements in the same position.\n\t *\n\t * @param {mat3} a The first matrix.\n\t * @param {mat3} b The second matrix.\n\t * @returns {Boolean} True if the matrices are equal, false otherwise.\n\t */\n\tmat3.equals = function (a, b) {\n\t    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n\t    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = a[6], b7 = b[7], b8 = b[8];\n\t    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n\t            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n\t            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n\t            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n\t            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n\t            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n\t            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n\t            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n\t            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n\t};\n\t\n\t\n\tmodule.exports = mat3;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\t\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\t\n\tThe above copyright notice and this permission notice shall be included in\n\tall copies or substantial portions of the Software.\n\t\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\tTHE SOFTWARE. */\n\t\n\tvar glMatrix = __webpack_require__(1);\n\t\n\t/**\n\t * @class 3 Dimensional Vector\n\t * @name vec3\n\t */\n\tvar vec3 = {};\n\t\n\t/**\n\t * Creates a new, empty vec3\n\t *\n\t * @returns {vec3} a new 3D vector\n\t */\n\tvec3.create = function() {\n\t    var out = new glMatrix.ARRAY_TYPE(3);\n\t    out[0] = 0;\n\t    out[1] = 0;\n\t    out[2] = 0;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Creates a new vec3 initialized with values from an existing vector\n\t *\n\t * @param {vec3} a vector to clone\n\t * @returns {vec3} a new 3D vector\n\t */\n\tvec3.clone = function(a) {\n\t    var out = new glMatrix.ARRAY_TYPE(3);\n\t    out[0] = a[0];\n\t    out[1] = a[1];\n\t    out[2] = a[2];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Creates a new vec3 initialized with the given values\n\t *\n\t * @param {Number} x X component\n\t * @param {Number} y Y component\n\t * @param {Number} z Z component\n\t * @returns {vec3} a new 3D vector\n\t */\n\tvec3.fromValues = function(x, y, z) {\n\t    var out = new glMatrix.ARRAY_TYPE(3);\n\t    out[0] = x;\n\t    out[1] = y;\n\t    out[2] = z;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Copy the values from one vec3 to another\n\t *\n\t * @param {vec3} out the receiving vector\n\t * @param {vec3} a the source vector\n\t * @returns {vec3} out\n\t */\n\tvec3.copy = function(out, a) {\n\t    out[0] = a[0];\n\t    out[1] = a[1];\n\t    out[2] = a[2];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Set the components of a vec3 to the given values\n\t *\n\t * @param {vec3} out the receiving vector\n\t * @param {Number} x X component\n\t * @param {Number} y Y component\n\t * @param {Number} z Z component\n\t * @returns {vec3} out\n\t */\n\tvec3.set = function(out, x, y, z) {\n\t    out[0] = x;\n\t    out[1] = y;\n\t    out[2] = z;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Adds two vec3's\n\t *\n\t * @param {vec3} out the receiving vector\n\t * @param {vec3} a the first operand\n\t * @param {vec3} b the second operand\n\t * @returns {vec3} out\n\t */\n\tvec3.add = function(out, a, b) {\n\t    out[0] = a[0] + b[0];\n\t    out[1] = a[1] + b[1];\n\t    out[2] = a[2] + b[2];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Subtracts vector b from vector a\n\t *\n\t * @param {vec3} out the receiving vector\n\t * @param {vec3} a the first operand\n\t * @param {vec3} b the second operand\n\t * @returns {vec3} out\n\t */\n\tvec3.subtract = function(out, a, b) {\n\t    out[0] = a[0] - b[0];\n\t    out[1] = a[1] - b[1];\n\t    out[2] = a[2] - b[2];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Alias for {@link vec3.subtract}\n\t * @function\n\t */\n\tvec3.sub = vec3.subtract;\n\t\n\t/**\n\t * Multiplies two vec3's\n\t *\n\t * @param {vec3} out the receiving vector\n\t * @param {vec3} a the first operand\n\t * @param {vec3} b the second operand\n\t * @returns {vec3} out\n\t */\n\tvec3.multiply = function(out, a, b) {\n\t    out[0] = a[0] * b[0];\n\t    out[1] = a[1] * b[1];\n\t    out[2] = a[2] * b[2];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Alias for {@link vec3.multiply}\n\t * @function\n\t */\n\tvec3.mul = vec3.multiply;\n\t\n\t/**\n\t * Divides two vec3's\n\t *\n\t * @param {vec3} out the receiving vector\n\t * @param {vec3} a the first operand\n\t * @param {vec3} b the second operand\n\t * @returns {vec3} out\n\t */\n\tvec3.divide = function(out, a, b) {\n\t    out[0] = a[0] / b[0];\n\t    out[1] = a[1] / b[1];\n\t    out[2] = a[2] / b[2];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Alias for {@link vec3.divide}\n\t * @function\n\t */\n\tvec3.div = vec3.divide;\n\t\n\t/**\n\t * Math.ceil the components of a vec3\n\t *\n\t * @param {vec3} out the receiving vector\n\t * @param {vec3} a vector to ceil\n\t * @returns {vec3} out\n\t */\n\tvec3.ceil = function (out, a) {\n\t    out[0] = Math.ceil(a[0]);\n\t    out[1] = Math.ceil(a[1]);\n\t    out[2] = Math.ceil(a[2]);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Math.floor the components of a vec3\n\t *\n\t * @param {vec3} out the receiving vector\n\t * @param {vec3} a vector to floor\n\t * @returns {vec3} out\n\t */\n\tvec3.floor = function (out, a) {\n\t    out[0] = Math.floor(a[0]);\n\t    out[1] = Math.floor(a[1]);\n\t    out[2] = Math.floor(a[2]);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Returns the minimum of two vec3's\n\t *\n\t * @param {vec3} out the receiving vector\n\t * @param {vec3} a the first operand\n\t * @param {vec3} b the second operand\n\t * @returns {vec3} out\n\t */\n\tvec3.min = function(out, a, b) {\n\t    out[0] = Math.min(a[0], b[0]);\n\t    out[1] = Math.min(a[1], b[1]);\n\t    out[2] = Math.min(a[2], b[2]);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Returns the maximum of two vec3's\n\t *\n\t * @param {vec3} out the receiving vector\n\t * @param {vec3} a the first operand\n\t * @param {vec3} b the second operand\n\t * @returns {vec3} out\n\t */\n\tvec3.max = function(out, a, b) {\n\t    out[0] = Math.max(a[0], b[0]);\n\t    out[1] = Math.max(a[1], b[1]);\n\t    out[2] = Math.max(a[2], b[2]);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Math.round the components of a vec3\n\t *\n\t * @param {vec3} out the receiving vector\n\t * @param {vec3} a vector to round\n\t * @returns {vec3} out\n\t */\n\tvec3.round = function (out, a) {\n\t    out[0] = Math.round(a[0]);\n\t    out[1] = Math.round(a[1]);\n\t    out[2] = Math.round(a[2]);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Scales a vec3 by a scalar number\n\t *\n\t * @param {vec3} out the receiving vector\n\t * @param {vec3} a the vector to scale\n\t * @param {Number} b amount to scale the vector by\n\t * @returns {vec3} out\n\t */\n\tvec3.scale = function(out, a, b) {\n\t    out[0] = a[0] * b;\n\t    out[1] = a[1] * b;\n\t    out[2] = a[2] * b;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Adds two vec3's after scaling the second operand by a scalar value\n\t *\n\t * @param {vec3} out the receiving vector\n\t * @param {vec3} a the first operand\n\t * @param {vec3} b the second operand\n\t * @param {Number} scale the amount to scale b by before adding\n\t * @returns {vec3} out\n\t */\n\tvec3.scaleAndAdd = function(out, a, b, scale) {\n\t    out[0] = a[0] + (b[0] * scale);\n\t    out[1] = a[1] + (b[1] * scale);\n\t    out[2] = a[2] + (b[2] * scale);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Calculates the euclidian distance between two vec3's\n\t *\n\t * @param {vec3} a the first operand\n\t * @param {vec3} b the second operand\n\t * @returns {Number} distance between a and b\n\t */\n\tvec3.distance = function(a, b) {\n\t    var x = b[0] - a[0],\n\t        y = b[1] - a[1],\n\t        z = b[2] - a[2];\n\t    return Math.sqrt(x*x + y*y + z*z);\n\t};\n\t\n\t/**\n\t * Alias for {@link vec3.distance}\n\t * @function\n\t */\n\tvec3.dist = vec3.distance;\n\t\n\t/**\n\t * Calculates the squared euclidian distance between two vec3's\n\t *\n\t * @param {vec3} a the first operand\n\t * @param {vec3} b the second operand\n\t * @returns {Number} squared distance between a and b\n\t */\n\tvec3.squaredDistance = function(a, b) {\n\t    var x = b[0] - a[0],\n\t        y = b[1] - a[1],\n\t        z = b[2] - a[2];\n\t    return x*x + y*y + z*z;\n\t};\n\t\n\t/**\n\t * Alias for {@link vec3.squaredDistance}\n\t * @function\n\t */\n\tvec3.sqrDist = vec3.squaredDistance;\n\t\n\t/**\n\t * Calculates the length of a vec3\n\t *\n\t * @param {vec3} a vector to calculate length of\n\t * @returns {Number} length of a\n\t */\n\tvec3.length = function (a) {\n\t    var x = a[0],\n\t        y = a[1],\n\t        z = a[2];\n\t    return Math.sqrt(x*x + y*y + z*z);\n\t};\n\t\n\t/**\n\t * Alias for {@link vec3.length}\n\t * @function\n\t */\n\tvec3.len = vec3.length;\n\t\n\t/**\n\t * Calculates the squared length of a vec3\n\t *\n\t * @param {vec3} a vector to calculate squared length of\n\t * @returns {Number} squared length of a\n\t */\n\tvec3.squaredLength = function (a) {\n\t    var x = a[0],\n\t        y = a[1],\n\t        z = a[2];\n\t    return x*x + y*y + z*z;\n\t};\n\t\n\t/**\n\t * Alias for {@link vec3.squaredLength}\n\t * @function\n\t */\n\tvec3.sqrLen = vec3.squaredLength;\n\t\n\t/**\n\t * Negates the components of a vec3\n\t *\n\t * @param {vec3} out the receiving vector\n\t * @param {vec3} a vector to negate\n\t * @returns {vec3} out\n\t */\n\tvec3.negate = function(out, a) {\n\t    out[0] = -a[0];\n\t    out[1] = -a[1];\n\t    out[2] = -a[2];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Returns the inverse of the components of a vec3\n\t *\n\t * @param {vec3} out the receiving vector\n\t * @param {vec3} a vector to invert\n\t * @returns {vec3} out\n\t */\n\tvec3.inverse = function(out, a) {\n\t  out[0] = 1.0 / a[0];\n\t  out[1] = 1.0 / a[1];\n\t  out[2] = 1.0 / a[2];\n\t  return out;\n\t};\n\t\n\t/**\n\t * Normalize a vec3\n\t *\n\t * @param {vec3} out the receiving vector\n\t * @param {vec3} a vector to normalize\n\t * @returns {vec3} out\n\t */\n\tvec3.normalize = function(out, a) {\n\t    var x = a[0],\n\t        y = a[1],\n\t        z = a[2];\n\t    var len = x*x + y*y + z*z;\n\t    if (len > 0) {\n\t        //TODO: evaluate use of glm_invsqrt here?\n\t        len = 1 / Math.sqrt(len);\n\t        out[0] = a[0] * len;\n\t        out[1] = a[1] * len;\n\t        out[2] = a[2] * len;\n\t    }\n\t    return out;\n\t};\n\t\n\t/**\n\t * Calculates the dot product of two vec3's\n\t *\n\t * @param {vec3} a the first operand\n\t * @param {vec3} b the second operand\n\t * @returns {Number} dot product of a and b\n\t */\n\tvec3.dot = function (a, b) {\n\t    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n\t};\n\t\n\t/**\n\t * Computes the cross product of two vec3's\n\t *\n\t * @param {vec3} out the receiving vector\n\t * @param {vec3} a the first operand\n\t * @param {vec3} b the second operand\n\t * @returns {vec3} out\n\t */\n\tvec3.cross = function(out, a, b) {\n\t    var ax = a[0], ay = a[1], az = a[2],\n\t        bx = b[0], by = b[1], bz = b[2];\n\t\n\t    out[0] = ay * bz - az * by;\n\t    out[1] = az * bx - ax * bz;\n\t    out[2] = ax * by - ay * bx;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Performs a linear interpolation between two vec3's\n\t *\n\t * @param {vec3} out the receiving vector\n\t * @param {vec3} a the first operand\n\t * @param {vec3} b the second operand\n\t * @param {Number} t interpolation amount between the two inputs\n\t * @returns {vec3} out\n\t */\n\tvec3.lerp = function (out, a, b, t) {\n\t    var ax = a[0],\n\t        ay = a[1],\n\t        az = a[2];\n\t    out[0] = ax + t * (b[0] - ax);\n\t    out[1] = ay + t * (b[1] - ay);\n\t    out[2] = az + t * (b[2] - az);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Performs a hermite interpolation with two control points\n\t *\n\t * @param {vec3} out the receiving vector\n\t * @param {vec3} a the first operand\n\t * @param {vec3} b the second operand\n\t * @param {vec3} c the third operand\n\t * @param {vec3} d the fourth operand\n\t * @param {Number} t interpolation amount between the two inputs\n\t * @returns {vec3} out\n\t */\n\tvec3.hermite = function (out, a, b, c, d, t) {\n\t  var factorTimes2 = t * t,\n\t      factor1 = factorTimes2 * (2 * t - 3) + 1,\n\t      factor2 = factorTimes2 * (t - 2) + t,\n\t      factor3 = factorTimes2 * (t - 1),\n\t      factor4 = factorTimes2 * (3 - 2 * t);\n\t  \n\t  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n\t  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n\t  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\t  \n\t  return out;\n\t};\n\t\n\t/**\n\t * Performs a bezier interpolation with two control points\n\t *\n\t * @param {vec3} out the receiving vector\n\t * @param {vec3} a the first operand\n\t * @param {vec3} b the second operand\n\t * @param {vec3} c the third operand\n\t * @param {vec3} d the fourth operand\n\t * @param {Number} t interpolation amount between the two inputs\n\t * @returns {vec3} out\n\t */\n\tvec3.bezier = function (out, a, b, c, d, t) {\n\t  var inverseFactor = 1 - t,\n\t      inverseFactorTimesTwo = inverseFactor * inverseFactor,\n\t      factorTimes2 = t * t,\n\t      factor1 = inverseFactorTimesTwo * inverseFactor,\n\t      factor2 = 3 * t * inverseFactorTimesTwo,\n\t      factor3 = 3 * factorTimes2 * inverseFactor,\n\t      factor4 = factorTimes2 * t;\n\t  \n\t  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n\t  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n\t  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\t  \n\t  return out;\n\t};\n\t\n\t/**\n\t * Generates a random vector with the given scale\n\t *\n\t * @param {vec3} out the receiving vector\n\t * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n\t * @returns {vec3} out\n\t */\n\tvec3.random = function (out, scale) {\n\t    scale = scale || 1.0;\n\t\n\t    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n\t    var z = (glMatrix.RANDOM() * 2.0) - 1.0;\n\t    var zScale = Math.sqrt(1.0-z*z) * scale;\n\t\n\t    out[0] = Math.cos(r) * zScale;\n\t    out[1] = Math.sin(r) * zScale;\n\t    out[2] = z * scale;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Transforms the vec3 with a mat4.\n\t * 4th vector component is implicitly '1'\n\t *\n\t * @param {vec3} out the receiving vector\n\t * @param {vec3} a the vector to transform\n\t * @param {mat4} m matrix to transform with\n\t * @returns {vec3} out\n\t */\n\tvec3.transformMat4 = function(out, a, m) {\n\t    var x = a[0], y = a[1], z = a[2],\n\t        w = m[3] * x + m[7] * y + m[11] * z + m[15];\n\t    w = w || 1.0;\n\t    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n\t    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n\t    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Transforms the vec3 with a mat3.\n\t *\n\t * @param {vec3} out the receiving vector\n\t * @param {vec3} a the vector to transform\n\t * @param {mat4} m the 3x3 matrix to transform with\n\t * @returns {vec3} out\n\t */\n\tvec3.transformMat3 = function(out, a, m) {\n\t    var x = a[0], y = a[1], z = a[2];\n\t    out[0] = x * m[0] + y * m[3] + z * m[6];\n\t    out[1] = x * m[1] + y * m[4] + z * m[7];\n\t    out[2] = x * m[2] + y * m[5] + z * m[8];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Transforms the vec3 with a quat\n\t *\n\t * @param {vec3} out the receiving vector\n\t * @param {vec3} a the vector to transform\n\t * @param {quat} q quaternion to transform with\n\t * @returns {vec3} out\n\t */\n\tvec3.transformQuat = function(out, a, q) {\n\t    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n\t\n\t    var x = a[0], y = a[1], z = a[2],\n\t        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\t\n\t        // calculate quat * vec\n\t        ix = qw * x + qy * z - qz * y,\n\t        iy = qw * y + qz * x - qx * z,\n\t        iz = qw * z + qx * y - qy * x,\n\t        iw = -qx * x - qy * y - qz * z;\n\t\n\t    // calculate result * inverse quat\n\t    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n\t    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n\t    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Rotate a 3D vector around the x-axis\n\t * @param {vec3} out The receiving vec3\n\t * @param {vec3} a The vec3 point to rotate\n\t * @param {vec3} b The origin of the rotation\n\t * @param {Number} c The angle of rotation\n\t * @returns {vec3} out\n\t */\n\tvec3.rotateX = function(out, a, b, c){\n\t   var p = [], r=[];\n\t\t  //Translate point to the origin\n\t\t  p[0] = a[0] - b[0];\n\t\t  p[1] = a[1] - b[1];\n\t  \tp[2] = a[2] - b[2];\n\t\n\t\t  //perform rotation\n\t\t  r[0] = p[0];\n\t\t  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n\t\t  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\t\n\t\t  //translate to correct position\n\t\t  out[0] = r[0] + b[0];\n\t\t  out[1] = r[1] + b[1];\n\t\t  out[2] = r[2] + b[2];\n\t\n\t  \treturn out;\n\t};\n\t\n\t/**\n\t * Rotate a 3D vector around the y-axis\n\t * @param {vec3} out The receiving vec3\n\t * @param {vec3} a The vec3 point to rotate\n\t * @param {vec3} b The origin of the rotation\n\t * @param {Number} c The angle of rotation\n\t * @returns {vec3} out\n\t */\n\tvec3.rotateY = function(out, a, b, c){\n\t  \tvar p = [], r=[];\n\t  \t//Translate point to the origin\n\t  \tp[0] = a[0] - b[0];\n\t  \tp[1] = a[1] - b[1];\n\t  \tp[2] = a[2] - b[2];\n\t  \n\t  \t//perform rotation\n\t  \tr[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n\t  \tr[1] = p[1];\n\t  \tr[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n\t  \n\t  \t//translate to correct position\n\t  \tout[0] = r[0] + b[0];\n\t  \tout[1] = r[1] + b[1];\n\t  \tout[2] = r[2] + b[2];\n\t  \n\t  \treturn out;\n\t};\n\t\n\t/**\n\t * Rotate a 3D vector around the z-axis\n\t * @param {vec3} out The receiving vec3\n\t * @param {vec3} a The vec3 point to rotate\n\t * @param {vec3} b The origin of the rotation\n\t * @param {Number} c The angle of rotation\n\t * @returns {vec3} out\n\t */\n\tvec3.rotateZ = function(out, a, b, c){\n\t  \tvar p = [], r=[];\n\t  \t//Translate point to the origin\n\t  \tp[0] = a[0] - b[0];\n\t  \tp[1] = a[1] - b[1];\n\t  \tp[2] = a[2] - b[2];\n\t  \n\t  \t//perform rotation\n\t  \tr[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n\t  \tr[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n\t  \tr[2] = p[2];\n\t  \n\t  \t//translate to correct position\n\t  \tout[0] = r[0] + b[0];\n\t  \tout[1] = r[1] + b[1];\n\t  \tout[2] = r[2] + b[2];\n\t  \n\t  \treturn out;\n\t};\n\t\n\t/**\n\t * Perform some operation over an array of vec3s.\n\t *\n\t * @param {Array} a the array of vectors to iterate over\n\t * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n\t * @param {Number} offset Number of elements to skip at the beginning of the array\n\t * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n\t * @param {Function} fn Function to call for each vector in the array\n\t * @param {Object} [arg] additional argument to pass to fn\n\t * @returns {Array} a\n\t * @function\n\t */\n\tvec3.forEach = (function() {\n\t    var vec = vec3.create();\n\t\n\t    return function(a, stride, offset, count, fn, arg) {\n\t        var i, l;\n\t        if(!stride) {\n\t            stride = 3;\n\t        }\n\t\n\t        if(!offset) {\n\t            offset = 0;\n\t        }\n\t        \n\t        if(count) {\n\t            l = Math.min((count * stride) + offset, a.length);\n\t        } else {\n\t            l = a.length;\n\t        }\n\t\n\t        for(i = offset; i < l; i += stride) {\n\t            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n\t            fn(vec, vec, arg);\n\t            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n\t        }\n\t        \n\t        return a;\n\t    };\n\t})();\n\t\n\t/**\n\t * Get the angle between two 3D vectors\n\t * @param {vec3} a The first operand\n\t * @param {vec3} b The second operand\n\t * @returns {Number} The angle in radians\n\t */\n\tvec3.angle = function(a, b) {\n\t   \n\t    var tempA = vec3.fromValues(a[0], a[1], a[2]);\n\t    var tempB = vec3.fromValues(b[0], b[1], b[2]);\n\t \n\t    vec3.normalize(tempA, tempA);\n\t    vec3.normalize(tempB, tempB);\n\t \n\t    var cosine = vec3.dot(tempA, tempB);\n\t\n\t    if(cosine > 1.0){\n\t        return 0;\n\t    } else {\n\t        return Math.acos(cosine);\n\t    }     \n\t};\n\t\n\t/**\n\t * Returns a string representation of a vector\n\t *\n\t * @param {vec3} vec vector to represent as a string\n\t * @returns {String} string representation of the vector\n\t */\n\tvec3.str = function (a) {\n\t    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n\t};\n\t\n\t/**\n\t * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n\t *\n\t * @param {vec3} a The first vector.\n\t * @param {vec3} b The second vector.\n\t * @returns {Boolean} True if the vectors are equal, false otherwise.\n\t */\n\tvec3.exactEquals = function (a, b) {\n\t    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n\t};\n\t\n\t/**\n\t * Returns whether or not the vectors have approximately the same elements in the same position.\n\t *\n\t * @param {vec3} a The first vector.\n\t * @param {vec3} b The second vector.\n\t * @returns {Boolean} True if the vectors are equal, false otherwise.\n\t */\n\tvec3.equals = function (a, b) {\n\t    var a0 = a[0], a1 = a[1], a2 = a[2];\n\t    var b0 = b[0], b1 = b[1], b2 = b[2];\n\t    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n\t            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n\t            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n\t};\n\t\n\tmodule.exports = vec3;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\t\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\t\n\tThe above copyright notice and this permission notice shall be included in\n\tall copies or substantial portions of the Software.\n\t\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\tTHE SOFTWARE. */\n\t\n\tvar glMatrix = __webpack_require__(1);\n\t\n\t/**\n\t * @class 4 Dimensional Vector\n\t * @name vec4\n\t */\n\tvar vec4 = {};\n\t\n\t/**\n\t * Creates a new, empty vec4\n\t *\n\t * @returns {vec4} a new 4D vector\n\t */\n\tvec4.create = function() {\n\t    var out = new glMatrix.ARRAY_TYPE(4);\n\t    out[0] = 0;\n\t    out[1] = 0;\n\t    out[2] = 0;\n\t    out[3] = 0;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Creates a new vec4 initialized with values from an existing vector\n\t *\n\t * @param {vec4} a vector to clone\n\t * @returns {vec4} a new 4D vector\n\t */\n\tvec4.clone = function(a) {\n\t    var out = new glMatrix.ARRAY_TYPE(4);\n\t    out[0] = a[0];\n\t    out[1] = a[1];\n\t    out[2] = a[2];\n\t    out[3] = a[3];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Creates a new vec4 initialized with the given values\n\t *\n\t * @param {Number} x X component\n\t * @param {Number} y Y component\n\t * @param {Number} z Z component\n\t * @param {Number} w W component\n\t * @returns {vec4} a new 4D vector\n\t */\n\tvec4.fromValues = function(x, y, z, w) {\n\t    var out = new glMatrix.ARRAY_TYPE(4);\n\t    out[0] = x;\n\t    out[1] = y;\n\t    out[2] = z;\n\t    out[3] = w;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Copy the values from one vec4 to another\n\t *\n\t * @param {vec4} out the receiving vector\n\t * @param {vec4} a the source vector\n\t * @returns {vec4} out\n\t */\n\tvec4.copy = function(out, a) {\n\t    out[0] = a[0];\n\t    out[1] = a[1];\n\t    out[2] = a[2];\n\t    out[3] = a[3];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Set the components of a vec4 to the given values\n\t *\n\t * @param {vec4} out the receiving vector\n\t * @param {Number} x X component\n\t * @param {Number} y Y component\n\t * @param {Number} z Z component\n\t * @param {Number} w W component\n\t * @returns {vec4} out\n\t */\n\tvec4.set = function(out, x, y, z, w) {\n\t    out[0] = x;\n\t    out[1] = y;\n\t    out[2] = z;\n\t    out[3] = w;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Adds two vec4's\n\t *\n\t * @param {vec4} out the receiving vector\n\t * @param {vec4} a the first operand\n\t * @param {vec4} b the second operand\n\t * @returns {vec4} out\n\t */\n\tvec4.add = function(out, a, b) {\n\t    out[0] = a[0] + b[0];\n\t    out[1] = a[1] + b[1];\n\t    out[2] = a[2] + b[2];\n\t    out[3] = a[3] + b[3];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Subtracts vector b from vector a\n\t *\n\t * @param {vec4} out the receiving vector\n\t * @param {vec4} a the first operand\n\t * @param {vec4} b the second operand\n\t * @returns {vec4} out\n\t */\n\tvec4.subtract = function(out, a, b) {\n\t    out[0] = a[0] - b[0];\n\t    out[1] = a[1] - b[1];\n\t    out[2] = a[2] - b[2];\n\t    out[3] = a[3] - b[3];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Alias for {@link vec4.subtract}\n\t * @function\n\t */\n\tvec4.sub = vec4.subtract;\n\t\n\t/**\n\t * Multiplies two vec4's\n\t *\n\t * @param {vec4} out the receiving vector\n\t * @param {vec4} a the first operand\n\t * @param {vec4} b the second operand\n\t * @returns {vec4} out\n\t */\n\tvec4.multiply = function(out, a, b) {\n\t    out[0] = a[0] * b[0];\n\t    out[1] = a[1] * b[1];\n\t    out[2] = a[2] * b[2];\n\t    out[3] = a[3] * b[3];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Alias for {@link vec4.multiply}\n\t * @function\n\t */\n\tvec4.mul = vec4.multiply;\n\t\n\t/**\n\t * Divides two vec4's\n\t *\n\t * @param {vec4} out the receiving vector\n\t * @param {vec4} a the first operand\n\t * @param {vec4} b the second operand\n\t * @returns {vec4} out\n\t */\n\tvec4.divide = function(out, a, b) {\n\t    out[0] = a[0] / b[0];\n\t    out[1] = a[1] / b[1];\n\t    out[2] = a[2] / b[2];\n\t    out[3] = a[3] / b[3];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Alias for {@link vec4.divide}\n\t * @function\n\t */\n\tvec4.div = vec4.divide;\n\t\n\t/**\n\t * Math.ceil the components of a vec4\n\t *\n\t * @param {vec4} out the receiving vector\n\t * @param {vec4} a vector to ceil\n\t * @returns {vec4} out\n\t */\n\tvec4.ceil = function (out, a) {\n\t    out[0] = Math.ceil(a[0]);\n\t    out[1] = Math.ceil(a[1]);\n\t    out[2] = Math.ceil(a[2]);\n\t    out[3] = Math.ceil(a[3]);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Math.floor the components of a vec4\n\t *\n\t * @param {vec4} out the receiving vector\n\t * @param {vec4} a vector to floor\n\t * @returns {vec4} out\n\t */\n\tvec4.floor = function (out, a) {\n\t    out[0] = Math.floor(a[0]);\n\t    out[1] = Math.floor(a[1]);\n\t    out[2] = Math.floor(a[2]);\n\t    out[3] = Math.floor(a[3]);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Returns the minimum of two vec4's\n\t *\n\t * @param {vec4} out the receiving vector\n\t * @param {vec4} a the first operand\n\t * @param {vec4} b the second operand\n\t * @returns {vec4} out\n\t */\n\tvec4.min = function(out, a, b) {\n\t    out[0] = Math.min(a[0], b[0]);\n\t    out[1] = Math.min(a[1], b[1]);\n\t    out[2] = Math.min(a[2], b[2]);\n\t    out[3] = Math.min(a[3], b[3]);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Returns the maximum of two vec4's\n\t *\n\t * @param {vec4} out the receiving vector\n\t * @param {vec4} a the first operand\n\t * @param {vec4} b the second operand\n\t * @returns {vec4} out\n\t */\n\tvec4.max = function(out, a, b) {\n\t    out[0] = Math.max(a[0], b[0]);\n\t    out[1] = Math.max(a[1], b[1]);\n\t    out[2] = Math.max(a[2], b[2]);\n\t    out[3] = Math.max(a[3], b[3]);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Math.round the components of a vec4\n\t *\n\t * @param {vec4} out the receiving vector\n\t * @param {vec4} a vector to round\n\t * @returns {vec4} out\n\t */\n\tvec4.round = function (out, a) {\n\t    out[0] = Math.round(a[0]);\n\t    out[1] = Math.round(a[1]);\n\t    out[2] = Math.round(a[2]);\n\t    out[3] = Math.round(a[3]);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Scales a vec4 by a scalar number\n\t *\n\t * @param {vec4} out the receiving vector\n\t * @param {vec4} a the vector to scale\n\t * @param {Number} b amount to scale the vector by\n\t * @returns {vec4} out\n\t */\n\tvec4.scale = function(out, a, b) {\n\t    out[0] = a[0] * b;\n\t    out[1] = a[1] * b;\n\t    out[2] = a[2] * b;\n\t    out[3] = a[3] * b;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Adds two vec4's after scaling the second operand by a scalar value\n\t *\n\t * @param {vec4} out the receiving vector\n\t * @param {vec4} a the first operand\n\t * @param {vec4} b the second operand\n\t * @param {Number} scale the amount to scale b by before adding\n\t * @returns {vec4} out\n\t */\n\tvec4.scaleAndAdd = function(out, a, b, scale) {\n\t    out[0] = a[0] + (b[0] * scale);\n\t    out[1] = a[1] + (b[1] * scale);\n\t    out[2] = a[2] + (b[2] * scale);\n\t    out[3] = a[3] + (b[3] * scale);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Calculates the euclidian distance between two vec4's\n\t *\n\t * @param {vec4} a the first operand\n\t * @param {vec4} b the second operand\n\t * @returns {Number} distance between a and b\n\t */\n\tvec4.distance = function(a, b) {\n\t    var x = b[0] - a[0],\n\t        y = b[1] - a[1],\n\t        z = b[2] - a[2],\n\t        w = b[3] - a[3];\n\t    return Math.sqrt(x*x + y*y + z*z + w*w);\n\t};\n\t\n\t/**\n\t * Alias for {@link vec4.distance}\n\t * @function\n\t */\n\tvec4.dist = vec4.distance;\n\t\n\t/**\n\t * Calculates the squared euclidian distance between two vec4's\n\t *\n\t * @param {vec4} a the first operand\n\t * @param {vec4} b the second operand\n\t * @returns {Number} squared distance between a and b\n\t */\n\tvec4.squaredDistance = function(a, b) {\n\t    var x = b[0] - a[0],\n\t        y = b[1] - a[1],\n\t        z = b[2] - a[2],\n\t        w = b[3] - a[3];\n\t    return x*x + y*y + z*z + w*w;\n\t};\n\t\n\t/**\n\t * Alias for {@link vec4.squaredDistance}\n\t * @function\n\t */\n\tvec4.sqrDist = vec4.squaredDistance;\n\t\n\t/**\n\t * Calculates the length of a vec4\n\t *\n\t * @param {vec4} a vector to calculate length of\n\t * @returns {Number} length of a\n\t */\n\tvec4.length = function (a) {\n\t    var x = a[0],\n\t        y = a[1],\n\t        z = a[2],\n\t        w = a[3];\n\t    return Math.sqrt(x*x + y*y + z*z + w*w);\n\t};\n\t\n\t/**\n\t * Alias for {@link vec4.length}\n\t * @function\n\t */\n\tvec4.len = vec4.length;\n\t\n\t/**\n\t * Calculates the squared length of a vec4\n\t *\n\t * @param {vec4} a vector to calculate squared length of\n\t * @returns {Number} squared length of a\n\t */\n\tvec4.squaredLength = function (a) {\n\t    var x = a[0],\n\t        y = a[1],\n\t        z = a[2],\n\t        w = a[3];\n\t    return x*x + y*y + z*z + w*w;\n\t};\n\t\n\t/**\n\t * Alias for {@link vec4.squaredLength}\n\t * @function\n\t */\n\tvec4.sqrLen = vec4.squaredLength;\n\t\n\t/**\n\t * Negates the components of a vec4\n\t *\n\t * @param {vec4} out the receiving vector\n\t * @param {vec4} a vector to negate\n\t * @returns {vec4} out\n\t */\n\tvec4.negate = function(out, a) {\n\t    out[0] = -a[0];\n\t    out[1] = -a[1];\n\t    out[2] = -a[2];\n\t    out[3] = -a[3];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Returns the inverse of the components of a vec4\n\t *\n\t * @param {vec4} out the receiving vector\n\t * @param {vec4} a vector to invert\n\t * @returns {vec4} out\n\t */\n\tvec4.inverse = function(out, a) {\n\t  out[0] = 1.0 / a[0];\n\t  out[1] = 1.0 / a[1];\n\t  out[2] = 1.0 / a[2];\n\t  out[3] = 1.0 / a[3];\n\t  return out;\n\t};\n\t\n\t/**\n\t * Normalize a vec4\n\t *\n\t * @param {vec4} out the receiving vector\n\t * @param {vec4} a vector to normalize\n\t * @returns {vec4} out\n\t */\n\tvec4.normalize = function(out, a) {\n\t    var x = a[0],\n\t        y = a[1],\n\t        z = a[2],\n\t        w = a[3];\n\t    var len = x*x + y*y + z*z + w*w;\n\t    if (len > 0) {\n\t        len = 1 / Math.sqrt(len);\n\t        out[0] = x * len;\n\t        out[1] = y * len;\n\t        out[2] = z * len;\n\t        out[3] = w * len;\n\t    }\n\t    return out;\n\t};\n\t\n\t/**\n\t * Calculates the dot product of two vec4's\n\t *\n\t * @param {vec4} a the first operand\n\t * @param {vec4} b the second operand\n\t * @returns {Number} dot product of a and b\n\t */\n\tvec4.dot = function (a, b) {\n\t    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n\t};\n\t\n\t/**\n\t * Performs a linear interpolation between two vec4's\n\t *\n\t * @param {vec4} out the receiving vector\n\t * @param {vec4} a the first operand\n\t * @param {vec4} b the second operand\n\t * @param {Number} t interpolation amount between the two inputs\n\t * @returns {vec4} out\n\t */\n\tvec4.lerp = function (out, a, b, t) {\n\t    var ax = a[0],\n\t        ay = a[1],\n\t        az = a[2],\n\t        aw = a[3];\n\t    out[0] = ax + t * (b[0] - ax);\n\t    out[1] = ay + t * (b[1] - ay);\n\t    out[2] = az + t * (b[2] - az);\n\t    out[3] = aw + t * (b[3] - aw);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Generates a random vector with the given scale\n\t *\n\t * @param {vec4} out the receiving vector\n\t * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n\t * @returns {vec4} out\n\t */\n\tvec4.random = function (out, scale) {\n\t    scale = scale || 1.0;\n\t\n\t    //TODO: This is a pretty awful way of doing this. Find something better.\n\t    out[0] = glMatrix.RANDOM();\n\t    out[1] = glMatrix.RANDOM();\n\t    out[2] = glMatrix.RANDOM();\n\t    out[3] = glMatrix.RANDOM();\n\t    vec4.normalize(out, out);\n\t    vec4.scale(out, out, scale);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Transforms the vec4 with a mat4.\n\t *\n\t * @param {vec4} out the receiving vector\n\t * @param {vec4} a the vector to transform\n\t * @param {mat4} m matrix to transform with\n\t * @returns {vec4} out\n\t */\n\tvec4.transformMat4 = function(out, a, m) {\n\t    var x = a[0], y = a[1], z = a[2], w = a[3];\n\t    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n\t    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n\t    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n\t    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Transforms the vec4 with a quat\n\t *\n\t * @param {vec4} out the receiving vector\n\t * @param {vec4} a the vector to transform\n\t * @param {quat} q quaternion to transform with\n\t * @returns {vec4} out\n\t */\n\tvec4.transformQuat = function(out, a, q) {\n\t    var x = a[0], y = a[1], z = a[2],\n\t        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\t\n\t        // calculate quat * vec\n\t        ix = qw * x + qy * z - qz * y,\n\t        iy = qw * y + qz * x - qx * z,\n\t        iz = qw * z + qx * y - qy * x,\n\t        iw = -qx * x - qy * y - qz * z;\n\t\n\t    // calculate result * inverse quat\n\t    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n\t    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n\t    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\t    out[3] = a[3];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Perform some operation over an array of vec4s.\n\t *\n\t * @param {Array} a the array of vectors to iterate over\n\t * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n\t * @param {Number} offset Number of elements to skip at the beginning of the array\n\t * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n\t * @param {Function} fn Function to call for each vector in the array\n\t * @param {Object} [arg] additional argument to pass to fn\n\t * @returns {Array} a\n\t * @function\n\t */\n\tvec4.forEach = (function() {\n\t    var vec = vec4.create();\n\t\n\t    return function(a, stride, offset, count, fn, arg) {\n\t        var i, l;\n\t        if(!stride) {\n\t            stride = 4;\n\t        }\n\t\n\t        if(!offset) {\n\t            offset = 0;\n\t        }\n\t        \n\t        if(count) {\n\t            l = Math.min((count * stride) + offset, a.length);\n\t        } else {\n\t            l = a.length;\n\t        }\n\t\n\t        for(i = offset; i < l; i += stride) {\n\t            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n\t            fn(vec, vec, arg);\n\t            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n\t        }\n\t        \n\t        return a;\n\t    };\n\t})();\n\t\n\t/**\n\t * Returns a string representation of a vector\n\t *\n\t * @param {vec4} vec vector to represent as a string\n\t * @returns {String} string representation of the vector\n\t */\n\tvec4.str = function (a) {\n\t    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n\t};\n\t\n\t/**\n\t * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n\t *\n\t * @param {vec4} a The first vector.\n\t * @param {vec4} b The second vector.\n\t * @returns {Boolean} True if the vectors are equal, false otherwise.\n\t */\n\tvec4.exactEquals = function (a, b) {\n\t    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n\t};\n\t\n\t/**\n\t * Returns whether or not the vectors have approximately the same elements in the same position.\n\t *\n\t * @param {vec4} a The first vector.\n\t * @param {vec4} b The second vector.\n\t * @returns {Boolean} True if the vectors are equal, false otherwise.\n\t */\n\tvec4.equals = function (a, b) {\n\t    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n\t    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n\t    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n\t            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n\t            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n\t            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n\t};\n\t\n\tmodule.exports = vec4;\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\n\t/*\n\t * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n\t * http://code.google.com/p/poly2tri/\n\t * \n\t * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n\t * https://github.com/r3mi/poly2tri.js\n\t * \n\t * All rights reserved.\n\t * \n\t * Distributed under the 3-clause BSD License, see LICENSE.txt\n\t */\n\t\n\t/* jshint maxcomplexity:11 */\n\t\n\t\"use strict\";\n\t\n\t\n\t/*\n\t * Note\n\t * ====\n\t * the structure of this JavaScript version of poly2tri intentionally follows\n\t * as closely as possible the structure of the reference C++ version, to make it \n\t * easier to keep the 2 versions in sync.\n\t */\n\t\n\t\n\t// -------------------------------------------------------------------------Node\n\t\n\t/**\n\t * Advancing front node\n\t * @constructor\n\t * @private\n\t * @struct\n\t * @param {!XY} p - Point\n\t * @param {Triangle=} t triangle (optional)\n\t */\n\tvar Node = function(p, t) {\n\t    /** @type {XY} */\n\t    this.point = p;\n\t\n\t    /** @type {Triangle|null} */\n\t    this.triangle = t || null;\n\t\n\t    /** @type {Node|null} */\n\t    this.next = null;\n\t    /** @type {Node|null} */\n\t    this.prev = null;\n\t\n\t    /** @type {number} */\n\t    this.value = p.x;\n\t};\n\t\n\t// ---------------------------------------------------------------AdvancingFront\n\t/**\n\t * @constructor\n\t * @private\n\t * @struct\n\t * @param {Node} head\n\t * @param {Node} tail\n\t */\n\tvar AdvancingFront = function(head, tail) {\n\t    /** @type {Node} */\n\t    this.head_ = head;\n\t    /** @type {Node} */\n\t    this.tail_ = tail;\n\t    /** @type {Node} */\n\t    this.search_node_ = head;\n\t};\n\t\n\t/** @return {Node} */\n\tAdvancingFront.prototype.head = function() {\n\t    return this.head_;\n\t};\n\t\n\t/** @param {Node} node */\n\tAdvancingFront.prototype.setHead = function(node) {\n\t    this.head_ = node;\n\t};\n\t\n\t/** @return {Node} */\n\tAdvancingFront.prototype.tail = function() {\n\t    return this.tail_;\n\t};\n\t\n\t/** @param {Node} node */\n\tAdvancingFront.prototype.setTail = function(node) {\n\t    this.tail_ = node;\n\t};\n\t\n\t/** @return {Node} */\n\tAdvancingFront.prototype.search = function() {\n\t    return this.search_node_;\n\t};\n\t\n\t/** @param {Node} node */\n\tAdvancingFront.prototype.setSearch = function(node) {\n\t    this.search_node_ = node;\n\t};\n\t\n\t/** @return {Node} */\n\tAdvancingFront.prototype.findSearchNode = function(/*x*/) {\n\t    // TODO: implement BST index\n\t    return this.search_node_;\n\t};\n\t\n\t/**\n\t * @param {number} x value\n\t * @return {Node}\n\t */\n\tAdvancingFront.prototype.locateNode = function(x) {\n\t    var node = this.search_node_;\n\t\n\t    /* jshint boss:true */\n\t    if (x < node.value) {\n\t        while (node = node.prev) {\n\t            if (x >= node.value) {\n\t                this.search_node_ = node;\n\t                return node;\n\t            }\n\t        }\n\t    } else {\n\t        while (node = node.next) {\n\t            if (x < node.value) {\n\t                this.search_node_ = node.prev;\n\t                return node.prev;\n\t            }\n\t        }\n\t    }\n\t    return null;\n\t};\n\t\n\t/**\n\t * @param {!XY} point - Point\n\t * @return {Node}\n\t */\n\tAdvancingFront.prototype.locatePoint = function(point) {\n\t    var px = point.x;\n\t    var node = this.findSearchNode(px);\n\t    var nx = node.point.x;\n\t\n\t    if (px === nx) {\n\t        // Here we are comparing point references, not values\n\t        if (point !== node.point) {\n\t            // We might have two nodes with same x value for a short time\n\t            if (point === node.prev.point) {\n\t                node = node.prev;\n\t            } else if (point === node.next.point) {\n\t                node = node.next;\n\t            } else {\n\t                throw new Error('poly2tri Invalid AdvancingFront.locatePoint() call');\n\t            }\n\t        }\n\t    } else if (px < nx) {\n\t        /* jshint boss:true */\n\t        while (node = node.prev) {\n\t            if (point === node.point) {\n\t                break;\n\t            }\n\t        }\n\t    } else {\n\t        while (node = node.next) {\n\t            if (point === node.point) {\n\t                break;\n\t            }\n\t        }\n\t    }\n\t\n\t    if (node) {\n\t        this.search_node_ = node;\n\t    }\n\t    return node;\n\t};\n\t\n\t\n\t// ----------------------------------------------------------------------Exports\n\t\n\tmodule.exports = AdvancingFront;\n\tmodule.exports.Node = Node;\n\t\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n\t * http://code.google.com/p/poly2tri/\n\t * \n\t * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n\t * https://github.com/r3mi/poly2tri.js\n\t * \n\t * All rights reserved.\n\t * \n\t * Distributed under the 3-clause BSD License, see LICENSE.txt\n\t */\n\t\n\t\"use strict\";\n\t\n\t/*\n\t * Class added in the JavaScript version (was not present in the c++ version)\n\t */\n\t\n\tvar xy = __webpack_require__(2);\n\t\n\t/**\n\t * Custom exception class to indicate invalid Point values\n\t * @constructor\n\t * @public\n\t * @extends Error\n\t * @struct\n\t * @param {string=} message - error message\n\t * @param {Array.<XY>=} points - invalid points\n\t */\n\tvar PointError = function(message, points) {\n\t    this.name = \"PointError\";\n\t    /**\n\t     * Invalid points\n\t     * @public\n\t     * @type {Array.<XY>}\n\t     */\n\t    this.points = points = points || [];\n\t    /**\n\t     * Error message\n\t     * @public\n\t     * @type {string}\n\t     */\n\t    this.message = message || \"Invalid Points!\";\n\t    for (var i = 0; i < points.length; i++) {\n\t        this.message += \" \" + xy.toString(points[i]);\n\t    }\n\t};\n\tPointError.prototype = new Error();\n\tPointError.prototype.constructor = PointError;\n\t\n\t\n\tmodule.exports = PointError;\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n\t * http://code.google.com/p/poly2tri/\n\t * \n\t * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n\t * https://github.com/r3mi/poly2tri.js\n\t *\n\t * All rights reserved.\n\t * \n\t * Distributed under the 3-clause BSD License, see LICENSE.txt\n\t */\n\t\n\t/* jshint maxcomplexity:10 */\n\t\n\t\"use strict\";\n\t\n\t\n\t/*\n\t * Note\n\t * ====\n\t * the structure of this JavaScript version of poly2tri intentionally follows\n\t * as closely as possible the structure of the reference C++ version, to make it \n\t * easier to keep the 2 versions in sync.\n\t */\n\t\n\tvar xy = __webpack_require__(2);\n\t\n\t\n\t// ---------------------------------------------------------------------Triangle\n\t/**\n\t * Triangle class.<br>\n\t * Triangle-based data structures are known to have better performance than\n\t * quad-edge structures.\n\t * See: J. Shewchuk, \"Triangle: Engineering a 2D Quality Mesh Generator and\n\t * Delaunay Triangulator\", \"Triangulations in CGAL\"\n\t *\n\t * @constructor\n\t * @struct\n\t * @param {!XY} pa  point object with {x,y}\n\t * @param {!XY} pb  point object with {x,y}\n\t * @param {!XY} pc  point object with {x,y}\n\t */\n\tvar Triangle = function(a, b, c) {\n\t    /**\n\t     * Triangle points\n\t     * @private\n\t     * @type {Array.<XY>}\n\t     */\n\t    this.points_ = [a, b, c];\n\t\n\t    /**\n\t     * Neighbor list\n\t     * @private\n\t     * @type {Array.<Triangle>}\n\t     */\n\t    this.neighbors_ = [null, null, null];\n\t\n\t    /**\n\t     * Has this triangle been marked as an interior triangle?\n\t     * @private\n\t     * @type {boolean}\n\t     */\n\t    this.interior_ = false;\n\t\n\t    /**\n\t     * Flags to determine if an edge is a Constrained edge\n\t     * @private\n\t     * @type {Array.<boolean>}\n\t     */\n\t    this.constrained_edge = [false, false, false];\n\t\n\t    /**\n\t     * Flags to determine if an edge is a Delauney edge\n\t     * @private\n\t     * @type {Array.<boolean>}\n\t     */\n\t    this.delaunay_edge = [false, false, false];\n\t};\n\t\n\tvar p2s = xy.toString;\n\t/**\n\t * For pretty printing ex. <code>\"[(5;42)(10;20)(21;30)]\"</code>.\n\t * @public\n\t * @return {string}\n\t */\n\tTriangle.prototype.toString = function() {\n\t    return (\"[\" + p2s(this.points_[0]) + p2s(this.points_[1]) + p2s(this.points_[2]) + \"]\");\n\t};\n\t\n\t/**\n\t * Get one vertice of the triangle.\n\t * The output triangles of a triangulation have vertices which are references\n\t * to the initial input points (not copies): any custom fields in the\n\t * initial points can be retrieved in the output triangles.\n\t * @example\n\t *      var contour = [{x:100, y:100, id:1}, {x:100, y:300, id:2}, {x:300, y:300, id:3}];\n\t *      var swctx = new poly2tri.SweepContext(contour);\n\t *      swctx.triangulate();\n\t *      var triangles = swctx.getTriangles();\n\t *      typeof triangles[0].getPoint(0).id\n\t *      // → \"number\"\n\t * @param {number} index - vertice index: 0, 1 or 2\n\t * @public\n\t * @returns {XY}\n\t */\n\tTriangle.prototype.getPoint = function(index) {\n\t    return this.points_[index];\n\t};\n\t\n\t/**\n\t * For backward compatibility\n\t * @function\n\t * @deprecated use {@linkcode Triangle#getPoint} instead\n\t */\n\tTriangle.prototype.GetPoint = Triangle.prototype.getPoint;\n\t\n\t/**\n\t * Get all 3 vertices of the triangle as an array\n\t * @public\n\t * @return {Array.<XY>}\n\t */\n\t// Method added in the JavaScript version (was not present in the c++ version)\n\tTriangle.prototype.getPoints = function() {\n\t    return this.points_;\n\t};\n\t\n\t/**\n\t * @private\n\t * @param {number} index\n\t * @returns {?Triangle}\n\t */\n\tTriangle.prototype.getNeighbor = function(index) {\n\t    return this.neighbors_[index];\n\t};\n\t\n\t/**\n\t * Test if this Triangle contains the Point object given as parameter as one of its vertices.\n\t * Only point references are compared, not values.\n\t * @public\n\t * @param {XY} point - point object with {x,y}\n\t * @return {boolean} <code>True</code> if the Point object is of the Triangle's vertices,\n\t *         <code>false</code> otherwise.\n\t */\n\tTriangle.prototype.containsPoint = function(point) {\n\t    var points = this.points_;\n\t    // Here we are comparing point references, not values\n\t    return (point === points[0] || point === points[1] || point === points[2]);\n\t};\n\t\n\t/**\n\t * Test if this Triangle contains the Edge object given as parameter as its\n\t * bounding edges. Only point references are compared, not values.\n\t * @private\n\t * @param {Edge} edge\n\t * @return {boolean} <code>True</code> if the Edge object is of the Triangle's bounding\n\t *         edges, <code>false</code> otherwise.\n\t */\n\tTriangle.prototype.containsEdge = function(edge) {\n\t    return this.containsPoint(edge.p) && this.containsPoint(edge.q);\n\t};\n\t\n\t/**\n\t * Test if this Triangle contains the two Point objects given as parameters among its vertices.\n\t * Only point references are compared, not values.\n\t * @param {XY} p1 - point object with {x,y}\n\t * @param {XY} p2 - point object with {x,y}\n\t * @return {boolean}\n\t */\n\tTriangle.prototype.containsPoints = function(p1, p2) {\n\t    return this.containsPoint(p1) && this.containsPoint(p2);\n\t};\n\t\n\t/**\n\t * Has this triangle been marked as an interior triangle?\n\t * @returns {boolean}\n\t */\n\tTriangle.prototype.isInterior = function() {\n\t    return this.interior_;\n\t};\n\t\n\t/**\n\t * Mark this triangle as an interior triangle\n\t * @private\n\t * @param {boolean} interior\n\t * @returns {Triangle} this\n\t */\n\tTriangle.prototype.setInterior = function(interior) {\n\t    this.interior_ = interior;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Update neighbor pointers.\n\t * @private\n\t * @param {XY} p1 - point object with {x,y}\n\t * @param {XY} p2 - point object with {x,y}\n\t * @param {Triangle} t Triangle object.\n\t * @throws {Error} if can't find objects\n\t */\n\tTriangle.prototype.markNeighborPointers = function(p1, p2, t) {\n\t    var points = this.points_;\n\t    // Here we are comparing point references, not values\n\t    if ((p1 === points[2] && p2 === points[1]) || (p1 === points[1] && p2 === points[2])) {\n\t        this.neighbors_[0] = t;\n\t    } else if ((p1 === points[0] && p2 === points[2]) || (p1 === points[2] && p2 === points[0])) {\n\t        this.neighbors_[1] = t;\n\t    } else if ((p1 === points[0] && p2 === points[1]) || (p1 === points[1] && p2 === points[0])) {\n\t        this.neighbors_[2] = t;\n\t    } else {\n\t        throw new Error('poly2tri Invalid Triangle.markNeighborPointers() call');\n\t    }\n\t};\n\t\n\t/**\n\t * Exhaustive search to update neighbor pointers\n\t * @private\n\t * @param {!Triangle} t\n\t */\n\tTriangle.prototype.markNeighbor = function(t) {\n\t    var points = this.points_;\n\t    if (t.containsPoints(points[1], points[2])) {\n\t        this.neighbors_[0] = t;\n\t        t.markNeighborPointers(points[1], points[2], this);\n\t    } else if (t.containsPoints(points[0], points[2])) {\n\t        this.neighbors_[1] = t;\n\t        t.markNeighborPointers(points[0], points[2], this);\n\t    } else if (t.containsPoints(points[0], points[1])) {\n\t        this.neighbors_[2] = t;\n\t        t.markNeighborPointers(points[0], points[1], this);\n\t    }\n\t};\n\t\n\t\n\tTriangle.prototype.clearNeighbors = function() {\n\t    this.neighbors_[0] = null;\n\t    this.neighbors_[1] = null;\n\t    this.neighbors_[2] = null;\n\t};\n\t\n\tTriangle.prototype.clearDelaunayEdges = function() {\n\t    this.delaunay_edge[0] = false;\n\t    this.delaunay_edge[1] = false;\n\t    this.delaunay_edge[2] = false;\n\t};\n\t\n\t/**\n\t * Returns the point clockwise to the given point.\n\t * @private\n\t * @param {XY} p - point object with {x,y}\n\t */\n\tTriangle.prototype.pointCW = function(p) {\n\t    var points = this.points_;\n\t    // Here we are comparing point references, not values\n\t    if (p === points[0]) {\n\t        return points[2];\n\t    } else if (p === points[1]) {\n\t        return points[0];\n\t    } else if (p === points[2]) {\n\t        return points[1];\n\t    } else {\n\t        return null;\n\t    }\n\t};\n\t\n\t/**\n\t * Returns the point counter-clockwise to the given point.\n\t * @private\n\t * @param {XY} p - point object with {x,y}\n\t */\n\tTriangle.prototype.pointCCW = function(p) {\n\t    var points = this.points_;\n\t    // Here we are comparing point references, not values\n\t    if (p === points[0]) {\n\t        return points[1];\n\t    } else if (p === points[1]) {\n\t        return points[2];\n\t    } else if (p === points[2]) {\n\t        return points[0];\n\t    } else {\n\t        return null;\n\t    }\n\t};\n\t\n\t/**\n\t * Returns the neighbor clockwise to given point.\n\t * @private\n\t * @param {XY} p - point object with {x,y}\n\t */\n\tTriangle.prototype.neighborCW = function(p) {\n\t    // Here we are comparing point references, not values\n\t    if (p === this.points_[0]) {\n\t        return this.neighbors_[1];\n\t    } else if (p === this.points_[1]) {\n\t        return this.neighbors_[2];\n\t    } else {\n\t        return this.neighbors_[0];\n\t    }\n\t};\n\t\n\t/**\n\t * Returns the neighbor counter-clockwise to given point.\n\t * @private\n\t * @param {XY} p - point object with {x,y}\n\t */\n\tTriangle.prototype.neighborCCW = function(p) {\n\t    // Here we are comparing point references, not values\n\t    if (p === this.points_[0]) {\n\t        return this.neighbors_[2];\n\t    } else if (p === this.points_[1]) {\n\t        return this.neighbors_[0];\n\t    } else {\n\t        return this.neighbors_[1];\n\t    }\n\t};\n\t\n\tTriangle.prototype.getConstrainedEdgeCW = function(p) {\n\t    // Here we are comparing point references, not values\n\t    if (p === this.points_[0]) {\n\t        return this.constrained_edge[1];\n\t    } else if (p === this.points_[1]) {\n\t        return this.constrained_edge[2];\n\t    } else {\n\t        return this.constrained_edge[0];\n\t    }\n\t};\n\t\n\tTriangle.prototype.getConstrainedEdgeCCW = function(p) {\n\t    // Here we are comparing point references, not values\n\t    if (p === this.points_[0]) {\n\t        return this.constrained_edge[2];\n\t    } else if (p === this.points_[1]) {\n\t        return this.constrained_edge[0];\n\t    } else {\n\t        return this.constrained_edge[1];\n\t    }\n\t};\n\t\n\t// Additional check from Java version (see issue #88)\n\tTriangle.prototype.getConstrainedEdgeAcross = function(p) {\n\t    // Here we are comparing point references, not values\n\t    if (p === this.points_[0]) {\n\t        return this.constrained_edge[0];\n\t    } else if (p === this.points_[1]) {\n\t        return this.constrained_edge[1];\n\t    } else {\n\t        return this.constrained_edge[2];\n\t    }\n\t};\n\t\n\tTriangle.prototype.setConstrainedEdgeCW = function(p, ce) {\n\t    // Here we are comparing point references, not values\n\t    if (p === this.points_[0]) {\n\t        this.constrained_edge[1] = ce;\n\t    } else if (p === this.points_[1]) {\n\t        this.constrained_edge[2] = ce;\n\t    } else {\n\t        this.constrained_edge[0] = ce;\n\t    }\n\t};\n\t\n\tTriangle.prototype.setConstrainedEdgeCCW = function(p, ce) {\n\t    // Here we are comparing point references, not values\n\t    if (p === this.points_[0]) {\n\t        this.constrained_edge[2] = ce;\n\t    } else if (p === this.points_[1]) {\n\t        this.constrained_edge[0] = ce;\n\t    } else {\n\t        this.constrained_edge[1] = ce;\n\t    }\n\t};\n\t\n\tTriangle.prototype.getDelaunayEdgeCW = function(p) {\n\t    // Here we are comparing point references, not values\n\t    if (p === this.points_[0]) {\n\t        return this.delaunay_edge[1];\n\t    } else if (p === this.points_[1]) {\n\t        return this.delaunay_edge[2];\n\t    } else {\n\t        return this.delaunay_edge[0];\n\t    }\n\t};\n\t\n\tTriangle.prototype.getDelaunayEdgeCCW = function(p) {\n\t    // Here we are comparing point references, not values\n\t    if (p === this.points_[0]) {\n\t        return this.delaunay_edge[2];\n\t    } else if (p === this.points_[1]) {\n\t        return this.delaunay_edge[0];\n\t    } else {\n\t        return this.delaunay_edge[1];\n\t    }\n\t};\n\t\n\tTriangle.prototype.setDelaunayEdgeCW = function(p, e) {\n\t    // Here we are comparing point references, not values\n\t    if (p === this.points_[0]) {\n\t        this.delaunay_edge[1] = e;\n\t    } else if (p === this.points_[1]) {\n\t        this.delaunay_edge[2] = e;\n\t    } else {\n\t        this.delaunay_edge[0] = e;\n\t    }\n\t};\n\t\n\tTriangle.prototype.setDelaunayEdgeCCW = function(p, e) {\n\t    // Here we are comparing point references, not values\n\t    if (p === this.points_[0]) {\n\t        this.delaunay_edge[2] = e;\n\t    } else if (p === this.points_[1]) {\n\t        this.delaunay_edge[0] = e;\n\t    } else {\n\t        this.delaunay_edge[1] = e;\n\t    }\n\t};\n\t\n\t/**\n\t * The neighbor across to given point.\n\t * @private\n\t * @param {XY} p - point object with {x,y}\n\t * @returns {Triangle}\n\t */\n\tTriangle.prototype.neighborAcross = function(p) {\n\t    // Here we are comparing point references, not values\n\t    if (p === this.points_[0]) {\n\t        return this.neighbors_[0];\n\t    } else if (p === this.points_[1]) {\n\t        return this.neighbors_[1];\n\t    } else {\n\t        return this.neighbors_[2];\n\t    }\n\t};\n\t\n\t/**\n\t * @private\n\t * @param {!Triangle} t Triangle object.\n\t * @param {XY} p - point object with {x,y}\n\t */\n\tTriangle.prototype.oppositePoint = function(t, p) {\n\t    var cw = t.pointCW(p);\n\t    return this.pointCW(cw);\n\t};\n\t\n\t/**\n\t * Legalize triangle by rotating clockwise around oPoint\n\t * @private\n\t * @param {XY} opoint - point object with {x,y}\n\t * @param {XY} npoint - point object with {x,y}\n\t * @throws {Error} if oPoint can not be found\n\t */\n\tTriangle.prototype.legalize = function(opoint, npoint) {\n\t    var points = this.points_;\n\t    // Here we are comparing point references, not values\n\t    if (opoint === points[0]) {\n\t        points[1] = points[0];\n\t        points[0] = points[2];\n\t        points[2] = npoint;\n\t    } else if (opoint === points[1]) {\n\t        points[2] = points[1];\n\t        points[1] = points[0];\n\t        points[0] = npoint;\n\t    } else if (opoint === points[2]) {\n\t        points[0] = points[2];\n\t        points[2] = points[1];\n\t        points[1] = npoint;\n\t    } else {\n\t        throw new Error('poly2tri Invalid Triangle.legalize() call');\n\t    }\n\t};\n\t\n\t/**\n\t * Returns the index of a point in the triangle. \n\t * The point *must* be a reference to one of the triangle's vertices.\n\t * @private\n\t * @param {XY} p - point object with {x,y}\n\t * @returns {number} index 0, 1 or 2\n\t * @throws {Error} if p can not be found\n\t */\n\tTriangle.prototype.index = function(p) {\n\t    var points = this.points_;\n\t    // Here we are comparing point references, not values\n\t    if (p === points[0]) {\n\t        return 0;\n\t    } else if (p === points[1]) {\n\t        return 1;\n\t    } else if (p === points[2]) {\n\t        return 2;\n\t    } else {\n\t        throw new Error('poly2tri Invalid Triangle.index() call');\n\t    }\n\t};\n\t\n\t/**\n\t * @private\n\t * @param {XY} p1 - point object with {x,y}\n\t * @param {XY} p2 - point object with {x,y}\n\t * @return {number} index 0, 1 or 2, or -1 if errror\n\t */\n\tTriangle.prototype.edgeIndex = function(p1, p2) {\n\t    var points = this.points_;\n\t    // Here we are comparing point references, not values\n\t    if (p1 === points[0]) {\n\t        if (p2 === points[1]) {\n\t            return 2;\n\t        } else if (p2 === points[2]) {\n\t            return 1;\n\t        }\n\t    } else if (p1 === points[1]) {\n\t        if (p2 === points[2]) {\n\t            return 0;\n\t        } else if (p2 === points[0]) {\n\t            return 2;\n\t        }\n\t    } else if (p1 === points[2]) {\n\t        if (p2 === points[0]) {\n\t            return 1;\n\t        } else if (p2 === points[1]) {\n\t            return 0;\n\t        }\n\t    }\n\t    return -1;\n\t};\n\t\n\t/**\n\t * Mark an edge of this triangle as constrained.\n\t * @private\n\t * @param {number} index - edge index\n\t */\n\tTriangle.prototype.markConstrainedEdgeByIndex = function(index) {\n\t    this.constrained_edge[index] = true;\n\t};\n\t/**\n\t * Mark an edge of this triangle as constrained.\n\t * @private\n\t * @param {Edge} edge instance\n\t */\n\tTriangle.prototype.markConstrainedEdgeByEdge = function(edge) {\n\t    this.markConstrainedEdgeByPoints(edge.p, edge.q);\n\t};\n\t/**\n\t * Mark an edge of this triangle as constrained.\n\t * This method takes two Point instances defining the edge of the triangle.\n\t * @private\n\t * @param {XY} p - point object with {x,y}\n\t * @param {XY} q - point object with {x,y}\n\t */\n\tTriangle.prototype.markConstrainedEdgeByPoints = function(p, q) {\n\t    var points = this.points_;\n\t    // Here we are comparing point references, not values        \n\t    if ((q === points[0] && p === points[1]) || (q === points[1] && p === points[0])) {\n\t        this.constrained_edge[2] = true;\n\t    } else if ((q === points[0] && p === points[2]) || (q === points[2] && p === points[0])) {\n\t        this.constrained_edge[1] = true;\n\t    } else if ((q === points[1] && p === points[2]) || (q === points[2] && p === points[1])) {\n\t        this.constrained_edge[0] = true;\n\t    }\n\t};\n\t\n\t\n\t// ---------------------------------------------------------Exports (public API)\n\t\n\tmodule.exports = Triangle;\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// Copyright 2016 Todd Fleming\n\t//\n\t// This program is free software: you can redistribute it and/or modify\n\t// it under the terms of the GNU Affero General Public License as published by\n\t// the Free Software Foundation, either version 3 of the License, or\n\t// (at your option) any later version.\n\t// \n\t// This program is distributed in the hope that it will be useful,\n\t// but WITHOUT ANY WARRANTY; without even the implied warranty of\n\t// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\t// GNU Affero General Public License for more details.\n\t// \n\t// You should have received a copy of the GNU Affero General Public License\n\t// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\t\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.getLaserCutGcode = getLaserCutGcode;\n\texports.getLaserCutGcodeFromOp = getLaserCutGcodeFromOp;\n\t\n\tvar _cam = __webpack_require__(12);\n\t\n\tvar _mesh = __webpack_require__(3);\n\t\n\t// Convert laser cut paths to gcode.\n\t//      paths:          Array of CamPath\n\t//      scale:          Factor to convert Clipper units to gcode units\n\t//      offsetX:        Offset X (gcode units)\n\t//      offsetY:        Offset Y (gcode units)\n\t//      decimal:        Number of decimal places to keep in gcode\n\t//      cutFeed:        Feedrate for horizontal cuts (gcode units)\n\t//      laserPower:     [0, 100]\n\t//      passes:         Number of passes\n\t//      tabGeometry:    Tab geometry\n\t//      gcodeToolOn:   Laser on (may be empty)\n\t//      gcodeToolOff:  Laser off (may be empty)\n\t//      gcodeSMaxValue: Max S value\n\tfunction getLaserCutGcode(props) {\n\t    var paths = props.paths,\n\t        scale = props.scale,\n\t        offsetX = props.offsetX,\n\t        offsetY = props.offsetY,\n\t        decimal = props.decimal,\n\t        cutFeed = props.cutFeed,\n\t        laserPower = props.laserPower,\n\t        passes = props.passes,\n\t        useA = props.useA,\n\t        aAxisStepsPerTurn = props.aAxisStepsPerTurn,\n\t        aAxisDiameter = props.aAxisDiameter,\n\t        tabGeometry = props.tabGeometry,\n\t        gcodeToolOn = props.gcodeToolOn,\n\t        gcodeToolOff = props.gcodeToolOff,\n\t        gcodeSMaxValue = props.gcodeSMaxValue,\n\t        useZ = props.useZ,\n\t        useBlower = props.useBlower,\n\t        hookPassStart = props.hookPassStart,\n\t        hookPassEnd = props.hookPassEnd;\n\t\n\t\n\t    if (gcodeToolOn) gcodeToolOn += '\\r\\n';\n\t    if (gcodeToolOff) gcodeToolOff += '\\r\\n';\n\t    var laserOnS = 'S' + (gcodeSMaxValue * laserPower / 100).toFixed(decimal);\n\t\n\t    var lastX = 0,\n\t        lastY = 0;\n\t    function convertPoint(p, rapid) {\n\t        var x = p.X * scale + offsetX;\n\t        var y = p.Y * scale + offsetY;\n\t        if (useA) {\n\t            var roundedX = Number(x.toFixed(decimal)),\n\t                roundedY = Number(y.toFixed(decimal));\n\t            if (rapid) {\n\t                lastX = roundedX;\n\t                lastY = roundedY;\n\t                return 'G0 X' + x.toFixed(decimal) + ' A' + y.toFixed(decimal);\n\t            } else {\n\t                var dx = roundedX - lastX,\n\t                    dy = roundedY - lastY;\n\t                var travelTime = Math.sqrt(dx * dx + dy * dy) / cutFeed;\n\t                var f = 0;\n\t                if (dx) f = Math.abs(dx) / travelTime;else if (dy) f = Math.abs(dy) / travelTime;else return '';\n\t                lastX = roundedX;\n\t                lastY = roundedY;\n\t                return 'G1 X' + x.toFixed(decimal) + ' A' + y.toFixed(decimal) + ' F' + f.toFixed(decimal);\n\t            }\n\t        } else {\n\t            if (rapid) return 'G0 X' + x.toFixed(decimal) + ' Y' + y.toFixed(decimal);else return 'G1 X' + x.toFixed(decimal) + ' Y' + y.toFixed(decimal);\n\t        }\n\t    }\n\t\n\t    var gcode = '';\n\t    if (useA) gcode += 'M92 A' + (aAxisStepsPerTurn / Math.PI / aAxisDiameter).toFixed(decimal) + '; ' + aAxisStepsPerTurn + ' steps per turn, ' + aAxisDiameter + 'mm diameter';\n\t\n\t    for (var pass = 0; pass < passes; ++pass) {\n\t\n\t        if (hookPassStart) gcode += hookPassStart;\n\t\n\t        gcode += '\\n\\n; Pass ' + pass + '\\r\\n';\n\t\n\t        if (useBlower) {\n\t            if (useBlower.blowerOn) {\n\t                gcode += '\\r\\n ' + useBlower.blowerOn + '; Enable Air assist\\r\\n';\n\t            }\n\t        }\n\t\n\t        var usedZposition = false;\n\t        for (var pathIndex = 0; pathIndex < paths.length; ++pathIndex) {\n\t            var path = paths[pathIndex].path;\n\t            if (path.length === 0) continue;\n\t            gcode += '\\r\\n; Pass ' + pass + ' Path ' + pathIndex + '\\r\\n';\n\t\n\t            var separatedPaths = (0, _cam.separateTabs)(path, tabGeometry);\n\t            for (var selectedIndex = 0; selectedIndex < separatedPaths.length; ++selectedIndex) {\n\t                var selectedPath = separatedPaths[selectedIndex];\n\t                if (selectedPath.length === 0) continue;\n\t                if (selectedIndex & 1) {\n\t                    gcode += '; Skip tab\\r\\n';\n\t                    continue;\n\t                }\n\t                gcode += convertPoint(selectedPath[0], true) + '\\r\\n';\n\t\n\t                if (useZ && !usedZposition) {\n\t                    usedZposition = true;\n\t                    var zHeight = useZ.startZ + useZ.offsetZ - useZ.passDepth * pass;\n\t                    gcode += '; Pass Z Height ' + zHeight + 'mm (Offset: ' + useZ.offsetZ + 'mm)\\r\\n';\n\t                    gcode += 'G0 Z' + zHeight.toFixed(decimal) + '\\r\\n\\r\\n';\n\t                }\n\t\n\t                gcode += gcodeToolOn;\n\t                for (var i = 1; i < selectedPath.length; ++i) {\n\t                    gcode += convertPoint(selectedPath[i], false);\n\t                    if (i == 1) gcode += ' ' + laserOnS;\n\t                    if (i == 1 && !useA) gcode += ' F' + cutFeed;\n\t                    gcode += '\\r\\n';\n\t                }\n\t                gcode += gcodeToolOff;\n\t            }\n\t        }\n\t\n\t        if (useBlower) {\n\t            if (useBlower.blowerOff) {\n\t                gcode += '\\r\\n ' + useBlower.blowerOff + '; Disable Air assist\\r\\n';\n\t            }\n\t        }\n\t\n\t        if (hookPassEnd) gcode += hookPassEnd;\n\t    }\n\t\n\t    return gcode;\n\t}; // getLaserCutGcode\n\t\n\tfunction getLaserCutGcodeFromOp(settings, opIndex, op, geometry, openGeometry, tabGeometry, showAlert, done, progress) {\n\t    var ok = true;\n\t\n\t    if (settings.gcodeSMaxValue <= 0) {\n\t        showAlert(\"PWM Max S Value (in Settings) must be greater than 0\", \"danger\");\n\t        ok = false;\n\t    }\n\t    if (op.type !== 'Laser Cut' && op.type !== 'Laser Fill Path') {\n\t        if (op.laserDiameter <= 0) {\n\t            showAlert(\"Laser Diameter must be greater than 0\", \"danger\");\n\t            ok = false;\n\t        }\n\t    }\n\t    if (op.type === 'Laser Fill Path') {\n\t        if (op.lineDistance <= 0) {\n\t            showAlert(\"Line Distance must be greater than 0\", \"danger\");\n\t            ok = false;\n\t        }\n\t    }\n\t    if (op.laserPower < 0 || op.laserPower > 100) {\n\t        showAlert(\"Laser Power must be in range [0, 100]\", \"danger\");\n\t        ok = false;\n\t    }\n\t    if (op.passes <= 0 || (op.passes | 0) !== +op.passes) {\n\t        showAlert(\"Passes must be integer > 0\", \"danger\");\n\t        ok = false;\n\t    }\n\t    if (op.cutRate <= 0) {\n\t        showAlert(\"Cut Rate must be greater than 0\", \"danger\");\n\t        ok = false;\n\t    }\n\t    if (op.useA) {\n\t        if (op.aAxisStepsPerTurn <= 0) {\n\t            showAlert(\"A axis resolution must be greater than 0\", \"danger\");\n\t            ok = false;\n\t        }\n\t        if (op.aAxisDiameter <= 0) {\n\t            showAlert(\"A axis diameter must be greater than 0\", \"danger\");\n\t            ok = false;\n\t        }\n\t    }\n\t\n\t    if (settings.machineZEnabled) {\n\t        if (op.startHeight === \"\" || isNaN(op.startHeight)) {\n\t            showAlert(\"Start Height must be a valid number\", \"danger\");\n\t            ok = false;\n\t        }\n\t    }\n\t\n\t    if (!ok) {\n\t        done(false);\n\t    }\n\t\n\t    var camPaths = [];\n\t    if (op.type === 'Laser Cut') {\n\t        camPaths = (0, _cam.cut)(geometry, openGeometry, false);\n\t    } else if (op.type === 'Laser Cut Inside') {\n\t        if (op.margin) geometry = (0, _mesh.offset)(geometry, -op.margin * _mesh.mmToClipperScale);\n\t        camPaths = (0, _cam.insideOutside)(geometry, op.laserDiameter * _mesh.mmToClipperScale, true, op.cutWidth * _mesh.mmToClipperScale, op.stepOver, op.direction === 'Climb', false);\n\t    } else if (op.type === 'Laser Cut Outside') {\n\t        if (op.margin) geometry = (0, _mesh.offset)(geometry, op.margin * _mesh.mmToClipperScale);\n\t        camPaths = (0, _cam.insideOutside)(geometry, op.laserDiameter * _mesh.mmToClipperScale, false, op.cutWidth * _mesh.mmToClipperScale, op.stepOver, op.direction === 'Climb', false);\n\t    } else if (op.type === 'Laser Fill Path') {\n\t        if (op.margin) geometry = (0, _mesh.offset)(geometry, -op.margin * _mesh.mmToClipperScale);\n\t        camPaths = (0, _cam.fillPath)(geometry, op.lineDistance * _mesh.mmToClipperScale, op.lineAngle);\n\t    }\n\t\n\t    (0, _cam.reduceCamPaths)(camPaths, op.segmentLength * _mesh.mmToClipperScale);\n\t\n\t    var feedScale = 1;\n\t    if (settings.toolFeedUnits === 'mm/s') feedScale = 60;\n\t\n\t    var gcode = \"\\r\\n;\" + \"\\r\\n; Operation:    \" + opIndex + \"\\r\\n; Type:         \" + op.type + \"\\r\\n; Paths:        \" + camPaths.length + \"\\r\\n; Passes:       \" + op.passes + \"\\r\\n; Cut rate:     \" + op.cutRate + ' ' + settings.toolFeedUnits + \"\\r\\n;\\r\\n\";\n\t\n\t    if (op.hookOperationStart.length) gcode += op.hookOperationStart;\n\t\n\t    gcode += getLaserCutGcode({\n\t        paths: camPaths,\n\t        scale: 1 / _mesh.mmToClipperScale,\n\t        offsetX: 0,\n\t        offsetY: 0,\n\t        decimal: 2,\n\t        cutFeed: op.cutRate * feedScale,\n\t        laserPower: op.laserPower,\n\t        passes: op.passes,\n\t        useA: op.useA,\n\t        useZ: settings.machineZEnabled ? {\n\t            startZ: Number(op.startHeight),\n\t            offsetZ: settings.machineZToolOffset,\n\t            passDepth: op.passDepth\n\t        } : false,\n\t        useBlower: op.useBlower ? {\n\t            blowerOn: settings.machineBlowerGcodeOn,\n\t            blowerOff: settings.machineBlowerGcodeOff\n\t        } : false,\n\t        aAxisStepsPerTurn: op.aAxisStepsPerTurn,\n\t        aAxisDiameter: op.aAxisDiameter,\n\t        tabGeometry: tabGeometry,\n\t        gcodeToolOn: settings.gcodeToolOn,\n\t        gcodeToolOff: settings.gcodeToolOff,\n\t        gcodeSMaxValue: settings.gcodeSMaxValue,\n\t\n\t        hookPassStart: op.hookPassStart,\n\t        hookPassEnd: op.hookPassEnd\n\t    });\n\t\n\t    if (op.hookOperationEnd.length) gcode += op.hookOperationEnd;\n\t\n\t    done(gcode);\n\t} // getLaserCutGcodeFromOp\n\t\n\t;\n\t\n\tvar _temp = function () {\n\t    if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n\t        return;\n\t    }\n\t\n\t    __REACT_HOT_LOADER__.register(getLaserCutGcode, 'getLaserCutGcode', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/cam-gcode-laser-cut.js');\n\t\n\t    __REACT_HOT_LOADER__.register(getLaserCutGcodeFromOp, 'getLaserCutGcodeFromOp', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/cam-gcode-laser-cut.js');\n\t}();\n\n\t;\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t// Copyright 2014, 2016 Todd Fleming\n\t//\n\t// This program is free software: you can redistribute it and/or modify\n\t// it under the terms of the GNU Affero General Public License as published by\n\t// the Free Software Foundation, either version 3 of the License, or\n\t// (at your option) any later version.\n\t//\n\t// This program is distributed in the hope that it will be useful,\n\t// but WITHOUT ANY WARRANTY; without even the implied warranty of\n\t// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\t// GNU Affero General Public License for more details.\n\t//\n\t// You should have received a copy of the GNU Affero General Public License\n\t// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\t\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.dist = dist;\n\texports.pocket = pocket;\n\texports.insideOutside = insideOutside;\n\texports.cut = cut;\n\texports.fillPath = fillPath;\n\texports.vCarve = vCarve;\n\texports.reduceCamPaths = reduceCamPaths;\n\texports.getClipperPathsFromCamPaths = getClipperPathsFromCamPaths;\n\texports.separateTabs = separateTabs;\n\t\n\tvar _clipperLib = __webpack_require__(4);\n\t\n\tvar _clipperLib2 = _interopRequireDefault(_clipperLib);\n\t\n\tvar _glMatrix = __webpack_require__(14);\n\t\n\tvar _mesh = __webpack_require__(3);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t__webpack_require__(27);\n\t\n\tfunction dist(x1, y1, x2, y2) {\n\t    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n\t}\n\t\n\t// Does the line from p1 to p2 cross outside of bounds?\n\tfunction crosses(bounds, p1, p2) {\n\t    if (bounds === null) return true;\n\t    if (p1.X === p2.X && p1.Y === p2.Y) return false;\n\t    var clipper = new _clipperLib2.default.Clipper();\n\t    clipper.AddPath([p1, p2], _clipperLib2.default.PolyType.ptSubject, false);\n\t    clipper.AddPaths(bounds, _clipperLib2.default.PolyType.ptClip, true);\n\t    var result = new _clipperLib2.default.PolyTree();\n\t    clipper.Execute(_clipperLib2.default.ClipType.ctIntersection, result, _clipperLib2.default.PolyFillType.pftEvenOdd, _clipperLib2.default.PolyFillType.pftEvenOdd);\n\t    if (result.ChildCount() === 1) {\n\t        var child = result.Childs()[0];\n\t        var points = child.Contour();\n\t        if (points.length === 2) {\n\t            if (points[0].X === p1.X && points[1].X === p2.X && points[0].Y === p1.Y && points[1].Y === p2.Y) return false;\n\t            if (points[0].X === p2.X && points[1].X === p1.X && points[0].Y === p2.Y && points[1].Y === p1.Y) return false;\n\t        }\n\t    }\n\t    return true;\n\t}\n\t\n\tfunction pathIsClosed(clipperPath) {\n\t    return clipperPath.length >= 2 && clipperPath[0].X === clipperPath[clipperPath.length - 1].X && clipperPath[0].Y === clipperPath[clipperPath.length - 1].Y;\n\t}\n\t\n\t// Close all paths\n\tfunction closeClipperPaths(paths) {\n\t    var _iteratorNormalCompletion = true;\n\t    var _didIteratorError = false;\n\t    var _iteratorError = undefined;\n\t\n\t    try {\n\t        for (var _iterator = paths[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t            var path = _step.value;\n\t\n\t            path.push(path[0]);\n\t        }\n\t    } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t    } finally {\n\t        try {\n\t            if (!_iteratorNormalCompletion && _iterator.return) {\n\t                _iterator.return();\n\t            }\n\t        } finally {\n\t            if (_didIteratorError) {\n\t                throw _iteratorError;\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\t// CamPath has this format: {\n\t//      path:               Clipper path\n\t//      safeToClose:        Is it safe to close the path without retracting?\n\t// }\n\t\n\t// Try to merge paths. A merged path doesn't cross outside of bounds. Returns array of CamPath.\n\t// If paths contains both open and closed paths, then the closed paths must be before the open\n\t// paths within the array.\n\tfunction mergePaths(bounds, paths) {\n\t    if (paths.length === 0) return [];\n\t\n\t    var currentPath = paths[0];\n\t    if (pathIsClosed(currentPath)) currentPath.push(currentPath[0]);\n\t    var currentPoint = currentPath[currentPath.length - 1];\n\t    paths[0] = [];\n\t\n\t    var mergedPaths = [];\n\t    var numLeft = paths.length - 1;\n\t\n\t    var _loop = function _loop() {\n\t        var closestPathIndex = null;\n\t        var closestPointIndex = null;\n\t        var closestPointDist = null;\n\t        var closestReverse = false;\n\t\n\t        var _loop2 = function _loop2(pathIndex) {\n\t            var path = paths[pathIndex];\n\t            function check(pointIndex) {\n\t                var point = path[pointIndex];\n\t                var dist = (currentPoint.X - point.X) * (currentPoint.X - point.X) + (currentPoint.Y - point.Y) * (currentPoint.Y - point.Y);\n\t                if (closestPointDist === null || dist < closestPointDist) {\n\t                    closestPathIndex = pathIndex;\n\t                    closestPointIndex = pointIndex;\n\t                    closestPointDist = dist;\n\t                    closestReverse = false;\n\t                    return true;\n\t                } else return false;\n\t            }\n\t            if (pathIsClosed(path)) {\n\t                for (var pointIndex = 0; pointIndex < path.length; ++pointIndex) {\n\t                    check(pointIndex);\n\t                }\n\t            } else if (path.length) {\n\t                check(0);\n\t                if (check(path.length - 1)) closestReverse = true;\n\t            }\n\t        };\n\t\n\t        for (var pathIndex = 0; pathIndex < paths.length; ++pathIndex) {\n\t            _loop2(pathIndex);\n\t        }\n\t\n\t        var path = paths[closestPathIndex];\n\t        paths[closestPathIndex] = [];\n\t        numLeft -= 1;\n\t        var needNew = void 0;\n\t        if (pathIsClosed(path)) {\n\t            needNew = crosses(bounds, currentPoint, path[closestPointIndex]);\n\t            path = path.slice(closestPointIndex, path.length).concat(path.slice(1, closestPointIndex));\n\t            path.push(path[0]);\n\t        } else {\n\t            needNew = true;\n\t            if (closestReverse) {\n\t                path = path.slice();\n\t                path.reverse();\n\t            }\n\t        }\n\t        if (needNew) {\n\t            mergedPaths.push(currentPath);\n\t            currentPath = path;\n\t            currentPoint = currentPath[currentPath.length - 1];\n\t        } else {\n\t            currentPath = currentPath.concat(path);\n\t            currentPoint = currentPath[currentPath.length - 1];\n\t        }\n\t    };\n\t\n\t    while (numLeft > 0) {\n\t        _loop();\n\t    }\n\t    mergedPaths.push(currentPath);\n\t\n\t    var camPaths = [];\n\t    for (var i = 0; i < mergedPaths.length; ++i) {\n\t        var _path = mergedPaths[i];\n\t        camPaths.push({\n\t            path: _path,\n\t            safeToClose: !crosses(bounds, _path[0], _path[_path.length - 1])\n\t        });\n\t    }\n\t\n\t    return camPaths;\n\t}\n\t\n\t// Compute paths for pocket operation on Clipper geometry. Returns array\n\t// of CamPath. cutterDia is in Clipper units. stepover is in the range (0, 100).\n\tfunction pocket(geometry, cutterDia, stepover, climb) {\n\t    stepover = stepover / 100;\n\t    var current = (0, _mesh.offset)(geometry, -cutterDia / 2);\n\t    var bounds = current.slice(0);\n\t    var allPaths = [];\n\t    while (current.length !== 0) {\n\t        if (!climb) for (var i = 0; i < current.length; ++i) {\n\t            current[i].reverse();\n\t        }allPaths = current.concat(allPaths);\n\t        current = (0, _mesh.offset)(current, -cutterDia * stepover);\n\t    }\n\t    closeClipperPaths(allPaths);\n\t    return mergePaths(bounds, allPaths);\n\t};\n\t\n\t// Compute paths for inside/outside operation on Clipper geometry. Returns array\n\t// of CamPath. cutterDia and width are in Clipper units. stepover is in the\n\t// range (0, 100].\n\tfunction insideOutside(geometry, cutterDia, isInside, width, stepover, climb, allowRecutInBounds) {\n\t\n\t    stepover = stepover / 100;\n\t    width = Math.max(width, cutterDia);\n\t\n\t    var currentWidth = cutterDia;\n\t    var allPaths = [];\n\t    var eachWidth = cutterDia * stepover;\n\t\n\t    var current = void 0;\n\t    var bounds = null;\n\t    var eachOffset = void 0;\n\t    var needReverse = void 0;\n\t\n\t    if (isInside) {\n\t        current = (0, _mesh.offset)(geometry, -cutterDia / 2);\n\t        if (allowRecutInBounds) bounds = (0, _mesh.diff)(current, (0, _mesh.offset)(geometry, -(width - cutterDia / 2)));\n\t        eachOffset = -eachWidth;\n\t        needReverse = !climb;\n\t    } else {\n\t        current = (0, _mesh.offset)(geometry, cutterDia / 2);\n\t        if (allowRecutInBounds) bounds = (0, _mesh.diff)((0, _mesh.offset)(geometry, width - cutterDia / 2), current);\n\t        eachOffset = eachWidth;\n\t        needReverse = climb;\n\t    }\n\t\n\t    while (currentWidth <= width) {\n\t        if (needReverse) for (var i = 0; i < current.length; ++i) {\n\t            current[i].reverse();\n\t        }allPaths = current.concat(allPaths);\n\t        var nextWidth = currentWidth + eachWidth;\n\t        if (nextWidth > width && width - currentWidth > 0) {\n\t            current = (0, _mesh.offset)(current, width - currentWidth);\n\t            if (needReverse) for (var _i = 0; _i < current.length; ++_i) {\n\t                current[_i].reverse();\n\t            }allPaths = current.concat(allPaths);\n\t            break;\n\t        }\n\t        currentWidth = nextWidth;\n\t        if (currentWidth <= width) current = (0, _mesh.offset)(current, eachOffset);\n\t    }\n\t    closeClipperPaths(allPaths);\n\t    return mergePaths(bounds, allPaths);\n\t};\n\t\n\t// Compute paths for cut operation on Clipper geometry. Returns array\n\t// of CamPath.\n\tfunction cut(geometry, openGeometry, climb) {\n\t    var allPaths = [];\n\t    for (var i = 0; i < geometry.length; ++i) {\n\t        var _path2 = geometry[i].slice(0);\n\t        if (climb) _path2.reverse();\n\t        _path2.push(_path2[0]);\n\t        allPaths.push(_path2);\n\t    }\n\t    var _iteratorNormalCompletion2 = true;\n\t    var _didIteratorError2 = false;\n\t    var _iteratorError2 = undefined;\n\t\n\t    try {\n\t        for (var _iterator2 = openGeometry[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t            var _path3 = _step2.value;\n\t\n\t            allPaths.push(_path3.slice());\n\t        }\n\t    } catch (err) {\n\t        _didIteratorError2 = true;\n\t        _iteratorError2 = err;\n\t    } finally {\n\t        try {\n\t            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t                _iterator2.return();\n\t            }\n\t        } finally {\n\t            if (_didIteratorError2) {\n\t                throw _iteratorError2;\n\t            }\n\t        }\n\t    }\n\t\n\t    var result = mergePaths(null, allPaths);\n\t    for (var _i2 = 0; _i2 < result.length; ++_i2) {\n\t        result[_i2].safeToClose = pathIsClosed(result[_i2].path);\n\t    }return result;\n\t};\n\t\n\tfunction fillPath(geometry, lineDistance, angle) {\n\t    if (!geometry.length || !geometry[0].length) return [];\n\t    var bounds = (0, _mesh.clipperBounds)(geometry);\n\t    var cx = (bounds.minX + bounds.maxX) / 2;\n\t    var cy = (bounds.minY + bounds.maxY) / 2;\n\t    var r = dist(cx, cy, bounds.minX, bounds.minY) + lineDistance;\n\t\n\t    var m = _glMatrix.mat3.fromTranslation([], [cx, cy]);\n\t    m = _glMatrix.mat3.rotate([], m, angle * Math.PI / 180);\n\t    m = _glMatrix.mat3.translate([], m, [-cx, -cy]);\n\t    var makePoint = function makePoint(x, y) {\n\t        var p = _glMatrix.vec2.transformMat3([], [x, y], m);\n\t        return { X: p[0], Y: p[1] };\n\t    };\n\t\n\t    var scan = [];\n\t    for (var y = cy - r; y < cy + r; y += lineDistance * 2) {\n\t        scan.push(makePoint(cx - r, y), makePoint(cx + r, y), makePoint(cx + r, y + lineDistance), makePoint(cx - r, y + lineDistance));\n\t    }\n\t\n\t    var allPaths = [];\n\t    var separated = separateTabs(scan, geometry);\n\t    for (var i = 1; i < separated.length; i += 2) {\n\t        allPaths.push(separated[i]);\n\t    }return mergePaths(null, allPaths);\n\t};\n\t\n\tfunction vCarve(geometry, cutterAngle, passDepth) {\n\t    if (cutterAngle <= 0 || cutterAngle >= 180) return [];\n\t\n\t    var memoryBlocks = [];\n\t    var cGeometry = (0, _mesh.clipperPathsToCPaths)(memoryBlocks, geometry);\n\t    var resultPathsRef = Module._malloc(4);\n\t    var resultNumPathsRef = Module._malloc(4);\n\t    var resultPathSizesRef = Module._malloc(4);\n\t    memoryBlocks.push(resultPathsRef);\n\t    memoryBlocks.push(resultNumPathsRef);\n\t    memoryBlocks.push(resultPathSizesRef);\n\t\n\t    var debugArg0 = 0,\n\t        debugArg1 = 0;\n\t\n\t    //extern \"C\" void vCarve(\n\t    //    int debugArg0, int debugArg1,\n\t    //    double** paths, int numPaths, int* pathSizes,\n\t    //    double cutterAngle, double passDepth,\n\t    //    double**& resultPaths, int& resultNumPaths, int*& resultPathSizes)\n\t    Module.ccall('vCarve', 'void', ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number'], [debugArg0, debugArg1, cGeometry[0], cGeometry[1], cGeometry[2], cutterAngle, passDepth * _mesh.clipperToCppScale, resultPathsRef, resultNumPathsRef, resultPathSizesRef]);\n\t\n\t    var result = (0, _mesh.cPathsToCamPaths)(memoryBlocks, resultPathsRef, resultNumPathsRef, resultPathSizesRef);\n\t\n\t    for (var i = 0; i < memoryBlocks.length; ++i) {\n\t        Module._free(memoryBlocks[i]);\n\t    }return result;\n\t};\n\t\n\tfunction reduceCamPaths(camPaths, minDist) {\n\t    var minDistSqr = minDist * minDist;\n\t    var distSqr = function distSqr(p1, p2) {\n\t        return (p1.X - p2.X) * (p1.X - p2.X) + (p1.Y - p2.Y) * (p1.Y - p2.Y);\n\t    };\n\t    var _iteratorNormalCompletion3 = true;\n\t    var _didIteratorError3 = false;\n\t    var _iteratorError3 = undefined;\n\t\n\t    try {\n\t        for (var _iterator3 = camPaths[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n\t            var camPath = _step3.value;\n\t\n\t            var _path4 = camPath.path;\n\t            var newPath = [_path4[0]];\n\t            for (var i = 1; i < _path4.length - 1; ++i) {\n\t                var sq = distSqr(_path4[i], newPath[newPath.length - 1]);\n\t                if (sq > 0 && sq >= minDistSqr) newPath.push(_path4[i]);\n\t            }\n\t            newPath.push(_path4[_path4.length - 1]);\n\t            camPath.path = newPath;\n\t        }\n\t    } catch (err) {\n\t        _didIteratorError3 = true;\n\t        _iteratorError3 = err;\n\t    } finally {\n\t        try {\n\t            if (!_iteratorNormalCompletion3 && _iterator3.return) {\n\t                _iterator3.return();\n\t            }\n\t        } finally {\n\t            if (_didIteratorError3) {\n\t                throw _iteratorError3;\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\t// Convert array of CamPath to array of Clipper path\n\tfunction getClipperPathsFromCamPaths(paths) {\n\t    var result = [];\n\t    if (paths !== null) for (var i = 0; i < paths.length; ++i) {\n\t        result.push(paths[i].path);\n\t    }return result;\n\t}\n\t\n\tvar displayedCppTabError1 = false;\n\tvar displayedCppTabError2 = false;\n\t\n\tfunction separateTabs(cutterPath, tabGeometry) {\n\t    if (tabGeometry.length === 0) return [cutterPath];\n\t    if (typeof Module === 'undefined') {\n\t        if (!displayedCppTabError1) {\n\t            showAlert(\"Failed to load cam-cpp.js; tabs will be missing. This message will not repeat.\", \"danger\", false);\n\t            displayedCppTabError1 = true;\n\t        }\n\t        return cutterPath;\n\t    }\n\t\n\t    var memoryBlocks = [];\n\t\n\t    var cCutterPath = (0, _mesh.clipperPathsToCPaths)(memoryBlocks, [cutterPath]);\n\t    var cTabGeometry = (0, _mesh.clipperPathsToCPaths)(memoryBlocks, tabGeometry);\n\t\n\t    var errorRef = Module._malloc(4);\n\t    var resultPathsRef = Module._malloc(4);\n\t    var resultNumPathsRef = Module._malloc(4);\n\t    var resultPathSizesRef = Module._malloc(4);\n\t    memoryBlocks.push(errorRef);\n\t    memoryBlocks.push(resultPathsRef);\n\t    memoryBlocks.push(resultNumPathsRef);\n\t    memoryBlocks.push(resultPathSizesRef);\n\t\n\t    //extern \"C\" void separateTabs(\n\t    //    double** pathPolygons, int numPaths, int* pathSizes,\n\t    //    double** tabPolygons, int numTabPolygons, int* tabPolygonSizes,\n\t    //    bool& error,\n\t    //    double**& resultPaths, int& resultNumPaths, int*& resultPathSizes)\n\t    Module.ccall('separateTabs', 'void', ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number'], [cCutterPath[0], cCutterPath[1], cCutterPath[2], cTabGeometry[0], cTabGeometry[1], cTabGeometry[2], errorRef, resultPathsRef, resultNumPathsRef, resultPathSizesRef]);\n\t\n\t    if (Module.HEAPU32[errorRef >> 2] && !displayedCppTabError2) {\n\t        showAlert(\"Internal error processing tabs; tabs will be missing. This message will not repeat.\", \"danger\", false);\n\t        displayedCppTabError2 = true;\n\t    }\n\t\n\t    var result = (0, _mesh.cPathsToClipperPaths)(memoryBlocks, resultPathsRef, resultNumPathsRef, resultPathSizesRef);\n\t\n\t    for (var i = 0; i < memoryBlocks.length; ++i) {\n\t        Module._free(memoryBlocks[i]);\n\t    }return result;\n\t}\n\t;\n\t\n\tvar _temp = function () {\n\t    if (typeof __REACT_HOT_LOADER__ === 'undefined') {\n\t        return;\n\t    }\n\t\n\t    __REACT_HOT_LOADER__.register(dist, 'dist', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/cam.js');\n\t\n\t    __REACT_HOT_LOADER__.register(crosses, 'crosses', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/cam.js');\n\t\n\t    __REACT_HOT_LOADER__.register(pathIsClosed, 'pathIsClosed', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/cam.js');\n\t\n\t    __REACT_HOT_LOADER__.register(closeClipperPaths, 'closeClipperPaths', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/cam.js');\n\t\n\t    __REACT_HOT_LOADER__.register(mergePaths, 'mergePaths', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/cam.js');\n\t\n\t    __REACT_HOT_LOADER__.register(pocket, 'pocket', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/cam.js');\n\t\n\t    __REACT_HOT_LOADER__.register(insideOutside, 'insideOutside', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/cam.js');\n\t\n\t    __REACT_HOT_LOADER__.register(cut, 'cut', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/cam.js');\n\t\n\t    __REACT_HOT_LOADER__.register(fillPath, 'fillPath', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/cam.js');\n\t\n\t    __REACT_HOT_LOADER__.register(vCarve, 'vCarve', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/cam.js');\n\t\n\t    __REACT_HOT_LOADER__.register(reduceCamPaths, 'reduceCamPaths', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/cam.js');\n\t\n\t    __REACT_HOT_LOADER__.register(getClipperPathsFromCamPaths, 'getClipperPathsFromCamPaths', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/cam.js');\n\t\n\t    __REACT_HOT_LOADER__.register(displayedCppTabError1, 'displayedCppTabError1', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/cam.js');\n\t\n\t    __REACT_HOT_LOADER__.register(displayedCppTabError2, 'displayedCppTabError2', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/cam.js');\n\t\n\t    __REACT_HOT_LOADER__.register(separateTabs, 'separateTabs', '/Users/jorgerobles/repos_1/LaserWeb4/src/lib/cam.js');\n\t}();\n\n\t;\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\t// ┌────────────────────────────────────────────────────────────┐ \\\\\n\t// │ Eve 0.4.2 - JavaScript Events Library                      │ \\\\\n\t// ├────────────────────────────────────────────────────────────┤ \\\\\n\t// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n\t// └────────────────────────────────────────────────────────────┘ \\\\\n\t\n\t(function (glob) {\n\t    var version = \"0.4.2\",\n\t        has = \"hasOwnProperty\",\n\t        separator = /[\\.\\/]/,\n\t        comaseparator = /\\s*,\\s*/,\n\t        wildcard = \"*\",\n\t        fun = function () {},\n\t        numsort = function (a, b) {\n\t            return a - b;\n\t        },\n\t        current_event,\n\t        stop,\n\t        events = {n: {}},\n\t        firstDefined = function () {\n\t            for (var i = 0, ii = this.length; i < ii; i++) {\n\t                if (typeof this[i] != \"undefined\") {\n\t                    return this[i];\n\t                }\n\t            }\n\t        },\n\t        lastDefined = function () {\n\t            var i = this.length;\n\t            while (--i) {\n\t                if (typeof this[i] != \"undefined\") {\n\t                    return this[i];\n\t                }\n\t            }\n\t        },\n\t    /*\\\n\t     * eve\n\t     [ method ]\n\t\n\t     * Fires event with given `name`, given scope and other parameters.\n\t\n\t     > Arguments\n\t\n\t     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n\t     - scope (object) context for the event handlers\n\t     - varargs (...) the rest of arguments will be sent to event handlers\n\t\n\t     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n\t    \\*/\n\t        eve = function (name, scope) {\n\t            name = String(name);\n\t            var e = events,\n\t                oldstop = stop,\n\t                args = Array.prototype.slice.call(arguments, 2),\n\t                listeners = eve.listeners(name),\n\t                z = 0,\n\t                f = false,\n\t                l,\n\t                indexed = [],\n\t                queue = {},\n\t                out = [],\n\t                ce = current_event,\n\t                errors = [];\n\t            out.firstDefined = firstDefined;\n\t            out.lastDefined = lastDefined;\n\t            current_event = name;\n\t            stop = 0;\n\t            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n\t                indexed.push(listeners[i].zIndex);\n\t                if (listeners[i].zIndex < 0) {\n\t                    queue[listeners[i].zIndex] = listeners[i];\n\t                }\n\t            }\n\t            indexed.sort(numsort);\n\t            while (indexed[z] < 0) {\n\t                l = queue[indexed[z++]];\n\t                out.push(l.apply(scope, args));\n\t                if (stop) {\n\t                    stop = oldstop;\n\t                    return out;\n\t                }\n\t            }\n\t            for (i = 0; i < ii; i++) {\n\t                l = listeners[i];\n\t                if (\"zIndex\" in l) {\n\t                    if (l.zIndex == indexed[z]) {\n\t                        out.push(l.apply(scope, args));\n\t                        if (stop) {\n\t                            break;\n\t                        }\n\t                        do {\n\t                            z++;\n\t                            l = queue[indexed[z]];\n\t                            l && out.push(l.apply(scope, args));\n\t                            if (stop) {\n\t                                break;\n\t                            }\n\t                        } while (l)\n\t                    } else {\n\t                        queue[l.zIndex] = l;\n\t                    }\n\t                } else {\n\t                    out.push(l.apply(scope, args));\n\t                    if (stop) {\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t            stop = oldstop;\n\t            current_event = ce;\n\t            return out;\n\t        };\n\t        // Undocumented. Debug only.\n\t        eve._events = events;\n\t    /*\\\n\t     * eve.listeners\n\t     [ method ]\n\t\n\t     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\t\n\t     > Arguments\n\t\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\t\n\t     = (array) array of event handlers\n\t    \\*/\n\t    eve.listeners = function (name) {\n\t        var names = name.split(separator),\n\t            e = events,\n\t            item,\n\t            items,\n\t            k,\n\t            i,\n\t            ii,\n\t            j,\n\t            jj,\n\t            nes,\n\t            es = [e],\n\t            out = [];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            nes = [];\n\t            for (j = 0, jj = es.length; j < jj; j++) {\n\t                e = es[j].n;\n\t                items = [e[names[i]], e[wildcard]];\n\t                k = 2;\n\t                while (k--) {\n\t                    item = items[k];\n\t                    if (item) {\n\t                        nes.push(item);\n\t                        out = out.concat(item.f || []);\n\t                    }\n\t                }\n\t            }\n\t            es = nes;\n\t        }\n\t        return out;\n\t    };\n\t    \n\t    /*\\\n\t     * eve.on\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n\t     | eve.on(\"*.under.*\", f);\n\t     | eve(\"mouse.under.floor\"); // triggers f\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n\t     > Example:\n\t     | eve.on(\"mouse\", eatIt)(2);\n\t     | eve.on(\"mouse\", scream);\n\t     | eve.on(\"mouse\", catchIt)(1);\n\t     * This will ensure that `catchIt` function will be called before `eatIt`.\n\t     *\n\t     * If you want to put your handler before non-indexed handlers, specify a negative value.\n\t     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n\t    \\*/\n\t    eve.on = function (name, f) {\n\t        name = String(name);\n\t        if (typeof f != \"function\") {\n\t            return function () {};\n\t        }\n\t        var names = name.split(comaseparator);\n\t        for (var i = 0, ii = names.length; i < ii; i++) {\n\t            (function (name) {\n\t                var names = name.split(separator),\n\t                    e = events,\n\t                    exist;\n\t                for (var i = 0, ii = names.length; i < ii; i++) {\n\t                    e = e.n;\n\t                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n\t                }\n\t                e.f = e.f || [];\n\t                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n\t                    exist = true;\n\t                    break;\n\t                }\n\t                !exist && e.f.push(f);\n\t            }(names[i]));\n\t        }\n\t        return function (zIndex) {\n\t            if (+zIndex == +zIndex) {\n\t                f.zIndex = +zIndex;\n\t            }\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.f\n\t     [ method ]\n\t     **\n\t     * Returns function that will fire given event with optional arguments.\n\t     * Arguments that will be passed to the result function will be also\n\t     * concated to the list of final arguments.\n\t     | el.onclick = eve.f(\"click\", 1, 2);\n\t     | eve.on(\"click\", function (a, b, c) {\n\t     |     console.log(a, b, c); // 1, 2, [event object]\n\t     | });\n\t     > Arguments\n\t     - event (string) event name\n\t     - varargs (…) and any other arguments\n\t     = (function) possible event handler function\n\t    \\*/\n\t    eve.f = function (event) {\n\t        var attrs = [].slice.call(arguments, 1);\n\t        return function () {\n\t            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.stop\n\t     [ method ]\n\t     **\n\t     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n\t    \\*/\n\t    eve.stop = function () {\n\t        stop = 1;\n\t    };\n\t    /*\\\n\t     * eve.nt\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     > Arguments\n\t     **\n\t     - subname (string) #optional subname of the event\n\t     **\n\t     = (string) name of the event, if `subname` is not specified\n\t     * or\n\t     = (boolean) `true`, if current event’s name contains `subname`\n\t    \\*/\n\t    eve.nt = function (subname) {\n\t        if (subname) {\n\t            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(current_event);\n\t        }\n\t        return current_event;\n\t    };\n\t    /*\\\n\t     * eve.nts\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     **\n\t     = (array) names of the event\n\t    \\*/\n\t    eve.nts = function () {\n\t        return current_event.split(separator);\n\t    };\n\t    /*\\\n\t     * eve.off\n\t     [ method ]\n\t     **\n\t     * Removes given function from the list of event listeners assigned to given name.\n\t     * If no arguments specified all the events will be cleared.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t    \\*/\n\t    /*\\\n\t     * eve.unbind\n\t     [ method ]\n\t     **\n\t     * See @eve.off\n\t    \\*/\n\t    eve.off = eve.unbind = function (name, f) {\n\t        if (!name) {\n\t            eve._events = events = {n: {}};\n\t            return;\n\t        }\n\t        var names = name.split(comaseparator);\n\t        if (names.length > 1) {\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                eve.off(names[i], f);\n\t            }\n\t            return;\n\t        }\n\t        names = name.split(separator);\n\t        var e,\n\t            key,\n\t            splice,\n\t            i, ii, j, jj,\n\t            cur = [events];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            for (j = 0; j < cur.length; j += splice.length - 2) {\n\t                splice = [j, 1];\n\t                e = cur[j].n;\n\t                if (names[i] != wildcard) {\n\t                    if (e[names[i]]) {\n\t                        splice.push(e[names[i]]);\n\t                    }\n\t                } else {\n\t                    for (key in e) if (e[has](key)) {\n\t                        splice.push(e[key]);\n\t                    }\n\t                }\n\t                cur.splice.apply(cur, splice);\n\t            }\n\t        }\n\t        for (i = 0, ii = cur.length; i < ii; i++) {\n\t            e = cur[i];\n\t            while (e.n) {\n\t                if (f) {\n\t                    if (e.f) {\n\t                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n\t                            e.f.splice(j, 1);\n\t                            break;\n\t                        }\n\t                        !e.f.length && delete e.f;\n\t                    }\n\t                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n\t                        var funcs = e.n[key].f;\n\t                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n\t                            funcs.splice(j, 1);\n\t                            break;\n\t                        }\n\t                        !funcs.length && delete e.n[key].f;\n\t                    }\n\t                } else {\n\t                    delete e.f;\n\t                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n\t                        delete e.n[key].f;\n\t                    }\n\t                }\n\t                e = e.n;\n\t            }\n\t        }\n\t    };\n\t    /*\\\n\t     * eve.once\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name to only run once then unbind itself.\n\t     | eve.once(\"login\", f);\n\t     | eve(\"login\"); // triggers f\n\t     | eve(\"login\"); // no listeners\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     = (function) same return function as @eve.on\n\t    \\*/\n\t    eve.once = function (name, f) {\n\t        var f2 = function () {\n\t            eve.unbind(name, f2);\n\t            return f.apply(this, arguments);\n\t        };\n\t        return eve.on(name, f2);\n\t    };\n\t    /*\\\n\t     * eve.version\n\t     [ property (string) ]\n\t     **\n\t     * Current version of the library.\n\t    \\*/\n\t    eve.version = version;\n\t    eve.toString = function () {\n\t        return \"You are running Eve \" + version;\n\t    };\n\t    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : ( true ? (!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() { return eve; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))) : (glob.eve = eve));\n\t})(this);\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @fileoverview gl-matrix - High performance matrix and vector operations\n\t * @author Brandon Jones\n\t * @author Colin MacKenzie IV\n\t * @version 2.3.2\n\t */\n\t\n\t/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\t\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\t\n\tThe above copyright notice and this permission notice shall be included in\n\tall copies or substantial portions of the Software.\n\t\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\tTHE SOFTWARE. */\n\t// END HEADER\n\t\n\texports.glMatrix = __webpack_require__(1);\n\texports.mat2 = __webpack_require__(15);\n\texports.mat2d = __webpack_require__(16);\n\texports.mat3 = __webpack_require__(5);\n\texports.mat4 = __webpack_require__(17);\n\texports.quat = __webpack_require__(18);\n\texports.vec2 = __webpack_require__(19);\n\texports.vec3 = __webpack_require__(6);\n\texports.vec4 = __webpack_require__(7);\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\t\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\t\n\tThe above copyright notice and this permission notice shall be included in\n\tall copies or substantial portions of the Software.\n\t\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\tTHE SOFTWARE. */\n\t\n\tvar glMatrix = __webpack_require__(1);\n\t\n\t/**\n\t * @class 2x2 Matrix\n\t * @name mat2\n\t */\n\tvar mat2 = {};\n\t\n\t/**\n\t * Creates a new identity mat2\n\t *\n\t * @returns {mat2} a new 2x2 matrix\n\t */\n\tmat2.create = function() {\n\t    var out = new glMatrix.ARRAY_TYPE(4);\n\t    out[0] = 1;\n\t    out[1] = 0;\n\t    out[2] = 0;\n\t    out[3] = 1;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Creates a new mat2 initialized with values from an existing matrix\n\t *\n\t * @param {mat2} a matrix to clone\n\t * @returns {mat2} a new 2x2 matrix\n\t */\n\tmat2.clone = function(a) {\n\t    var out = new glMatrix.ARRAY_TYPE(4);\n\t    out[0] = a[0];\n\t    out[1] = a[1];\n\t    out[2] = a[2];\n\t    out[3] = a[3];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Copy the values from one mat2 to another\n\t *\n\t * @param {mat2} out the receiving matrix\n\t * @param {mat2} a the source matrix\n\t * @returns {mat2} out\n\t */\n\tmat2.copy = function(out, a) {\n\t    out[0] = a[0];\n\t    out[1] = a[1];\n\t    out[2] = a[2];\n\t    out[3] = a[3];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Set a mat2 to the identity matrix\n\t *\n\t * @param {mat2} out the receiving matrix\n\t * @returns {mat2} out\n\t */\n\tmat2.identity = function(out) {\n\t    out[0] = 1;\n\t    out[1] = 0;\n\t    out[2] = 0;\n\t    out[3] = 1;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Create a new mat2 with the given values\n\t *\n\t * @param {Number} m00 Component in column 0, row 0 position (index 0)\n\t * @param {Number} m01 Component in column 0, row 1 position (index 1)\n\t * @param {Number} m10 Component in column 1, row 0 position (index 2)\n\t * @param {Number} m11 Component in column 1, row 1 position (index 3)\n\t * @returns {mat2} out A new 2x2 matrix\n\t */\n\tmat2.fromValues = function(m00, m01, m10, m11) {\n\t    var out = new glMatrix.ARRAY_TYPE(4);\n\t    out[0] = m00;\n\t    out[1] = m01;\n\t    out[2] = m10;\n\t    out[3] = m11;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Set the components of a mat2 to the given values\n\t *\n\t * @param {mat2} out the receiving matrix\n\t * @param {Number} m00 Component in column 0, row 0 position (index 0)\n\t * @param {Number} m01 Component in column 0, row 1 position (index 1)\n\t * @param {Number} m10 Component in column 1, row 0 position (index 2)\n\t * @param {Number} m11 Component in column 1, row 1 position (index 3)\n\t * @returns {mat2} out\n\t */\n\tmat2.set = function(out, m00, m01, m10, m11) {\n\t    out[0] = m00;\n\t    out[1] = m01;\n\t    out[2] = m10;\n\t    out[3] = m11;\n\t    return out;\n\t};\n\t\n\t\n\t/**\n\t * Transpose the values of a mat2\n\t *\n\t * @param {mat2} out the receiving matrix\n\t * @param {mat2} a the source matrix\n\t * @returns {mat2} out\n\t */\n\tmat2.transpose = function(out, a) {\n\t    // If we are transposing ourselves we can skip a few steps but have to cache some values\n\t    if (out === a) {\n\t        var a1 = a[1];\n\t        out[1] = a[2];\n\t        out[2] = a1;\n\t    } else {\n\t        out[0] = a[0];\n\t        out[1] = a[2];\n\t        out[2] = a[1];\n\t        out[3] = a[3];\n\t    }\n\t    \n\t    return out;\n\t};\n\t\n\t/**\n\t * Inverts a mat2\n\t *\n\t * @param {mat2} out the receiving matrix\n\t * @param {mat2} a the source matrix\n\t * @returns {mat2} out\n\t */\n\tmat2.invert = function(out, a) {\n\t    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n\t\n\t        // Calculate the determinant\n\t        det = a0 * a3 - a2 * a1;\n\t\n\t    if (!det) {\n\t        return null;\n\t    }\n\t    det = 1.0 / det;\n\t    \n\t    out[0] =  a3 * det;\n\t    out[1] = -a1 * det;\n\t    out[2] = -a2 * det;\n\t    out[3] =  a0 * det;\n\t\n\t    return out;\n\t};\n\t\n\t/**\n\t * Calculates the adjugate of a mat2\n\t *\n\t * @param {mat2} out the receiving matrix\n\t * @param {mat2} a the source matrix\n\t * @returns {mat2} out\n\t */\n\tmat2.adjoint = function(out, a) {\n\t    // Caching this value is nessecary if out == a\n\t    var a0 = a[0];\n\t    out[0] =  a[3];\n\t    out[1] = -a[1];\n\t    out[2] = -a[2];\n\t    out[3] =  a0;\n\t\n\t    return out;\n\t};\n\t\n\t/**\n\t * Calculates the determinant of a mat2\n\t *\n\t * @param {mat2} a the source matrix\n\t * @returns {Number} determinant of a\n\t */\n\tmat2.determinant = function (a) {\n\t    return a[0] * a[3] - a[2] * a[1];\n\t};\n\t\n\t/**\n\t * Multiplies two mat2's\n\t *\n\t * @param {mat2} out the receiving matrix\n\t * @param {mat2} a the first operand\n\t * @param {mat2} b the second operand\n\t * @returns {mat2} out\n\t */\n\tmat2.multiply = function (out, a, b) {\n\t    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n\t    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n\t    out[0] = a0 * b0 + a2 * b1;\n\t    out[1] = a1 * b0 + a3 * b1;\n\t    out[2] = a0 * b2 + a2 * b3;\n\t    out[3] = a1 * b2 + a3 * b3;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Alias for {@link mat2.multiply}\n\t * @function\n\t */\n\tmat2.mul = mat2.multiply;\n\t\n\t/**\n\t * Rotates a mat2 by the given angle\n\t *\n\t * @param {mat2} out the receiving matrix\n\t * @param {mat2} a the matrix to rotate\n\t * @param {Number} rad the angle to rotate the matrix by\n\t * @returns {mat2} out\n\t */\n\tmat2.rotate = function (out, a, rad) {\n\t    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n\t        s = Math.sin(rad),\n\t        c = Math.cos(rad);\n\t    out[0] = a0 *  c + a2 * s;\n\t    out[1] = a1 *  c + a3 * s;\n\t    out[2] = a0 * -s + a2 * c;\n\t    out[3] = a1 * -s + a3 * c;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Scales the mat2 by the dimensions in the given vec2\n\t *\n\t * @param {mat2} out the receiving matrix\n\t * @param {mat2} a the matrix to rotate\n\t * @param {vec2} v the vec2 to scale the matrix by\n\t * @returns {mat2} out\n\t **/\n\tmat2.scale = function(out, a, v) {\n\t    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n\t        v0 = v[0], v1 = v[1];\n\t    out[0] = a0 * v0;\n\t    out[1] = a1 * v0;\n\t    out[2] = a2 * v1;\n\t    out[3] = a3 * v1;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Creates a matrix from a given angle\n\t * This is equivalent to (but much faster than):\n\t *\n\t *     mat2.identity(dest);\n\t *     mat2.rotate(dest, dest, rad);\n\t *\n\t * @param {mat2} out mat2 receiving operation result\n\t * @param {Number} rad the angle to rotate the matrix by\n\t * @returns {mat2} out\n\t */\n\tmat2.fromRotation = function(out, rad) {\n\t    var s = Math.sin(rad),\n\t        c = Math.cos(rad);\n\t    out[0] = c;\n\t    out[1] = s;\n\t    out[2] = -s;\n\t    out[3] = c;\n\t    return out;\n\t}\n\t\n\t/**\n\t * Creates a matrix from a vector scaling\n\t * This is equivalent to (but much faster than):\n\t *\n\t *     mat2.identity(dest);\n\t *     mat2.scale(dest, dest, vec);\n\t *\n\t * @param {mat2} out mat2 receiving operation result\n\t * @param {vec2} v Scaling vector\n\t * @returns {mat2} out\n\t */\n\tmat2.fromScaling = function(out, v) {\n\t    out[0] = v[0];\n\t    out[1] = 0;\n\t    out[2] = 0;\n\t    out[3] = v[1];\n\t    return out;\n\t}\n\t\n\t/**\n\t * Returns a string representation of a mat2\n\t *\n\t * @param {mat2} mat matrix to represent as a string\n\t * @returns {String} string representation of the matrix\n\t */\n\tmat2.str = function (a) {\n\t    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n\t};\n\t\n\t/**\n\t * Returns Frobenius norm of a mat2\n\t *\n\t * @param {mat2} a the matrix to calculate Frobenius norm of\n\t * @returns {Number} Frobenius norm\n\t */\n\tmat2.frob = function (a) {\n\t    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\n\t};\n\t\n\t/**\n\t * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n\t * @param {mat2} L the lower triangular matrix \n\t * @param {mat2} D the diagonal matrix \n\t * @param {mat2} U the upper triangular matrix \n\t * @param {mat2} a the input matrix to factorize\n\t */\n\t\n\tmat2.LDU = function (L, D, U, a) { \n\t    L[2] = a[2]/a[0]; \n\t    U[0] = a[0]; \n\t    U[1] = a[1]; \n\t    U[3] = a[3] - L[2] * U[1]; \n\t    return [L, D, U];       \n\t}; \n\t\n\t/**\n\t * Adds two mat2's\n\t *\n\t * @param {mat2} out the receiving matrix\n\t * @param {mat2} a the first operand\n\t * @param {mat2} b the second operand\n\t * @returns {mat2} out\n\t */\n\tmat2.add = function(out, a, b) {\n\t    out[0] = a[0] + b[0];\n\t    out[1] = a[1] + b[1];\n\t    out[2] = a[2] + b[2];\n\t    out[3] = a[3] + b[3];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Subtracts matrix b from matrix a\n\t *\n\t * @param {mat2} out the receiving matrix\n\t * @param {mat2} a the first operand\n\t * @param {mat2} b the second operand\n\t * @returns {mat2} out\n\t */\n\tmat2.subtract = function(out, a, b) {\n\t    out[0] = a[0] - b[0];\n\t    out[1] = a[1] - b[1];\n\t    out[2] = a[2] - b[2];\n\t    out[3] = a[3] - b[3];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Alias for {@link mat2.subtract}\n\t * @function\n\t */\n\tmat2.sub = mat2.subtract;\n\t\n\t/**\n\t * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n\t *\n\t * @param {mat2} a The first matrix.\n\t * @param {mat2} b The second matrix.\n\t * @returns {Boolean} True if the matrices are equal, false otherwise.\n\t */\n\tmat2.exactEquals = function (a, b) {\n\t    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n\t};\n\t\n\t/**\n\t * Returns whether or not the matrices have approximately the same elements in the same position.\n\t *\n\t * @param {mat2} a The first matrix.\n\t * @param {mat2} b The second matrix.\n\t * @returns {Boolean} True if the matrices are equal, false otherwise.\n\t */\n\tmat2.equals = function (a, b) {\n\t    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n\t    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n\t    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n\t            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n\t            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n\t            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n\t};\n\t\n\t/**\n\t * Multiply each element of the matrix by a scalar.\n\t *\n\t * @param {mat2} out the receiving matrix\n\t * @param {mat2} a the matrix to scale\n\t * @param {Number} b amount to scale the matrix's elements by\n\t * @returns {mat2} out\n\t */\n\tmat2.multiplyScalar = function(out, a, b) {\n\t    out[0] = a[0] * b;\n\t    out[1] = a[1] * b;\n\t    out[2] = a[2] * b;\n\t    out[3] = a[3] * b;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n\t *\n\t * @param {mat2} out the receiving vector\n\t * @param {mat2} a the first operand\n\t * @param {mat2} b the second operand\n\t * @param {Number} scale the amount to scale b's elements by before adding\n\t * @returns {mat2} out\n\t */\n\tmat2.multiplyScalarAndAdd = function(out, a, b, scale) {\n\t    out[0] = a[0] + (b[0] * scale);\n\t    out[1] = a[1] + (b[1] * scale);\n\t    out[2] = a[2] + (b[2] * scale);\n\t    out[3] = a[3] + (b[3] * scale);\n\t    return out;\n\t};\n\t\n\tmodule.exports = mat2;\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\t\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\t\n\tThe above copyright notice and this permission notice shall be included in\n\tall copies or substantial portions of the Software.\n\t\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\tTHE SOFTWARE. */\n\t\n\tvar glMatrix = __webpack_require__(1);\n\t\n\t/**\n\t * @class 2x3 Matrix\n\t * @name mat2d\n\t * \n\t * @description \n\t * A mat2d contains six elements defined as:\n\t * <pre>\n\t * [a, c, tx,\n\t *  b, d, ty]\n\t * </pre>\n\t * This is a short form for the 3x3 matrix:\n\t * <pre>\n\t * [a, c, tx,\n\t *  b, d, ty,\n\t *  0, 0, 1]\n\t * </pre>\n\t * The last row is ignored so the array is shorter and operations are faster.\n\t */\n\tvar mat2d = {};\n\t\n\t/**\n\t * Creates a new identity mat2d\n\t *\n\t * @returns {mat2d} a new 2x3 matrix\n\t */\n\tmat2d.create = function() {\n\t    var out = new glMatrix.ARRAY_TYPE(6);\n\t    out[0] = 1;\n\t    out[1] = 0;\n\t    out[2] = 0;\n\t    out[3] = 1;\n\t    out[4] = 0;\n\t    out[5] = 0;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Creates a new mat2d initialized with values from an existing matrix\n\t *\n\t * @param {mat2d} a matrix to clone\n\t * @returns {mat2d} a new 2x3 matrix\n\t */\n\tmat2d.clone = function(a) {\n\t    var out = new glMatrix.ARRAY_TYPE(6);\n\t    out[0] = a[0];\n\t    out[1] = a[1];\n\t    out[2] = a[2];\n\t    out[3] = a[3];\n\t    out[4] = a[4];\n\t    out[5] = a[5];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Copy the values from one mat2d to another\n\t *\n\t * @param {mat2d} out the receiving matrix\n\t * @param {mat2d} a the source matrix\n\t * @returns {mat2d} out\n\t */\n\tmat2d.copy = function(out, a) {\n\t    out[0] = a[0];\n\t    out[1] = a[1];\n\t    out[2] = a[2];\n\t    out[3] = a[3];\n\t    out[4] = a[4];\n\t    out[5] = a[5];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Set a mat2d to the identity matrix\n\t *\n\t * @param {mat2d} out the receiving matrix\n\t * @returns {mat2d} out\n\t */\n\tmat2d.identity = function(out) {\n\t    out[0] = 1;\n\t    out[1] = 0;\n\t    out[2] = 0;\n\t    out[3] = 1;\n\t    out[4] = 0;\n\t    out[5] = 0;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Create a new mat2d with the given values\n\t *\n\t * @param {Number} a Component A (index 0)\n\t * @param {Number} b Component B (index 1)\n\t * @param {Number} c Component C (index 2)\n\t * @param {Number} d Component D (index 3)\n\t * @param {Number} tx Component TX (index 4)\n\t * @param {Number} ty Component TY (index 5)\n\t * @returns {mat2d} A new mat2d\n\t */\n\tmat2d.fromValues = function(a, b, c, d, tx, ty) {\n\t    var out = new glMatrix.ARRAY_TYPE(6);\n\t    out[0] = a;\n\t    out[1] = b;\n\t    out[2] = c;\n\t    out[3] = d;\n\t    out[4] = tx;\n\t    out[5] = ty;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Set the components of a mat2d to the given values\n\t *\n\t * @param {mat2d} out the receiving matrix\n\t * @param {Number} a Component A (index 0)\n\t * @param {Number} b Component B (index 1)\n\t * @param {Number} c Component C (index 2)\n\t * @param {Number} d Component D (index 3)\n\t * @param {Number} tx Component TX (index 4)\n\t * @param {Number} ty Component TY (index 5)\n\t * @returns {mat2d} out\n\t */\n\tmat2d.set = function(out, a, b, c, d, tx, ty) {\n\t    out[0] = a;\n\t    out[1] = b;\n\t    out[2] = c;\n\t    out[3] = d;\n\t    out[4] = tx;\n\t    out[5] = ty;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Inverts a mat2d\n\t *\n\t * @param {mat2d} out the receiving matrix\n\t * @param {mat2d} a the source matrix\n\t * @returns {mat2d} out\n\t */\n\tmat2d.invert = function(out, a) {\n\t    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],\n\t        atx = a[4], aty = a[5];\n\t\n\t    var det = aa * ad - ab * ac;\n\t    if(!det){\n\t        return null;\n\t    }\n\t    det = 1.0 / det;\n\t\n\t    out[0] = ad * det;\n\t    out[1] = -ab * det;\n\t    out[2] = -ac * det;\n\t    out[3] = aa * det;\n\t    out[4] = (ac * aty - ad * atx) * det;\n\t    out[5] = (ab * atx - aa * aty) * det;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Calculates the determinant of a mat2d\n\t *\n\t * @param {mat2d} a the source matrix\n\t * @returns {Number} determinant of a\n\t */\n\tmat2d.determinant = function (a) {\n\t    return a[0] * a[3] - a[1] * a[2];\n\t};\n\t\n\t/**\n\t * Multiplies two mat2d's\n\t *\n\t * @param {mat2d} out the receiving matrix\n\t * @param {mat2d} a the first operand\n\t * @param {mat2d} b the second operand\n\t * @returns {mat2d} out\n\t */\n\tmat2d.multiply = function (out, a, b) {\n\t    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n\t        b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n\t    out[0] = a0 * b0 + a2 * b1;\n\t    out[1] = a1 * b0 + a3 * b1;\n\t    out[2] = a0 * b2 + a2 * b3;\n\t    out[3] = a1 * b2 + a3 * b3;\n\t    out[4] = a0 * b4 + a2 * b5 + a4;\n\t    out[5] = a1 * b4 + a3 * b5 + a5;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Alias for {@link mat2d.multiply}\n\t * @function\n\t */\n\tmat2d.mul = mat2d.multiply;\n\t\n\t/**\n\t * Rotates a mat2d by the given angle\n\t *\n\t * @param {mat2d} out the receiving matrix\n\t * @param {mat2d} a the matrix to rotate\n\t * @param {Number} rad the angle to rotate the matrix by\n\t * @returns {mat2d} out\n\t */\n\tmat2d.rotate = function (out, a, rad) {\n\t    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n\t        s = Math.sin(rad),\n\t        c = Math.cos(rad);\n\t    out[0] = a0 *  c + a2 * s;\n\t    out[1] = a1 *  c + a3 * s;\n\t    out[2] = a0 * -s + a2 * c;\n\t    out[3] = a1 * -s + a3 * c;\n\t    out[4] = a4;\n\t    out[5] = a5;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Scales the mat2d by the dimensions in the given vec2\n\t *\n\t * @param {mat2d} out the receiving matrix\n\t * @param {mat2d} a the matrix to translate\n\t * @param {vec2} v the vec2 to scale the matrix by\n\t * @returns {mat2d} out\n\t **/\n\tmat2d.scale = function(out, a, v) {\n\t    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n\t        v0 = v[0], v1 = v[1];\n\t    out[0] = a0 * v0;\n\t    out[1] = a1 * v0;\n\t    out[2] = a2 * v1;\n\t    out[3] = a3 * v1;\n\t    out[4] = a4;\n\t    out[5] = a5;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Translates the mat2d by the dimensions in the given vec2\n\t *\n\t * @param {mat2d} out the receiving matrix\n\t * @param {mat2d} a the matrix to translate\n\t * @param {vec2} v the vec2 to translate the matrix by\n\t * @returns {mat2d} out\n\t **/\n\tmat2d.translate = function(out, a, v) {\n\t    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n\t        v0 = v[0], v1 = v[1];\n\t    out[0] = a0;\n\t    out[1] = a1;\n\t    out[2] = a2;\n\t    out[3] = a3;\n\t    out[4] = a0 * v0 + a2 * v1 + a4;\n\t    out[5] = a1 * v0 + a3 * v1 + a5;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Creates a matrix from a given angle\n\t * This is equivalent to (but much faster than):\n\t *\n\t *     mat2d.identity(dest);\n\t *     mat2d.rotate(dest, dest, rad);\n\t *\n\t * @param {mat2d} out mat2d receiving operation result\n\t * @param {Number} rad the angle to rotate the matrix by\n\t * @returns {mat2d} out\n\t */\n\tmat2d.fromRotation = function(out, rad) {\n\t    var s = Math.sin(rad), c = Math.cos(rad);\n\t    out[0] = c;\n\t    out[1] = s;\n\t    out[2] = -s;\n\t    out[3] = c;\n\t    out[4] = 0;\n\t    out[5] = 0;\n\t    return out;\n\t}\n\t\n\t/**\n\t * Creates a matrix from a vector scaling\n\t * This is equivalent to (but much faster than):\n\t *\n\t *     mat2d.identity(dest);\n\t *     mat2d.scale(dest, dest, vec);\n\t *\n\t * @param {mat2d} out mat2d receiving operation result\n\t * @param {vec2} v Scaling vector\n\t * @returns {mat2d} out\n\t */\n\tmat2d.fromScaling = function(out, v) {\n\t    out[0] = v[0];\n\t    out[1] = 0;\n\t    out[2] = 0;\n\t    out[3] = v[1];\n\t    out[4] = 0;\n\t    out[5] = 0;\n\t    return out;\n\t}\n\t\n\t/**\n\t * Creates a matrix from a vector translation\n\t * This is equivalent to (but much faster than):\n\t *\n\t *     mat2d.identity(dest);\n\t *     mat2d.translate(dest, dest, vec);\n\t *\n\t * @param {mat2d} out mat2d receiving operation result\n\t * @param {vec2} v Translation vector\n\t * @returns {mat2d} out\n\t */\n\tmat2d.fromTranslation = function(out, v) {\n\t    out[0] = 1;\n\t    out[1] = 0;\n\t    out[2] = 0;\n\t    out[3] = 1;\n\t    out[4] = v[0];\n\t    out[5] = v[1];\n\t    return out;\n\t}\n\t\n\t/**\n\t * Returns a string representation of a mat2d\n\t *\n\t * @param {mat2d} a matrix to represent as a string\n\t * @returns {String} string representation of the matrix\n\t */\n\tmat2d.str = function (a) {\n\t    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n\t                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n\t};\n\t\n\t/**\n\t * Returns Frobenius norm of a mat2d\n\t *\n\t * @param {mat2d} a the matrix to calculate Frobenius norm of\n\t * @returns {Number} Frobenius norm\n\t */\n\tmat2d.frob = function (a) { \n\t    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n\t}; \n\t\n\t/**\n\t * Adds two mat2d's\n\t *\n\t * @param {mat2d} out the receiving matrix\n\t * @param {mat2d} a the first operand\n\t * @param {mat2d} b the second operand\n\t * @returns {mat2d} out\n\t */\n\tmat2d.add = function(out, a, b) {\n\t    out[0] = a[0] + b[0];\n\t    out[1] = a[1] + b[1];\n\t    out[2] = a[2] + b[2];\n\t    out[3] = a[3] + b[3];\n\t    out[4] = a[4] + b[4];\n\t    out[5] = a[5] + b[5];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Subtracts matrix b from matrix a\n\t *\n\t * @param {mat2d} out the receiving matrix\n\t * @param {mat2d} a the first operand\n\t * @param {mat2d} b the second operand\n\t * @returns {mat2d} out\n\t */\n\tmat2d.subtract = function(out, a, b) {\n\t    out[0] = a[0] - b[0];\n\t    out[1] = a[1] - b[1];\n\t    out[2] = a[2] - b[2];\n\t    out[3] = a[3] - b[3];\n\t    out[4] = a[4] - b[4];\n\t    out[5] = a[5] - b[5];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Alias for {@link mat2d.subtract}\n\t * @function\n\t */\n\tmat2d.sub = mat2d.subtract;\n\t\n\t/**\n\t * Multiply each element of the matrix by a scalar.\n\t *\n\t * @param {mat2d} out the receiving matrix\n\t * @param {mat2d} a the matrix to scale\n\t * @param {Number} b amount to scale the matrix's elements by\n\t * @returns {mat2d} out\n\t */\n\tmat2d.multiplyScalar = function(out, a, b) {\n\t    out[0] = a[0] * b;\n\t    out[1] = a[1] * b;\n\t    out[2] = a[2] * b;\n\t    out[3] = a[3] * b;\n\t    out[4] = a[4] * b;\n\t    out[5] = a[5] * b;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n\t *\n\t * @param {mat2d} out the receiving vector\n\t * @param {mat2d} a the first operand\n\t * @param {mat2d} b the second operand\n\t * @param {Number} scale the amount to scale b's elements by before adding\n\t * @returns {mat2d} out\n\t */\n\tmat2d.multiplyScalarAndAdd = function(out, a, b, scale) {\n\t    out[0] = a[0] + (b[0] * scale);\n\t    out[1] = a[1] + (b[1] * scale);\n\t    out[2] = a[2] + (b[2] * scale);\n\t    out[3] = a[3] + (b[3] * scale);\n\t    out[4] = a[4] + (b[4] * scale);\n\t    out[5] = a[5] + (b[5] * scale);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n\t *\n\t * @param {mat2d} a The first matrix.\n\t * @param {mat2d} b The second matrix.\n\t * @returns {Boolean} True if the matrices are equal, false otherwise.\n\t */\n\tmat2d.exactEquals = function (a, b) {\n\t    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n\t};\n\t\n\t/**\n\t * Returns whether or not the matrices have approximately the same elements in the same position.\n\t *\n\t * @param {mat2d} a The first matrix.\n\t * @param {mat2d} b The second matrix.\n\t * @returns {Boolean} True if the matrices are equal, false otherwise.\n\t */\n\tmat2d.equals = function (a, b) {\n\t    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n\t    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n\t    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n\t            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n\t            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n\t            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n\t            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n\t            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));\n\t};\n\t\n\tmodule.exports = mat2d;\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\t\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\t\n\tThe above copyright notice and this permission notice shall be included in\n\tall copies or substantial portions of the Software.\n\t\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\tTHE SOFTWARE. */\n\t\n\tvar glMatrix = __webpack_require__(1);\n\t\n\t/**\n\t * @class 4x4 Matrix\n\t * @name mat4\n\t */\n\tvar mat4 = {\n\t  scalar: {},\n\t  SIMD: {},\n\t};\n\t\n\t/**\n\t * Creates a new identity mat4\n\t *\n\t * @returns {mat4} a new 4x4 matrix\n\t */\n\tmat4.create = function() {\n\t    var out = new glMatrix.ARRAY_TYPE(16);\n\t    out[0] = 1;\n\t    out[1] = 0;\n\t    out[2] = 0;\n\t    out[3] = 0;\n\t    out[4] = 0;\n\t    out[5] = 1;\n\t    out[6] = 0;\n\t    out[7] = 0;\n\t    out[8] = 0;\n\t    out[9] = 0;\n\t    out[10] = 1;\n\t    out[11] = 0;\n\t    out[12] = 0;\n\t    out[13] = 0;\n\t    out[14] = 0;\n\t    out[15] = 1;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Creates a new mat4 initialized with values from an existing matrix\n\t *\n\t * @param {mat4} a matrix to clone\n\t * @returns {mat4} a new 4x4 matrix\n\t */\n\tmat4.clone = function(a) {\n\t    var out = new glMatrix.ARRAY_TYPE(16);\n\t    out[0] = a[0];\n\t    out[1] = a[1];\n\t    out[2] = a[2];\n\t    out[3] = a[3];\n\t    out[4] = a[4];\n\t    out[5] = a[5];\n\t    out[6] = a[6];\n\t    out[7] = a[7];\n\t    out[8] = a[8];\n\t    out[9] = a[9];\n\t    out[10] = a[10];\n\t    out[11] = a[11];\n\t    out[12] = a[12];\n\t    out[13] = a[13];\n\t    out[14] = a[14];\n\t    out[15] = a[15];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Copy the values from one mat4 to another\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the source matrix\n\t * @returns {mat4} out\n\t */\n\tmat4.copy = function(out, a) {\n\t    out[0] = a[0];\n\t    out[1] = a[1];\n\t    out[2] = a[2];\n\t    out[3] = a[3];\n\t    out[4] = a[4];\n\t    out[5] = a[5];\n\t    out[6] = a[6];\n\t    out[7] = a[7];\n\t    out[8] = a[8];\n\t    out[9] = a[9];\n\t    out[10] = a[10];\n\t    out[11] = a[11];\n\t    out[12] = a[12];\n\t    out[13] = a[13];\n\t    out[14] = a[14];\n\t    out[15] = a[15];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Create a new mat4 with the given values\n\t *\n\t * @param {Number} m00 Component in column 0, row 0 position (index 0)\n\t * @param {Number} m01 Component in column 0, row 1 position (index 1)\n\t * @param {Number} m02 Component in column 0, row 2 position (index 2)\n\t * @param {Number} m03 Component in column 0, row 3 position (index 3)\n\t * @param {Number} m10 Component in column 1, row 0 position (index 4)\n\t * @param {Number} m11 Component in column 1, row 1 position (index 5)\n\t * @param {Number} m12 Component in column 1, row 2 position (index 6)\n\t * @param {Number} m13 Component in column 1, row 3 position (index 7)\n\t * @param {Number} m20 Component in column 2, row 0 position (index 8)\n\t * @param {Number} m21 Component in column 2, row 1 position (index 9)\n\t * @param {Number} m22 Component in column 2, row 2 position (index 10)\n\t * @param {Number} m23 Component in column 2, row 3 position (index 11)\n\t * @param {Number} m30 Component in column 3, row 0 position (index 12)\n\t * @param {Number} m31 Component in column 3, row 1 position (index 13)\n\t * @param {Number} m32 Component in column 3, row 2 position (index 14)\n\t * @param {Number} m33 Component in column 3, row 3 position (index 15)\n\t * @returns {mat4} A new mat4\n\t */\n\tmat4.fromValues = function(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n\t    var out = new glMatrix.ARRAY_TYPE(16);\n\t    out[0] = m00;\n\t    out[1] = m01;\n\t    out[2] = m02;\n\t    out[3] = m03;\n\t    out[4] = m10;\n\t    out[5] = m11;\n\t    out[6] = m12;\n\t    out[7] = m13;\n\t    out[8] = m20;\n\t    out[9] = m21;\n\t    out[10] = m22;\n\t    out[11] = m23;\n\t    out[12] = m30;\n\t    out[13] = m31;\n\t    out[14] = m32;\n\t    out[15] = m33;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Set the components of a mat4 to the given values\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {Number} m00 Component in column 0, row 0 position (index 0)\n\t * @param {Number} m01 Component in column 0, row 1 position (index 1)\n\t * @param {Number} m02 Component in column 0, row 2 position (index 2)\n\t * @param {Number} m03 Component in column 0, row 3 position (index 3)\n\t * @param {Number} m10 Component in column 1, row 0 position (index 4)\n\t * @param {Number} m11 Component in column 1, row 1 position (index 5)\n\t * @param {Number} m12 Component in column 1, row 2 position (index 6)\n\t * @param {Number} m13 Component in column 1, row 3 position (index 7)\n\t * @param {Number} m20 Component in column 2, row 0 position (index 8)\n\t * @param {Number} m21 Component in column 2, row 1 position (index 9)\n\t * @param {Number} m22 Component in column 2, row 2 position (index 10)\n\t * @param {Number} m23 Component in column 2, row 3 position (index 11)\n\t * @param {Number} m30 Component in column 3, row 0 position (index 12)\n\t * @param {Number} m31 Component in column 3, row 1 position (index 13)\n\t * @param {Number} m32 Component in column 3, row 2 position (index 14)\n\t * @param {Number} m33 Component in column 3, row 3 position (index 15)\n\t * @returns {mat4} out\n\t */\n\tmat4.set = function(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n\t    out[0] = m00;\n\t    out[1] = m01;\n\t    out[2] = m02;\n\t    out[3] = m03;\n\t    out[4] = m10;\n\t    out[5] = m11;\n\t    out[6] = m12;\n\t    out[7] = m13;\n\t    out[8] = m20;\n\t    out[9] = m21;\n\t    out[10] = m22;\n\t    out[11] = m23;\n\t    out[12] = m30;\n\t    out[13] = m31;\n\t    out[14] = m32;\n\t    out[15] = m33;\n\t    return out;\n\t};\n\t\n\t\n\t/**\n\t * Set a mat4 to the identity matrix\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @returns {mat4} out\n\t */\n\tmat4.identity = function(out) {\n\t    out[0] = 1;\n\t    out[1] = 0;\n\t    out[2] = 0;\n\t    out[3] = 0;\n\t    out[4] = 0;\n\t    out[5] = 1;\n\t    out[6] = 0;\n\t    out[7] = 0;\n\t    out[8] = 0;\n\t    out[9] = 0;\n\t    out[10] = 1;\n\t    out[11] = 0;\n\t    out[12] = 0;\n\t    out[13] = 0;\n\t    out[14] = 0;\n\t    out[15] = 1;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Transpose the values of a mat4 not using SIMD\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the source matrix\n\t * @returns {mat4} out\n\t */\n\tmat4.scalar.transpose = function(out, a) {\n\t    // If we are transposing ourselves we can skip a few steps but have to cache some values\n\t    if (out === a) {\n\t        var a01 = a[1], a02 = a[2], a03 = a[3],\n\t            a12 = a[6], a13 = a[7],\n\t            a23 = a[11];\n\t\n\t        out[1] = a[4];\n\t        out[2] = a[8];\n\t        out[3] = a[12];\n\t        out[4] = a01;\n\t        out[6] = a[9];\n\t        out[7] = a[13];\n\t        out[8] = a02;\n\t        out[9] = a12;\n\t        out[11] = a[14];\n\t        out[12] = a03;\n\t        out[13] = a13;\n\t        out[14] = a23;\n\t    } else {\n\t        out[0] = a[0];\n\t        out[1] = a[4];\n\t        out[2] = a[8];\n\t        out[3] = a[12];\n\t        out[4] = a[1];\n\t        out[5] = a[5];\n\t        out[6] = a[9];\n\t        out[7] = a[13];\n\t        out[8] = a[2];\n\t        out[9] = a[6];\n\t        out[10] = a[10];\n\t        out[11] = a[14];\n\t        out[12] = a[3];\n\t        out[13] = a[7];\n\t        out[14] = a[11];\n\t        out[15] = a[15];\n\t    }\n\t\n\t    return out;\n\t};\n\t\n\t/**\n\t * Transpose the values of a mat4 using SIMD\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the source matrix\n\t * @returns {mat4} out\n\t */\n\tmat4.SIMD.transpose = function(out, a) {\n\t    var a0, a1, a2, a3,\n\t        tmp01, tmp23,\n\t        out0, out1, out2, out3;\n\t\n\t    a0 = SIMD.Float32x4.load(a, 0);\n\t    a1 = SIMD.Float32x4.load(a, 4);\n\t    a2 = SIMD.Float32x4.load(a, 8);\n\t    a3 = SIMD.Float32x4.load(a, 12);\n\t\n\t    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n\t    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n\t    out0  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);\n\t    out1  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);\n\t    SIMD.Float32x4.store(out, 0,  out0);\n\t    SIMD.Float32x4.store(out, 4,  out1);\n\t\n\t    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n\t    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n\t    out2  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);\n\t    out3  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);\n\t    SIMD.Float32x4.store(out, 8,  out2);\n\t    SIMD.Float32x4.store(out, 12, out3);\n\t\n\t    return out;\n\t};\n\t\n\t/**\n\t * Transpse a mat4 using SIMD if available and enabled\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the source matrix\n\t * @returns {mat4} out\n\t */\n\tmat4.transpose = glMatrix.USE_SIMD ? mat4.SIMD.transpose : mat4.scalar.transpose;\n\t\n\t/**\n\t * Inverts a mat4 not using SIMD\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the source matrix\n\t * @returns {mat4} out\n\t */\n\tmat4.scalar.invert = function(out, a) {\n\t    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n\t        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n\t        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n\t        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\t\n\t        b00 = a00 * a11 - a01 * a10,\n\t        b01 = a00 * a12 - a02 * a10,\n\t        b02 = a00 * a13 - a03 * a10,\n\t        b03 = a01 * a12 - a02 * a11,\n\t        b04 = a01 * a13 - a03 * a11,\n\t        b05 = a02 * a13 - a03 * a12,\n\t        b06 = a20 * a31 - a21 * a30,\n\t        b07 = a20 * a32 - a22 * a30,\n\t        b08 = a20 * a33 - a23 * a30,\n\t        b09 = a21 * a32 - a22 * a31,\n\t        b10 = a21 * a33 - a23 * a31,\n\t        b11 = a22 * a33 - a23 * a32,\n\t\n\t        // Calculate the determinant\n\t        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\t\n\t    if (!det) {\n\t        return null;\n\t    }\n\t    det = 1.0 / det;\n\t\n\t    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n\t    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n\t    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n\t    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n\t    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n\t    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n\t    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n\t    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n\t    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\t    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\t    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\t    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n\t    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n\t    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n\t    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n\t    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\t\n\t    return out;\n\t};\n\t\n\t/**\n\t * Inverts a mat4 using SIMD\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the source matrix\n\t * @returns {mat4} out\n\t */\n\tmat4.SIMD.invert = function(out, a) {\n\t  var row0, row1, row2, row3,\n\t      tmp1,\n\t      minor0, minor1, minor2, minor3,\n\t      det,\n\t      a0 = SIMD.Float32x4.load(a, 0),\n\t      a1 = SIMD.Float32x4.load(a, 4),\n\t      a2 = SIMD.Float32x4.load(a, 8),\n\t      a3 = SIMD.Float32x4.load(a, 12);\n\t\n\t  // Compute matrix adjugate\n\t  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n\t  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n\t  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);\n\t  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);\n\t  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n\t  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n\t  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);\n\t  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);\n\t\n\t  tmp1   = SIMD.Float32x4.mul(row2, row3);\n\t  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n\t  minor0 = SIMD.Float32x4.mul(row1, tmp1);\n\t  minor1 = SIMD.Float32x4.mul(row0, tmp1);\n\t  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n\t  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);\n\t  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);\n\t  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);\n\t\n\t  tmp1   = SIMD.Float32x4.mul(row1, row2);\n\t  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n\t  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);\n\t  minor3 = SIMD.Float32x4.mul(row0, tmp1);\n\t  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n\t  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));\n\t  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);\n\t  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);\n\t\n\t  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);\n\t  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n\t  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);\n\t  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);\n\t  minor2 = SIMD.Float32x4.mul(row0, tmp1);\n\t  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n\t  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));\n\t  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);\n\t  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);\n\t\n\t  tmp1   = SIMD.Float32x4.mul(row0, row1);\n\t  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n\t  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);\n\t  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);\n\t  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n\t  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);\n\t  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));\n\t\n\t  tmp1   = SIMD.Float32x4.mul(row0, row3);\n\t  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n\t  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));\n\t  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);\n\t  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n\t  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);\n\t  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));\n\t\n\t  tmp1   = SIMD.Float32x4.mul(row0, row2);\n\t  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n\t  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);\n\t  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));\n\t  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n\t  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));\n\t  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);\n\t\n\t  // Compute matrix determinant\n\t  det   = SIMD.Float32x4.mul(row0, minor0);\n\t  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 2, 3, 0, 1), det);\n\t  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 1, 0, 3, 2), det);\n\t  tmp1  = SIMD.Float32x4.reciprocalApproximation(det);\n\t  det   = SIMD.Float32x4.sub(\n\t               SIMD.Float32x4.add(tmp1, tmp1),\n\t               SIMD.Float32x4.mul(det, SIMD.Float32x4.mul(tmp1, tmp1)));\n\t  det   = SIMD.Float32x4.swizzle(det, 0, 0, 0, 0);\n\t  if (!det) {\n\t      return null;\n\t  }\n\t\n\t  // Compute matrix inverse\n\t  SIMD.Float32x4.store(out, 0,  SIMD.Float32x4.mul(det, minor0));\n\t  SIMD.Float32x4.store(out, 4,  SIMD.Float32x4.mul(det, minor1));\n\t  SIMD.Float32x4.store(out, 8,  SIMD.Float32x4.mul(det, minor2));\n\t  SIMD.Float32x4.store(out, 12, SIMD.Float32x4.mul(det, minor3));\n\t  return out;\n\t}\n\t\n\t/**\n\t * Inverts a mat4 using SIMD if available and enabled\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the source matrix\n\t * @returns {mat4} out\n\t */\n\tmat4.invert = glMatrix.USE_SIMD ? mat4.SIMD.invert : mat4.scalar.invert;\n\t\n\t/**\n\t * Calculates the adjugate of a mat4 not using SIMD\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the source matrix\n\t * @returns {mat4} out\n\t */\n\tmat4.scalar.adjoint = function(out, a) {\n\t    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n\t        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n\t        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n\t        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\t\n\t    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n\t    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n\t    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n\t    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n\t    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n\t    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n\t    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n\t    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n\t    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n\t    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n\t    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n\t    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n\t    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n\t    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n\t    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n\t    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n\t    return out;\n\t};\n\t\n\t/**\n\t * Calculates the adjugate of a mat4 using SIMD\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the source matrix\n\t * @returns {mat4} out\n\t */\n\tmat4.SIMD.adjoint = function(out, a) {\n\t  var a0, a1, a2, a3;\n\t  var row0, row1, row2, row3;\n\t  var tmp1;\n\t  var minor0, minor1, minor2, minor3;\n\t\n\t  var a0 = SIMD.Float32x4.load(a, 0);\n\t  var a1 = SIMD.Float32x4.load(a, 4);\n\t  var a2 = SIMD.Float32x4.load(a, 8);\n\t  var a3 = SIMD.Float32x4.load(a, 12);\n\t\n\t  // Transpose the source matrix.  Sort of.  Not a true transpose operation\n\t  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n\t  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n\t  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);\n\t  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);\n\t\n\t  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n\t  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n\t  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);\n\t  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);\n\t\n\t  tmp1   = SIMD.Float32x4.mul(row2, row3);\n\t  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n\t  minor0 = SIMD.Float32x4.mul(row1, tmp1);\n\t  minor1 = SIMD.Float32x4.mul(row0, tmp1);\n\t  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n\t  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);\n\t  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);\n\t  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);\n\t\n\t  tmp1   = SIMD.Float32x4.mul(row1, row2);\n\t  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n\t  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);\n\t  minor3 = SIMD.Float32x4.mul(row0, tmp1);\n\t  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n\t  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));\n\t  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);\n\t  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);\n\t\n\t  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);\n\t  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n\t  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);\n\t  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);\n\t  minor2 = SIMD.Float32x4.mul(row0, tmp1);\n\t  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n\t  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));\n\t  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);\n\t  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);\n\t\n\t  tmp1   = SIMD.Float32x4.mul(row0, row1);\n\t  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n\t  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);\n\t  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);\n\t  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n\t  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);\n\t  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));\n\t\n\t  tmp1   = SIMD.Float32x4.mul(row0, row3);\n\t  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n\t  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));\n\t  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);\n\t  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n\t  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);\n\t  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));\n\t\n\t  tmp1   = SIMD.Float32x4.mul(row0, row2);\n\t  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n\t  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);\n\t  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));\n\t  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n\t  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));\n\t  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);\n\t\n\t  SIMD.Float32x4.store(out, 0,  minor0);\n\t  SIMD.Float32x4.store(out, 4,  minor1);\n\t  SIMD.Float32x4.store(out, 8,  minor2);\n\t  SIMD.Float32x4.store(out, 12, minor3);\n\t  return out;\n\t};\n\t\n\t/**\n\t * Calculates the adjugate of a mat4 using SIMD if available and enabled\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the source matrix\n\t * @returns {mat4} out\n\t */\n\t mat4.adjoint = glMatrix.USE_SIMD ? mat4.SIMD.adjoint : mat4.scalar.adjoint;\n\t\n\t/**\n\t * Calculates the determinant of a mat4\n\t *\n\t * @param {mat4} a the source matrix\n\t * @returns {Number} determinant of a\n\t */\n\tmat4.determinant = function (a) {\n\t    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n\t        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n\t        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n\t        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\t\n\t        b00 = a00 * a11 - a01 * a10,\n\t        b01 = a00 * a12 - a02 * a10,\n\t        b02 = a00 * a13 - a03 * a10,\n\t        b03 = a01 * a12 - a02 * a11,\n\t        b04 = a01 * a13 - a03 * a11,\n\t        b05 = a02 * a13 - a03 * a12,\n\t        b06 = a20 * a31 - a21 * a30,\n\t        b07 = a20 * a32 - a22 * a30,\n\t        b08 = a20 * a33 - a23 * a30,\n\t        b09 = a21 * a32 - a22 * a31,\n\t        b10 = a21 * a33 - a23 * a31,\n\t        b11 = a22 * a33 - a23 * a32;\n\t\n\t    // Calculate the determinant\n\t    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\t};\n\t\n\t/**\n\t * Multiplies two mat4's explicitly using SIMD\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the first operand, must be a Float32Array\n\t * @param {mat4} b the second operand, must be a Float32Array\n\t * @returns {mat4} out\n\t */\n\tmat4.SIMD.multiply = function (out, a, b) {\n\t    var a0 = SIMD.Float32x4.load(a, 0);\n\t    var a1 = SIMD.Float32x4.load(a, 4);\n\t    var a2 = SIMD.Float32x4.load(a, 8);\n\t    var a3 = SIMD.Float32x4.load(a, 12);\n\t\n\t    var b0 = SIMD.Float32x4.load(b, 0);\n\t    var out0 = SIMD.Float32x4.add(\n\t                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 0, 0, 0, 0), a0),\n\t                   SIMD.Float32x4.add(\n\t                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 1, 1, 1, 1), a1),\n\t                       SIMD.Float32x4.add(\n\t                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 2, 2, 2, 2), a2),\n\t                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 3, 3, 3, 3), a3))));\n\t    SIMD.Float32x4.store(out, 0, out0);\n\t\n\t    var b1 = SIMD.Float32x4.load(b, 4);\n\t    var out1 = SIMD.Float32x4.add(\n\t                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 0, 0, 0, 0), a0),\n\t                   SIMD.Float32x4.add(\n\t                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 1, 1, 1, 1), a1),\n\t                       SIMD.Float32x4.add(\n\t                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 2, 2, 2, 2), a2),\n\t                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 3, 3, 3, 3), a3))));\n\t    SIMD.Float32x4.store(out, 4, out1);\n\t\n\t    var b2 = SIMD.Float32x4.load(b, 8);\n\t    var out2 = SIMD.Float32x4.add(\n\t                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 0, 0, 0, 0), a0),\n\t                   SIMD.Float32x4.add(\n\t                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 1, 1, 1, 1), a1),\n\t                       SIMD.Float32x4.add(\n\t                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 2, 2, 2, 2), a2),\n\t                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 3, 3, 3, 3), a3))));\n\t    SIMD.Float32x4.store(out, 8, out2);\n\t\n\t    var b3 = SIMD.Float32x4.load(b, 12);\n\t    var out3 = SIMD.Float32x4.add(\n\t                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 0, 0, 0, 0), a0),\n\t                   SIMD.Float32x4.add(\n\t                        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 1, 1, 1, 1), a1),\n\t                        SIMD.Float32x4.add(\n\t                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 2, 2, 2, 2), a2),\n\t                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 3, 3, 3, 3), a3))));\n\t    SIMD.Float32x4.store(out, 12, out3);\n\t\n\t    return out;\n\t};\n\t\n\t/**\n\t * Multiplies two mat4's explicitly not using SIMD\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the first operand\n\t * @param {mat4} b the second operand\n\t * @returns {mat4} out\n\t */\n\tmat4.scalar.multiply = function (out, a, b) {\n\t    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n\t        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n\t        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n\t        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\t\n\t    // Cache only the current line of the second matrix\n\t    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n\t    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n\t    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n\t    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n\t    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\t\n\t    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n\t    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n\t    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n\t    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n\t    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\t\n\t    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n\t    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n\t    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n\t    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n\t    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\t\n\t    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n\t    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n\t    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n\t    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n\t    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Multiplies two mat4's using SIMD if available and enabled\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the first operand\n\t * @param {mat4} b the second operand\n\t * @returns {mat4} out\n\t */\n\tmat4.multiply = glMatrix.USE_SIMD ? mat4.SIMD.multiply : mat4.scalar.multiply;\n\t\n\t/**\n\t * Alias for {@link mat4.multiply}\n\t * @function\n\t */\n\tmat4.mul = mat4.multiply;\n\t\n\t/**\n\t * Translate a mat4 by the given vector not using SIMD\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the matrix to translate\n\t * @param {vec3} v vector to translate by\n\t * @returns {mat4} out\n\t */\n\tmat4.scalar.translate = function (out, a, v) {\n\t    var x = v[0], y = v[1], z = v[2],\n\t        a00, a01, a02, a03,\n\t        a10, a11, a12, a13,\n\t        a20, a21, a22, a23;\n\t\n\t    if (a === out) {\n\t        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n\t        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n\t        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n\t        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n\t    } else {\n\t        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n\t        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n\t        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\t\n\t        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n\t        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n\t        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\t\n\t        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n\t        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n\t        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n\t        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n\t    }\n\t\n\t    return out;\n\t};\n\t\n\t/**\n\t * Translates a mat4 by the given vector using SIMD\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the matrix to translate\n\t * @param {vec3} v vector to translate by\n\t * @returns {mat4} out\n\t */\n\tmat4.SIMD.translate = function (out, a, v) {\n\t    var a0 = SIMD.Float32x4.load(a, 0),\n\t        a1 = SIMD.Float32x4.load(a, 4),\n\t        a2 = SIMD.Float32x4.load(a, 8),\n\t        a3 = SIMD.Float32x4.load(a, 12),\n\t        vec = SIMD.Float32x4(v[0], v[1], v[2] , 0);\n\t\n\t    if (a !== out) {\n\t        out[0] = a[0]; out[1] = a[1]; out[2] = a[2]; out[3] = a[3];\n\t        out[4] = a[4]; out[5] = a[5]; out[6] = a[6]; out[7] = a[7];\n\t        out[8] = a[8]; out[9] = a[9]; out[10] = a[10]; out[11] = a[11];\n\t    }\n\t\n\t    a0 = SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0));\n\t    a1 = SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1));\n\t    a2 = SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2));\n\t\n\t    var t0 = SIMD.Float32x4.add(a0, SIMD.Float32x4.add(a1, SIMD.Float32x4.add(a2, a3)));\n\t    SIMD.Float32x4.store(out, 12, t0);\n\t\n\t    return out;\n\t};\n\t\n\t/**\n\t * Translates a mat4 by the given vector using SIMD if available and enabled\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the matrix to translate\n\t * @param {vec3} v vector to translate by\n\t * @returns {mat4} out\n\t */\n\tmat4.translate = glMatrix.USE_SIMD ? mat4.SIMD.translate : mat4.scalar.translate;\n\t\n\t/**\n\t * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the matrix to scale\n\t * @param {vec3} v the vec3 to scale the matrix by\n\t * @returns {mat4} out\n\t **/\n\tmat4.scalar.scale = function(out, a, v) {\n\t    var x = v[0], y = v[1], z = v[2];\n\t\n\t    out[0] = a[0] * x;\n\t    out[1] = a[1] * x;\n\t    out[2] = a[2] * x;\n\t    out[3] = a[3] * x;\n\t    out[4] = a[4] * y;\n\t    out[5] = a[5] * y;\n\t    out[6] = a[6] * y;\n\t    out[7] = a[7] * y;\n\t    out[8] = a[8] * z;\n\t    out[9] = a[9] * z;\n\t    out[10] = a[10] * z;\n\t    out[11] = a[11] * z;\n\t    out[12] = a[12];\n\t    out[13] = a[13];\n\t    out[14] = a[14];\n\t    out[15] = a[15];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Scales the mat4 by the dimensions in the given vec3 using vectorization\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the matrix to scale\n\t * @param {vec3} v the vec3 to scale the matrix by\n\t * @returns {mat4} out\n\t **/\n\tmat4.SIMD.scale = function(out, a, v) {\n\t    var a0, a1, a2;\n\t    var vec = SIMD.Float32x4(v[0], v[1], v[2], 0);\n\t\n\t    a0 = SIMD.Float32x4.load(a, 0);\n\t    SIMD.Float32x4.store(\n\t        out, 0, SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0)));\n\t\n\t    a1 = SIMD.Float32x4.load(a, 4);\n\t    SIMD.Float32x4.store(\n\t        out, 4, SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1)));\n\t\n\t    a2 = SIMD.Float32x4.load(a, 8);\n\t    SIMD.Float32x4.store(\n\t        out, 8, SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2)));\n\t\n\t    out[12] = a[12];\n\t    out[13] = a[13];\n\t    out[14] = a[14];\n\t    out[15] = a[15];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Scales the mat4 by the dimensions in the given vec3 using SIMD if available and enabled\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the matrix to scale\n\t * @param {vec3} v the vec3 to scale the matrix by\n\t * @returns {mat4} out\n\t */\n\tmat4.scale = glMatrix.USE_SIMD ? mat4.SIMD.scale : mat4.scalar.scale;\n\t\n\t/**\n\t * Rotates a mat4 by the given angle around the given axis\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the matrix to rotate\n\t * @param {Number} rad the angle to rotate the matrix by\n\t * @param {vec3} axis the axis to rotate around\n\t * @returns {mat4} out\n\t */\n\tmat4.rotate = function (out, a, rad, axis) {\n\t    var x = axis[0], y = axis[1], z = axis[2],\n\t        len = Math.sqrt(x * x + y * y + z * z),\n\t        s, c, t,\n\t        a00, a01, a02, a03,\n\t        a10, a11, a12, a13,\n\t        a20, a21, a22, a23,\n\t        b00, b01, b02,\n\t        b10, b11, b12,\n\t        b20, b21, b22;\n\t\n\t    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n\t\n\t    len = 1 / len;\n\t    x *= len;\n\t    y *= len;\n\t    z *= len;\n\t\n\t    s = Math.sin(rad);\n\t    c = Math.cos(rad);\n\t    t = 1 - c;\n\t\n\t    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n\t    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n\t    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\t\n\t    // Construct the elements of the rotation matrix\n\t    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n\t    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n\t    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\t\n\t    // Perform rotation-specific matrix multiplication\n\t    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n\t    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n\t    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n\t    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n\t    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n\t    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n\t    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n\t    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n\t    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n\t    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n\t    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n\t    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\t\n\t    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n\t        out[12] = a[12];\n\t        out[13] = a[13];\n\t        out[14] = a[14];\n\t        out[15] = a[15];\n\t    }\n\t    return out;\n\t};\n\t\n\t/**\n\t * Rotates a matrix by the given angle around the X axis not using SIMD\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the matrix to rotate\n\t * @param {Number} rad the angle to rotate the matrix by\n\t * @returns {mat4} out\n\t */\n\tmat4.scalar.rotateX = function (out, a, rad) {\n\t    var s = Math.sin(rad),\n\t        c = Math.cos(rad),\n\t        a10 = a[4],\n\t        a11 = a[5],\n\t        a12 = a[6],\n\t        a13 = a[7],\n\t        a20 = a[8],\n\t        a21 = a[9],\n\t        a22 = a[10],\n\t        a23 = a[11];\n\t\n\t    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n\t        out[0]  = a[0];\n\t        out[1]  = a[1];\n\t        out[2]  = a[2];\n\t        out[3]  = a[3];\n\t        out[12] = a[12];\n\t        out[13] = a[13];\n\t        out[14] = a[14];\n\t        out[15] = a[15];\n\t    }\n\t\n\t    // Perform axis-specific matrix multiplication\n\t    out[4] = a10 * c + a20 * s;\n\t    out[5] = a11 * c + a21 * s;\n\t    out[6] = a12 * c + a22 * s;\n\t    out[7] = a13 * c + a23 * s;\n\t    out[8] = a20 * c - a10 * s;\n\t    out[9] = a21 * c - a11 * s;\n\t    out[10] = a22 * c - a12 * s;\n\t    out[11] = a23 * c - a13 * s;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Rotates a matrix by the given angle around the X axis using SIMD\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the matrix to rotate\n\t * @param {Number} rad the angle to rotate the matrix by\n\t * @returns {mat4} out\n\t */\n\tmat4.SIMD.rotateX = function (out, a, rad) {\n\t    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n\t        c = SIMD.Float32x4.splat(Math.cos(rad));\n\t\n\t    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n\t      out[0]  = a[0];\n\t      out[1]  = a[1];\n\t      out[2]  = a[2];\n\t      out[3]  = a[3];\n\t      out[12] = a[12];\n\t      out[13] = a[13];\n\t      out[14] = a[14];\n\t      out[15] = a[15];\n\t    }\n\t\n\t    // Perform axis-specific matrix multiplication\n\t    var a_1 = SIMD.Float32x4.load(a, 4);\n\t    var a_2 = SIMD.Float32x4.load(a, 8);\n\t    SIMD.Float32x4.store(out, 4,\n\t                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_2, s)));\n\t    SIMD.Float32x4.store(out, 8,\n\t                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_2, c), SIMD.Float32x4.mul(a_1, s)));\n\t    return out;\n\t};\n\t\n\t/**\n\t * Rotates a matrix by the given angle around the X axis using SIMD if availabe and enabled\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the matrix to rotate\n\t * @param {Number} rad the angle to rotate the matrix by\n\t * @returns {mat4} out\n\t */\n\tmat4.rotateX = glMatrix.USE_SIMD ? mat4.SIMD.rotateX : mat4.scalar.rotateX;\n\t\n\t/**\n\t * Rotates a matrix by the given angle around the Y axis not using SIMD\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the matrix to rotate\n\t * @param {Number} rad the angle to rotate the matrix by\n\t * @returns {mat4} out\n\t */\n\tmat4.scalar.rotateY = function (out, a, rad) {\n\t    var s = Math.sin(rad),\n\t        c = Math.cos(rad),\n\t        a00 = a[0],\n\t        a01 = a[1],\n\t        a02 = a[2],\n\t        a03 = a[3],\n\t        a20 = a[8],\n\t        a21 = a[9],\n\t        a22 = a[10],\n\t        a23 = a[11];\n\t\n\t    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n\t        out[4]  = a[4];\n\t        out[5]  = a[5];\n\t        out[6]  = a[6];\n\t        out[7]  = a[7];\n\t        out[12] = a[12];\n\t        out[13] = a[13];\n\t        out[14] = a[14];\n\t        out[15] = a[15];\n\t    }\n\t\n\t    // Perform axis-specific matrix multiplication\n\t    out[0] = a00 * c - a20 * s;\n\t    out[1] = a01 * c - a21 * s;\n\t    out[2] = a02 * c - a22 * s;\n\t    out[3] = a03 * c - a23 * s;\n\t    out[8] = a00 * s + a20 * c;\n\t    out[9] = a01 * s + a21 * c;\n\t    out[10] = a02 * s + a22 * c;\n\t    out[11] = a03 * s + a23 * c;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Rotates a matrix by the given angle around the Y axis using SIMD\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the matrix to rotate\n\t * @param {Number} rad the angle to rotate the matrix by\n\t * @returns {mat4} out\n\t */\n\tmat4.SIMD.rotateY = function (out, a, rad) {\n\t    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n\t        c = SIMD.Float32x4.splat(Math.cos(rad));\n\t\n\t    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n\t        out[4]  = a[4];\n\t        out[5]  = a[5];\n\t        out[6]  = a[6];\n\t        out[7]  = a[7];\n\t        out[12] = a[12];\n\t        out[13] = a[13];\n\t        out[14] = a[14];\n\t        out[15] = a[15];\n\t    }\n\t\n\t    // Perform axis-specific matrix multiplication\n\t    var a_0 = SIMD.Float32x4.load(a, 0);\n\t    var a_2 = SIMD.Float32x4.load(a, 8);\n\t    SIMD.Float32x4.store(out, 0,\n\t                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_2, s)));\n\t    SIMD.Float32x4.store(out, 8,\n\t                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, s), SIMD.Float32x4.mul(a_2, c)));\n\t    return out;\n\t};\n\t\n\t/**\n\t * Rotates a matrix by the given angle around the Y axis if SIMD available and enabled\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the matrix to rotate\n\t * @param {Number} rad the angle to rotate the matrix by\n\t * @returns {mat4} out\n\t */\n\t mat4.rotateY = glMatrix.USE_SIMD ? mat4.SIMD.rotateY : mat4.scalar.rotateY;\n\t\n\t/**\n\t * Rotates a matrix by the given angle around the Z axis not using SIMD\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the matrix to rotate\n\t * @param {Number} rad the angle to rotate the matrix by\n\t * @returns {mat4} out\n\t */\n\tmat4.scalar.rotateZ = function (out, a, rad) {\n\t    var s = Math.sin(rad),\n\t        c = Math.cos(rad),\n\t        a00 = a[0],\n\t        a01 = a[1],\n\t        a02 = a[2],\n\t        a03 = a[3],\n\t        a10 = a[4],\n\t        a11 = a[5],\n\t        a12 = a[6],\n\t        a13 = a[7];\n\t\n\t    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n\t        out[8]  = a[8];\n\t        out[9]  = a[9];\n\t        out[10] = a[10];\n\t        out[11] = a[11];\n\t        out[12] = a[12];\n\t        out[13] = a[13];\n\t        out[14] = a[14];\n\t        out[15] = a[15];\n\t    }\n\t\n\t    // Perform axis-specific matrix multiplication\n\t    out[0] = a00 * c + a10 * s;\n\t    out[1] = a01 * c + a11 * s;\n\t    out[2] = a02 * c + a12 * s;\n\t    out[3] = a03 * c + a13 * s;\n\t    out[4] = a10 * c - a00 * s;\n\t    out[5] = a11 * c - a01 * s;\n\t    out[6] = a12 * c - a02 * s;\n\t    out[7] = a13 * c - a03 * s;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Rotates a matrix by the given angle around the Z axis using SIMD\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the matrix to rotate\n\t * @param {Number} rad the angle to rotate the matrix by\n\t * @returns {mat4} out\n\t */\n\tmat4.SIMD.rotateZ = function (out, a, rad) {\n\t    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n\t        c = SIMD.Float32x4.splat(Math.cos(rad));\n\t\n\t    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n\t        out[8]  = a[8];\n\t        out[9]  = a[9];\n\t        out[10] = a[10];\n\t        out[11] = a[11];\n\t        out[12] = a[12];\n\t        out[13] = a[13];\n\t        out[14] = a[14];\n\t        out[15] = a[15];\n\t    }\n\t\n\t    // Perform axis-specific matrix multiplication\n\t    var a_0 = SIMD.Float32x4.load(a, 0);\n\t    var a_1 = SIMD.Float32x4.load(a, 4);\n\t    SIMD.Float32x4.store(out, 0,\n\t                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_1, s)));\n\t    SIMD.Float32x4.store(out, 4,\n\t                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_0, s)));\n\t    return out;\n\t};\n\t\n\t/**\n\t * Rotates a matrix by the given angle around the Z axis if SIMD available and enabled\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the matrix to rotate\n\t * @param {Number} rad the angle to rotate the matrix by\n\t * @returns {mat4} out\n\t */\n\t mat4.rotateZ = glMatrix.USE_SIMD ? mat4.SIMD.rotateZ : mat4.scalar.rotateZ;\n\t\n\t/**\n\t * Creates a matrix from a vector translation\n\t * This is equivalent to (but much faster than):\n\t *\n\t *     mat4.identity(dest);\n\t *     mat4.translate(dest, dest, vec);\n\t *\n\t * @param {mat4} out mat4 receiving operation result\n\t * @param {vec3} v Translation vector\n\t * @returns {mat4} out\n\t */\n\tmat4.fromTranslation = function(out, v) {\n\t    out[0] = 1;\n\t    out[1] = 0;\n\t    out[2] = 0;\n\t    out[3] = 0;\n\t    out[4] = 0;\n\t    out[5] = 1;\n\t    out[6] = 0;\n\t    out[7] = 0;\n\t    out[8] = 0;\n\t    out[9] = 0;\n\t    out[10] = 1;\n\t    out[11] = 0;\n\t    out[12] = v[0];\n\t    out[13] = v[1];\n\t    out[14] = v[2];\n\t    out[15] = 1;\n\t    return out;\n\t}\n\t\n\t/**\n\t * Creates a matrix from a vector scaling\n\t * This is equivalent to (but much faster than):\n\t *\n\t *     mat4.identity(dest);\n\t *     mat4.scale(dest, dest, vec);\n\t *\n\t * @param {mat4} out mat4 receiving operation result\n\t * @param {vec3} v Scaling vector\n\t * @returns {mat4} out\n\t */\n\tmat4.fromScaling = function(out, v) {\n\t    out[0] = v[0];\n\t    out[1] = 0;\n\t    out[2] = 0;\n\t    out[3] = 0;\n\t    out[4] = 0;\n\t    out[5] = v[1];\n\t    out[6] = 0;\n\t    out[7] = 0;\n\t    out[8] = 0;\n\t    out[9] = 0;\n\t    out[10] = v[2];\n\t    out[11] = 0;\n\t    out[12] = 0;\n\t    out[13] = 0;\n\t    out[14] = 0;\n\t    out[15] = 1;\n\t    return out;\n\t}\n\t\n\t/**\n\t * Creates a matrix from a given angle around a given axis\n\t * This is equivalent to (but much faster than):\n\t *\n\t *     mat4.identity(dest);\n\t *     mat4.rotate(dest, dest, rad, axis);\n\t *\n\t * @param {mat4} out mat4 receiving operation result\n\t * @param {Number} rad the angle to rotate the matrix by\n\t * @param {vec3} axis the axis to rotate around\n\t * @returns {mat4} out\n\t */\n\tmat4.fromRotation = function(out, rad, axis) {\n\t    var x = axis[0], y = axis[1], z = axis[2],\n\t        len = Math.sqrt(x * x + y * y + z * z),\n\t        s, c, t;\n\t\n\t    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n\t\n\t    len = 1 / len;\n\t    x *= len;\n\t    y *= len;\n\t    z *= len;\n\t\n\t    s = Math.sin(rad);\n\t    c = Math.cos(rad);\n\t    t = 1 - c;\n\t\n\t    // Perform rotation-specific matrix multiplication\n\t    out[0] = x * x * t + c;\n\t    out[1] = y * x * t + z * s;\n\t    out[2] = z * x * t - y * s;\n\t    out[3] = 0;\n\t    out[4] = x * y * t - z * s;\n\t    out[5] = y * y * t + c;\n\t    out[6] = z * y * t + x * s;\n\t    out[7] = 0;\n\t    out[8] = x * z * t + y * s;\n\t    out[9] = y * z * t - x * s;\n\t    out[10] = z * z * t + c;\n\t    out[11] = 0;\n\t    out[12] = 0;\n\t    out[13] = 0;\n\t    out[14] = 0;\n\t    out[15] = 1;\n\t    return out;\n\t}\n\t\n\t/**\n\t * Creates a matrix from the given angle around the X axis\n\t * This is equivalent to (but much faster than):\n\t *\n\t *     mat4.identity(dest);\n\t *     mat4.rotateX(dest, dest, rad);\n\t *\n\t * @param {mat4} out mat4 receiving operation result\n\t * @param {Number} rad the angle to rotate the matrix by\n\t * @returns {mat4} out\n\t */\n\tmat4.fromXRotation = function(out, rad) {\n\t    var s = Math.sin(rad),\n\t        c = Math.cos(rad);\n\t\n\t    // Perform axis-specific matrix multiplication\n\t    out[0]  = 1;\n\t    out[1]  = 0;\n\t    out[2]  = 0;\n\t    out[3]  = 0;\n\t    out[4] = 0;\n\t    out[5] = c;\n\t    out[6] = s;\n\t    out[7] = 0;\n\t    out[8] = 0;\n\t    out[9] = -s;\n\t    out[10] = c;\n\t    out[11] = 0;\n\t    out[12] = 0;\n\t    out[13] = 0;\n\t    out[14] = 0;\n\t    out[15] = 1;\n\t    return out;\n\t}\n\t\n\t/**\n\t * Creates a matrix from the given angle around the Y axis\n\t * This is equivalent to (but much faster than):\n\t *\n\t *     mat4.identity(dest);\n\t *     mat4.rotateY(dest, dest, rad);\n\t *\n\t * @param {mat4} out mat4 receiving operation result\n\t * @param {Number} rad the angle to rotate the matrix by\n\t * @returns {mat4} out\n\t */\n\tmat4.fromYRotation = function(out, rad) {\n\t    var s = Math.sin(rad),\n\t        c = Math.cos(rad);\n\t\n\t    // Perform axis-specific matrix multiplication\n\t    out[0]  = c;\n\t    out[1]  = 0;\n\t    out[2]  = -s;\n\t    out[3]  = 0;\n\t    out[4] = 0;\n\t    out[5] = 1;\n\t    out[6] = 0;\n\t    out[7] = 0;\n\t    out[8] = s;\n\t    out[9] = 0;\n\t    out[10] = c;\n\t    out[11] = 0;\n\t    out[12] = 0;\n\t    out[13] = 0;\n\t    out[14] = 0;\n\t    out[15] = 1;\n\t    return out;\n\t}\n\t\n\t/**\n\t * Creates a matrix from the given angle around the Z axis\n\t * This is equivalent to (but much faster than):\n\t *\n\t *     mat4.identity(dest);\n\t *     mat4.rotateZ(dest, dest, rad);\n\t *\n\t * @param {mat4} out mat4 receiving operation result\n\t * @param {Number} rad the angle to rotate the matrix by\n\t * @returns {mat4} out\n\t */\n\tmat4.fromZRotation = function(out, rad) {\n\t    var s = Math.sin(rad),\n\t        c = Math.cos(rad);\n\t\n\t    // Perform axis-specific matrix multiplication\n\t    out[0]  = c;\n\t    out[1]  = s;\n\t    out[2]  = 0;\n\t    out[3]  = 0;\n\t    out[4] = -s;\n\t    out[5] = c;\n\t    out[6] = 0;\n\t    out[7] = 0;\n\t    out[8] = 0;\n\t    out[9] = 0;\n\t    out[10] = 1;\n\t    out[11] = 0;\n\t    out[12] = 0;\n\t    out[13] = 0;\n\t    out[14] = 0;\n\t    out[15] = 1;\n\t    return out;\n\t}\n\t\n\t/**\n\t * Creates a matrix from a quaternion rotation and vector translation\n\t * This is equivalent to (but much faster than):\n\t *\n\t *     mat4.identity(dest);\n\t *     mat4.translate(dest, vec);\n\t *     var quatMat = mat4.create();\n\t *     quat4.toMat4(quat, quatMat);\n\t *     mat4.multiply(dest, quatMat);\n\t *\n\t * @param {mat4} out mat4 receiving operation result\n\t * @param {quat4} q Rotation quaternion\n\t * @param {vec3} v Translation vector\n\t * @returns {mat4} out\n\t */\n\tmat4.fromRotationTranslation = function (out, q, v) {\n\t    // Quaternion math\n\t    var x = q[0], y = q[1], z = q[2], w = q[3],\n\t        x2 = x + x,\n\t        y2 = y + y,\n\t        z2 = z + z,\n\t\n\t        xx = x * x2,\n\t        xy = x * y2,\n\t        xz = x * z2,\n\t        yy = y * y2,\n\t        yz = y * z2,\n\t        zz = z * z2,\n\t        wx = w * x2,\n\t        wy = w * y2,\n\t        wz = w * z2;\n\t\n\t    out[0] = 1 - (yy + zz);\n\t    out[1] = xy + wz;\n\t    out[2] = xz - wy;\n\t    out[3] = 0;\n\t    out[4] = xy - wz;\n\t    out[5] = 1 - (xx + zz);\n\t    out[6] = yz + wx;\n\t    out[7] = 0;\n\t    out[8] = xz + wy;\n\t    out[9] = yz - wx;\n\t    out[10] = 1 - (xx + yy);\n\t    out[11] = 0;\n\t    out[12] = v[0];\n\t    out[13] = v[1];\n\t    out[14] = v[2];\n\t    out[15] = 1;\n\t\n\t    return out;\n\t};\n\t\n\t/**\n\t * Returns the translation vector component of a transformation\n\t *  matrix. If a matrix is built with fromRotationTranslation,\n\t *  the returned vector will be the same as the translation vector\n\t *  originally supplied.\n\t * @param  {vec3} out Vector to receive translation component\n\t * @param  {mat4} mat Matrix to be decomposed (input)\n\t * @return {vec3} out\n\t */\n\tmat4.getTranslation = function (out, mat) {\n\t  out[0] = mat[12];\n\t  out[1] = mat[13];\n\t  out[2] = mat[14];\n\t\n\t  return out;\n\t};\n\t\n\t/**\n\t * Returns a quaternion representing the rotational component\n\t *  of a transformation matrix. If a matrix is built with\n\t *  fromRotationTranslation, the returned quaternion will be the\n\t *  same as the quaternion originally supplied.\n\t * @param {quat} out Quaternion to receive the rotation component\n\t * @param {mat4} mat Matrix to be decomposed (input)\n\t * @return {quat} out\n\t */\n\tmat4.getRotation = function (out, mat) {\n\t  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\t  var trace = mat[0] + mat[5] + mat[10];\n\t  var S = 0;\n\t\n\t  if (trace > 0) { \n\t    S = Math.sqrt(trace + 1.0) * 2;\n\t    out[3] = 0.25 * S;\n\t    out[0] = (mat[6] - mat[9]) / S;\n\t    out[1] = (mat[8] - mat[2]) / S; \n\t    out[2] = (mat[1] - mat[4]) / S; \n\t  } else if ((mat[0] > mat[5])&(mat[0] > mat[10])) { \n\t    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n\t    out[3] = (mat[6] - mat[9]) / S;\n\t    out[0] = 0.25 * S;\n\t    out[1] = (mat[1] + mat[4]) / S; \n\t    out[2] = (mat[8] + mat[2]) / S; \n\t  } else if (mat[5] > mat[10]) { \n\t    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n\t    out[3] = (mat[8] - mat[2]) / S;\n\t    out[0] = (mat[1] + mat[4]) / S; \n\t    out[1] = 0.25 * S;\n\t    out[2] = (mat[6] + mat[9]) / S; \n\t  } else { \n\t    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n\t    out[3] = (mat[1] - mat[4]) / S;\n\t    out[0] = (mat[8] + mat[2]) / S;\n\t    out[1] = (mat[6] + mat[9]) / S;\n\t    out[2] = 0.25 * S;\n\t  }\n\t\n\t  return out;\n\t};\n\t\n\t/**\n\t * Creates a matrix from a quaternion rotation, vector translation and vector scale\n\t * This is equivalent to (but much faster than):\n\t *\n\t *     mat4.identity(dest);\n\t *     mat4.translate(dest, vec);\n\t *     var quatMat = mat4.create();\n\t *     quat4.toMat4(quat, quatMat);\n\t *     mat4.multiply(dest, quatMat);\n\t *     mat4.scale(dest, scale)\n\t *\n\t * @param {mat4} out mat4 receiving operation result\n\t * @param {quat4} q Rotation quaternion\n\t * @param {vec3} v Translation vector\n\t * @param {vec3} s Scaling vector\n\t * @returns {mat4} out\n\t */\n\tmat4.fromRotationTranslationScale = function (out, q, v, s) {\n\t    // Quaternion math\n\t    var x = q[0], y = q[1], z = q[2], w = q[3],\n\t        x2 = x + x,\n\t        y2 = y + y,\n\t        z2 = z + z,\n\t\n\t        xx = x * x2,\n\t        xy = x * y2,\n\t        xz = x * z2,\n\t        yy = y * y2,\n\t        yz = y * z2,\n\t        zz = z * z2,\n\t        wx = w * x2,\n\t        wy = w * y2,\n\t        wz = w * z2,\n\t        sx = s[0],\n\t        sy = s[1],\n\t        sz = s[2];\n\t\n\t    out[0] = (1 - (yy + zz)) * sx;\n\t    out[1] = (xy + wz) * sx;\n\t    out[2] = (xz - wy) * sx;\n\t    out[3] = 0;\n\t    out[4] = (xy - wz) * sy;\n\t    out[5] = (1 - (xx + zz)) * sy;\n\t    out[6] = (yz + wx) * sy;\n\t    out[7] = 0;\n\t    out[8] = (xz + wy) * sz;\n\t    out[9] = (yz - wx) * sz;\n\t    out[10] = (1 - (xx + yy)) * sz;\n\t    out[11] = 0;\n\t    out[12] = v[0];\n\t    out[13] = v[1];\n\t    out[14] = v[2];\n\t    out[15] = 1;\n\t\n\t    return out;\n\t};\n\t\n\t/**\n\t * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n\t * This is equivalent to (but much faster than):\n\t *\n\t *     mat4.identity(dest);\n\t *     mat4.translate(dest, vec);\n\t *     mat4.translate(dest, origin);\n\t *     var quatMat = mat4.create();\n\t *     quat4.toMat4(quat, quatMat);\n\t *     mat4.multiply(dest, quatMat);\n\t *     mat4.scale(dest, scale)\n\t *     mat4.translate(dest, negativeOrigin);\n\t *\n\t * @param {mat4} out mat4 receiving operation result\n\t * @param {quat4} q Rotation quaternion\n\t * @param {vec3} v Translation vector\n\t * @param {vec3} s Scaling vector\n\t * @param {vec3} o The origin vector around which to scale and rotate\n\t * @returns {mat4} out\n\t */\n\tmat4.fromRotationTranslationScaleOrigin = function (out, q, v, s, o) {\n\t  // Quaternion math\n\t  var x = q[0], y = q[1], z = q[2], w = q[3],\n\t      x2 = x + x,\n\t      y2 = y + y,\n\t      z2 = z + z,\n\t\n\t      xx = x * x2,\n\t      xy = x * y2,\n\t      xz = x * z2,\n\t      yy = y * y2,\n\t      yz = y * z2,\n\t      zz = z * z2,\n\t      wx = w * x2,\n\t      wy = w * y2,\n\t      wz = w * z2,\n\t\n\t      sx = s[0],\n\t      sy = s[1],\n\t      sz = s[2],\n\t\n\t      ox = o[0],\n\t      oy = o[1],\n\t      oz = o[2];\n\t\n\t  out[0] = (1 - (yy + zz)) * sx;\n\t  out[1] = (xy + wz) * sx;\n\t  out[2] = (xz - wy) * sx;\n\t  out[3] = 0;\n\t  out[4] = (xy - wz) * sy;\n\t  out[5] = (1 - (xx + zz)) * sy;\n\t  out[6] = (yz + wx) * sy;\n\t  out[7] = 0;\n\t  out[8] = (xz + wy) * sz;\n\t  out[9] = (yz - wx) * sz;\n\t  out[10] = (1 - (xx + yy)) * sz;\n\t  out[11] = 0;\n\t  out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);\n\t  out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);\n\t  out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);\n\t  out[15] = 1;\n\t\n\t  return out;\n\t};\n\t\n\t/**\n\t * Calculates a 4x4 matrix from the given quaternion\n\t *\n\t * @param {mat4} out mat4 receiving operation result\n\t * @param {quat} q Quaternion to create matrix from\n\t *\n\t * @returns {mat4} out\n\t */\n\tmat4.fromQuat = function (out, q) {\n\t    var x = q[0], y = q[1], z = q[2], w = q[3],\n\t        x2 = x + x,\n\t        y2 = y + y,\n\t        z2 = z + z,\n\t\n\t        xx = x * x2,\n\t        yx = y * x2,\n\t        yy = y * y2,\n\t        zx = z * x2,\n\t        zy = z * y2,\n\t        zz = z * z2,\n\t        wx = w * x2,\n\t        wy = w * y2,\n\t        wz = w * z2;\n\t\n\t    out[0] = 1 - yy - zz;\n\t    out[1] = yx + wz;\n\t    out[2] = zx - wy;\n\t    out[3] = 0;\n\t\n\t    out[4] = yx - wz;\n\t    out[5] = 1 - xx - zz;\n\t    out[6] = zy + wx;\n\t    out[7] = 0;\n\t\n\t    out[8] = zx + wy;\n\t    out[9] = zy - wx;\n\t    out[10] = 1 - xx - yy;\n\t    out[11] = 0;\n\t\n\t    out[12] = 0;\n\t    out[13] = 0;\n\t    out[14] = 0;\n\t    out[15] = 1;\n\t\n\t    return out;\n\t};\n\t\n\t/**\n\t * Generates a frustum matrix with the given bounds\n\t *\n\t * @param {mat4} out mat4 frustum matrix will be written into\n\t * @param {Number} left Left bound of the frustum\n\t * @param {Number} right Right bound of the frustum\n\t * @param {Number} bottom Bottom bound of the frustum\n\t * @param {Number} top Top bound of the frustum\n\t * @param {Number} near Near bound of the frustum\n\t * @param {Number} far Far bound of the frustum\n\t * @returns {mat4} out\n\t */\n\tmat4.frustum = function (out, left, right, bottom, top, near, far) {\n\t    var rl = 1 / (right - left),\n\t        tb = 1 / (top - bottom),\n\t        nf = 1 / (near - far);\n\t    out[0] = (near * 2) * rl;\n\t    out[1] = 0;\n\t    out[2] = 0;\n\t    out[3] = 0;\n\t    out[4] = 0;\n\t    out[5] = (near * 2) * tb;\n\t    out[6] = 0;\n\t    out[7] = 0;\n\t    out[8] = (right + left) * rl;\n\t    out[9] = (top + bottom) * tb;\n\t    out[10] = (far + near) * nf;\n\t    out[11] = -1;\n\t    out[12] = 0;\n\t    out[13] = 0;\n\t    out[14] = (far * near * 2) * nf;\n\t    out[15] = 0;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Generates a perspective projection matrix with the given bounds\n\t *\n\t * @param {mat4} out mat4 frustum matrix will be written into\n\t * @param {number} fovy Vertical field of view in radians\n\t * @param {number} aspect Aspect ratio. typically viewport width/height\n\t * @param {number} near Near bound of the frustum\n\t * @param {number} far Far bound of the frustum\n\t * @returns {mat4} out\n\t */\n\tmat4.perspective = function (out, fovy, aspect, near, far) {\n\t    var f = 1.0 / Math.tan(fovy / 2),\n\t        nf = 1 / (near - far);\n\t    out[0] = f / aspect;\n\t    out[1] = 0;\n\t    out[2] = 0;\n\t    out[3] = 0;\n\t    out[4] = 0;\n\t    out[5] = f;\n\t    out[6] = 0;\n\t    out[7] = 0;\n\t    out[8] = 0;\n\t    out[9] = 0;\n\t    out[10] = (far + near) * nf;\n\t    out[11] = -1;\n\t    out[12] = 0;\n\t    out[13] = 0;\n\t    out[14] = (2 * far * near) * nf;\n\t    out[15] = 0;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Generates a perspective projection matrix with the given field of view.\n\t * This is primarily useful for generating projection matrices to be used\n\t * with the still experiemental WebVR API.\n\t *\n\t * @param {mat4} out mat4 frustum matrix will be written into\n\t * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n\t * @param {number} near Near bound of the frustum\n\t * @param {number} far Far bound of the frustum\n\t * @returns {mat4} out\n\t */\n\tmat4.perspectiveFromFieldOfView = function (out, fov, near, far) {\n\t    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),\n\t        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),\n\t        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),\n\t        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),\n\t        xScale = 2.0 / (leftTan + rightTan),\n\t        yScale = 2.0 / (upTan + downTan);\n\t\n\t    out[0] = xScale;\n\t    out[1] = 0.0;\n\t    out[2] = 0.0;\n\t    out[3] = 0.0;\n\t    out[4] = 0.0;\n\t    out[5] = yScale;\n\t    out[6] = 0.0;\n\t    out[7] = 0.0;\n\t    out[8] = -((leftTan - rightTan) * xScale * 0.5);\n\t    out[9] = ((upTan - downTan) * yScale * 0.5);\n\t    out[10] = far / (near - far);\n\t    out[11] = -1.0;\n\t    out[12] = 0.0;\n\t    out[13] = 0.0;\n\t    out[14] = (far * near) / (near - far);\n\t    out[15] = 0.0;\n\t    return out;\n\t}\n\t\n\t/**\n\t * Generates a orthogonal projection matrix with the given bounds\n\t *\n\t * @param {mat4} out mat4 frustum matrix will be written into\n\t * @param {number} left Left bound of the frustum\n\t * @param {number} right Right bound of the frustum\n\t * @param {number} bottom Bottom bound of the frustum\n\t * @param {number} top Top bound of the frustum\n\t * @param {number} near Near bound of the frustum\n\t * @param {number} far Far bound of the frustum\n\t * @returns {mat4} out\n\t */\n\tmat4.ortho = function (out, left, right, bottom, top, near, far) {\n\t    var lr = 1 / (left - right),\n\t        bt = 1 / (bottom - top),\n\t        nf = 1 / (near - far);\n\t    out[0] = -2 * lr;\n\t    out[1] = 0;\n\t    out[2] = 0;\n\t    out[3] = 0;\n\t    out[4] = 0;\n\t    out[5] = -2 * bt;\n\t    out[6] = 0;\n\t    out[7] = 0;\n\t    out[8] = 0;\n\t    out[9] = 0;\n\t    out[10] = 2 * nf;\n\t    out[11] = 0;\n\t    out[12] = (left + right) * lr;\n\t    out[13] = (top + bottom) * bt;\n\t    out[14] = (far + near) * nf;\n\t    out[15] = 1;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Generates a look-at matrix with the given eye position, focal point, and up axis\n\t *\n\t * @param {mat4} out mat4 frustum matrix will be written into\n\t * @param {vec3} eye Position of the viewer\n\t * @param {vec3} center Point the viewer is looking at\n\t * @param {vec3} up vec3 pointing up\n\t * @returns {mat4} out\n\t */\n\tmat4.lookAt = function (out, eye, center, up) {\n\t    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,\n\t        eyex = eye[0],\n\t        eyey = eye[1],\n\t        eyez = eye[2],\n\t        upx = up[0],\n\t        upy = up[1],\n\t        upz = up[2],\n\t        centerx = center[0],\n\t        centery = center[1],\n\t        centerz = center[2];\n\t\n\t    if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n\t        Math.abs(eyey - centery) < glMatrix.EPSILON &&\n\t        Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n\t        return mat4.identity(out);\n\t    }\n\t\n\t    z0 = eyex - centerx;\n\t    z1 = eyey - centery;\n\t    z2 = eyez - centerz;\n\t\n\t    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n\t    z0 *= len;\n\t    z1 *= len;\n\t    z2 *= len;\n\t\n\t    x0 = upy * z2 - upz * z1;\n\t    x1 = upz * z0 - upx * z2;\n\t    x2 = upx * z1 - upy * z0;\n\t    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\t    if (!len) {\n\t        x0 = 0;\n\t        x1 = 0;\n\t        x2 = 0;\n\t    } else {\n\t        len = 1 / len;\n\t        x0 *= len;\n\t        x1 *= len;\n\t        x2 *= len;\n\t    }\n\t\n\t    y0 = z1 * x2 - z2 * x1;\n\t    y1 = z2 * x0 - z0 * x2;\n\t    y2 = z0 * x1 - z1 * x0;\n\t\n\t    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\t    if (!len) {\n\t        y0 = 0;\n\t        y1 = 0;\n\t        y2 = 0;\n\t    } else {\n\t        len = 1 / len;\n\t        y0 *= len;\n\t        y1 *= len;\n\t        y2 *= len;\n\t    }\n\t\n\t    out[0] = x0;\n\t    out[1] = y0;\n\t    out[2] = z0;\n\t    out[3] = 0;\n\t    out[4] = x1;\n\t    out[5] = y1;\n\t    out[6] = z1;\n\t    out[7] = 0;\n\t    out[8] = x2;\n\t    out[9] = y2;\n\t    out[10] = z2;\n\t    out[11] = 0;\n\t    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n\t    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n\t    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n\t    out[15] = 1;\n\t\n\t    return out;\n\t};\n\t\n\t/**\n\t * Returns a string representation of a mat4\n\t *\n\t * @param {mat4} mat matrix to represent as a string\n\t * @returns {String} string representation of the matrix\n\t */\n\tmat4.str = function (a) {\n\t    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n\t                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n\t                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n\t                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n\t};\n\t\n\t/**\n\t * Returns Frobenius norm of a mat4\n\t *\n\t * @param {mat4} a the matrix to calculate Frobenius norm of\n\t * @returns {Number} Frobenius norm\n\t */\n\tmat4.frob = function (a) {\n\t    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n\t};\n\t\n\t/**\n\t * Adds two mat4's\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the first operand\n\t * @param {mat4} b the second operand\n\t * @returns {mat4} out\n\t */\n\tmat4.add = function(out, a, b) {\n\t    out[0] = a[0] + b[0];\n\t    out[1] = a[1] + b[1];\n\t    out[2] = a[2] + b[2];\n\t    out[3] = a[3] + b[3];\n\t    out[4] = a[4] + b[4];\n\t    out[5] = a[5] + b[5];\n\t    out[6] = a[6] + b[6];\n\t    out[7] = a[7] + b[7];\n\t    out[8] = a[8] + b[8];\n\t    out[9] = a[9] + b[9];\n\t    out[10] = a[10] + b[10];\n\t    out[11] = a[11] + b[11];\n\t    out[12] = a[12] + b[12];\n\t    out[13] = a[13] + b[13];\n\t    out[14] = a[14] + b[14];\n\t    out[15] = a[15] + b[15];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Subtracts matrix b from matrix a\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the first operand\n\t * @param {mat4} b the second operand\n\t * @returns {mat4} out\n\t */\n\tmat4.subtract = function(out, a, b) {\n\t    out[0] = a[0] - b[0];\n\t    out[1] = a[1] - b[1];\n\t    out[2] = a[2] - b[2];\n\t    out[3] = a[3] - b[3];\n\t    out[4] = a[4] - b[4];\n\t    out[5] = a[5] - b[5];\n\t    out[6] = a[6] - b[6];\n\t    out[7] = a[7] - b[7];\n\t    out[8] = a[8] - b[8];\n\t    out[9] = a[9] - b[9];\n\t    out[10] = a[10] - b[10];\n\t    out[11] = a[11] - b[11];\n\t    out[12] = a[12] - b[12];\n\t    out[13] = a[13] - b[13];\n\t    out[14] = a[14] - b[14];\n\t    out[15] = a[15] - b[15];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Alias for {@link mat4.subtract}\n\t * @function\n\t */\n\tmat4.sub = mat4.subtract;\n\t\n\t/**\n\t * Multiply each element of the matrix by a scalar.\n\t *\n\t * @param {mat4} out the receiving matrix\n\t * @param {mat4} a the matrix to scale\n\t * @param {Number} b amount to scale the matrix's elements by\n\t * @returns {mat4} out\n\t */\n\tmat4.multiplyScalar = function(out, a, b) {\n\t    out[0] = a[0] * b;\n\t    out[1] = a[1] * b;\n\t    out[2] = a[2] * b;\n\t    out[3] = a[3] * b;\n\t    out[4] = a[4] * b;\n\t    out[5] = a[5] * b;\n\t    out[6] = a[6] * b;\n\t    out[7] = a[7] * b;\n\t    out[8] = a[8] * b;\n\t    out[9] = a[9] * b;\n\t    out[10] = a[10] * b;\n\t    out[11] = a[11] * b;\n\t    out[12] = a[12] * b;\n\t    out[13] = a[13] * b;\n\t    out[14] = a[14] * b;\n\t    out[15] = a[15] * b;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n\t *\n\t * @param {mat4} out the receiving vector\n\t * @param {mat4} a the first operand\n\t * @param {mat4} b the second operand\n\t * @param {Number} scale the amount to scale b's elements by before adding\n\t * @returns {mat4} out\n\t */\n\tmat4.multiplyScalarAndAdd = function(out, a, b, scale) {\n\t    out[0] = a[0] + (b[0] * scale);\n\t    out[1] = a[1] + (b[1] * scale);\n\t    out[2] = a[2] + (b[2] * scale);\n\t    out[3] = a[3] + (b[3] * scale);\n\t    out[4] = a[4] + (b[4] * scale);\n\t    out[5] = a[5] + (b[5] * scale);\n\t    out[6] = a[6] + (b[6] * scale);\n\t    out[7] = a[7] + (b[7] * scale);\n\t    out[8] = a[8] + (b[8] * scale);\n\t    out[9] = a[9] + (b[9] * scale);\n\t    out[10] = a[10] + (b[10] * scale);\n\t    out[11] = a[11] + (b[11] * scale);\n\t    out[12] = a[12] + (b[12] * scale);\n\t    out[13] = a[13] + (b[13] * scale);\n\t    out[14] = a[14] + (b[14] * scale);\n\t    out[15] = a[15] + (b[15] * scale);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n\t *\n\t * @param {mat4} a The first matrix.\n\t * @param {mat4} b The second matrix.\n\t * @returns {Boolean} True if the matrices are equal, false otherwise.\n\t */\n\tmat4.exactEquals = function (a, b) {\n\t    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && \n\t           a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && \n\t           a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n\t           a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n\t};\n\t\n\t/**\n\t * Returns whether or not the matrices have approximately the same elements in the same position.\n\t *\n\t * @param {mat4} a The first matrix.\n\t * @param {mat4} b The second matrix.\n\t * @returns {Boolean} True if the matrices are equal, false otherwise.\n\t */\n\tmat4.equals = function (a, b) {\n\t    var a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3],\n\t        a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7], \n\t        a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11], \n\t        a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\t\n\t    var b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3],\n\t        b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7], \n\t        b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11], \n\t        b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\t\n\t    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n\t            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n\t            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n\t            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n\t            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n\t            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n\t            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n\t            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n\t            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n\t            Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n\t            Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n\t            Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n\t            Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n\t            Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n\t            Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n\t            Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n\t};\n\t\n\t\n\t\n\tmodule.exports = mat4;\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\t\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\t\n\tThe above copyright notice and this permission notice shall be included in\n\tall copies or substantial portions of the Software.\n\t\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\tTHE SOFTWARE. */\n\t\n\tvar glMatrix = __webpack_require__(1);\n\tvar mat3 = __webpack_require__(5);\n\tvar vec3 = __webpack_require__(6);\n\tvar vec4 = __webpack_require__(7);\n\t\n\t/**\n\t * @class Quaternion\n\t * @name quat\n\t */\n\tvar quat = {};\n\t\n\t/**\n\t * Creates a new identity quat\n\t *\n\t * @returns {quat} a new quaternion\n\t */\n\tquat.create = function() {\n\t    var out = new glMatrix.ARRAY_TYPE(4);\n\t    out[0] = 0;\n\t    out[1] = 0;\n\t    out[2] = 0;\n\t    out[3] = 1;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Sets a quaternion to represent the shortest rotation from one\n\t * vector to another.\n\t *\n\t * Both vectors are assumed to be unit length.\n\t *\n\t * @param {quat} out the receiving quaternion.\n\t * @param {vec3} a the initial vector\n\t * @param {vec3} b the destination vector\n\t * @returns {quat} out\n\t */\n\tquat.rotationTo = (function() {\n\t    var tmpvec3 = vec3.create();\n\t    var xUnitVec3 = vec3.fromValues(1,0,0);\n\t    var yUnitVec3 = vec3.fromValues(0,1,0);\n\t\n\t    return function(out, a, b) {\n\t        var dot = vec3.dot(a, b);\n\t        if (dot < -0.999999) {\n\t            vec3.cross(tmpvec3, xUnitVec3, a);\n\t            if (vec3.length(tmpvec3) < 0.000001)\n\t                vec3.cross(tmpvec3, yUnitVec3, a);\n\t            vec3.normalize(tmpvec3, tmpvec3);\n\t            quat.setAxisAngle(out, tmpvec3, Math.PI);\n\t            return out;\n\t        } else if (dot > 0.999999) {\n\t            out[0] = 0;\n\t            out[1] = 0;\n\t            out[2] = 0;\n\t            out[3] = 1;\n\t            return out;\n\t        } else {\n\t            vec3.cross(tmpvec3, a, b);\n\t            out[0] = tmpvec3[0];\n\t            out[1] = tmpvec3[1];\n\t            out[2] = tmpvec3[2];\n\t            out[3] = 1 + dot;\n\t            return quat.normalize(out, out);\n\t        }\n\t    };\n\t})();\n\t\n\t/**\n\t * Sets the specified quaternion with values corresponding to the given\n\t * axes. Each axis is a vec3 and is expected to be unit length and\n\t * perpendicular to all other specified axes.\n\t *\n\t * @param {vec3} view  the vector representing the viewing direction\n\t * @param {vec3} right the vector representing the local \"right\" direction\n\t * @param {vec3} up    the vector representing the local \"up\" direction\n\t * @returns {quat} out\n\t */\n\tquat.setAxes = (function() {\n\t    var matr = mat3.create();\n\t\n\t    return function(out, view, right, up) {\n\t        matr[0] = right[0];\n\t        matr[3] = right[1];\n\t        matr[6] = right[2];\n\t\n\t        matr[1] = up[0];\n\t        matr[4] = up[1];\n\t        matr[7] = up[2];\n\t\n\t        matr[2] = -view[0];\n\t        matr[5] = -view[1];\n\t        matr[8] = -view[2];\n\t\n\t        return quat.normalize(out, quat.fromMat3(out, matr));\n\t    };\n\t})();\n\t\n\t/**\n\t * Creates a new quat initialized with values from an existing quaternion\n\t *\n\t * @param {quat} a quaternion to clone\n\t * @returns {quat} a new quaternion\n\t * @function\n\t */\n\tquat.clone = vec4.clone;\n\t\n\t/**\n\t * Creates a new quat initialized with the given values\n\t *\n\t * @param {Number} x X component\n\t * @param {Number} y Y component\n\t * @param {Number} z Z component\n\t * @param {Number} w W component\n\t * @returns {quat} a new quaternion\n\t * @function\n\t */\n\tquat.fromValues = vec4.fromValues;\n\t\n\t/**\n\t * Copy the values from one quat to another\n\t *\n\t * @param {quat} out the receiving quaternion\n\t * @param {quat} a the source quaternion\n\t * @returns {quat} out\n\t * @function\n\t */\n\tquat.copy = vec4.copy;\n\t\n\t/**\n\t * Set the components of a quat to the given values\n\t *\n\t * @param {quat} out the receiving quaternion\n\t * @param {Number} x X component\n\t * @param {Number} y Y component\n\t * @param {Number} z Z component\n\t * @param {Number} w W component\n\t * @returns {quat} out\n\t * @function\n\t */\n\tquat.set = vec4.set;\n\t\n\t/**\n\t * Set a quat to the identity quaternion\n\t *\n\t * @param {quat} out the receiving quaternion\n\t * @returns {quat} out\n\t */\n\tquat.identity = function(out) {\n\t    out[0] = 0;\n\t    out[1] = 0;\n\t    out[2] = 0;\n\t    out[3] = 1;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Sets a quat from the given angle and rotation axis,\n\t * then returns it.\n\t *\n\t * @param {quat} out the receiving quaternion\n\t * @param {vec3} axis the axis around which to rotate\n\t * @param {Number} rad the angle in radians\n\t * @returns {quat} out\n\t **/\n\tquat.setAxisAngle = function(out, axis, rad) {\n\t    rad = rad * 0.5;\n\t    var s = Math.sin(rad);\n\t    out[0] = s * axis[0];\n\t    out[1] = s * axis[1];\n\t    out[2] = s * axis[2];\n\t    out[3] = Math.cos(rad);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Gets the rotation axis and angle for a given\n\t *  quaternion. If a quaternion is created with\n\t *  setAxisAngle, this method will return the same\n\t *  values as providied in the original parameter list\n\t *  OR functionally equivalent values.\n\t * Example: The quaternion formed by axis [0, 0, 1] and\n\t *  angle -90 is the same as the quaternion formed by\n\t *  [0, 0, 1] and 270. This method favors the latter.\n\t * @param  {vec3} out_axis  Vector receiving the axis of rotation\n\t * @param  {quat} q     Quaternion to be decomposed\n\t * @return {Number}     Angle, in radians, of the rotation\n\t */\n\tquat.getAxisAngle = function(out_axis, q) {\n\t    var rad = Math.acos(q[3]) * 2.0;\n\t    var s = Math.sin(rad / 2.0);\n\t    if (s != 0.0) {\n\t        out_axis[0] = q[0] / s;\n\t        out_axis[1] = q[1] / s;\n\t        out_axis[2] = q[2] / s;\n\t    } else {\n\t        // If s is zero, return any axis (no rotation - axis does not matter)\n\t        out_axis[0] = 1;\n\t        out_axis[1] = 0;\n\t        out_axis[2] = 0;\n\t    }\n\t    return rad;\n\t};\n\t\n\t/**\n\t * Adds two quat's\n\t *\n\t * @param {quat} out the receiving quaternion\n\t * @param {quat} a the first operand\n\t * @param {quat} b the second operand\n\t * @returns {quat} out\n\t * @function\n\t */\n\tquat.add = vec4.add;\n\t\n\t/**\n\t * Multiplies two quat's\n\t *\n\t * @param {quat} out the receiving quaternion\n\t * @param {quat} a the first operand\n\t * @param {quat} b the second operand\n\t * @returns {quat} out\n\t */\n\tquat.multiply = function(out, a, b) {\n\t    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n\t        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\t\n\t    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n\t    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n\t    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n\t    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Alias for {@link quat.multiply}\n\t * @function\n\t */\n\tquat.mul = quat.multiply;\n\t\n\t/**\n\t * Scales a quat by a scalar number\n\t *\n\t * @param {quat} out the receiving vector\n\t * @param {quat} a the vector to scale\n\t * @param {Number} b amount to scale the vector by\n\t * @returns {quat} out\n\t * @function\n\t */\n\tquat.scale = vec4.scale;\n\t\n\t/**\n\t * Rotates a quaternion by the given angle about the X axis\n\t *\n\t * @param {quat} out quat receiving operation result\n\t * @param {quat} a quat to rotate\n\t * @param {number} rad angle (in radians) to rotate\n\t * @returns {quat} out\n\t */\n\tquat.rotateX = function (out, a, rad) {\n\t    rad *= 0.5; \n\t\n\t    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n\t        bx = Math.sin(rad), bw = Math.cos(rad);\n\t\n\t    out[0] = ax * bw + aw * bx;\n\t    out[1] = ay * bw + az * bx;\n\t    out[2] = az * bw - ay * bx;\n\t    out[3] = aw * bw - ax * bx;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Rotates a quaternion by the given angle about the Y axis\n\t *\n\t * @param {quat} out quat receiving operation result\n\t * @param {quat} a quat to rotate\n\t * @param {number} rad angle (in radians) to rotate\n\t * @returns {quat} out\n\t */\n\tquat.rotateY = function (out, a, rad) {\n\t    rad *= 0.5; \n\t\n\t    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n\t        by = Math.sin(rad), bw = Math.cos(rad);\n\t\n\t    out[0] = ax * bw - az * by;\n\t    out[1] = ay * bw + aw * by;\n\t    out[2] = az * bw + ax * by;\n\t    out[3] = aw * bw - ay * by;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Rotates a quaternion by the given angle about the Z axis\n\t *\n\t * @param {quat} out quat receiving operation result\n\t * @param {quat} a quat to rotate\n\t * @param {number} rad angle (in radians) to rotate\n\t * @returns {quat} out\n\t */\n\tquat.rotateZ = function (out, a, rad) {\n\t    rad *= 0.5; \n\t\n\t    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n\t        bz = Math.sin(rad), bw = Math.cos(rad);\n\t\n\t    out[0] = ax * bw + ay * bz;\n\t    out[1] = ay * bw - ax * bz;\n\t    out[2] = az * bw + aw * bz;\n\t    out[3] = aw * bw - az * bz;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Calculates the W component of a quat from the X, Y, and Z components.\n\t * Assumes that quaternion is 1 unit in length.\n\t * Any existing W component will be ignored.\n\t *\n\t * @param {quat} out the receiving quaternion\n\t * @param {quat} a quat to calculate W component of\n\t * @returns {quat} out\n\t */\n\tquat.calculateW = function (out, a) {\n\t    var x = a[0], y = a[1], z = a[2];\n\t\n\t    out[0] = x;\n\t    out[1] = y;\n\t    out[2] = z;\n\t    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n\t    return out;\n\t};\n\t\n\t/**\n\t * Calculates the dot product of two quat's\n\t *\n\t * @param {quat} a the first operand\n\t * @param {quat} b the second operand\n\t * @returns {Number} dot product of a and b\n\t * @function\n\t */\n\tquat.dot = vec4.dot;\n\t\n\t/**\n\t * Performs a linear interpolation between two quat's\n\t *\n\t * @param {quat} out the receiving quaternion\n\t * @param {quat} a the first operand\n\t * @param {quat} b the second operand\n\t * @param {Number} t interpolation amount between the two inputs\n\t * @returns {quat} out\n\t * @function\n\t */\n\tquat.lerp = vec4.lerp;\n\t\n\t/**\n\t * Performs a spherical linear interpolation between two quat\n\t *\n\t * @param {quat} out the receiving quaternion\n\t * @param {quat} a the first operand\n\t * @param {quat} b the second operand\n\t * @param {Number} t interpolation amount between the two inputs\n\t * @returns {quat} out\n\t */\n\tquat.slerp = function (out, a, b, t) {\n\t    // benchmarks:\n\t    //    http://jsperf.com/quaternion-slerp-implementations\n\t\n\t    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n\t        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\t\n\t    var        omega, cosom, sinom, scale0, scale1;\n\t\n\t    // calc cosine\n\t    cosom = ax * bx + ay * by + az * bz + aw * bw;\n\t    // adjust signs (if necessary)\n\t    if ( cosom < 0.0 ) {\n\t        cosom = -cosom;\n\t        bx = - bx;\n\t        by = - by;\n\t        bz = - bz;\n\t        bw = - bw;\n\t    }\n\t    // calculate coefficients\n\t    if ( (1.0 - cosom) > 0.000001 ) {\n\t        // standard case (slerp)\n\t        omega  = Math.acos(cosom);\n\t        sinom  = Math.sin(omega);\n\t        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n\t        scale1 = Math.sin(t * omega) / sinom;\n\t    } else {        \n\t        // \"from\" and \"to\" quaternions are very close \n\t        //  ... so we can do a linear interpolation\n\t        scale0 = 1.0 - t;\n\t        scale1 = t;\n\t    }\n\t    // calculate final values\n\t    out[0] = scale0 * ax + scale1 * bx;\n\t    out[1] = scale0 * ay + scale1 * by;\n\t    out[2] = scale0 * az + scale1 * bz;\n\t    out[3] = scale0 * aw + scale1 * bw;\n\t    \n\t    return out;\n\t};\n\t\n\t/**\n\t * Performs a spherical linear interpolation with two control points\n\t *\n\t * @param {quat} out the receiving quaternion\n\t * @param {quat} a the first operand\n\t * @param {quat} b the second operand\n\t * @param {quat} c the third operand\n\t * @param {quat} d the fourth operand\n\t * @param {Number} t interpolation amount\n\t * @returns {quat} out\n\t */\n\tquat.sqlerp = (function () {\n\t  var temp1 = quat.create();\n\t  var temp2 = quat.create();\n\t  \n\t  return function (out, a, b, c, d, t) {\n\t    quat.slerp(temp1, a, d, t);\n\t    quat.slerp(temp2, b, c, t);\n\t    quat.slerp(out, temp1, temp2, 2 * t * (1 - t));\n\t    \n\t    return out;\n\t  };\n\t}());\n\t\n\t/**\n\t * Calculates the inverse of a quat\n\t *\n\t * @param {quat} out the receiving quaternion\n\t * @param {quat} a quat to calculate inverse of\n\t * @returns {quat} out\n\t */\n\tquat.invert = function(out, a) {\n\t    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n\t        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,\n\t        invDot = dot ? 1.0/dot : 0;\n\t    \n\t    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\t\n\t    out[0] = -a0*invDot;\n\t    out[1] = -a1*invDot;\n\t    out[2] = -a2*invDot;\n\t    out[3] = a3*invDot;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Calculates the conjugate of a quat\n\t * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n\t *\n\t * @param {quat} out the receiving quaternion\n\t * @param {quat} a quat to calculate conjugate of\n\t * @returns {quat} out\n\t */\n\tquat.conjugate = function (out, a) {\n\t    out[0] = -a[0];\n\t    out[1] = -a[1];\n\t    out[2] = -a[2];\n\t    out[3] = a[3];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Calculates the length of a quat\n\t *\n\t * @param {quat} a vector to calculate length of\n\t * @returns {Number} length of a\n\t * @function\n\t */\n\tquat.length = vec4.length;\n\t\n\t/**\n\t * Alias for {@link quat.length}\n\t * @function\n\t */\n\tquat.len = quat.length;\n\t\n\t/**\n\t * Calculates the squared length of a quat\n\t *\n\t * @param {quat} a vector to calculate squared length of\n\t * @returns {Number} squared length of a\n\t * @function\n\t */\n\tquat.squaredLength = vec4.squaredLength;\n\t\n\t/**\n\t * Alias for {@link quat.squaredLength}\n\t * @function\n\t */\n\tquat.sqrLen = quat.squaredLength;\n\t\n\t/**\n\t * Normalize a quat\n\t *\n\t * @param {quat} out the receiving quaternion\n\t * @param {quat} a quaternion to normalize\n\t * @returns {quat} out\n\t * @function\n\t */\n\tquat.normalize = vec4.normalize;\n\t\n\t/**\n\t * Creates a quaternion from the given 3x3 rotation matrix.\n\t *\n\t * NOTE: The resultant quaternion is not normalized, so you should be sure\n\t * to renormalize the quaternion yourself where necessary.\n\t *\n\t * @param {quat} out the receiving quaternion\n\t * @param {mat3} m rotation matrix\n\t * @returns {quat} out\n\t * @function\n\t */\n\tquat.fromMat3 = function(out, m) {\n\t    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n\t    // article \"Quaternion Calculus and Fast Animation\".\n\t    var fTrace = m[0] + m[4] + m[8];\n\t    var fRoot;\n\t\n\t    if ( fTrace > 0.0 ) {\n\t        // |w| > 1/2, may as well choose w > 1/2\n\t        fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n\t        out[3] = 0.5 * fRoot;\n\t        fRoot = 0.5/fRoot;  // 1/(4w)\n\t        out[0] = (m[5]-m[7])*fRoot;\n\t        out[1] = (m[6]-m[2])*fRoot;\n\t        out[2] = (m[1]-m[3])*fRoot;\n\t    } else {\n\t        // |w| <= 1/2\n\t        var i = 0;\n\t        if ( m[4] > m[0] )\n\t          i = 1;\n\t        if ( m[8] > m[i*3+i] )\n\t          i = 2;\n\t        var j = (i+1)%3;\n\t        var k = (i+2)%3;\n\t        \n\t        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n\t        out[i] = 0.5 * fRoot;\n\t        fRoot = 0.5 / fRoot;\n\t        out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n\t        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n\t        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n\t    }\n\t    \n\t    return out;\n\t};\n\t\n\t/**\n\t * Returns a string representation of a quatenion\n\t *\n\t * @param {quat} vec vector to represent as a string\n\t * @returns {String} string representation of the vector\n\t */\n\tquat.str = function (a) {\n\t    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n\t};\n\t\n\t/**\n\t * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n\t *\n\t * @param {quat} a The first quaternion.\n\t * @param {quat} b The second quaternion.\n\t * @returns {Boolean} True if the vectors are equal, false otherwise.\n\t */\n\tquat.exactEquals = vec4.exactEquals;\n\t\n\t/**\n\t * Returns whether or not the quaternions have approximately the same elements in the same position.\n\t *\n\t * @param {quat} a The first vector.\n\t * @param {quat} b The second vector.\n\t * @returns {Boolean} True if the vectors are equal, false otherwise.\n\t */\n\tquat.equals = vec4.equals;\n\t\n\tmodule.exports = quat;\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\t\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\t\n\tThe above copyright notice and this permission notice shall be included in\n\tall copies or substantial portions of the Software.\n\t\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\tTHE SOFTWARE. */\n\t\n\tvar glMatrix = __webpack_require__(1);\n\t\n\t/**\n\t * @class 2 Dimensional Vector\n\t * @name vec2\n\t */\n\tvar vec2 = {};\n\t\n\t/**\n\t * Creates a new, empty vec2\n\t *\n\t * @returns {vec2} a new 2D vector\n\t */\n\tvec2.create = function() {\n\t    var out = new glMatrix.ARRAY_TYPE(2);\n\t    out[0] = 0;\n\t    out[1] = 0;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Creates a new vec2 initialized with values from an existing vector\n\t *\n\t * @param {vec2} a vector to clone\n\t * @returns {vec2} a new 2D vector\n\t */\n\tvec2.clone = function(a) {\n\t    var out = new glMatrix.ARRAY_TYPE(2);\n\t    out[0] = a[0];\n\t    out[1] = a[1];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Creates a new vec2 initialized with the given values\n\t *\n\t * @param {Number} x X component\n\t * @param {Number} y Y component\n\t * @returns {vec2} a new 2D vector\n\t */\n\tvec2.fromValues = function(x, y) {\n\t    var out = new glMatrix.ARRAY_TYPE(2);\n\t    out[0] = x;\n\t    out[1] = y;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Copy the values from one vec2 to another\n\t *\n\t * @param {vec2} out the receiving vector\n\t * @param {vec2} a the source vector\n\t * @returns {vec2} out\n\t */\n\tvec2.copy = function(out, a) {\n\t    out[0] = a[0];\n\t    out[1] = a[1];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Set the components of a vec2 to the given values\n\t *\n\t * @param {vec2} out the receiving vector\n\t * @param {Number} x X component\n\t * @param {Number} y Y component\n\t * @returns {vec2} out\n\t */\n\tvec2.set = function(out, x, y) {\n\t    out[0] = x;\n\t    out[1] = y;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Adds two vec2's\n\t *\n\t * @param {vec2} out the receiving vector\n\t * @param {vec2} a the first operand\n\t * @param {vec2} b the second operand\n\t * @returns {vec2} out\n\t */\n\tvec2.add = function(out, a, b) {\n\t    out[0] = a[0] + b[0];\n\t    out[1] = a[1] + b[1];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Subtracts vector b from vector a\n\t *\n\t * @param {vec2} out the receiving vector\n\t * @param {vec2} a the first operand\n\t * @param {vec2} b the second operand\n\t * @returns {vec2} out\n\t */\n\tvec2.subtract = function(out, a, b) {\n\t    out[0] = a[0] - b[0];\n\t    out[1] = a[1] - b[1];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Alias for {@link vec2.subtract}\n\t * @function\n\t */\n\tvec2.sub = vec2.subtract;\n\t\n\t/**\n\t * Multiplies two vec2's\n\t *\n\t * @param {vec2} out the receiving vector\n\t * @param {vec2} a the first operand\n\t * @param {vec2} b the second operand\n\t * @returns {vec2} out\n\t */\n\tvec2.multiply = function(out, a, b) {\n\t    out[0] = a[0] * b[0];\n\t    out[1] = a[1] * b[1];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Alias for {@link vec2.multiply}\n\t * @function\n\t */\n\tvec2.mul = vec2.multiply;\n\t\n\t/**\n\t * Divides two vec2's\n\t *\n\t * @param {vec2} out the receiving vector\n\t * @param {vec2} a the first operand\n\t * @param {vec2} b the second operand\n\t * @returns {vec2} out\n\t */\n\tvec2.divide = function(out, a, b) {\n\t    out[0] = a[0] / b[0];\n\t    out[1] = a[1] / b[1];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Alias for {@link vec2.divide}\n\t * @function\n\t */\n\tvec2.div = vec2.divide;\n\t\n\t/**\n\t * Math.ceil the components of a vec2\n\t *\n\t * @param {vec2} out the receiving vector\n\t * @param {vec2} a vector to ceil\n\t * @returns {vec2} out\n\t */\n\tvec2.ceil = function (out, a) {\n\t    out[0] = Math.ceil(a[0]);\n\t    out[1] = Math.ceil(a[1]);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Math.floor the components of a vec2\n\t *\n\t * @param {vec2} out the receiving vector\n\t * @param {vec2} a vector to floor\n\t * @returns {vec2} out\n\t */\n\tvec2.floor = function (out, a) {\n\t    out[0] = Math.floor(a[0]);\n\t    out[1] = Math.floor(a[1]);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Returns the minimum of two vec2's\n\t *\n\t * @param {vec2} out the receiving vector\n\t * @param {vec2} a the first operand\n\t * @param {vec2} b the second operand\n\t * @returns {vec2} out\n\t */\n\tvec2.min = function(out, a, b) {\n\t    out[0] = Math.min(a[0], b[0]);\n\t    out[1] = Math.min(a[1], b[1]);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Returns the maximum of two vec2's\n\t *\n\t * @param {vec2} out the receiving vector\n\t * @param {vec2} a the first operand\n\t * @param {vec2} b the second operand\n\t * @returns {vec2} out\n\t */\n\tvec2.max = function(out, a, b) {\n\t    out[0] = Math.max(a[0], b[0]);\n\t    out[1] = Math.max(a[1], b[1]);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Math.round the components of a vec2\n\t *\n\t * @param {vec2} out the receiving vector\n\t * @param {vec2} a vector to round\n\t * @returns {vec2} out\n\t */\n\tvec2.round = function (out, a) {\n\t    out[0] = Math.round(a[0]);\n\t    out[1] = Math.round(a[1]);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Scales a vec2 by a scalar number\n\t *\n\t * @param {vec2} out the receiving vector\n\t * @param {vec2} a the vector to scale\n\t * @param {Number} b amount to scale the vector by\n\t * @returns {vec2} out\n\t */\n\tvec2.scale = function(out, a, b) {\n\t    out[0] = a[0] * b;\n\t    out[1] = a[1] * b;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Adds two vec2's after scaling the second operand by a scalar value\n\t *\n\t * @param {vec2} out the receiving vector\n\t * @param {vec2} a the first operand\n\t * @param {vec2} b the second operand\n\t * @param {Number} scale the amount to scale b by before adding\n\t * @returns {vec2} out\n\t */\n\tvec2.scaleAndAdd = function(out, a, b, scale) {\n\t    out[0] = a[0] + (b[0] * scale);\n\t    out[1] = a[1] + (b[1] * scale);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Calculates the euclidian distance between two vec2's\n\t *\n\t * @param {vec2} a the first operand\n\t * @param {vec2} b the second operand\n\t * @returns {Number} distance between a and b\n\t */\n\tvec2.distance = function(a, b) {\n\t    var x = b[0] - a[0],\n\t        y = b[1] - a[1];\n\t    return Math.sqrt(x*x + y*y);\n\t};\n\t\n\t/**\n\t * Alias for {@link vec2.distance}\n\t * @function\n\t */\n\tvec2.dist = vec2.distance;\n\t\n\t/**\n\t * Calculates the squared euclidian distance between two vec2's\n\t *\n\t * @param {vec2} a the first operand\n\t * @param {vec2} b the second operand\n\t * @returns {Number} squared distance between a and b\n\t */\n\tvec2.squaredDistance = function(a, b) {\n\t    var x = b[0] - a[0],\n\t        y = b[1] - a[1];\n\t    return x*x + y*y;\n\t};\n\t\n\t/**\n\t * Alias for {@link vec2.squaredDistance}\n\t * @function\n\t */\n\tvec2.sqrDist = vec2.squaredDistance;\n\t\n\t/**\n\t * Calculates the length of a vec2\n\t *\n\t * @param {vec2} a vector to calculate length of\n\t * @returns {Number} length of a\n\t */\n\tvec2.length = function (a) {\n\t    var x = a[0],\n\t        y = a[1];\n\t    return Math.sqrt(x*x + y*y);\n\t};\n\t\n\t/**\n\t * Alias for {@link vec2.length}\n\t * @function\n\t */\n\tvec2.len = vec2.length;\n\t\n\t/**\n\t * Calculates the squared length of a vec2\n\t *\n\t * @param {vec2} a vector to calculate squared length of\n\t * @returns {Number} squared length of a\n\t */\n\tvec2.squaredLength = function (a) {\n\t    var x = a[0],\n\t        y = a[1];\n\t    return x*x + y*y;\n\t};\n\t\n\t/**\n\t * Alias for {@link vec2.squaredLength}\n\t * @function\n\t */\n\tvec2.sqrLen = vec2.squaredLength;\n\t\n\t/**\n\t * Negates the components of a vec2\n\t *\n\t * @param {vec2} out the receiving vector\n\t * @param {vec2} a vector to negate\n\t * @returns {vec2} out\n\t */\n\tvec2.negate = function(out, a) {\n\t    out[0] = -a[0];\n\t    out[1] = -a[1];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Returns the inverse of the components of a vec2\n\t *\n\t * @param {vec2} out the receiving vector\n\t * @param {vec2} a vector to invert\n\t * @returns {vec2} out\n\t */\n\tvec2.inverse = function(out, a) {\n\t  out[0] = 1.0 / a[0];\n\t  out[1] = 1.0 / a[1];\n\t  return out;\n\t};\n\t\n\t/**\n\t * Normalize a vec2\n\t *\n\t * @param {vec2} out the receiving vector\n\t * @param {vec2} a vector to normalize\n\t * @returns {vec2} out\n\t */\n\tvec2.normalize = function(out, a) {\n\t    var x = a[0],\n\t        y = a[1];\n\t    var len = x*x + y*y;\n\t    if (len > 0) {\n\t        //TODO: evaluate use of glm_invsqrt here?\n\t        len = 1 / Math.sqrt(len);\n\t        out[0] = a[0] * len;\n\t        out[1] = a[1] * len;\n\t    }\n\t    return out;\n\t};\n\t\n\t/**\n\t * Calculates the dot product of two vec2's\n\t *\n\t * @param {vec2} a the first operand\n\t * @param {vec2} b the second operand\n\t * @returns {Number} dot product of a and b\n\t */\n\tvec2.dot = function (a, b) {\n\t    return a[0] * b[0] + a[1] * b[1];\n\t};\n\t\n\t/**\n\t * Computes the cross product of two vec2's\n\t * Note that the cross product must by definition produce a 3D vector\n\t *\n\t * @param {vec3} out the receiving vector\n\t * @param {vec2} a the first operand\n\t * @param {vec2} b the second operand\n\t * @returns {vec3} out\n\t */\n\tvec2.cross = function(out, a, b) {\n\t    var z = a[0] * b[1] - a[1] * b[0];\n\t    out[0] = out[1] = 0;\n\t    out[2] = z;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Performs a linear interpolation between two vec2's\n\t *\n\t * @param {vec2} out the receiving vector\n\t * @param {vec2} a the first operand\n\t * @param {vec2} b the second operand\n\t * @param {Number} t interpolation amount between the two inputs\n\t * @returns {vec2} out\n\t */\n\tvec2.lerp = function (out, a, b, t) {\n\t    var ax = a[0],\n\t        ay = a[1];\n\t    out[0] = ax + t * (b[0] - ax);\n\t    out[1] = ay + t * (b[1] - ay);\n\t    return out;\n\t};\n\t\n\t/**\n\t * Generates a random vector with the given scale\n\t *\n\t * @param {vec2} out the receiving vector\n\t * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n\t * @returns {vec2} out\n\t */\n\tvec2.random = function (out, scale) {\n\t    scale = scale || 1.0;\n\t    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n\t    out[0] = Math.cos(r) * scale;\n\t    out[1] = Math.sin(r) * scale;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Transforms the vec2 with a mat2\n\t *\n\t * @param {vec2} out the receiving vector\n\t * @param {vec2} a the vector to transform\n\t * @param {mat2} m matrix to transform with\n\t * @returns {vec2} out\n\t */\n\tvec2.transformMat2 = function(out, a, m) {\n\t    var x = a[0],\n\t        y = a[1];\n\t    out[0] = m[0] * x + m[2] * y;\n\t    out[1] = m[1] * x + m[3] * y;\n\t    return out;\n\t};\n\t\n\t/**\n\t * Transforms the vec2 with a mat2d\n\t *\n\t * @param {vec2} out the receiving vector\n\t * @param {vec2} a the vector to transform\n\t * @param {mat2d} m matrix to transform with\n\t * @returns {vec2} out\n\t */\n\tvec2.transformMat2d = function(out, a, m) {\n\t    var x = a[0],\n\t        y = a[1];\n\t    out[0] = m[0] * x + m[2] * y + m[4];\n\t    out[1] = m[1] * x + m[3] * y + m[5];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Transforms the vec2 with a mat3\n\t * 3rd vector component is implicitly '1'\n\t *\n\t * @param {vec2} out the receiving vector\n\t * @param {vec2} a the vector to transform\n\t * @param {mat3} m matrix to transform with\n\t * @returns {vec2} out\n\t */\n\tvec2.transformMat3 = function(out, a, m) {\n\t    var x = a[0],\n\t        y = a[1];\n\t    out[0] = m[0] * x + m[3] * y + m[6];\n\t    out[1] = m[1] * x + m[4] * y + m[7];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Transforms the vec2 with a mat4\n\t * 3rd vector component is implicitly '0'\n\t * 4th vector component is implicitly '1'\n\t *\n\t * @param {vec2} out the receiving vector\n\t * @param {vec2} a the vector to transform\n\t * @param {mat4} m matrix to transform with\n\t * @returns {vec2} out\n\t */\n\tvec2.transformMat4 = function(out, a, m) {\n\t    var x = a[0], \n\t        y = a[1];\n\t    out[0] = m[0] * x + m[4] * y + m[12];\n\t    out[1] = m[1] * x + m[5] * y + m[13];\n\t    return out;\n\t};\n\t\n\t/**\n\t * Perform some operation over an array of vec2s.\n\t *\n\t * @param {Array} a the array of vectors to iterate over\n\t * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n\t * @param {Number} offset Number of elements to skip at the beginning of the array\n\t * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n\t * @param {Function} fn Function to call for each vector in the array\n\t * @param {Object} [arg] additional argument to pass to fn\n\t * @returns {Array} a\n\t * @function\n\t */\n\tvec2.forEach = (function() {\n\t    var vec = vec2.create();\n\t\n\t    return function(a, stride, offset, count, fn, arg) {\n\t        var i, l;\n\t        if(!stride) {\n\t            stride = 2;\n\t        }\n\t\n\t        if(!offset) {\n\t            offset = 0;\n\t        }\n\t        \n\t        if(count) {\n\t            l = Math.min((count * stride) + offset, a.length);\n\t        } else {\n\t            l = a.length;\n\t        }\n\t\n\t        for(i = offset; i < l; i += stride) {\n\t            vec[0] = a[i]; vec[1] = a[i+1];\n\t            fn(vec, vec, arg);\n\t            a[i] = vec[0]; a[i+1] = vec[1];\n\t        }\n\t        \n\t        return a;\n\t    };\n\t})();\n\t\n\t/**\n\t * Returns a string representation of a vector\n\t *\n\t * @param {vec2} vec vector to represent as a string\n\t * @returns {String} string representation of the vector\n\t */\n\tvec2.str = function (a) {\n\t    return 'vec2(' + a[0] + ', ' + a[1] + ')';\n\t};\n\t\n\t/**\n\t * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n\t *\n\t * @param {vec2} a The first vector.\n\t * @param {vec2} b The second vector.\n\t * @returns {Boolean} True if the vectors are equal, false otherwise.\n\t */\n\tvec2.exactEquals = function (a, b) {\n\t    return a[0] === b[0] && a[1] === b[1];\n\t};\n\t\n\t/**\n\t * Returns whether or not the vectors have approximately the same elements in the same position.\n\t *\n\t * @param {vec2} a The first vector.\n\t * @param {vec2} b The second vector.\n\t * @returns {Boolean} True if the vectors are equal, false otherwise.\n\t */\n\tvec2.equals = function (a, b) {\n\t    var a0 = a[0], a1 = a[1];\n\t    var b0 = b[0], b1 = b[1];\n\t    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n\t            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n\t};\n\t\n\tmodule.exports = vec2;\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports) {\n\n\t/*\n\t * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n\t * http://code.google.com/p/poly2tri/\n\t *\n\t * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n\t * https://github.com/r3mi/poly2tri.js\n\t *\n\t * All rights reserved.\n\t *\n\t * Distributed under the 3-clause BSD License, see LICENSE.txt\n\t */\n\t\n\t\"use strict\";\n\t\n\t/*\n\t * Function added in the JavaScript version (was not present in the c++ version)\n\t */\n\t\n\t/**\n\t * assert and throw an exception.\n\t *\n\t * @private\n\t * @param {boolean} condition   the condition which is asserted\n\t * @param {string} message      the message which is display is condition is falsy\n\t */\n\tfunction assert(condition, message) {\n\t    if (!condition) {\n\t        throw new Error(message || \"Assert Failed\");\n\t    }\n\t}\n\tmodule.exports = assert;\n\t\n\t\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n\t * http://code.google.com/p/poly2tri/\n\t * \n\t * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n\t * https://github.com/r3mi/poly2tri.js\n\t * \n\t * All rights reserved.\n\t * \n\t * Distributed under the 3-clause BSD License, see LICENSE.txt\n\t */\n\t\n\t\"use strict\";\n\t\n\t\n\t/*\n\t * Note\n\t * ====\n\t * the structure of this JavaScript version of poly2tri intentionally follows\n\t * as closely as possible the structure of the reference C++ version, to make it \n\t * easier to keep the 2 versions in sync.\n\t */\n\t\n\tvar xy = __webpack_require__(2);\n\t\n\t// ------------------------------------------------------------------------Point\n\t/**\n\t * Construct a point\n\t * @example\n\t *      var point = new poly2tri.Point(150, 150);\n\t * @public\n\t * @constructor\n\t * @struct\n\t * @param {number=} x    coordinate (0 if undefined)\n\t * @param {number=} y    coordinate (0 if undefined)\n\t */\n\tvar Point = function(x, y) {\n\t    /**\n\t     * @type {number}\n\t     * @expose\n\t     */\n\t    this.x = +x || 0;\n\t    /**\n\t     * @type {number}\n\t     * @expose\n\t     */\n\t    this.y = +y || 0;\n\t\n\t    // All extra fields added to Point are prefixed with _p2t_\n\t    // to avoid collisions if custom Point class is used.\n\t\n\t    /**\n\t     * The edges this point constitutes an upper ending point\n\t     * @private\n\t     * @type {Array.<Edge>}\n\t     */\n\t    this._p2t_edge_list = null;\n\t};\n\t\n\t/**\n\t * For pretty printing\n\t * @example\n\t *      \"p=\" + new poly2tri.Point(5,42)\n\t *      // → \"p=(5;42)\"\n\t * @returns {string} <code>\"(x;y)\"</code>\n\t */\n\tPoint.prototype.toString = function() {\n\t    return xy.toStringBase(this);\n\t};\n\t\n\t/**\n\t * JSON output, only coordinates\n\t * @example\n\t *      JSON.stringify(new poly2tri.Point(1,2))\n\t *      // → '{\"x\":1,\"y\":2}'\n\t */\n\tPoint.prototype.toJSON = function() {\n\t    return { x: this.x, y: this.y };\n\t};\n\t\n\t/**\n\t * Creates a copy of this Point object.\n\t * @return {Point} new cloned point\n\t */\n\tPoint.prototype.clone = function() {\n\t    return new Point(this.x, this.y);\n\t};\n\t\n\t/**\n\t * Set this Point instance to the origo. <code>(0; 0)</code>\n\t * @return {Point} this (for chaining)\n\t */\n\tPoint.prototype.set_zero = function() {\n\t    this.x = 0.0;\n\t    this.y = 0.0;\n\t    return this; // for chaining\n\t};\n\t\n\t/**\n\t * Set the coordinates of this instance.\n\t * @param {number} x   coordinate\n\t * @param {number} y   coordinate\n\t * @return {Point} this (for chaining)\n\t */\n\tPoint.prototype.set = function(x, y) {\n\t    this.x = +x || 0;\n\t    this.y = +y || 0;\n\t    return this; // for chaining\n\t};\n\t\n\t/**\n\t * Negate this Point instance. (component-wise)\n\t * @return {Point} this (for chaining)\n\t */\n\tPoint.prototype.negate = function() {\n\t    this.x = -this.x;\n\t    this.y = -this.y;\n\t    return this; // for chaining\n\t};\n\t\n\t/**\n\t * Add another Point object to this instance. (component-wise)\n\t * @param {!Point} n - Point object.\n\t * @return {Point} this (for chaining)\n\t */\n\tPoint.prototype.add = function(n) {\n\t    this.x += n.x;\n\t    this.y += n.y;\n\t    return this; // for chaining\n\t};\n\t\n\t/**\n\t * Subtract this Point instance with another point given. (component-wise)\n\t * @param {!Point} n - Point object.\n\t * @return {Point} this (for chaining)\n\t */\n\tPoint.prototype.sub = function(n) {\n\t    this.x -= n.x;\n\t    this.y -= n.y;\n\t    return this; // for chaining\n\t};\n\t\n\t/**\n\t * Multiply this Point instance by a scalar. (component-wise)\n\t * @param {number} s   scalar.\n\t * @return {Point} this (for chaining)\n\t */\n\tPoint.prototype.mul = function(s) {\n\t    this.x *= s;\n\t    this.y *= s;\n\t    return this; // for chaining\n\t};\n\t\n\t/**\n\t * Return the distance of this Point instance from the origo.\n\t * @return {number} distance\n\t */\n\tPoint.prototype.length = function() {\n\t    return Math.sqrt(this.x * this.x + this.y * this.y);\n\t};\n\t\n\t/**\n\t * Normalize this Point instance (as a vector).\n\t * @return {number} The original distance of this instance from the origo.\n\t */\n\tPoint.prototype.normalize = function() {\n\t    var len = this.length();\n\t    this.x /= len;\n\t    this.y /= len;\n\t    return len;\n\t};\n\t\n\t/**\n\t * Test this Point object with another for equality.\n\t * @param {!XY} p - any \"Point like\" object with {x,y}\n\t * @return {boolean} <code>true</code> if same x and y coordinates, <code>false</code> otherwise.\n\t */\n\tPoint.prototype.equals = function(p) {\n\t    return this.x === p.x && this.y === p.y;\n\t};\n\t\n\t\n\t// -----------------------------------------------------Point (\"static\" methods)\n\t\n\t/**\n\t * Negate a point component-wise and return the result as a new Point object.\n\t * @param {!XY} p - any \"Point like\" object with {x,y}\n\t * @return {Point} the resulting Point object.\n\t */\n\tPoint.negate = function(p) {\n\t    return new Point(-p.x, -p.y);\n\t};\n\t\n\t/**\n\t * Add two points component-wise and return the result as a new Point object.\n\t * @param {!XY} a - any \"Point like\" object with {x,y}\n\t * @param {!XY} b - any \"Point like\" object with {x,y}\n\t * @return {Point} the resulting Point object.\n\t */\n\tPoint.add = function(a, b) {\n\t    return new Point(a.x + b.x, a.y + b.y);\n\t};\n\t\n\t/**\n\t * Subtract two points component-wise and return the result as a new Point object.\n\t * @param {!XY} a - any \"Point like\" object with {x,y}\n\t * @param {!XY} b - any \"Point like\" object with {x,y}\n\t * @return {Point} the resulting Point object.\n\t */\n\tPoint.sub = function(a, b) {\n\t    return new Point(a.x - b.x, a.y - b.y);\n\t};\n\t\n\t/**\n\t * Multiply a point by a scalar and return the result as a new Point object.\n\t * @param {number} s - the scalar\n\t * @param {!XY} p - any \"Point like\" object with {x,y}\n\t * @return {Point} the resulting Point object.\n\t */\n\tPoint.mul = function(s, p) {\n\t    return new Point(s * p.x, s * p.y);\n\t};\n\t\n\t/**\n\t * Perform the cross product on either two points (this produces a scalar)\n\t * or a point and a scalar (this produces a point).\n\t * This function requires two parameters, either may be a Point object or a\n\t * number.\n\t * @param  {XY|number} a - Point object or scalar.\n\t * @param  {XY|number} b - Point object or scalar.\n\t * @return {Point|number} a Point object or a number, depending on the parameters.\n\t */\n\tPoint.cross = function(a, b) {\n\t    if (typeof(a) === 'number') {\n\t        if (typeof(b) === 'number') {\n\t            return a * b;\n\t        } else {\n\t            return new Point(-a * b.y, a * b.x);\n\t        }\n\t    } else {\n\t        if (typeof(b) === 'number') {\n\t            return new Point(b * a.y, -b * a.x);\n\t        } else {\n\t            return a.x * b.y - a.y * b.x;\n\t        }\n\t    }\n\t};\n\t\n\t\n\t// -----------------------------------------------------------------\"Point-Like\"\n\t/*\n\t * The following functions operate on \"Point\" or any \"Point like\" object \n\t * with {x,y} (duck typing).\n\t */\n\t\n\tPoint.toString = xy.toString;\n\tPoint.compare = xy.compare;\n\tPoint.cmp = xy.compare; // backward compatibility\n\tPoint.equals = xy.equals;\n\t\n\t/**\n\t * Peform the dot product on two vectors.\n\t * @public\n\t * @param {!XY} a - any \"Point like\" object with {x,y}\n\t * @param {!XY} b - any \"Point like\" object with {x,y}\n\t * @return {number} The dot product\n\t */\n\tPoint.dot = function(a, b) {\n\t    return a.x * b.x + a.y * b.y;\n\t};\n\t\n\t\n\t// ---------------------------------------------------------Exports (public API)\n\t\n\tmodule.exports = Point;\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n\t * http://code.google.com/p/poly2tri/\n\t * \n\t * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n\t * https://github.com/r3mi/poly2tri.js\n\t * \n\t * All rights reserved.\n\t * \n\t * Distributed under the 3-clause BSD License, see LICENSE.txt\n\t */\n\t\n\t/* jshint latedef:nofunc, maxcomplexity:9 */\n\t\n\t\"use strict\";\n\t\n\t/**\n\t * This 'Sweep' module is present in order to keep this JavaScript version\n\t * as close as possible to the reference C++ version, even though almost all\n\t * functions could be declared as methods on the {@linkcode module:sweepcontext~SweepContext} object.\n\t * @module\n\t * @private\n\t */\n\t\n\t/*\n\t * Note\n\t * ====\n\t * the structure of this JavaScript version of poly2tri intentionally follows\n\t * as closely as possible the structure of the reference C++ version, to make it \n\t * easier to keep the 2 versions in sync.\n\t */\n\t\n\tvar assert = __webpack_require__(20);\n\tvar PointError = __webpack_require__(9);\n\tvar Triangle = __webpack_require__(10);\n\tvar Node = __webpack_require__(8).Node;\n\t\n\t\n\t// ------------------------------------------------------------------------utils\n\t\n\tvar utils = __webpack_require__(24);\n\t\n\t/** @const */\n\tvar EPSILON = utils.EPSILON;\n\t\n\t/** @const */\n\tvar Orientation = utils.Orientation;\n\t/** @const */\n\tvar orient2d = utils.orient2d;\n\t/** @const */\n\tvar inScanArea = utils.inScanArea;\n\t/** @const */\n\tvar isAngleObtuse = utils.isAngleObtuse;\n\t\n\t\n\t// ------------------------------------------------------------------------Sweep\n\t\n\t/**\n\t * Triangulate the polygon with holes and Steiner points.\n\t * Do this AFTER you've added the polyline, holes, and Steiner points\n\t * @private\n\t * @param {!SweepContext} tcx - SweepContext object\n\t */\n\tfunction triangulate(tcx) {\n\t    tcx.initTriangulation();\n\t    tcx.createAdvancingFront();\n\t    // Sweep points; build mesh\n\t    sweepPoints(tcx);\n\t    // Clean up\n\t    finalizationPolygon(tcx);\n\t}\n\t\n\t/**\n\t * Start sweeping the Y-sorted point set from bottom to top\n\t * @param {!SweepContext} tcx - SweepContext object\n\t */\n\tfunction sweepPoints(tcx) {\n\t    var i, len = tcx.pointCount();\n\t    for (i = 1; i < len; ++i) {\n\t        var point = tcx.getPoint(i);\n\t        var node = pointEvent(tcx, point);\n\t        var edges = point._p2t_edge_list;\n\t        for (var j = 0; edges && j < edges.length; ++j) {\n\t            edgeEventByEdge(tcx, edges[j], node);\n\t        }\n\t    }\n\t}\n\t\n\t/**\n\t * @param {!SweepContext} tcx - SweepContext object\n\t */\n\tfunction finalizationPolygon(tcx) {\n\t    // Get an Internal triangle to start with\n\t    var t = tcx.front().head().next.triangle;\n\t    var p = tcx.front().head().next.point;\n\t    while (!t.getConstrainedEdgeCW(p)) {\n\t        t = t.neighborCCW(p);\n\t    }\n\t\n\t    // Collect interior triangles constrained by edges\n\t    tcx.meshClean(t);\n\t}\n\t\n\t/**\n\t * Find closes node to the left of the new point and\n\t * create a new triangle. If needed new holes and basins\n\t * will be filled to.\n\t * @param {!SweepContext} tcx - SweepContext object\n\t * @param {!XY} point   Point\n\t */\n\tfunction pointEvent(tcx, point) {\n\t    var node = tcx.locateNode(point);\n\t    var new_node = newFrontTriangle(tcx, point, node);\n\t\n\t    // Only need to check +epsilon since point never have smaller\n\t    // x value than node due to how we fetch nodes from the front\n\t    if (point.x <= node.point.x + (EPSILON)) {\n\t        fill(tcx, node);\n\t    }\n\t\n\t    //tcx.AddNode(new_node);\n\t\n\t    fillAdvancingFront(tcx, new_node);\n\t    return new_node;\n\t}\n\t\n\tfunction edgeEventByEdge(tcx, edge, node) {\n\t    tcx.edge_event.constrained_edge = edge;\n\t    tcx.edge_event.right = (edge.p.x > edge.q.x);\n\t\n\t    if (isEdgeSideOfTriangle(node.triangle, edge.p, edge.q)) {\n\t        return;\n\t    }\n\t\n\t    // For now we will do all needed filling\n\t    // TODO: integrate with flip process might give some better performance\n\t    //       but for now this avoid the issue with cases that needs both flips and fills\n\t    fillEdgeEvent(tcx, edge, node);\n\t    edgeEventByPoints(tcx, edge.p, edge.q, node.triangle, edge.q);\n\t}\n\t\n\tfunction edgeEventByPoints(tcx, ep, eq, triangle, point) {\n\t    if (isEdgeSideOfTriangle(triangle, ep, eq)) {\n\t        return;\n\t    }\n\t\n\t    var p1 = triangle.pointCCW(point);\n\t    var o1 = orient2d(eq, p1, ep);\n\t    if (o1 === Orientation.COLLINEAR) {\n\t        // TODO integrate here changes from C++ version\n\t        // (C++ repo revision 09880a869095 dated March 8, 2011)\n\t        throw new PointError('poly2tri EdgeEvent: Collinear not supported!', [eq, p1, ep]);\n\t    }\n\t\n\t    var p2 = triangle.pointCW(point);\n\t    var o2 = orient2d(eq, p2, ep);\n\t    if (o2 === Orientation.COLLINEAR) {\n\t        // TODO integrate here changes from C++ version\n\t        // (C++ repo revision 09880a869095 dated March 8, 2011)\n\t        throw new PointError('poly2tri EdgeEvent: Collinear not supported!', [eq, p2, ep]);\n\t    }\n\t\n\t    if (o1 === o2) {\n\t        // Need to decide if we are rotating CW or CCW to get to a triangle\n\t        // that will cross edge\n\t        if (o1 === Orientation.CW) {\n\t            triangle = triangle.neighborCCW(point);\n\t        } else {\n\t            triangle = triangle.neighborCW(point);\n\t        }\n\t        edgeEventByPoints(tcx, ep, eq, triangle, point);\n\t    } else {\n\t        // This triangle crosses constraint so lets flippin start!\n\t        flipEdgeEvent(tcx, ep, eq, triangle, point);\n\t    }\n\t}\n\t\n\tfunction isEdgeSideOfTriangle(triangle, ep, eq) {\n\t    var index = triangle.edgeIndex(ep, eq);\n\t    if (index !== -1) {\n\t        triangle.markConstrainedEdgeByIndex(index);\n\t        var t = triangle.getNeighbor(index);\n\t        if (t) {\n\t            t.markConstrainedEdgeByPoints(ep, eq);\n\t        }\n\t        return true;\n\t    }\n\t    return false;\n\t}\n\t\n\t/**\n\t * Creates a new front triangle and legalize it\n\t * @param {!SweepContext} tcx - SweepContext object\n\t */\n\tfunction newFrontTriangle(tcx, point, node) {\n\t    var triangle = new Triangle(point, node.point, node.next.point);\n\t\n\t    triangle.markNeighbor(node.triangle);\n\t    tcx.addToMap(triangle);\n\t\n\t    var new_node = new Node(point);\n\t    new_node.next = node.next;\n\t    new_node.prev = node;\n\t    node.next.prev = new_node;\n\t    node.next = new_node;\n\t\n\t    if (!legalize(tcx, triangle)) {\n\t        tcx.mapTriangleToNodes(triangle);\n\t    }\n\t\n\t    return new_node;\n\t}\n\t\n\t/**\n\t * Adds a triangle to the advancing front to fill a hole.\n\t * @param {!SweepContext} tcx - SweepContext object\n\t * @param node - middle node, that is the bottom of the hole\n\t */\n\tfunction fill(tcx, node) {\n\t    var triangle = new Triangle(node.prev.point, node.point, node.next.point);\n\t\n\t    // TODO: should copy the constrained_edge value from neighbor triangles\n\t    //       for now constrained_edge values are copied during the legalize\n\t    triangle.markNeighbor(node.prev.triangle);\n\t    triangle.markNeighbor(node.triangle);\n\t\n\t    tcx.addToMap(triangle);\n\t\n\t    // Update the advancing front\n\t    node.prev.next = node.next;\n\t    node.next.prev = node.prev;\n\t\n\t\n\t    // If it was legalized the triangle has already been mapped\n\t    if (!legalize(tcx, triangle)) {\n\t        tcx.mapTriangleToNodes(triangle);\n\t    }\n\t\n\t    //tcx.removeNode(node);\n\t}\n\t\n\t/**\n\t * Fills holes in the Advancing Front\n\t * @param {!SweepContext} tcx - SweepContext object\n\t */\n\tfunction fillAdvancingFront(tcx, n) {\n\t    // Fill right holes\n\t    var node = n.next;\n\t    while (node.next) {\n\t        // TODO integrate here changes from C++ version\n\t        // (C++ repo revision acf81f1f1764 dated April 7, 2012)\n\t        if (isAngleObtuse(node.point, node.next.point, node.prev.point)) {\n\t            break;\n\t        }\n\t        fill(tcx, node);\n\t        node = node.next;\n\t    }\n\t\n\t    // Fill left holes\n\t    node = n.prev;\n\t    while (node.prev) {\n\t        // TODO integrate here changes from C++ version\n\t        // (C++ repo revision acf81f1f1764 dated April 7, 2012)\n\t        if (isAngleObtuse(node.point, node.next.point, node.prev.point)) {\n\t            break;\n\t        }\n\t        fill(tcx, node);\n\t        node = node.prev;\n\t    }\n\t\n\t    // Fill right basins\n\t    if (n.next && n.next.next) {\n\t        if (isBasinAngleRight(n)) {\n\t            fillBasin(tcx, n);\n\t        }\n\t    }\n\t}\n\t\n\t/**\n\t * The basin angle is decided against the horizontal line [1,0].\n\t * @param {Node} node\n\t * @return {boolean} true if angle < 3*π/4\n\t */\n\tfunction isBasinAngleRight(node) {\n\t    var ax = node.point.x - node.next.next.point.x;\n\t    var ay = node.point.y - node.next.next.point.y;\n\t    assert(ay >= 0, \"unordered y\");\n\t    return (ax >= 0 || Math.abs(ax) < ay);\n\t}\n\t\n\t/**\n\t * Returns true if triangle was legalized\n\t * @param {!SweepContext} tcx - SweepContext object\n\t * @return {boolean}\n\t */\n\tfunction legalize(tcx, t) {\n\t    // To legalize a triangle we start by finding if any of the three edges\n\t    // violate the Delaunay condition\n\t    for (var i = 0; i < 3; ++i) {\n\t        if (t.delaunay_edge[i]) {\n\t            continue;\n\t        }\n\t        var ot = t.getNeighbor(i);\n\t        if (ot) {\n\t            var p = t.getPoint(i);\n\t            var op = ot.oppositePoint(t, p);\n\t            var oi = ot.index(op);\n\t\n\t            // If this is a Constrained Edge or a Delaunay Edge(only during recursive legalization)\n\t            // then we should not try to legalize\n\t            if (ot.constrained_edge[oi] || ot.delaunay_edge[oi]) {\n\t                t.constrained_edge[i] = ot.constrained_edge[oi];\n\t                continue;\n\t            }\n\t\n\t            var inside = inCircle(p, t.pointCCW(p), t.pointCW(p), op);\n\t            if (inside) {\n\t                // Lets mark this shared edge as Delaunay\n\t                t.delaunay_edge[i] = true;\n\t                ot.delaunay_edge[oi] = true;\n\t\n\t                // Lets rotate shared edge one vertex CW to legalize it\n\t                rotateTrianglePair(t, p, ot, op);\n\t\n\t                // We now got one valid Delaunay Edge shared by two triangles\n\t                // This gives us 4 new edges to check for Delaunay\n\t\n\t                // Make sure that triangle to node mapping is done only one time for a specific triangle\n\t                var not_legalized = !legalize(tcx, t);\n\t                if (not_legalized) {\n\t                    tcx.mapTriangleToNodes(t);\n\t                }\n\t\n\t                not_legalized = !legalize(tcx, ot);\n\t                if (not_legalized) {\n\t                    tcx.mapTriangleToNodes(ot);\n\t                }\n\t                // Reset the Delaunay edges, since they only are valid Delaunay edges\n\t                // until we add a new triangle or point.\n\t                // XXX: need to think about this. Can these edges be tried after we\n\t                //      return to previous recursive level?\n\t                t.delaunay_edge[i] = false;\n\t                ot.delaunay_edge[oi] = false;\n\t\n\t                // If triangle have been legalized no need to check the other edges since\n\t                // the recursive legalization will handles those so we can end here.\n\t                return true;\n\t            }\n\t        }\n\t    }\n\t    return false;\n\t}\n\t\n\t/**\n\t * <b>Requirement</b>:<br>\n\t * 1. a,b and c form a triangle.<br>\n\t * 2. a and d is know to be on opposite side of bc<br>\n\t * <pre>\n\t *                a\n\t *                +\n\t *               / \\\n\t *              /   \\\n\t *            b/     \\c\n\t *            +-------+\n\t *           /    d    \\\n\t *          /           \\\n\t * </pre>\n\t * <b>Fact</b>: d has to be in area B to have a chance to be inside the circle formed by\n\t *  a,b and c<br>\n\t *  d is outside B if orient2d(a,b,d) or orient2d(c,a,d) is CW<br>\n\t *  This preknowledge gives us a way to optimize the incircle test\n\t * @param pa - triangle point, opposite d\n\t * @param pb - triangle point\n\t * @param pc - triangle point\n\t * @param pd - point opposite a\n\t * @return {boolean} true if d is inside circle, false if on circle edge\n\t */\n\tfunction inCircle(pa, pb, pc, pd) {\n\t    var adx = pa.x - pd.x;\n\t    var ady = pa.y - pd.y;\n\t    var bdx = pb.x - pd.x;\n\t    var bdy = pb.y - pd.y;\n\t\n\t    var adxbdy = adx * bdy;\n\t    var bdxady = bdx * ady;\n\t    var oabd = adxbdy - bdxady;\n\t    if (oabd <= 0) {\n\t        return false;\n\t    }\n\t\n\t    var cdx = pc.x - pd.x;\n\t    var cdy = pc.y - pd.y;\n\t\n\t    var cdxady = cdx * ady;\n\t    var adxcdy = adx * cdy;\n\t    var ocad = cdxady - adxcdy;\n\t    if (ocad <= 0) {\n\t        return false;\n\t    }\n\t\n\t    var bdxcdy = bdx * cdy;\n\t    var cdxbdy = cdx * bdy;\n\t\n\t    var alift = adx * adx + ady * ady;\n\t    var blift = bdx * bdx + bdy * bdy;\n\t    var clift = cdx * cdx + cdy * cdy;\n\t\n\t    var det = alift * (bdxcdy - cdxbdy) + blift * ocad + clift * oabd;\n\t    return det > 0;\n\t}\n\t\n\t/**\n\t * Rotates a triangle pair one vertex CW\n\t *<pre>\n\t *       n2                    n2\n\t *  P +-----+             P +-----+\n\t *    | t  /|               |\\  t |\n\t *    |   / |               | \\   |\n\t *  n1|  /  |n3           n1|  \\  |n3\n\t *    | /   |    after CW   |   \\ |\n\t *    |/ oT |               | oT \\|\n\t *    +-----+ oP            +-----+\n\t *       n4                    n4\n\t * </pre>\n\t */\n\tfunction rotateTrianglePair(t, p, ot, op) {\n\t    var n1, n2, n3, n4;\n\t    n1 = t.neighborCCW(p);\n\t    n2 = t.neighborCW(p);\n\t    n3 = ot.neighborCCW(op);\n\t    n4 = ot.neighborCW(op);\n\t\n\t    var ce1, ce2, ce3, ce4;\n\t    ce1 = t.getConstrainedEdgeCCW(p);\n\t    ce2 = t.getConstrainedEdgeCW(p);\n\t    ce3 = ot.getConstrainedEdgeCCW(op);\n\t    ce4 = ot.getConstrainedEdgeCW(op);\n\t\n\t    var de1, de2, de3, de4;\n\t    de1 = t.getDelaunayEdgeCCW(p);\n\t    de2 = t.getDelaunayEdgeCW(p);\n\t    de3 = ot.getDelaunayEdgeCCW(op);\n\t    de4 = ot.getDelaunayEdgeCW(op);\n\t\n\t    t.legalize(p, op);\n\t    ot.legalize(op, p);\n\t\n\t    // Remap delaunay_edge\n\t    ot.setDelaunayEdgeCCW(p, de1);\n\t    t.setDelaunayEdgeCW(p, de2);\n\t    t.setDelaunayEdgeCCW(op, de3);\n\t    ot.setDelaunayEdgeCW(op, de4);\n\t\n\t    // Remap constrained_edge\n\t    ot.setConstrainedEdgeCCW(p, ce1);\n\t    t.setConstrainedEdgeCW(p, ce2);\n\t    t.setConstrainedEdgeCCW(op, ce3);\n\t    ot.setConstrainedEdgeCW(op, ce4);\n\t\n\t    // Remap neighbors\n\t    // XXX: might optimize the markNeighbor by keeping track of\n\t    //      what side should be assigned to what neighbor after the\n\t    //      rotation. Now mark neighbor does lots of testing to find\n\t    //      the right side.\n\t    t.clearNeighbors();\n\t    ot.clearNeighbors();\n\t    if (n1) {\n\t        ot.markNeighbor(n1);\n\t    }\n\t    if (n2) {\n\t        t.markNeighbor(n2);\n\t    }\n\t    if (n3) {\n\t        t.markNeighbor(n3);\n\t    }\n\t    if (n4) {\n\t        ot.markNeighbor(n4);\n\t    }\n\t    t.markNeighbor(ot);\n\t}\n\t\n\t/**\n\t * Fills a basin that has formed on the Advancing Front to the right\n\t * of given node.<br>\n\t * First we decide a left,bottom and right node that forms the\n\t * boundaries of the basin. Then we do a reqursive fill.\n\t *\n\t * @param {!SweepContext} tcx - SweepContext object\n\t * @param node - starting node, this or next node will be left node\n\t */\n\tfunction fillBasin(tcx, node) {\n\t    if (orient2d(node.point, node.next.point, node.next.next.point) === Orientation.CCW) {\n\t        tcx.basin.left_node = node.next.next;\n\t    } else {\n\t        tcx.basin.left_node = node.next;\n\t    }\n\t\n\t    // Find the bottom and right node\n\t    tcx.basin.bottom_node = tcx.basin.left_node;\n\t    while (tcx.basin.bottom_node.next && tcx.basin.bottom_node.point.y >= tcx.basin.bottom_node.next.point.y) {\n\t        tcx.basin.bottom_node = tcx.basin.bottom_node.next;\n\t    }\n\t    if (tcx.basin.bottom_node === tcx.basin.left_node) {\n\t        // No valid basin\n\t        return;\n\t    }\n\t\n\t    tcx.basin.right_node = tcx.basin.bottom_node;\n\t    while (tcx.basin.right_node.next && tcx.basin.right_node.point.y < tcx.basin.right_node.next.point.y) {\n\t        tcx.basin.right_node = tcx.basin.right_node.next;\n\t    }\n\t    if (tcx.basin.right_node === tcx.basin.bottom_node) {\n\t        // No valid basins\n\t        return;\n\t    }\n\t\n\t    tcx.basin.width = tcx.basin.right_node.point.x - tcx.basin.left_node.point.x;\n\t    tcx.basin.left_highest = tcx.basin.left_node.point.y > tcx.basin.right_node.point.y;\n\t\n\t    fillBasinReq(tcx, tcx.basin.bottom_node);\n\t}\n\t\n\t/**\n\t * Recursive algorithm to fill a Basin with triangles\n\t *\n\t * @param {!SweepContext} tcx - SweepContext object\n\t * @param node - bottom_node\n\t */\n\tfunction fillBasinReq(tcx, node) {\n\t    // if shallow stop filling\n\t    if (isShallow(tcx, node)) {\n\t        return;\n\t    }\n\t\n\t    fill(tcx, node);\n\t\n\t    var o;\n\t    if (node.prev === tcx.basin.left_node && node.next === tcx.basin.right_node) {\n\t        return;\n\t    } else if (node.prev === tcx.basin.left_node) {\n\t        o = orient2d(node.point, node.next.point, node.next.next.point);\n\t        if (o === Orientation.CW) {\n\t            return;\n\t        }\n\t        node = node.next;\n\t    } else if (node.next === tcx.basin.right_node) {\n\t        o = orient2d(node.point, node.prev.point, node.prev.prev.point);\n\t        if (o === Orientation.CCW) {\n\t            return;\n\t        }\n\t        node = node.prev;\n\t    } else {\n\t        // Continue with the neighbor node with lowest Y value\n\t        if (node.prev.point.y < node.next.point.y) {\n\t            node = node.prev;\n\t        } else {\n\t            node = node.next;\n\t        }\n\t    }\n\t\n\t    fillBasinReq(tcx, node);\n\t}\n\t\n\tfunction isShallow(tcx, node) {\n\t    var height;\n\t    if (tcx.basin.left_highest) {\n\t        height = tcx.basin.left_node.point.y - node.point.y;\n\t    } else {\n\t        height = tcx.basin.right_node.point.y - node.point.y;\n\t    }\n\t\n\t    // if shallow stop filling\n\t    if (tcx.basin.width > height) {\n\t        return true;\n\t    }\n\t    return false;\n\t}\n\t\n\tfunction fillEdgeEvent(tcx, edge, node) {\n\t    if (tcx.edge_event.right) {\n\t        fillRightAboveEdgeEvent(tcx, edge, node);\n\t    } else {\n\t        fillLeftAboveEdgeEvent(tcx, edge, node);\n\t    }\n\t}\n\t\n\tfunction fillRightAboveEdgeEvent(tcx, edge, node) {\n\t    while (node.next.point.x < edge.p.x) {\n\t        // Check if next node is below the edge\n\t        if (orient2d(edge.q, node.next.point, edge.p) === Orientation.CCW) {\n\t            fillRightBelowEdgeEvent(tcx, edge, node);\n\t        } else {\n\t            node = node.next;\n\t        }\n\t    }\n\t}\n\t\n\tfunction fillRightBelowEdgeEvent(tcx, edge, node) {\n\t    if (node.point.x < edge.p.x) {\n\t        if (orient2d(node.point, node.next.point, node.next.next.point) === Orientation.CCW) {\n\t            // Concave\n\t            fillRightConcaveEdgeEvent(tcx, edge, node);\n\t        } else {\n\t            // Convex\n\t            fillRightConvexEdgeEvent(tcx, edge, node);\n\t            // Retry this one\n\t            fillRightBelowEdgeEvent(tcx, edge, node);\n\t        }\n\t    }\n\t}\n\t\n\tfunction fillRightConcaveEdgeEvent(tcx, edge, node) {\n\t    fill(tcx, node.next);\n\t    if (node.next.point !== edge.p) {\n\t        // Next above or below edge?\n\t        if (orient2d(edge.q, node.next.point, edge.p) === Orientation.CCW) {\n\t            // Below\n\t            if (orient2d(node.point, node.next.point, node.next.next.point) === Orientation.CCW) {\n\t                // Next is concave\n\t                fillRightConcaveEdgeEvent(tcx, edge, node);\n\t            } else {\n\t                // Next is convex\n\t                /* jshint noempty:false */\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction fillRightConvexEdgeEvent(tcx, edge, node) {\n\t    // Next concave or convex?\n\t    if (orient2d(node.next.point, node.next.next.point, node.next.next.next.point) === Orientation.CCW) {\n\t        // Concave\n\t        fillRightConcaveEdgeEvent(tcx, edge, node.next);\n\t    } else {\n\t        // Convex\n\t        // Next above or below edge?\n\t        if (orient2d(edge.q, node.next.next.point, edge.p) === Orientation.CCW) {\n\t            // Below\n\t            fillRightConvexEdgeEvent(tcx, edge, node.next);\n\t        } else {\n\t            // Above\n\t            /* jshint noempty:false */\n\t        }\n\t    }\n\t}\n\t\n\tfunction fillLeftAboveEdgeEvent(tcx, edge, node) {\n\t    while (node.prev.point.x > edge.p.x) {\n\t        // Check if next node is below the edge\n\t        if (orient2d(edge.q, node.prev.point, edge.p) === Orientation.CW) {\n\t            fillLeftBelowEdgeEvent(tcx, edge, node);\n\t        } else {\n\t            node = node.prev;\n\t        }\n\t    }\n\t}\n\t\n\tfunction fillLeftBelowEdgeEvent(tcx, edge, node) {\n\t    if (node.point.x > edge.p.x) {\n\t        if (orient2d(node.point, node.prev.point, node.prev.prev.point) === Orientation.CW) {\n\t            // Concave\n\t            fillLeftConcaveEdgeEvent(tcx, edge, node);\n\t        } else {\n\t            // Convex\n\t            fillLeftConvexEdgeEvent(tcx, edge, node);\n\t            // Retry this one\n\t            fillLeftBelowEdgeEvent(tcx, edge, node);\n\t        }\n\t    }\n\t}\n\t\n\tfunction fillLeftConvexEdgeEvent(tcx, edge, node) {\n\t    // Next concave or convex?\n\t    if (orient2d(node.prev.point, node.prev.prev.point, node.prev.prev.prev.point) === Orientation.CW) {\n\t        // Concave\n\t        fillLeftConcaveEdgeEvent(tcx, edge, node.prev);\n\t    } else {\n\t        // Convex\n\t        // Next above or below edge?\n\t        if (orient2d(edge.q, node.prev.prev.point, edge.p) === Orientation.CW) {\n\t            // Below\n\t            fillLeftConvexEdgeEvent(tcx, edge, node.prev);\n\t        } else {\n\t            // Above\n\t            /* jshint noempty:false */\n\t        }\n\t    }\n\t}\n\t\n\tfunction fillLeftConcaveEdgeEvent(tcx, edge, node) {\n\t    fill(tcx, node.prev);\n\t    if (node.prev.point !== edge.p) {\n\t        // Next above or below edge?\n\t        if (orient2d(edge.q, node.prev.point, edge.p) === Orientation.CW) {\n\t            // Below\n\t            if (orient2d(node.point, node.prev.point, node.prev.prev.point) === Orientation.CW) {\n\t                // Next is concave\n\t                fillLeftConcaveEdgeEvent(tcx, edge, node);\n\t            } else {\n\t                // Next is convex\n\t                /* jshint noempty:false */\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction flipEdgeEvent(tcx, ep, eq, t, p) {\n\t    var ot = t.neighborAcross(p);\n\t    assert(ot, \"FLIP failed due to missing triangle!\");\n\t\n\t    var op = ot.oppositePoint(t, p);\n\t\n\t    // Additional check from Java version (see issue #88)\n\t    if (t.getConstrainedEdgeAcross(p)) {\n\t        var index = t.index(p);\n\t        throw new PointError(\"poly2tri Intersecting Constraints\",\n\t                [p, op, t.getPoint((index + 1) % 3), t.getPoint((index + 2) % 3)]);\n\t    }\n\t\n\t    if (inScanArea(p, t.pointCCW(p), t.pointCW(p), op)) {\n\t        // Lets rotate shared edge one vertex CW\n\t        rotateTrianglePair(t, p, ot, op);\n\t        tcx.mapTriangleToNodes(t);\n\t        tcx.mapTriangleToNodes(ot);\n\t\n\t        // XXX: in the original C++ code for the next 2 lines, we are\n\t        // comparing point values (and not pointers). In this JavaScript\n\t        // code, we are comparing point references (pointers). This works\n\t        // because we can't have 2 different points with the same values.\n\t        // But to be really equivalent, we should use \"Point.equals\" here.\n\t        if (p === eq && op === ep) {\n\t            if (eq === tcx.edge_event.constrained_edge.q && ep === tcx.edge_event.constrained_edge.p) {\n\t                t.markConstrainedEdgeByPoints(ep, eq);\n\t                ot.markConstrainedEdgeByPoints(ep, eq);\n\t                legalize(tcx, t);\n\t                legalize(tcx, ot);\n\t            } else {\n\t                // XXX: I think one of the triangles should be legalized here?\n\t                /* jshint noempty:false */\n\t            }\n\t        } else {\n\t            var o = orient2d(eq, op, ep);\n\t            t = nextFlipTriangle(tcx, o, t, ot, p, op);\n\t            flipEdgeEvent(tcx, ep, eq, t, p);\n\t        }\n\t    } else {\n\t        var newP = nextFlipPoint(ep, eq, ot, op);\n\t        flipScanEdgeEvent(tcx, ep, eq, t, ot, newP);\n\t        edgeEventByPoints(tcx, ep, eq, t, p);\n\t    }\n\t}\n\t\n\t/**\n\t * After a flip we have two triangles and know that only one will still be\n\t * intersecting the edge. So decide which to contiune with and legalize the other\n\t *\n\t * @param {!SweepContext} tcx - SweepContext object\n\t * @param o - should be the result of an orient2d( eq, op, ep )\n\t * @param t - triangle 1\n\t * @param ot - triangle 2\n\t * @param p - a point shared by both triangles\n\t * @param op - another point shared by both triangles\n\t * @return returns the triangle still intersecting the edge\n\t */\n\tfunction nextFlipTriangle(tcx, o, t, ot, p, op) {\n\t    var edge_index;\n\t    if (o === Orientation.CCW) {\n\t        // ot is not crossing edge after flip\n\t        edge_index = ot.edgeIndex(p, op);\n\t        ot.delaunay_edge[edge_index] = true;\n\t        legalize(tcx, ot);\n\t        ot.clearDelaunayEdges();\n\t        return t;\n\t    }\n\t\n\t    // t is not crossing edge after flip\n\t    edge_index = t.edgeIndex(p, op);\n\t\n\t    t.delaunay_edge[edge_index] = true;\n\t    legalize(tcx, t);\n\t    t.clearDelaunayEdges();\n\t    return ot;\n\t}\n\t\n\t/**\n\t * When we need to traverse from one triangle to the next we need\n\t * the point in current triangle that is the opposite point to the next\n\t * triangle.\n\t */\n\tfunction nextFlipPoint(ep, eq, ot, op) {\n\t    var o2d = orient2d(eq, op, ep);\n\t    if (o2d === Orientation.CW) {\n\t        // Right\n\t        return ot.pointCCW(op);\n\t    } else if (o2d === Orientation.CCW) {\n\t        // Left\n\t        return ot.pointCW(op);\n\t    } else {\n\t        throw new PointError(\"poly2tri [Unsupported] nextFlipPoint: opposing point on constrained edge!\", [eq, op, ep]);\n\t    }\n\t}\n\t\n\t/**\n\t * Scan part of the FlipScan algorithm<br>\n\t * When a triangle pair isn't flippable we will scan for the next\n\t * point that is inside the flip triangle scan area. When found\n\t * we generate a new flipEdgeEvent\n\t *\n\t * @param {!SweepContext} tcx - SweepContext object\n\t * @param ep - last point on the edge we are traversing\n\t * @param eq - first point on the edge we are traversing\n\t * @param {!Triangle} flip_triangle - the current triangle sharing the point eq with edge\n\t * @param t\n\t * @param p\n\t */\n\tfunction flipScanEdgeEvent(tcx, ep, eq, flip_triangle, t, p) {\n\t    var ot = t.neighborAcross(p);\n\t    assert(ot, \"FLIP failed due to missing triangle\");\n\t\n\t    var op = ot.oppositePoint(t, p);\n\t\n\t    if (inScanArea(eq, flip_triangle.pointCCW(eq), flip_triangle.pointCW(eq), op)) {\n\t        // flip with new edge op.eq\n\t        flipEdgeEvent(tcx, eq, op, ot, op);\n\t    } else {\n\t        var newP = nextFlipPoint(ep, eq, ot, op);\n\t        flipScanEdgeEvent(tcx, ep, eq, flip_triangle, ot, newP);\n\t    }\n\t}\n\t\n\t\n\t// ----------------------------------------------------------------------Exports\n\t\n\texports.triangulate = triangulate;\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/*\n\t * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n\t * http://code.google.com/p/poly2tri/\n\t * \n\t * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n\t * https://github.com/r3mi/poly2tri.js\n\t * \n\t * All rights reserved.\n\t * \n\t * Distributed under the 3-clause BSD License, see LICENSE.txt\n\t */\n\t\n\t/* jshint maxcomplexity:6 */\n\t\n\t\"use strict\";\n\t\n\t\n\t/*\n\t * Note\n\t * ====\n\t * the structure of this JavaScript version of poly2tri intentionally follows\n\t * as closely as possible the structure of the reference C++ version, to make it \n\t * easier to keep the 2 versions in sync.\n\t */\n\t\n\tvar PointError = __webpack_require__(9);\n\tvar Point = __webpack_require__(21);\n\tvar Triangle = __webpack_require__(10);\n\tvar sweep = __webpack_require__(22);\n\tvar AdvancingFront = __webpack_require__(8);\n\tvar Node = AdvancingFront.Node;\n\t\n\t\n\t// ------------------------------------------------------------------------utils\n\t\n\t/**\n\t * Initial triangle factor, seed triangle will extend 30% of\n\t * PointSet width to both left and right.\n\t * @private\n\t * @const\n\t */\n\tvar kAlpha = 0.3;\n\t\n\t\n\t// -------------------------------------------------------------------------Edge\n\t/**\n\t * Represents a simple polygon's edge\n\t * @constructor\n\t * @struct\n\t * @private\n\t * @param {Point} p1\n\t * @param {Point} p2\n\t * @throw {PointError} if p1 is same as p2\n\t */\n\tvar Edge = function(p1, p2) {\n\t    this.p = p1;\n\t    this.q = p2;\n\t\n\t    if (p1.y > p2.y) {\n\t        this.q = p1;\n\t        this.p = p2;\n\t    } else if (p1.y === p2.y) {\n\t        if (p1.x > p2.x) {\n\t            this.q = p1;\n\t            this.p = p2;\n\t        } else if (p1.x === p2.x) {\n\t            throw new PointError('poly2tri Invalid Edge constructor: repeated points!', [p1]);\n\t        }\n\t    }\n\t\n\t    if (!this.q._p2t_edge_list) {\n\t        this.q._p2t_edge_list = [];\n\t    }\n\t    this.q._p2t_edge_list.push(this);\n\t};\n\t\n\t\n\t// ------------------------------------------------------------------------Basin\n\t/**\n\t * @constructor\n\t * @struct\n\t * @private\n\t */\n\tvar Basin = function() {\n\t    /** @type {Node} */\n\t    this.left_node = null;\n\t    /** @type {Node} */\n\t    this.bottom_node = null;\n\t    /** @type {Node} */\n\t    this.right_node = null;\n\t    /** @type {number} */\n\t    this.width = 0.0;\n\t    /** @type {boolean} */\n\t    this.left_highest = false;\n\t};\n\t\n\tBasin.prototype.clear = function() {\n\t    this.left_node = null;\n\t    this.bottom_node = null;\n\t    this.right_node = null;\n\t    this.width = 0.0;\n\t    this.left_highest = false;\n\t};\n\t\n\t// --------------------------------------------------------------------EdgeEvent\n\t/**\n\t * @constructor\n\t * @struct\n\t * @private\n\t */\n\tvar EdgeEvent = function() {\n\t    /** @type {Edge} */\n\t    this.constrained_edge = null;\n\t    /** @type {boolean} */\n\t    this.right = false;\n\t};\n\t\n\t// ----------------------------------------------------SweepContext (public API)\n\t/**\n\t * SweepContext constructor option\n\t * @typedef {Object} SweepContextOptions\n\t * @property {boolean=} cloneArrays - if <code>true</code>, do a shallow copy of the Array parameters\n\t *                  (contour, holes). Points inside arrays are never copied.\n\t *                  Default is <code>false</code> : keep a reference to the array arguments,\n\t *                  who will be modified in place.\n\t */\n\t/**\n\t * Constructor for the triangulation context.\n\t * It accepts a simple polyline (with non repeating points), \n\t * which defines the constrained edges.\n\t *\n\t * @example\n\t *          var contour = [\n\t *              new poly2tri.Point(100, 100),\n\t *              new poly2tri.Point(100, 300),\n\t *              new poly2tri.Point(300, 300),\n\t *              new poly2tri.Point(300, 100)\n\t *          ];\n\t *          var swctx = new poly2tri.SweepContext(contour, {cloneArrays: true});\n\t * @example\n\t *          var contour = [{x:100, y:100}, {x:100, y:300}, {x:300, y:300}, {x:300, y:100}];\n\t *          var swctx = new poly2tri.SweepContext(contour, {cloneArrays: true});\n\t * @constructor\n\t * @public\n\t * @struct\n\t * @param {Array.<XY>} contour - array of point objects. The points can be either {@linkcode Point} instances,\n\t *          or any \"Point like\" custom class with <code>{x, y}</code> attributes.\n\t * @param {SweepContextOptions=} options - constructor options\n\t */\n\tvar SweepContext = function(contour, options) {\n\t    options = options || {};\n\t    this.triangles_ = [];\n\t    this.map_ = [];\n\t    this.points_ = (options.cloneArrays ? contour.slice(0) : contour);\n\t    this.edge_list = [];\n\t\n\t    // Bounding box of all points. Computed at the start of the triangulation, \n\t    // it is stored in case it is needed by the caller.\n\t    this.pmin_ = this.pmax_ = null;\n\t\n\t    /**\n\t     * Advancing front\n\t     * @private\n\t     * @type {AdvancingFront}\n\t     */\n\t    this.front_ = null;\n\t\n\t    /**\n\t     * head point used with advancing front\n\t     * @private\n\t     * @type {Point}\n\t     */\n\t    this.head_ = null;\n\t\n\t    /**\n\t     * tail point used with advancing front\n\t     * @private\n\t     * @type {Point}\n\t     */\n\t    this.tail_ = null;\n\t\n\t    /**\n\t     * @private\n\t     * @type {Node}\n\t     */\n\t    this.af_head_ = null;\n\t    /**\n\t     * @private\n\t     * @type {Node}\n\t     */\n\t    this.af_middle_ = null;\n\t    /**\n\t     * @private\n\t     * @type {Node}\n\t     */\n\t    this.af_tail_ = null;\n\t\n\t    this.basin = new Basin();\n\t    this.edge_event = new EdgeEvent();\n\t\n\t    this.initEdges(this.points_);\n\t};\n\t\n\t\n\t/**\n\t * Add a hole to the constraints\n\t * @example\n\t *      var swctx = new poly2tri.SweepContext(contour);\n\t *      var hole = [\n\t *          new poly2tri.Point(200, 200),\n\t *          new poly2tri.Point(200, 250),\n\t *          new poly2tri.Point(250, 250)\n\t *      ];\n\t *      swctx.addHole(hole);\n\t * @example\n\t *      var swctx = new poly2tri.SweepContext(contour);\n\t *      swctx.addHole([{x:200, y:200}, {x:200, y:250}, {x:250, y:250}]);\n\t * @public\n\t * @param {Array.<XY>} polyline - array of \"Point like\" objects with {x,y}\n\t */\n\tSweepContext.prototype.addHole = function(polyline) {\n\t    this.initEdges(polyline);\n\t    var i, len = polyline.length;\n\t    for (i = 0; i < len; i++) {\n\t        this.points_.push(polyline[i]);\n\t    }\n\t    return this; // for chaining\n\t};\n\t\n\t/**\n\t * For backward compatibility\n\t * @function\n\t * @deprecated use {@linkcode SweepContext#addHole} instead\n\t */\n\tSweepContext.prototype.AddHole = SweepContext.prototype.addHole;\n\t\n\t\n\t/**\n\t * Add several holes to the constraints\n\t * @example\n\t *      var swctx = new poly2tri.SweepContext(contour);\n\t *      var holes = [\n\t *          [ new poly2tri.Point(200, 200), new poly2tri.Point(200, 250), new poly2tri.Point(250, 250) ],\n\t *          [ new poly2tri.Point(300, 300), new poly2tri.Point(300, 350), new poly2tri.Point(350, 350) ]\n\t *      ];\n\t *      swctx.addHoles(holes);\n\t * @example\n\t *      var swctx = new poly2tri.SweepContext(contour);\n\t *      var holes = [\n\t *          [{x:200, y:200}, {x:200, y:250}, {x:250, y:250}],\n\t *          [{x:300, y:300}, {x:300, y:350}, {x:350, y:350}]\n\t *      ];\n\t *      swctx.addHoles(holes);\n\t * @public\n\t * @param {Array.<Array.<XY>>} holes - array of array of \"Point like\" objects with {x,y}\n\t */\n\t// Method added in the JavaScript version (was not present in the c++ version)\n\tSweepContext.prototype.addHoles = function(holes) {\n\t    var i, len = holes.length;\n\t    for (i = 0; i < len; i++) {\n\t        this.initEdges(holes[i]);\n\t    }\n\t    this.points_ = this.points_.concat.apply(this.points_, holes);\n\t    return this; // for chaining\n\t};\n\t\n\t\n\t/**\n\t * Add a Steiner point to the constraints\n\t * @example\n\t *      var swctx = new poly2tri.SweepContext(contour);\n\t *      var point = new poly2tri.Point(150, 150);\n\t *      swctx.addPoint(point);\n\t * @example\n\t *      var swctx = new poly2tri.SweepContext(contour);\n\t *      swctx.addPoint({x:150, y:150});\n\t * @public\n\t * @param {XY} point - any \"Point like\" object with {x,y}\n\t */\n\tSweepContext.prototype.addPoint = function(point) {\n\t    this.points_.push(point);\n\t    return this; // for chaining\n\t};\n\t\n\t/**\n\t * For backward compatibility\n\t * @function\n\t * @deprecated use {@linkcode SweepContext#addPoint} instead\n\t */\n\tSweepContext.prototype.AddPoint = SweepContext.prototype.addPoint;\n\t\n\t\n\t/**\n\t * Add several Steiner points to the constraints\n\t * @example\n\t *      var swctx = new poly2tri.SweepContext(contour);\n\t *      var points = [\n\t *          new poly2tri.Point(150, 150),\n\t *          new poly2tri.Point(200, 250),\n\t *          new poly2tri.Point(250, 250)\n\t *      ];\n\t *      swctx.addPoints(points);\n\t * @example\n\t *      var swctx = new poly2tri.SweepContext(contour);\n\t *      swctx.addPoints([{x:150, y:150}, {x:200, y:250}, {x:250, y:250}]);\n\t * @public\n\t * @param {Array.<XY>} points - array of \"Point like\" object with {x,y}\n\t */\n\t// Method added in the JavaScript version (was not present in the c++ version)\n\tSweepContext.prototype.addPoints = function(points) {\n\t    this.points_ = this.points_.concat(points);\n\t    return this; // for chaining\n\t};\n\t\n\t\n\t/**\n\t * Triangulate the polygon with holes and Steiner points.\n\t * Do this AFTER you've added the polyline, holes, and Steiner points\n\t * @example\n\t *      var swctx = new poly2tri.SweepContext(contour);\n\t *      swctx.triangulate();\n\t *      var triangles = swctx.getTriangles();\n\t * @public\n\t */\n\t// Shortcut method for sweep.triangulate(SweepContext).\n\t// Method added in the JavaScript version (was not present in the c++ version)\n\tSweepContext.prototype.triangulate = function() {\n\t    sweep.triangulate(this);\n\t    return this; // for chaining\n\t};\n\t\n\t\n\t/**\n\t * Get the bounding box of the provided constraints (contour, holes and \n\t * Steinter points). Warning : these values are not available if the triangulation \n\t * has not been done yet.\n\t * @public\n\t * @returns {{min:Point,max:Point}} object with 'min' and 'max' Point\n\t */\n\t// Method added in the JavaScript version (was not present in the c++ version)\n\tSweepContext.prototype.getBoundingBox = function() {\n\t    return {min: this.pmin_, max: this.pmax_};\n\t};\n\t\n\t/**\n\t * Get result of triangulation.\n\t * The output triangles have vertices which are references\n\t * to the initial input points (not copies): any custom fields in the\n\t * initial points can be retrieved in the output triangles.\n\t * @example\n\t *      var swctx = new poly2tri.SweepContext(contour);\n\t *      swctx.triangulate();\n\t *      var triangles = swctx.getTriangles();\n\t * @example\n\t *      var contour = [{x:100, y:100, id:1}, {x:100, y:300, id:2}, {x:300, y:300, id:3}];\n\t *      var swctx = new poly2tri.SweepContext(contour);\n\t *      swctx.triangulate();\n\t *      var triangles = swctx.getTriangles();\n\t *      typeof triangles[0].getPoint(0).id\n\t *      // → \"number\"\n\t * @public\n\t * @returns {array<Triangle>}   array of triangles\n\t */\n\tSweepContext.prototype.getTriangles = function() {\n\t    return this.triangles_;\n\t};\n\t\n\t/**\n\t * For backward compatibility\n\t * @function\n\t * @deprecated use {@linkcode SweepContext#getTriangles} instead\n\t */\n\tSweepContext.prototype.GetTriangles = SweepContext.prototype.getTriangles;\n\t\n\t\n\t// ---------------------------------------------------SweepContext (private API)\n\t\n\t/** @private */\n\tSweepContext.prototype.front = function() {\n\t    return this.front_;\n\t};\n\t\n\t/** @private */\n\tSweepContext.prototype.pointCount = function() {\n\t    return this.points_.length;\n\t};\n\t\n\t/** @private */\n\tSweepContext.prototype.head = function() {\n\t    return this.head_;\n\t};\n\t\n\t/** @private */\n\tSweepContext.prototype.setHead = function(p1) {\n\t    this.head_ = p1;\n\t};\n\t\n\t/** @private */\n\tSweepContext.prototype.tail = function() {\n\t    return this.tail_;\n\t};\n\t\n\t/** @private */\n\tSweepContext.prototype.setTail = function(p1) {\n\t    this.tail_ = p1;\n\t};\n\t\n\t/** @private */\n\tSweepContext.prototype.getMap = function() {\n\t    return this.map_;\n\t};\n\t\n\t/** @private */\n\tSweepContext.prototype.initTriangulation = function() {\n\t    var xmax = this.points_[0].x;\n\t    var xmin = this.points_[0].x;\n\t    var ymax = this.points_[0].y;\n\t    var ymin = this.points_[0].y;\n\t\n\t    // Calculate bounds\n\t    var i, len = this.points_.length;\n\t    for (i = 1; i < len; i++) {\n\t        var p = this.points_[i];\n\t        /* jshint expr:true */\n\t        (p.x > xmax) && (xmax = p.x);\n\t        (p.x < xmin) && (xmin = p.x);\n\t        (p.y > ymax) && (ymax = p.y);\n\t        (p.y < ymin) && (ymin = p.y);\n\t    }\n\t    this.pmin_ = new Point(xmin, ymin);\n\t    this.pmax_ = new Point(xmax, ymax);\n\t\n\t    var dx = kAlpha * (xmax - xmin);\n\t    var dy = kAlpha * (ymax - ymin);\n\t    this.head_ = new Point(xmax + dx, ymin - dy);\n\t    this.tail_ = new Point(xmin - dx, ymin - dy);\n\t\n\t    // Sort points along y-axis\n\t    this.points_.sort(Point.compare);\n\t};\n\t\n\t/** @private */\n\tSweepContext.prototype.initEdges = function(polyline) {\n\t    var i, len = polyline.length;\n\t    for (i = 0; i < len; ++i) {\n\t        this.edge_list.push(new Edge(polyline[i], polyline[(i + 1) % len]));\n\t    }\n\t};\n\t\n\t/** @private */\n\tSweepContext.prototype.getPoint = function(index) {\n\t    return this.points_[index];\n\t};\n\t\n\t/** @private */\n\tSweepContext.prototype.addToMap = function(triangle) {\n\t    this.map_.push(triangle);\n\t};\n\t\n\t/** @private */\n\tSweepContext.prototype.locateNode = function(point) {\n\t    return this.front_.locateNode(point.x);\n\t};\n\t\n\t/** @private */\n\tSweepContext.prototype.createAdvancingFront = function() {\n\t    var head;\n\t    var middle;\n\t    var tail;\n\t    // Initial triangle\n\t    var triangle = new Triangle(this.points_[0], this.tail_, this.head_);\n\t\n\t    this.map_.push(triangle);\n\t\n\t    head = new Node(triangle.getPoint(1), triangle);\n\t    middle = new Node(triangle.getPoint(0), triangle);\n\t    tail = new Node(triangle.getPoint(2));\n\t\n\t    this.front_ = new AdvancingFront(head, tail);\n\t\n\t    head.next = middle;\n\t    middle.next = tail;\n\t    middle.prev = head;\n\t    tail.prev = middle;\n\t};\n\t\n\t/** @private */\n\tSweepContext.prototype.removeNode = function(node) {\n\t    // do nothing\n\t    /* jshint unused:false */\n\t};\n\t\n\t/** @private */\n\tSweepContext.prototype.mapTriangleToNodes = function(t) {\n\t    for (var i = 0; i < 3; ++i) {\n\t        if (!t.getNeighbor(i)) {\n\t            var n = this.front_.locatePoint(t.pointCW(t.getPoint(i)));\n\t            if (n) {\n\t                n.triangle = t;\n\t            }\n\t        }\n\t    }\n\t};\n\t\n\t/** @private */\n\tSweepContext.prototype.removeFromMap = function(triangle) {\n\t    var i, map = this.map_, len = map.length;\n\t    for (i = 0; i < len; i++) {\n\t        if (map[i] === triangle) {\n\t            map.splice(i, 1);\n\t            break;\n\t        }\n\t    }\n\t};\n\t\n\t/**\n\t * Do a depth first traversal to collect triangles\n\t * @private\n\t * @param {Triangle} triangle start\n\t */\n\tSweepContext.prototype.meshClean = function(triangle) {\n\t    // New implementation avoids recursive calls and use a loop instead.\n\t    // Cf. issues # 57, 65 and 69.\n\t    var triangles = [triangle], t, i;\n\t    /* jshint boss:true */\n\t    while (t = triangles.pop()) {\n\t        if (!t.isInterior()) {\n\t            t.setInterior(true);\n\t            this.triangles_.push(t);\n\t            for (i = 0; i < 3; i++) {\n\t                if (!t.constrained_edge[i]) {\n\t                    triangles.push(t.getNeighbor(i));\n\t                }\n\t            }\n\t        }\n\t    }\n\t};\n\t\n\t// ----------------------------------------------------------------------Exports\n\t\n\tmodule.exports = SweepContext;\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports) {\n\n\t/*\n\t * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n\t * http://code.google.com/p/poly2tri/\n\t * \n\t * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n\t * https://github.com/r3mi/poly2tri.js\n\t * \n\t * All rights reserved.\n\t * \n\t * Distributed under the 3-clause BSD License, see LICENSE.txt\n\t */\n\t\n\t\"use strict\";\n\t\n\t/**\n\t * Precision to detect repeated or collinear points\n\t * @private\n\t * @const {number}\n\t * @default\n\t */\n\tvar EPSILON = 1e-12;\n\texports.EPSILON = EPSILON;\n\t\n\t/**\n\t * @private\n\t * @enum {number}\n\t * @readonly\n\t */\n\tvar Orientation = {\n\t    \"CW\": 1,\n\t    \"CCW\": -1,\n\t    \"COLLINEAR\": 0\n\t};\n\texports.Orientation = Orientation;\n\t\n\t\n\t/**\n\t * Formula to calculate signed area<br>\n\t * Positive if CCW<br>\n\t * Negative if CW<br>\n\t * 0 if collinear<br>\n\t * <pre>\n\t * A[P1,P2,P3]  =  (x1*y2 - y1*x2) + (x2*y3 - y2*x3) + (x3*y1 - y3*x1)\n\t *              =  (x1-x3)*(y2-y3) - (y1-y3)*(x2-x3)\n\t * </pre>\n\t *\n\t * @private\n\t * @param {!XY} pa  point object with {x,y}\n\t * @param {!XY} pb  point object with {x,y}\n\t * @param {!XY} pc  point object with {x,y}\n\t * @return {Orientation}\n\t */\n\tfunction orient2d(pa, pb, pc) {\n\t    var detleft = (pa.x - pc.x) * (pb.y - pc.y);\n\t    var detright = (pa.y - pc.y) * (pb.x - pc.x);\n\t    var val = detleft - detright;\n\t    if (val > -(EPSILON) && val < (EPSILON)) {\n\t        return Orientation.COLLINEAR;\n\t    } else if (val > 0) {\n\t        return Orientation.CCW;\n\t    } else {\n\t        return Orientation.CW;\n\t    }\n\t}\n\texports.orient2d = orient2d;\n\t\n\t\n\t/**\n\t *\n\t * @private\n\t * @param {!XY} pa  point object with {x,y}\n\t * @param {!XY} pb  point object with {x,y}\n\t * @param {!XY} pc  point object with {x,y}\n\t * @param {!XY} pd  point object with {x,y}\n\t * @return {boolean}\n\t */\n\tfunction inScanArea(pa, pb, pc, pd) {\n\t    var oadb = (pa.x - pb.x) * (pd.y - pb.y) - (pd.x - pb.x) * (pa.y - pb.y);\n\t    if (oadb >= -EPSILON) {\n\t        return false;\n\t    }\n\t\n\t    var oadc = (pa.x - pc.x) * (pd.y - pc.y) - (pd.x - pc.x) * (pa.y - pc.y);\n\t    if (oadc <= EPSILON) {\n\t        return false;\n\t    }\n\t    return true;\n\t}\n\texports.inScanArea = inScanArea;\n\t\n\t\n\t/**\n\t * Check if the angle between (pa,pb) and (pa,pc) is obtuse i.e. (angle > π/2 || angle < -π/2)\n\t *\n\t * @private\n\t * @param {!XY} pa  point object with {x,y}\n\t * @param {!XY} pb  point object with {x,y}\n\t * @param {!XY} pc  point object with {x,y}\n\t * @return {boolean} true if angle is obtuse\n\t */\n\tfunction isAngleObtuse(pa, pb, pc) {\n\t    var ax = pb.x - pa.x;\n\t    var ay = pb.y - pa.y;\n\t    var bx = pc.x - pa.x;\n\t    var by = pc.y - pa.y;\n\t    return (ax * bx + ay * by) < 0;\n\t}\n\texports.isAngleObtuse = isAngleObtuse;\n\t\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = \"var Module;if(!Module)Module=(typeof Module!==\\\"undefined\\\"?Module:null)||{};var moduleOverrides={};for(var key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var ENVIRONMENT_IS_WEB=typeof window===\\\"object\\\";var ENVIRONMENT_IS_WORKER=typeof importScripts===\\\"function\\\";var ENVIRONMENT_IS_NODE=typeof process===\\\"object\\\"&&typeof require===\\\"function\\\"&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;var ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;if(ENVIRONMENT_IS_NODE){if(!Module[\\\"print\\\"])Module[\\\"print\\\"]=function print(x){process[\\\"stdout\\\"].write(x+\\\"\\\\n\\\")};if(!Module[\\\"printErr\\\"])Module[\\\"printErr\\\"]=function printErr(x){process[\\\"stderr\\\"].write(x+\\\"\\\\n\\\")};var nodeFS=require(\\\"fs\\\");var nodePath=require(\\\"path\\\");Module[\\\"read\\\"]=function read(filename,binary){filename=nodePath[\\\"normalize\\\"](filename);var ret=nodeFS[\\\"readFileSync\\\"](filename);if(!ret&&filename!=nodePath[\\\"resolve\\\"](filename)){filename=path.join(__dirname,\\\"..\\\",\\\"src\\\",filename);ret=nodeFS[\\\"readFileSync\\\"](filename)}if(ret&&!binary)ret=ret.toString();return ret};Module[\\\"readBinary\\\"]=function readBinary(filename){var ret=Module[\\\"read\\\"](filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};Module[\\\"load\\\"]=function load(f){globalEval(read(f))};if(!Module[\\\"thisProgram\\\"]){if(process[\\\"argv\\\"].length>1){Module[\\\"thisProgram\\\"]=process[\\\"argv\\\"][1].replace(/\\\\\\\\/g,\\\"/\\\")}else{Module[\\\"thisProgram\\\"]=\\\"unknown-program\\\"}}Module[\\\"arguments\\\"]=process[\\\"argv\\\"].slice(2);if(typeof module!==\\\"undefined\\\"){module[\\\"exports\\\"]=Module}process[\\\"on\\\"](\\\"uncaughtException\\\",(function(ex){if(!(ex instanceof ExitStatus)){throw ex}}));Module[\\\"inspect\\\"]=(function(){return\\\"[Emscripten Module object]\\\"})}else if(ENVIRONMENT_IS_SHELL){if(!Module[\\\"print\\\"])Module[\\\"print\\\"]=print;if(typeof printErr!=\\\"undefined\\\")Module[\\\"printErr\\\"]=printErr;if(typeof read!=\\\"undefined\\\"){Module[\\\"read\\\"]=read}else{Module[\\\"read\\\"]=function read(){throw\\\"no read() available (jsc?)\\\"}}Module[\\\"readBinary\\\"]=function readBinary(f){if(typeof readbuffer===\\\"function\\\"){return new Uint8Array(readbuffer(f))}var data=read(f,\\\"binary\\\");assert(typeof data===\\\"object\\\");return data};if(typeof scriptArgs!=\\\"undefined\\\"){Module[\\\"arguments\\\"]=scriptArgs}else if(typeof arguments!=\\\"undefined\\\"){Module[\\\"arguments\\\"]=arguments}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){Module[\\\"read\\\"]=function read(url){var xhr=new XMLHttpRequest;xhr.open(\\\"GET\\\",url,false);xhr.send(null);return xhr.responseText};if(typeof arguments!=\\\"undefined\\\"){Module[\\\"arguments\\\"]=arguments}if(typeof console!==\\\"undefined\\\"){if(!Module[\\\"print\\\"])Module[\\\"print\\\"]=function print(x){console.log(x)};if(!Module[\\\"printErr\\\"])Module[\\\"printErr\\\"]=function printErr(x){console.log(x)}}else{var TRY_USE_DUMP=false;if(!Module[\\\"print\\\"])Module[\\\"print\\\"]=TRY_USE_DUMP&&typeof dump!==\\\"undefined\\\"?(function(x){dump(x)}):(function(x){})}if(ENVIRONMENT_IS_WORKER){Module[\\\"load\\\"]=importScripts}if(typeof Module[\\\"setWindowTitle\\\"]===\\\"undefined\\\"){Module[\\\"setWindowTitle\\\"]=(function(title){document.title=title})}}else{throw\\\"Unknown runtime environment. Where are we?\\\"}function globalEval(x){eval.call(null,x)}if(!Module[\\\"load\\\"]&&Module[\\\"read\\\"]){Module[\\\"load\\\"]=function load(f){globalEval(Module[\\\"read\\\"](f))}}if(!Module[\\\"print\\\"]){Module[\\\"print\\\"]=(function(){})}if(!Module[\\\"printErr\\\"]){Module[\\\"printErr\\\"]=Module[\\\"print\\\"]}if(!Module[\\\"arguments\\\"]){Module[\\\"arguments\\\"]=[]}if(!Module[\\\"thisProgram\\\"]){Module[\\\"thisProgram\\\"]=\\\"./this.program\\\"}Module.print=Module[\\\"print\\\"];Module.printErr=Module[\\\"printErr\\\"];Module[\\\"preRun\\\"]=[];Module[\\\"postRun\\\"]=[];for(var key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}var Runtime={setTempRet0:(function(value){tempRet0=value}),getTempRet0:(function(){return tempRet0}),stackSave:(function(){return STACKTOP}),stackRestore:(function(stackTop){STACKTOP=stackTop}),getNativeTypeSize:(function(type){switch(type){case\\\"i1\\\":case\\\"i8\\\":return 1;case\\\"i16\\\":return 2;case\\\"i32\\\":return 4;case\\\"i64\\\":return 8;case\\\"float\\\":return 4;case\\\"double\\\":return 8;default:{if(type[type.length-1]===\\\"*\\\"){return Runtime.QUANTUM_SIZE}else if(type[0]===\\\"i\\\"){var bits=parseInt(type.substr(1));assert(bits%8===0);return bits/8}else{return 0}}}}),getNativeFieldSize:(function(type){return Math.max(Runtime.getNativeTypeSize(type),Runtime.QUANTUM_SIZE)}),STACK_ALIGN:16,prepVararg:(function(ptr,type){if(type===\\\"double\\\"||type===\\\"i64\\\"){if(ptr&7){assert((ptr&7)===4);ptr+=4}}else{assert((ptr&3)===0)}return ptr}),getAlignSize:(function(type,size,vararg){if(!vararg&&(type==\\\"i64\\\"||type==\\\"double\\\"))return 8;if(!type)return Math.min(size,8);return Math.min(size||(type?Runtime.getNativeFieldSize(type):0),Runtime.QUANTUM_SIZE)}),dynCall:(function(sig,ptr,args){if(args&&args.length){if(!args.splice)args=Array.prototype.slice.call(args);args.splice(0,0,ptr);return Module[\\\"dynCall_\\\"+sig].apply(null,args)}else{return Module[\\\"dynCall_\\\"+sig].call(null,ptr)}}),functionPointers:[],addFunction:(function(func){for(var i=0;i<Runtime.functionPointers.length;i++){if(!Runtime.functionPointers[i]){Runtime.functionPointers[i]=func;return 2*(1+i)}}throw\\\"Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.\\\"}),removeFunction:(function(index){Runtime.functionPointers[(index-2)/2]=null}),warnOnce:(function(text){if(!Runtime.warnOnce.shown)Runtime.warnOnce.shown={};if(!Runtime.warnOnce.shown[text]){Runtime.warnOnce.shown[text]=1;Module.printErr(text)}}),funcWrappers:{},getFuncWrapper:(function(func,sig){assert(sig);if(!Runtime.funcWrappers[sig]){Runtime.funcWrappers[sig]={}}var sigCache=Runtime.funcWrappers[sig];if(!sigCache[func]){sigCache[func]=function dynCall_wrapper(){return Runtime.dynCall(sig,func,arguments)}}return sigCache[func]}),getCompilerSetting:(function(name){throw\\\"You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work\\\"}),stackAlloc:(function(size){var ret=STACKTOP;STACKTOP=STACKTOP+size|0;STACKTOP=STACKTOP+15&-16;return ret}),staticAlloc:(function(size){var ret=STATICTOP;STATICTOP=STATICTOP+size|0;STATICTOP=STATICTOP+15&-16;return ret}),dynamicAlloc:(function(size){var ret=DYNAMICTOP;DYNAMICTOP=DYNAMICTOP+size|0;DYNAMICTOP=DYNAMICTOP+15&-16;if(DYNAMICTOP>=TOTAL_MEMORY){var success=enlargeMemory();if(!success){DYNAMICTOP=ret;return 0}}return ret}),alignMemory:(function(size,quantum){var ret=size=Math.ceil(size/(quantum?quantum:16))*(quantum?quantum:16);return ret}),makeBigInt:(function(low,high,unsigned){var ret=unsigned?+(low>>>0)+ +(high>>>0)*+4294967296:+(low>>>0)+ +(high|0)*+4294967296;return ret}),GLOBAL_BASE:8,QUANTUM_SIZE:4,__dummy__:0};Module[\\\"Runtime\\\"]=Runtime;var __THREW__=0;var ABORT=false;var EXITSTATUS=0;var undef=0;var tempValue,tempInt,tempBigInt,tempInt2,tempBigInt2,tempPair,tempBigIntI,tempBigIntR,tempBigIntS,tempBigIntP,tempBigIntD,tempDouble,tempFloat;var tempI64,tempI64b;var tempRet0,tempRet1,tempRet2,tempRet3,tempRet4,tempRet5,tempRet6,tempRet7,tempRet8,tempRet9;function assert(condition,text){if(!condition){abort(\\\"Assertion failed: \\\"+text)}}var globalScope=this;function getCFunc(ident){var func=Module[\\\"_\\\"+ident];if(!func){try{func=eval(\\\"_\\\"+ident)}catch(e){}}assert(func,\\\"Cannot call unknown function \\\"+ident+\\\" (perhaps LLVM optimizations or closure removed it?)\\\");return func}var cwrap,ccall;((function(){var JSfuncs={\\\"stackSave\\\":(function(){Runtime.stackSave()}),\\\"stackRestore\\\":(function(){Runtime.stackRestore()}),\\\"arrayToC\\\":(function(arr){var ret=Runtime.stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}),\\\"stringToC\\\":(function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){ret=Runtime.stackAlloc((str.length<<2)+1);writeStringToMemory(str,ret)}return ret})};var toC={\\\"string\\\":JSfuncs[\\\"stringToC\\\"],\\\"array\\\":JSfuncs[\\\"arrayToC\\\"]};ccall=function ccallFunc(ident,returnType,argTypes,args,opts){var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=Runtime.stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);if(returnType===\\\"string\\\")ret=Pointer_stringify(ret);if(stack!==0){if(opts&&opts.async){EmterpreterAsync.asyncFinalizers.push((function(){Runtime.stackRestore(stack)}));return}Runtime.stackRestore(stack)}return ret};var sourceRegex=/^function\\\\s*\\\\(([^)]*)\\\\)\\\\s*{\\\\s*([^*]*?)[\\\\s;]*(?:return\\\\s*(.*?)[;\\\\s]*)?}$/;function parseJSFunc(jsfunc){var parsed=jsfunc.toString().match(sourceRegex).slice(1);return{arguments:parsed[0],body:parsed[1],returnValue:parsed[2]}}var JSsource={};for(var fun in JSfuncs){if(JSfuncs.hasOwnProperty(fun)){JSsource[fun]=parseJSFunc(JSfuncs[fun])}}cwrap=function cwrap(ident,returnType,argTypes){argTypes=argTypes||[];var cfunc=getCFunc(ident);var numericArgs=argTypes.every((function(type){return type===\\\"number\\\"}));var numericRet=returnType!==\\\"string\\\";if(numericRet&&numericArgs){return cfunc}var argNames=argTypes.map((function(x,i){return\\\"$\\\"+i}));var funcstr=\\\"(function(\\\"+argNames.join(\\\",\\\")+\\\") {\\\";var nargs=argTypes.length;if(!numericArgs){funcstr+=\\\"var stack = \\\"+JSsource[\\\"stackSave\\\"].body+\\\";\\\";for(var i=0;i<nargs;i++){var arg=argNames[i],type=argTypes[i];if(type===\\\"number\\\")continue;var convertCode=JSsource[type+\\\"ToC\\\"];funcstr+=\\\"var \\\"+convertCode.arguments+\\\" = \\\"+arg+\\\";\\\";funcstr+=convertCode.body+\\\";\\\";funcstr+=arg+\\\"=\\\"+convertCode.returnValue+\\\";\\\"}}var cfuncname=parseJSFunc((function(){return cfunc})).returnValue;funcstr+=\\\"var ret = \\\"+cfuncname+\\\"(\\\"+argNames.join(\\\",\\\")+\\\");\\\";if(!numericRet){var strgfy=parseJSFunc((function(){return Pointer_stringify})).returnValue;funcstr+=\\\"ret = \\\"+strgfy+\\\"(ret);\\\"}if(!numericArgs){funcstr+=JSsource[\\\"stackRestore\\\"].body.replace(\\\"()\\\",\\\"(stack)\\\")+\\\";\\\"}funcstr+=\\\"return ret})\\\";return eval(funcstr)}}))();Module[\\\"ccall\\\"]=ccall;Module[\\\"cwrap\\\"]=cwrap;function setValue(ptr,value,type,noSafe){type=type||\\\"i8\\\";if(type.charAt(type.length-1)===\\\"*\\\")type=\\\"i32\\\";switch(type){case\\\"i1\\\":HEAP8[ptr>>0]=value;break;case\\\"i8\\\":HEAP8[ptr>>0]=value;break;case\\\"i16\\\":HEAP16[ptr>>1]=value;break;case\\\"i32\\\":HEAP32[ptr>>2]=value;break;case\\\"i64\\\":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=+1?tempDouble>+0?(Math_min(+Math_floor(tempDouble/+4294967296),+4294967295)|0)>>>0:~~+Math_ceil((tempDouble- +(~~tempDouble>>>0))/+4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case\\\"float\\\":HEAPF32[ptr>>2]=value;break;case\\\"double\\\":HEAPF64[ptr>>3]=value;break;default:abort(\\\"invalid type for setValue: \\\"+type)}}Module[\\\"setValue\\\"]=setValue;function getValue(ptr,type,noSafe){type=type||\\\"i8\\\";if(type.charAt(type.length-1)===\\\"*\\\")type=\\\"i32\\\";switch(type){case\\\"i1\\\":return HEAP8[ptr>>0];case\\\"i8\\\":return HEAP8[ptr>>0];case\\\"i16\\\":return HEAP16[ptr>>1];case\\\"i32\\\":return HEAP32[ptr>>2];case\\\"i64\\\":return HEAP32[ptr>>2];case\\\"float\\\":return HEAPF32[ptr>>2];case\\\"double\\\":return HEAPF64[ptr>>3];default:abort(\\\"invalid type for setValue: \\\"+type)}return null}Module[\\\"getValue\\\"]=getValue;var ALLOC_NORMAL=0;var ALLOC_STACK=1;var ALLOC_STATIC=2;var ALLOC_DYNAMIC=3;var ALLOC_NONE=4;Module[\\\"ALLOC_NORMAL\\\"]=ALLOC_NORMAL;Module[\\\"ALLOC_STACK\\\"]=ALLOC_STACK;Module[\\\"ALLOC_STATIC\\\"]=ALLOC_STATIC;Module[\\\"ALLOC_DYNAMIC\\\"]=ALLOC_DYNAMIC;Module[\\\"ALLOC_NONE\\\"]=ALLOC_NONE;function allocate(slab,types,allocator,ptr){var zeroinit,size;if(typeof slab===\\\"number\\\"){zeroinit=true;size=slab}else{zeroinit=false;size=slab.length}var singleType=typeof types===\\\"string\\\"?types:null;var ret;if(allocator==ALLOC_NONE){ret=ptr}else{ret=[_malloc,Runtime.stackAlloc,Runtime.staticAlloc,Runtime.dynamicAlloc][allocator===undefined?ALLOC_STATIC:allocator](Math.max(size,singleType?1:types.length))}if(zeroinit){var ptr=ret,stop;assert((ret&3)==0);stop=ret+(size&~3);for(;ptr<stop;ptr+=4){HEAP32[ptr>>2]=0}stop=ret+size;while(ptr<stop){HEAP8[ptr++>>0]=0}return ret}if(singleType===\\\"i8\\\"){if(slab.subarray||slab.slice){HEAPU8.set(slab,ret)}else{HEAPU8.set(new Uint8Array(slab),ret)}return ret}var i=0,type,typeSize,previousType;while(i<size){var curr=slab[i];if(typeof curr===\\\"function\\\"){curr=Runtime.getFunctionIndex(curr)}type=singleType||types[i];if(type===0){i++;continue}if(type==\\\"i64\\\")type=\\\"i32\\\";setValue(ret+i,curr,type);if(previousType!==type){typeSize=Runtime.getNativeTypeSize(type);previousType=type}i+=typeSize}return ret}Module[\\\"allocate\\\"]=allocate;function getMemory(size){if(!staticSealed)return Runtime.staticAlloc(size);if(typeof _sbrk!==\\\"undefined\\\"&&!_sbrk.called||!runtimeInitialized)return Runtime.dynamicAlloc(size);return _malloc(size)}Module[\\\"getMemory\\\"]=getMemory;function Pointer_stringify(ptr,length){if(length===0||!ptr)return\\\"\\\";var hasUtf=0;var t;var i=0;while(1){t=HEAPU8[ptr+i>>0];hasUtf|=t;if(t==0&&!length)break;i++;if(length&&i==length)break}if(!length)length=i;var ret=\\\"\\\";if(hasUtf<128){var MAX_CHUNK=1024;var curr;while(length>0){curr=String.fromCharCode.apply(String,HEAPU8.subarray(ptr,ptr+Math.min(length,MAX_CHUNK)));ret=ret?ret+curr:curr;ptr+=MAX_CHUNK;length-=MAX_CHUNK}return ret}return Module[\\\"UTF8ToString\\\"](ptr)}Module[\\\"Pointer_stringify\\\"]=Pointer_stringify;function AsciiToString(ptr){var str=\\\"\\\";while(1){var ch=HEAP8[ptr++>>0];if(!ch)return str;str+=String.fromCharCode(ch)}}Module[\\\"AsciiToString\\\"]=AsciiToString;function stringToAscii(str,outPtr){return writeAsciiToMemory(str,outPtr,false)}Module[\\\"stringToAscii\\\"]=stringToAscii;function UTF8ArrayToString(u8Array,idx){var u0,u1,u2,u3,u4,u5;var str=\\\"\\\";while(1){u0=u8Array[idx++];if(!u0)return str;if(!(u0&128)){str+=String.fromCharCode(u0);continue}u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u3=u8Array[idx++]&63;if((u0&248)==240){u0=(u0&7)<<18|u1<<12|u2<<6|u3}else{u4=u8Array[idx++]&63;if((u0&252)==248){u0=(u0&3)<<24|u1<<18|u2<<12|u3<<6|u4}else{u5=u8Array[idx++]&63;u0=(u0&1)<<30|u1<<24|u2<<18|u3<<12|u4<<6|u5}}}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}Module[\\\"UTF8ArrayToString\\\"]=UTF8ArrayToString;function UTF8ToString(ptr){return UTF8ArrayToString(HEAPU8,ptr)}Module[\\\"UTF8ToString\\\"]=UTF8ToString;function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=2097151){if(outIdx+3>=endIdx)break;outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=67108863){if(outIdx+4>=endIdx)break;outU8Array[outIdx++]=248|u>>24;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else{if(outIdx+5>=endIdx)break;outU8Array[outIdx++]=252|u>>30;outU8Array[outIdx++]=128|u>>24&63;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}}outU8Array[outIdx]=0;return outIdx-startIdx}Module[\\\"stringToUTF8Array\\\"]=stringToUTF8Array;function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}Module[\\\"stringToUTF8\\\"]=stringToUTF8;function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){++len}else if(u<=2047){len+=2}else if(u<=65535){len+=3}else if(u<=2097151){len+=4}else if(u<=67108863){len+=5}else{len+=6}}return len}Module[\\\"lengthBytesUTF8\\\"]=lengthBytesUTF8;function UTF16ToString(ptr){var i=0;var str=\\\"\\\";while(1){var codeUnit=HEAP16[ptr+i*2>>1];if(codeUnit==0)return str;++i;str+=String.fromCharCode(codeUnit)}}Module[\\\"UTF16ToString\\\"]=UTF16ToString;function stringToUTF16(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<2)return 0;maxBytesToWrite-=2;var startPtr=outPtr;var numCharsToWrite=maxBytesToWrite<str.length*2?maxBytesToWrite/2:str.length;for(var i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>1]=codeUnit;outPtr+=2}HEAP16[outPtr>>1]=0;return outPtr-startPtr}Module[\\\"stringToUTF16\\\"]=stringToUTF16;function lengthBytesUTF16(str){return str.length*2}Module[\\\"lengthBytesUTF16\\\"]=lengthBytesUTF16;function UTF32ToString(ptr){var i=0;var str=\\\"\\\";while(1){var utf32=HEAP32[ptr+i*4>>2];if(utf32==0)return str;++i;if(utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}else{str+=String.fromCharCode(utf32)}}}Module[\\\"UTF32ToString\\\"]=UTF32ToString;function stringToUTF32(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<4)return 0;var startPtr=outPtr;var endPtr=startPtr+maxBytesToWrite-4;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343){var trailSurrogate=str.charCodeAt(++i);codeUnit=65536+((codeUnit&1023)<<10)|trailSurrogate&1023}HEAP32[outPtr>>2]=codeUnit;outPtr+=4;if(outPtr+4>endPtr)break}HEAP32[outPtr>>2]=0;return outPtr-startPtr}Module[\\\"stringToUTF32\\\"]=stringToUTF32;function lengthBytesUTF32(str){var len=0;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343)++i;len+=4}return len}Module[\\\"lengthBytesUTF32\\\"]=lengthBytesUTF32;function demangle(func){var hasLibcxxabi=!!Module[\\\"___cxa_demangle\\\"];if(hasLibcxxabi){try{var buf=_malloc(func.length);writeStringToMemory(func.substr(1),buf);var status=_malloc(4);var ret=Module[\\\"___cxa_demangle\\\"](buf,0,0,status);if(getValue(status,\\\"i32\\\")===0&&ret){return Pointer_stringify(ret)}}catch(e){}finally{if(buf)_free(buf);if(status)_free(status);if(ret)_free(ret)}}var i=3;var basicTypes={\\\"v\\\":\\\"void\\\",\\\"b\\\":\\\"bool\\\",\\\"c\\\":\\\"char\\\",\\\"s\\\":\\\"short\\\",\\\"i\\\":\\\"int\\\",\\\"l\\\":\\\"long\\\",\\\"f\\\":\\\"float\\\",\\\"d\\\":\\\"double\\\",\\\"w\\\":\\\"wchar_t\\\",\\\"a\\\":\\\"signed char\\\",\\\"h\\\":\\\"unsigned char\\\",\\\"t\\\":\\\"unsigned short\\\",\\\"j\\\":\\\"unsigned int\\\",\\\"m\\\":\\\"unsigned long\\\",\\\"x\\\":\\\"long long\\\",\\\"y\\\":\\\"unsigned long long\\\",\\\"z\\\":\\\"...\\\"};var subs=[];var first=true;function dump(x){if(x)Module.print(x);Module.print(func);var pre=\\\"\\\";for(var a=0;a<i;a++)pre+=\\\" \\\";Module.print(pre+\\\"^\\\")}function parseNested(){i++;if(func[i]===\\\"K\\\")i++;var parts=[];while(func[i]!==\\\"E\\\"){if(func[i]===\\\"S\\\"){i++;var next=func.indexOf(\\\"_\\\",i);var num=func.substring(i,next)||0;parts.push(subs[num]||\\\"?\\\");i=next+1;continue}if(func[i]===\\\"C\\\"){parts.push(parts[parts.length-1]);i+=2;continue}var size=parseInt(func.substr(i));var pre=size.toString().length;if(!size||!pre){i--;break}var curr=func.substr(i+pre,size);parts.push(curr);subs.push(curr);i+=pre+size}i++;return parts}function parse(rawList,limit,allowVoid){limit=limit||Infinity;var ret=\\\"\\\",list=[];function flushList(){return\\\"(\\\"+list.join(\\\", \\\")+\\\")\\\"}var name;if(func[i]===\\\"N\\\"){name=parseNested().join(\\\"::\\\");limit--;if(limit===0)return rawList?[name]:name}else{if(func[i]===\\\"K\\\"||first&&func[i]===\\\"L\\\")i++;var size=parseInt(func.substr(i));if(size){var pre=size.toString().length;name=func.substr(i+pre,size);i+=pre+size}}first=false;if(func[i]===\\\"I\\\"){i++;var iList=parse(true);var iRet=parse(true,1,true);ret+=iRet[0]+\\\" \\\"+name+\\\"<\\\"+iList.join(\\\", \\\")+\\\">\\\"}else{ret=name}paramLoop:while(i<func.length&&limit-->0){var c=func[i++];if(c in basicTypes){list.push(basicTypes[c])}else{switch(c){case\\\"P\\\":list.push(parse(true,1,true)[0]+\\\"*\\\");break;case\\\"R\\\":list.push(parse(true,1,true)[0]+\\\"&\\\");break;case\\\"L\\\":{i++;var end=func.indexOf(\\\"E\\\",i);var size=end-i;list.push(func.substr(i,size));i+=size+2;break};case\\\"A\\\":{var size=parseInt(func.substr(i));i+=size.toString().length;if(func[i]!==\\\"_\\\")throw\\\"?\\\";i++;list.push(parse(true,1,true)[0]+\\\" [\\\"+size+\\\"]\\\");break};case\\\"E\\\":break paramLoop;default:ret+=\\\"?\\\"+c;break paramLoop}}}if(!allowVoid&&list.length===1&&list[0]===\\\"void\\\")list=[];if(rawList){if(ret){list.push(ret+\\\"?\\\")}return list}else{return ret+flushList()}}var parsed=func;try{if(func==\\\"Object._main\\\"||func==\\\"_main\\\"){return\\\"main()\\\"}if(typeof func===\\\"number\\\")func=Pointer_stringify(func);if(func[0]!==\\\"_\\\")return func;if(func[1]!==\\\"_\\\")return func;if(func[2]!==\\\"Z\\\")return func;switch(func[3]){case\\\"n\\\":return\\\"operator new()\\\";case\\\"d\\\":return\\\"operator delete()\\\"}parsed=parse()}catch(e){parsed+=\\\"?\\\"}if(parsed.indexOf(\\\"?\\\")>=0&&!hasLibcxxabi){Runtime.warnOnce(\\\"warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling\\\")}return parsed}function demangleAll(text){return text.replace(/__Z[\\\\w\\\\d_]+/g,(function(x){var y=demangle(x);return x===y?x:x+\\\" [\\\"+y+\\\"]\\\"}))}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error(0)}catch(e){err=e}if(!err.stack){return\\\"(no stack trace available)\\\"}}return err.stack.toString()}function stackTrace(){return demangleAll(jsStackTrace())}Module[\\\"stackTrace\\\"]=stackTrace;var PAGE_SIZE=4096;function alignMemoryPage(x){if(x%4096>0){x+=4096-x%4096}return x}var HEAP;var HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;var STATIC_BASE=0,STATICTOP=0,staticSealed=false;var STACK_BASE=0,STACKTOP=0,STACK_MAX=0;var DYNAMIC_BASE=0,DYNAMICTOP=0;function enlargeMemory(){var OLD_TOTAL_MEMORY=TOTAL_MEMORY;var LIMIT=Math.pow(2,31);if(DYNAMICTOP>=LIMIT)return false;while(TOTAL_MEMORY<=DYNAMICTOP){if(TOTAL_MEMORY<LIMIT/2){TOTAL_MEMORY=alignMemoryPage(2*TOTAL_MEMORY)}else{var last=TOTAL_MEMORY;TOTAL_MEMORY=alignMemoryPage((3*TOTAL_MEMORY+LIMIT)/4);if(TOTAL_MEMORY<=last)return false}}TOTAL_MEMORY=Math.max(TOTAL_MEMORY,16*1024*1024);if(TOTAL_MEMORY>=LIMIT)return false;try{if(ArrayBuffer.transfer){buffer=ArrayBuffer.transfer(buffer,TOTAL_MEMORY)}else{var oldHEAP8=HEAP8;buffer=new ArrayBuffer(TOTAL_MEMORY)}}catch(e){return false}var success=_emscripten_replace_memory(buffer);if(!success)return false;Module[\\\"buffer\\\"]=buffer;Module[\\\"HEAP8\\\"]=HEAP8=new Int8Array(buffer);Module[\\\"HEAP16\\\"]=HEAP16=new Int16Array(buffer);Module[\\\"HEAP32\\\"]=HEAP32=new Int32Array(buffer);Module[\\\"HEAPU8\\\"]=HEAPU8=new Uint8Array(buffer);Module[\\\"HEAPU16\\\"]=HEAPU16=new Uint16Array(buffer);Module[\\\"HEAPU32\\\"]=HEAPU32=new Uint32Array(buffer);Module[\\\"HEAPF32\\\"]=HEAPF32=new Float32Array(buffer);Module[\\\"HEAPF64\\\"]=HEAPF64=new Float64Array(buffer);if(!ArrayBuffer.transfer){HEAP8.set(oldHEAP8)}return true}var byteLength;try{byteLength=Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype,\\\"byteLength\\\").get);byteLength(new ArrayBuffer(4))}catch(e){byteLength=(function(buffer){return buffer.byteLength})}var TOTAL_STACK=Module[\\\"TOTAL_STACK\\\"]||5242880;var TOTAL_MEMORY=Module[\\\"TOTAL_MEMORY\\\"]||16777216;var totalMemory=64*1024;while(totalMemory<TOTAL_MEMORY||totalMemory<2*TOTAL_STACK){if(totalMemory<16*1024*1024){totalMemory*=2}else{totalMemory+=16*1024*1024}}totalMemory=Math.max(totalMemory,16*1024*1024);if(totalMemory!==TOTAL_MEMORY){TOTAL_MEMORY=totalMemory}assert(typeof Int32Array!==\\\"undefined\\\"&&typeof Float64Array!==\\\"undefined\\\"&&!!(new Int32Array(1))[\\\"subarray\\\"]&&!!(new Int32Array(1))[\\\"set\\\"],\\\"JS engine does not provide full typed array support\\\");var buffer;buffer=new ArrayBuffer(TOTAL_MEMORY);HEAP8=new Int8Array(buffer);HEAP16=new Int16Array(buffer);HEAP32=new Int32Array(buffer);HEAPU8=new Uint8Array(buffer);HEAPU16=new Uint16Array(buffer);HEAPU32=new Uint32Array(buffer);HEAPF32=new Float32Array(buffer);HEAPF64=new Float64Array(buffer);HEAP32[0]=255;assert(HEAPU8[0]===255&&HEAPU8[3]===0,\\\"Typed arrays 2 must be run on a little-endian system\\\");Module[\\\"HEAP\\\"]=HEAP;Module[\\\"buffer\\\"]=buffer;Module[\\\"HEAP8\\\"]=HEAP8;Module[\\\"HEAP16\\\"]=HEAP16;Module[\\\"HEAP32\\\"]=HEAP32;Module[\\\"HEAPU8\\\"]=HEAPU8;Module[\\\"HEAPU16\\\"]=HEAPU16;Module[\\\"HEAPU32\\\"]=HEAPU32;Module[\\\"HEAPF32\\\"]=HEAPF32;Module[\\\"HEAPF64\\\"]=HEAPF64;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\\\"function\\\"){callback();continue}var func=callback.func;if(typeof func===\\\"number\\\"){if(callback.arg===undefined){Runtime.dynCall(\\\"v\\\",func)}else{Runtime.dynCall(\\\"vi\\\",func,[callback.arg])}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module[\\\"preRun\\\"]){if(typeof Module[\\\"preRun\\\"]==\\\"function\\\")Module[\\\"preRun\\\"]=[Module[\\\"preRun\\\"]];while(Module[\\\"preRun\\\"].length){addOnPreRun(Module[\\\"preRun\\\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function ensureInitRuntime(){if(runtimeInitialized)return;runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){callRuntimeCallbacks(__ATEXIT__);runtimeExited=true}function postRun(){if(Module[\\\"postRun\\\"]){if(typeof Module[\\\"postRun\\\"]==\\\"function\\\")Module[\\\"postRun\\\"]=[Module[\\\"postRun\\\"]];while(Module[\\\"postRun\\\"].length){addOnPostRun(Module[\\\"postRun\\\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}Module[\\\"addOnPreRun\\\"]=addOnPreRun;function addOnInit(cb){__ATINIT__.unshift(cb)}Module[\\\"addOnInit\\\"]=addOnInit;function addOnPreMain(cb){__ATMAIN__.unshift(cb)}Module[\\\"addOnPreMain\\\"]=addOnPreMain;function addOnExit(cb){__ATEXIT__.unshift(cb)}Module[\\\"addOnExit\\\"]=addOnExit;function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}Module[\\\"addOnPostRun\\\"]=addOnPostRun;function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}Module[\\\"intArrayFromString\\\"]=intArrayFromString;function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){chr&=255}ret.push(String.fromCharCode(chr))}return ret.join(\\\"\\\")}Module[\\\"intArrayToString\\\"]=intArrayToString;function writeStringToMemory(string,buffer,dontAddNull){var array=intArrayFromString(string,dontAddNull);var i=0;while(i<array.length){var chr=array[i];HEAP8[buffer+i>>0]=chr;i=i+1}}Module[\\\"writeStringToMemory\\\"]=writeStringToMemory;function writeArrayToMemory(array,buffer){for(var i=0;i<array.length;i++){HEAP8[buffer++>>0]=array[i]}}Module[\\\"writeArrayToMemory\\\"]=writeArrayToMemory;function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}Module[\\\"writeAsciiToMemory\\\"]=writeAsciiToMemory;function unSign(value,bits,ignore){if(value>=0){return value}return bits<=32?2*Math.abs(1<<bits-1)+value:Math.pow(2,bits)+value}function reSign(value,bits,ignore){if(value<=0){return value}var half=bits<=32?Math.abs(1<<bits-1):Math.pow(2,bits-1);if(value>=half&&(bits<=32||value>half)){value=-2*half+value}return value}if(!Math[\\\"imul\\\"]||Math[\\\"imul\\\"](4294967295,5)!==-5)Math[\\\"imul\\\"]=function imul(a,b){var ah=a>>>16;var al=a&65535;var bh=b>>>16;var bl=b&65535;return al*bl+(ah*bl+al*bh<<16)|0};Math.imul=Math[\\\"imul\\\"];if(!Math[\\\"clz32\\\"])Math[\\\"clz32\\\"]=(function(x){x=x>>>0;for(var i=0;i<32;i++){if(x&1<<31-i)return i}return 32});Math.clz32=Math[\\\"clz32\\\"];var Math_abs=Math.abs;var Math_cos=Math.cos;var Math_sin=Math.sin;var Math_tan=Math.tan;var Math_acos=Math.acos;var Math_asin=Math.asin;var Math_atan=Math.atan;var Math_atan2=Math.atan2;var Math_exp=Math.exp;var Math_log=Math.log;var Math_sqrt=Math.sqrt;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_pow=Math.pow;var Math_imul=Math.imul;var Math_fround=Math.fround;var Math_min=Math.min;var Math_clz32=Math.clz32;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function getUniqueRunDependency(id){return id}function addRunDependency(id){runDependencies++;if(Module[\\\"monitorRunDependencies\\\"]){Module[\\\"monitorRunDependencies\\\"](runDependencies)}}Module[\\\"addRunDependency\\\"]=addRunDependency;function removeRunDependency(id){runDependencies--;if(Module[\\\"monitorRunDependencies\\\"]){Module[\\\"monitorRunDependencies\\\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\\\"removeRunDependency\\\"]=removeRunDependency;Module[\\\"preloadedImages\\\"]={};Module[\\\"preloadedAudios\\\"]={};var memoryInitializer=null;var ASM_CONSTS=[];STATIC_BASE=8;STATICTOP=STATIC_BASE+4928;__ATINIT__.push();allocate([192,0,0,0,103,4,0,0,24,0,0,0,0,0,0,0,152,0,0,0,116,4,0,0,152,0,0,0,129,4,0,0,192,0,0,0,142,4,0,0,32,0,0,0,0,0,0,0,192,0,0,0,175,4,0,0,40,0,0,0,0,0,0,0,192,0,0,0,245,4,0,0,40,0,0,0,0,0,0,0,192,0,0,0,209,4,0,0,72,0,0,0,0,0,0,0,192,0,0,0,23,5,0,0,56,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,56,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,104,0,0,0,3,0,0,0,7,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,46,13,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,97,58,32,37,100,45,62,37,100,10,0,109,98,58,32,37,100,45,62,37,100,10,0,109,32,100,111,110,101,0,97,32,99,117,116,116,101,114,65,110,103,108,101,61,37,102,32,112,97,115,115,68,101,112,116,104,61,37,102,32,109,97,120,68,101,112,116,104,61,37,102,10,0,105,0,106,58,32,101,100,103,101,73,110,100,101,120,101,115,58,32,37,100,10,0,107,0,110,117,109,80,114,111,99,101,115,115,101,100,58,32,37,100,47,37,100,10,0,100,105,118,101,0,114,101,116,114,97,99,116,0,122,32,45,32,100,111,110,101,0,98,0,99,0,100,0,101,0,102,58,32,37,100,32,118,111,114,111,110,111,105,32,101,100,103,101,115,10,0,103,49,58,32,37,100,32,102,105,108,116,101,114,69,100,103,101,115,10,0,103,50,58,32,37,100,32,102,105,108,116,101,114,69,100,103,101,115,10,0,103,51,58,32,37,100,32,102,105,108,116,101,114,69,100,103,101,115,10,0,103,52,0,103,53,58,32,37,100,32,101,100,103,101,115,10,0,83,116,57,98,97,100,95,97,108,108,111,99,0,83,116,57,101,120,99,101,112,116,105,111,110,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,33,34,118,101,99,116,111,114,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,67,58,92,80,114,111,103,114,97,109,32,70,105,108,101,115,92,69,109,115,99,114,105,112,116,101,110,92,101,109,115,99,114,105,112,116,101,110,92,49,46,51,53,46,48,92,115,121,115,116,101,109,92,105,110,99,108,117,100,101,92,108,105,98,99,120,120,92,118,101,99,116,111,114,0,95,95,116,104,114,111,119,95,108,101,110,103,116,104,95,101,114,114,111,114,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0],\\\"i8\\\",ALLOC_NONE,Runtime.GLOBAL_BASE);var tempDoublePtr=Runtime.alignMemory(allocate(12,\\\"i8\\\",ALLOC_STATIC),8);assert(tempDoublePtr%8==0);function copyTempFloat(ptr){HEAP8[tempDoublePtr]=HEAP8[ptr];HEAP8[tempDoublePtr+1]=HEAP8[ptr+1];HEAP8[tempDoublePtr+2]=HEAP8[ptr+2];HEAP8[tempDoublePtr+3]=HEAP8[ptr+3]}function copyTempDouble(ptr){HEAP8[tempDoublePtr]=HEAP8[ptr];HEAP8[tempDoublePtr+1]=HEAP8[ptr+1];HEAP8[tempDoublePtr+2]=HEAP8[ptr+2];HEAP8[tempDoublePtr+3]=HEAP8[ptr+3];HEAP8[tempDoublePtr+4]=HEAP8[ptr+4];HEAP8[tempDoublePtr+5]=HEAP8[ptr+5];HEAP8[tempDoublePtr+6]=HEAP8[ptr+6];HEAP8[tempDoublePtr+7]=HEAP8[ptr+7]}var _BDtoIHigh=true;Module[\\\"_i64Subtract\\\"]=_i64Subtract;function ___setErrNo(value){if(Module[\\\"___errno_location\\\"])HEAP32[Module[\\\"___errno_location\\\"]()>>2]=value;return value}var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name){switch(name){case 30:return PAGE_SIZE;case 85:return totalMemory/PAGE_SIZE;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 80:case 81:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 79:return 0;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:{if(typeof navigator===\\\"object\\\")return navigator[\\\"hardwareConcurrency\\\"]||1;return 1}}___setErrNo(ERRNO_CODES.EINVAL);return-1}var _SItoD=true;function _pthread_cleanup_push(routine,arg){__ATEXIT__.push((function(){Runtime.dynCall(\\\"vi\\\",routine,[arg])}));_pthread_cleanup_push.level=__ATEXIT__.length}function __ZSt18uncaught_exceptionv(){return!!__ZSt18uncaught_exceptionv.uncaught_exception}var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:(function(adjusted){if(!adjusted||EXCEPTIONS.infos[adjusted])return adjusted;for(var ptr in EXCEPTIONS.infos){var info=EXCEPTIONS.infos[ptr];if(info.adjusted===adjusted){return ptr}}return adjusted}),addRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount++}),decRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];assert(info.refcount>0);info.refcount--;if(info.refcount===0){if(info.destructor){Runtime.dynCall(\\\"vi\\\",info.destructor,[ptr])}delete EXCEPTIONS.infos[ptr];___cxa_free_exception(ptr)}}),clearRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount=0})};function ___resumeException(ptr){if(!EXCEPTIONS.last){EXCEPTIONS.last=ptr}EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr));throw ptr+\\\" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.\\\"}function ___cxa_find_matching_catch(){var thrown=EXCEPTIONS.last;if(!thrown){return(asm[\\\"setTempRet0\\\"](0),0)|0}var info=EXCEPTIONS.infos[thrown];var throwntype=info.type;if(!throwntype){return(asm[\\\"setTempRet0\\\"](0),thrown)|0}var typeArray=Array.prototype.slice.call(arguments);var pointer=Module[\\\"___cxa_is_pointer_type\\\"](throwntype);if(!___cxa_find_matching_catch.buffer)___cxa_find_matching_catch.buffer=_malloc(4);HEAP32[___cxa_find_matching_catch.buffer>>2]=thrown;thrown=___cxa_find_matching_catch.buffer;for(var i=0;i<typeArray.length;i++){if(typeArray[i]&&Module[\\\"___cxa_can_catch\\\"](typeArray[i],throwntype,thrown)){thrown=HEAP32[thrown>>2];info.adjusted=thrown;return(asm[\\\"setTempRet0\\\"](typeArray[i]),thrown)|0}}thrown=HEAP32[thrown>>2];return(asm[\\\"setTempRet0\\\"](throwntype),thrown)|0}function ___cxa_throw(ptr,type,destructor){EXCEPTIONS.infos[ptr]={ptr:ptr,adjusted:ptr,type:type,destructor:destructor,refcount:0};EXCEPTIONS.last=ptr;if(!(\\\"uncaught_exception\\\"in __ZSt18uncaught_exceptionv)){__ZSt18uncaught_exceptionv.uncaught_exception=1}else{__ZSt18uncaught_exceptionv.uncaught_exception++}throw ptr+\\\" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.\\\"}Module[\\\"_memset\\\"]=_memset;var _BDtoILow=true;Module[\\\"_bitshift64Lshr\\\"]=_bitshift64Lshr;Module[\\\"_bitshift64Shl\\\"]=_bitshift64Shl;function _pthread_cleanup_pop(){assert(_pthread_cleanup_push.level==__ATEXIT__.length,\\\"cannot pop if something else added meanwhile!\\\");__ATEXIT__.pop();_pthread_cleanup_push.level=__ATEXIT__.length}function _abort(){Module[\\\"abort\\\"]()}function ___assert_fail(condition,filename,line,func){ABORT=true;throw\\\"Assertion failed: \\\"+Pointer_stringify(condition)+\\\", at: \\\"+[filename?Pointer_stringify(filename):\\\"unknown filename\\\",line,func?Pointer_stringify(func):\\\"unknown function\\\"]+\\\" at \\\"+stackTrace()}var _tan=Math_tan;function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest);return dest}Module[\\\"_memcpy\\\"]=_memcpy;var SYSCALLS={varargs:0,get:(function(varargs){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret}),getStr:(function(){var ret=Pointer_stringify(SYSCALLS.get());return ret}),get64:(function(){var low=SYSCALLS.get(),high=SYSCALLS.get();if(low>=0)assert(high===0);else assert(high===-1);return low}),getZero:(function(){assert(SYSCALLS.get()===0)})};function ___syscall6(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD();FS.close(stream);return 0}catch(e){if(typeof FS===\\\"undefined\\\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module[\\\"_i64Add\\\"]=_i64Add;function _sbrk(bytes){var self=_sbrk;if(!self.called){DYNAMICTOP=alignMemoryPage(DYNAMICTOP);self.called=true;assert(Runtime.dynamicAlloc);self.alloc=Runtime.dynamicAlloc;Runtime.dynamicAlloc=(function(){abort(\\\"cannot dynamically allocate, sbrk now has control\\\")})}var ret=DYNAMICTOP;if(bytes!=0){var success=self.alloc(bytes);if(!success)return-1>>>0}return ret}Module[\\\"_memmove\\\"]=_memmove;function ___syscall146(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.get(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();var ret=0;if(!___syscall146.buffer)___syscall146.buffer=[];var buffer=___syscall146.buffer;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){var curr=HEAPU8[ptr+j];if(curr===0||curr===10){Module[\\\"print\\\"](UTF8ArrayToString(buffer,0));buffer.length=0}else{buffer.push(curr)}}ret+=len}return ret}catch(e){if(typeof FS===\\\"undefined\\\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}var _BItoD=true;var _sqrt=Math_sqrt;function ___syscall140(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),offset_high=SYSCALLS.get(),offset_low=SYSCALLS.get(),result=SYSCALLS.get(),whence=SYSCALLS.get();var offset=offset_low;assert(offset_high===0);FS.llseek(stream,offset,whence);HEAP32[result>>2]=stream.position;if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS===\\\"undefined\\\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}var PATH=undefined;function _emscripten_set_main_loop_timing(mode,value){Browser.mainLoop.timingMode=mode;Browser.mainLoop.timingValue=value;if(!Browser.mainLoop.func){return 1}if(mode==0){Browser.mainLoop.scheduler=function Browser_mainLoop_scheduler_setTimeout(){setTimeout(Browser.mainLoop.runner,value)};Browser.mainLoop.method=\\\"timeout\\\"}else if(mode==1){Browser.mainLoop.scheduler=function Browser_mainLoop_scheduler_rAF(){Browser.requestAnimationFrame(Browser.mainLoop.runner)};Browser.mainLoop.method=\\\"rAF\\\"}else if(mode==2){if(!window[\\\"setImmediate\\\"]){var setImmediates=[];var emscriptenMainLoopMessageId=\\\"__emcc\\\";function Browser_setImmediate_messageHandler(event){if(event.source===window&&event.data===emscriptenMainLoopMessageId){event.stopPropagation();setImmediates.shift()()}}window.addEventListener(\\\"message\\\",Browser_setImmediate_messageHandler,true);window[\\\"setImmediate\\\"]=function Browser_emulated_setImmediate(func){setImmediates.push(func);window.postMessage(emscriptenMainLoopMessageId,\\\"*\\\")}}Browser.mainLoop.scheduler=function Browser_mainLoop_scheduler_setImmediate(){window[\\\"setImmediate\\\"](Browser.mainLoop.runner)};Browser.mainLoop.method=\\\"immediate\\\"}return 0}function _emscripten_set_main_loop(func,fps,simulateInfiniteLoop,arg,noSetTiming){Module[\\\"noExitRuntime\\\"]=true;assert(!Browser.mainLoop.func,\\\"emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.\\\");Browser.mainLoop.func=func;Browser.mainLoop.arg=arg;var thisMainLoopId=Browser.mainLoop.currentlyRunningMainloop;Browser.mainLoop.runner=function Browser_mainLoop_runner(){if(ABORT)return;if(Browser.mainLoop.queue.length>0){var start=Date.now();var blocker=Browser.mainLoop.queue.shift();blocker.func(blocker.arg);if(Browser.mainLoop.remainingBlockers){var remaining=Browser.mainLoop.remainingBlockers;var next=remaining%1==0?remaining-1:Math.floor(remaining);if(blocker.counted){Browser.mainLoop.remainingBlockers=next}else{next=next+.5;Browser.mainLoop.remainingBlockers=(8*remaining+next)/9}}console.log('main loop blocker \\\"'+blocker.name+'\\\" took '+(Date.now()-start)+\\\" ms\\\");Browser.mainLoop.updateStatus();setTimeout(Browser.mainLoop.runner,0);return}if(thisMainLoopId<Browser.mainLoop.currentlyRunningMainloop)return;Browser.mainLoop.currentFrameNumber=Browser.mainLoop.currentFrameNumber+1|0;if(Browser.mainLoop.timingMode==1&&Browser.mainLoop.timingValue>1&&Browser.mainLoop.currentFrameNumber%Browser.mainLoop.timingValue!=0){Browser.mainLoop.scheduler();return}if(Browser.mainLoop.method===\\\"timeout\\\"&&Module.ctx){Module.printErr(\\\"Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!\\\");Browser.mainLoop.method=\\\"\\\"}Browser.mainLoop.runIter((function(){if(typeof arg!==\\\"undefined\\\"){Runtime.dynCall(\\\"vi\\\",func,[arg])}else{Runtime.dynCall(\\\"v\\\",func)}}));if(thisMainLoopId<Browser.mainLoop.currentlyRunningMainloop)return;if(typeof SDL===\\\"object\\\"&&SDL.audio&&SDL.audio.queueNewAudioData)SDL.audio.queueNewAudioData();Browser.mainLoop.scheduler()};if(!noSetTiming){if(fps&&fps>0)_emscripten_set_main_loop_timing(0,1e3/fps);else _emscripten_set_main_loop_timing(1,1);Browser.mainLoop.scheduler()}if(simulateInfiniteLoop){throw\\\"SimulateInfiniteLoop\\\"}}var Browser={mainLoop:{scheduler:null,method:\\\"\\\",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:(function(){Browser.mainLoop.scheduler=null;Browser.mainLoop.currentlyRunningMainloop++}),resume:(function(){Browser.mainLoop.currentlyRunningMainloop++;var timingMode=Browser.mainLoop.timingMode;var timingValue=Browser.mainLoop.timingValue;var func=Browser.mainLoop.func;Browser.mainLoop.func=null;_emscripten_set_main_loop(func,0,false,Browser.mainLoop.arg,true);_emscripten_set_main_loop_timing(timingMode,timingValue);Browser.mainLoop.scheduler()}),updateStatus:(function(){if(Module[\\\"setStatus\\\"]){var message=Module[\\\"statusMessage\\\"]||\\\"Please wait...\\\";var remaining=Browser.mainLoop.remainingBlockers;var expected=Browser.mainLoop.expectedBlockers;if(remaining){if(remaining<expected){Module[\\\"setStatus\\\"](message+\\\" (\\\"+(expected-remaining)+\\\"/\\\"+expected+\\\")\\\")}else{Module[\\\"setStatus\\\"](message)}}else{Module[\\\"setStatus\\\"](\\\"\\\")}}}),runIter:(function(func){if(ABORT)return;if(Module[\\\"preMainLoop\\\"]){var preRet=Module[\\\"preMainLoop\\\"]();if(preRet===false){return}}try{func()}catch(e){if(e instanceof ExitStatus){return}else{if(e&&typeof e===\\\"object\\\"&&e.stack)Module.printErr(\\\"exception thrown: \\\"+[e,e.stack]);throw e}}if(Module[\\\"postMainLoop\\\"])Module[\\\"postMainLoop\\\"]()})},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:(function(){if(!Module[\\\"preloadPlugins\\\"])Module[\\\"preloadPlugins\\\"]=[];if(Browser.initted)return;Browser.initted=true;try{new Blob;Browser.hasBlobConstructor=true}catch(e){Browser.hasBlobConstructor=false;console.log(\\\"warning: no blob constructor, cannot create blobs with mimetypes\\\")}Browser.BlobBuilder=typeof MozBlobBuilder!=\\\"undefined\\\"?MozBlobBuilder:typeof WebKitBlobBuilder!=\\\"undefined\\\"?WebKitBlobBuilder:!Browser.hasBlobConstructor?console.log(\\\"warning: no BlobBuilder\\\"):null;Browser.URLObject=typeof window!=\\\"undefined\\\"?window.URL?window.URL:window.webkitURL:undefined;if(!Module.noImageDecoding&&typeof Browser.URLObject===\\\"undefined\\\"){console.log(\\\"warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.\\\");Module.noImageDecoding=true}var imagePlugin={};imagePlugin[\\\"canHandle\\\"]=function imagePlugin_canHandle(name){return!Module.noImageDecoding&&/\\\\.(jpg|jpeg|png|bmp)$/i.test(name)};imagePlugin[\\\"handle\\\"]=function imagePlugin_handle(byteArray,name,onload,onerror){var b=null;if(Browser.hasBlobConstructor){try{b=new Blob([byteArray],{type:Browser.getMimetype(name)});if(b.size!==byteArray.length){b=new Blob([(new Uint8Array(byteArray)).buffer],{type:Browser.getMimetype(name)})}}catch(e){Runtime.warnOnce(\\\"Blob constructor present but fails: \\\"+e+\\\"; falling back to blob builder\\\")}}if(!b){var bb=new Browser.BlobBuilder;bb.append((new Uint8Array(byteArray)).buffer);b=bb.getBlob()}var url=Browser.URLObject.createObjectURL(b);var img=new Image;img.onload=function img_onload(){assert(img.complete,\\\"Image \\\"+name+\\\" could not be decoded\\\");var canvas=document.createElement(\\\"canvas\\\");canvas.width=img.width;canvas.height=img.height;var ctx=canvas.getContext(\\\"2d\\\");ctx.drawImage(img,0,0);Module[\\\"preloadedImages\\\"][name]=canvas;Browser.URLObject.revokeObjectURL(url);if(onload)onload(byteArray)};img.onerror=function img_onerror(event){console.log(\\\"Image \\\"+url+\\\" could not be decoded\\\");if(onerror)onerror()};img.src=url};Module[\\\"preloadPlugins\\\"].push(imagePlugin);var audioPlugin={};audioPlugin[\\\"canHandle\\\"]=function audioPlugin_canHandle(name){return!Module.noAudioDecoding&&name.substr(-4)in{\\\".ogg\\\":1,\\\".wav\\\":1,\\\".mp3\\\":1}};audioPlugin[\\\"handle\\\"]=function audioPlugin_handle(byteArray,name,onload,onerror){var done=false;function finish(audio){if(done)return;done=true;Module[\\\"preloadedAudios\\\"][name]=audio;if(onload)onload(byteArray)}function fail(){if(done)return;done=true;Module[\\\"preloadedAudios\\\"][name]=new Audio;if(onerror)onerror()}if(Browser.hasBlobConstructor){try{var b=new Blob([byteArray],{type:Browser.getMimetype(name)})}catch(e){return fail()}var url=Browser.URLObject.createObjectURL(b);var audio=new Audio;audio.addEventListener(\\\"canplaythrough\\\",(function(){finish(audio)}),false);audio.onerror=function audio_onerror(event){if(done)return;console.log(\\\"warning: browser could not fully decode audio \\\"+name+\\\", trying slower base64 approach\\\");function encode64(data){var BASE=\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";var PAD=\\\"=\\\";var ret=\\\"\\\";var leftchar=0;var leftbits=0;for(var i=0;i<data.length;i++){leftchar=leftchar<<8|data[i];leftbits+=8;while(leftbits>=6){var curr=leftchar>>leftbits-6&63;leftbits-=6;ret+=BASE[curr]}}if(leftbits==2){ret+=BASE[(leftchar&3)<<4];ret+=PAD+PAD}else if(leftbits==4){ret+=BASE[(leftchar&15)<<2];ret+=PAD}return ret}audio.src=\\\"data:audio/x-\\\"+name.substr(-3)+\\\";base64,\\\"+encode64(byteArray);finish(audio)};audio.src=url;Browser.safeSetTimeout((function(){finish(audio)}),1e4)}else{return fail()}};Module[\\\"preloadPlugins\\\"].push(audioPlugin);var canvas=Module[\\\"canvas\\\"];function pointerLockChange(){Browser.pointerLock=document[\\\"pointerLockElement\\\"]===canvas||document[\\\"mozPointerLockElement\\\"]===canvas||document[\\\"webkitPointerLockElement\\\"]===canvas||document[\\\"msPointerLockElement\\\"]===canvas}if(canvas){canvas.requestPointerLock=canvas[\\\"requestPointerLock\\\"]||canvas[\\\"mozRequestPointerLock\\\"]||canvas[\\\"webkitRequestPointerLock\\\"]||canvas[\\\"msRequestPointerLock\\\"]||(function(){});canvas.exitPointerLock=document[\\\"exitPointerLock\\\"]||document[\\\"mozExitPointerLock\\\"]||document[\\\"webkitExitPointerLock\\\"]||document[\\\"msExitPointerLock\\\"]||(function(){});canvas.exitPointerLock=canvas.exitPointerLock.bind(document);document.addEventListener(\\\"pointerlockchange\\\",pointerLockChange,false);document.addEventListener(\\\"mozpointerlockchange\\\",pointerLockChange,false);document.addEventListener(\\\"webkitpointerlockchange\\\",pointerLockChange,false);document.addEventListener(\\\"mspointerlockchange\\\",pointerLockChange,false);if(Module[\\\"elementPointerLock\\\"]){canvas.addEventListener(\\\"click\\\",(function(ev){if(!Browser.pointerLock&&canvas.requestPointerLock){canvas.requestPointerLock();ev.preventDefault()}}),false)}}}),createContext:(function(canvas,useWebGL,setInModule,webGLContextAttributes){if(useWebGL&&Module.ctx&&canvas==Module.canvas)return Module.ctx;var ctx;var contextHandle;if(useWebGL){var contextAttributes={antialias:false,alpha:false};if(webGLContextAttributes){for(var attribute in webGLContextAttributes){contextAttributes[attribute]=webGLContextAttributes[attribute]}}contextHandle=GL.createContext(canvas,contextAttributes);if(contextHandle){ctx=GL.getContext(contextHandle).GLctx}canvas.style.backgroundColor=\\\"black\\\"}else{ctx=canvas.getContext(\\\"2d\\\")}if(!ctx)return null;if(setInModule){if(!useWebGL)assert(typeof GLctx===\\\"undefined\\\",\\\"cannot set in module if GLctx is used, but we are a non-GL context that would replace it\\\");Module.ctx=ctx;if(useWebGL)GL.makeContextCurrent(contextHandle);Module.useWebGL=useWebGL;Browser.moduleContextCreatedCallbacks.forEach((function(callback){callback()}));Browser.init()}return ctx}),destroyContext:(function(canvas,useWebGL,setInModule){}),fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:(function(lockPointer,resizeCanvas,vrDevice){Browser.lockPointer=lockPointer;Browser.resizeCanvas=resizeCanvas;Browser.vrDevice=vrDevice;if(typeof Browser.lockPointer===\\\"undefined\\\")Browser.lockPointer=true;if(typeof Browser.resizeCanvas===\\\"undefined\\\")Browser.resizeCanvas=false;if(typeof Browser.vrDevice===\\\"undefined\\\")Browser.vrDevice=null;var canvas=Module[\\\"canvas\\\"];function fullScreenChange(){Browser.isFullScreen=false;var canvasContainer=canvas.parentNode;if((document[\\\"webkitFullScreenElement\\\"]||document[\\\"webkitFullscreenElement\\\"]||document[\\\"mozFullScreenElement\\\"]||document[\\\"mozFullscreenElement\\\"]||document[\\\"fullScreenElement\\\"]||document[\\\"fullscreenElement\\\"]||document[\\\"msFullScreenElement\\\"]||document[\\\"msFullscreenElement\\\"]||document[\\\"webkitCurrentFullScreenElement\\\"])===canvasContainer){canvas.cancelFullScreen=document[\\\"cancelFullScreen\\\"]||document[\\\"mozCancelFullScreen\\\"]||document[\\\"webkitCancelFullScreen\\\"]||document[\\\"msExitFullscreen\\\"]||document[\\\"exitFullscreen\\\"]||(function(){});canvas.cancelFullScreen=canvas.cancelFullScreen.bind(document);if(Browser.lockPointer)canvas.requestPointerLock();Browser.isFullScreen=true;if(Browser.resizeCanvas)Browser.setFullScreenCanvasSize()}else{canvasContainer.parentNode.insertBefore(canvas,canvasContainer);canvasContainer.parentNode.removeChild(canvasContainer);if(Browser.resizeCanvas)Browser.setWindowedCanvasSize()}if(Module[\\\"onFullScreen\\\"])Module[\\\"onFullScreen\\\"](Browser.isFullScreen);Browser.updateCanvasDimensions(canvas)}if(!Browser.fullScreenHandlersInstalled){Browser.fullScreenHandlersInstalled=true;document.addEventListener(\\\"fullscreenchange\\\",fullScreenChange,false);document.addEventListener(\\\"mozfullscreenchange\\\",fullScreenChange,false);document.addEventListener(\\\"webkitfullscreenchange\\\",fullScreenChange,false);document.addEventListener(\\\"MSFullscreenChange\\\",fullScreenChange,false)}var canvasContainer=document.createElement(\\\"div\\\");canvas.parentNode.insertBefore(canvasContainer,canvas);canvasContainer.appendChild(canvas);canvasContainer.requestFullScreen=canvasContainer[\\\"requestFullScreen\\\"]||canvasContainer[\\\"mozRequestFullScreen\\\"]||canvasContainer[\\\"msRequestFullscreen\\\"]||(canvasContainer[\\\"webkitRequestFullScreen\\\"]?(function(){canvasContainer[\\\"webkitRequestFullScreen\\\"](Element[\\\"ALLOW_KEYBOARD_INPUT\\\"])}):null);if(vrDevice){canvasContainer.requestFullScreen({vrDisplay:vrDevice})}else{canvasContainer.requestFullScreen()}}),nextRAF:0,fakeRequestAnimationFrame:(function(func){var now=Date.now();if(Browser.nextRAF===0){Browser.nextRAF=now+1e3/60}else{while(now+2>=Browser.nextRAF){Browser.nextRAF+=1e3/60}}var delay=Math.max(Browser.nextRAF-now,0);setTimeout(func,delay)}),requestAnimationFrame:function requestAnimationFrame(func){if(typeof window===\\\"undefined\\\"){Browser.fakeRequestAnimationFrame(func)}else{if(!window.requestAnimationFrame){window.requestAnimationFrame=window[\\\"requestAnimationFrame\\\"]||window[\\\"mozRequestAnimationFrame\\\"]||window[\\\"webkitRequestAnimationFrame\\\"]||window[\\\"msRequestAnimationFrame\\\"]||window[\\\"oRequestAnimationFrame\\\"]||Browser.fakeRequestAnimationFrame}window.requestAnimationFrame(func)}},safeCallback:(function(func){return(function(){if(!ABORT)return func.apply(null,arguments)})}),allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:(function(){Browser.allowAsyncCallbacks=false}),resumeAsyncCallbacks:(function(){Browser.allowAsyncCallbacks=true;if(Browser.queuedAsyncCallbacks.length>0){var callbacks=Browser.queuedAsyncCallbacks;Browser.queuedAsyncCallbacks=[];callbacks.forEach((function(func){func()}))}}),safeRequestAnimationFrame:(function(func){return Browser.requestAnimationFrame((function(){if(ABORT)return;if(Browser.allowAsyncCallbacks){func()}else{Browser.queuedAsyncCallbacks.push(func)}}))}),safeSetTimeout:(function(func,timeout){Module[\\\"noExitRuntime\\\"]=true;return setTimeout((function(){if(ABORT)return;if(Browser.allowAsyncCallbacks){func()}else{Browser.queuedAsyncCallbacks.push(func)}}),timeout)}),safeSetInterval:(function(func,timeout){Module[\\\"noExitRuntime\\\"]=true;return setInterval((function(){if(ABORT)return;if(Browser.allowAsyncCallbacks){func()}}),timeout)}),getMimetype:(function(name){return{\\\"jpg\\\":\\\"image/jpeg\\\",\\\"jpeg\\\":\\\"image/jpeg\\\",\\\"png\\\":\\\"image/png\\\",\\\"bmp\\\":\\\"image/bmp\\\",\\\"ogg\\\":\\\"audio/ogg\\\",\\\"wav\\\":\\\"audio/wav\\\",\\\"mp3\\\":\\\"audio/mpeg\\\"}[name.substr(name.lastIndexOf(\\\".\\\")+1)]}),getUserMedia:(function(func){if(!window.getUserMedia){window.getUserMedia=navigator[\\\"getUserMedia\\\"]||navigator[\\\"mozGetUserMedia\\\"]}window.getUserMedia(func)}),getMovementX:(function(event){return event[\\\"movementX\\\"]||event[\\\"mozMovementX\\\"]||event[\\\"webkitMovementX\\\"]||0}),getMovementY:(function(event){return event[\\\"movementY\\\"]||event[\\\"mozMovementY\\\"]||event[\\\"webkitMovementY\\\"]||0}),getMouseWheelDelta:(function(event){var delta=0;switch(event.type){case\\\"DOMMouseScroll\\\":delta=event.detail;break;case\\\"mousewheel\\\":delta=event.wheelDelta;break;case\\\"wheel\\\":delta=event[\\\"deltaY\\\"];break;default:throw\\\"unrecognized mouse wheel event: \\\"+event.type}return delta}),mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:(function(event){if(Browser.pointerLock){if(event.type!=\\\"mousemove\\\"&&\\\"mozMovementX\\\"in event){Browser.mouseMovementX=Browser.mouseMovementY=0}else{Browser.mouseMovementX=Browser.getMovementX(event);Browser.mouseMovementY=Browser.getMovementY(event)}if(typeof SDL!=\\\"undefined\\\"){Browser.mouseX=SDL.mouseX+Browser.mouseMovementX;Browser.mouseY=SDL.mouseY+Browser.mouseMovementY}else{Browser.mouseX+=Browser.mouseMovementX;Browser.mouseY+=Browser.mouseMovementY}}else{var rect=Module[\\\"canvas\\\"].getBoundingClientRect();var cw=Module[\\\"canvas\\\"].width;var ch=Module[\\\"canvas\\\"].height;var scrollX=typeof window.scrollX!==\\\"undefined\\\"?window.scrollX:window.pageXOffset;var scrollY=typeof window.scrollY!==\\\"undefined\\\"?window.scrollY:window.pageYOffset;if(event.type===\\\"touchstart\\\"||event.type===\\\"touchend\\\"||event.type===\\\"touchmove\\\"){var touch=event.touch;if(touch===undefined){return}var adjustedX=touch.pageX-(scrollX+rect.left);var adjustedY=touch.pageY-(scrollY+rect.top);adjustedX=adjustedX*(cw/rect.width);adjustedY=adjustedY*(ch/rect.height);var coords={x:adjustedX,y:adjustedY};if(event.type===\\\"touchstart\\\"){Browser.lastTouches[touch.identifier]=coords;Browser.touches[touch.identifier]=coords}else if(event.type===\\\"touchend\\\"||event.type===\\\"touchmove\\\"){var last=Browser.touches[touch.identifier];if(!last)last=coords;Browser.lastTouches[touch.identifier]=last;Browser.touches[touch.identifier]=coords}return}var x=event.pageX-(scrollX+rect.left);var y=event.pageY-(scrollY+rect.top);x=x*(cw/rect.width);y=y*(ch/rect.height);Browser.mouseMovementX=x-Browser.mouseX;Browser.mouseMovementY=y-Browser.mouseY;Browser.mouseX=x;Browser.mouseY=y}}),xhrLoad:(function(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\\\"GET\\\",url,true);xhr.responseType=\\\"arraybuffer\\\";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response)}else{onerror()}};xhr.onerror=onerror;xhr.send(null)}),asyncLoad:(function(url,onload,onerror,noRunDep){Browser.xhrLoad(url,(function(arrayBuffer){assert(arrayBuffer,'Loading data file \\\"'+url+'\\\" failed (no arrayBuffer).');onload(new Uint8Array(arrayBuffer));if(!noRunDep)removeRunDependency(\\\"al \\\"+url)}),(function(event){if(onerror){onerror()}else{throw'Loading data file \\\"'+url+'\\\" failed.'}}));if(!noRunDep)addRunDependency(\\\"al \\\"+url)}),resizeListeners:[],updateResizeListeners:(function(){var canvas=Module[\\\"canvas\\\"];Browser.resizeListeners.forEach((function(listener){listener(canvas.width,canvas.height)}))}),setCanvasSize:(function(width,height,noUpdates){var canvas=Module[\\\"canvas\\\"];Browser.updateCanvasDimensions(canvas,width,height);if(!noUpdates)Browser.updateResizeListeners()}),windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:(function(){if(typeof SDL!=\\\"undefined\\\"){var flags=HEAPU32[SDL.screen+Runtime.QUANTUM_SIZE*0>>2];flags=flags|8388608;HEAP32[SDL.screen+Runtime.QUANTUM_SIZE*0>>2]=flags}Browser.updateResizeListeners()}),setWindowedCanvasSize:(function(){if(typeof SDL!=\\\"undefined\\\"){var flags=HEAPU32[SDL.screen+Runtime.QUANTUM_SIZE*0>>2];flags=flags&~8388608;HEAP32[SDL.screen+Runtime.QUANTUM_SIZE*0>>2]=flags}Browser.updateResizeListeners()}),updateCanvasDimensions:(function(canvas,wNative,hNative){if(wNative&&hNative){canvas.widthNative=wNative;canvas.heightNative=hNative}else{wNative=canvas.widthNative;hNative=canvas.heightNative}var w=wNative;var h=hNative;if(Module[\\\"forcedAspectRatio\\\"]&&Module[\\\"forcedAspectRatio\\\"]>0){if(w/h<Module[\\\"forcedAspectRatio\\\"]){w=Math.round(h*Module[\\\"forcedAspectRatio\\\"])}else{h=Math.round(w/Module[\\\"forcedAspectRatio\\\"])}}if((document[\\\"webkitFullScreenElement\\\"]||document[\\\"webkitFullscreenElement\\\"]||document[\\\"mozFullScreenElement\\\"]||document[\\\"mozFullscreenElement\\\"]||document[\\\"fullScreenElement\\\"]||document[\\\"fullscreenElement\\\"]||document[\\\"msFullScreenElement\\\"]||document[\\\"msFullscreenElement\\\"]||document[\\\"webkitCurrentFullScreenElement\\\"])===canvas.parentNode&&typeof screen!=\\\"undefined\\\"){var factor=Math.min(screen.width/w,screen.height/h);w=Math.round(w*factor);h=Math.round(h*factor)}if(Browser.resizeCanvas){if(canvas.width!=w)canvas.width=w;if(canvas.height!=h)canvas.height=h;if(typeof canvas.style!=\\\"undefined\\\"){canvas.style.removeProperty(\\\"width\\\");canvas.style.removeProperty(\\\"height\\\")}}else{if(canvas.width!=wNative)canvas.width=wNative;if(canvas.height!=hNative)canvas.height=hNative;if(typeof canvas.style!=\\\"undefined\\\"){if(w!=wNative||h!=hNative){canvas.style.setProperty(\\\"width\\\",w+\\\"px\\\",\\\"important\\\");canvas.style.setProperty(\\\"height\\\",h+\\\"px\\\",\\\"important\\\")}else{canvas.style.removeProperty(\\\"width\\\");canvas.style.removeProperty(\\\"height\\\")}}}}),wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:(function(){var handle=Browser.nextWgetRequestHandle;Browser.nextWgetRequestHandle++;return handle})};function _time(ptr){var ret=Date.now()/1e3|0;if(ptr){HEAP32[ptr>>2]=ret}return ret}function _pthread_self(){return 0}var _UItoD=true;function _malloc(bytes){var ptr=Runtime.dynamicAlloc(bytes+8);return ptr+8&4294967288}Module[\\\"_malloc\\\"]=_malloc;function ___cxa_allocate_exception(size){return _malloc(size)}function ___syscall54(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS===\\\"undefined\\\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module[\\\"requestFullScreen\\\"]=function Module_requestFullScreen(lockPointer,resizeCanvas,vrDevice){Browser.requestFullScreen(lockPointer,resizeCanvas,vrDevice)};Module[\\\"requestAnimationFrame\\\"]=function Module_requestAnimationFrame(func){Browser.requestAnimationFrame(func)};Module[\\\"setCanvasSize\\\"]=function Module_setCanvasSize(width,height,noUpdates){Browser.setCanvasSize(width,height,noUpdates)};Module[\\\"pauseMainLoop\\\"]=function Module_pauseMainLoop(){Browser.mainLoop.pause()};Module[\\\"resumeMainLoop\\\"]=function Module_resumeMainLoop(){Browser.mainLoop.resume()};Module[\\\"getUserMedia\\\"]=function Module_getUserMedia(){Browser.getUserMedia()};Module[\\\"createContext\\\"]=function Module_createContext(canvas,useWebGL,setInModule,webGLContextAttributes){return Browser.createContext(canvas,useWebGL,setInModule,webGLContextAttributes)};STACK_BASE=STACKTOP=Runtime.alignMemory(STATICTOP);staticSealed=true;STACK_MAX=STACK_BASE+TOTAL_STACK;DYNAMIC_BASE=DYNAMICTOP=Runtime.alignMemory(STACK_MAX);assert(DYNAMIC_BASE<TOTAL_MEMORY,\\\"TOTAL_MEMORY not big enough for stack\\\");var cttz_i8=allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0],\\\"i8\\\",ALLOC_DYNAMIC);function invoke_iiii(index,a1,a2,a3){try{return Module[\\\"dynCall_iiii\\\"](index,a1,a2,a3)}catch(e){if(typeof e!==\\\"number\\\"&&e!==\\\"longjmp\\\")throw e;asm[\\\"setThrew\\\"](1,0)}}function invoke_viiiii(index,a1,a2,a3,a4,a5){try{Module[\\\"dynCall_viiiii\\\"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!==\\\"number\\\"&&e!==\\\"longjmp\\\")throw e;asm[\\\"setThrew\\\"](1,0)}}function invoke_vi(index,a1){try{Module[\\\"dynCall_vi\\\"](index,a1)}catch(e){if(typeof e!==\\\"number\\\"&&e!==\\\"longjmp\\\")throw e;asm[\\\"setThrew\\\"](1,0)}}function invoke_ii(index,a1){try{return Module[\\\"dynCall_ii\\\"](index,a1)}catch(e){if(typeof e!==\\\"number\\\"&&e!==\\\"longjmp\\\")throw e;asm[\\\"setThrew\\\"](1,0)}}function invoke_v(index){try{Module[\\\"dynCall_v\\\"](index)}catch(e){if(typeof e!==\\\"number\\\"&&e!==\\\"longjmp\\\")throw e;asm[\\\"setThrew\\\"](1,0)}}function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6){try{Module[\\\"dynCall_viiiiii\\\"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!==\\\"number\\\"&&e!==\\\"longjmp\\\")throw e;asm[\\\"setThrew\\\"](1,0)}}function invoke_iii(index,a1,a2){try{return Module[\\\"dynCall_iii\\\"](index,a1,a2)}catch(e){if(typeof e!==\\\"number\\\"&&e!==\\\"longjmp\\\")throw e;asm[\\\"setThrew\\\"](1,0)}}function invoke_viiii(index,a1,a2,a3,a4){try{Module[\\\"dynCall_viiii\\\"](index,a1,a2,a3,a4)}catch(e){if(typeof e!==\\\"number\\\"&&e!==\\\"longjmp\\\")throw e;asm[\\\"setThrew\\\"](1,0)}}Module.asmGlobalArg={\\\"Math\\\":Math,\\\"Int8Array\\\":Int8Array,\\\"Int16Array\\\":Int16Array,\\\"Int32Array\\\":Int32Array,\\\"Uint8Array\\\":Uint8Array,\\\"Uint16Array\\\":Uint16Array,\\\"Uint32Array\\\":Uint32Array,\\\"Float32Array\\\":Float32Array,\\\"Float64Array\\\":Float64Array,\\\"NaN\\\":NaN,\\\"Infinity\\\":Infinity,\\\"byteLength\\\":byteLength};Module.asmLibraryArg={\\\"abort\\\":abort,\\\"assert\\\":assert,\\\"invoke_iiii\\\":invoke_iiii,\\\"invoke_viiiii\\\":invoke_viiiii,\\\"invoke_vi\\\":invoke_vi,\\\"invoke_ii\\\":invoke_ii,\\\"invoke_v\\\":invoke_v,\\\"invoke_viiiiii\\\":invoke_viiiiii,\\\"invoke_iii\\\":invoke_iii,\\\"invoke_viiii\\\":invoke_viiii,\\\"_pthread_cleanup_pop\\\":_pthread_cleanup_pop,\\\"___syscall6\\\":___syscall6,\\\"___setErrNo\\\":___setErrNo,\\\"___assert_fail\\\":___assert_fail,\\\"___cxa_allocate_exception\\\":___cxa_allocate_exception,\\\"___cxa_find_matching_catch\\\":___cxa_find_matching_catch,\\\"_emscripten_set_main_loop_timing\\\":_emscripten_set_main_loop_timing,\\\"_sbrk\\\":_sbrk,\\\"_emscripten_memcpy_big\\\":_emscripten_memcpy_big,\\\"___resumeException\\\":___resumeException,\\\"__ZSt18uncaught_exceptionv\\\":__ZSt18uncaught_exceptionv,\\\"_sysconf\\\":_sysconf,\\\"_pthread_self\\\":_pthread_self,\\\"___syscall140\\\":___syscall140,\\\"___syscall54\\\":___syscall54,\\\"_emscripten_set_main_loop\\\":_emscripten_set_main_loop,\\\"_tan\\\":_tan,\\\"___cxa_throw\\\":___cxa_throw,\\\"_abort\\\":_abort,\\\"_pthread_cleanup_push\\\":_pthread_cleanup_push,\\\"_time\\\":_time,\\\"_sqrt\\\":_sqrt,\\\"___syscall146\\\":___syscall146,\\\"STACKTOP\\\":STACKTOP,\\\"STACK_MAX\\\":STACK_MAX,\\\"tempDoublePtr\\\":tempDoublePtr,\\\"ABORT\\\":ABORT,\\\"cttz_i8\\\":cttz_i8};// EMSCRIPTEN_START_ASM\\nvar asm=(function(global,env,buffer) {\\n\\\"use asm\\\";var a=global.Int8Array;var b=global.Int16Array;var c=global.Int32Array;var d=global.Uint8Array;var e=global.Uint16Array;var f=global.Uint32Array;var g=global.Float32Array;var h=global.Float64Array;var i=new a(buffer);var j=new b(buffer);var k=new c(buffer);var l=new d(buffer);var m=new e(buffer);var n=new f(buffer);var o=new g(buffer);var p=new h(buffer);var q=global.byteLength;var r=env.STACKTOP|0;var s=env.STACK_MAX|0;var t=env.tempDoublePtr|0;var u=env.ABORT|0;var v=env.cttz_i8|0;var w=0;var x=0;var y=0;var z=0;var A=global.NaN,B=global.Infinity;var C=0,D=0,E=0,F=0,G=0.0,H=0,I=0,J=0,K=0.0;var L=0;var M=0;var N=0;var O=0;var P=0;var Q=0;var R=0;var S=0;var T=0;var U=0;var V=global.Math.floor;var W=global.Math.abs;var X=global.Math.sqrt;var Y=global.Math.pow;var Z=global.Math.cos;var _=global.Math.sin;var $=global.Math.tan;var aa=global.Math.acos;var ba=global.Math.asin;var ca=global.Math.atan;var da=global.Math.atan2;var ea=global.Math.exp;var fa=global.Math.log;var ga=global.Math.ceil;var ha=global.Math.imul;var ia=global.Math.min;var ja=global.Math.clz32;var ka=env.abort;var la=env.assert;var ma=env.invoke_iiii;var na=env.invoke_viiiii;var oa=env.invoke_vi;var pa=env.invoke_ii;var qa=env.invoke_v;var ra=env.invoke_viiiiii;var sa=env.invoke_iii;var ta=env.invoke_viiii;var ua=env._pthread_cleanup_pop;var va=env.___syscall6;var wa=env.___setErrNo;var xa=env.___assert_fail;var ya=env.___cxa_allocate_exception;var za=env.___cxa_find_matching_catch;var Aa=env._emscripten_set_main_loop_timing;var Ba=env._sbrk;var Ca=env._emscripten_memcpy_big;var Da=env.___resumeException;var Ea=env.__ZSt18uncaught_exceptionv;var Fa=env._sysconf;var Ga=env._pthread_self;var Ha=env.___syscall140;var Ia=env.___syscall54;var Ja=env._emscripten_set_main_loop;var Ka=env._tan;var La=env.___cxa_throw;var Ma=env._abort;var Na=env._pthread_cleanup_push;var Oa=env._time;var Pa=env._sqrt;var Qa=env.___syscall146;var Ra=0.0;function Sa(newBuffer){if(q(newBuffer)&16777215||q(newBuffer)<=16777215||q(newBuffer)>2147483648)return false;i=new a(newBuffer);j=new b(newBuffer);k=new c(newBuffer);l=new d(newBuffer);m=new e(newBuffer);n=new f(newBuffer);o=new g(newBuffer);p=new h(newBuffer);buffer=newBuffer;return true}\\n// EMSCRIPTEN_START_FUNCS\\nfunction mc(a,b,c){a=a|0;b=b|0;c=+c;var d=0,e=0,f=0,g=0,h=0.0,l=0.0,m=0.0,n=0,o=0,q=0,s=0.0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0,R=0.0,S=0,T=0,U=0,V=0,W=0,Y=0,Z=0,_=0,aa=0.0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,za=0,Aa=0;Aa=r;r=r+2992|0;oa=Aa+192|0;ua=Aa+184|0;ma=Aa+168|0;la=Aa+160|0;ea=Aa+136|0;ja=Aa+120|0;fa=Aa+64|0;_=Aa+32|0;Q=Aa;wa=Aa+2964|0;va=Aa+2920|0;ra=Aa+220|0;ha=Aa+2960|0;sa=Aa+2976|0;k[wa>>2]=0;za=wa+4|0;k[za>>2]=0;k[wa+8>>2]=0;d=k[b>>2]|0;ba=b+4|0;w=k[ba>>2]|0;if((d|0)!=(w|0)){x=wa+8|0;do{v=d+4|0;f=k[d>>2]|0;e=(k[v>>2]|0)-f>>3;if(e){q=0;do{u=q;q=q+1|0;o=f+(u<<3)|0;do if(q>>>0<e>>>0){e=f+(q<<3)|0;n=k[za>>2]|0;if(n>>>0<(k[x>>2]|0)>>>0){k[n>>2]=0;k[n+4>>2]=0;k[n+8>>2]=0;k[n+12>>2]=0;k[n>>2]=k[o>>2];k[n+4>>2]=k[f+(u<<3)+4>>2];k[n+8>>2]=k[e>>2];k[n+12>>2]=k[f+(q<<3)+4>>2];k[za>>2]=n+16;break}else{yc(wa,o,e);break}}else{e=k[za>>2]|0;if(e>>>0<(k[x>>2]|0)>>>0){k[e>>2]=0;k[e+4>>2]=0;k[e+8>>2]=0;k[e+12>>2]=0;k[e>>2]=k[o>>2];k[e+4>>2]=k[f+(u<<3)+4>>2];k[e+8>>2]=k[f>>2];k[e+12>>2]=k[f+4>>2];k[za>>2]=e+16;break}else{yc(wa,o,f);break}}while(0);f=k[d>>2]|0;e=(k[v>>2]|0)-f>>3}while(q>>>0<e>>>0)}d=d+12|0}while((d|0)!=(w|0))}n=(k[87]|0)>-1;a:do if(!1){d=1021;na=16}else{e=1021;d=1021;while(1){if(!(i[e>>0]|0))break a;e=e+1|0;d=e;if(!(d&3)){d=e;na=16;break}}}while(0);if((na|0)==16){while(1){e=k[d>>2]|0;if(!((e&-2139062144^-2139062144)&e+-16843009))d=d+4|0;else break}if((e&255)<<24>>24)do d=d+1|0;while((i[d>>0]|0)!=0)}f=d-1021|0;d=k[72]|0;e=(d|0)==0;b:do if(n){do if(e){d=i[346]|0;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;d=e+(k[80]|0)|0;k[72]=d;break}else{k[68]=d|32;d=0;na=38;break b}}else e=k[73]|0;while(0);if((d-e|0)>>>0<f>>>0){d=Ta[k[308>>2]&7](272,1021,f)|0;na=38;break}else{fe(e|0,1021,f|0)|0;k[73]=(k[73]|0)+f;na=40;break}}else{do if(e){d=i[346]|0;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;d=e+(k[80]|0)|0;k[72]=d;break}else{k[68]=d|32;d=0;na=38;break b}}else e=k[73]|0;while(0);if((d-e|0)>>>0<f>>>0){d=Ta[k[308>>2]&7](272,1021,f)|0;na=38;break}else{fe(e|0,1021,f|0)|0;k[73]=(k[73]|0)+f;na=40;break}}while(0);if((na|0)==38)if(!((d|0)!=(f|0)?((d>>>0)/(f>>>0)|0|0)<1:0))na=40;do if((na|0)==40){f=i[347]|0;if(f<<24>>24!=10){d=k[73]|0;e=k[72]|0;if(d>>>0<e>>>0){k[73]=d+1;i[d>>0]=10;break}}else e=k[72]|0;i[oa>>0]=10;do if(!e){f=j[173]|0;d=(f&65535)<<24>>24;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;n=k[79]|0;k[75]=n;k[73]=n;e=n+(k[80]|0)|0;k[72]=e;d=(f&65535)>>>8&255;na=49;break}else{k[68]=d|32;break}}else{n=k[73]|0;d=f;na=49}while(0);do if((na|0)==49)if(n>>>0>=e>>>0|d<<24>>24==10){Ta[k[308>>2]&7](272,oa,1)|0;break}else{k[73]=n+1;i[n>>0]=10;break}while(0)}while(0);o=va;q=o+36|0;do{k[o>>2]=0;o=o+4|0}while((o|0)<(q|0));S=ra+4|0;k[S>>2]=0;U=ra+8|0;k[U>>2]=0;k[ra+12>>2]=0;V=ra+20|0;k[V>>2]=0;k[V+4>>2]=0;k[V+8>>2]=0;i[V+12>>0]=0;V=ra+36|0;k[V>>2]=0;k[V+4>>2]=0;k[V+8>>2]=0;j[V+12>>1]=0;V=ra+52|0;k[V>>2]=V;k[ra+56>>2]=V;V=ra+60|0;k[V>>2]=0;W=ra+64|0;i[oa>>0]=0;i[oa+1>>0]=0;i[oa+2>>0]=0;T=ra+68|0;k[T>>2]=0;Y=ra+72|0;k[Y>>2]=0;Z=ra+76|0;i[Z>>0]=i[oa>>0]|0;i[Z+1>>0]=i[oa+1>>0]|0;i[Z+2>>0]=i[oa+2>>0]|0;Z=ra+68|0;k[W>>2]=Z;v=ra+2696|0;k[v>>2]=0;d=k[wa>>2]|0;w=k[za>>2]|0;c:do if((d|0)!=(w|0)){x=ra+4|0;y=oa+8|0;z=oa+16|0;A=oa+24|0;B=ra+12|0;C=fa+8|0;D=fa+16|0;E=fa+24|0;F=_+8|0;G=_+16|0;H=_+24|0;I=Q+8|0;J=Q+16|0;K=Q+24|0;e=0;f=0;while(1){n=k[d>>2]|0;o=k[d+4>>2]|0;q=k[d+8>>2]|0;u=k[d+12>>2]|0;na=oa;k[na>>2]=n;k[na+4>>2]=o;na=y;k[na>>2]=n;k[na+4>>2]=o;k[z>>2]=0;k[A>>2]=0;if(e>>>0<f>>>0){k[e>>2]=k[oa>>2];k[e+4>>2]=k[oa+4>>2];k[e+8>>2]=k[oa+8>>2];k[e+12>>2]=k[oa+12>>2];k[e+16>>2]=k[oa+16>>2];k[e+20>>2]=k[oa+20>>2];k[e+24>>2]=k[oa+24>>2];e=(k[U>>2]|0)+28|0;k[U>>2]=e}else{pd(x,oa);e=k[U>>2]|0}k[e+-8>>2]=k[v>>2];na=e+-4|0;k[na>>2]=k[na>>2]|1;na=fa;k[na>>2]=q;k[na+4>>2]=u;na=C;k[na>>2]=q;k[na+4>>2]=u;k[D>>2]=0;k[E>>2]=0;if(e>>>0<(k[B>>2]|0)>>>0){k[e>>2]=k[fa>>2];k[e+4>>2]=k[fa+4>>2];k[e+8>>2]=k[fa+8>>2];k[e+12>>2]=k[fa+12>>2];k[e+16>>2]=k[fa+16>>2];k[e+20>>2]=k[fa+20>>2];k[e+24>>2]=k[fa+24>>2];e=(k[U>>2]|0)+28|0;k[U>>2]=e}else{pd(x,fa);e=k[U>>2]|0}k[e+-8>>2]=k[v>>2];na=e+-4|0;k[na>>2]=k[na>>2]|2;if((n|0)==(q|0))if((o|0)<(u|0))na=64;else na=68;else if((n|0)<(q|0))na=64;else na=68;if((na|0)==64){na=0;f=_;k[f>>2]=n;k[f+4>>2]=o;o=F;k[o>>2]=q;k[o+4>>2]=u;k[G>>2]=0;k[H>>2]=0;if(e>>>0<(k[B>>2]|0)>>>0){k[e>>2]=k[_>>2];k[e+4>>2]=k[_+4>>2];k[e+8>>2]=k[_+8>>2];k[e+12>>2]=k[_+12>>2];k[e+16>>2]=k[_+16>>2];k[e+20>>2]=k[_+20>>2];k[e+24>>2]=k[_+24>>2];e=(k[U>>2]|0)+28|0;k[U>>2]=e}else{pd(x,_);e=k[U>>2]|0}u=e+-4|0;k[u>>2]=k[u>>2]|8}else if((na|0)==68){na=0;f=Q;k[f>>2]=q;k[f+4>>2]=u;u=I;k[u>>2]=n;k[u+4>>2]=o;k[J>>2]=0;k[K>>2]=0;if(e>>>0<(k[B>>2]|0)>>>0){k[e>>2]=k[Q>>2];k[e+4>>2]=k[Q+4>>2];k[e+8>>2]=k[Q+8>>2];k[e+12>>2]=k[Q+12>>2];k[e+16>>2]=k[Q+16>>2];k[e+20>>2]=k[Q+20>>2];k[e+24>>2]=k[Q+24>>2];e=(k[U>>2]|0)+28|0;k[U>>2]=e}else{pd(x,Q);e=k[U>>2]|0}u=e+-4|0;k[u>>2]=k[u>>2]|9}u=k[v>>2]|0;k[e+-8>>2]=u;k[v>>2]=u+1;d=d+16|0;if((d|0)==(w|0))break c;f=k[B>>2]|0}}while(0);n=(k[87]|0)>-1;d:do if(!3){d=1023;na=77}else{e=1023;d=1023;while(1){if(!(i[e>>0]|0))break d;e=e+1|0;d=e;if(!(d&3)){d=e;na=77;break}}}while(0);if((na|0)==77){while(1){e=k[d>>2]|0;if(!((e&-2139062144^-2139062144)&e+-16843009))d=d+4|0;else break}if((e&255)<<24>>24)do d=d+1|0;while((i[d>>0]|0)!=0)}f=d-1023|0;d=k[72]|0;e=(d|0)==0;e:do if(n){do if(e){d=i[346]|0;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;d=e+(k[80]|0)|0;k[72]=d;break}else{k[68]=d|32;d=0;na=99;break e}}else e=k[73]|0;while(0);if((d-e|0)>>>0<f>>>0){d=Ta[k[308>>2]&7](272,1023,f)|0;na=99;break}else{fe(e|0,1023,f|0)|0;k[73]=(k[73]|0)+f;na=101;break}}else{do if(e){d=i[346]|0;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;d=e+(k[80]|0)|0;k[72]=d;break}else{k[68]=d|32;d=0;na=99;break e}}else e=k[73]|0;while(0);if((d-e|0)>>>0<f>>>0){d=Ta[k[308>>2]&7](272,1023,f)|0;na=99;break}else{fe(e|0,1023,f|0)|0;k[73]=(k[73]|0)+f;na=101;break}}while(0);if((na|0)==99)if(!((d|0)!=(f|0)?((d>>>0)/(f>>>0)|0|0)<1:0))na=101;do if((na|0)==101){f=i[347]|0;if(f<<24>>24!=10){d=k[73]|0;e=k[72]|0;if(d>>>0<e>>>0){k[73]=d+1;i[d>>0]=10;break}}else e=k[72]|0;i[oa>>0]=10;do if(!e){f=j[173]|0;d=(f&65535)<<24>>24;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;n=k[79]|0;k[75]=n;k[73]=n;e=n+(k[80]|0)|0;k[72]=e;d=(f&65535)>>>8&255;na=110;break}else{k[68]=d|32;break}}else{n=k[73]|0;d=f;na=110}while(0);do if((na|0)==110)if(n>>>0>=e>>>0|d<<24>>24==10){Ta[k[308>>2]&7](272,oa,1)|0;break}else{k[73]=n+1;i[n>>0]=10;break}while(0)}while(0);x=k[U>>2]|0;y=k[S>>2]|0;z=(x-y|0)/28|0;A=va+8|0;o=k[va>>2]|0;d=o;if((((k[A>>2]|0)-d|0)/12|0)>>>0<z>>>0){q=va+4|0;f=(k[q>>2]|0)-d|0;n=(f|0)/12|0;if((x|0)==(y|0))d=0;else{e=z*12|0;d=_d(e)|0;f:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(e)|0;if(d)break f}Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}while(0)}Q=d+((((f|0)/-12|0)+n|0)*12|0)|0;fe(Q|0,o|0,f|0)|0;k[va>>2]=Q;k[q>>2]=d+(n*12|0);k[A>>2]=d+(z*12|0);if(o)$d(o)}o=va+12|0;q=z<<1;u=va+20|0;v=k[o>>2]|0;d=v;if((((k[u>>2]|0)-d|0)/24|0)>>>0<q>>>0){w=va+16|0;f=(k[w>>2]|0)-d|0;n=(f|0)/24|0;if((x|0)==(y|0))d=0;else{e=z*48|0;e=(e|0)==0?1:e;d=_d(e)|0;g:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(e)|0;if(d)break g}Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}while(0)}Q=d+((((f|0)/-24|0)+n|0)*24|0)|0;fe(Q|0,v|0,f|0)|0;k[o>>2]=Q;k[w>>2]=d+(n*24|0);k[u>>2]=d+(q*24|0);if(v)$d(v)}o=va+24|0;q=z*6|0;u=va+32|0;v=k[o>>2]|0;d=v;if((((k[u>>2]|0)-d|0)/24|0)>>>0<q>>>0){w=va+28|0;f=(k[w>>2]|0)-d|0;n=(f|0)/24|0;if((x|0)==(y|0))d=0;else{e=z*144|0;e=(e|0)==0?1:e;d=_d(e)|0;h:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(e)|0;if(d)break h}Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}while(0)}Q=d+((((f|0)/-24|0)+n|0)*24|0)|0;fe(Q|0,v|0,f|0)|0;k[o>>2]=Q;k[w>>2]=d+(n*24|0);k[u>>2]=d+(q*24|0);if(v)$d(v)}kd(k[S>>2]|0,k[U>>2]|0);n=k[S>>2]|0;d=k[U>>2]|0;i:do if((n|0)!=(d|0)){e=n+28|0;if((e|0)!=(d|0)){f=n;while(1){if((((k[f>>2]|0)==(k[f+28>>2]|0)?(k[f+4>>2]|0)==(k[f+32>>2]|0):0)?(k[f+8>>2]|0)==(k[f+36>>2]|0):0)?(k[f+12>>2]|0)==(k[f+40>>2]|0):0){na=148;break i}f=e+28|0;if((f|0)==(d|0))break;else{Q=e;e=f;f=Q}}}}else{f=n;na=148}while(0);if((na|0)==148)if((f|0)!=(d|0)){e=f+56|0;if((e|0)==(d|0))e=n;else{n=f;f=f+28|0;while(1){if((((k[n>>2]|0)==(k[e>>2]|0)?(k[n+4>>2]|0)==(k[f+32>>2]|0):0)?(k[n+8>>2]|0)==(k[f+36>>2]|0):0)?(k[n+12>>2]|0)==(k[f+40>>2]|0):0)f=n;else{f=n+28|0;k[f>>2]=k[e>>2];k[f+4>>2]=k[e+4>>2];k[f+8>>2]=k[e+8>>2];k[f+12>>2]=k[e+12>>2];k[f+16>>2]=k[e+16>>2];k[f+20>>2]=k[e+20>>2];k[f+24>>2]=k[e+24>>2]}n=e+28|0;if((n|0)==(d|0))break;else{Q=e;e=n;n=f;f=Q}}d=k[U>>2]|0;e=k[S>>2]|0}n=f+28|0;o=n;if((n|0)!=(d|0)){e=e+((((d-o|0)/28|0)+((o-e|0)/28|0)|0)*28|0)|0;d=d-e|0;he(n|0,e|0,d|0)|0;d=f+((((d|0)/28|0)+1|0)*28|0)|0;e=k[U>>2]|0;if((e|0)!=(d|0)){d=e+(~(((e+-28-d|0)>>>0)/28|0)*28|0)|0;k[U>>2]=d}}}o=k[S>>2]|0;e=o;if((d|0)!=(o|0)){f=(d-e|0)/28|0;n=0;do{k[o+(n*28|0)+16>>2]=n;n=n+1|0}while(n>>>0<f>>>0)}k[ra+16>>2]=e;do if((o|0)==(d|0)){u=ra+16|0;d=o}else{if((d-e|0)==28){d=k[o+24>>2]&31;k[oa>>2]=k[o+20>>2];k[oa+4>>2]=0;k[oa+8>>2]=d;d=va+4|0;e=k[d>>2]|0;if(e>>>0<(k[A>>2]|0)>>>0){k[e>>2]=k[oa>>2];k[e+4>>2]=k[oa+4>>2];k[e+8>>2]=k[oa+8>>2];k[d>>2]=(k[d>>2]|0)+12}else gd(va,oa);u=ra+16|0;d=(k[u>>2]|0)+28|0;k[u>>2]=d;break}x=ra+16|0;if((o|0)!=(d|0)){f=k[o>>2]|0;n=o;e=0;do{if((k[n>>2]|0)!=(f|0)){d=n;break}if((f|0)!=(k[n+8>>2]|0)){d=n;break}n=n+28|0;k[x>>2]=n;e=e+1|0}while((n|0)!=(d|0));if((e|0)==1){k[fa>>2]=Z;k[oa>>2]=k[fa>>2];dd(ra,o,o,o+28|0,oa,va)|0;d=(k[x>>2]|0)+28|0;k[x>>2]=d;u=x;break}else e=d}else e=d;d=o+28|0;j:do if((d|0)==(e|0))d=e;else{w=fa+28|0;v=o;k:while(1){k[fa>>2]=k[v>>2];k[fa+4>>2]=k[v+4>>2];k[fa+8>>2]=k[v+8>>2];k[fa+12>>2]=k[v+12>>2];k[fa+16>>2]=k[v+16>>2];k[fa+20>>2]=k[v+20>>2];k[fa+24>>2]=k[v+24>>2];k[w>>2]=k[d>>2];k[w+4>>2]=k[d+4>>2];k[w+8>>2]=k[d+8>>2];k[w+12>>2]=k[d+12>>2];k[w+16>>2]=k[d+16>>2];k[w+20>>2]=k[d+20>>2];k[w+24>>2]=k[d+24>>2];ed(_,va,v,d);u=k[_>>2]|0;e=_d(80)|0;if(!e)do{e=k[35]|0;k[35]=e+0;if(!e)break k;Xa[e&0]();e=_d(80)|0}while((e|0)==0);f=e+16|0;o=f;n=fa;q=o+56|0;do{k[o>>2]=k[n>>2];o=o+4|0;n=n+4|0}while((o|0)<(q|0));n=e+72|0;k[n>>2]=0;k[n+4>>2]=u;n=fd(W,Z,oa,f)|0;f=k[n>>2]|0;do if(!f){f=k[oa>>2]|0;k[e>>2]=0;k[e+4>>2]=0;k[e+8>>2]=f;k[n>>2]=e;f=k[k[W>>2]>>2]|0;if(f){k[W>>2]=f;e=k[n>>2]|0}Nb(k[T>>2]|0,e);k[Y>>2]=(k[Y>>2]|0)+1}else{if((f|0)==(e|0))break;$d(e)}while(0);d=d+28|0;if((d|0)==(k[x>>2]|0))break j;else v=v+28|0}Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}while(0);u=x}while(0);o=ra+36|0;q=ra+40|0;n=k[o>>2]|0;e=k[q>>2]|0;l:while(1){f=(d|0)==(k[U>>2]|0);do if((n|0)!=(e|0)){if(f){Kc(ra,va);break}I=(k[n>>2]|0)+24|0;K=k[I>>2]|0;I=k[I+4>>2]|0;p[t>>3]=+(k[d>>2]|0);J=k[t>>2]|0;H=k[t+4>>2]|0;S=(H|0)>-1|(H|0)==-1&J>>>0>4294967295;Q=be(0,-2147483648,J|0,H|0)|0;J=S?Q:J;H=S?L:H;S=(I|0)>-1|(I|0)==-1&K>>>0>4294967295;Q=be(0,-2147483648,K|0,I|0)|0;K=S?Q:K;I=S?L:I;S=be(J|0,H|0,K|0,I|0)|0;Q=L;_=be(K|0,I|0,J|0,H|0)|0;T=L;if(((H>>>0>I>>>0|(H|0)==(I|0)&J>>>0>K>>>0?(Q>>>0>0|(Q|0)==0&S>>>0>64)<<31>>31:(T>>>0>0|(T|0)==0&_>>>0>64)&1)|0)==-1){Jc(ra,va);break}else{Kc(ra,va);break}}else{if(f)break l;Jc(ra,va)}while(0);d=k[o>>2]|0;e=k[q>>2]|0;m:do if((d|0)==(e|0))e=d;else while(1){n=k[d>>2]|0;if(i[n+32>>0]|0)break m;f=e-d|0;if((f|0)>4){_=e+-4|0;k[d>>2]=k[_>>2];k[_>>2]=n;Lc(d,(f>>2)+-1|0,d);d=k[q>>2]|0}else d=e;k[q>>2]=d+-4;d=n+4|0;e=k[n>>2]|0;k[e+4>>2]=k[d>>2];k[k[d>>2]>>2]=e;k[V>>2]=(k[V>>2]|0)+-1;$d(n);d=k[o>>2]|0;e=k[q>>2]|0;if((d|0)==(e|0)){e=d;break}}while(0);n=d;d=k[u>>2]|0}Cc(k[Z>>2]|0);k[Y>>2]=0;k[W>>2]=Z;k[Z>>2]=0;Y=va+24|0;e=k[Y>>2]|0;f=e;Z=va+28|0;d=k[Z>>2]|0;if((e|0)==(d|0)){n=f;d=e;f=e}else{n=f;v=f;while(1){f=k[e+4>>2]|0;u=k[e+8>>2]|0;o=k[u+4>>2]|0;q=f;if(((f|0)!=0&(o|0)!=0?(K=f,S=k[K>>2]|0,K=k[K+4>>2]|0,Q=o,T=k[Q>>2]|0,Q=k[Q+4>>2]|0,V=(K|0)>-1|(K|0)==-1&S>>>0>4294967295,U=be(0,-2147483648,S|0,K|0)|0,S=V?U:S,K=V?L:K,V=(Q|0)>-1|(Q|0)==-1&T>>>0>4294967295,U=be(0,-2147483648,T|0,Q|0)|0,T=V?U:T,Q=V?L:Q,V=be(S|0,K|0,T|0,Q|0)|0,U=L,_=be(T|0,Q|0,S|0,K|0)|0,W=L,((K>>>0>Q>>>0|(K|0)==(Q|0)&S>>>0>T>>>0?(U>>>0>0|(U|0)==0&V>>>0>128)<<31>>31:(W>>>0>0|(W|0)==0&_>>>0>128)&1)|0)==0):0)?(K=f+8|0,S=k[K>>2]|0,K=k[K+4>>2]|0,Q=o+8|0,T=k[Q>>2]|0,Q=k[Q+4>>2]|0,V=(K|0)>-1|(K|0)==-1&S>>>0>4294967295,U=be(0,-2147483648,S|0,K|0)|0,S=V?U:S,K=V?L:K,V=(Q|0)>-1|(Q|0)==-1&T>>>0>4294967295,U=be(0,-2147483648,T|0,Q|0)|0,T=V?U:T,Q=V?L:Q,V=be(S|0,K|0,T|0,Q|0)|0,U=L,_=be(T|0,Q|0,S|0,K|0)|0,W=L,((K>>>0>Q>>>0|(K|0)==(Q|0)&S>>>0>T>>>0?(U>>>0>0|(U|0)==0&V>>>0>128)<<31>>31:(W>>>0>0|(W|0)==0&_>>>0>128)&1)|0)==0):0){f=k[(k[u+16>>2]|0)+8>>2]|0;if((f|0)==(u|0))f=u;else{o=f;do{k[o+4>>2]=q;o=k[(k[o+16>>2]|0)+8>>2]|0}while((o|0)!=(u|0))}W=k[u+12>>2]|0;_=k[(k[u+8>>2]|0)+12>>2]|0;V=k[(k[(k[e+16>>2]|0)+8>>2]|0)+8>>2]|0;k[V+12>>2]=_;k[_+16>>2]=V;_=k[f+8>>2]|0;k[W+16>>2]=_;k[_+12>>2]=W}else{o=n;do if((e|0)!=(o|0)){f=n;d=v;k[f>>2]=k[d>>2];k[f+4>>2]=k[d+4>>2];k[f+8>>2]=k[d+8>>2];k[f+12>>2]=k[d+12>>2];k[f+16>>2]=k[d+16>>2];k[f+20>>2]=k[d+20>>2];f=o+24|0;d=e+24|0;k[f>>2]=k[d>>2];k[f+4>>2]=k[d+4>>2];k[f+8>>2]=k[d+8>>2];k[f+12>>2]=k[d+12>>2];k[f+16>>2]=k[d+16>>2];k[f+20>>2]=k[d+20>>2];k[o+8>>2]=f;k[o+32>>2]=o;d=k[o+16>>2]|0;if(d){k[d+12>>2]=o;k[(k[o+36>>2]|0)+16>>2]=f}d=o+40|0;if(!(k[d>>2]|0))break;k[(k[o+12>>2]|0)+16>>2]=o;k[(k[d>>2]|0)+12>>2]=f}while(0);n=o+48|0;d=k[Z>>2]|0}f=v+48|0;if((f|0)==(d|0))break;else{e=f;v=f}}f=k[Y>>2]|0}e=n;if((e|0)!=(d|0)){_=f+((((d-n|0)/24|0)+((n-f|0)/24|0)|0)*24|0)|0;d=d-_|0;he(n|0,_|0,d|0)|0;d=e+(((d|0)/24|0)*24|0)|0;e=k[Z>>2]|0;if((e|0)!=(d|0)){d=e+(~(((e+-24-d|0)>>>0)/24|0)*24|0)|0;k[Z>>2]=d}}e=k[Y>>2]|0;if((e|0)!=(d|0))do{k[(k[e>>2]|0)+4>>2]=e;f=k[e+4>>2]|0;if(f)k[f+16>>2]=e;e=e+24|0}while((e|0)!=(d|0));V=va+12|0;f=k[V>>2]|0;e=f;W=va+16|0;d=k[W>>2]|0;if((f|0)==(d|0)){d=f;n=f}else{n=f;do{if(k[n+16>>2]|0){f=e;if((n|0)!=(f|0)){d=e;k[d>>2]=k[n>>2];k[d+4>>2]=k[n+4>>2];k[d+8>>2]=k[n+8>>2];k[d+12>>2]=k[n+12>>2];k[d+16>>2]=k[n+16>>2];k[d+20>>2]=k[n+20>>2];d=k[f+16>>2]|0;e=d;do{k[e+4>>2]=f;e=k[(k[e+16>>2]|0)+8>>2]|0}while((e|0)!=(d|0))}e=f+24|0;d=k[W>>2]|0}n=n+24|0}while((n|0)!=(d|0));n=k[V>>2]|0}f=e;if((f|0)!=(d|0)){_=n+((((d-e|0)/24|0)+((e-n|0)/24|0)|0)*24|0)|0;d=d-_|0;he(e|0,_|0,d|0)|0;d=f+(((d|0)/24|0)*24|0)|0;e=k[W>>2]|0;if((e|0)!=(d|0)){d=e+(~(((e+-24-d|0)>>>0)/24|0)*24|0)|0;k[W>>2]=d}}if((k[V>>2]|0)==(d|0)){w=k[Y>>2]|0;e=w;q=k[Z>>2]|0;if((w|0)!=(q|0)){k[w+12>>2]=w;k[w+16>>2]=w;d=w+24|0;n=w+48|0;f=w+36|0;if((n|0)==(q|0))e=w;else{u=(((q+-96-e|0)>>>0)/48|0)<<1;v=u+3|0;o=w+(v*24|0)+12|0;e=w;while(1){k[f>>2]=n;k[e+40>>2]=n;k[e+60>>2]=d;k[e+64>>2]=d;d=n+48|0;if((d|0)==(q|0))break;else{_=n;n=d;f=e+84|0;d=e+72|0;e=_}}f=o;e=w+((u+2|0)*24|0)|0;d=w+(v*24|0)|0}k[f>>2]=d;k[e+40>>2]=d}}else{d=k[va>>2]|0;q=k[va+4>>2]|0;if((d|0)!=(q|0))do{n=k[d+4>>2]|0;do if(n){e=n;while(1){f=e;e=k[e+16>>2]|0;if(!e)break;if((e|0)==(n|0)){na=251;break}}if((na|0)==251){na=0;if(!(k[n+16>>2]|0))f=n;else break}while(1){e=n+12|0;o=k[e>>2]|0;if(!o)break;else n=o}k[f+16>>2]=n;k[e>>2]=f}while(0);d=d+12|0}while((d|0)!=(q|0))}k[ha>>2]=0;n=(k[87]|0)>-1;n:do if(!1){d=1025;na=259}else{e=1025;d=1025;while(1){if(!(i[e>>0]|0))break n;e=e+1|0;d=e;if(!(d&3)){d=e;na=259;break}}}while(0);if((na|0)==259){while(1){e=k[d>>2]|0;if(!((e&-2139062144^-2139062144)&e+-16843009))d=d+4|0;else break}if((e&255)<<24>>24)do d=d+1|0;while((i[d>>0]|0)!=0)}f=d-1025|0;d=k[72]|0;e=(d|0)==0;o:do if(n){do if(e){d=i[346]|0;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;d=e+(k[80]|0)|0;k[72]=d;break}else{k[68]=d|32;d=0;na=281;break o}}else e=k[73]|0;while(0);if((d-e|0)>>>0<f>>>0){d=Ta[k[308>>2]&7](272,1025,f)|0;na=281;break}else{fe(e|0,1025,f|0)|0;k[73]=(k[73]|0)+f;na=283;break}}else{do if(e){d=i[346]|0;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;d=e+(k[80]|0)|0;k[72]=d;break}else{k[68]=d|32;d=0;na=281;break o}}else e=k[73]|0;while(0);if((d-e|0)>>>0<f>>>0){d=Ta[k[308>>2]&7](272,1025,f)|0;na=281;break}else{fe(e|0,1025,f|0)|0;k[73]=(k[73]|0)+f;na=283;break}}while(0);do if((na|0)==281){if((d|0)==(f|0)){na=283;break}if(((d>>>0)/(f>>>0)|0|0)>=1)na=283}while(0);p:do if((na|0)==283){f=i[347]|0;do if(f<<24>>24==10)e=k[72]|0;else{d=k[73]|0;e=k[72]|0;if(d>>>0>=e>>>0)break;k[73]=d+1;i[d>>0]=10;break p}while(0);i[oa>>0]=10;do if(!e){f=j[173]|0;d=(f&65535)<<24>>24;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;n=k[79]|0;k[75]=n;k[73]=n;e=n+(k[80]|0)|0;k[72]=e;d=(f&65535)>>>8&255;na=292;break}else{k[68]=d|32;break}}else{n=k[73]|0;d=f;na=292}while(0);do if((na|0)==292)if(n>>>0>=e>>>0|d<<24>>24==10){Ta[k[308>>2]&7](272,oa,1)|0;break}else{k[73]=n+1;i[n>>0]=10;break}while(0)}while(0);d=k[b>>2]|0;G=k[ba>>2]|0;q:do if(d>>>0<G>>>0){f=0;e=0;r:while(1){F=k[d>>2]|0;E=F;F=(k[d+4>>2]|0)-F>>3;if(F){D=0;do{q=D;D=D+1|0;C=D>>>0<F>>>0;v=C?E+(D<<3)|0:E;o=k[E+(q<<3)>>2]|0;q=k[E+(q<<3)+4>>2]|0;n=k[v>>2]|0;v=k[v+4>>2]|0;do if((o|0)!=(n|0)|(q|0)!=(v|0)){do if((o|0)<=(n|0)){if((o|0)!=(n|0)){u=o;w=q;o=v;v=1;na=302;break}if((q|0)<=(v|0)){u=o;n=o;o=v;v=1;na=303}else{u=n;w=v;n=o;o=q;v=-1;na=302}}else{u=n;w=v;n=o;o=q;v=-1;na=302}while(0);if((na|0)==302){na=0;if((u|0)==(n|0)){q=w;na=303}else{q=w;B=o}}if((na|0)==303){na=0;B=o;v=0-v|0}o=e;w=k[ha>>2]|0;if(o>>>0<w>>>0){i[o>>0]=0;i[o+1>>0]=0;i[o+2>>0]=0;k[o+4>>2]=0;k[o+8>>2]=0;k[o+12>>2]=0;k[o+16>>2]=u;k[o+20>>2]=q;k[o+24>>2]=0;k[o+28>>2]=n;k[o+32>>2]=B;k[o+36>>2]=0;k[o+40>>2]=v;e=o+44|0;break}A=f;z=e-f|0;y=(z|0)/44|0;x=y+1|0;if(x>>>0>97612893){na=308;break r}e=(w-f|0)/44|0;if(e>>>0<48806446){e=e<<1;e=e>>>0<x>>>0?x:e;if(!e){w=0;o=0}else na=311}else{e=97612893;na=311}if((na|0)==311){na=0;w=e*44|0;w=(w|0)==0?1:w;o=_d(w)|0;if(!o)do{o=k[35]|0;k[35]=o+0;if(!o){na=314;break r}Xa[o&0]();o=_d(w)|0}while((o|0)==0);w=e}e=o+(y*44|0)|0;i[e>>0]=0;i[e+1>>0]=0;i[e+2>>0]=0;k[e+4>>2]=0;k[e+8>>2]=0;k[e+12>>2]=0;k[e+16>>2]=u;k[e+20>>2]=q;k[e+24>>2]=0;k[e+28>>2]=n;k[e+32>>2]=B;k[e+36>>2]=0;k[e+40>>2]=v;e=o+(x*44|0)|0;ba=o+((((z|0)/-44|0)+y|0)*44|0)|0;n=ba;fe(ba|0,A|0,z|0)|0;k[ha>>2]=o+(w*44|0);if(!f){f=n;break}$d(A);f=n}while(0)}while(C)}d=d+12|0;if(d>>>0>=G>>>0){g=f;ca=e;break q}}if((na|0)==308)xa(1340,1363,303,1438);else if((na|0)==314){Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}}else{g=0;ca=0}while(0);n=(k[87]|0)>-1;s:do if(!3){d=1027;na=322}else{e=1027;d=1027;while(1){if(!(i[e>>0]|0))break s;e=e+1|0;d=e;if(!(d&3)){d=e;na=322;break}}}while(0);if((na|0)==322){while(1){e=k[d>>2]|0;if(!((e&-2139062144^-2139062144)&e+-16843009))d=d+4|0;else break}if((e&255)<<24>>24)do d=d+1|0;while((i[d>>0]|0)!=0)}f=d-1027|0;d=k[72]|0;e=(d|0)==0;t:do if(n){do if(e){d=i[346]|0;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;d=e+(k[80]|0)|0;k[72]=d;break}else{k[68]=d|32;d=0;na=344;break t}}else e=k[73]|0;while(0);if((d-e|0)>>>0<f>>>0){d=Ta[k[308>>2]&7](272,1027,f)|0;na=344;break}else{fe(e|0,1027,f|0)|0;k[73]=(k[73]|0)+f;na=346;break}}else{do if(e){d=i[346]|0;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;d=e+(k[80]|0)|0;k[72]=d;break}else{k[68]=d|32;d=0;na=344;break t}}else e=k[73]|0;while(0);if((d-e|0)>>>0<f>>>0){d=Ta[k[308>>2]&7](272,1027,f)|0;na=344;break}else{fe(e|0,1027,f|0)|0;k[73]=(k[73]|0)+f;na=346;break}}while(0);do if((na|0)==344){if((d|0)==(f|0)){na=346;break}if(((d>>>0)/(f>>>0)|0|0)>=1)na=346}while(0);u:do if((na|0)==346){f=i[347]|0;do if(f<<24>>24==10)e=k[72]|0;else{d=k[73]|0;e=k[72]|0;if(d>>>0>=e>>>0)break;k[73]=d+1;i[d>>0]=10;break u}while(0);i[oa>>0]=10;do if(!e){f=j[173]|0;d=(f&65535)<<24>>24;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;n=k[79]|0;k[75]=n;k[73]=n;e=n+(k[80]|0)|0;k[72]=e;d=(f&65535)>>>8&255;na=355;break}else{k[68]=d|32;break}}else{n=k[73]|0;d=f;na=355}while(0);do if((na|0)==355)if(n>>>0>=e>>>0|d<<24>>24==10){Ta[k[308>>2]&7](272,oa,1)|0;break}else{k[73]=n+1;i[n>>0]=10;break}while(0)}while(0);d=g;if((ca|0)!=(d|0)){e=(ca-g|0)/44|0;f=0;do{i[d+(f*44|0)>>0]=1;f=f+1|0}while(f>>>0<e>>>0)}d=k[Y>>2]|0;e=k[Z>>2]|0;if((d|0)!=(e|0)){f=d;do{ba=f+20|0;k[ba>>2]=k[ba>>2]&31;f=f+24|0}while((f|0)!=(e|0))}k[ja>>2]=(e-d|0)/24|0;Nd(1029,ja);e=k[Z>>2]|0;d=k[Y>>2]|0;v:do if((e|0)!=(d|0)){f=ca;D=0;w:while(1){n=d+(D*24|0)+20|0;o=k[n>>2]|0;do if(o&2){u=k[d+(D*24|0)+4>>2]|0;if(!u)break;q=k[d+(D*24|0)+8>>2]|0;v=k[q+4>>2]|0;if(!((v|0)!=0&(o&32|0)==0))break;k[n>>2]=o&31|32;d=q+20|0;k[d>>2]=k[d>>2]&31|32;h=+p[u>>3];p[t>>3]=h;d=k[t+4>>2]|0;e=de(k[t>>2]|0,d|0,52)|0;e=e&2047;do if(e>>>0<=1074){d=(d|0)<0;m=d?-h:h;if(e>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=d?-h:h}while(0);C=~~h;h=+p[u+8>>3];p[t>>3]=h;d=k[t+4>>2]|0;e=de(k[t>>2]|0,d|0,52)|0;e=e&2047;do if(e>>>0<=1074){d=(d|0)<0;m=d?-h:h;if(e>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=d?-h:h}while(0);B=~~h;h=+p[v>>3];p[t>>3]=h;d=k[t+4>>2]|0;e=de(k[t>>2]|0,d|0,52)|0;e=e&2047;do if(e>>>0<=1074){d=(d|0)<0;m=d?-h:h;if(e>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=d?-h:h}while(0);e=~~h;h=+p[v+8>>3];p[t>>3]=h;d=k[t+4>>2]|0;n=de(k[t>>2]|0,d|0,52)|0;n=n&2047;do if(n>>>0<=1074){d=(d|0)<0;m=d?-h:h;if(n>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=d?-h:h}while(0);y=~~h;u=f;d=k[ha>>2]|0;do if(u>>>0<d>>>0){i[u>>0]=0;i[u+1>>0]=0;i[u+2>>0]=0;k[u+4>>2]=0;k[u+8>>2]=0;k[u+12>>2]=0;d=u+16|0;f=u+16|0;k[f>>2]=C;k[u+20>>2]=B;k[u+24>>2]=0;n=u+28|0;o=u+28|0;k[o>>2]=e;k[u+32>>2]=y;k[u+36>>2]=0;q=u+40|0;k[q>>2]=1;do if((C|0)<=(e|0)){if((C|0)!=(e|0)){f=C;d=1;na=406;break}if((B|0)<=(y|0)){d=1;na=407}else na=405}else na=405;while(0);if((na|0)==405){k[oa>>2]=k[d>>2];k[oa+4>>2]=k[d+4>>2];k[oa+8>>2]=k[d+8>>2];k[d>>2]=k[n>>2];k[d+4>>2]=k[n+4>>2];k[d+8>>2]=k[n+8>>2];k[n>>2]=k[oa>>2];k[n+4>>2]=k[oa+4>>2];k[n+8>>2]=k[oa+8>>2];k[q>>2]=-1;f=k[f>>2]|0;e=k[o>>2]|0;d=-1;na=406}if((na|0)==406?(na=0,(f|0)==(e|0)):0)na=407;if((na|0)==407){na=0;k[q>>2]=0-d}f=u+44|0}else{A=g;z=f-g|0;x=(z|0)/44|0;w=x+1|0;if(w>>>0>97612893){na=410;break w}d=(d-g|0)/44|0;if(d>>>0<48806446){n=d<<1;n=n>>>0<w>>>0?w:n}else n=97612893;f=n*44|0;f=(f|0)==0?1:f;d=_d(f)|0;if(!d)while(1){d=k[35]|0;k[35]=d+0;if(!d){na=416;break w}Xa[d&0]();d=_d(f)|0;if(d){u=d;break}}else u=d;v=u+(n*44|0)|0;i[u+(x*44|0)>>0]=0;i[u+(x*44|0)+1>>0]=0;i[u+(x*44|0)+2>>0]=0;k[u+(x*44|0)+4>>2]=0;k[u+(x*44|0)+8>>2]=0;k[u+(x*44|0)+12>>2]=0;d=u+(x*44|0)+16|0;f=u+(x*44|0)+16|0;k[f>>2]=C;k[u+(x*44|0)+20>>2]=B;k[u+(x*44|0)+24>>2]=0;n=u+(x*44|0)+28|0;o=u+(x*44|0)+28|0;k[o>>2]=e;k[u+(x*44|0)+32>>2]=y;k[u+(x*44|0)+36>>2]=0;q=u+(x*44|0)+40|0;k[q>>2]=1;do if((C|0)<=(e|0)){if((C|0)!=(e|0)){f=C;d=1;na=421;break}if((B|0)<=(y|0)){d=1;na=422}else na=420}else na=420;while(0);if((na|0)==420){k[oa>>2]=k[d>>2];k[oa+4>>2]=k[d+4>>2];k[oa+8>>2]=k[d+8>>2];k[d>>2]=k[n>>2];k[d+4>>2]=k[n+4>>2];k[d+8>>2]=k[n+8>>2];k[n>>2]=k[oa>>2];k[n+4>>2]=k[oa+4>>2];k[n+8>>2]=k[oa+8>>2];k[q>>2]=-1;f=k[f>>2]|0;e=k[o>>2]|0;d=-1;na=421}if((na|0)==421?(na=0,(f|0)==(e|0)):0)na=422;if((na|0)==422){na=0;k[q>>2]=0-d}f=u+(w*44|0)|0;ca=u+((((z|0)/-44|0)+x|0)*44|0)|0;d=ca;fe(ca|0,A|0,z|0)|0;k[ha>>2]=v;if(!g){g=d;break}$d(A);g=d}while(0);k[f+-32>>2]=D;e=k[Z>>2]|0;d=k[Y>>2]|0}while(0);D=D+1|0;if(D>>>0>=((e-d|0)/24|0)>>>0){ga=g;da=f;break v}}if((na|0)==410)xa(1340,1363,303,1438);else if((na|0)==416){Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}}else{ga=g;da=ca}while(0);f=da;F=ga;z=(da-ga|0)/44|0;k[ea>>2]=z;Nd(1050,ea);k[oa>>2]=0;G=oa+4|0;k[G>>2]=0;k[oa+8>>2]=0;x=oa+8|0;y=(f|0)!=(F|0);if(y){e=z*24|0;d=_d(e)|0;x:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(e)|0;if(d)break x}Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}while(0);da=d;g=d+(z*24|0)|0;k[oa>>2]=da;k[G>>2]=da;k[x>>2]=g}else{g=0;d=0}y:do if((f|0)!=(F|0)){n=ea+4|0;o=ea+8|0;q=ea+12|0;u=ea+16|0;v=ea+16|0;w=ea+20|0;e=0;while(1){f=k[F+(e*44|0)+16>>2]|0;b=k[F+(e*44|0)+20>>2]|0;ba=k[F+(e*44|0)+28>>2]|0;da=k[F+(e*44|0)+32>>2]|0;ca=k[F+(e*44|0)+40>>2]|0;k[ea>>2]=f;k[n>>2]=b;k[o>>2]=ba;k[q>>2]=da;da=u;k[da>>2]=e;k[da+4>>2]=ca;if(d>>>0<g>>>0){k[d>>2]=f;k[d+4>>2]=k[n>>2];k[d+8>>2]=k[o>>2];k[d+12>>2]=k[q>>2];k[d+16>>2]=k[v>>2];k[d+20>>2]=k[w>>2];k[G>>2]=d+24}else Db(oa,ea);e=e+1|0;if(e>>>0>=z>>>0)break y;d=k[G>>2]|0;g=k[x>>2]|0}}while(0);k[ja>>2]=0;E=ja+4|0;k[E>>2]=0;k[ja+8>>2]=0;f=ja+8|0;if(y){e=z*24|0;d=_d(e)|0;z:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(e)|0;if(d)break z}Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}while(0);ea=d;k[ja>>2]=ea;k[E>>2]=ea;k[f>>2]=d+(z*24|0)}Eb(ja,k[oa>>2]|0,k[G>>2]|0);D=k[E>>2]|0;o=k[ja>>2]|0;f=(D-o|0)/24|0;n=(D|0)==(o|0);A:do if(!n){e=f*44|0;e=(e|0)==0?1:e;d=_d(e)|0;do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d){na=451;break}Xa[d&0]();d=_d(e)|0;if(d){na=452;break}}if((na|0)==451){Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}else if((na|0)==452){g=d;f=d+(f*44|0)|0;e=f;if(n){ta=g;ia=e;ka=g;break A}else break}}else{f=d+(f*44|0)|0;e=f;g=d}while(0);n=g;B:while(1){w=F+((k[o+16>>2]|0)*44|0)|0;k[fa>>2]=k[w>>2];k[fa+4>>2]=k[w+4>>2];k[fa+8>>2]=k[w+8>>2];k[fa+12>>2]=k[w+12>>2];v=k[w+24>>2]|0;w=k[w+36>>2]|0;x=k[o>>2]|0;y=k[o+4>>2]|0;z=k[o+8>>2]|0;A=k[o+12>>2]|0;B=k[o+20>>2]|0;do if((d|0)==(f|0)){C=n;u=g-n|0;q=(u|0)/44|0;g=q+1|0;if(g>>>0>97612893){na=457;break B}d=(e-n|0)/44|0;if(d>>>0<48806446){d=d<<1;d=d>>>0<g>>>0?g:d;if(!d){d=0;f=0}else na=460}else{d=97612893;na=460}if((na|0)==460){na=0;f=d*44|0;f=(f|0)==0?1:f;e=_d(f)|0;if(!e)do{e=k[35]|0;k[35]=e+0;if(!e){na=463;break B}Xa[e&0]();e=_d(f)|0}while((e|0)==0);f=e}e=f+(d*44|0)|0;ea=f+(q*44|0)|0;k[ea>>2]=k[fa>>2];k[ea+4>>2]=k[fa+4>>2];k[ea+8>>2]=k[fa+8>>2];k[ea+12>>2]=k[fa+12>>2];k[ea+16>>2]=x;k[ea+20>>2]=y;k[ea+24>>2]=v;k[ea+28>>2]=z;k[ea+32>>2]=A;k[ea+36>>2]=w;k[ea+40>>2]=B;g=f+(g*44|0)|0;ea=f+((((u|0)/-44|0)+q|0)*44|0)|0;d=ea;fe(ea|0,C|0,u|0)|0;if(!n){n=d;break}$d(C);n=d}else{k[d>>2]=k[fa>>2];k[d+4>>2]=k[fa+4>>2];k[d+8>>2]=k[fa+8>>2];k[d+12>>2]=k[fa+12>>2];k[d+16>>2]=x;k[d+20>>2]=y;k[d+24>>2]=v;k[d+28>>2]=z;k[d+32>>2]=A;k[d+36>>2]=w;k[d+40>>2]=B;g=d+44|0}while(0);d=o+24|0;if((d|0)==(D|0)){ta=n;ia=e;ka=g;break A}o=d;d=g;f=e}if((na|0)==457)xa(1340,1363,303,1438);else if((na|0)==463){Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}}else{ta=0;ia=0;ka=0}while(0);if(ga){$d(F);k[ha>>2]=0}k[ha>>2]=ia;d=k[ja>>2]|0;e=d;if(d){f=k[E>>2]|0;if((f|0)!=(d|0))k[E>>2]=f+(~(((f+-24-e|0)>>>0)/24|0)*24|0);$d(d)}d=k[oa>>2]|0;e=d;if(d){f=k[G>>2]|0;if((f|0)!=(d|0))k[G>>2]=f+(~(((f+-24-e|0)>>>0)/24|0)*24|0);$d(d)}T=ka;U=ta;J=(ka-ta|0)/44|0;k[la>>2]=J;Nd(1070,la);k[oa>>2]=3;Ac(U,T,oa);k[ma>>2]=J;Nd(1090,ma);J=(U|0)==(T|0);do if(!J){I=ma+4|0;d=ta;z=0;y=0;g=U;q=0;o=0;e=k[U+16>>2]|0;f=0;n=0;u=0;C:while(1){D:do if((g|0)==(T|0))if((q|0)==(o|0)){na=575;break C}else H=u;else{w=g;v=f;g=u;while(1){if((k[w+16>>2]|0)!=(e|0)){f=v;H=g;break D};k[I>>2]=0;k[I+4>>2]=0;i[I+8>>0]=0;i[la>>0]=0;d=n;do if((d|0)==(g|0)){u=n-v|0;n=u>>5;o=n+1|0;if(o>>>0>134217727){na=487;break C}if(n>>>0<67108863){g=u>>4;g=g>>>0<o>>>0?o:g}else g=134217727;f=g<<5;f=(f|0)==0?1:f;d=_d(f)|0;if(!d)do{d=k[35]|0;k[35]=d+0;if(!d){na=493;break C}Xa[d&0]();d=_d(f)|0}while((d|0)==0);q=d+(g<<5)|0;k[d+(n<<5)>>2]=0;k[d+(n<<5)+4>>2]=0;k[d+(n<<5)+8>>2]=w;f=d+(n<<5)+12|0;k[f>>2]=k[ma>>2];k[f+4>>2]=k[ma+4>>2];k[f+8>>2]=k[ma+8>>2];i[f+12>>0]=i[ma+12>>0]|0;i[d+(n<<5)+25>>0]=1;n=d+(n<<5)+26|0;j[n>>1]=j[la>>1]|0;j[n+2>>1]=j[la+2>>1]|0;j[n+4>>1]=j[la+4>>1]|0;n=d+(o<<5)|0;f=d;g=v;fe(d|0,g|0,u|0)|0;if(!v){g=q;break}$d(g);g=q}else{k[d>>2]=0;k[d+4>>2]=0;k[d+8>>2]=w;f=d+12|0;k[f>>2]=k[ma>>2];k[f+4>>2]=k[ma+4>>2];k[f+8>>2]=k[ma+8>>2];i[f+12>>0]=i[ma+12>>0]|0;i[d+25>>0]=1;f=d+26|0;j[f>>1]=j[la>>1]|0;j[f+2>>1]=j[la+2>>1]|0;j[f+4>>1]=j[la+4>>1]|0;f=v;n=d+32|0}while(0);w=w+44|0;d=w;if((w|0)==(T|0)){H=g;break}else v=f}}while(0);G=f;F=n;w=(G|0)==(F|0);E:do if(w){k[oa>>2]=4;Ec(G,F,oa);u=z;q=y;o=G}else{s=+(e|0);x=G;do{g=k[x+8>>2]|0;o=k[g+20>>2]|0;v=g+28|0;q=k[v>>2]|0;u=k[g+32>>2]|0;do if((o|0)==(u|0)){h=+(o|0);g=g+16|0}else{g=g+16|0;m=+(k[g>>2]|0);h=+(o|0);l=s-m;if(l==0.0)break;h=h+(+(u|0)-h)*l/(+(q|0)-m)}while(0);p[x+16>>3]=h;if((e|0)==(k[g>>2]|0))g=1;else g=(e|0)==(k[v>>2]|0);i[x+24>>0]=g&1;x=x+32|0}while((x|0)!=(F|0));k[oa>>2]=4;Ec(G,F,oa);if(w){u=z;q=y;o=G;break}else{x=z;E=G;g=f}while(1){q=E+32|0;o=q;F:do if(!((i[E+24>>0]|0)==0|(q|0)==(F|0))){v=E+16|0;u=E;while(1){if(!(i[u+56>>0]|0))break F;if(!(+p[u+48>>3]==+p[v>>3]))break F;u=q+32|0;o=u;if((u|0)==(F|0))break;else{ka=q;q=u;u=ka}}}while(0);q=g;D=q>>>0<o>>>0;if(D){u=q;do{w=k[u+8>>2]|0;v=k[w+16>>2]|0;w=w+28|0;if((v|0)!=(k[w>>2]|0)){i[u+25>>0]=(e|0)==(v|0)&1;i[u+26>>0]=(e|0)==(k[w>>2]|0)&1}u=u+32|0}while(u>>>0<o>>>0)}G:do if((q|0)==(o|0))w=x;else{C=o+25|0;u=q;w=x;v=y;while(1){x=u;H:do if((u|0)==(o|0)){u=x;na=521}else while(1){y=k[u+8>>2]|0;z=i[u+25>>0]|0;if((k[y+16>>2]|0)==(k[y+28>>2]|0))break H;x=z<<24>>24==0;if(!x)k[u>>2]=w;do if(i[y>>0]|0){if(x)v=v+(k[y+40>>2]|0)|0;if(i[u+26>>0]|0)break;w=w+(k[y+40>>2]|0)|0}while(0);if(!x)k[u+4>>2]=w;u=u+32|0;x=u;if((u|0)==(o|0)){u=x;na=521;break}}while(0);if((na|0)==521){na=0;x=u;z=i[C>>0]|0;u=o}B=(x|0)==(o|0);I:do if(!B){A=x;do{y=k[A+8>>2]|0;if((k[y+16>>2]|0)!=(k[y+28>>2]|0))break;if((i[A+25>>0]|0)!=z<<24>>24)break;k[A>>2]=v;if(i[y>>0]|0)v=v+(k[y+40>>2]|0)|0;k[A+4>>2]=v;A=A+32|0}while((A|0)!=(o|0));if(B)break;else y=x;do{x=k[y+8>>2]|0;if((k[x+16>>2]|0)!=(k[x+28>>2]|0))break I;if((i[y+25>>0]|0)!=z<<24>>24)break I;if(i[x>>0]|0)v=v-(k[x+40>>2]|0)|0;y=y+32|0}while((y|0)!=(o|0))}while(0);if((u|0)==(o|0)){y=v;break G}while(1){ka=k[u+8>>2]|0;if((k[ka+16>>2]|0)!=(k[ka+28>>2]|0))break;if((i[u+25>>0]|0)!=z<<24>>24)break;u=u+32|0;if((u|0)==(o|0)){y=v;break G}}if((u|0)==(o|0)){y=v;break}}}while(0);if((E|0)!=(o|0)){u=E;do{if(!(k[u>>2]|0))v=0;else v=(k[u+4>>2]|0)!=0;i[(k[u+8>>2]|0)+1>>0]=v&1;u=u+32|0}while((u|0)!=(o|0))}J:do if(D)while(1){ka=k[q+8>>2]|0;if((k[ka+16>>2]|0)==(k[ka+28>>2]|0)?(i[q+26>>0]|0)==0:0){u=g;break J}q=q+32|0;g=q;if(q>>>0>=o>>>0){u=g;break}}else u=g;while(0);E=u;if(E>>>0<o>>>0){g=E;do{p[g+16>>3]=+(k[(k[g+8>>2]|0)+32>>2]|0);i[g+25>>0]=0;i[g+26>>0]=1;g=g+32|0}while(g>>>0<o>>>0)}if((E|0)==(F|0)){e=G;break}else{x=w;g=u}}while(1){if(i[e+26>>0]|0)break;e=e+32|0;if((e|0)==(F|0)){u=w;q=y;o=F;break E}}if((e|0)==(F|0)){u=w;q=y;o=F;break}g=e+32|0;if((g|0)!=(F|0)){o=e;q=e;while(1){if(!(i[o+58>>0]|0)){k[q>>2]=k[g>>2];k[q+4>>2]=k[g+4>>2];k[q+8>>2]=k[g+8>>2];k[q+12>>2]=k[g+12>>2];k[q+16>>2]=k[g+16>>2];k[q+20>>2]=k[g+20>>2];j[q+24>>1]=j[g+24>>1]|0;i[q+26>>0]=i[g+26>>0]|0;q=e+32|0;e=q}o=g+32|0;if((o|0)==(F|0))break;else{ka=g;g=o;o=ka}}}g=e;if((e|0)==(F|0)){u=w;q=y;o=F;break}ja=G+((g-f>>5)+(u-g>>5)<<5)|0;ka=u-ja|0;he(e|0,ja|0,ka|0)|0;e=e+(ka>>5<<5)|0;if((F|0)==(e|0)){u=w;q=y;o=F;break}n=F+(~((F+-32-e|0)>>>5)<<5)|0;u=w;q=y;o=n}while(0);if((G|0)==(o|0))e=2147483647;else{g=G;e=2147483647;do{ka=k[(k[g+8>>2]|0)+28>>2]|0;e=(ka|0)<(e|0)?ka:e;g=g+32|0}while((g|0)!=(o|0))}g=d;if((g|0)==(T|0)){z=u;y=q;q=G;u=H;continue}ka=k[g+16>>2]|0;z=u;y=q;q=G;e=(ka|0)<(e|0)?ka:e;u=H}if((na|0)==487)xa(1340,1363,303,1438);else if((na|0)==493){Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}else if((na|0)==575){if(!o)break;$d(o);break}}while(0);g=(k[87]|0)>-1;K:do if(!2){d=1110;na=580}else{e=1110;d=1110;while(1){if(!(i[e>>0]|0))break K;e=e+1|0;d=e;if(!(d&3)){d=e;na=580;break}}}while(0);if((na|0)==580){while(1){e=k[d>>2]|0;if(!((e&-2139062144^-2139062144)&e+-16843009))d=d+4|0;else break}if((e&255)<<24>>24)do d=d+1|0;while((i[d>>0]|0)!=0)}f=d-1110|0;d=k[72]|0;e=(d|0)==0;L:do if(g){do if(e){d=i[346]|0;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;d=e+(k[80]|0)|0;k[72]=d;break}else{k[68]=d|32;d=0;na=602;break L}}else e=k[73]|0;while(0);if((d-e|0)>>>0<f>>>0){d=Ta[k[308>>2]&7](272,1110,f)|0;na=602;break}else{fe(e|0,1110,f|0)|0;k[73]=(k[73]|0)+f;na=604;break}}else{do if(e){d=i[346]|0;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;d=e+(k[80]|0)|0;k[72]=d;break}else{k[68]=d|32;d=0;na=602;break L}}else e=k[73]|0;while(0);if((d-e|0)>>>0<f>>>0){d=Ta[k[308>>2]&7](272,1110,f)|0;na=602;break}else{fe(e|0,1110,f|0)|0;k[73]=(k[73]|0)+f;na=604;break}}while(0);do if((na|0)==602){if((d|0)==(f|0)){na=604;break}if(((d>>>0)/(f>>>0)|0|0)>=1)na=604}while(0);M:do if((na|0)==604){f=i[347]|0;do if(f<<24>>24==10)e=k[72]|0;else{d=k[73]|0;e=k[72]|0;if(d>>>0>=e>>>0)break;k[73]=d+1;i[d>>0]=10;break M}while(0);i[oa>>0]=10;do if(!e){f=j[173]|0;d=(f&65535)<<24>>24;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;g=k[79]|0;k[75]=g;k[73]=g;e=g+(k[80]|0)|0;k[72]=e;d=(f&65535)>>>8&255;na=613;break}else{k[68]=d|32;break}}else{g=k[73]|0;d=f;na=613}while(0);do if((na|0)==613)if(g>>>0>=e>>>0|d<<24>>24==10){Ta[k[308>>2]&7](272,oa,1)|0;break}else{k[73]=g+1;i[g>>0]=10;break}while(0)}while(0);k[a>>2]=0;S=a+4|0;k[S>>2]=0;k[a+8>>2]=0;do if(!J){aa=c*.5;K=a+8|0;Q=U;N:while(1){O:do if(!(i[Q>>0]|0)){if(!(i[Q+1>>0]|0))break;n=k[Q+12>>2]|0;o=k[Y>>2]|0;A=k[o+(n*24|0)>>2]|0;g=k[o+(n*24|0)+8>>2]|0;z=k[g>>2]|0;f=k[o+(n*24|0)+4>>2]|0;h=+p[f>>3];p[t>>3]=h;d=k[t+4>>2]|0;e=de(k[t>>2]|0,d|0,52)|0;e=e&2047;do if(e>>>0<=1074){d=(d|0)<0;m=d?-h:h;if(e>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=d?-h:h}while(0);C=~~h;h=+p[f+8>>3];p[t>>3]=h;d=k[t+4>>2]|0;e=de(k[t>>2]|0,d|0,52)|0;e=e&2047;do if(e>>>0<=1074){d=(d|0)<0;m=d?-h:h;if(e>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=d?-h:h}while(0);B=~~h;f=k[g+4>>2]|0;h=+p[f>>3];p[t>>3]=h;d=k[t+4>>2]|0;e=de(k[t>>2]|0,d|0,52)|0;e=e&2047;do if(e>>>0<=1074){d=(d|0)<0;m=d?-h:h;if(e>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=d?-h:h}while(0);J=~~h;h=+p[f+8>>3];p[t>>3]=h;d=k[t+4>>2]|0;e=de(k[t>>2]|0,d|0,52)|0;e=e&2047;do if(e>>>0<=1074){d=(d|0)<0;m=d?-h:h;if(e>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=d?-h:h}while(0);I=~~h;if(!(k[o+(n*24|0)+20>>2]&1)){d=k[A+8>>2]|0;f=k[A>>2]|0;if(!(d&24)){ma=(d&31|0)==1;d=k[wa>>2]|0;g=k[z>>2]|0;o=d+(g<<4)+12|0;q=d+(g<<4)+8|0;n=d+(g<<4)+4|0;g=d+(g<<4)|0;e=ma?d+(f<<4)+4|0:d+(f<<4)+12|0;d=ma?d+(f<<4)|0:d+(f<<4)+8|0}else{la=(k[z+8>>2]&31|0)==1;d=k[z>>2]|0;ma=k[wa>>2]|0;o=ma+(f<<4)+12|0;q=ma+(f<<4)+8|0;n=ma+(f<<4)+4|0;g=ma+(f<<4)|0;e=la?ma+(d<<4)+4|0:ma+(d<<4)+12|0;d=la?ma+(d<<4)|0:ma+(d<<4)+8|0}H=k[d>>2]|0;G=k[e>>2]|0;F=k[g>>2]|0;E=k[n>>2]|0;n=(k[q>>2]|0)-F|0;e=(k[o>>2]|0)-E|0;ma=C-F|0;ka=B-E|0;D=((n|0)<0)<<31>>31;ma=ne(ma|0,((ma|0)<0)<<31>>31|0,n|0,D|0)|0;la=L;d=((e|0)<0)<<31>>31;ka=ne(ka|0,((ka|0)<0)<<31>>31|0,e|0,d|0)|0;la=ge(ka|0,L|0,ma|0,la|0)|0;M=+(n|0);N=+(e|0);P=M*M+N*N;O=(+(la>>>0)+4294967296.0*+(L|0))/P;la=J-F|0;ma=I-E|0;D=ne(la|0,((la|0)<0)<<31>>31|0,n|0,D|0)|0;n=L;d=ne(ma|0,((ma|0)<0)<<31>>31|0,e|0,d|0)|0;n=ge(d|0,L|0,D|0,n|0)|0;P=(+(n>>>0)+4294967296.0*+(L|0))/P-O;R=+$(+aa);n=C;D=B;d=0;e=0;while(1){u=e;while(1){s=O+P*+(d>>>0)/20.0;h=M*s;p[t>>3]=h;e=k[t+4>>2]|0;f=de(k[t>>2]|0,e|0,52)|0;f=f&2047;do if(f>>>0<=1074){e=(e|0)<0;m=e?-h:h;if(f>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=e?-h:h}while(0);g=~~h+F|0;h=N*s;p[t>>3]=h;e=k[t+4>>2]|0;f=de(k[t>>2]|0,e|0,52)|0;f=f&2047;do if(f>>>0<=1074){e=(e|0)<0;m=e?-h:h;if(f>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=e?-h:h}while(0);o=~~h+E|0;h=+(H-g|0);c=+(G-o|0);s=h*h+c*c;c=(N*h-M*c)*2.0;h=N*s/c;p[t>>3]=h;e=k[t+4>>2]|0;f=de(k[t>>2]|0,e|0,52)|0;f=f&2047;do if(f>>>0<=1074){e=(e|0)<0;m=e?-h:h;if(f>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=e?-h:h}while(0);g=~~h+g|0;h=M*s/c;p[t>>3]=h;e=k[t+4>>2]|0;f=de(k[t>>2]|0,e|0,52)|0;f=f&2047;do if(f>>>0<=1074){e=(e|0)<0;m=e?-h:h;if(f>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=e?-h:h}while(0);B=(d|0)==20;C=B?J:g;B=B?I:o-~~h|0;c=+(C-H|0);h=+(B-G|0);h=+X(+(c*c+h*h))/R;p[t>>3]=h;e=k[t+4>>2]|0;f=de(k[t>>2]|0,e|0,52)|0;f=f&2047;do if(f>>>0<=1074){e=(e|0)<0;m=e?-h:h;if(f>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=e?-h:h}while(0);e=0-~~h|0;if(!d){d=1;u=e}else break}v=k[S>>2]|0;f=k[K>>2]|0;do if(v>>>0<f>>>0){i[v>>0]=0;i[v+1>>0]=0;i[v+2>>0]=0;k[v+4>>2]=0;k[v+8>>2]=0;k[v+12>>2]=0;g=v+16|0;o=v+16|0;k[o>>2]=n;k[v+20>>2]=D;k[v+24>>2]=u;f=v+28|0;q=v+28|0;k[q>>2]=C;k[v+32>>2]=B;k[v+36>>2]=e;u=v+40|0;k[u>>2]=1;do if((n|0)<=(C|0)){if((n|0)!=(C|0)){g=C;f=1;na=805;break}if((D|0)<=(B|0)){f=1;na=806}else na=804}else na=804;while(0);if((na|0)==804){k[oa>>2]=k[g>>2];k[oa+4>>2]=k[g+4>>2];k[oa+8>>2]=k[g+8>>2];k[g>>2]=k[f>>2];k[g+4>>2]=k[f+4>>2];k[g+8>>2]=k[f+8>>2];k[f>>2]=k[oa>>2];k[f+4>>2]=k[oa+4>>2];k[f+8>>2]=k[oa+8>>2];k[u>>2]=-1;n=k[o>>2]|0;g=k[q>>2]|0;f=-1;na=805}if((na|0)==805?(na=0,(n|0)==(g|0)):0)na=806;if((na|0)==806){na=0;k[u>>2]=0-f}k[S>>2]=v+44}else{A=k[a>>2]|0;g=A;x=v-g|0;y=(x|0)/44|0;z=y+1|0;if(z>>>0>97612893){na=809;break N}f=(f-g|0)/44|0;if(f>>>0<48806446){f=f<<1;f=f>>>0<z>>>0?z:f;if(!f){f=0;g=0}else na=812}else{f=97612893;na=812}if((na|0)==812){o=f*44|0;o=(o|0)==0?1:o;g=_d(o)|0;if(!g)do{g=k[35]|0;k[35]=g+0;if(!g){na=815;break N}Xa[g&0]();g=_d(o)|0}while((g|0)==0)}w=g+(f*44|0)|0;i[g+(y*44|0)>>0]=0;i[g+(y*44|0)+1>>0]=0;i[g+(y*44|0)+2>>0]=0;k[g+(y*44|0)+4>>2]=0;k[g+(y*44|0)+8>>2]=0;k[g+(y*44|0)+12>>2]=0;q=g+(y*44|0)+16|0;k[q>>2]=n;k[g+(y*44|0)+20>>2]=D;k[g+(y*44|0)+24>>2]=u;f=g+(y*44|0)+28|0;k[f>>2]=C;k[g+(y*44|0)+32>>2]=B;k[g+(y*44|0)+36>>2]=e;v=g+(y*44|0)+40|0;k[v>>2]=1;o=g+(y*44|0)+16|0;u=g+(y*44|0)+28|0;do if((n|0)<=(C|0)){if((n|0)!=(C|0)){o=C;f=1;na=821;break}if((D|0)<=(B|0)){f=1;na=822}else na=820}else na=820;while(0);if((na|0)==820){k[oa>>2]=k[q>>2];k[oa+4>>2]=k[q+4>>2];k[oa+8>>2]=k[q+8>>2];k[q>>2]=k[f>>2];k[q+4>>2]=k[f+4>>2];k[q+8>>2]=k[f+8>>2];k[f>>2]=k[oa>>2];k[f+4>>2]=k[oa+4>>2];k[f+8>>2]=k[oa+8>>2];k[v>>2]=-1;n=k[o>>2]|0;o=k[u>>2]|0;f=-1;na=821}if((na|0)==821?(na=0,(n|0)==(o|0)):0)na=822;if((na|0)==822){na=0;k[v>>2]=0-f}ma=g+((((x|0)/-44|0)+y|0)*44|0)|0;fe(ma|0,A|0,x|0)|0;k[a>>2]=ma;k[S>>2]=g+(z*44|0);k[K>>2]=w;if(!A)break;$d(A)}while(0);d=d+1|0;if((d|0)==21)break O;else{n=C;D=B}}}y=k[A>>2]|0;ma=k[wa>>2]|0;n=ma+(y<<4)|0;o=k[n>>2]|0;x=ma+(y<<4)+4|0;q=k[x>>2]|0;u=ma+(y<<4)+8|0;v=k[u>>2]|0;y=ma+(y<<4)+12|0;w=k[y>>2]|0;g=k[z>>2]|0;d=k[ma+(g<<4)>>2]|0;e=k[ma+(g<<4)+4>>2]|0;f=k[ma+(g<<4)+8>>2]|0;g=k[ma+(g<<4)+12>>2]|0;i[sa>>0]=1;do if((d|0)==(o|0)&(e|0)==(q|0)){ia=v-o|0;fa=w-q|0;ma=f-o|0;ja=g-q|0;ha=((ia|0)<0)<<31>>31;la=((ma|0)<0)<<31>>31;da=ne(ma|0,la|0,ia|0,ha|0)|0;ea=L;ga=((fa|0)<0)<<31>>31;ka=((ja|0)<0)<<31>>31;ca=ne(ja|0,ka|0,fa|0,ga|0)|0;ea=ge(ca|0,L|0,da|0,ea|0)|0;R=+(ea>>>0)+4294967296.0*+(L|0);ea=(ia|0)<0;da=be(0,0,ia|0,ha|0)|0;ia=ea?da:ia;ha=ea?L:ha;ea=(fa|0)<0;da=be(0,0,fa|0,ga|0)|0;fa=ea?da:fa;ga=ea?L:ga;ha=ne(ia|0,ha|0,ia|0,ha|0)|0;ia=L;ga=ne(fa|0,ga|0,fa|0,ga|0)|0;ia=ge(ga|0,L|0,ha|0,ia|0)|0;R=R/+X(+(+(ia>>>0)+4294967296.0*+(L|0)));ia=(ma|0)<0;ha=be(0,0,ma|0,la|0)|0;ma=ia?ha:ma;la=ia?L:la;ia=(ja|0)<0;ha=be(0,0,ja|0,ka|0)|0;ja=ia?ha:ja;ka=ia?L:ka;la=ne(ma|0,la|0,ma|0,la|0)|0;ma=L;ka=ne(ja|0,ka|0,ja|0,ka|0)|0;ma=ge(ka|0,L|0,la|0,ma|0)|0;if(!(R/+X(+(+(ma>>>0)+4294967296.0*+(L|0)))<=-.733459594406401))break;i[sa>>0]=0;break O}else{if((f|0)==(o|0)&(g|0)==(q|0)){ia=v-o|0;fa=w-q|0;ma=d-o|0;ja=e-q|0;ha=((ia|0)<0)<<31>>31;la=((ma|0)<0)<<31>>31;da=ne(ma|0,la|0,ia|0,ha|0)|0;ea=L;ga=((fa|0)<0)<<31>>31;ka=((ja|0)<0)<<31>>31;ca=ne(ja|0,ka|0,fa|0,ga|0)|0;ea=ge(ca|0,L|0,da|0,ea|0)|0;R=+(ea>>>0)+4294967296.0*+(L|0);ea=(ia|0)<0;da=be(0,0,ia|0,ha|0)|0;ia=ea?da:ia;ha=ea?L:ha;ea=(fa|0)<0;da=be(0,0,fa|0,ga|0)|0;fa=ea?da:fa;ga=ea?L:ga;ha=ne(ia|0,ha|0,ia|0,ha|0)|0;ia=L;ga=ne(fa|0,ga|0,fa|0,ga|0)|0;ia=ge(ga|0,L|0,ha|0,ia|0)|0;R=R/+X(+(+(ia>>>0)+4294967296.0*+(L|0)));ia=(ma|0)<0;ha=be(0,0,ma|0,la|0)|0;ma=ia?ha:ma;la=ia?L:la;ia=(ja|0)<0;ha=be(0,0,ja|0,ka|0)|0;ja=ia?ha:ja;ka=ia?L:ka;la=ne(ma|0,la|0,ma|0,la|0)|0;ma=L;ka=ne(ja|0,ka|0,ja|0,ka|0)|0;ma=ge(ka|0,L|0,la|0,ma|0)|0;if(!(R/+X(+(+(ma>>>0)+4294967296.0*+(L|0)))<=-.733459594406401))break;i[sa>>0]=0;break O}if((d|0)==(v|0)&(e|0)==(w|0)){ia=o-v|0;fa=q-w|0;ma=f-v|0;ja=g-w|0;ha=((ia|0)<0)<<31>>31;la=((ma|0)<0)<<31>>31;da=ne(ma|0,la|0,ia|0,ha|0)|0;ea=L;ga=((fa|0)<0)<<31>>31;ka=((ja|0)<0)<<31>>31;ca=ne(ja|0,ka|0,fa|0,ga|0)|0;ea=ge(ca|0,L|0,da|0,ea|0)|0;R=+(ea>>>0)+4294967296.0*+(L|0);ea=(ia|0)<0;da=be(0,0,ia|0,ha|0)|0;ia=ea?da:ia;ha=ea?L:ha;ea=(fa|0)<0;da=be(0,0,fa|0,ga|0)|0;fa=ea?da:fa;ga=ea?L:ga;ha=ne(ia|0,ha|0,ia|0,ha|0)|0;ia=L;ga=ne(fa|0,ga|0,fa|0,ga|0)|0;ia=ge(ga|0,L|0,ha|0,ia|0)|0;R=R/+X(+(+(ia>>>0)+4294967296.0*+(L|0)));ia=(ma|0)<0;ha=be(0,0,ma|0,la|0)|0;ma=ia?ha:ma;la=ia?L:la;ia=(ja|0)<0;ha=be(0,0,ja|0,ka|0)|0;ja=ia?ha:ja;ka=ia?L:ka;la=ne(ma|0,la|0,ma|0,la|0)|0;ma=L;ka=ne(ja|0,ka|0,ja|0,ka|0)|0;ma=ge(ka|0,L|0,la|0,ma|0)|0;if(!(R/+X(+(+(ma>>>0)+4294967296.0*+(L|0)))<=-.733459594406401))break;i[sa>>0]=0;break O}if(!((f|0)==(v|0)&(g|0)==(w|0)))break;ia=o-v|0;fa=q-w|0;ma=d-v|0;ja=e-w|0;ha=((ia|0)<0)<<31>>31;la=((ma|0)<0)<<31>>31;da=ne(ma|0,la|0,ia|0,ha|0)|0;ea=L;ga=((fa|0)<0)<<31>>31;ka=((ja|0)<0)<<31>>31;ca=ne(ja|0,ka|0,fa|0,ga|0)|0;ea=ge(ca|0,L|0,da|0,ea|0)|0;R=+(ea>>>0)+4294967296.0*+(L|0);ea=(ia|0)<0;da=be(0,0,ia|0,ha|0)|0;ia=ea?da:ia;ha=ea?L:ha;ea=(fa|0)<0;da=be(0,0,fa|0,ga|0)|0;fa=ea?da:fa;ga=ea?L:ga;ha=ne(ia|0,ha|0,ia|0,ha|0)|0;ia=L;ga=ne(fa|0,ga|0,fa|0,ga|0)|0;ia=ge(ga|0,L|0,ha|0,ia|0)|0;R=R/+X(+(+(ia>>>0)+4294967296.0*+(L|0)));ia=(ma|0)<0;ha=be(0,0,ma|0,la|0)|0;ma=ia?ha:ma;la=ia?L:la;ia=(ja|0)<0;ha=be(0,0,ja|0,ka|0)|0;ja=ia?ha:ja;ka=ia?L:ka;la=ne(ma|0,la|0,ma|0,la|0)|0;ma=L;ka=ne(ja|0,ka|0,ja|0,ka|0)|0;ma=ge(ka|0,L|0,la|0,ma|0)|0;if(!(R/+X(+(+(ma>>>0)+4294967296.0*+(L|0)))<=-.733459594406401))break;i[sa>>0]=0;break O}while(0);if(!(i[sa>>0]|0))break;d=k[A+8>>2]&31;if((d+-1|0)>>>0>=2){c=+(v-o|0);R=+(w-q|0);P=+X(+(c*c+R*R));c=c/P;P=R/P;R=+(o-C|0);N=+(q-B|0);h=R*c+N*P;R=R-c*h;h=N-P*h;N=+(o-J|0);O=+(q-I|0);s=N*c+O*P;c=N-c*s;s=O-P*s;s=+X(+(c*c+s*s));c=+$(+aa);h=+X(+(R*R+h*h))/c;p[t>>3]=h;d=k[t+4>>2]|0;e=de(k[t>>2]|0,d|0,52)|0;e=e&2047;do if(e>>>0<=1074){d=(d|0)<0;m=d?-h:h;if(e>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=d?-h:h}while(0);g=0-~~h|0;h=s/c;p[t>>3]=h;d=k[t+4>>2]|0;e=de(k[t>>2]|0,d|0,52)|0;e=e&2047;do if(e>>>0<=1074){d=(d|0)<0;m=d?-h:h;if(e>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=d?-h:h}while(0);f=0-~~h|0;do if((J|0)>=(C|0)){if((J|0)!=(C|0)){e=J;n=I;u=f;d=1;q=C;o=B;na=739;break}if((I|0)>=(B|0)){e=C;n=I;q=C;o=B;d=1;na=740}else{e=C;n=B;u=g;d=-1;q=J;o=I;g=f;na=739}}else{e=C;n=B;u=g;d=-1;q=J;o=I;g=f;na=739}while(0);if((na|0)==739){na=0;if((q|0)==(e|0)){f=u;na=740}else{A=e;z=n;f=u;x=g}}if((na|0)==740){na=0;A=e;z=n;d=0-d|0;x=g}e=k[S>>2]|0;g=k[K>>2]|0;if(e>>>0<g>>>0){i[e>>0]=0;i[e+1>>0]=0;i[e+2>>0]=0;k[e+4>>2]=0;k[e+8>>2]=0;k[e+12>>2]=0;k[e+16>>2]=q;k[e+20>>2]=o;k[e+24>>2]=x;k[e+28>>2]=A;k[e+32>>2]=z;k[e+36>>2]=f;k[e+40>>2]=d;k[S>>2]=e+44;break}y=k[a>>2]|0;n=y;u=e-n|0;v=(u|0)/44|0;w=v+1|0;if(w>>>0>97612893){na=744;break N}e=(g-n|0)/44|0;if(e>>>0<48806446){e=e<<1;e=e>>>0<w>>>0?w:e;if(!e){e=0;g=0}else na=747}else{e=97612893;na=747}if((na|0)==747){na=0;n=e*44|0;n=(n|0)==0?1:n;g=_d(n)|0;if(!g)do{g=k[35]|0;k[35]=g+0;if(!g){na=750;break N}Xa[g&0]();g=_d(n)|0}while((g|0)==0)}ma=g+(v*44|0)|0;i[ma>>0]=0;i[ma+1>>0]=0;i[ma+2>>0]=0;k[ma+4>>2]=0;k[ma+8>>2]=0;k[ma+12>>2]=0;k[ma+16>>2]=q;k[ma+20>>2]=o;k[ma+24>>2]=x;k[ma+28>>2]=A;k[ma+32>>2]=z;k[ma+36>>2]=f;k[ma+40>>2]=d;ma=g+((((u|0)/-44|0)+v|0)*44|0)|0;fe(ma|0,y|0,u|0)|0;k[a>>2]=ma;k[S>>2]=g+(w*44|0);k[K>>2]=g+(e*44|0);if(!y)break;$d(y);break}E=(d|0)==1;F=k[(E?n:u)>>2]|0;E=k[(E?x:y)>>2]|0;P=+(C|0);N=+(J-C|0);O=+(B|0);c=+(I-B|0);M=+$(+aa);A=0;B=0;C=0;D=0;while(1){s=+(C|0);h=P+N*s/20.0;p[t>>3]=h;d=k[t+4>>2]|0;e=de(k[t>>2]|0,d|0,52)|0;e=e&2047;do if(e>>>0<=1074){d=(d|0)<0;m=d?-h:h;if(e>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=d?-h:h}while(0);f=A;A=~~h;h=O+c*s/20.0;p[t>>3]=h;d=k[t+4>>2]|0;e=de(k[t>>2]|0,d|0,52)|0;e=e&2047;do if(e>>>0<=1074){d=(d|0)<0;m=d?-h:h;if(e>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=d?-h:h}while(0);z=B;B=~~h;R=+(A-F|0);h=+(B-E|0);h=+X(+(R*R+h*h))/M;p[t>>3]=h;d=k[t+4>>2]|0;e=de(k[t>>2]|0,d|0,52)|0;e=e&2047;do if(e>>>0<=1074){d=(d|0)<0;m=d?-h:h;if(e>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=d?-h:h}while(0);o=D;D=0-~~h|0;if(!C){C=1;continue}q=k[S>>2]|0;d=k[K>>2]|0;do if(q>>>0<d>>>0){i[q>>0]=0;i[q+1>>0]=0;i[q+2>>0]=0;k[q+4>>2]=0;k[q+8>>2]=0;k[q+12>>2]=0;e=q+16|0;g=q+16|0;k[g>>2]=f;k[q+20>>2]=z;k[q+24>>2]=o;d=q+28|0;n=q+28|0;k[n>>2]=A;k[q+32>>2]=B;k[q+36>>2]=D;o=q+40|0;k[o>>2]=1;do if((f|0)<=(A|0)){if((f|0)!=(A|0)){e=A;d=1;na=699;break}if((z|0)<=(B|0)){d=1;na=700}else na=698}else na=698;while(0);if((na|0)==698){k[oa>>2]=k[e>>2];k[oa+4>>2]=k[e+4>>2];k[oa+8>>2]=k[e+8>>2];k[e>>2]=k[d>>2];k[e+4>>2]=k[d+4>>2];k[e+8>>2]=k[d+8>>2];k[d>>2]=k[oa>>2];k[d+4>>2]=k[oa+4>>2];k[d+8>>2]=k[oa+8>>2];k[o>>2]=-1;f=k[g>>2]|0;e=k[n>>2]|0;d=-1;na=699}if((na|0)==699?(na=0,(f|0)==(e|0)):0)na=700;if((na|0)==700){na=0;k[o>>2]=0-d}k[S>>2]=q+44}else{y=k[a>>2]|0;e=y;v=q-e|0;w=(v|0)/44|0;x=w+1|0;if(x>>>0>97612893){na=703;break N}d=(d-e|0)/44|0;if(d>>>0<48806446){d=d<<1;d=d>>>0<x>>>0?x:d;if(!d){d=0;e=0}else na=706}else{d=97612893;na=706}if((na|0)==706){g=d*44|0;g=(g|0)==0?1:g;e=_d(g)|0;if(!e)do{e=k[35]|0;k[35]=e+0;if(!e){na=709;break N}Xa[e&0]();e=_d(g)|0}while((e|0)==0)}u=e+(d*44|0)|0;i[e+(w*44|0)>>0]=0;i[e+(w*44|0)+1>>0]=0;i[e+(w*44|0)+2>>0]=0;k[e+(w*44|0)+4>>2]=0;k[e+(w*44|0)+8>>2]=0;k[e+(w*44|0)+12>>2]=0;n=e+(w*44|0)+16|0;k[n>>2]=f;k[e+(w*44|0)+20>>2]=z;k[e+(w*44|0)+24>>2]=o;d=e+(w*44|0)+28|0;k[d>>2]=A;k[e+(w*44|0)+32>>2]=B;k[e+(w*44|0)+36>>2]=D;q=e+(w*44|0)+40|0;k[q>>2]=1;g=e+(w*44|0)+16|0;o=e+(w*44|0)+28|0;do if((f|0)<=(A|0)){if((f|0)!=(A|0)){g=A;d=1;na=715;break}if((z|0)<=(B|0)){d=1;na=716}else na=714}else na=714;while(0);if((na|0)==714){k[oa>>2]=k[n>>2];k[oa+4>>2]=k[n+4>>2];k[oa+8>>2]=k[n+8>>2];k[n>>2]=k[d>>2];k[n+4>>2]=k[d+4>>2];k[n+8>>2]=k[d+8>>2];k[d>>2]=k[oa>>2];k[d+4>>2]=k[oa+4>>2];k[d+8>>2]=k[oa+8>>2];k[q>>2]=-1;f=k[g>>2]|0;g=k[o>>2]|0;d=-1;na=715}if((na|0)==715?(na=0,(f|0)==(g|0)):0)na=716;if((na|0)==716){na=0;k[q>>2]=0-d}ma=e+((((v|0)/-44|0)+w|0)*44|0)|0;fe(ma|0,y|0,v|0)|0;k[a>>2]=ma;k[S>>2]=e+(x*44|0);k[K>>2]=u;if(!y)break;$d(y)}while(0);C=C+1|0;if((C|0)>=21)break}}while(0);Q=Q+44|0;if((Q|0)==(T|0)){na=827;break}}if((na|0)==703)xa(1340,1363,303,1438);else if((na|0)==709){Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}else if((na|0)==744)xa(1340,1363,303,1438);else if((na|0)==750){Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}else if((na|0)==809)xa(1340,1363,303,1438);else if((na|0)==815){Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}else if((na|0)==827){pa=k[S>>2]|0;qa=k[a>>2]|0;break}}else{pa=0;qa=0}while(0);k[ua>>2]=(pa-qa|0)/44|0;Nd(1113,ua);if(ta)$d(U);Bc(ra);d=k[Y>>2]|0;e=d;if(d){f=k[Z>>2]|0;if((f|0)!=(d|0))k[Z>>2]=f+(~(((f+-24-e|0)>>>0)/24|0)*24|0);$d(d)}d=k[V>>2]|0;e=d;if(d){f=k[W>>2]|0;if((f|0)!=(d|0))k[W>>2]=f+(~(((f+-24-e|0)>>>0)/24|0)*24|0);$d(d)}f=k[va>>2]|0;g=f;if(f){d=va+4|0;e=k[d>>2]|0;if((e|0)!=(f|0))k[d>>2]=e+(~(((e+-12-g|0)>>>0)/12|0)*12|0);$d(f)}d=k[wa>>2]|0;if(!d){r=Aa;return}e=k[za>>2]|0;if((e|0)!=(d|0))k[za>>2]=e+(~((e+-16-d|0)>>>4)<<4);$d(d);r=Aa;return}function nc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0;t=r;r=r+32|0;j=t+12|0;l=t;n=a+4|0;o=k[a>>2]|0;f=o;p=(k[n>>2]|0)-f|0;q=p>>5;s=q+1|0;if(s>>>0>134217727)xa(1340,1363,303,1438);m=a+8|0;f=(k[m>>2]|0)-f|0;if(f>>5>>>0<67108863){f=f>>4;f=f>>>0<s>>>0?s:f;if(!f){f=0;g=0}else h=5}else{f=134217727;h=5}if((h|0)==5){h=f<<5;h=(h|0)==0?1:h;g=_d(h)|0;a:do if(!g){while(1){g=k[35]|0;k[35]=g+0;if(!g)break;Xa[g&0]();g=_d(h)|0;if(g)break a}t=ya(4)|0;k[t>>2]=128;La(t|0,8,1)}while(0)}h=g+(q<<5)|0;k[j>>2]=k[b>>2];k[j+4>>2]=k[b+4>>2];k[j+8>>2]=k[b+8>>2];k[l>>2]=k[c>>2];k[l+4>>2]=k[c+4>>2];k[l+8>>2]=k[c+8>>2];d=i[d>>0]|0;e=k[e>>2]|0;k[h>>2]=k[j>>2];k[h+4>>2]=k[j+4>>2];k[h+8>>2]=k[j+8>>2];c=g+(q<<5)+12|0;k[c>>2]=k[l>>2];k[c+4>>2]=k[l+4>>2];k[c+8>>2]=k[l+8>>2];k[g+(q<<5)+24>>2]=e;i[g+(q<<5)+28>>0]=d;i[g+(q<<5)+29>>0]=0;fe(g|0,o|0,p|0)|0;k[a>>2]=g;k[n>>2]=g+(s<<5);k[m>>2]=g+(f<<5);if(!o){r=t;return}$d(o);r=t;return}function oc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0;w=r;r=r+64|0;v=w+24|0;u=w;a:while(1){n=b;p=b+-32|0;o=b+-64|0;q=b+-28|0;s=a;b:while(1){m=s;a=n-m|0;c=a>>5;switch(c|0){case 2:{h=4;break a}case 3:{h=8;break a}case 4:{h=26;break a}case 5:{h=27;break a}case 1:case 0:{h=136;break a}default:{}}if((a|0)<992){h=29;break a}e=(c|0)/2|0;f=s+(e<<5)|0;do if((a|0)>31968){a=(c|0)/4|0;c=f;l=s;a=wc(s,s+(a<<5)|0,f,s+(a+e<<5)|0,p)|0}else{c=k[f>>2]|0;a=k[s>>2]|0;if((c|0)>=(a|0))if((c|0)==(a|0))d=(k[s+(e<<5)+4>>2]|0)<(k[s+4>>2]|0);else d=0;else d=1;a=k[p>>2]|0;if((a|0)>=(c|0))if((a|0)==(c|0))a=(k[q>>2]|0)<(k[s+(e<<5)+4>>2]|0);else a=0;else a=1;if(!d){if(!a){c=f;l=s;a=0;break};k[v>>2]=k[f>>2];k[v+4>>2]=k[f+4>>2];k[v+8>>2]=k[f+8>>2];k[v+12>>2]=k[f+12>>2];k[v+16>>2]=k[f+16>>2];k[v+20>>2]=k[f+20>>2];k[v+24>>2]=k[f+24>>2];k[v+28>>2]=k[f+28>>2];k[f>>2]=k[p>>2];k[f+4>>2]=k[p+4>>2];k[f+8>>2]=k[p+8>>2];k[f+12>>2]=k[p+12>>2];k[f+16>>2]=k[p+16>>2];k[f+20>>2]=k[p+20>>2];k[f+24>>2]=k[p+24>>2];j[f+28>>1]=j[p+28>>1]|0;k[p>>2]=k[v>>2];k[p+4>>2]=k[v+4>>2];k[p+8>>2]=k[v+8>>2];k[p+12>>2]=k[v+12>>2];k[p+16>>2]=k[v+16>>2];k[p+20>>2]=k[v+20>>2];k[p+24>>2]=k[v+24>>2];j[p+28>>1]=j[v+28>>1]|0;a=k[f>>2]|0;c=k[s>>2]|0;if((a|0)>=(c|0)){if((a|0)!=(c|0)){c=f;l=s;a=1;break}if((k[s+(e<<5)+4>>2]|0)>=(k[s+4>>2]|0)){c=f;l=s;a=1;break}};k[v>>2]=k[s>>2];k[v+4>>2]=k[s+4>>2];k[v+8>>2]=k[s+8>>2];k[v+12>>2]=k[s+12>>2];k[v+16>>2]=k[s+16>>2];k[v+20>>2]=k[s+20>>2];k[v+24>>2]=k[s+24>>2];k[v+28>>2]=k[s+28>>2];k[s>>2]=k[f>>2];k[s+4>>2]=k[f+4>>2];k[s+8>>2]=k[f+8>>2];k[s+12>>2]=k[f+12>>2];k[s+16>>2]=k[f+16>>2];k[s+20>>2]=k[f+20>>2];k[s+24>>2]=k[f+24>>2];j[s+28>>1]=j[f+28>>1]|0;k[f>>2]=k[v>>2];k[f+4>>2]=k[v+4>>2];k[f+8>>2]=k[v+8>>2];k[f+12>>2]=k[v+12>>2];k[f+16>>2]=k[v+16>>2];k[f+20>>2]=k[v+20>>2];k[f+24>>2]=k[v+24>>2];j[f+28>>1]=j[v+28>>1]|0;c=f;l=s;a=2;break};k[v>>2]=k[s>>2];k[v+4>>2]=k[s+4>>2];k[v+8>>2]=k[s+8>>2];k[v+12>>2]=k[s+12>>2];k[v+16>>2]=k[s+16>>2];k[v+20>>2]=k[s+20>>2];k[v+24>>2]=k[s+24>>2];k[v+28>>2]=k[s+28>>2];if(a){k[s>>2]=k[p>>2];k[s+4>>2]=k[p+4>>2];k[s+8>>2]=k[p+8>>2];k[s+12>>2]=k[p+12>>2];k[s+16>>2]=k[p+16>>2];k[s+20>>2]=k[p+20>>2];k[s+24>>2]=k[p+24>>2];j[s+28>>1]=j[p+28>>1]|0;k[p>>2]=k[v>>2];k[p+4>>2]=k[v+4>>2];k[p+8>>2]=k[v+8>>2];k[p+12>>2]=k[v+12>>2];k[p+16>>2]=k[v+16>>2];k[p+20>>2]=k[v+20>>2];k[p+24>>2]=k[v+24>>2];j[p+28>>1]=j[v+28>>1]|0;c=f;l=s;a=1;break};k[s>>2]=k[f>>2];k[s+4>>2]=k[f+4>>2];k[s+8>>2]=k[f+8>>2];k[s+12>>2]=k[f+12>>2];k[s+16>>2]=k[f+16>>2];k[s+20>>2]=k[f+20>>2];k[s+24>>2]=k[f+24>>2];j[s+28>>1]=j[f+28>>1]|0;k[f>>2]=k[v>>2];k[f+4>>2]=k[v+4>>2];k[f+8>>2]=k[v+8>>2];k[f+12>>2]=k[v+12>>2];k[f+16>>2]=k[v+16>>2];k[f+20>>2]=k[v+20>>2];k[f+24>>2]=k[v+24>>2];j[f+28>>1]=j[v+28>>1]|0;a=k[p>>2]|0;c=k[f>>2]|0;if((a|0)>=(c|0)){if((a|0)!=(c|0)){c=f;l=s;a=1;break}if((k[q>>2]|0)>=(k[s+(e<<5)+4>>2]|0)){c=f;l=s;a=1;break}};k[v>>2]=k[f>>2];k[v+4>>2]=k[f+4>>2];k[v+8>>2]=k[f+8>>2];k[v+12>>2]=k[f+12>>2];k[v+16>>2]=k[f+16>>2];k[v+20>>2]=k[f+20>>2];k[v+24>>2]=k[f+24>>2];k[v+28>>2]=k[f+28>>2];k[f>>2]=k[p>>2];k[f+4>>2]=k[p+4>>2];k[f+8>>2]=k[p+8>>2];k[f+12>>2]=k[p+12>>2];k[f+16>>2]=k[p+16>>2];k[f+20>>2]=k[p+20>>2];k[f+24>>2]=k[p+24>>2];j[f+28>>1]=j[p+28>>1]|0;k[p>>2]=k[v>>2];k[p+4>>2]=k[v+4>>2];k[p+8>>2]=k[v+8>>2];k[p+12>>2]=k[v+12>>2];k[p+16>>2]=k[v+16>>2];k[p+20>>2]=k[v+20>>2];k[p+24>>2]=k[v+24>>2];j[p+28>>1]=j[v+28>>1]|0;c=f;l=s;a=2}while(0);i=k[l>>2]|0;h=k[c>>2]|0;c:do if((i|0)<(h|0))d=p;else{if((i|0)==(h|0)?(k[s+4>>2]|0)<(k[s+(e<<5)+4>>2]|0):0){d=p;break}d:do if((s|0)!=(o|0)){g=s+(e<<5)+4|0;d=o;e=p;while(1){c=k[d>>2]|0;if((c|0)<(h|0))break;if((c|0)==(h|0)?(k[e+-28>>2]|0)<(k[g>>2]|0):0)break;c=d+-32|0;if((s|0)==(c|0))break d;else{e=d;d=c}}k[v>>2]=k[s>>2];k[v+4>>2]=k[s+4>>2];k[v+8>>2]=k[s+8>>2];k[v+12>>2]=k[s+12>>2];k[v+16>>2]=k[s+16>>2];k[v+20>>2]=k[s+20>>2];k[v+24>>2]=k[s+24>>2];k[v+28>>2]=k[s+28>>2];k[s>>2]=k[d>>2];k[s+4>>2]=k[d+4>>2];k[s+8>>2]=k[d+8>>2];k[s+12>>2]=k[d+12>>2];k[s+16>>2]=k[d+16>>2];k[s+20>>2]=k[d+20>>2];k[s+24>>2]=k[d+24>>2];j[s+28>>1]=j[d+28>>1]|0;k[d>>2]=k[v>>2];k[d+4>>2]=k[v+4>>2];k[d+8>>2]=k[v+8>>2];k[d+12>>2]=k[v+12>>2];k[d+16>>2]=k[v+16>>2];k[d+20>>2]=k[v+20>>2];k[d+24>>2]=k[v+24>>2];j[d+28>>1]=j[v+28>>1]|0;a=a+1|0;break c}while(0);a=s+32|0;c=k[p>>2]|0;do if((i|0)>=(c|0)){if((i|0)==(c|0)?(k[s+4>>2]|0)<(k[q>>2]|0):0)break;if((a|0)==(p|0)){h=136;break a}e=s+4|0;d=s;while(1){c=k[d+32>>2]|0;if((i|0)<(c|0))break;if((i|0)==(c|0)?(k[e>>2]|0)<(k[d+36>>2]|0):0)break;c=a+32|0;if((c|0)==(p|0)){h=136;break a}else{d=a;a=c}}k[v>>2]=k[a>>2];k[v+4>>2]=k[a+4>>2];k[v+8>>2]=k[a+8>>2];k[v+12>>2]=k[a+12>>2];k[v+16>>2]=k[a+16>>2];k[v+20>>2]=k[a+20>>2];k[v+24>>2]=k[a+24>>2];k[v+28>>2]=k[a+28>>2];k[a>>2]=k[p>>2];k[a+4>>2]=k[p+4>>2];k[a+8>>2]=k[p+8>>2];k[a+12>>2]=k[p+12>>2];k[a+16>>2]=k[p+16>>2];k[a+20>>2]=k[p+20>>2];k[a+24>>2]=k[p+24>>2];j[a+28>>1]=j[p+28>>1]|0;k[p>>2]=k[v>>2];k[p+4>>2]=k[v+4>>2];k[p+8>>2]=k[v+8>>2];k[p+12>>2]=k[v+12>>2];k[p+16>>2]=k[v+16>>2];k[p+20>>2]=k[v+20>>2];k[p+24>>2]=k[v+24>>2];j[p+28>>1]=j[v+28>>1]|0;a=d+64|0}while(0);if((a|0)==(p|0)){h=136;break a}g=s+4|0;e=p;while(1){f=k[l>>2]|0;c=k[a>>2]|0;e:do if((f|0)>=(c|0))do{if((f|0)==(c|0)?(k[g>>2]|0)<(k[a+4>>2]|0):0)break e;a=a+32|0;c=k[a>>2]|0}while((f|0)>=(c|0));while(0);while(1){d=e;e=e+-32|0;c=k[e>>2]|0;if((f|0)<(c|0))continue;if((f|0)!=(c|0))break;if((k[g>>2]|0)>=(k[d+-28>>2]|0))break}if(a>>>0>=e>>>0){s=a;continue b};k[v>>2]=k[a>>2];k[v+4>>2]=k[a+4>>2];k[v+8>>2]=k[a+8>>2];k[v+12>>2]=k[a+12>>2];k[v+16>>2]=k[a+16>>2];k[v+20>>2]=k[a+20>>2];k[v+24>>2]=k[a+24>>2];k[v+28>>2]=k[a+28>>2];k[a>>2]=k[e>>2];k[a+4>>2]=k[e+4>>2];k[a+8>>2]=k[e+8>>2];k[a+12>>2]=k[e+12>>2];k[a+16>>2]=k[e+16>>2];k[a+20>>2]=k[e+20>>2];k[a+24>>2]=k[e+24>>2];j[a+28>>1]=j[e+28>>1]|0;k[e>>2]=k[v>>2];k[e+4>>2]=k[v+4>>2];k[e+8>>2]=k[v+8>>2];k[e+12>>2]=k[v+12>>2];k[e+16>>2]=k[v+16>>2];k[e+20>>2]=k[v+20>>2];k[e+24>>2]=k[v+24>>2];j[e+28>>1]=j[v+28>>1]|0;a=a+32|0}}while(0);c=s+32|0;f:do if(c>>>0<d>>>0){e=d;while(1){g=k[f>>2]|0;h=f+4|0;i=c;while(1){c=k[i>>2]|0;if((c|0)>=(g|0)){if((c|0)!=(g|0))break;if((k[i+4>>2]|0)>=(k[h>>2]|0))break}i=i+32|0}d=e+-32|0;c=k[d>>2]|0;g:do if((c|0)>=(g|0))while(1){if((c|0)==(g|0)?(k[e+-28>>2]|0)<(k[h>>2]|0):0)break g;e=d+-32|0;c=k[e>>2]|0;if((c|0)<(g|0)){d=e;break}else{l=d;d=e;e=l}}while(0);if(i>>>0>d>>>0){c=i;break f};k[v>>2]=k[i>>2];k[v+4>>2]=k[i+4>>2];k[v+8>>2]=k[i+8>>2];k[v+12>>2]=k[i+12>>2];k[v+16>>2]=k[i+16>>2];k[v+20>>2]=k[i+20>>2];k[v+24>>2]=k[i+24>>2];k[v+28>>2]=k[i+28>>2];k[i>>2]=k[d>>2];k[i+4>>2]=k[d+4>>2];k[i+8>>2]=k[d+8>>2];k[i+12>>2]=k[d+12>>2];k[i+16>>2]=k[d+16>>2];k[i+20>>2]=k[d+20>>2];k[i+24>>2]=k[d+24>>2];j[i+28>>1]=j[d+28>>1]|0;k[d>>2]=k[v>>2];k[d+4>>2]=k[v+4>>2];k[d+8>>2]=k[v+8>>2];k[d+12>>2]=k[v+12>>2];k[d+16>>2]=k[v+16>>2];k[d+20>>2]=k[v+20>>2];k[d+24>>2]=k[v+24>>2];j[d+28>>1]=j[v+28>>1]|0;c=i+32|0;e=d;f=(f|0)==(i|0)?d:f;a=a+1|0}}while(0);do if((c|0)!=(f|0)){d=k[f>>2]|0;e=k[c>>2]|0;if((d|0)>=(e|0)){if((d|0)!=(e|0))break;if((k[f+4>>2]|0)>=(k[c+4>>2]|0))break};k[v>>2]=k[c>>2];k[v+4>>2]=k[c+4>>2];k[v+8>>2]=k[c+8>>2];k[v+12>>2]=k[c+12>>2];k[v+16>>2]=k[c+16>>2];k[v+20>>2]=k[c+20>>2];k[v+24>>2]=k[c+24>>2];k[v+28>>2]=k[c+28>>2];k[c>>2]=k[f>>2];k[c+4>>2]=k[f+4>>2];k[c+8>>2]=k[f+8>>2];k[c+12>>2]=k[f+12>>2];k[c+16>>2]=k[f+16>>2];k[c+20>>2]=k[f+20>>2];k[c+24>>2]=k[f+24>>2];j[c+28>>1]=j[f+28>>1]|0;k[f>>2]=k[v>>2];k[f+4>>2]=k[v+4>>2];k[f+8>>2]=k[v+8>>2];k[f+12>>2]=k[v+12>>2];k[f+16>>2]=k[v+16>>2];k[f+20>>2]=k[v+20>>2];k[f+24>>2]=k[v+24>>2];j[f+28>>1]=j[v+28>>1]|0;a=a+1|0}while(0);if(!a){d=xc(s,c)|0;a=c+32|0;if(xc(a,b)|0){h=131;break}if(d){s=a;continue}}l=c;if((l-m|0)>=(n-l|0)){h=135;break}oc(s,c);s=c+32|0}if((h|0)==131)if(d){h=136;break}else{a=s;b=c;continue}else if((h|0)==135){oc(c+32|0,b);a=s;b=c;continue}}if((h|0)==4){a=k[p>>2]|0;b=k[s>>2]|0;if((a|0)>=(b|0)){if((a|0)!=(b|0)){r=w;return}if((k[q>>2]|0)>=(k[s+4>>2]|0)){r=w;return}};k[v>>2]=k[s>>2];k[v+4>>2]=k[s+4>>2];k[v+8>>2]=k[s+8>>2];k[v+12>>2]=k[s+12>>2];k[v+16>>2]=k[s+16>>2];k[v+20>>2]=k[s+20>>2];k[v+24>>2]=k[s+24>>2];k[v+28>>2]=k[s+28>>2];k[s>>2]=k[p>>2];k[s+4>>2]=k[p+4>>2];k[s+8>>2]=k[p+8>>2];k[s+12>>2]=k[p+12>>2];k[s+16>>2]=k[p+16>>2];k[s+20>>2]=k[p+20>>2];k[s+24>>2]=k[p+24>>2];j[s+28>>1]=j[p+28>>1]|0;k[p>>2]=k[v>>2];k[p+4>>2]=k[v+4>>2];k[p+8>>2]=k[v+8>>2];k[p+12>>2]=k[v+12>>2];k[p+16>>2]=k[v+16>>2];k[p+20>>2]=k[v+20>>2];k[p+24>>2]=k[v+24>>2];j[p+28>>1]=j[v+28>>1]|0;r=w;return}else if((h|0)==8){d=s+32|0;b=k[d>>2]|0;a=k[s>>2]|0;if((b|0)>=(a|0))if((b|0)==(a|0))c=(k[s+36>>2]|0)<(k[s+4>>2]|0);else c=0;else c=1;a=k[p>>2]|0;if((a|0)>=(b|0))if((a|0)==(b|0))a=(k[q>>2]|0)<(k[s+36>>2]|0);else a=0;else a=1;if(!c){if(!a){r=w;return};k[v>>2]=k[d>>2];k[v+4>>2]=k[d+4>>2];k[v+8>>2]=k[d+8>>2];k[v+12>>2]=k[d+12>>2];k[v+16>>2]=k[d+16>>2];k[v+20>>2]=k[d+20>>2];k[v+24>>2]=k[d+24>>2];k[v+28>>2]=k[d+28>>2];k[d>>2]=k[p>>2];k[d+4>>2]=k[p+4>>2];k[d+8>>2]=k[p+8>>2];k[d+12>>2]=k[p+12>>2];k[d+16>>2]=k[p+16>>2];k[d+20>>2]=k[p+20>>2];k[d+24>>2]=k[p+24>>2];j[d+28>>1]=j[p+28>>1]|0;k[p>>2]=k[v>>2];k[p+4>>2]=k[v+4>>2];k[p+8>>2]=k[v+8>>2];k[p+12>>2]=k[v+12>>2];k[p+16>>2]=k[v+16>>2];k[p+20>>2]=k[v+20>>2];k[p+24>>2]=k[v+24>>2];j[p+28>>1]=j[v+28>>1]|0;a=k[d>>2]|0;b=k[s>>2]|0;if((a|0)>=(b|0)){if((a|0)!=(b|0)){r=w;return}if((k[s+36>>2]|0)>=(k[s+4>>2]|0)){r=w;return}};k[v>>2]=k[s>>2];k[v+4>>2]=k[s+4>>2];k[v+8>>2]=k[s+8>>2];k[v+12>>2]=k[s+12>>2];k[v+16>>2]=k[s+16>>2];k[v+20>>2]=k[s+20>>2];k[v+24>>2]=k[s+24>>2];k[v+28>>2]=k[s+28>>2];k[s>>2]=k[d>>2];k[s+4>>2]=k[d+4>>2];k[s+8>>2]=k[d+8>>2];k[s+12>>2]=k[d+12>>2];k[s+16>>2]=k[d+16>>2];k[s+20>>2]=k[d+20>>2];k[s+24>>2]=k[d+24>>2];j[s+28>>1]=j[d+28>>1]|0;k[d>>2]=k[v>>2];k[d+4>>2]=k[v+4>>2];k[d+8>>2]=k[v+8>>2];k[d+12>>2]=k[v+12>>2];k[d+16>>2]=k[v+16>>2];k[d+20>>2]=k[v+20>>2];k[d+24>>2]=k[v+24>>2];j[d+28>>1]=j[v+28>>1]|0;r=w;return};k[v>>2]=k[s>>2];k[v+4>>2]=k[s+4>>2];k[v+8>>2]=k[s+8>>2];k[v+12>>2]=k[s+12>>2];k[v+16>>2]=k[s+16>>2];k[v+20>>2]=k[s+20>>2];k[v+24>>2]=k[s+24>>2];k[v+28>>2]=k[s+28>>2];if(a){k[s>>2]=k[p>>2];k[s+4>>2]=k[p+4>>2];k[s+8>>2]=k[p+8>>2];k[s+12>>2]=k[p+12>>2];k[s+16>>2]=k[p+16>>2];k[s+20>>2]=k[p+20>>2];k[s+24>>2]=k[p+24>>2];j[s+28>>1]=j[p+28>>1]|0;k[p>>2]=k[v>>2];k[p+4>>2]=k[v+4>>2];k[p+8>>2]=k[v+8>>2];k[p+12>>2]=k[v+12>>2];k[p+16>>2]=k[v+16>>2];k[p+20>>2]=k[v+20>>2];k[p+24>>2]=k[v+24>>2];j[p+28>>1]=j[v+28>>1]|0;r=w;return};k[s>>2]=k[d>>2];k[s+4>>2]=k[d+4>>2];k[s+8>>2]=k[d+8>>2];k[s+12>>2]=k[d+12>>2];k[s+16>>2]=k[d+16>>2];k[s+20>>2]=k[d+20>>2];k[s+24>>2]=k[d+24>>2];j[s+28>>1]=j[d+28>>1]|0;k[d>>2]=k[v>>2];k[d+4>>2]=k[v+4>>2];k[d+8>>2]=k[v+8>>2];k[d+12>>2]=k[v+12>>2];k[d+16>>2]=k[v+16>>2];k[d+20>>2]=k[v+20>>2];k[d+24>>2]=k[v+24>>2];j[d+28>>1]=j[v+28>>1]|0;a=k[p>>2]|0;b=k[d>>2]|0;if((a|0)>=(b|0)){if((a|0)!=(b|0)){r=w;return}if((k[q>>2]|0)>=(k[s+36>>2]|0)){r=w;return}};k[v>>2]=k[d>>2];k[v+4>>2]=k[d+4>>2];k[v+8>>2]=k[d+8>>2];k[v+12>>2]=k[d+12>>2];k[v+16>>2]=k[d+16>>2];k[v+20>>2]=k[d+20>>2];k[v+24>>2]=k[d+24>>2];k[v+28>>2]=k[d+28>>2];k[d>>2]=k[p>>2];k[d+4>>2]=k[p+4>>2];k[d+8>>2]=k[p+8>>2];k[d+12>>2]=k[p+12>>2];k[d+16>>2]=k[p+16>>2];k[d+20>>2]=k[p+20>>2];k[d+24>>2]=k[p+24>>2];j[d+28>>1]=j[p+28>>1]|0;k[p>>2]=k[v>>2];k[p+4>>2]=k[v+4>>2];k[p+8>>2]=k[v+8>>2];k[p+12>>2]=k[v+12>>2];k[p+16>>2]=k[v+16>>2];k[p+20>>2]=k[v+20>>2];k[p+24>>2]=k[v+24>>2];j[p+28>>1]=j[v+28>>1]|0;r=w;return}else if((h|0)==26){vc(s,s+32|0,s+64|0,p)|0;r=w;return}else if((h|0)==27){wc(s,s+32|0,s+64|0,s+96|0,p)|0;r=w;return}else if((h|0)==29){c=s+64|0;g=s+32|0;a=k[g>>2]|0;e=k[s>>2]|0;if((a|0)>=(e|0))if((a|0)==(e|0))d=(k[s+36>>2]|0)<(k[s+4>>2]|0);else d=0;else d=1;f=k[c>>2]|0;if((f|0)>=(a|0))if((f|0)==(a|0))a=(k[s+68>>2]|0)<(k[s+36>>2]|0);else a=0;else a=1;do if(!d){if(a){k[v>>2]=k[g>>2];k[v+4>>2]=k[g+4>>2];k[v+8>>2]=k[g+8>>2];k[v+12>>2]=k[g+12>>2];k[v+16>>2]=k[g+16>>2];k[v+20>>2]=k[g+20>>2];k[v+24>>2]=k[g+24>>2];k[v+28>>2]=k[g+28>>2];k[g>>2]=k[c>>2];k[g+4>>2]=k[c+4>>2];k[g+8>>2]=k[c+8>>2];k[g+12>>2]=k[c+12>>2];k[g+16>>2]=k[c+16>>2];k[g+20>>2]=k[c+20>>2];k[g+24>>2]=k[c+24>>2];j[g+28>>1]=j[c+28>>1]|0;k[c>>2]=k[v>>2];k[c+4>>2]=k[v+4>>2];k[c+8>>2]=k[v+8>>2];k[c+12>>2]=k[v+12>>2];k[c+16>>2]=k[v+16>>2];k[c+20>>2]=k[v+20>>2];k[c+24>>2]=k[v+24>>2];j[c+28>>1]=j[v+28>>1]|0;a=k[g>>2]|0;if((a|0)>=(e|0)){if((a|0)!=(e|0))break;if((k[s+36>>2]|0)>=(k[s+4>>2]|0))break};k[v>>2]=k[s>>2];k[v+4>>2]=k[s+4>>2];k[v+8>>2]=k[s+8>>2];k[v+12>>2]=k[s+12>>2];k[v+16>>2]=k[s+16>>2];k[v+20>>2]=k[s+20>>2];k[v+24>>2]=k[s+24>>2];k[v+28>>2]=k[s+28>>2];k[s>>2]=k[g>>2];k[s+4>>2]=k[g+4>>2];k[s+8>>2]=k[g+8>>2];k[s+12>>2]=k[g+12>>2];k[s+16>>2]=k[g+16>>2];k[s+20>>2]=k[g+20>>2];k[s+24>>2]=k[g+24>>2];j[s+28>>1]=j[g+28>>1]|0;k[g>>2]=k[v>>2];k[g+4>>2]=k[v+4>>2];k[g+8>>2]=k[v+8>>2];k[g+12>>2]=k[v+12>>2];k[g+16>>2]=k[v+16>>2];k[g+20>>2]=k[v+20>>2];k[g+24>>2]=k[v+24>>2];j[g+28>>1]=j[v+28>>1]|0}}else{k[v>>2]=k[s>>2];k[v+4>>2]=k[s+4>>2];k[v+8>>2]=k[s+8>>2];k[v+12>>2]=k[s+12>>2];k[v+16>>2]=k[s+16>>2];k[v+20>>2]=k[s+20>>2];k[v+24>>2]=k[s+24>>2];k[v+28>>2]=k[s+28>>2];if(a){k[s>>2]=k[c>>2];k[s+4>>2]=k[c+4>>2];k[s+8>>2]=k[c+8>>2];k[s+12>>2]=k[c+12>>2];k[s+16>>2]=k[c+16>>2];k[s+20>>2]=k[c+20>>2];k[s+24>>2]=k[c+24>>2];j[s+28>>1]=j[c+28>>1]|0;k[c>>2]=k[v>>2];k[c+4>>2]=k[v+4>>2];k[c+8>>2]=k[v+8>>2];k[c+12>>2]=k[v+12>>2];k[c+16>>2]=k[v+16>>2];k[c+20>>2]=k[v+20>>2];k[c+24>>2]=k[v+24>>2];j[c+28>>1]=j[v+28>>1]|0;break};k[s>>2]=k[g>>2];k[s+4>>2]=k[g+4>>2];k[s+8>>2]=k[g+8>>2];k[s+12>>2]=k[g+12>>2];k[s+16>>2]=k[g+16>>2];k[s+20>>2]=k[g+20>>2];k[s+24>>2]=k[g+24>>2];j[s+28>>1]=j[g+28>>1]|0;k[g>>2]=k[v>>2];k[g+4>>2]=k[v+4>>2];k[g+8>>2]=k[v+8>>2];k[g+12>>2]=k[v+12>>2];k[g+16>>2]=k[v+16>>2];k[g+20>>2]=k[v+20>>2];k[g+24>>2]=k[v+24>>2];j[g+28>>1]=j[v+28>>1]|0;a=k[g>>2]|0;if((f|0)>=(a|0)){if((f|0)!=(a|0))break;if((k[s+68>>2]|0)>=(k[s+36>>2]|0))break};k[v>>2]=k[g>>2];k[v+4>>2]=k[g+4>>2];k[v+8>>2]=k[g+8>>2];k[v+12>>2]=k[g+12>>2];k[v+16>>2]=k[g+16>>2];k[v+20>>2]=k[g+20>>2];k[v+24>>2]=k[g+24>>2];k[v+28>>2]=k[g+28>>2];k[g>>2]=k[c>>2];k[g+4>>2]=k[c+4>>2];k[g+8>>2]=k[c+8>>2];k[g+12>>2]=k[c+12>>2];k[g+16>>2]=k[c+16>>2];k[g+20>>2]=k[c+20>>2];k[g+24>>2]=k[c+24>>2];j[g+28>>1]=j[c+28>>1]|0;k[c>>2]=k[v>>2];k[c+4>>2]=k[v+4>>2];k[c+8>>2]=k[v+8>>2];k[c+12>>2]=k[v+12>>2];k[c+16>>2]=k[v+16>>2];k[c+20>>2]=k[v+20>>2];k[c+24>>2]=k[v+24>>2];j[c+28>>1]=j[v+28>>1]|0}while(0);a=s+96|0;if((a|0)!=(b|0)){g=a;while(1){f=k[g>>2]|0;a=k[c>>2]|0;if((f|0)>=(a|0)){if((f|0)==(a|0)?(t=k[g+4>>2]|0,(t|0)<(k[c+4>>2]|0)):0){e=t;h=52}}else{e=k[g+4>>2]|0;h=52}if((h|0)==52){h=0;v=g+8|0;k[u>>2]=k[v>>2];k[u+4>>2]=k[v+4>>2];k[u+8>>2]=k[v+8>>2];k[u+12>>2]=k[v+12>>2];k[u+16>>2]=k[v+16>>2];k[u+20>>2]=k[v+20>>2];k[g>>2]=k[c>>2];k[g+4>>2]=k[c+4>>2];k[g+8>>2]=k[c+8>>2];k[g+12>>2]=k[c+12>>2];k[g+16>>2]=k[c+16>>2];k[g+20>>2]=k[c+20>>2];k[g+24>>2]=k[c+24>>2];j[g+28>>1]=j[c+28>>1]|0;h:do if((c|0)==(s|0))a=s;else while(1){a=c;c=c+-32|0;d=k[c>>2]|0;if((f|0)>=(d|0)){if((f|0)!=(d|0))break h;if((e|0)>=(k[a+-28>>2]|0))break h};k[a>>2]=k[c>>2];k[a+4>>2]=k[c+4>>2];k[a+8>>2]=k[c+8>>2];k[a+12>>2]=k[c+12>>2];k[a+16>>2]=k[c+16>>2];k[a+20>>2]=k[c+20>>2];k[a+24>>2]=k[c+24>>2];j[a+28>>1]=j[c+28>>1]|0;if((c|0)==(s|0)){a=s;break}}while(0);k[a>>2]=f;k[a+4>>2]=e;v=a+8|0;k[v>>2]=k[u>>2];k[v+4>>2]=k[u+4>>2];k[v+8>>2]=k[u+8>>2];k[v+12>>2]=k[u+12>>2];k[v+16>>2]=k[u+16>>2];j[v+20>>1]=j[u+20>>1]|0}a=g+32|0;if((a|0)==(b|0))break;else{c=g;g=a}}}r=w;return}else if((h|0)==136){r=w;return}}function pc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;s=b+16|0;e=k[s>>2]|0;f=k[e>>2]|0;g=k[e+4>>2]|0;do if((f|0)!=(g|0)){if((k[c+16>>2]|0)==(k[g+-16>>2]|0)?(k[c+20>>2]|0)==(k[g+-12>>2]|0):0){f=g;break}rc(+p[b>>3],k[b+20>>2]|0,e);e=k[s>>2]|0;f=k[e>>2]|0;g=e+4|0;h=k[g>>2]|0;if((h|0)!=(f|0)){k[g>>2]=h+(~(((h+-44-f|0)>>>0)/44|0)*44|0);f=k[s>>2]|0;e=f;f=k[f+4>>2]|0}}while(0);o=e+4|0;q=e+8|0;g=k[q>>2]|0;if(f>>>0>=g>>>0){r=k[e>>2]|0;h=r;l=f-h|0;m=(l|0)/44|0;n=m+1|0;if(n>>>0>97612893)xa(1340,1363,303,1438);f=(g-h|0)/44|0;if(f>>>0<48806446){f=f<<1;f=f>>>0<n>>>0?n:f;if(!f){f=0;g=0}else w=12}else{f=97612893;w=12}if((w|0)==12){h=f*44|0;h=(h|0)==0?1:h;g=_d(h)|0;a:do if(!g){while(1){g=k[35]|0;k[35]=g+0;if(!g)break;Xa[g&0]();g=_d(h)|0;if(g)break a}b=ya(4)|0;k[b>>2]=128;La(b|0,8,1)}while(0)}h=g+(f*44|0)|0;f=g+(m*44|0)|0;i=c;j=f+44|0;do{k[f>>2]=k[i>>2];f=f+4|0;i=i+4|0}while((f|0)<(j|0));m=g+((((l|0)/-44|0)+m|0)*44|0)|0;fe(m|0,r|0,l|0)|0;k[e>>2]=m;k[o>>2]=g+(n*44|0);k[q>>2]=h;if(r)$d(r)}else{i=c;j=f+44|0;do{k[f>>2]=k[i>>2];f=f+4|0;i=i+4|0}while((f|0)<(j|0));k[o>>2]=(k[o>>2]|0)+44}if(!(!d?(k[c+36>>2]|0)!=0:0))w=21;if((w|0)==21?(rc(+p[b>>3],k[b+20>>2]|0,k[s>>2]|0),u=k[s>>2]|0,t=k[u>>2]|0,u=u+4|0,v=k[u>>2]|0,(v|0)!=(t|0)):0)k[u>>2]=v+(~(((v+-44-t|0)>>>0)/44|0)*44|0);w=k[s>>2]|0;e=k[w+4>>2]|0;if((k[w>>2]|0)==(e|0)){b=(k[(k[(k[b+20>>2]|0)+4>>2]|0)+-8>>2]|0)+-12|0;k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];return}else{b=e+-16|0;k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];return}}function qc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0.0,h=0,j=0,l=0,m=0,n=0,o=0.0,q=0;n=b;if(i[b+29>>0]|0){a=1;return a|0}c=k[k[a>>2]>>2]|0;h=k[b+8>>2]|0;e=(h|0)==0;d=(k[c+8>>2]|0)==0;m=k[b>>2]|0;if((!(e^d)?(m|0)==(k[c>>2]|0):0)?(f=k[b+4>>2]|0,(f|0)==(k[c+4>>2]|0)):0){c=k[b+20>>2]|0;l=d^(c|0)==0?2:3}else{l=e&1;c=k[b+20>>2]|0;f=k[b+4>>2]|0}e=k[a+4>>2]|0;d=k[e+8>>2]|0;j=d-h|0;j=(j|0)>-1?j:0-j|0;c=d-c|0;c=(c|0)>-1?c:0-c|0;d=k[e>>2]|0;e=k[e+4>>2]|0;o=+(d-m|0);g=+(e-f|0);g=o*o+g*g;b=a+8|0;h=k[k[b>>2]>>2]|0;if((h|0)>0?(q=m-d|0,+(((q|0)>-1?q:0-q|0)|0)>+p[k[a+12>>2]>>3]):0){q=0;return q|0}do if((l|0)<=(h|0)){if((l|0)!=(h|0)){q=1;return q|0}if((m|0)==(d|0)&(e|0)==(f|0)){if((j|0)<(k[k[a+16>>2]>>2]|0))break;if((j|0)!=(k[k[a+16>>2]>>2]|0)){q=1;return q|0}if((c|0)<(k[k[a+20>>2]>>2]|0))break;if((c|0)!=(k[k[a+20>>2]>>2]|0)){q=1;return q|0}}if(!(g<+p[k[a+12>>2]>>3])){q=1;return q|0}}while(0);k[k[a+24>>2]>>2]=n;k[k[a+16>>2]>>2]=j;k[k[a+20>>2]>>2]=c;p[k[a+12>>2]>>3]=g;k[k[b>>2]>>2]=l;q=1;return q|0}function rc(a,b,c){a=+a;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0.0,m=0,n=0,o=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0;V=r;r=r+160|0;U=V+144|0;g=V+24|0;h=V+16|0;L=V+100|0;M=V+56|0;N=V+8|0;O=V;Q=V+44|0;R=V+32|0;d=k[c>>2]|0;P=c+4|0;f=k[P>>2]|0;if((d|0)==(f|0))l=0.0;else{e=0;do{K=k[d+36>>2]|0;T=k[d+24>>2]|0;T=(K|0)<(T|0)?K:T;e=(T|0)<(e|0)?T:e;d=d+44|0}while((d|0)!=(f|0));l=+(e|0)}k[U>>2]=0;T=U+4|0;k[T>>2]=0;k[U+8>>2]=0;p[g>>3]=0.0;l=-a-l;p[h>>3]=l;j=L+1|0;m=L+2|0;n=L+4|0;o=L+8|0;q=L+12|0;s=L+16|0;t=L+20|0;u=L+24|0;v=L+28|0;w=L+32|0;x=L+36|0;y=L+40|0;z=M+1|0;A=M+2|0;B=M+4|0;C=M+8|0;D=M+12|0;E=M+16|0;F=M+20|0;G=M+24|0;H=M+28|0;I=M+32|0;J=M+36|0;K=M+40|0;d=l>0.0?h:g;g=0;while(1){f=~~+p[d>>3];a:do if(!g){d=k[c>>2]|0;e=k[P>>2]|0;if((d|0)!=(e|0))do{_=k[d+16>>2]|0;Z=k[d+20>>2]|0;Y=(k[d+24>>2]|0)+f|0;X=k[d+28>>2]|0;W=k[d+32>>2]|0;h=(k[d+36>>2]|0)+f|0;i[M>>0]=0;i[z>>0]=0;i[A>>0]=0;k[B>>2]=0;k[C>>2]=0;k[D>>2]=0;k[E>>2]=_;k[F>>2]=Z;k[G>>2]=Y;k[H>>2]=X;k[I>>2]=W;k[J>>2]=h;k[K>>2]=1;sc(U,M);d=d+44|0}while((d|0)!=(e|0))}else{d=k[P>>2]|0;while(1){if((d|0)==(k[c>>2]|0))break a;h=k[d+-16>>2]|0;W=k[d+-12>>2]|0;X=(k[d+-8>>2]|0)+f|0;Y=k[d+-28>>2]|0;Z=k[d+-24>>2]|0;_=(k[d+-20>>2]|0)+f|0;i[L>>0]=0;i[j>>0]=0;i[m>>0]=0;k[n>>2]=0;k[o>>2]=0;k[q>>2]=0;k[s>>2]=h;k[t>>2]=W;k[u>>2]=X;k[v>>2]=Y;k[w>>2]=Z;k[x>>2]=_;k[y>>2]=1;sc(U,L);d=d+-44|0}}while(0);if(!f)break;p[N>>3]=0.0;l=+(f|0)-a;p[O>>3]=l;d=l>0.0?O:N;g=g^1}d=k[U>>2]|0;if(k[d+8>>2]|0){_=k[d+4>>2]|0;k[Q>>2]=k[d>>2];k[Q+4>>2]=_;k[Q+8>>2]=0;tc(U,d,Q)}d=k[T>>2]|0;if(k[d+-4>>2]|0){_=k[d+-8>>2]|0;k[R>>2]=k[d+-12>>2];k[R+4>>2]=_;k[R+8>>2]=0;tc(U,d,R)}o=b+4|0;d=k[o>>2]|0;q=b+8|0;e=k[q>>2]|0;if(d>>>0<e>>>0){k[d>>2]=k[U>>2];k[d+4>>2]=k[T>>2];_=U+8|0;k[d+8>>2]=k[_>>2];k[_>>2]=0;k[T>>2]=0;k[U>>2]=0;k[o>>2]=(k[o>>2]|0)+12;r=V;return}f=k[b>>2]|0;g=(d-f|0)/12|0;j=g+1|0;if(j>>>0>357913941)xa(1340,1363,303,1438);d=(e-f|0)/12|0;if(d>>>0<178956970){d=d<<1;d=d>>>0<j>>>0?j:d;if(!d){d=0;e=0}else S=23}else{d=357913941;S=23}if((S|0)==23){f=d*12|0;f=(f|0)==0?1:f;e=_d(f)|0;b:do if(!e){while(1){e=k[35]|0;k[35]=e+0;if(!e)break;Xa[e&0]();e=_d(f)|0;if(e)break b}_=ya(4)|0;k[_>>2]=128;La(_|0,8,1)}while(0)}h=e+(g*12|0)|0;f=h;n=e+(d*12|0)|0;k[e+(g*12|0)+8>>2]=0;k[h>>2]=k[U>>2];k[e+(g*12|0)+4>>2]=k[T>>2];d=U+8|0;k[e+(g*12|0)+8>>2]=k[d>>2];k[d>>2]=0;k[T>>2]=0;k[U>>2]=0;j=e+(j*12|0)|0;g=k[b>>2]|0;d=k[o>>2]|0;if((d|0)==(g|0)){d=g;g=b;h=o;e=f;m=d}else{e=h;do{_=e+-12|0;Z=d;d=d+-12|0;k[_>>2]=0;Y=e+-8|0;k[Y>>2]=0;k[e+-4>>2]=0;k[_>>2]=k[d>>2];_=Z+-8|0;k[Y>>2]=k[_>>2];Z=Z+-4|0;k[e+-4>>2]=k[Z>>2];k[Z>>2]=0;k[_>>2]=0;k[d>>2]=0;e=f+-12|0;f=e}while((d|0)!=(g|0));g=b;h=o;e=f;m=k[b>>2]|0;d=k[o>>2]|0}k[g>>2]=e;k[h>>2]=j;k[q>>2]=n;j=m;if((d|0)!=(j|0))do{e=d;d=d+-12|0;g=k[d>>2]|0;h=g;if(g){e=e+-8|0;f=k[e>>2]|0;if((f|0)!=(g|0))k[e>>2]=f+(~(((f+-12-h|0)>>>0)/12|0)*12|0);$d(g)}}while((d|0)!=(j|0));if(m)$d(m);d=k[U>>2]|0;if(!d){r=V;return}e=k[T>>2]|0;if((e|0)!=(d|0))k[T>>2]=e+(~(((e+-12-d|0)>>>0)/12|0)*12|0);$d(d);r=V;return}function sc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;e=a+4|0;d=k[e>>2]|0;if(!((((k[a>>2]|0)!=(d|0)?(k[d+-12>>2]|0)==(k[b+16>>2]|0):0)?(k[d+-8>>2]|0)==(k[b+20>>2]|0):0)?(k[d+-4>>2]|0)==(k[b+24>>2]|0):0))c=5;do if((c|0)==5){c=b+16|0;if((d|0)==(k[a+8>>2]|0)){uc(a,c);d=k[e>>2]|0;break}else{k[d>>2]=k[c>>2];k[d+4>>2]=k[c+4>>2];k[d+8>>2]=k[c+8>>2];d=(k[e>>2]|0)+12|0;k[e>>2]=d;break}}while(0);if((((k[a>>2]|0)!=(d|0)?(k[d+-12>>2]|0)==(k[b+28>>2]|0):0)?(k[d+-8>>2]|0)==(k[b+32>>2]|0):0)?(k[d+-4>>2]|0)==(k[b+36>>2]|0):0)return;c=b+28|0;if((d|0)==(k[a+8>>2]|0)){uc(a,c);return}else{k[d>>2]=k[c>>2];k[d+4>>2]=k[c+4>>2];k[d+8>>2]=k[c+8>>2];k[e>>2]=(k[e>>2]|0)+12;return}}function tc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0;m=k[a>>2]|0;n=b;d=m;j=n-d|0;l=(j|0)/12|0;p=a+4|0;g=k[p>>2]|0;o=a+8|0;f=k[o>>2]|0;if(g>>>0<f>>>0){if((g|0)==(b|0)){k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[p>>2]=(k[p>>2]|0)+12;return}f=g-(m+((l+1|0)*12|0))|0;d=b+(((f|0)/12|0)*12|0)|0;if(d>>>0<g>>>0){e=g;do{k[e>>2]=k[d>>2];k[e+4>>2]=k[d+4>>2];k[e+8>>2]=k[d+8>>2];d=d+12|0;e=(k[p>>2]|0)+12|0;k[p>>2]=e}while(d>>>0<g>>>0)}he(g+(((f|0)/-12|0)*12|0)|0,b|0,f|0)|0;k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];return}e=((g-d|0)/12|0)+1|0;if(e>>>0>357913941)xa(1340,1363,303,1438);d=(f-d|0)/12|0;if(d>>>0<178956970){d=d<<1;d=d>>>0<e>>>0?e:d;if(!d){d=0;i=0}else h=11}else{d=357913941;h=11}if((h|0)==11){f=d*12|0;f=(f|0)==0?1:f;e=_d(f)|0;a:do if(!e){while(1){e=k[35]|0;k[35]=e+0;if(!e)break;Xa[e&0]();e=_d(f)|0;if(e)break a}p=ya(4)|0;k[p>>2]=128;La(p|0,8,1)}while(0);i=e}f=i+(l*12|0)|0;g=f;e=i+(d*12|0)|0;do if((l|0)==(d|0)){if((j|0)>0){g=i+((((l+1|0)/-2|0)+l|0)*12|0)|0;f=g;d=m;break}h=(m|0)==(b|0)?1:l<<1;f=h>>>2;if(!h)d=0;else{e=h*12|0;e=(e|0)==0?1:e;d=_d(e)|0;b:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(e)|0;if(d)break b}p=ya(4)|0;k[p>>2]=128;La(p|0,8,1)}while(0)}f=d+(f*12|0)|0;g=f;e=d+(h*12|0)|0;if(!i)d=m;else{$d(i);d=k[a>>2]|0}}else d=m;while(0);k[f>>2]=k[c>>2];k[f+4>>2]=k[c+4>>2];k[f+8>>2]=k[c+8>>2];m=g;c=n-d|0;l=m+(((c|0)/-12|0)*12|0)|0;fe(l|0,d|0,c|0)|0;c=(k[p>>2]|0)-n|0;fe(m+12|0,b|0,c|0)|0;d=k[a>>2]|0;k[a>>2]=l;k[p>>2]=m+((((c|0)/12|0)+1|0)*12|0);k[o>>2]=e;if(!d)return;$d(d);return}function uc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0;f=a+4|0;g=k[a>>2]|0;c=g;h=(k[f>>2]|0)-c|0;i=(h|0)/12|0;j=i+1|0;if(j>>>0>357913941)xa(1340,1363,303,1438);l=a+8|0;c=((k[l>>2]|0)-c|0)/12|0;if(c>>>0<178956970){c=c<<1;c=c>>>0<j>>>0?j:c;if(!c){c=0;d=0}else e=5}else{c=357913941;e=5}if((e|0)==5){e=c*12|0;e=(e|0)==0?1:e;d=_d(e)|0;a:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(e)|0;if(d)break a}a=ya(4)|0;k[a>>2]=128;La(a|0,8,1)}while(0)}e=d+(i*12|0)|0;k[e>>2]=k[b>>2];k[e+4>>2]=k[b+4>>2];k[e+8>>2]=k[b+8>>2];b=d+((((h|0)/-12|0)+i|0)*12|0)|0;fe(b|0,g|0,h|0)|0;k[a>>2]=b;k[f>>2]=d+(j*12|0);k[l>>2]=d+(c*12|0);if(!g)return;$d(g);return}function vc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,l=0;l=r;r=r+32|0;i=l;f=k[b>>2]|0;e=k[a>>2]|0;if((f|0)>=(e|0))if((f|0)==(e|0))g=(k[b+4>>2]|0)<(k[a+4>>2]|0);else g=0;else g=1;e=k[c>>2]|0;if((e|0)>=(f|0))if((e|0)==(f|0))e=(k[c+4>>2]|0)<(k[b+4>>2]|0);else e=0;else e=1;do if(!g)if(e){k[i>>2]=k[b>>2];k[i+4>>2]=k[b+4>>2];k[i+8>>2]=k[b+8>>2];k[i+12>>2]=k[b+12>>2];k[i+16>>2]=k[b+16>>2];k[i+20>>2]=k[b+20>>2];k[i+24>>2]=k[b+24>>2];k[i+28>>2]=k[b+28>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];k[b+24>>2]=k[c+24>>2];j[b+28>>1]=j[c+28>>1]|0;k[c>>2]=k[i>>2];k[c+4>>2]=k[i+4>>2];k[c+8>>2]=k[i+8>>2];k[c+12>>2]=k[i+12>>2];k[c+16>>2]=k[i+16>>2];k[c+20>>2]=k[i+20>>2];k[c+24>>2]=k[i+24>>2];j[c+28>>1]=j[i+28>>1]|0;e=k[b>>2]|0;f=k[a>>2]|0;if((e|0)>=(f|0)){if((e|0)!=(f|0)){h=1;break}if((k[b+4>>2]|0)>=(k[a+4>>2]|0)){h=1;break}};k[i>>2]=k[a>>2];k[i+4>>2]=k[a+4>>2];k[i+8>>2]=k[a+8>>2];k[i+12>>2]=k[a+12>>2];k[i+16>>2]=k[a+16>>2];k[i+20>>2]=k[a+20>>2];k[i+24>>2]=k[a+24>>2];k[i+28>>2]=k[a+28>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];k[a+24>>2]=k[b+24>>2];j[a+28>>1]=j[b+28>>1]|0;k[b>>2]=k[i>>2];k[b+4>>2]=k[i+4>>2];k[b+8>>2]=k[i+8>>2];k[b+12>>2]=k[i+12>>2];k[b+16>>2]=k[i+16>>2];k[b+20>>2]=k[i+20>>2];k[b+24>>2]=k[i+24>>2];j[b+28>>1]=j[i+28>>1]|0;h=2}else h=0;else{k[i>>2]=k[a>>2];k[i+4>>2]=k[a+4>>2];k[i+8>>2]=k[a+8>>2];k[i+12>>2]=k[a+12>>2];k[i+16>>2]=k[a+16>>2];k[i+20>>2]=k[a+20>>2];k[i+24>>2]=k[a+24>>2];k[i+28>>2]=k[a+28>>2];if(e){k[a>>2]=k[c>>2];k[a+4>>2]=k[c+4>>2];k[a+8>>2]=k[c+8>>2];k[a+12>>2]=k[c+12>>2];k[a+16>>2]=k[c+16>>2];k[a+20>>2]=k[c+20>>2];k[a+24>>2]=k[c+24>>2];j[a+28>>1]=j[c+28>>1]|0;k[c>>2]=k[i>>2];k[c+4>>2]=k[i+4>>2];k[c+8>>2]=k[i+8>>2];k[c+12>>2]=k[i+12>>2];k[c+16>>2]=k[i+16>>2];k[c+20>>2]=k[i+20>>2];k[c+24>>2]=k[i+24>>2];j[c+28>>1]=j[i+28>>1]|0;h=1;break};k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];k[a+24>>2]=k[b+24>>2];j[a+28>>1]=j[b+28>>1]|0;k[b>>2]=k[i>>2];k[b+4>>2]=k[i+4>>2];k[b+8>>2]=k[i+8>>2];k[b+12>>2]=k[i+12>>2];k[b+16>>2]=k[i+16>>2];k[b+20>>2]=k[i+20>>2];k[b+24>>2]=k[i+24>>2];j[b+28>>1]=j[i+28>>1]|0;e=k[c>>2]|0;f=k[b>>2]|0;if((e|0)>=(f|0)){if((e|0)!=(f|0)){h=1;break}if((k[c+4>>2]|0)>=(k[b+4>>2]|0)){h=1;break}};k[i>>2]=k[b>>2];k[i+4>>2]=k[b+4>>2];k[i+8>>2]=k[b+8>>2];k[i+12>>2]=k[b+12>>2];k[i+16>>2]=k[b+16>>2];k[i+20>>2]=k[b+20>>2];k[i+24>>2]=k[b+24>>2];k[i+28>>2]=k[b+28>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];k[b+24>>2]=k[c+24>>2];j[b+28>>1]=j[c+28>>1]|0;k[c>>2]=k[i>>2];k[c+4>>2]=k[i+4>>2];k[c+8>>2]=k[i+8>>2];k[c+12>>2]=k[i+12>>2];k[c+16>>2]=k[i+16>>2];k[c+20>>2]=k[i+20>>2];k[c+24>>2]=k[i+24>>2];j[c+28>>1]=j[i+28>>1]|0;h=2}while(0);e=k[d>>2]|0;f=k[c>>2]|0;if((e|0)>=(f|0)){if((e|0)!=(f|0)){b=h;r=l;return b|0}if((k[d+4>>2]|0)>=(k[c+4>>2]|0)){b=h;r=l;return b|0}};k[i>>2]=k[c>>2];k[i+4>>2]=k[c+4>>2];k[i+8>>2]=k[c+8>>2];k[i+12>>2]=k[c+12>>2];k[i+16>>2]=k[c+16>>2];k[i+20>>2]=k[c+20>>2];k[i+24>>2]=k[c+24>>2];k[i+28>>2]=k[c+28>>2];k[c>>2]=k[d>>2];k[c+4>>2]=k[d+4>>2];k[c+8>>2]=k[d+8>>2];k[c+12>>2]=k[d+12>>2];k[c+16>>2]=k[d+16>>2];k[c+20>>2]=k[d+20>>2];k[c+24>>2]=k[d+24>>2];j[c+28>>1]=j[d+28>>1]|0;k[d>>2]=k[i>>2];k[d+4>>2]=k[i+4>>2];k[d+8>>2]=k[i+8>>2];k[d+12>>2]=k[i+12>>2];k[d+16>>2]=k[i+16>>2];k[d+20>>2]=k[i+20>>2];k[d+24>>2]=k[i+24>>2];j[d+28>>1]=j[i+28>>1]|0;e=h+1|0;f=k[c>>2]|0;g=k[b>>2]|0;if((f|0)>=(g|0)){if((f|0)!=(g|0)){b=e;r=l;return b|0}if((k[c+4>>2]|0)>=(k[b+4>>2]|0)){b=e;r=l;return b|0}};k[i>>2]=k[b>>2];k[i+4>>2]=k[b+4>>2];k[i+8>>2]=k[b+8>>2];k[i+12>>2]=k[b+12>>2];k[i+16>>2]=k[b+16>>2];k[i+20>>2]=k[b+20>>2];k[i+24>>2]=k[b+24>>2];k[i+28>>2]=k[b+28>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];k[b+24>>2]=k[c+24>>2];j[b+28>>1]=j[c+28>>1]|0;k[c>>2]=k[i>>2];k[c+4>>2]=k[i+4>>2];k[c+8>>2]=k[i+8>>2];k[c+12>>2]=k[i+12>>2];k[c+16>>2]=k[i+16>>2];k[c+20>>2]=k[i+20>>2];k[c+24>>2]=k[i+24>>2];j[c+28>>1]=j[i+28>>1]|0;e=h+2|0;f=k[b>>2]|0;g=k[a>>2]|0;if((f|0)>=(g|0)){if((f|0)!=(g|0)){b=e;r=l;return b|0}if((k[b+4>>2]|0)>=(k[a+4>>2]|0)){b=e;r=l;return b|0}};k[i>>2]=k[a>>2];k[i+4>>2]=k[a+4>>2];k[i+8>>2]=k[a+8>>2];k[i+12>>2]=k[a+12>>2];k[i+16>>2]=k[a+16>>2];k[i+20>>2]=k[a+20>>2];k[i+24>>2]=k[a+24>>2];k[i+28>>2]=k[a+28>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];k[a+24>>2]=k[b+24>>2];j[a+28>>1]=j[b+28>>1]|0;k[b>>2]=k[i>>2];k[b+4>>2]=k[i+4>>2];k[b+8>>2]=k[i+8>>2];k[b+12>>2]=k[i+12>>2];k[b+16>>2]=k[i+16>>2];k[b+20>>2]=k[i+20>>2];k[b+24>>2]=k[i+24>>2];j[b+28>>1]=j[i+28>>1]|0;b=h+3|0;r=l;return b|0}function wc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,l=0;l=r;r=r+32|0;i=l;h=vc(a,b,c,d)|0;f=k[e>>2]|0;g=k[d>>2]|0;if((f|0)>=(g|0)){if((f|0)!=(g|0)){b=h;r=l;return b|0}if((k[e+4>>2]|0)>=(k[d+4>>2]|0)){b=h;r=l;return b|0}};k[i>>2]=k[d>>2];k[i+4>>2]=k[d+4>>2];k[i+8>>2]=k[d+8>>2];k[i+12>>2]=k[d+12>>2];k[i+16>>2]=k[d+16>>2];k[i+20>>2]=k[d+20>>2];k[i+24>>2]=k[d+24>>2];k[i+28>>2]=k[d+28>>2];k[d>>2]=k[e>>2];k[d+4>>2]=k[e+4>>2];k[d+8>>2]=k[e+8>>2];k[d+12>>2]=k[e+12>>2];k[d+16>>2]=k[e+16>>2];k[d+20>>2]=k[e+20>>2];k[d+24>>2]=k[e+24>>2];j[d+28>>1]=j[e+28>>1]|0;k[e>>2]=k[i>>2];k[e+4>>2]=k[i+4>>2];k[e+8>>2]=k[i+8>>2];k[e+12>>2]=k[i+12>>2];k[e+16>>2]=k[i+16>>2];k[e+20>>2]=k[i+20>>2];k[e+24>>2]=k[i+24>>2];j[e+28>>1]=j[i+28>>1]|0;f=h+1|0;g=k[d>>2]|0;e=k[c>>2]|0;if((g|0)>=(e|0)){if((g|0)!=(e|0)){b=f;r=l;return b|0}if((k[d+4>>2]|0)>=(k[c+4>>2]|0)){b=f;r=l;return b|0}};k[i>>2]=k[c>>2];k[i+4>>2]=k[c+4>>2];k[i+8>>2]=k[c+8>>2];k[i+12>>2]=k[c+12>>2];k[i+16>>2]=k[c+16>>2];k[i+20>>2]=k[c+20>>2];k[i+24>>2]=k[c+24>>2];k[i+28>>2]=k[c+28>>2];k[c>>2]=k[d>>2];k[c+4>>2]=k[d+4>>2];k[c+8>>2]=k[d+8>>2];k[c+12>>2]=k[d+12>>2];k[c+16>>2]=k[d+16>>2];k[c+20>>2]=k[d+20>>2];k[c+24>>2]=k[d+24>>2];j[c+28>>1]=j[d+28>>1]|0;k[d>>2]=k[i>>2];k[d+4>>2]=k[i+4>>2];k[d+8>>2]=k[i+8>>2];k[d+12>>2]=k[i+12>>2];k[d+16>>2]=k[i+16>>2];k[d+20>>2]=k[i+20>>2];k[d+24>>2]=k[i+24>>2];j[d+28>>1]=j[i+28>>1]|0;f=h+2|0;g=k[c>>2]|0;e=k[b>>2]|0;if((g|0)>=(e|0)){if((g|0)!=(e|0)){b=f;r=l;return b|0}if((k[c+4>>2]|0)>=(k[b+4>>2]|0)){b=f;r=l;return b|0}};k[i>>2]=k[b>>2];k[i+4>>2]=k[b+4>>2];k[i+8>>2]=k[b+8>>2];k[i+12>>2]=k[b+12>>2];k[i+16>>2]=k[b+16>>2];k[i+20>>2]=k[b+20>>2];k[i+24>>2]=k[b+24>>2];k[i+28>>2]=k[b+28>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];k[b+24>>2]=k[c+24>>2];j[b+28>>1]=j[c+28>>1]|0;k[c>>2]=k[i>>2];k[c+4>>2]=k[i+4>>2];k[c+8>>2]=k[i+8>>2];k[c+12>>2]=k[i+12>>2];k[c+16>>2]=k[i+16>>2];k[c+20>>2]=k[i+20>>2];k[c+24>>2]=k[i+24>>2];j[c+28>>1]=j[i+28>>1]|0;f=h+3|0;g=k[b>>2]|0;e=k[a>>2]|0;if((g|0)>=(e|0)){if((g|0)!=(e|0)){b=f;r=l;return b|0}if((k[b+4>>2]|0)>=(k[a+4>>2]|0)){b=f;r=l;return b|0}};k[i>>2]=k[a>>2];k[i+4>>2]=k[a+4>>2];k[i+8>>2]=k[a+8>>2];k[i+12>>2]=k[a+12>>2];k[i+16>>2]=k[a+16>>2];k[i+20>>2]=k[a+20>>2];k[i+24>>2]=k[a+24>>2];k[i+28>>2]=k[a+28>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];k[a+24>>2]=k[b+24>>2];j[a+28>>1]=j[b+28>>1]|0;k[b>>2]=k[i>>2];k[b+4>>2]=k[i+4>>2];k[b+8>>2]=k[i+8>>2];k[b+12>>2]=k[i+12>>2];k[b+16>>2]=k[i+16>>2];k[b+20>>2]=k[i+20>>2];k[b+24>>2]=k[i+24>>2];j[b+28>>1]=j[i+28>>1]|0;b=h+4|0;r=l;return b|0}function xc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,l=0,m=0,n=0,o=0;o=r;r=r+64|0;i=o+24|0;m=o;switch(b-a>>5|0){case 2:{c=b+-32|0;d=k[c>>2]|0;e=k[a>>2]|0;if((d|0)>=(e|0)){if((d|0)!=(e|0)){a=1;r=o;return a|0}if((k[b+-28>>2]|0)>=(k[a+4>>2]|0)){a=1;r=o;return a|0}};k[i>>2]=k[a>>2];k[i+4>>2]=k[a+4>>2];k[i+8>>2]=k[a+8>>2];k[i+12>>2]=k[a+12>>2];k[i+16>>2]=k[a+16>>2];k[i+20>>2]=k[a+20>>2];k[i+24>>2]=k[a+24>>2];k[i+28>>2]=k[a+28>>2];k[a>>2]=k[c>>2];k[a+4>>2]=k[c+4>>2];k[a+8>>2]=k[c+8>>2];k[a+12>>2]=k[c+12>>2];k[a+16>>2]=k[c+16>>2];k[a+20>>2]=k[c+20>>2];k[a+24>>2]=k[c+24>>2];j[a+28>>1]=j[c+28>>1]|0;k[c>>2]=k[i>>2];k[c+4>>2]=k[i+4>>2];k[c+8>>2]=k[i+8>>2];k[c+12>>2]=k[i+12>>2];k[c+16>>2]=k[i+16>>2];k[c+20>>2]=k[i+20>>2];k[c+24>>2]=k[i+24>>2];j[c+28>>1]=j[i+28>>1]|0;a=1;r=o;return a|0}case 3:{g=a+32|0;f=b+-32|0;e=k[g>>2]|0;c=k[a>>2]|0;if((e|0)>=(c|0))if((e|0)==(c|0))d=(k[a+36>>2]|0)<(k[a+4>>2]|0);else d=0;else d=1;c=k[f>>2]|0;if((c|0)>=(e|0))if((c|0)==(e|0))c=(k[b+-28>>2]|0)<(k[a+36>>2]|0);else c=0;else c=1;if(!d){if(!c){a=1;r=o;return a|0};k[i>>2]=k[g>>2];k[i+4>>2]=k[g+4>>2];k[i+8>>2]=k[g+8>>2];k[i+12>>2]=k[g+12>>2];k[i+16>>2]=k[g+16>>2];k[i+20>>2]=k[g+20>>2];k[i+24>>2]=k[g+24>>2];k[i+28>>2]=k[g+28>>2];k[g>>2]=k[f>>2];k[g+4>>2]=k[f+4>>2];k[g+8>>2]=k[f+8>>2];k[g+12>>2]=k[f+12>>2];k[g+16>>2]=k[f+16>>2];k[g+20>>2]=k[f+20>>2];k[g+24>>2]=k[f+24>>2];j[g+28>>1]=j[f+28>>1]|0;k[f>>2]=k[i>>2];k[f+4>>2]=k[i+4>>2];k[f+8>>2]=k[i+8>>2];k[f+12>>2]=k[i+12>>2];k[f+16>>2]=k[i+16>>2];k[f+20>>2]=k[i+20>>2];k[f+24>>2]=k[i+24>>2];j[f+28>>1]=j[i+28>>1]|0;c=k[g>>2]|0;d=k[a>>2]|0;if((c|0)>=(d|0)){if((c|0)!=(d|0)){a=1;r=o;return a|0}if((k[a+36>>2]|0)>=(k[a+4>>2]|0)){a=1;r=o;return a|0}};k[i>>2]=k[a>>2];k[i+4>>2]=k[a+4>>2];k[i+8>>2]=k[a+8>>2];k[i+12>>2]=k[a+12>>2];k[i+16>>2]=k[a+16>>2];k[i+20>>2]=k[a+20>>2];k[i+24>>2]=k[a+24>>2];k[i+28>>2]=k[a+28>>2];k[a>>2]=k[g>>2];k[a+4>>2]=k[g+4>>2];k[a+8>>2]=k[g+8>>2];k[a+12>>2]=k[g+12>>2];k[a+16>>2]=k[g+16>>2];k[a+20>>2]=k[g+20>>2];k[a+24>>2]=k[g+24>>2];j[a+28>>1]=j[g+28>>1]|0;k[g>>2]=k[i>>2];k[g+4>>2]=k[i+4>>2];k[g+8>>2]=k[i+8>>2];k[g+12>>2]=k[i+12>>2];k[g+16>>2]=k[i+16>>2];k[g+20>>2]=k[i+20>>2];k[g+24>>2]=k[i+24>>2];j[g+28>>1]=j[i+28>>1]|0;a=1;r=o;return a|0};k[i>>2]=k[a>>2];k[i+4>>2]=k[a+4>>2];k[i+8>>2]=k[a+8>>2];k[i+12>>2]=k[a+12>>2];k[i+16>>2]=k[a+16>>2];k[i+20>>2]=k[a+20>>2];k[i+24>>2]=k[a+24>>2];k[i+28>>2]=k[a+28>>2];if(c){k[a>>2]=k[f>>2];k[a+4>>2]=k[f+4>>2];k[a+8>>2]=k[f+8>>2];k[a+12>>2]=k[f+12>>2];k[a+16>>2]=k[f+16>>2];k[a+20>>2]=k[f+20>>2];k[a+24>>2]=k[f+24>>2];j[a+28>>1]=j[f+28>>1]|0;k[f>>2]=k[i>>2];k[f+4>>2]=k[i+4>>2];k[f+8>>2]=k[i+8>>2];k[f+12>>2]=k[i+12>>2];k[f+16>>2]=k[i+16>>2];k[f+20>>2]=k[i+20>>2];k[f+24>>2]=k[i+24>>2];j[f+28>>1]=j[i+28>>1]|0;a=1;r=o;return a|0};k[a>>2]=k[g>>2];k[a+4>>2]=k[g+4>>2];k[a+8>>2]=k[g+8>>2];k[a+12>>2]=k[g+12>>2];k[a+16>>2]=k[g+16>>2];k[a+20>>2]=k[g+20>>2];k[a+24>>2]=k[g+24>>2];j[a+28>>1]=j[g+28>>1]|0;k[g>>2]=k[i>>2];k[g+4>>2]=k[i+4>>2];k[g+8>>2]=k[i+8>>2];k[g+12>>2]=k[i+12>>2];k[g+16>>2]=k[i+16>>2];k[g+20>>2]=k[i+20>>2];k[g+24>>2]=k[i+24>>2];j[g+28>>1]=j[i+28>>1]|0;c=k[f>>2]|0;d=k[g>>2]|0;if((c|0)>=(d|0)){if((c|0)!=(d|0)){a=1;r=o;return a|0}if((k[b+-28>>2]|0)>=(k[a+36>>2]|0)){a=1;r=o;return a|0}};k[i>>2]=k[g>>2];k[i+4>>2]=k[g+4>>2];k[i+8>>2]=k[g+8>>2];k[i+12>>2]=k[g+12>>2];k[i+16>>2]=k[g+16>>2];k[i+20>>2]=k[g+20>>2];k[i+24>>2]=k[g+24>>2];k[i+28>>2]=k[g+28>>2];k[g>>2]=k[f>>2];k[g+4>>2]=k[f+4>>2];k[g+8>>2]=k[f+8>>2];k[g+12>>2]=k[f+12>>2];k[g+16>>2]=k[f+16>>2];k[g+20>>2]=k[f+20>>2];k[g+24>>2]=k[f+24>>2];j[g+28>>1]=j[f+28>>1]|0;k[f>>2]=k[i>>2];k[f+4>>2]=k[i+4>>2];k[f+8>>2]=k[i+8>>2];k[f+12>>2]=k[i+12>>2];k[f+16>>2]=k[i+16>>2];k[f+20>>2]=k[i+20>>2];k[f+24>>2]=k[i+24>>2];j[f+28>>1]=j[i+28>>1]|0;a=1;r=o;return a|0}case 4:{vc(a,a+32|0,a+64|0,b+-32|0)|0;a=1;r=o;return a|0}case 5:{wc(a,a+32|0,a+64|0,a+96|0,b+-32|0)|0;a=1;r=o;return a|0}case 1:case 0:{a=1;r=o;return a|0}default:{f=a+64|0;h=a+32|0;c=k[h>>2]|0;e=k[a>>2]|0;if((c|0)>=(e|0))if((c|0)==(e|0))d=(k[a+36>>2]|0)<(k[a+4>>2]|0);else d=0;else d=1;g=k[f>>2]|0;if((g|0)>=(c|0))if((g|0)==(c|0))c=(k[a+68>>2]|0)<(k[a+36>>2]|0);else c=0;else c=1;do if(!d){if(c){k[i>>2]=k[h>>2];k[i+4>>2]=k[h+4>>2];k[i+8>>2]=k[h+8>>2];k[i+12>>2]=k[h+12>>2];k[i+16>>2]=k[h+16>>2];k[i+20>>2]=k[h+20>>2];k[i+24>>2]=k[h+24>>2];k[i+28>>2]=k[h+28>>2];k[h>>2]=k[f>>2];k[h+4>>2]=k[f+4>>2];k[h+8>>2]=k[f+8>>2];k[h+12>>2]=k[f+12>>2];k[h+16>>2]=k[f+16>>2];k[h+20>>2]=k[f+20>>2];k[h+24>>2]=k[f+24>>2];j[h+28>>1]=j[f+28>>1]|0;k[f>>2]=k[i>>2];k[f+4>>2]=k[i+4>>2];k[f+8>>2]=k[i+8>>2];k[f+12>>2]=k[i+12>>2];k[f+16>>2]=k[i+16>>2];k[f+20>>2]=k[i+20>>2];k[f+24>>2]=k[i+24>>2];j[f+28>>1]=j[i+28>>1]|0;c=k[h>>2]|0;if((c|0)>=(e|0)){if((c|0)!=(e|0))break;if((k[a+36>>2]|0)>=(k[a+4>>2]|0))break};k[i>>2]=k[a>>2];k[i+4>>2]=k[a+4>>2];k[i+8>>2]=k[a+8>>2];k[i+12>>2]=k[a+12>>2];k[i+16>>2]=k[a+16>>2];k[i+20>>2]=k[a+20>>2];k[i+24>>2]=k[a+24>>2];k[i+28>>2]=k[a+28>>2];k[a>>2]=k[h>>2];k[a+4>>2]=k[h+4>>2];k[a+8>>2]=k[h+8>>2];k[a+12>>2]=k[h+12>>2];k[a+16>>2]=k[h+16>>2];k[a+20>>2]=k[h+20>>2];k[a+24>>2]=k[h+24>>2];j[a+28>>1]=j[h+28>>1]|0;k[h>>2]=k[i>>2];k[h+4>>2]=k[i+4>>2];k[h+8>>2]=k[i+8>>2];k[h+12>>2]=k[i+12>>2];k[h+16>>2]=k[i+16>>2];k[h+20>>2]=k[i+20>>2];k[h+24>>2]=k[i+24>>2];j[h+28>>1]=j[i+28>>1]|0}}else{k[i>>2]=k[a>>2];k[i+4>>2]=k[a+4>>2];k[i+8>>2]=k[a+8>>2];k[i+12>>2]=k[a+12>>2];k[i+16>>2]=k[a+16>>2];k[i+20>>2]=k[a+20>>2];k[i+24>>2]=k[a+24>>2];k[i+28>>2]=k[a+28>>2];if(c){k[a>>2]=k[f>>2];k[a+4>>2]=k[f+4>>2];k[a+8>>2]=k[f+8>>2];k[a+12>>2]=k[f+12>>2];k[a+16>>2]=k[f+16>>2];k[a+20>>2]=k[f+20>>2];k[a+24>>2]=k[f+24>>2];j[a+28>>1]=j[f+28>>1]|0;k[f>>2]=k[i>>2];k[f+4>>2]=k[i+4>>2];k[f+8>>2]=k[i+8>>2];k[f+12>>2]=k[i+12>>2];k[f+16>>2]=k[i+16>>2];k[f+20>>2]=k[i+20>>2];k[f+24>>2]=k[i+24>>2];j[f+28>>1]=j[i+28>>1]|0;break};k[a>>2]=k[h>>2];k[a+4>>2]=k[h+4>>2];k[a+8>>2]=k[h+8>>2];k[a+12>>2]=k[h+12>>2];k[a+16>>2]=k[h+16>>2];k[a+20>>2]=k[h+20>>2];k[a+24>>2]=k[h+24>>2];j[a+28>>1]=j[h+28>>1]|0;k[h>>2]=k[i>>2];k[h+4>>2]=k[i+4>>2];k[h+8>>2]=k[i+8>>2];k[h+12>>2]=k[i+12>>2];k[h+16>>2]=k[i+16>>2];k[h+20>>2]=k[i+20>>2];k[h+24>>2]=k[i+24>>2];j[h+28>>1]=j[i+28>>1]|0;c=k[h>>2]|0;if((g|0)>=(c|0)){if((g|0)!=(c|0))break;if((k[a+68>>2]|0)>=(k[a+36>>2]|0))break};k[i>>2]=k[h>>2];k[i+4>>2]=k[h+4>>2];k[i+8>>2]=k[h+8>>2];k[i+12>>2]=k[h+12>>2];k[i+16>>2]=k[h+16>>2];k[i+20>>2]=k[h+20>>2];k[i+24>>2]=k[h+24>>2];k[i+28>>2]=k[h+28>>2];k[h>>2]=k[f>>2];k[h+4>>2]=k[f+4>>2];k[h+8>>2]=k[f+8>>2];k[h+12>>2]=k[f+12>>2];k[h+16>>2]=k[f+16>>2];k[h+20>>2]=k[f+20>>2];k[h+24>>2]=k[f+24>>2];j[h+28>>1]=j[f+28>>1]|0;k[f>>2]=k[i>>2];k[f+4>>2]=k[i+4>>2];k[f+8>>2]=k[i+8>>2];k[f+12>>2]=k[i+12>>2];k[f+16>>2]=k[i+16>>2];k[f+20>>2]=k[i+20>>2];k[f+24>>2]=k[i+24>>2];j[f+28>>1]=j[i+28>>1]|0}while(0);d=a+96|0;if((d|0)==(b|0)){a=1;r=o;return a|0}c=0;while(1){i=k[d>>2]|0;e=k[f>>2]|0;if((i|0)>=(e|0)){if((i|0)==(e|0)?(l=k[d+4>>2]|0,(l|0)<(k[f+4>>2]|0)):0){h=l;n=50}}else{h=k[d+4>>2]|0;n=50}if((n|0)==50){n=0;g=d+8|0;k[m>>2]=k[g>>2];k[m+4>>2]=k[g+4>>2];k[m+8>>2]=k[g+8>>2];k[m+12>>2]=k[g+12>>2];k[m+16>>2]=k[g+16>>2];k[m+20>>2]=k[g+20>>2];k[d>>2]=k[f>>2];k[d+4>>2]=k[f+4>>2];k[d+8>>2]=k[f+8>>2];k[d+12>>2]=k[f+12>>2];k[d+16>>2]=k[f+16>>2];k[d+20>>2]=k[f+20>>2];k[d+24>>2]=k[f+24>>2];j[d+28>>1]=j[f+28>>1]|0;a:do if((f|0)==(a|0))e=a;else while(1){e=f;f=f+-32|0;g=k[f>>2]|0;if((i|0)>=(g|0)){if((i|0)!=(g|0))break a;if((h|0)>=(k[e+-28>>2]|0))break a};k[e>>2]=k[f>>2];k[e+4>>2]=k[f+4>>2];k[e+8>>2]=k[f+8>>2];k[e+12>>2]=k[f+12>>2];k[e+16>>2]=k[f+16>>2];k[e+20>>2]=k[f+20>>2];k[e+24>>2]=k[f+24>>2];j[e+28>>1]=j[f+28>>1]|0;if((f|0)==(a|0)){e=a;break}}while(0);k[e>>2]=i;k[e+4>>2]=h;i=e+8|0;k[i>>2]=k[m>>2];k[i+4>>2]=k[m+4>>2];k[i+8>>2]=k[m+8>>2];k[i+12>>2]=k[m+12>>2];k[i+16>>2]=k[m+16>>2];j[i+20>>1]=j[m+20>>1]|0;c=c+1|0;if((c|0)==8)break}e=d+32|0;if((e|0)==(b|0)){c=1;n=58;break}else{f=d;d=e}}if((n|0)==58){r=o;return c|0}a=(d+32|0)==(b|0);r=o;return a|0}}return 0}function yc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0;n=a+4|0;f=k[n>>2]|0;m=k[a>>2]|0;d=m;j=f-d>>4;l=j+1|0;if(l>>>0>268435455)xa(1340,1363,303,1438);o=a+8|0;e=(k[o>>2]|0)-d|0;if(e>>4>>>0<134217727){e=e>>3;e=e>>>0<l>>>0?l:e;if(!e){h=0;g=0}else i=5}else{e=268435455;i=5}if((i|0)==5){h=e<<4;h=(h|0)==0?1:h;g=_d(h)|0;a:do if(!g){while(1){g=k[35]|0;k[35]=g+0;if(!g)break;Xa[g&0]();g=_d(h)|0;if(g)break a}o=ya(4)|0;k[o>>2]=128;La(o|0,8,1)}while(0);h=e}i=g+(j<<4)|0;e=i;h=g+(h<<4)|0;k[i>>2]=0;k[i+4>>2]=0;k[i+8>>2]=0;k[i+12>>2]=0;k[i>>2]=k[b>>2];k[g+(j<<4)+4>>2]=k[b+4>>2];k[g+(j<<4)+8>>2]=k[c>>2];k[g+(j<<4)+12>>2]=k[c+4>>2];g=g+(l<<4)|0;if((f|0)==(m|0))f=a;else{d=i;do{b=d+-16|0;c=f;f=f+-16|0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=0;k[b+12>>2]=0;k[b>>2]=k[f>>2];k[d+-12>>2]=k[c+-12>>2];k[d+-8>>2]=k[c+-8>>2];k[d+-4>>2]=k[c+-4>>2];d=e+-16|0;e=d}while((f|0)!=(m|0));f=a;d=k[a>>2]|0}k[f>>2]=e;k[n>>2]=g;k[o>>2]=h;if(!d)return;$d(d);return}function zc(a,b){a=a|0;b=b|0;return (k[a+16>>2]|0)<(k[b+16>>2]|0)|0}function Ac(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0;t=r;r=r+48|0;s=t;q=b;a:while(1){n=q;p=q+-44|0;b:while(1){j=a;b=n-j|0;switch((b|0)/44|0|0){case 2:{o=4;break a}case 3:{o=6;break a}case 4:{o=14;break a}case 5:{o=15;break a}case 1:case 0:{o=82;break a}default:{}}if((b|0)<1364){o=21;break a}d=(b|0)/88|0;i=a+(d*44|0)|0;do if((b|0)>43956){e=(b|0)/176|0;f=a+(e*44|0)|0;e=a+((e+d|0)*44|0)|0;b=Hc(a,f,i,e,c)|0;if(Za[k[c>>2]&7](p,e)|0){d=s;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=p;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=p;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=b+1|0;if(Za[k[c>>2]&7](e,i)|0){d=s;l=i;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=i;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=b+2|0;if(Za[k[c>>2]&7](i,f)|0){d=s;l=f;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=f;l=i;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=i;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=b+3|0;if(Za[k[c>>2]&7](f,a)|0){d=s;l=a;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=a;l=f;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=f;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));b=b+4|0}else b=d}else b=d}else b=d}}else{m=Za[k[c>>2]&7](i,a)|0;b=Za[k[c>>2]&7](p,i)|0;if(!m){if(!b){b=0;break}d=s;l=i;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=i;l=p;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=p;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));if(!(Za[k[c>>2]&7](i,a)|0)){b=1;break}d=s;l=a;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=a;l=i;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=i;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));b=2;break}if(b){d=s;l=a;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=a;l=p;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=p;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));b=1;break}d=s;l=a;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=a;l=i;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=i;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));if(Za[k[c>>2]&7](p,i)|0){d=s;l=i;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=i;l=p;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=p;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));b=2}else b=1}while(0);do if(Za[k[c>>2]&7](a,i)|0)e=p;else{e=p;while(1){e=e+-44|0;if((a|0)==(e|0))break;if(Za[k[c>>2]&7](e,i)|0){o=65;break}}if((o|0)==65){o=0;d=s;l=a;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=a;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));b=b+1|0;break}b=a+44|0;if(!(Za[k[c>>2]&7](a,p)|0)){if((b|0)==(p|0)){o=82;break a}else e=a;while(1){d=b+44|0;if(Za[k[c>>2]&7](a,b)|0)break;if((d|0)==(p|0)){o=82;break a}else{e=b;b=d}}b=e+44|0;d=s;l=b;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=b;l=p;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=p;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));b=e+88|0}if((b|0)==(p|0)){o=82;break a}else d=p;while(1){e=b;while(1){b=e+44|0;if(Za[k[c>>2]&7](a,e)|0){f=d;break}else e=b}do f=f+-44|0;while(Za[k[c>>2]&7](a,f)|0);if(e>>>0>=f>>>0){a=e;continue b}d=s;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=f;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=f;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=f}}while(0);d=a+44|0;c:do if(d>>>0<e>>>0)while(1){g=d;while(1){f=g+44|0;if(Za[k[c>>2]&7](g,i)|0)g=f;else{h=e;break}}do h=h+-44|0;while(!(Za[k[c>>2]&7](h,i)|0));if(g>>>0>h>>>0){e=i;break c}d=s;l=g;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=g;l=h;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=h;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=f;e=h;i=(i|0)==(g|0)?h:i;b=b+1|0}else{g=d;e=i}while(0);if((g|0)!=(e|0)?Za[k[c>>2]&7](e,g)|0:0){d=s;l=g;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=g;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));b=b+1|0}if(!b){b=Ic(a,g,c)|0;d=g+44|0;if(Ic(d,q,c)|0){o=77;break}if(b){a=d;continue}}m=g;if((m-j|0)>=(n-m|0)){o=81;break}Ac(a,g,c);a=g+44|0}if((o|0)==77){o=0;if(b){o=82;break}else{q=g;continue}}else if((o|0)==81){o=0;Ac(g+44|0,q,c);q=g;continue}}if((o|0)==4){if(!(Za[k[c>>2]&7](p,a)|0)){r=t;return}d=s;l=a;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=a;l=p;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=p;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));r=t;return}else if((o|0)==6){e=a+44|0;q=Za[k[c>>2]&7](e,a)|0;b=Za[k[c>>2]&7](p,e)|0;if(!q){if(!b){r=t;return}d=s;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=p;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=p;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));if(!(Za[k[c>>2]&7](e,a)|0)){r=t;return}d=s;l=a;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=a;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));r=t;return}if(b){d=s;l=a;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=a;l=p;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=p;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));r=t;return}d=s;l=a;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=a;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));if(!(Za[k[c>>2]&7](p,e)|0)){r=t;return}d=s;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=p;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=p;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));r=t;return}else if((o|0)==14){Hc(a,a+44|0,a+88|0,p,c)|0;r=t;return}else if((o|0)==15){b=a+44|0;e=a+88|0;f=a+132|0;Hc(a,b,e,f,c)|0;if(!(Za[k[c>>2]&7](p,f)|0)){r=t;return}d=s;l=f;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=f;l=p;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=p;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));if(!(Za[k[c>>2]&7](f,e)|0)){r=t;return}d=s;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=f;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=f;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));if(!(Za[k[c>>2]&7](e,b)|0)){r=t;return}d=s;l=b;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=b;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));if(!(Za[k[c>>2]&7](b,a)|0)){r=t;return}d=s;l=a;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=a;l=b;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=b;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));r=t;return}else if((o|0)==21){f=a+88|0;e=a+44|0;p=Za[k[c>>2]&7](e,a)|0;b=Za[k[c>>2]&7](f,e)|0;do if(p){if(b){d=s;l=a;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=a;l=f;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=f;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));break}d=s;l=a;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=a;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));if(Za[k[c>>2]&7](f,e)|0){d=s;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=f;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=f;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0))}}else if(b){d=s;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=f;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=f;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));if(Za[k[c>>2]&7](e,a)|0){d=s;l=a;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=a;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0))}}while(0);b=a+132|0;if((b|0)==(q|0)){r=t;return}e=f;while(1){if(Za[k[c>>2]&7](b,e)|0){d=s;l=b;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=b;while(1){l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));if((e|0)==(a|0))break;d=e+-44|0;if(Za[k[c>>2]&7](s,d)|0){p=e;e=d;d=p}else break}d=e;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0))}d=b+44|0;if((d|0)==(q|0))break;else{e=b;b=d}}r=t;return}else if((o|0)==82){r=t;return}}function Bc(a){a=a|0;var b=0,c=0,d=0,e=0,f=0;Cc(k[a+68>>2]|0);d=a+52|0;c=a+60|0;if((k[c>>2]|0)!=0?(b=k[a+56>>2]|0,e=(k[d>>2]|0)+4|0,f=k[b>>2]|0,k[f+4>>2]=k[e>>2],k[k[e>>2]>>2]=f,k[c>>2]=0,(b|0)!=(d|0)):0)do{f=b;b=k[b+4>>2]|0;$d(f)}while((b|0)!=(d|0));b=k[a+36>>2]|0;c=b;if(b){d=a+40|0;e=k[d>>2]|0;if((e|0)!=(b|0))k[d>>2]=e+(~((e+-4-c|0)>>>2)<<2);$d(b)}b=k[a+20>>2]|0;c=b;if(b){d=a+24|0;e=k[d>>2]|0;if((e|0)!=(b|0))k[d>>2]=e+(~(((e+-12-c|0)>>>0)/12|0)*12|0);$d(b)}d=k[a+4>>2]|0;if(!d)return;b=a+8|0;c=k[b>>2]|0;if((c|0)!=(d|0))k[b>>2]=c+(~(((c+-28-d|0)>>>0)/28|0)*28|0);$d(d);return}function Cc(a){a=a|0;if(!a)return;else{Cc(k[a>>2]|0);Cc(k[a+4>>2]|0);$d(a);return}}function Dc(a,b){a=a|0;b=b|0;var c=0.0,d=0.0,e=0,f=0,g=0,h=0,j=0,l=0,m=0;c=+p[a+16>>3];d=+p[b+16>>3];if(c<d){m=1;return m|0}if(d<c){m=0;return m|0}e=i[a+24>>0]|0;f=i[b+24>>0]|0;if((e&255)<(f&255)){m=1;return m|0}if((f&255)<(e&255)){m=0;return m|0}g=k[a+8>>2]|0;b=k[b+8>>2]|0;e=k[g+28>>2]|0;f=k[g+16>>2]|0;a=e-f|0;g=(k[g+32>>2]|0)-(k[g+20>>2]|0)|0;h=k[b+28>>2]|0;j=k[b+16>>2]|0;l=h-j|0;b=(k[b+32>>2]|0)-(k[b+20>>2]|0)|0;if((a|0)>=0){if((e|0)==(f|0)){m=0;return m|0}}else{a=0-a|0;g=0-g|0}if((l|0)>=0)if((h|0)==(j|0)){m=(a|0)!=0;return m|0}else e=l;else{e=0-l|0;b=0-b|0}j=(e|0)<0?0-e|0:e;h=(g|0)<0?0-g|0:g;h=ne(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;l=(a|0)<0?0-a|0:a;m=(b|0)<0?0-b|0:b;l=ne(m|0,((m|0)<0)<<31>>31|0,l|0,((l|0)<0)<<31>>31|0)|0;m=L;f=ha(e>>31|1,g>>31|1)|0;e=ha(b>>31|1,a>>31|1)|0;if((f|0)<(e|0)){m=1;return m|0}if((e|0)<(f|0)){m=0;return m|0}if((f|0)==-1){m=m>>>0<j>>>0|(m|0)==(j|0)&l>>>0<h>>>0;return m|0}else{m=j>>>0<m>>>0|(j|0)==(m|0)&h>>>0<l>>>0;return m|0}return 0}function Ec(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0;t=r;r=r+64|0;q=t+32|0;p=t;o=b;a:while(1){l=o;n=o+-32|0;s=a;b:while(1){h=s;a=l-h|0;b=a>>5;switch(b|0){case 2:{m=4;break a}case 3:{m=6;break a}case 4:{m=14;break a}case 5:{m=15;break a}case 1:case 0:{m=82;break a}default:{}}if((a|0)<992){m=21;break a}d=(b|0)/2|0;g=s+(d<<5)|0;do if((a|0)>31968){b=(b|0)/4|0;e=s+(b<<5)|0;b=s+(b+d<<5)|0;a=Fc(s,e,g,b,c)|0;if(Za[k[c>>2]&7](n,b)|0){k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];k[p+12>>2]=k[b+12>>2];k[p+16>>2]=k[b+16>>2];k[p+20>>2]=k[b+20>>2];k[p+24>>2]=k[b+24>>2];k[p+28>>2]=k[b+28>>2];k[b>>2]=k[n>>2];k[b+4>>2]=k[n+4>>2];k[b+8>>2]=k[n+8>>2];k[b+12>>2]=k[n+12>>2];k[b+16>>2]=k[n+16>>2];k[b+20>>2]=k[n+20>>2];j[b+24>>1]=j[n+24>>1]|0;i[b+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;d=a+1|0;if(Za[k[c>>2]&7](b,g)|0){k[p>>2]=k[g>>2];k[p+4>>2]=k[g+4>>2];k[p+8>>2]=k[g+8>>2];k[p+12>>2]=k[g+12>>2];k[p+16>>2]=k[g+16>>2];k[p+20>>2]=k[g+20>>2];k[p+24>>2]=k[g+24>>2];k[p+28>>2]=k[g+28>>2];k[g>>2]=k[b>>2];k[g+4>>2]=k[b+4>>2];k[g+8>>2]=k[b+8>>2];k[g+12>>2]=k[b+12>>2];k[g+16>>2]=k[b+16>>2];k[g+20>>2]=k[b+20>>2];j[g+24>>1]=j[b+24>>1]|0;i[g+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;b=a+2|0;if(Za[k[c>>2]&7](g,e)|0){k[p>>2]=k[e>>2];k[p+4>>2]=k[e+4>>2];k[p+8>>2]=k[e+8>>2];k[p+12>>2]=k[e+12>>2];k[p+16>>2]=k[e+16>>2];k[p+20>>2]=k[e+20>>2];k[p+24>>2]=k[e+24>>2];k[p+28>>2]=k[e+28>>2];k[e>>2]=k[g>>2];k[e+4>>2]=k[g+4>>2];k[e+8>>2]=k[g+8>>2];k[e+12>>2]=k[g+12>>2];k[e+16>>2]=k[g+16>>2];k[e+20>>2]=k[g+20>>2];j[e+24>>1]=j[g+24>>1]|0;i[e+26>>0]=i[g+26>>0]|0;k[g>>2]=k[p>>2];k[g+4>>2]=k[p+4>>2];k[g+8>>2]=k[p+8>>2];k[g+12>>2]=k[p+12>>2];k[g+16>>2]=k[p+16>>2];k[g+20>>2]=k[p+20>>2];j[g+24>>1]=j[p+24>>1]|0;i[g+26>>0]=i[p+26>>0]|0;if(Za[k[c>>2]&7](e,s)|0){k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[e>>2];k[s+4>>2]=k[e+4>>2];k[s+8>>2]=k[e+8>>2];k[s+12>>2]=k[e+12>>2];k[s+16>>2]=k[e+16>>2];k[s+20>>2]=k[e+20>>2];j[s+24>>1]=j[e+24>>1]|0;i[s+26>>0]=i[e+26>>0]|0;k[e>>2]=k[p>>2];k[e+4>>2]=k[p+4>>2];k[e+8>>2]=k[p+8>>2];k[e+12>>2]=k[p+12>>2];k[e+16>>2]=k[p+16>>2];k[e+20>>2]=k[p+20>>2];j[e+24>>1]=j[p+24>>1]|0;i[e+26>>0]=i[p+26>>0]|0;a=a+4|0}else a=a+3|0}else a=b}else a=d}}else{f=Za[k[c>>2]&7](g,s)|0;a=Za[k[c>>2]&7](n,g)|0;if(!f){if(!a){a=0;break};k[p>>2]=k[g>>2];k[p+4>>2]=k[g+4>>2];k[p+8>>2]=k[g+8>>2];k[p+12>>2]=k[g+12>>2];k[p+16>>2]=k[g+16>>2];k[p+20>>2]=k[g+20>>2];k[p+24>>2]=k[g+24>>2];k[p+28>>2]=k[g+28>>2];k[g>>2]=k[n>>2];k[g+4>>2]=k[n+4>>2];k[g+8>>2]=k[n+8>>2];k[g+12>>2]=k[n+12>>2];k[g+16>>2]=k[n+16>>2];k[g+20>>2]=k[n+20>>2];j[g+24>>1]=j[n+24>>1]|0;i[g+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;if(!(Za[k[c>>2]&7](g,s)|0)){a=1;break};k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[g>>2];k[s+4>>2]=k[g+4>>2];k[s+8>>2]=k[g+8>>2];k[s+12>>2]=k[g+12>>2];k[s+16>>2]=k[g+16>>2];k[s+20>>2]=k[g+20>>2];j[s+24>>1]=j[g+24>>1]|0;i[s+26>>0]=i[g+26>>0]|0;k[g>>2]=k[p>>2];k[g+4>>2]=k[p+4>>2];k[g+8>>2]=k[p+8>>2];k[g+12>>2]=k[p+12>>2];k[g+16>>2]=k[p+16>>2];k[g+20>>2]=k[p+20>>2];j[g+24>>1]=j[p+24>>1]|0;i[g+26>>0]=i[p+26>>0]|0;a=2;break};k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];if(a){k[s>>2]=k[n>>2];k[s+4>>2]=k[n+4>>2];k[s+8>>2]=k[n+8>>2];k[s+12>>2]=k[n+12>>2];k[s+16>>2]=k[n+16>>2];k[s+20>>2]=k[n+20>>2];j[s+24>>1]=j[n+24>>1]|0;i[s+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;a=1;break};k[s>>2]=k[g>>2];k[s+4>>2]=k[g+4>>2];k[s+8>>2]=k[g+8>>2];k[s+12>>2]=k[g+12>>2];k[s+16>>2]=k[g+16>>2];k[s+20>>2]=k[g+20>>2];j[s+24>>1]=j[g+24>>1]|0;i[s+26>>0]=i[g+26>>0]|0;k[g>>2]=k[p>>2];k[g+4>>2]=k[p+4>>2];k[g+8>>2]=k[p+8>>2];k[g+12>>2]=k[p+12>>2];k[g+16>>2]=k[p+16>>2];k[g+20>>2]=k[p+20>>2];j[g+24>>1]=j[p+24>>1]|0;i[g+26>>0]=i[p+26>>0]|0;if(Za[k[c>>2]&7](n,g)|0){k[p>>2]=k[g>>2];k[p+4>>2]=k[g+4>>2];k[p+8>>2]=k[g+8>>2];k[p+12>>2]=k[g+12>>2];k[p+16>>2]=k[g+16>>2];k[p+20>>2]=k[g+20>>2];k[p+24>>2]=k[g+24>>2];k[p+28>>2]=k[g+28>>2];k[g>>2]=k[n>>2];k[g+4>>2]=k[n+4>>2];k[g+8>>2]=k[n+8>>2];k[g+12>>2]=k[n+12>>2];k[g+16>>2]=k[n+16>>2];k[g+20>>2]=k[n+20>>2];j[g+24>>1]=j[n+24>>1]|0;i[g+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;a=2}else a=1}while(0);do if(Za[k[c>>2]&7](s,g)|0)b=n;else{b=n;while(1){b=b+-32|0;if((s|0)==(b|0))break;if(Za[k[c>>2]&7](b,g)|0){m=65;break}}if((m|0)==65){m=0;k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[b>>2];k[s+4>>2]=k[b+4>>2];k[s+8>>2]=k[b+8>>2];k[s+12>>2]=k[b+12>>2];k[s+16>>2]=k[b+16>>2];k[s+20>>2]=k[b+20>>2];j[s+24>>1]=j[b+24>>1]|0;i[s+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;a=a+1|0;break}a=s+32|0;if(!(Za[k[c>>2]&7](s,n)|0)){if((a|0)==(n|0)){m=82;break a}else b=s;while(1){if(Za[k[c>>2]&7](s,a)|0)break;b=a+32|0;if((b|0)==(n|0)){m=82;break a}else{h=a;a=b;b=h}}k[p>>2]=k[a>>2];k[p+4>>2]=k[a+4>>2];k[p+8>>2]=k[a+8>>2];k[p+12>>2]=k[a+12>>2];k[p+16>>2]=k[a+16>>2];k[p+20>>2]=k[a+20>>2];k[p+24>>2]=k[a+24>>2];k[p+28>>2]=k[a+28>>2];k[a>>2]=k[n>>2];k[a+4>>2]=k[n+4>>2];k[a+8>>2]=k[n+8>>2];k[a+12>>2]=k[n+12>>2];k[a+16>>2]=k[n+16>>2];k[a+20>>2]=k[n+20>>2];j[a+24>>1]=j[n+24>>1]|0;i[a+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;a=b+64|0}if((a|0)==(n|0)){m=82;break a}else d=n;while(1){b=a;while(1){a=b+32|0;if(Za[k[c>>2]&7](s,b)|0)break;else b=a}do d=d+-32|0;while(Za[k[c>>2]&7](s,d)|0);if(b>>>0>=d>>>0){s=b;continue b};k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];k[p+12>>2]=k[b+12>>2];k[p+16>>2]=k[b+16>>2];k[p+20>>2]=k[b+20>>2];k[p+24>>2]=k[b+24>>2];k[p+28>>2]=k[b+28>>2];k[b>>2]=k[d>>2];k[b+4>>2]=k[d+4>>2];k[b+8>>2]=k[d+8>>2];k[b+12>>2]=k[d+12>>2];k[b+16>>2]=k[d+16>>2];k[b+20>>2]=k[d+20>>2];j[b+24>>1]=j[d+24>>1]|0;i[b+26>>0]=i[d+26>>0]|0;k[d>>2]=k[p>>2];k[d+4>>2]=k[p+4>>2];k[d+8>>2]=k[p+8>>2];k[d+12>>2]=k[p+12>>2];k[d+16>>2]=k[p+16>>2];k[d+20>>2]=k[p+20>>2];j[d+24>>1]=j[p+24>>1]|0;i[d+26>>0]=i[p+26>>0]|0}}while(0);d=s+32|0;c:do if(d>>>0<b>>>0)while(1){e=d;while(1){d=e+32|0;if(Za[k[c>>2]&7](e,g)|0)e=d;else{f=b;break}}do f=f+-32|0;while(!(Za[k[c>>2]&7](f,g)|0));if(e>>>0>f>>>0){d=e;b=g;break c};k[p>>2]=k[e>>2];k[p+4>>2]=k[e+4>>2];k[p+8>>2]=k[e+8>>2];k[p+12>>2]=k[e+12>>2];k[p+16>>2]=k[e+16>>2];k[p+20>>2]=k[e+20>>2];k[p+24>>2]=k[e+24>>2];k[p+28>>2]=k[e+28>>2];k[e>>2]=k[f>>2];k[e+4>>2]=k[f+4>>2];k[e+8>>2]=k[f+8>>2];k[e+12>>2]=k[f+12>>2];k[e+16>>2]=k[f+16>>2];k[e+20>>2]=k[f+20>>2];j[e+24>>1]=j[f+24>>1]|0;i[e+26>>0]=i[f+26>>0]|0;k[f>>2]=k[p>>2];k[f+4>>2]=k[p+4>>2];k[f+8>>2]=k[p+8>>2];k[f+12>>2]=k[p+12>>2];k[f+16>>2]=k[p+16>>2];k[f+20>>2]=k[p+20>>2];j[f+24>>1]=j[p+24>>1]|0;i[f+26>>0]=i[p+26>>0]|0;b=f;g=(g|0)==(e|0)?f:g;a=a+1|0}else b=g;while(0);if((d|0)!=(b|0)?Za[k[c>>2]&7](b,d)|0:0){k[p>>2]=k[d>>2];k[p+4>>2]=k[d+4>>2];k[p+8>>2]=k[d+8>>2];k[p+12>>2]=k[d+12>>2];k[p+16>>2]=k[d+16>>2];k[p+20>>2]=k[d+20>>2];k[p+24>>2]=k[d+24>>2];k[p+28>>2]=k[d+28>>2];k[d>>2]=k[b>>2];k[d+4>>2]=k[b+4>>2];k[d+8>>2]=k[b+8>>2];k[d+12>>2]=k[b+12>>2];k[d+16>>2]=k[b+16>>2];k[d+20>>2]=k[b+20>>2];j[d+24>>1]=j[b+24>>1]|0;i[d+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;a=a+1|0}if(!a){a=Gc(s,d,c)|0;b=d+32|0;if(Gc(b,o,c)|0){m=77;break}if(a){s=b;continue}}g=d;if((g-h|0)>=(l-g|0)){m=81;break}Ec(s,d,c);s=d+32|0}if((m|0)==77){m=0;if(a){m=82;break}else{a=s;o=d;continue}}else if((m|0)==81){m=0;Ec(d+32|0,o,c);a=s;o=d;continue}}if((m|0)==4){if(!(Za[k[c>>2]&7](n,s)|0)){r=t;return};k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[n>>2];k[s+4>>2]=k[n+4>>2];k[s+8>>2]=k[n+8>>2];k[s+12>>2]=k[n+12>>2];k[s+16>>2]=k[n+16>>2];k[s+20>>2]=k[n+20>>2];j[s+24>>1]=j[n+24>>1]|0;i[s+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;r=t;return}else if((m|0)==6){b=s+32|0;q=Za[k[c>>2]&7](b,s)|0;a=Za[k[c>>2]&7](n,b)|0;if(!q){if(!a){r=t;return};k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];k[p+12>>2]=k[b+12>>2];k[p+16>>2]=k[b+16>>2];k[p+20>>2]=k[b+20>>2];k[p+24>>2]=k[b+24>>2];k[p+28>>2]=k[b+28>>2];k[b>>2]=k[n>>2];k[b+4>>2]=k[n+4>>2];k[b+8>>2]=k[n+8>>2];k[b+12>>2]=k[n+12>>2];k[b+16>>2]=k[n+16>>2];k[b+20>>2]=k[n+20>>2];j[b+24>>1]=j[n+24>>1]|0;i[b+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;if(!(Za[k[c>>2]&7](b,s)|0)){r=t;return};k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[b>>2];k[s+4>>2]=k[b+4>>2];k[s+8>>2]=k[b+8>>2];k[s+12>>2]=k[b+12>>2];k[s+16>>2]=k[b+16>>2];k[s+20>>2]=k[b+20>>2];j[s+24>>1]=j[b+24>>1]|0;i[s+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;r=t;return};k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];if(a){k[s>>2]=k[n>>2];k[s+4>>2]=k[n+4>>2];k[s+8>>2]=k[n+8>>2];k[s+12>>2]=k[n+12>>2];k[s+16>>2]=k[n+16>>2];k[s+20>>2]=k[n+20>>2];j[s+24>>1]=j[n+24>>1]|0;i[s+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;r=t;return};k[s>>2]=k[b>>2];k[s+4>>2]=k[b+4>>2];k[s+8>>2]=k[b+8>>2];k[s+12>>2]=k[b+12>>2];k[s+16>>2]=k[b+16>>2];k[s+20>>2]=k[b+20>>2];j[s+24>>1]=j[b+24>>1]|0;i[s+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;if(!(Za[k[c>>2]&7](n,b)|0)){r=t;return};k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];k[p+12>>2]=k[b+12>>2];k[p+16>>2]=k[b+16>>2];k[p+20>>2]=k[b+20>>2];k[p+24>>2]=k[b+24>>2];k[p+28>>2]=k[b+28>>2];k[b>>2]=k[n>>2];k[b+4>>2]=k[n+4>>2];k[b+8>>2]=k[n+8>>2];k[b+12>>2]=k[n+12>>2];k[b+16>>2]=k[n+16>>2];k[b+20>>2]=k[n+20>>2];j[b+24>>1]=j[n+24>>1]|0;i[b+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;r=t;return}else if((m|0)==14){Fc(s,s+32|0,s+64|0,n,c)|0;r=t;return}else if((m|0)==15){a=s+32|0;b=s+64|0;d=s+96|0;Fc(s,a,b,d,c)|0;if(!(Za[k[c>>2]&7](n,d)|0)){r=t;return};k[p>>2]=k[d>>2];k[p+4>>2]=k[d+4>>2];k[p+8>>2]=k[d+8>>2];k[p+12>>2]=k[d+12>>2];k[p+16>>2]=k[d+16>>2];k[p+20>>2]=k[d+20>>2];k[p+24>>2]=k[d+24>>2];k[p+28>>2]=k[d+28>>2];k[d>>2]=k[n>>2];k[d+4>>2]=k[n+4>>2];k[d+8>>2]=k[n+8>>2];k[d+12>>2]=k[n+12>>2];k[d+16>>2]=k[n+16>>2];k[d+20>>2]=k[n+20>>2];j[d+24>>1]=j[n+24>>1]|0;i[d+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;if(!(Za[k[c>>2]&7](d,b)|0)){r=t;return};k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];k[p+12>>2]=k[b+12>>2];k[p+16>>2]=k[b+16>>2];k[p+20>>2]=k[b+20>>2];k[p+24>>2]=k[b+24>>2];k[p+28>>2]=k[b+28>>2];k[b>>2]=k[d>>2];k[b+4>>2]=k[d+4>>2];k[b+8>>2]=k[d+8>>2];k[b+12>>2]=k[d+12>>2];k[b+16>>2]=k[d+16>>2];k[b+20>>2]=k[d+20>>2];j[b+24>>1]=j[d+24>>1]|0;i[b+26>>0]=i[d+26>>0]|0;k[d>>2]=k[p>>2];k[d+4>>2]=k[p+4>>2];k[d+8>>2]=k[p+8>>2];k[d+12>>2]=k[p+12>>2];k[d+16>>2]=k[p+16>>2];k[d+20>>2]=k[p+20>>2];j[d+24>>1]=j[p+24>>1]|0;i[d+26>>0]=i[p+26>>0]|0;if(!(Za[k[c>>2]&7](b,a)|0)){r=t;return};k[p>>2]=k[a>>2];k[p+4>>2]=k[a+4>>2];k[p+8>>2]=k[a+8>>2];k[p+12>>2]=k[a+12>>2];k[p+16>>2]=k[a+16>>2];k[p+20>>2]=k[a+20>>2];k[p+24>>2]=k[a+24>>2];k[p+28>>2]=k[a+28>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];j[a+24>>1]=j[b+24>>1]|0;i[a+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;if(!(Za[k[c>>2]&7](a,s)|0)){r=t;return};k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[a>>2];k[s+4>>2]=k[a+4>>2];k[s+8>>2]=k[a+8>>2];k[s+12>>2]=k[a+12>>2];k[s+16>>2]=k[a+16>>2];k[s+20>>2]=k[a+20>>2];j[s+24>>1]=j[a+24>>1]|0;i[s+26>>0]=i[a+26>>0]|0;k[a>>2]=k[p>>2];k[a+4>>2]=k[p+4>>2];k[a+8>>2]=k[p+8>>2];k[a+12>>2]=k[p+12>>2];k[a+16>>2]=k[p+16>>2];k[a+20>>2]=k[p+20>>2];j[a+24>>1]=j[p+24>>1]|0;i[a+26>>0]=i[p+26>>0]|0;r=t;return}else if((m|0)==21){b=s+64|0;a=s+32|0;n=Za[k[c>>2]&7](a,s)|0;d=Za[k[c>>2]&7](b,a)|0;do if(n){k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];if(d){k[s>>2]=k[b>>2];k[s+4>>2]=k[b+4>>2];k[s+8>>2]=k[b+8>>2];k[s+12>>2]=k[b+12>>2];k[s+16>>2]=k[b+16>>2];k[s+20>>2]=k[b+20>>2];j[s+24>>1]=j[b+24>>1]|0;i[s+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;break};k[s>>2]=k[a>>2];k[s+4>>2]=k[a+4>>2];k[s+8>>2]=k[a+8>>2];k[s+12>>2]=k[a+12>>2];k[s+16>>2]=k[a+16>>2];k[s+20>>2]=k[a+20>>2];j[s+24>>1]=j[a+24>>1]|0;i[s+26>>0]=i[a+26>>0]|0;k[a>>2]=k[p>>2];k[a+4>>2]=k[p+4>>2];k[a+8>>2]=k[p+8>>2];k[a+12>>2]=k[p+12>>2];k[a+16>>2]=k[p+16>>2];k[a+20>>2]=k[p+20>>2];j[a+24>>1]=j[p+24>>1]|0;i[a+26>>0]=i[p+26>>0]|0;if(Za[k[c>>2]&7](b,a)|0){k[p>>2]=k[a>>2];k[p+4>>2]=k[a+4>>2];k[p+8>>2]=k[a+8>>2];k[p+12>>2]=k[a+12>>2];k[p+16>>2]=k[a+16>>2];k[p+20>>2]=k[a+20>>2];k[p+24>>2]=k[a+24>>2];k[p+28>>2]=k[a+28>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];j[a+24>>1]=j[b+24>>1]|0;i[a+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0}}else if(d?(k[p>>2]=k[a>>2],k[p+4>>2]=k[a+4>>2],k[p+8>>2]=k[a+8>>2],k[p+12>>2]=k[a+12>>2],k[p+16>>2]=k[a+16>>2],k[p+20>>2]=k[a+20>>2],k[p+24>>2]=k[a+24>>2],k[p+28>>2]=k[a+28>>2],k[a>>2]=k[b>>2],k[a+4>>2]=k[b+4>>2],k[a+8>>2]=k[b+8>>2],k[a+12>>2]=k[b+12>>2],k[a+16>>2]=k[b+16>>2],k[a+20>>2]=k[b+20>>2],j[a+24>>1]=j[b+24>>1]|0,i[a+26>>0]=i[b+26>>0]|0,k[b>>2]=k[p>>2],k[b+4>>2]=k[p+4>>2],k[b+8>>2]=k[p+8>>2],k[b+12>>2]=k[p+12>>2],k[b+16>>2]=k[p+16>>2],k[b+20>>2]=k[p+20>>2],j[b+24>>1]=j[p+24>>1]|0,i[b+26>>0]=i[p+26>>0]|0,Za[k[c>>2]&7](a,s)|0):0){k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[a>>2];k[s+4>>2]=k[a+4>>2];k[s+8>>2]=k[a+8>>2];k[s+12>>2]=k[a+12>>2];k[s+16>>2]=k[a+16>>2];k[s+20>>2]=k[a+20>>2];j[s+24>>1]=j[a+24>>1]|0;i[s+26>>0]=i[a+26>>0]|0;k[a>>2]=k[p>>2];k[a+4>>2]=k[p+4>>2];k[a+8>>2]=k[p+8>>2];k[a+12>>2]=k[p+12>>2];k[a+16>>2]=k[p+16>>2];k[a+20>>2]=k[p+20>>2];j[a+24>>1]=j[p+24>>1]|0;i[a+26>>0]=i[p+26>>0]|0}while(0);a=s+96|0;if((a|0)!=(o|0))while(1){if(Za[k[c>>2]&7](a,b)|0){k[q>>2]=k[a>>2];k[q+4>>2]=k[a+4>>2];k[q+8>>2]=k[a+8>>2];k[q+12>>2]=k[a+12>>2];k[q+16>>2]=k[a+16>>2];k[q+20>>2]=k[a+20>>2];k[q+24>>2]=k[a+24>>2];k[q+28>>2]=k[a+28>>2];d=a;e=b;while(1){k[d>>2]=k[e>>2];k[d+4>>2]=k[e+4>>2];k[d+8>>2]=k[e+8>>2];k[d+12>>2]=k[e+12>>2];k[d+16>>2]=k[e+16>>2];k[d+20>>2]=k[e+20>>2];j[d+24>>1]=j[e+24>>1]|0;i[d+26>>0]=i[e+26>>0]|0;if((e|0)==(s|0))break;b=e+-32|0;if(Za[k[c>>2]&7](q,b)|0){d=e;e=b}else break}k[e>>2]=k[q>>2];k[e+4>>2]=k[q+4>>2];k[e+8>>2]=k[q+8>>2];k[e+12>>2]=k[q+12>>2];k[e+16>>2]=k[q+16>>2];k[e+20>>2]=k[q+20>>2];j[e+24>>1]=j[q+24>>1]|0;i[e+26>>0]=i[q+26>>0]|0}b=a+32|0;if((b|0)==(o|0))break;else{p=a;a=b;b=p}}r=t;return}else if((m|0)==82){r=t;return}}function Fc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,l=0;h=r;r=r+32|0;g=h;l=Za[k[e>>2]&7](b,a)|0;f=Za[k[e>>2]&7](c,b)|0;do if(l){k[g>>2]=k[a>>2];k[g+4>>2]=k[a+4>>2];k[g+8>>2]=k[a+8>>2];k[g+12>>2]=k[a+12>>2];k[g+16>>2]=k[a+16>>2];k[g+20>>2]=k[a+20>>2];k[g+24>>2]=k[a+24>>2];k[g+28>>2]=k[a+28>>2];if(f){k[a>>2]=k[c>>2];k[a+4>>2]=k[c+4>>2];k[a+8>>2]=k[c+8>>2];k[a+12>>2]=k[c+12>>2];k[a+16>>2]=k[c+16>>2];k[a+20>>2]=k[c+20>>2];j[a+24>>1]=j[c+24>>1]|0;i[a+26>>0]=i[c+26>>0]|0;k[c>>2]=k[g>>2];k[c+4>>2]=k[g+4>>2];k[c+8>>2]=k[g+8>>2];k[c+12>>2]=k[g+12>>2];k[c+16>>2]=k[g+16>>2];k[c+20>>2]=k[g+20>>2];j[c+24>>1]=j[g+24>>1]|0;i[c+26>>0]=i[g+26>>0]|0;f=1;break};k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];j[a+24>>1]=j[b+24>>1]|0;i[a+26>>0]=i[b+26>>0]|0;k[b>>2]=k[g>>2];k[b+4>>2]=k[g+4>>2];k[b+8>>2]=k[g+8>>2];k[b+12>>2]=k[g+12>>2];k[b+16>>2]=k[g+16>>2];k[b+20>>2]=k[g+20>>2];j[b+24>>1]=j[g+24>>1]|0;i[b+26>>0]=i[g+26>>0]|0;if(Za[k[e>>2]&7](c,b)|0){k[g>>2]=k[b>>2];k[g+4>>2]=k[b+4>>2];k[g+8>>2]=k[b+8>>2];k[g+12>>2]=k[b+12>>2];k[g+16>>2]=k[b+16>>2];k[g+20>>2]=k[b+20>>2];k[g+24>>2]=k[b+24>>2];k[g+28>>2]=k[b+28>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];j[b+24>>1]=j[c+24>>1]|0;i[b+26>>0]=i[c+26>>0]|0;k[c>>2]=k[g>>2];k[c+4>>2]=k[g+4>>2];k[c+8>>2]=k[g+8>>2];k[c+12>>2]=k[g+12>>2];k[c+16>>2]=k[g+16>>2];k[c+20>>2]=k[g+20>>2];j[c+24>>1]=j[g+24>>1]|0;i[c+26>>0]=i[g+26>>0]|0;f=2}else f=1}else if(f){k[g>>2]=k[b>>2];k[g+4>>2]=k[b+4>>2];k[g+8>>2]=k[b+8>>2];k[g+12>>2]=k[b+12>>2];k[g+16>>2]=k[b+16>>2];k[g+20>>2]=k[b+20>>2];k[g+24>>2]=k[b+24>>2];k[g+28>>2]=k[b+28>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];j[b+24>>1]=j[c+24>>1]|0;i[b+26>>0]=i[c+26>>0]|0;k[c>>2]=k[g>>2];k[c+4>>2]=k[g+4>>2];k[c+8>>2]=k[g+8>>2];k[c+12>>2]=k[g+12>>2];k[c+16>>2]=k[g+16>>2];k[c+20>>2]=k[g+20>>2];j[c+24>>1]=j[g+24>>1]|0;i[c+26>>0]=i[g+26>>0]|0;if(Za[k[e>>2]&7](b,a)|0){k[g>>2]=k[a>>2];k[g+4>>2]=k[a+4>>2];k[g+8>>2]=k[a+8>>2];k[g+12>>2]=k[a+12>>2];k[g+16>>2]=k[a+16>>2];k[g+20>>2]=k[a+20>>2];k[g+24>>2]=k[a+24>>2];k[g+28>>2]=k[a+28>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];j[a+24>>1]=j[b+24>>1]|0;i[a+26>>0]=i[b+26>>0]|0;k[b>>2]=k[g>>2];k[b+4>>2]=k[g+4>>2];k[b+8>>2]=k[g+8>>2];k[b+12>>2]=k[g+12>>2];k[b+16>>2]=k[g+16>>2];k[b+20>>2]=k[g+20>>2];j[b+24>>1]=j[g+24>>1]|0;i[b+26>>0]=i[g+26>>0]|0;f=2}else f=1}else f=0;while(0);if(!(Za[k[e>>2]&7](d,c)|0)){l=f;r=h;return l|0};k[g>>2]=k[c>>2];k[g+4>>2]=k[c+4>>2];k[g+8>>2]=k[c+8>>2];k[g+12>>2]=k[c+12>>2];k[g+16>>2]=k[c+16>>2];k[g+20>>2]=k[c+20>>2];k[g+24>>2]=k[c+24>>2];k[g+28>>2]=k[c+28>>2];k[c>>2]=k[d>>2];k[c+4>>2]=k[d+4>>2];k[c+8>>2]=k[d+8>>2];k[c+12>>2]=k[d+12>>2];k[c+16>>2]=k[d+16>>2];k[c+20>>2]=k[d+20>>2];j[c+24>>1]=j[d+24>>1]|0;i[c+26>>0]=i[d+26>>0]|0;k[d>>2]=k[g>>2];k[d+4>>2]=k[g+4>>2];k[d+8>>2]=k[g+8>>2];k[d+12>>2]=k[g+12>>2];k[d+16>>2]=k[g+16>>2];k[d+20>>2]=k[g+20>>2];j[d+24>>1]=j[g+24>>1]|0;i[d+26>>0]=i[g+26>>0]|0;if(!(Za[k[e>>2]&7](c,b)|0)){l=f+1|0;r=h;return l|0};k[g>>2]=k[b>>2];k[g+4>>2]=k[b+4>>2];k[g+8>>2]=k[b+8>>2];k[g+12>>2]=k[b+12>>2];k[g+16>>2]=k[b+16>>2];k[g+20>>2]=k[b+20>>2];k[g+24>>2]=k[b+24>>2];k[g+28>>2]=k[b+28>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];j[b+24>>1]=j[c+24>>1]|0;i[b+26>>0]=i[c+26>>0]|0;k[c>>2]=k[g>>2];k[c+4>>2]=k[g+4>>2];k[c+8>>2]=k[g+8>>2];k[c+12>>2]=k[g+12>>2];k[c+16>>2]=k[g+16>>2];k[c+20>>2]=k[g+20>>2];j[c+24>>1]=j[g+24>>1]|0;i[c+26>>0]=i[g+26>>0]|0;if(!(Za[k[e>>2]&7](b,a)|0)){l=f+2|0;r=h;return l|0};k[g>>2]=k[a>>2];k[g+4>>2]=k[a+4>>2];k[g+8>>2]=k[a+8>>2];k[g+12>>2]=k[a+12>>2];k[g+16>>2]=k[a+16>>2];k[g+20>>2]=k[a+20>>2];k[g+24>>2]=k[a+24>>2];k[g+28>>2]=k[a+28>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];j[a+24>>1]=j[b+24>>1]|0;i[a+26>>0]=i[b+26>>0]|0;k[b>>2]=k[g>>2];k[b+4>>2]=k[g+4>>2];k[b+8>>2]=k[g+8>>2];k[b+12>>2]=k[g+12>>2];k[b+16>>2]=k[g+16>>2];k[b+20>>2]=k[g+20>>2];j[b+24>>1]=j[g+24>>1]|0;i[b+26>>0]=i[g+26>>0]|0;l=f+3|0;r=h;return l|0}function Gc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,l=0,m=0,n=0;n=r;r=r+64|0;h=n+32|0;l=n;switch(b-a>>5|0){case 2:{d=b+-32|0;if(!(Za[k[c>>2]&7](d,a)|0)){a=1;r=n;return a|0};k[h>>2]=k[a>>2];k[h+4>>2]=k[a+4>>2];k[h+8>>2]=k[a+8>>2];k[h+12>>2]=k[a+12>>2];k[h+16>>2]=k[a+16>>2];k[h+20>>2]=k[a+20>>2];k[h+24>>2]=k[a+24>>2];k[h+28>>2]=k[a+28>>2];k[a>>2]=k[d>>2];k[a+4>>2]=k[d+4>>2];k[a+8>>2]=k[d+8>>2];k[a+12>>2]=k[d+12>>2];k[a+16>>2]=k[d+16>>2];k[a+20>>2]=k[d+20>>2];j[a+24>>1]=j[d+24>>1]|0;i[a+26>>0]=i[d+26>>0]|0;k[d>>2]=k[h>>2];k[d+4>>2]=k[h+4>>2];k[d+8>>2]=k[h+8>>2];k[d+12>>2]=k[h+12>>2];k[d+16>>2]=k[h+16>>2];k[d+20>>2]=k[h+20>>2];j[d+24>>1]=j[h+24>>1]|0;i[d+26>>0]=i[h+26>>0]|0;a=1;r=n;return a|0}case 3:{f=a+32|0;e=b+-32|0;b=Za[k[c>>2]&7](f,a)|0;d=Za[k[c>>2]&7](e,f)|0;if(!b){if(!d){a=1;r=n;return a|0};k[h>>2]=k[f>>2];k[h+4>>2]=k[f+4>>2];k[h+8>>2]=k[f+8>>2];k[h+12>>2]=k[f+12>>2];k[h+16>>2]=k[f+16>>2];k[h+20>>2]=k[f+20>>2];k[h+24>>2]=k[f+24>>2];k[h+28>>2]=k[f+28>>2];k[f>>2]=k[e>>2];k[f+4>>2]=k[e+4>>2];k[f+8>>2]=k[e+8>>2];k[f+12>>2]=k[e+12>>2];k[f+16>>2]=k[e+16>>2];k[f+20>>2]=k[e+20>>2];j[f+24>>1]=j[e+24>>1]|0;i[f+26>>0]=i[e+26>>0]|0;k[e>>2]=k[h>>2];k[e+4>>2]=k[h+4>>2];k[e+8>>2]=k[h+8>>2];k[e+12>>2]=k[h+12>>2];k[e+16>>2]=k[h+16>>2];k[e+20>>2]=k[h+20>>2];j[e+24>>1]=j[h+24>>1]|0;i[e+26>>0]=i[h+26>>0]|0;if(!(Za[k[c>>2]&7](f,a)|0)){a=1;r=n;return a|0};k[h>>2]=k[a>>2];k[h+4>>2]=k[a+4>>2];k[h+8>>2]=k[a+8>>2];k[h+12>>2]=k[a+12>>2];k[h+16>>2]=k[a+16>>2];k[h+20>>2]=k[a+20>>2];k[h+24>>2]=k[a+24>>2];k[h+28>>2]=k[a+28>>2];k[a>>2]=k[f>>2];k[a+4>>2]=k[f+4>>2];k[a+8>>2]=k[f+8>>2];k[a+12>>2]=k[f+12>>2];k[a+16>>2]=k[f+16>>2];k[a+20>>2]=k[f+20>>2];j[a+24>>1]=j[f+24>>1]|0;i[a+26>>0]=i[f+26>>0]|0;k[f>>2]=k[h>>2];k[f+4>>2]=k[h+4>>2];k[f+8>>2]=k[h+8>>2];k[f+12>>2]=k[h+12>>2];k[f+16>>2]=k[h+16>>2];k[f+20>>2]=k[h+20>>2];j[f+24>>1]=j[h+24>>1]|0;i[f+26>>0]=i[h+26>>0]|0;a=1;r=n;return a|0};k[h>>2]=k[a>>2];k[h+4>>2]=k[a+4>>2];k[h+8>>2]=k[a+8>>2];k[h+12>>2]=k[a+12>>2];k[h+16>>2]=k[a+16>>2];k[h+20>>2]=k[a+20>>2];k[h+24>>2]=k[a+24>>2];k[h+28>>2]=k[a+28>>2];if(d){k[a>>2]=k[e>>2];k[a+4>>2]=k[e+4>>2];k[a+8>>2]=k[e+8>>2];k[a+12>>2]=k[e+12>>2];k[a+16>>2]=k[e+16>>2];k[a+20>>2]=k[e+20>>2];j[a+24>>1]=j[e+24>>1]|0;i[a+26>>0]=i[e+26>>0]|0;k[e>>2]=k[h>>2];k[e+4>>2]=k[h+4>>2];k[e+8>>2]=k[h+8>>2];k[e+12>>2]=k[h+12>>2];k[e+16>>2]=k[h+16>>2];k[e+20>>2]=k[h+20>>2];j[e+24>>1]=j[h+24>>1]|0;i[e+26>>0]=i[h+26>>0]|0;a=1;r=n;return a|0};k[a>>2]=k[f>>2];k[a+4>>2]=k[f+4>>2];k[a+8>>2]=k[f+8>>2];k[a+12>>2]=k[f+12>>2];k[a+16>>2]=k[f+16>>2];k[a+20>>2]=k[f+20>>2];j[a+24>>1]=j[f+24>>1]|0;i[a+26>>0]=i[f+26>>0]|0;k[f>>2]=k[h>>2];k[f+4>>2]=k[h+4>>2];k[f+8>>2]=k[h+8>>2];k[f+12>>2]=k[h+12>>2];k[f+16>>2]=k[h+16>>2];k[f+20>>2]=k[h+20>>2];j[f+24>>1]=j[h+24>>1]|0;i[f+26>>0]=i[h+26>>0]|0;if(!(Za[k[c>>2]&7](e,f)|0)){a=1;r=n;return a|0};k[h>>2]=k[f>>2];k[h+4>>2]=k[f+4>>2];k[h+8>>2]=k[f+8>>2];k[h+12>>2]=k[f+12>>2];k[h+16>>2]=k[f+16>>2];k[h+20>>2]=k[f+20>>2];k[h+24>>2]=k[f+24>>2];k[h+28>>2]=k[f+28>>2];k[f>>2]=k[e>>2];k[f+4>>2]=k[e+4>>2];k[f+8>>2]=k[e+8>>2];k[f+12>>2]=k[e+12>>2];k[f+16>>2]=k[e+16>>2];k[f+20>>2]=k[e+20>>2];j[f+24>>1]=j[e+24>>1]|0;i[f+26>>0]=i[e+26>>0]|0;k[e>>2]=k[h>>2];k[e+4>>2]=k[h+4>>2];k[e+8>>2]=k[h+8>>2];k[e+12>>2]=k[h+12>>2];k[e+16>>2]=k[h+16>>2];k[e+20>>2]=k[h+20>>2];j[e+24>>1]=j[h+24>>1]|0;i[e+26>>0]=i[h+26>>0]|0;a=1;r=n;return a|0}case 4:{Fc(a,a+32|0,a+64|0,b+-32|0,c)|0;a=1;r=n;return a|0}case 5:{e=a+32|0;f=a+64|0;g=a+96|0;d=b+-32|0;Fc(a,e,f,g,c)|0;if(!(Za[k[c>>2]&7](d,g)|0)){a=1;r=n;return a|0};k[h>>2]=k[g>>2];k[h+4>>2]=k[g+4>>2];k[h+8>>2]=k[g+8>>2];k[h+12>>2]=k[g+12>>2];k[h+16>>2]=k[g+16>>2];k[h+20>>2]=k[g+20>>2];k[h+24>>2]=k[g+24>>2];k[h+28>>2]=k[g+28>>2];k[g>>2]=k[d>>2];k[g+4>>2]=k[d+4>>2];k[g+8>>2]=k[d+8>>2];k[g+12>>2]=k[d+12>>2];k[g+16>>2]=k[d+16>>2];k[g+20>>2]=k[d+20>>2];j[g+24>>1]=j[d+24>>1]|0;i[g+26>>0]=i[d+26>>0]|0;k[d>>2]=k[h>>2];k[d+4>>2]=k[h+4>>2];k[d+8>>2]=k[h+8>>2];k[d+12>>2]=k[h+12>>2];k[d+16>>2]=k[h+16>>2];k[d+20>>2]=k[h+20>>2];j[d+24>>1]=j[h+24>>1]|0;i[d+26>>0]=i[h+26>>0]|0;if(!(Za[k[c>>2]&7](g,f)|0)){a=1;r=n;return a|0};k[h>>2]=k[f>>2];k[h+4>>2]=k[f+4>>2];k[h+8>>2]=k[f+8>>2];k[h+12>>2]=k[f+12>>2];k[h+16>>2]=k[f+16>>2];k[h+20>>2]=k[f+20>>2];k[h+24>>2]=k[f+24>>2];k[h+28>>2]=k[f+28>>2];k[f>>2]=k[g>>2];k[f+4>>2]=k[g+4>>2];k[f+8>>2]=k[g+8>>2];k[f+12>>2]=k[g+12>>2];k[f+16>>2]=k[g+16>>2];k[f+20>>2]=k[g+20>>2];j[f+24>>1]=j[g+24>>1]|0;i[f+26>>0]=i[g+26>>0]|0;k[g>>2]=k[h>>2];k[g+4>>2]=k[h+4>>2];k[g+8>>2]=k[h+8>>2];k[g+12>>2]=k[h+12>>2];k[g+16>>2]=k[h+16>>2];k[g+20>>2]=k[h+20>>2];j[g+24>>1]=j[h+24>>1]|0;i[g+26>>0]=i[h+26>>0]|0;if(!(Za[k[c>>2]&7](f,e)|0)){a=1;r=n;return a|0};k[h>>2]=k[e>>2];k[h+4>>2]=k[e+4>>2];k[h+8>>2]=k[e+8>>2];k[h+12>>2]=k[e+12>>2];k[h+16>>2]=k[e+16>>2];k[h+20>>2]=k[e+20>>2];k[h+24>>2]=k[e+24>>2];k[h+28>>2]=k[e+28>>2];k[e>>2]=k[f>>2];k[e+4>>2]=k[f+4>>2];k[e+8>>2]=k[f+8>>2];k[e+12>>2]=k[f+12>>2];k[e+16>>2]=k[f+16>>2];k[e+20>>2]=k[f+20>>2];j[e+24>>1]=j[f+24>>1]|0;i[e+26>>0]=i[f+26>>0]|0;k[f>>2]=k[h>>2];k[f+4>>2]=k[h+4>>2];k[f+8>>2]=k[h+8>>2];k[f+12>>2]=k[h+12>>2];k[f+16>>2]=k[h+16>>2];k[f+20>>2]=k[h+20>>2];j[f+24>>1]=j[h+24>>1]|0;i[f+26>>0]=i[h+26>>0]|0;if(!(Za[k[c>>2]&7](e,a)|0)){a=1;r=n;return a|0};k[h>>2]=k[a>>2];k[h+4>>2]=k[a+4>>2];k[h+8>>2]=k[a+8>>2];k[h+12>>2]=k[a+12>>2];k[h+16>>2]=k[a+16>>2];k[h+20>>2]=k[a+20>>2];k[h+24>>2]=k[a+24>>2];k[h+28>>2]=k[a+28>>2];k[a>>2]=k[e>>2];k[a+4>>2]=k[e+4>>2];k[a+8>>2]=k[e+8>>2];k[a+12>>2]=k[e+12>>2];k[a+16>>2]=k[e+16>>2];k[a+20>>2]=k[e+20>>2];j[a+24>>1]=j[e+24>>1]|0;i[a+26>>0]=i[e+26>>0]|0;k[e>>2]=k[h>>2];k[e+4>>2]=k[h+4>>2];k[e+8>>2]=k[h+8>>2];k[e+12>>2]=k[h+12>>2];k[e+16>>2]=k[h+16>>2];k[e+20>>2]=k[h+20>>2];j[e+24>>1]=j[h+24>>1]|0;i[e+26>>0]=i[h+26>>0]|0;a=1;r=n;return a|0}case 1:case 0:{a=1;r=n;return a|0}default:{f=a+64|0;d=a+32|0;g=Za[k[c>>2]&7](d,a)|0;e=Za[k[c>>2]&7](f,d)|0;do if(g){k[h>>2]=k[a>>2];k[h+4>>2]=k[a+4>>2];k[h+8>>2]=k[a+8>>2];k[h+12>>2]=k[a+12>>2];k[h+16>>2]=k[a+16>>2];k[h+20>>2]=k[a+20>>2];k[h+24>>2]=k[a+24>>2];k[h+28>>2]=k[a+28>>2];if(e){k[a>>2]=k[f>>2];k[a+4>>2]=k[f+4>>2];k[a+8>>2]=k[f+8>>2];k[a+12>>2]=k[f+12>>2];k[a+16>>2]=k[f+16>>2];k[a+20>>2]=k[f+20>>2];j[a+24>>1]=j[f+24>>1]|0;i[a+26>>0]=i[f+26>>0]|0;k[f>>2]=k[h>>2];k[f+4>>2]=k[h+4>>2];k[f+8>>2]=k[h+8>>2];k[f+12>>2]=k[h+12>>2];k[f+16>>2]=k[h+16>>2];k[f+20>>2]=k[h+20>>2];j[f+24>>1]=j[h+24>>1]|0;i[f+26>>0]=i[h+26>>0]|0;break};k[a>>2]=k[d>>2];k[a+4>>2]=k[d+4>>2];k[a+8>>2]=k[d+8>>2];k[a+12>>2]=k[d+12>>2];k[a+16>>2]=k[d+16>>2];k[a+20>>2]=k[d+20>>2];j[a+24>>1]=j[d+24>>1]|0;i[a+26>>0]=i[d+26>>0]|0;k[d>>2]=k[h>>2];k[d+4>>2]=k[h+4>>2];k[d+8>>2]=k[h+8>>2];k[d+12>>2]=k[h+12>>2];k[d+16>>2]=k[h+16>>2];k[d+20>>2]=k[h+20>>2];j[d+24>>1]=j[h+24>>1]|0;i[d+26>>0]=i[h+26>>0]|0;if(Za[k[c>>2]&7](f,d)|0){k[h>>2]=k[d>>2];k[h+4>>2]=k[d+4>>2];k[h+8>>2]=k[d+8>>2];k[h+12>>2]=k[d+12>>2];k[h+16>>2]=k[d+16>>2];k[h+20>>2]=k[d+20>>2];k[h+24>>2]=k[d+24>>2];k[h+28>>2]=k[d+28>>2];k[d>>2]=k[f>>2];k[d+4>>2]=k[f+4>>2];k[d+8>>2]=k[f+8>>2];k[d+12>>2]=k[f+12>>2];k[d+16>>2]=k[f+16>>2];k[d+20>>2]=k[f+20>>2];j[d+24>>1]=j[f+24>>1]|0;i[d+26>>0]=i[f+26>>0]|0;k[f>>2]=k[h>>2];k[f+4>>2]=k[h+4>>2];k[f+8>>2]=k[h+8>>2];k[f+12>>2]=k[h+12>>2];k[f+16>>2]=k[h+16>>2];k[f+20>>2]=k[h+20>>2];j[f+24>>1]=j[h+24>>1]|0;i[f+26>>0]=i[h+26>>0]|0}}else if(e?(k[h>>2]=k[d>>2],k[h+4>>2]=k[d+4>>2],k[h+8>>2]=k[d+8>>2],k[h+12>>2]=k[d+12>>2],k[h+16>>2]=k[d+16>>2],k[h+20>>2]=k[d+20>>2],k[h+24>>2]=k[d+24>>2],k[h+28>>2]=k[d+28>>2],k[d>>2]=k[f>>2],k[d+4>>2]=k[f+4>>2],k[d+8>>2]=k[f+8>>2],k[d+12>>2]=k[f+12>>2],k[d+16>>2]=k[f+16>>2],k[d+20>>2]=k[f+20>>2],j[d+24>>1]=j[f+24>>1]|0,i[d+26>>0]=i[f+26>>0]|0,k[f>>2]=k[h>>2],k[f+4>>2]=k[h+4>>2],k[f+8>>2]=k[h+8>>2],k[f+12>>2]=k[h+12>>2],k[f+16>>2]=k[h+16>>2],k[f+20>>2]=k[h+20>>2],j[f+24>>1]=j[h+24>>1]|0,i[f+26>>0]=i[h+26>>0]|0,Za[k[c>>2]&7](d,a)|0):0){k[h>>2]=k[a>>2];k[h+4>>2]=k[a+4>>2];k[h+8>>2]=k[a+8>>2];k[h+12>>2]=k[a+12>>2];k[h+16>>2]=k[a+16>>2];k[h+20>>2]=k[a+20>>2];k[h+24>>2]=k[a+24>>2];k[h+28>>2]=k[a+28>>2];k[a>>2]=k[d>>2];k[a+4>>2]=k[d+4>>2];k[a+8>>2]=k[d+8>>2];k[a+12>>2]=k[d+12>>2];k[a+16>>2]=k[d+16>>2];k[a+20>>2]=k[d+20>>2];j[a+24>>1]=j[d+24>>1]|0;i[a+26>>0]=i[d+26>>0]|0;k[d>>2]=k[h>>2];k[d+4>>2]=k[h+4>>2];k[d+8>>2]=k[h+8>>2];k[d+12>>2]=k[h+12>>2];k[d+16>>2]=k[h+16>>2];k[d+20>>2]=k[h+20>>2];j[d+24>>1]=j[h+24>>1]|0;i[d+26>>0]=i[h+26>>0]|0}while(0);e=a+96|0;if((e|0)==(b|0)){a=1;r=n;return a|0}d=0;while(1){if(Za[k[c>>2]&7](e,f)|0){k[l>>2]=k[e>>2];k[l+4>>2]=k[e+4>>2];k[l+8>>2]=k[e+8>>2];k[l+12>>2]=k[e+12>>2];k[l+16>>2]=k[e+16>>2];k[l+20>>2]=k[e+20>>2];k[l+24>>2]=k[e+24>>2];k[l+28>>2]=k[e+28>>2];g=e;h=f;while(1){k[g>>2]=k[h>>2];k[g+4>>2]=k[h+4>>2];k[g+8>>2]=k[h+8>>2];k[g+12>>2]=k[h+12>>2];k[g+16>>2]=k[h+16>>2];k[g+20>>2]=k[h+20>>2];j[g+24>>1]=j[h+24>>1]|0;i[g+26>>0]=i[h+26>>0]|0;if((h|0)==(a|0))break;f=h+-32|0;if(Za[k[c>>2]&7](l,f)|0){g=h;h=f}else break}k[h>>2]=k[l>>2];k[h+4>>2]=k[l+4>>2];k[h+8>>2]=k[l+8>>2];k[h+12>>2]=k[l+12>>2];k[h+16>>2]=k[l+16>>2];k[h+20>>2]=k[l+20>>2];j[h+24>>1]=j[l+24>>1]|0;i[h+26>>0]=i[l+26>>0]|0;d=d+1|0;if((d|0)==8)break}f=e+32|0;if((f|0)==(b|0)){d=1;m=35;break}else{h=e;e=f;f=h}}if((m|0)==35){r=n;return d|0}a=(e+32|0)==(b|0);r=n;return a|0}}return 0}function Hc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0;l=r;r=r+48|0;j=l;i=Za[k[e>>2]&7](b,a)|0;f=Za[k[e>>2]&7](c,b)|0;do if(i){if(f){g=j;h=a;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=a;h=c;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=c;h=j;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));f=1;break}g=j;h=a;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=a;h=b;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=b;h=j;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));if(Za[k[e>>2]&7](c,b)|0){g=j;h=b;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=b;h=c;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=c;h=j;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));f=2}else f=1}else if(f){g=j;h=b;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=b;h=c;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=c;h=j;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));if(Za[k[e>>2]&7](b,a)|0){g=j;h=a;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=a;h=b;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=b;h=j;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));f=2}else f=1}else f=0;while(0);if(!(Za[k[e>>2]&7](d,c)|0)){d=f;r=l;return d|0}g=j;h=c;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=c;h=d;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=d;h=j;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));if(!(Za[k[e>>2]&7](c,b)|0)){d=f+1|0;r=l;return d|0}g=j;h=b;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=b;h=c;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=c;h=j;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));if(!(Za[k[e>>2]&7](b,a)|0)){d=f+2|0;r=l;return d|0}g=j;h=a;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=a;h=b;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=b;h=j;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));d=f+3|0;r=l;return d|0}function Ic(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0;n=r;r=r+48|0;m=n;switch((b-a|0)/44|0|0){case 2:{d=b+-44|0;if(!(Za[k[c>>2]&7](d,a)|0)){m=1;r=n;return m|0}g=m;j=a;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=a;j=d;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=d;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));m=1;r=n;return m|0}case 3:{f=a+44|0;e=b+-44|0;b=Za[k[c>>2]&7](f,a)|0;d=Za[k[c>>2]&7](e,f)|0;if(!b){if(!d){m=1;r=n;return m|0}g=m;j=f;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=f;j=e;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=e;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));if(!(Za[k[c>>2]&7](f,a)|0)){m=1;r=n;return m|0}g=m;j=a;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=a;j=f;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=f;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));m=1;r=n;return m|0}if(d){g=m;j=a;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=a;j=e;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=e;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));m=1;r=n;return m|0}g=m;j=a;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=a;j=f;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=f;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));if(!(Za[k[c>>2]&7](e,f)|0)){m=1;r=n;return m|0}g=m;j=f;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=f;j=e;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=e;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));m=1;r=n;return m|0}case 4:{Hc(a,a+44|0,a+88|0,b+-44|0,c)|0;m=1;r=n;return m|0}case 5:{e=a+44|0;f=a+88|0;h=a+132|0;d=b+-44|0;Hc(a,e,f,h,c)|0;if(!(Za[k[c>>2]&7](d,h)|0)){m=1;r=n;return m|0}g=m;j=h;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=h;j=d;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=d;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));if(!(Za[k[c>>2]&7](h,f)|0)){m=1;r=n;return m|0}g=m;j=f;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=f;j=h;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=h;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));if(!(Za[k[c>>2]&7](f,e)|0)){m=1;r=n;return m|0}g=m;j=e;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=e;j=f;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=f;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));if(!(Za[k[c>>2]&7](e,a)|0)){m=1;r=n;return m|0}g=m;j=a;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=a;j=e;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=e;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));m=1;r=n;return m|0}case 1:case 0:{m=1;r=n;return m|0}default:{f=a+88|0;e=a+44|0;l=Za[k[c>>2]&7](e,a)|0;d=Za[k[c>>2]&7](f,e)|0;do if(l){if(d){g=m;j=a;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=a;j=f;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=f;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));break}g=m;j=a;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=a;j=e;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=e;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));if(Za[k[c>>2]&7](f,e)|0){g=m;j=e;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=e;j=f;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=f;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0))}}else if(d){g=m;j=e;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=e;j=f;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=f;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));if(Za[k[c>>2]&7](e,a)|0){g=m;j=a;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=a;j=e;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=e;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0))}}while(0);e=a+132|0;if((e|0)==(b|0)){m=1;r=n;return m|0}d=0;i=0;while(1){if(Za[k[c>>2]&7](e,f)|0){g=m;j=e;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=e;h=f;while(1){j=h;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));if((h|0)==(a|0))break;f=h+-44|0;if(Za[k[c>>2]&7](m,f)|0){g=h;h=f}else break}g=h;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));f=i+1|0;h=(f|0)==8;i=e+44|0;d=h?(i|0)==(b|0):d;if(h){e=34;break}else{g=f;f=h?i:e}}else{g=i;f=e}e=f+44|0;if((e|0)==(b|0)){d=1;e=34;break}else i=g}if((e|0)==34){r=n;return d|0}}}return 0}\\nfunction $a(a){a=a|0;var b=0;b=r;r=r+a|0;r=r+15&-16;return b|0}function ab(){return r|0}function bb(a){a=a|0;r=a}function cb(a,b){a=a|0;b=b|0;r=a;s=b}function db(a,b){a=a|0;b=b|0;if(!w){w=a;x=b}}function eb(a){a=a|0;i[t>>0]=i[a>>0];i[t+1>>0]=i[a+1>>0];i[t+2>>0]=i[a+2>>0];i[t+3>>0]=i[a+3>>0]}function fb(a){a=a|0;i[t>>0]=i[a>>0];i[t+1>>0]=i[a+1>>0];i[t+2>>0]=i[a+2>>0];i[t+3>>0]=i[a+3>>0];i[t+4>>0]=i[a+4>>0];i[t+5>>0]=i[a+5>>0];i[t+6>>0]=i[a+6>>0];i[t+7>>0]=i[a+7>>0]}function gb(a){a=a|0;L=a}function hb(){return L|0}function ib(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;i=d+4|0;e=_d((((k[i>>2]|0)-(k[d>>2]|0)|0)/12|0)<<2)|0;k[a>>2]=e;e=((k[i>>2]|0)-(k[d>>2]|0)|0)/12|0;k[b>>2]=e;e=_d(e<<2)|0;k[c>>2]=e;b=k[d>>2]|0;if((k[i>>2]|0)==(b|0))return;f=0;while(1){j=b+(f*12|0)+4|0;h=b+(f*12|0)|0;g=(k[j>>2]|0)-(k[h>>2]|0)|0;k[e+(f<<2)>>2]=g>>3;g=_d(g<<1|4)|0;k[(k[a>>2]|0)+(f<<2)>>2]=g;g=(g&4|0)==0?g:g+4|0;b=k[j>>2]|0;h=k[h>>2]|0;if((b|0)!=(h|0)){b=b-h>>3;e=0;do{j=e<<1;p[g+(j<<3)>>3]=+(k[h+(e<<3)>>2]|0);p[g+((j|1)<<3)>>3]=+(k[h+(e<<3)+4>>2]|0);e=e+1|0}while(e>>>0<b>>>0)}f=f+1|0;b=k[d>>2]|0;if(f>>>0>=(((k[i>>2]|0)-b|0)/12|0)>>>0)break;e=k[c>>2]|0}return}function jb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,l=0,m=0,n=0,o=0,q=0,s=0;q=r;r=r+16|0;n=q+8|0;e=q;l=d+4|0;h=((k[l>>2]|0)-(k[d>>2]|0)|0)/12|0;k[e>>2]=h;k[e+4>>2]=h<<2;Nd(880,e);e=_d((((k[l>>2]|0)-(k[d>>2]|0)|0)/12|0)<<2)|0;k[a>>2]=e;e=((k[l>>2]|0)-(k[d>>2]|0)|0)/12|0;k[b>>2]=e;k[n>>2]=e;k[n+4>>2]=e<<2;Nd(892,n);e=_d((((k[l>>2]|0)-(k[d>>2]|0)|0)/12|0)<<2)|0;k[c>>2]=e;b=k[d>>2]|0;a:do if((k[l>>2]|0)!=(b|0)){f=0;while(1){s=b+(f*12|0)+4|0;h=b+(f*12|0)|0;g=((k[s>>2]|0)-(k[h>>2]|0)|0)/12|0;k[e+(f<<2)>>2]=g;g=_d(g*24|4)|0;k[(k[a>>2]|0)+(f<<2)>>2]=g;g=(g&4|0)==0?g:g+4|0;b=k[s>>2]|0;h=k[h>>2]|0;if((b|0)!=(h|0)){b=(b-h|0)/12|0;e=0;do{s=e*3|0;p[g+(s<<3)>>3]=+(k[h+(e*12|0)>>2]|0);p[g+(s+1<<3)>>3]=+(k[h+(e*12|0)+4>>2]|0);p[g+(s+2<<3)>>3]=+(k[h+(e*12|0)+8>>2]|0);e=e+1|0}while(e>>>0<b>>>0)}f=f+1|0;b=k[d>>2]|0;if(f>>>0>=(((k[l>>2]|0)-b|0)/12|0)>>>0)break a;e=k[c>>2]|0}}while(0);g=(k[87]|0)>-1;b:do if(!0){b=904;o=11}else{b=904;e=904;while(1){if(!(i[b>>0]|0)){b=e;break b}b=b+1|0;e=b;if(!(e&3)){o=11;break}}}while(0);if((o|0)==11){while(1){e=k[b>>2]|0;if(!((e&-2139062144^-2139062144)&e+-16843009))b=b+4|0;else break}if((e&255)<<24>>24)do b=b+1|0;while((i[b>>0]|0)!=0)}f=b-904|0;b=k[72]|0;e=(b|0)==0;c:do if(g){do if(e){b=i[346]|0;i[346]=b+255|b;b=k[68]|0;if(!(b&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;b=e+(k[80]|0)|0;k[72]=b;break}else{k[68]=b|32;m=0;o=33;break c}}else e=k[73]|0;while(0);if((b-e|0)>>>0<f>>>0){m=Ta[k[308>>2]&7](272,904,f)|0;o=33;break}else{fe(e|0,904,f|0)|0;k[73]=(k[73]|0)+f;break}}else{do if(e){b=i[346]|0;i[346]=b+255|b;b=k[68]|0;if(!(b&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;b=e+(k[80]|0)|0;k[72]=b;break}else{k[68]=b|32;m=0;o=33;break c}}else e=k[73]|0;while(0);if((b-e|0)>>>0<f>>>0){m=Ta[k[308>>2]&7](272,904,f)|0;o=33;break}else{fe(e|0,904,f|0)|0;k[73]=(k[73]|0)+f;break}}while(0);if(((o|0)==33?(m|0)!=(f|0):0)?(((m>>>0)/(f>>>0)|0)+-1|0)<0:0){r=q;return}f=i[347]|0;if(f<<24>>24!=10){b=k[73]|0;e=k[72]|0;if(b>>>0<e>>>0){k[73]=b+1;i[b>>0]=10;r=q;return}}else e=k[72]|0;i[n>>0]=10;do if(!e){f=j[173]|0;b=(f&65535)<<24>>24;i[346]=b+255|b;b=k[68]|0;if(!(b&8)){k[70]=0;k[69]=0;g=k[79]|0;k[75]=g;k[73]=g;e=g+(k[80]|0)|0;k[72]=e;b=(f&65535)>>>8&255;o=44;break}else{k[68]=b|32;break}}else{g=k[73]|0;b=f;o=44}while(0);do if((o|0)==44)if(g>>>0>=e>>>0|b<<24>>24==10){Ta[k[308>>2]&7](272,n,1)|0;break}else{k[73]=g+1;i[g>>0]=10;break}while(0);r=q;return}function kb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0.0,i=0,j=0,l=0,m=0,n=0.0,o=0,q=0.0,r=0,s=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0;k[a>>2]=0;C=a+4|0;k[C>>2]=0;k[a+8>>2]=0;if((c|0)<=0)return;D=a+8|0;i=0;g=0;e=0;a:while(1){if(i>>>0>=g>>>0){l=k[a>>2]|0;f=l;m=(i-f|0)/12|0;o=m+1|0;if(o>>>0>357913941){E=6;break}f=(g-f|0)/12|0;if(f>>>0<178956970){f=f<<1;f=f>>>0<o>>>0?o:f;if(!f){f=0;g=0;j=l}else E=9}else{f=357913941;E=9}if((E|0)==9){E=0;j=f*12|0;j=(j|0)==0?1:j;g=_d(j)|0;if(!g){do{g=k[35]|0;k[35]=g+0;if(!g){E=12;break a}Xa[g&0]();g=_d(j)|0}while((g|0)==0);j=k[a>>2]|0;i=k[C>>2]|0}else j=l}l=g+(m*12|0)|0;m=l;r=g+(f*12|0)|0;s=g+(o*12|0)|0;o=s;k[l>>2]=0;k[l+4>>2]=0;k[l+8>>2]=0;if((i|0)==(j|0)){f=i;g=m;i=f}else{f=l;g=m;do{B=f+-12|0;A=i;i=i+-12|0;k[B>>2]=0;z=f+-8|0;k[z>>2]=0;k[f+-4>>2]=0;k[B>>2]=k[i>>2];B=A+-8|0;k[z>>2]=k[B>>2];A=A+-4|0;k[f+-4>>2]=k[A>>2];k[A>>2]=0;k[B>>2]=0;k[i>>2]=0;f=g+-12|0;g=f}while((i|0)!=(j|0));i=k[a>>2]|0;f=k[C>>2]|0}k[a>>2]=g;k[C>>2]=o;k[D>>2]=r;o=i;if((f|0)!=(o|0))do{g=f;f=f+-12|0;l=k[f>>2]|0;m=l;if(l){g=g+-8|0;j=k[g>>2]|0;if((j|0)!=(l|0))k[g>>2]=j+(~((j+-8-m|0)>>>3)<<3);$d(l)}}while((f|0)!=(o|0));if(!i)f=s;else{$d(i);f=s}}else{k[i>>2]=0;k[i+4>>2]=0;k[i+8>>2]=0;f=i+12|0;k[C>>2]=f}y=f+-12|0;z=k[b+(e<<2)>>2]|0;A=k[d+(e<<2)>>2]|0;if((A|0)>0){B=f+-8|0;w=f+-4|0;x=0;do{i=x<<1;h=+p[z+(i<<3)>>3];p[t>>3]=h;f=k[t+4>>2]|0;g=de(k[t>>2]|0,f|0,52)|0;g=g&2047;do if(g>>>0<=1074){f=(f|0)<0;q=f?-h:h;if(g>>>0<1022){h=h*0.0;break}n=q+4503599627370496.0+-4503599627370496.0-q;if(!(n>.5)){h=q+n;if(n<=-.5)h=h+1.0}else h=q+n+-1.0;h=f?-h:h}while(0);v=~~h;h=+p[z+((i|1)<<3)>>3];p[t>>3]=h;f=k[t+4>>2]|0;g=de(k[t>>2]|0,f|0,52)|0;g=g&2047;do if(g>>>0<=1074){f=(f|0)<0;q=f?-h:h;if(g>>>0<1022){h=h*0.0;break}n=q+4503599627370496.0+-4503599627370496.0-q;if(!(n>.5)){h=q+n;if(n<=-.5)h=h+1.0}else h=q+n+-1.0;h=f?-h:h}while(0);l=~~h;g=k[B>>2]|0;f=k[w>>2]|0;if(g>>>0>=f>>>0){u=k[y>>2]|0;r=u;s=g-r>>3;o=s+1|0;if(o>>>0>536870911){E=48;break a}f=f-r|0;if(f>>3>>>0<268435455){f=f>>2;f=f>>>0<o>>>0?o:f;if(!f){j=0;i=0}else E=51}else{f=536870911;E=51}if((E|0)==51){E=0;j=f<<3;j=(j|0)==0?1:j;i=_d(j)|0;if(!i)do{i=k[35]|0;k[35]=i+0;if(!i){E=54;break a}Xa[i&0]();i=_d(j)|0}while((i|0)==0);j=f}f=i+(s<<3)|0;m=i+(j<<3)|0;k[f>>2]=v;k[i+(s<<3)+4>>2]=l;l=i+(o<<3)|0;if((g|0)!=(u|0)){j=g+-8|0;while(1){v=g;g=g+-8|0;k[f+-8>>2]=k[g>>2];k[f+-4>>2]=k[v+-4>>2];if((g|0)==(u|0))break;else f=f+-8|0}f=i+(s+~((j-r|0)>>>3)<<3)|0}k[y>>2]=f;k[B>>2]=l;k[w>>2]=m;if(u)$d(u)}else{k[g>>2]=v;k[g+4>>2]=l;k[B>>2]=g+8}x=x+1|0}while((x|0)<(A|0))}e=e+1|0;if((e|0)>=(c|0)){E=65;break}i=k[C>>2]|0;g=k[D>>2]|0}if((E|0)==6)xa(1340,1363,303,1438);else if((E|0)==12){E=ya(4)|0;k[E>>2]=128;La(E|0,8,1)}else if((E|0)==48)xa(1340,1363,303,1438);else if((E|0)==54){E=ya(4)|0;k[E>>2]=128;La(E|0,8,1)}else if((E|0)==65)return}function lb(a,b,c,d,e,f,g,h,m,n){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;m=m|0;n=n|0;var o=0,q=0,s=0,t=0,u=0.0,v=0.0,w=0,x=0.0,y=0,z=0.0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0;Y=r;r=r+112|0;P=Y+96|0;N=Y+72|0;O=Y+56|0;W=Y+44|0;V=Y+32|0;T=Y+20|0;R=Y+8|0;Q=Y;kb(W,a,b,c);kb(V,d,e,f);k[g>>2]=0;b=k[W>>2]|0;X=W+4|0;e=k[X>>2]|0;if((b|0)!=(e|0)?(o=k[V>>2]|0,q=k[V+4>>2]|0,(o|0)!=(q|0)):0){k[T>>2]=0;S=T+4|0;k[S>>2]=0;k[T+8>>2]=0;if(b>>>0<e>>>0){do{mb(T,k[b>>2]|0,k[b+4>>2]|0,0);b=b+12|0}while(b>>>0<e>>>0);e=k[T>>2]|0;a=k[S>>2]|0;c=a;if((e|0)==(a|0)){f=e;b=e;e=c}else{b=e;do{i[b+4>>0]=1;b=b+32|0}while((b|0)!=(a|0));f=e;b=a;e=c}}else{f=0;b=0;e=0}if(o>>>0<q>>>0){do{mb(T,k[o>>2]|0,k[o+4>>2]|0,1);o=o+12|0}while(o>>>0<q>>>0);c=k[S>>2]|0;b=c;o=k[T>>2]|0}else{o=f;c=e}if((b|0)!=(o|0)){a=o;b=b-a>>5;e=0;do{k[o+(e<<5)+4+4>>2]=e;e=e+1|0}while(e>>>0<b>>>0);o=a}k[P>>2]=0;J=P+4|0;k[J>>2]=0;k[P+8>>2]=0;I=o;C=c-o>>5;A=P+8|0;B=(C|0)!=0;a:do if(B){b=C*24|0;o=_d(b)|0;b:do if(!o){while(1){o=k[35]|0;k[35]=o+0;if(!o)break;Xa[o&0]();o=_d(b)|0;if(o)break b}Y=ya(4)|0;k[Y>>2]=128;La(Y|0,8,1)}while(0);s=o;q=o+(C*24|0)|0;k[P>>2]=s;k[J>>2]=s;k[A>>2]=q;s=N+4|0;t=N+8|0;w=N+12|0;y=N+16|0;b=0;while(1){e=k[I+(b<<5)+12>>2]|0;a=k[I+(b<<5)+16>>2]|0;c=k[I+(b<<5)+20>>2]|0;f=k[I+(b<<5)+24>>2]|0;d=k[I+(b<<5)+28>>2]|0;k[N>>2]=e;k[s>>2]=a;k[t>>2]=c;k[w>>2]=f;H=y;k[H>>2]=b;k[H+4>>2]=d;if(o>>>0<q>>>0){k[o>>2]=e;k[o+4>>2]=a;k[o+8>>2]=c;k[o+12>>2]=f;k[o+16>>2]=b;k[o+20>>2]=d;k[J>>2]=o+24}else Db(P,N);b=b+1|0;if(b>>>0>=C>>>0){o=0;break a}o=k[J>>2]|0;q=k[A>>2]|0}}else o=1;while(0);k[O>>2]=0;H=O+4|0;k[H>>2]=0;k[O+8>>2]=0;e=O+8|0;if(B){if(o)o=0;else{b=C*24|0;o=_d(b)|0;c:do if(!o){while(1){o=k[35]|0;k[35]=o+0;if(!o)break;Xa[o&0]();o=_d(b)|0;if(o)break c}Y=ya(4)|0;k[Y>>2]=128;La(Y|0,8,1)}while(0)}G=o;k[O>>2]=G;k[H>>2]=G;k[e>>2]=o+(C*24|0)}Eb(O,k[P>>2]|0,k[J>>2]|0);G=k[H>>2]|0;a=k[O>>2]|0;e=(G-a|0)/24|0;c=(G|0)==(a|0);d:do if(!c){b=e<<5;b=(b|0)==0?1:b;o=_d(b)|0;do if(!o){while(1){o=k[35]|0;k[35]=o+0;if(!o){U=39;break}Xa[o&0]();o=_d(b)|0;if(o){U=40;break}}if((U|0)==39){Y=ya(4)|0;k[Y>>2]=128;La(Y|0,8,1)}else if((U|0)==40){f=o;b=o+(e<<5)|0;e=b;if(c){M=f;K=f;L=e;break d}else{F=a;E=f;a=f;break}}}else{D=o;e=o+(e<<5)|0;F=a;b=e;E=D;a=D}while(0);e:while(1){t=k[F+16>>2]|0;q=k[I+(t<<5)>>2]|0;t=I+(t<<5)+4|0;s=k[t>>2]|0;t=k[t+4>>2]|0;w=k[F>>2]|0;y=k[F+4>>2]|0;A=k[F+8>>2]|0;B=k[F+12>>2]|0;C=k[F+20>>2]|0;if((o|0)==(b|0)){c=a;D=E;f=a-E>>5;d=f+1|0;if(d>>>0>134217727){U=44;break}o=e-E|0;if(o>>5>>>0<67108863){o=o>>4;o=o>>>0<d>>>0?d:o;if(!o){e=0;a=0}else U=47}else{o=134217727;U=47}if((U|0)==47){U=0;e=o<<5;e=(e|0)==0?1:e;b=_d(e)|0;if(!b)do{b=k[35]|0;k[35]=b+0;if(!b){U=50;break e}Xa[b&0]();b=_d(e)|0}while((b|0)==0);e=o;a=b}b=a+(f<<5)|0;o=b;e=a+(e<<5)|0;k[b>>2]=q;q=a+(f<<5)+4|0;k[q>>2]=s;k[q+4>>2]=t;k[a+(f<<5)+12>>2]=w;k[a+(f<<5)+16>>2]=y;k[a+(f<<5)+20>>2]=A;k[a+(f<<5)+24>>2]=B;k[a+(f<<5)+28>>2]=C;a=a+(d<<5)|0;if((c|0)!=(D|0))do{C=c;c=c+-32|0;k[b+-32>>2]=k[c>>2];y=C+-28|0;A=k[y+4>>2]|0;B=b+-28|0;k[B>>2]=k[y>>2];k[B+4>>2]=A;k[b+-20>>2]=k[C+-20>>2];k[b+-16>>2]=k[C+-16>>2];k[b+-12>>2]=k[C+-12>>2];k[b+-8>>2]=k[C+-8>>2];k[b+-4>>2]=k[C+-4>>2];b=o+-32|0;o=b}while((c|0)!=(D|0));if(!E)c=o;else{$d(E);c=o}}else{k[o>>2]=q;c=o+4|0;k[c>>2]=s;k[c+4>>2]=t;k[o+12>>2]=w;k[o+16>>2]=y;k[o+20>>2]=A;k[o+24>>2]=B;k[o+28>>2]=C;c=E;a=a+32|0}o=F+24|0;if((o|0)==(G|0)){M=c;K=a;L=e;break d}F=o;o=a;b=e;E=c}if((U|0)==44)xa(1340,1363,303,1438);else if((U|0)==50){Y=ya(4)|0;k[Y>>2]=128;La(Y|0,8,1)}}else{M=0;K=0;L=0}while(0);o=k[T>>2]|0;b=o;if(!o)o=T+8|0;else{e=k[S>>2]|0;if((e|0)!=(o|0))k[S>>2]=e+(~((e+-32-b|0)>>>5)<<5);$d(o);o=T+8|0;k[o>>2]=0;k[S>>2]=0;k[T>>2]=0}k[T>>2]=M;k[S>>2]=K;k[o>>2]=L;b=k[O>>2]|0;e=b;a=M;if(b){o=k[H>>2]|0;if((o|0)!=(b|0))k[H>>2]=o+(~(((o+-24-e|0)>>>0)/24|0)*24|0);$d(b)}o=k[P>>2]|0;b=o;if(o){e=k[J>>2]|0;if((e|0)!=(o|0))k[J>>2]=e+(~(((e+-24-b|0)>>>0)/24|0)*24|0);$d(o)}J=k[S>>2]|0;k[P>>2]=1;ob(a,J,P);do if((a|0)!=(J|0)){K=N+4|0;I=k[a+12>>2]|0;f=0;E=0;d=0;w=0;s=0;o=a;b=0;c=0;e=0;f:while(1){if(d){F=0;t=E;H=J;G=b}else{t=o;q=b;while(1){if((k[t+12>>2]|0)!=(I|0)){o=1;a=t;b=q;break};k[K>>2]=0;k[K+4>>2]=0;i[K+8>>0]=0;i[O>>0]=0;o=e;do if((o|0)==(c|0)){d=e-q|0;a=d>>5;f=a+1|0;if(f>>>0>134217727){U=78;break f}if(a>>>0<67108863){e=d>>4;e=e>>>0<f>>>0?f:e}else e=134217727;b=e<<5;b=(b|0)==0?1:b;o=_d(b)|0;if(!o)do{o=k[35]|0;k[35]=o+0;if(!o){U=84;break f}Xa[o&0]();o=_d(b)|0}while((o|0)==0);c=o+(e<<5)|0;k[o+(a<<5)>>2]=0;k[o+(a<<5)+4>>2]=0;k[o+(a<<5)+8>>2]=t;b=o+(a<<5)+12|0;k[b>>2]=k[N>>2];k[b+4>>2]=k[N+4>>2];k[b+8>>2]=k[N+8>>2];i[b+12>>0]=i[N+12>>0]|0;i[o+(a<<5)+25>>0]=1;a=o+(a<<5)+26|0;j[a>>1]=j[O>>1]|0;j[a+2>>1]=j[O+2>>1]|0;j[a+4>>1]=j[O+4>>1]|0;a=o+(f<<5)|0;b=o;e=q;fe(o|0,e|0,d|0)|0;if(!q){e=a;break}$d(e);e=a}else{k[o>>2]=0;k[o+4>>2]=0;k[o+8>>2]=t;b=o+12|0;k[b>>2]=k[N>>2];k[b+4>>2]=k[N+4>>2];k[b+8>>2]=k[N+8>>2];i[b+12>>0]=i[N+12>>0]|0;i[o+25>>0]=1;b=o+26|0;j[b>>1]=j[O>>1]|0;j[b+2>>1]=j[O+2>>1]|0;j[b+4>>1]=j[O+4>>1]|0;b=q;e=o+32|0}while(0);t=t+32|0;if((t|0)==(J|0)){o=0;a=J;break}else q=b}F=o;t=b;f=e;H=a;G=b}if((t|0)!=(f|0)){z=+(I|0);d=t;do{o=k[d+8>>2]|0;b=k[o+16>>2]|0;q=k[o+20>>2]|0;a=k[o+24>>2]|0;do if((b|0)==(a|0)){u=+(b|0);o=k[o+12>>2]|0}else{o=k[o+12>>2]|0;x=+(o|0);u=+(b|0);v=z-x;if(v==0.0)break;u=u+(+(a|0)-u)*v/(+(q|0)-x)}while(0);p[d+16>>3]=u;i[d+24>>0]=((I|0)==(q|0)|(I|0)==(o|0))&1;d=d+32|0}while((d|0)!=(f|0))}k[P>>2]=2;qb(t,f,P);E=G;D=e;if((E|0)==(D|0)){o=E;q=w}else{C=E;o=G;t=w;while(1){a=C+32|0;b=a;g:do if(!((a|0)==(D|0)|(i[C+24>>0]|0)==0)){d=C+16|0;f=C;while(1){if(!(i[f+56>>0]|0))break g;if(!(+p[f+48>>3]==+p[d>>3]))break g;f=a+32|0;b=f;if((f|0)==(D|0))break;else{M=a;a=f;f=M}}}while(0);a=o;B=a>>>0<b>>>0;if(B){f=a;do{q=k[f+8>>2]|0;d=k[q+12>>2]|0;q=k[q+20>>2]|0;if((d|0)!=(q|0)){i[f+25>>0]=(I|0)==(d|0)&1;i[f+26>>0]=(I|0)==(q|0)&1}f=f+32|0}while(f>>>0<b>>>0)}if((C|0)==(b|0))q=t;else{A=b+25|0;d=o;q=t;while(1){f=d;h:do if((f|0)==(b|0)){f=d;d=q;U=111}else{w=q;while(1){t=k[f+8>>2]|0;q=i[f+25>>0]|0;if((k[t+12>>2]|0)==(k[t+20>>2]|0)){f=d;y=s;d=w;break h}q=q<<24>>24==0;if(!q)k[f>>2]=s;do if(!(i[t+4>>0]|0)){if(q)d=(k[t+28>>2]|0)+w|0;else d=w;if(i[f+26>>0]|0){t=d;break}s=(k[t+28>>2]|0)+s|0;t=d}else t=w;while(0);if(!q)k[f+4>>2]=s;f=f+32|0;d=f;if((f|0)==(b|0)){f=d;d=t;U=111;break}else w=t}}while(0);if((U|0)==111){U=0;q=i[A>>0]|0;y=s}w=f;i:do if((w|0)==(b|0))q=d;else{t=w;while(1){s=k[t+8>>2]|0;if((k[s+12>>2]|0)!=(k[s+20>>2]|0)){t=w;break}if((i[t+25>>0]|0)!=q<<24>>24){t=w;break}k[t>>2]=d;if(!(i[s+4>>0]|0))d=(k[s+28>>2]|0)+d|0;k[t+4>>2]=d;t=t+32|0;if((t|0)==(b|0)){t=w;break}}do{s=k[t+8>>2]|0;if((k[s+12>>2]|0)!=(k[s+20>>2]|0))break;if((i[t+25>>0]|0)!=q<<24>>24)break;if(!(i[s+4>>0]|0))d=d-(k[s+28>>2]|0)|0;t=t+32|0}while((t|0)!=(b|0));s=w;while(1){M=k[s+8>>2]|0;if((k[M+12>>2]|0)!=(k[M+20>>2]|0)){q=d;break i}if((i[s+25>>0]|0)!=q<<24>>24){q=d;break i}s=s+32|0;f=s;if((s|0)==(b|0)){q=d;break}}}while(0);if((f|0)==(b|0)){f=C;break}else{d=f;s=y}}do{if(!(k[f>>2]|0))d=0;else d=(k[f+4>>2]|0)!=0;i[(k[f+8>>2]|0)+5>>0]=d&1;f=f+32|0}while((f|0)!=(b|0));s=y}j:do if(B)do{M=k[a+8>>2]|0;if((k[M+12>>2]|0)==(k[M+20>>2]|0)?(i[a+26>>0]|0)==0:0)break j;a=a+32|0;o=a}while(a>>>0<b>>>0);while(0);C=o;if(C>>>0<b>>>0){a=C;do{p[a+16>>3]=+(k[(k[a+8>>2]|0)+24>>2]|0);i[a+25>>0]=0;i[a+26>>0]=1;a=a+32|0}while(a>>>0<b>>>0)}if((C|0)==(D|0)){o=D;break}else t=q}}k:do if((E|0)==(o|0)){b=E;U=151}else{b=E;do{if(i[b+26>>0]|0){U=151;break k}b=b+32|0}while((b|0)!=(o|0))}while(0);l:do if((U|0)==151){U=0;a=b;if((b|0)==(o|0)){o=a;break}else{d=a;b=a}while(1){do{a=b;f=a+32|0;b=f;if((f|0)==(o|0)){o=d;break l}}while((i[a+58>>0]|0)!=0);M=d;k[M>>2]=k[f>>2];k[M+4>>2]=k[f+4>>2];k[M+8>>2]=k[f+8>>2];k[M+12>>2]=k[f+12>>2];k[M+16>>2]=k[f+16>>2];k[M+20>>2]=k[f+20>>2];j[M+24>>1]=j[f+24>>1]|0;i[M+26>>0]=i[f+26>>0]|0;d=d+32|0}}while(0);b=o;do if((b|0)==(D|0))f=D;else{L=E+((o-G>>5)+(e-o>>5)<<5)|0;M=e-L|0;he(o|0,L|0,M|0)|0;o=b+(M>>5<<5)|0;if((D|0)==(o|0)){f=D;break}e=D+(~((D+-32-o|0)>>>5)<<5)|0;f=e}while(0);a=(E|0)==(f|0);if(a)o=2147483647;else{b=E;o=2147483647;do{M=k[(k[b+8>>2]|0)+20>>2]|0;o=(M|0)<(o|0)?M:o;b=b+32|0}while((b|0)!=(f|0))}if(F){M=k[H+12>>2]|0;o=(M|0)<(o|0)?M:o}d=(H|0)==(J|0);if(a&d){U=164;break}else{I=o;w=q;o=H;b=G}}if((U|0)==78)xa(1340,1363,303,1438);else if((U|0)==84){Y=ya(4)|0;k[Y>>2]=128;La(Y|0,8,1)}else if((U|0)==164){if(!G)break;$d(G);break}}while(0);o=k[T>>2]|0;f=k[S>>2]|0;rb(o,f);if((o|0)!=(f|0))do{P=k[o+28>>2]|0;b=o+12|0;e=k[b>>2]|0;a=o+20|0;c=k[a>>2]|0;if((((e|0)==(c|0)?0-P|0:P)|0)<0){N=o+16|0;O=k[N>>2]|0;k[b>>2]=c;P=o+24|0;k[N>>2]=k[P>>2];k[a>>2]=e;k[P>>2]=O}o=o+32|0}while((o|0)!=(f|0));k[R>>2]=0;K=R+4|0;k[K>>2]=0;k[R+8>>2]=0;o=_d(12)|0;m:do if(!o){while(1){o=k[35]|0;k[35]=o+0;if(!o)break;Xa[o&0]();o=_d(12)|0;if(o)break m}Y=ya(4)|0;k[Y>>2]=128;La(Y|0,8,1)}while(0);k[K>>2]=o;k[R>>2]=o;J=R+8|0;k[J>>2]=o+12;k[o>>2]=0;k[o+4>>2]=0;k[o+8>>2]=0;c=o+12|0;k[K>>2]=c;e=k[k[W>>2]>>2]|0;a=k[e>>2]|0;e=k[e+4>>2]|0;o=k[T>>2]|0;b=k[S>>2]|0;k[Q>>2]=a;I=Q+4|0;k[I>>2]=e;n:do if((o|0)!=(b|0)){f=o;H=o;s=c;t=0;o:while(1){o=f+4|0;if(!(i[o>>0]|0)){U=222;break n}G=H;p:do if((G|0)==(b|0))F=H;else{d=o+4|0;q=G;o=H;while(1){f=q+4|0;if(!(i[f>>0]|0)){F=o;b=q;break p}if((k[f+4>>2]|0)!=(k[d>>2]|0)){F=o;b=q;break p}q=q+32|0;o=q;if((q|0)==(b|0)){F=o;break}}}while(0);if((G|0)==(b|0)){U=218;break}else o=G;q:while(1){f=o+4|0;E=f+2|0;do if(!(i[E>>0]|0)){if((k[o+12>>2]|0)!=(a|0))break;if((k[o+16>>2]|0)==(e|0))break q}while(0);o=o+32|0;if((o|0)==(b|0)){U=218;break o}}D=f+1|0;if((l[D>>0]|0)==(t&1|0))q=t;else{c=s+-12|0;f=s+-8|0;d=k[f>>2]|0;do if((k[c>>2]|0)!=(d|0))if(d>>>0<(k[s+-4>>2]|0)>>>0){k[d>>2]=a;k[d+4>>2]=e;k[f>>2]=d+8;q=s;break}else{sb(c,Q);q=k[K>>2]|0;break}else q=s;while(0);c=k[J>>2]|0;do if(q>>>0<c>>>0){k[q>>2]=0;k[q+4>>2]=0;k[q+8>>2]=0;c=q+12|0;k[K>>2]=c}else{C=k[R>>2]|0;f=q;y=C;A=(f-y|0)/12|0;B=A+1|0;if(B>>>0>357913941){U=194;break o}c=(c-y|0)/12|0;if(c>>>0<178956970){c=c<<1;c=c>>>0<B>>>0?B:c;if(!c){c=0;s=0}else U=197}else{c=357913941;U=197}if((U|0)==197){U=0;s=c*12|0;s=(s|0)==0?1:s;d=_d(s)|0;if(!d)do{d=k[35]|0;k[35]=d+0;if(!d){U=200;break o}Xa[d&0]();d=_d(s)|0}while((d|0)==0);s=d}d=s+(A*12|0)|0;t=d;w=s+(c*12|0)|0;k[d>>2]=0;k[s+(A*12|0)+4>>2]=0;k[s+(A*12|0)+8>>2]=0;c=s+(B*12|0)|0;s=c;if((q|0)==(C|0))d=t;else{f=t;do{P=d+-12|0;O=q;q=q+-12|0;k[P>>2]=0;N=d+-8|0;k[N>>2]=0;k[d+-4>>2]=0;k[P>>2]=k[q>>2];P=O+-8|0;k[N>>2]=k[P>>2];O=O+-4|0;k[d+-4>>2]=k[O>>2];k[O>>2]=0;k[P>>2]=0;k[q>>2]=0;d=f+-12|0;f=d}while((q|0)!=(C|0));d=f;y=k[R>>2]|0;f=k[K>>2]|0}k[R>>2]=d;k[K>>2]=s;k[J>>2]=w;w=y;if((f|0)!=(w|0))do{d=f;f=f+-12|0;s=k[f>>2]|0;t=s;if(s){d=d+-8|0;q=k[d>>2]|0;if((q|0)!=(s|0))k[d>>2]=q+(~((q+-8-t|0)>>>3)<<3);$d(s)}}while((f|0)!=(w|0));if(!y)break;$d(y)}while(0);s=c;q=(i[D>>0]|0)!=0}f=s+-8|0;d=k[f>>2]|0;if(d>>>0<(k[s+-4>>2]|0)>>>0){k[d>>2]=a;k[d+4>>2]=e;k[f>>2]=d+8}else sb(s+-12|0,Q);a=k[o+20>>2]|0;k[Q>>2]=a;e=k[o+24>>2]|0;k[I>>2]=e;i[E>>0]=1;o=G;f=1;do{f=f&(i[o+4+2>>0]|0)!=0;o=o+32|0}while((o|0)!=(b|0));H=f?F:H;b=k[S>>2]|0;f=H;if((f|0)==(b|0)){U=222;break n}else t=q}if((U|0)==194)xa(1340,1363,303,1438);else if((U|0)==200){Y=ya(4)|0;k[Y>>2]=128;La(Y|0,8,1)}else if((U|0)==218){k[g>>2]=1;ib(h,m,n,W);break}}else U=222;while(0);if((U|0)==222){o=c+-8|0;b=k[o>>2]|0;if(b>>>0<(k[c+-4>>2]|0)>>>0){k[b>>2]=a;k[b+4>>2]=e;k[o>>2]=b+8}else sb(c+-12|0,Q);ib(h,m,n,R)}f=k[R>>2]|0;if(f){o=k[K>>2]|0;if((o|0)!=(f|0)){do{b=o;o=o+-12|0;a=k[o>>2]|0;c=a;if(a){b=b+-8|0;e=k[b>>2]|0;if((e|0)!=(a|0))k[b>>2]=e+(~((e+-8-c|0)>>>3)<<3);$d(a)}}while((o|0)!=(f|0));k[K>>2]=f}$d(f)}o=k[T>>2]|0;b=o;if(!o)o=V;else{e=k[S>>2]|0;if((e|0)!=(o|0))k[S>>2]=e+(~((e+-32-b|0)>>>5)<<5);$d(o);o=V}}else{o=V;U=3}if((U|0)==3)ib(h,m,n,W);d=k[o>>2]|0;if(d){f=V+4|0;o=k[f>>2]|0;if((o|0)!=(d|0)){do{b=o;o=o+-12|0;a=k[o>>2]|0;c=a;if(a){b=b+-8|0;e=k[b>>2]|0;if((e|0)!=(a|0))k[b>>2]=e+(~((e+-8-c|0)>>>3)<<3);$d(a)}}while((o|0)!=(d|0));k[f>>2]=d}$d(d)}f=k[W>>2]|0;if(!f){r=Y;return}o=k[X>>2]|0;if((o|0)!=(f|0)){do{b=o;o=o+-12|0;a=k[o>>2]|0;c=a;if(a){b=b+-8|0;e=k[b>>2]|0;if((e|0)!=(a|0))k[b>>2]=e+(~((e+-8-c|0)>>>3)<<3);$d(a)}}while((o|0)!=(f|0));k[X>>2]=f}$d(f);r=Y;return}function mb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;B=r;r=r+32|0;A=B;v=c-b>>3;if(!v){r=B;return}w=A+4|0;x=w+1|0;y=w+2|0;z=w+4|0;n=A+12|0;o=A+16|0;p=A+20|0;q=A+24|0;s=A+28|0;t=a+4|0;u=a+8|0;if(d){l=0;do{d=l;l=l+1|0;g=l>>>0<v>>>0?b+(l<<3)|0:b;f=k[b+(d<<3)>>2]|0;d=k[b+(d<<3)+4>>2]|0;c=k[g>>2]|0;g=k[g+4>>2]|0;do if((f|0)!=(c|0)|(d|0)!=(g|0)){k[A>>2]=0;i[w>>0]=0;i[x>>0]=0;i[y>>0]=0;k[z>>2]=0;k[n>>2]=f;k[o>>2]=d;k[p>>2]=c;k[q>>2]=g;k[s>>2]=1;if((f|0)<=(c|0))if((f|0)==(c|0))if((d|0)>(g|0))m=8;else{e=1;c=f;m=10}else{h=f;f=g;e=1;m=9}else m=8;if((m|0)==8){k[n>>2]=c;k[o>>2]=g;k[p>>2]=f;k[q>>2]=d;k[s>>2]=-1;h=c;c=f;f=d;d=g;e=-1;m=9}if((m|0)==9){m=0;if((h|0)==(c|0)){g=f;m=10}else j=d}if((m|0)==10){e=0-e|0;k[s>>2]=e;h=c;j=d;f=g}d=k[t>>2]|0;if(d>>>0<(k[u>>2]|0)>>>0){k[d>>2]=0;C=w;g=k[C+4>>2]|0;m=d+4|0;k[m>>2]=k[C>>2];k[m+4>>2]=g;k[d+12>>2]=h;k[d+16>>2]=j;k[d+20>>2]=c;k[d+24>>2]=f;k[d+28>>2]=e;k[t>>2]=(k[t>>2]|0)+32;break}else{kc(a,A);break}}while(0)}while((l|0)!=(v|0));r=B;return}if(v>>>0>1){j=1;c=0}else{r=B;return}while(1){h=k[b+(c<<3)>>2]|0;d=k[b+(c<<3)+4>>2]|0;g=k[b+(j<<3)>>2]|0;c=k[b+(j<<3)+4>>2]|0;do if((h|0)!=(g|0)|(d|0)!=(c|0)){k[A>>2]=0;i[w>>0]=0;i[x>>0]=0;i[y>>0]=0;k[z>>2]=0;k[n>>2]=h;k[o>>2]=d;k[p>>2]=g;k[q>>2]=c;k[s>>2]=1;if((h|0)<=(g|0))if((h|0)==(g|0))if((d|0)>(c|0))m=19;else{f=c;g=h;c=1;m=21}else{f=c;c=1;e=h;m=20}else m=19;if((m|0)==19){k[n>>2]=g;k[o>>2]=c;k[p>>2]=h;k[q>>2]=d;k[s>>2]=-1;f=d;d=c;c=-1;e=g;g=h;m=20}if((m|0)==20){m=0;if((e|0)==(g|0))m=21;else h=d}if((m|0)==21){c=0-c|0;k[s>>2]=c;e=g;h=d}d=k[t>>2]|0;if(d>>>0<(k[u>>2]|0)>>>0){k[d>>2]=0;l=w;m=k[l+4>>2]|0;C=d+4|0;k[C>>2]=k[l>>2];k[C+4>>2]=m;k[d+12>>2]=e;k[d+16>>2]=h;k[d+20>>2]=g;k[d+24>>2]=f;k[d+28>>2]=c;k[t>>2]=(k[t>>2]|0)+32;break}else{kc(a,A);break}}while(0);c=j+1|0;if(c>>>0<v>>>0){C=j;j=c;c=C}else break}r=B;return}function nb(a,b){a=a|0;b=b|0;return (k[a+12>>2]|0)<(k[b+12>>2]|0)|0}function ob(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0;w=r;r=r+32|0;v=w;a:while(1){l=b;m=b+-32|0;n=b+-28|0;o=b+-20|0;p=b+-16|0;q=b+-12|0;s=b+-8|0;t=b+-4|0;b:while(1){j=a;f=l-j|0;d=f>>5;switch(d|0){case 2:{u=4;break a}case 3:{u=6;break a}case 4:{u=7;break a}case 5:{u=8;break a}case 1:case 0:{u=53;break a}default:{}}if((f|0)<224){u=10;break a}e=(d|0)/2|0;i=a+(e<<5)|0;if((f|0)>31968){d=(d|0)/4|0;d=Bb(a,a+(d<<5)|0,i,a+(d+e<<5)|0,m,c)|0}else d=zb(a,i,m,c)|0;do if(Za[k[c>>2]&7](a,i)|0)f=m;else{f=b;g=m;while(1){e=g+-32|0;if((a|0)==(e|0))break;if(Za[k[c>>2]&7](e,i)|0){u=36;break}else{f=g;g=e}}if((u|0)==36){u=0;H=k[a>>2]|0;C=a+4|0;F=C;G=k[F>>2]|0;F=k[F+4>>2]|0;A=a+12|0;D=k[A>>2]|0;y=a+16|0;B=k[y>>2]|0;g=a+20|0;z=k[g>>2]|0;J=a+24|0;x=k[J>>2]|0;I=a+28|0;h=k[I>>2]|0;k[a>>2]=k[e>>2];E=f+-60|0;L=E;K=k[L+4>>2]|0;k[C>>2]=k[L>>2];k[C+4>>2]=K;C=f+-52|0;k[A>>2]=k[C>>2];A=f+-48|0;k[y>>2]=k[A>>2];y=f+-44|0;k[g>>2]=k[y>>2];g=f+-40|0;k[J>>2]=k[g>>2];f=f+-36|0;k[I>>2]=k[f>>2];k[e>>2]=H;k[E>>2]=G;k[E+4>>2]=F;k[C>>2]=D;k[A>>2]=B;k[y>>2]=z;k[g>>2]=x;k[f>>2]=h;f=e;d=d+1|0;break}d=a+32|0;if(!(Za[k[c>>2]&7](a,m)|0)){if((d|0)==(m|0)){u=53;break a}else e=a;while(1){if(Za[k[c>>2]&7](a,d)|0)break;e=d+32|0;if((e|0)==(m|0)){u=53;break a}else{L=d;d=e;e=L}}E=k[d>>2]|0;j=e+36|0;G=j;F=k[G>>2]|0;G=k[G+4>>2]|0;z=e+44|0;H=k[z>>2]|0;A=e+48|0;I=k[A>>2]|0;B=e+52|0;J=k[B>>2]|0;C=e+56|0;K=k[C>>2]|0;D=e+60|0;L=k[D>>2]|0;k[d>>2]=k[m>>2];x=n;y=k[x+4>>2]|0;d=j;k[d>>2]=k[x>>2];k[d+4>>2]=y;k[z>>2]=k[o>>2];k[A>>2]=k[p>>2];k[B>>2]=k[q>>2];k[C>>2]=k[s>>2];k[D>>2]=k[t>>2];k[m>>2]=E;d=n;k[d>>2]=F;k[d+4>>2]=G;k[o>>2]=H;k[p>>2]=I;k[q>>2]=J;k[s>>2]=K;k[t>>2]=L;d=e+64|0}if((d|0)==(m|0)){u=53;break a}else e=m;while(1){g=d;while(1){d=g+32|0;if(Za[k[c>>2]&7](a,g)|0){f=e;break}else g=d}while(1){e=f+-32|0;if(Za[k[c>>2]&7](a,e)|0)f=e;else break}if(g>>>0>=e>>>0){a=g;continue b}y=k[g>>2]|0;D=g+4|0;A=D;z=k[A>>2]|0;A=k[A+4>>2]|0;F=g+12|0;C=k[F>>2]|0;H=g+16|0;E=k[H>>2]|0;J=g+20|0;G=k[J>>2]|0;L=g+24|0;I=k[L>>2]|0;x=g+28|0;K=k[x>>2]|0;k[g>>2]=k[e>>2];B=f+-28|0;i=B;j=k[i+4>>2]|0;k[D>>2]=k[i>>2];k[D+4>>2]=j;D=f+-20|0;k[F>>2]=k[D>>2];F=f+-16|0;k[H>>2]=k[F>>2];H=f+-12|0;k[J>>2]=k[H>>2];J=f+-8|0;k[L>>2]=k[J>>2];L=f+-4|0;k[x>>2]=k[L>>2];k[e>>2]=y;k[B>>2]=z;k[B+4>>2]=A;k[D>>2]=C;k[F>>2]=E;k[H>>2]=G;k[J>>2]=I;k[L>>2]=K}}while(0);e=a+32|0;c:do if(e>>>0<f>>>0)while(1){h=e;while(1){e=h+32|0;if(Za[k[c>>2]&7](h,i)|0)h=e;else break}while(1){g=f+-32|0;if(Za[k[c>>2]&7](g,i)|0)break;else f=g}if(h>>>0>g>>>0){e=i;break c}z=k[h>>2]|0;E=h+4|0;B=E;A=k[B>>2]|0;B=k[B+4>>2]|0;G=h+12|0;D=k[G>>2]|0;I=h+16|0;F=k[I>>2]|0;K=h+20|0;H=k[K>>2]|0;x=h+24|0;J=k[x>>2]|0;y=h+28|0;L=k[y>>2]|0;k[h>>2]=k[g>>2];C=f+-28|0;N=C;M=k[N+4>>2]|0;k[E>>2]=k[N>>2];k[E+4>>2]=M;E=f+-20|0;k[G>>2]=k[E>>2];G=f+-16|0;k[I>>2]=k[G>>2];I=f+-12|0;k[K>>2]=k[I>>2];K=f+-8|0;k[x>>2]=k[K>>2];f=f+-4|0;k[y>>2]=k[f>>2];k[g>>2]=z;k[C>>2]=A;k[C+4>>2]=B;k[E>>2]=D;k[G>>2]=F;k[I>>2]=H;k[K>>2]=J;k[f>>2]=L;f=g;i=(i|0)==(h|0)?g:i;d=d+1|0}else{h=e;e=i}while(0);if((h|0)!=(e|0)?Za[k[c>>2]&7](e,h)|0:0){A=k[h>>2]|0;F=h+4|0;C=F;B=k[C>>2]|0;C=k[C+4>>2]|0;H=h+12|0;E=k[H>>2]|0;J=h+16|0;G=k[J>>2]|0;L=h+20|0;I=k[L>>2]|0;N=h+24|0;K=k[N>>2]|0;z=h+28|0;M=k[z>>2]|0;k[h>>2]=k[e>>2];D=e+4|0;x=D;y=k[x+4>>2]|0;k[F>>2]=k[x>>2];k[F+4>>2]=y;F=e+12|0;k[H>>2]=k[F>>2];H=e+16|0;k[J>>2]=k[H>>2];J=e+20|0;k[L>>2]=k[J>>2];L=e+24|0;k[N>>2]=k[L>>2];N=e+28|0;k[z>>2]=k[N>>2];k[e>>2]=A;k[D>>2]=B;k[D+4>>2]=C;k[F>>2]=E;k[H>>2]=G;k[J>>2]=I;k[L>>2]=K;k[N>>2]=M;d=d+1|0}if(!d){d=Cb(a,h,c)|0;e=h+32|0;if(Cb(e,b,c)|0){u=48;break}if(d){a=e;continue}}N=h;if((N-j|0)>=(l-N|0)){u=52;break}ob(a,h,c);a=h+32|0}if((u|0)==48){u=0;if(d){u=53;break}else{b=h;continue}}else if((u|0)==52){u=0;ob(h+32|0,b,c);b=h;continue}}if((u|0)==4){if(!(Za[k[c>>2]&7](m,a)|0)){r=w;return}I=k[a>>2]|0;A=a+4|0;H=A;G=k[H>>2]|0;H=k[H+4>>2]|0;B=a+12|0;J=k[B>>2]|0;C=a+16|0;K=k[C>>2]|0;D=a+20|0;L=k[D>>2]|0;E=a+24|0;M=k[E>>2]|0;F=a+28|0;N=k[F>>2]|0;k[a>>2]=k[m>>2];y=n;z=k[y+4>>2]|0;k[A>>2]=k[y>>2];k[A+4>>2]=z;k[B>>2]=k[o>>2];k[C>>2]=k[p>>2];k[D>>2]=k[q>>2];k[E>>2]=k[s>>2];k[F>>2]=k[t>>2];k[m>>2]=I;I=n;k[I>>2]=G;k[I+4>>2]=H;k[o>>2]=J;k[p>>2]=K;k[q>>2]=L;k[s>>2]=M;k[t>>2]=N;r=w;return}else if((u|0)==6){zb(a,a+32|0,m,c)|0;r=w;return}else if((u|0)==7){Ab(a,a+32|0,a+64|0,m,c)|0;r=w;return}else if((u|0)==8){Bb(a,a+32|0,a+64|0,a+96|0,m,c)|0;r=w;return}else if((u|0)==10){e=a+64|0;zb(a,a+32|0,e,c)|0;d=a+96|0;if((d|0)!=(b|0)){n=v+4|0;o=v+12|0;p=v+16|0;q=v+20|0;s=v+24|0;t=v+28|0;m=d;while(1){if(Za[k[c>>2]&7](m,e)|0){k[v>>2]=k[m>>2];M=m+4|0;N=k[M+4>>2]|0;d=n;k[d>>2]=k[M>>2];k[d+4>>2]=N;k[o>>2]=k[m+12>>2];k[p>>2]=k[m+16>>2];k[q>>2]=k[m+20>>2];k[s>>2]=k[m+24>>2];k[t>>2]=k[m+28>>2];d=m;while(1){k[d>>2]=k[e>>2];l=e+4|0;h=l;g=k[h+4>>2]|0;f=d+4|0;k[f>>2]=k[h>>2];k[f+4>>2]=g;f=e+12|0;k[d+12>>2]=k[f>>2];g=e+16|0;k[d+16>>2]=k[g>>2];h=e+20|0;k[d+20>>2]=k[h>>2];i=e+24|0;k[d+24>>2]=k[i>>2];j=e+28|0;k[d+28>>2]=k[j>>2];if((e|0)==(a|0))break;d=e+-32|0;if(Za[k[c>>2]&7](v,d)|0){N=e;e=d;d=N}else break}k[e>>2]=k[v>>2];L=n;M=k[L+4>>2]|0;N=l;k[N>>2]=k[L>>2];k[N+4>>2]=M;k[f>>2]=k[o>>2];k[g>>2]=k[p>>2];k[h>>2]=k[q>>2];k[i>>2]=k[s>>2];k[j>>2]=k[t>>2]}d=m+32|0;if((d|0)==(b|0))break;else{e=m;m=d}}}r=w;return}else if((u|0)==53){r=w;return}}function pb(a,b){a=a|0;b=b|0;var c=0.0,d=0.0,e=0,f=0,g=0,h=0,j=0,l=0,m=0;c=+p[a+16>>3];d=+p[b+16>>3];if(c<d){m=1;return m|0}if(d<c){m=0;return m|0}e=i[a+24>>0]|0;f=i[b+24>>0]|0;if((e&255)<(f&255)){m=1;return m|0}if((f&255)<(e&255)){m=0;return m|0}g=k[a+8>>2]|0;b=k[b+8>>2]|0;e=k[g+20>>2]|0;f=k[g+12>>2]|0;a=e-f|0;g=(k[g+24>>2]|0)-(k[g+16>>2]|0)|0;h=k[b+20>>2]|0;j=k[b+12>>2]|0;l=h-j|0;b=(k[b+24>>2]|0)-(k[b+16>>2]|0)|0;if((a|0)>=0){if((e|0)==(f|0)){m=0;return m|0}}else{a=0-a|0;g=0-g|0}if((l|0)>=0)if((h|0)==(j|0)){m=(a|0)!=0;return m|0}else e=l;else{e=0-l|0;b=0-b|0}j=(e|0)<0?0-e|0:e;h=(g|0)<0?0-g|0:g;h=ne(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;l=(a|0)<0?0-a|0:a;m=(b|0)<0?0-b|0:b;l=ne(m|0,((m|0)<0)<<31>>31|0,l|0,((l|0)<0)<<31>>31|0)|0;m=L;f=ha(e>>31|1,g>>31|1)|0;e=ha(b>>31|1,a>>31|1)|0;if((f|0)<(e|0)){m=1;return m|0}if((e|0)<(f|0)){m=0;return m|0}if((f|0)==-1){m=m>>>0<j>>>0|(m|0)==(j|0)&l>>>0<h>>>0;return m|0}else{m=j>>>0<m>>>0|(j|0)==(m|0)&h>>>0<l>>>0;return m|0}return 0}function qb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0;t=r;r=r+64|0;q=t+32|0;p=t;o=b;a:while(1){l=o;n=o+-32|0;s=a;b:while(1){h=s;a=l-h|0;b=a>>5;switch(b|0){case 2:{m=4;break a}case 3:{m=6;break a}case 4:{m=14;break a}case 5:{m=15;break a}case 1:case 0:{m=82;break a}default:{}}if((a|0)<992){m=21;break a}d=(b|0)/2|0;g=s+(d<<5)|0;do if((a|0)>31968){b=(b|0)/4|0;e=s+(b<<5)|0;b=s+(b+d<<5)|0;a=xb(s,e,g,b,c)|0;if(Za[k[c>>2]&7](n,b)|0){k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];k[p+12>>2]=k[b+12>>2];k[p+16>>2]=k[b+16>>2];k[p+20>>2]=k[b+20>>2];k[p+24>>2]=k[b+24>>2];k[p+28>>2]=k[b+28>>2];k[b>>2]=k[n>>2];k[b+4>>2]=k[n+4>>2];k[b+8>>2]=k[n+8>>2];k[b+12>>2]=k[n+12>>2];k[b+16>>2]=k[n+16>>2];k[b+20>>2]=k[n+20>>2];j[b+24>>1]=j[n+24>>1]|0;i[b+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;d=a+1|0;if(Za[k[c>>2]&7](b,g)|0){k[p>>2]=k[g>>2];k[p+4>>2]=k[g+4>>2];k[p+8>>2]=k[g+8>>2];k[p+12>>2]=k[g+12>>2];k[p+16>>2]=k[g+16>>2];k[p+20>>2]=k[g+20>>2];k[p+24>>2]=k[g+24>>2];k[p+28>>2]=k[g+28>>2];k[g>>2]=k[b>>2];k[g+4>>2]=k[b+4>>2];k[g+8>>2]=k[b+8>>2];k[g+12>>2]=k[b+12>>2];k[g+16>>2]=k[b+16>>2];k[g+20>>2]=k[b+20>>2];j[g+24>>1]=j[b+24>>1]|0;i[g+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;b=a+2|0;if(Za[k[c>>2]&7](g,e)|0){k[p>>2]=k[e>>2];k[p+4>>2]=k[e+4>>2];k[p+8>>2]=k[e+8>>2];k[p+12>>2]=k[e+12>>2];k[p+16>>2]=k[e+16>>2];k[p+20>>2]=k[e+20>>2];k[p+24>>2]=k[e+24>>2];k[p+28>>2]=k[e+28>>2];k[e>>2]=k[g>>2];k[e+4>>2]=k[g+4>>2];k[e+8>>2]=k[g+8>>2];k[e+12>>2]=k[g+12>>2];k[e+16>>2]=k[g+16>>2];k[e+20>>2]=k[g+20>>2];j[e+24>>1]=j[g+24>>1]|0;i[e+26>>0]=i[g+26>>0]|0;k[g>>2]=k[p>>2];k[g+4>>2]=k[p+4>>2];k[g+8>>2]=k[p+8>>2];k[g+12>>2]=k[p+12>>2];k[g+16>>2]=k[p+16>>2];k[g+20>>2]=k[p+20>>2];j[g+24>>1]=j[p+24>>1]|0;i[g+26>>0]=i[p+26>>0]|0;if(Za[k[c>>2]&7](e,s)|0){k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[e>>2];k[s+4>>2]=k[e+4>>2];k[s+8>>2]=k[e+8>>2];k[s+12>>2]=k[e+12>>2];k[s+16>>2]=k[e+16>>2];k[s+20>>2]=k[e+20>>2];j[s+24>>1]=j[e+24>>1]|0;i[s+26>>0]=i[e+26>>0]|0;k[e>>2]=k[p>>2];k[e+4>>2]=k[p+4>>2];k[e+8>>2]=k[p+8>>2];k[e+12>>2]=k[p+12>>2];k[e+16>>2]=k[p+16>>2];k[e+20>>2]=k[p+20>>2];j[e+24>>1]=j[p+24>>1]|0;i[e+26>>0]=i[p+26>>0]|0;a=a+4|0}else a=a+3|0}else a=b}else a=d}}else{f=Za[k[c>>2]&7](g,s)|0;a=Za[k[c>>2]&7](n,g)|0;if(!f){if(!a){a=0;break};k[p>>2]=k[g>>2];k[p+4>>2]=k[g+4>>2];k[p+8>>2]=k[g+8>>2];k[p+12>>2]=k[g+12>>2];k[p+16>>2]=k[g+16>>2];k[p+20>>2]=k[g+20>>2];k[p+24>>2]=k[g+24>>2];k[p+28>>2]=k[g+28>>2];k[g>>2]=k[n>>2];k[g+4>>2]=k[n+4>>2];k[g+8>>2]=k[n+8>>2];k[g+12>>2]=k[n+12>>2];k[g+16>>2]=k[n+16>>2];k[g+20>>2]=k[n+20>>2];j[g+24>>1]=j[n+24>>1]|0;i[g+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;if(!(Za[k[c>>2]&7](g,s)|0)){a=1;break};k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[g>>2];k[s+4>>2]=k[g+4>>2];k[s+8>>2]=k[g+8>>2];k[s+12>>2]=k[g+12>>2];k[s+16>>2]=k[g+16>>2];k[s+20>>2]=k[g+20>>2];j[s+24>>1]=j[g+24>>1]|0;i[s+26>>0]=i[g+26>>0]|0;k[g>>2]=k[p>>2];k[g+4>>2]=k[p+4>>2];k[g+8>>2]=k[p+8>>2];k[g+12>>2]=k[p+12>>2];k[g+16>>2]=k[p+16>>2];k[g+20>>2]=k[p+20>>2];j[g+24>>1]=j[p+24>>1]|0;i[g+26>>0]=i[p+26>>0]|0;a=2;break};k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];if(a){k[s>>2]=k[n>>2];k[s+4>>2]=k[n+4>>2];k[s+8>>2]=k[n+8>>2];k[s+12>>2]=k[n+12>>2];k[s+16>>2]=k[n+16>>2];k[s+20>>2]=k[n+20>>2];j[s+24>>1]=j[n+24>>1]|0;i[s+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;a=1;break};k[s>>2]=k[g>>2];k[s+4>>2]=k[g+4>>2];k[s+8>>2]=k[g+8>>2];k[s+12>>2]=k[g+12>>2];k[s+16>>2]=k[g+16>>2];k[s+20>>2]=k[g+20>>2];j[s+24>>1]=j[g+24>>1]|0;i[s+26>>0]=i[g+26>>0]|0;k[g>>2]=k[p>>2];k[g+4>>2]=k[p+4>>2];k[g+8>>2]=k[p+8>>2];k[g+12>>2]=k[p+12>>2];k[g+16>>2]=k[p+16>>2];k[g+20>>2]=k[p+20>>2];j[g+24>>1]=j[p+24>>1]|0;i[g+26>>0]=i[p+26>>0]|0;if(Za[k[c>>2]&7](n,g)|0){k[p>>2]=k[g>>2];k[p+4>>2]=k[g+4>>2];k[p+8>>2]=k[g+8>>2];k[p+12>>2]=k[g+12>>2];k[p+16>>2]=k[g+16>>2];k[p+20>>2]=k[g+20>>2];k[p+24>>2]=k[g+24>>2];k[p+28>>2]=k[g+28>>2];k[g>>2]=k[n>>2];k[g+4>>2]=k[n+4>>2];k[g+8>>2]=k[n+8>>2];k[g+12>>2]=k[n+12>>2];k[g+16>>2]=k[n+16>>2];k[g+20>>2]=k[n+20>>2];j[g+24>>1]=j[n+24>>1]|0;i[g+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;a=2}else a=1}while(0);do if(Za[k[c>>2]&7](s,g)|0)b=n;else{b=n;while(1){b=b+-32|0;if((s|0)==(b|0))break;if(Za[k[c>>2]&7](b,g)|0){m=65;break}}if((m|0)==65){m=0;k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[b>>2];k[s+4>>2]=k[b+4>>2];k[s+8>>2]=k[b+8>>2];k[s+12>>2]=k[b+12>>2];k[s+16>>2]=k[b+16>>2];k[s+20>>2]=k[b+20>>2];j[s+24>>1]=j[b+24>>1]|0;i[s+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;a=a+1|0;break}a=s+32|0;if(!(Za[k[c>>2]&7](s,n)|0)){if((a|0)==(n|0)){m=82;break a}else b=s;while(1){if(Za[k[c>>2]&7](s,a)|0)break;b=a+32|0;if((b|0)==(n|0)){m=82;break a}else{h=a;a=b;b=h}}k[p>>2]=k[a>>2];k[p+4>>2]=k[a+4>>2];k[p+8>>2]=k[a+8>>2];k[p+12>>2]=k[a+12>>2];k[p+16>>2]=k[a+16>>2];k[p+20>>2]=k[a+20>>2];k[p+24>>2]=k[a+24>>2];k[p+28>>2]=k[a+28>>2];k[a>>2]=k[n>>2];k[a+4>>2]=k[n+4>>2];k[a+8>>2]=k[n+8>>2];k[a+12>>2]=k[n+12>>2];k[a+16>>2]=k[n+16>>2];k[a+20>>2]=k[n+20>>2];j[a+24>>1]=j[n+24>>1]|0;i[a+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;a=b+64|0}if((a|0)==(n|0)){m=82;break a}else d=n;while(1){b=a;while(1){a=b+32|0;if(Za[k[c>>2]&7](s,b)|0)break;else b=a}do d=d+-32|0;while(Za[k[c>>2]&7](s,d)|0);if(b>>>0>=d>>>0){s=b;continue b};k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];k[p+12>>2]=k[b+12>>2];k[p+16>>2]=k[b+16>>2];k[p+20>>2]=k[b+20>>2];k[p+24>>2]=k[b+24>>2];k[p+28>>2]=k[b+28>>2];k[b>>2]=k[d>>2];k[b+4>>2]=k[d+4>>2];k[b+8>>2]=k[d+8>>2];k[b+12>>2]=k[d+12>>2];k[b+16>>2]=k[d+16>>2];k[b+20>>2]=k[d+20>>2];j[b+24>>1]=j[d+24>>1]|0;i[b+26>>0]=i[d+26>>0]|0;k[d>>2]=k[p>>2];k[d+4>>2]=k[p+4>>2];k[d+8>>2]=k[p+8>>2];k[d+12>>2]=k[p+12>>2];k[d+16>>2]=k[p+16>>2];k[d+20>>2]=k[p+20>>2];j[d+24>>1]=j[p+24>>1]|0;i[d+26>>0]=i[p+26>>0]|0}}while(0);d=s+32|0;c:do if(d>>>0<b>>>0)while(1){e=d;while(1){d=e+32|0;if(Za[k[c>>2]&7](e,g)|0)e=d;else{f=b;break}}do f=f+-32|0;while(!(Za[k[c>>2]&7](f,g)|0));if(e>>>0>f>>>0){d=e;b=g;break c};k[p>>2]=k[e>>2];k[p+4>>2]=k[e+4>>2];k[p+8>>2]=k[e+8>>2];k[p+12>>2]=k[e+12>>2];k[p+16>>2]=k[e+16>>2];k[p+20>>2]=k[e+20>>2];k[p+24>>2]=k[e+24>>2];k[p+28>>2]=k[e+28>>2];k[e>>2]=k[f>>2];k[e+4>>2]=k[f+4>>2];k[e+8>>2]=k[f+8>>2];k[e+12>>2]=k[f+12>>2];k[e+16>>2]=k[f+16>>2];k[e+20>>2]=k[f+20>>2];j[e+24>>1]=j[f+24>>1]|0;i[e+26>>0]=i[f+26>>0]|0;k[f>>2]=k[p>>2];k[f+4>>2]=k[p+4>>2];k[f+8>>2]=k[p+8>>2];k[f+12>>2]=k[p+12>>2];k[f+16>>2]=k[p+16>>2];k[f+20>>2]=k[p+20>>2];j[f+24>>1]=j[p+24>>1]|0;i[f+26>>0]=i[p+26>>0]|0;b=f;g=(g|0)==(e|0)?f:g;a=a+1|0}else b=g;while(0);if((d|0)!=(b|0)?Za[k[c>>2]&7](b,d)|0:0){k[p>>2]=k[d>>2];k[p+4>>2]=k[d+4>>2];k[p+8>>2]=k[d+8>>2];k[p+12>>2]=k[d+12>>2];k[p+16>>2]=k[d+16>>2];k[p+20>>2]=k[d+20>>2];k[p+24>>2]=k[d+24>>2];k[p+28>>2]=k[d+28>>2];k[d>>2]=k[b>>2];k[d+4>>2]=k[b+4>>2];k[d+8>>2]=k[b+8>>2];k[d+12>>2]=k[b+12>>2];k[d+16>>2]=k[b+16>>2];k[d+20>>2]=k[b+20>>2];j[d+24>>1]=j[b+24>>1]|0;i[d+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;a=a+1|0}if(!a){a=yb(s,d,c)|0;b=d+32|0;if(yb(b,o,c)|0){m=77;break}if(a){s=b;continue}}g=d;if((g-h|0)>=(l-g|0)){m=81;break}qb(s,d,c);s=d+32|0}if((m|0)==77){m=0;if(a){m=82;break}else{a=s;o=d;continue}}else if((m|0)==81){m=0;qb(d+32|0,o,c);a=s;o=d;continue}}if((m|0)==4){if(!(Za[k[c>>2]&7](n,s)|0)){r=t;return};k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[n>>2];k[s+4>>2]=k[n+4>>2];k[s+8>>2]=k[n+8>>2];k[s+12>>2]=k[n+12>>2];k[s+16>>2]=k[n+16>>2];k[s+20>>2]=k[n+20>>2];j[s+24>>1]=j[n+24>>1]|0;i[s+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;r=t;return}else if((m|0)==6){b=s+32|0;q=Za[k[c>>2]&7](b,s)|0;a=Za[k[c>>2]&7](n,b)|0;if(!q){if(!a){r=t;return};k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];k[p+12>>2]=k[b+12>>2];k[p+16>>2]=k[b+16>>2];k[p+20>>2]=k[b+20>>2];k[p+24>>2]=k[b+24>>2];k[p+28>>2]=k[b+28>>2];k[b>>2]=k[n>>2];k[b+4>>2]=k[n+4>>2];k[b+8>>2]=k[n+8>>2];k[b+12>>2]=k[n+12>>2];k[b+16>>2]=k[n+16>>2];k[b+20>>2]=k[n+20>>2];j[b+24>>1]=j[n+24>>1]|0;i[b+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;if(!(Za[k[c>>2]&7](b,s)|0)){r=t;return};k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[b>>2];k[s+4>>2]=k[b+4>>2];k[s+8>>2]=k[b+8>>2];k[s+12>>2]=k[b+12>>2];k[s+16>>2]=k[b+16>>2];k[s+20>>2]=k[b+20>>2];j[s+24>>1]=j[b+24>>1]|0;i[s+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;r=t;return};k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];if(a){k[s>>2]=k[n>>2];k[s+4>>2]=k[n+4>>2];k[s+8>>2]=k[n+8>>2];k[s+12>>2]=k[n+12>>2];k[s+16>>2]=k[n+16>>2];k[s+20>>2]=k[n+20>>2];j[s+24>>1]=j[n+24>>1]|0;i[s+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;r=t;return};k[s>>2]=k[b>>2];k[s+4>>2]=k[b+4>>2];k[s+8>>2]=k[b+8>>2];k[s+12>>2]=k[b+12>>2];k[s+16>>2]=k[b+16>>2];k[s+20>>2]=k[b+20>>2];j[s+24>>1]=j[b+24>>1]|0;i[s+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;if(!(Za[k[c>>2]&7](n,b)|0)){r=t;return};k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];k[p+12>>2]=k[b+12>>2];k[p+16>>2]=k[b+16>>2];k[p+20>>2]=k[b+20>>2];k[p+24>>2]=k[b+24>>2];k[p+28>>2]=k[b+28>>2];k[b>>2]=k[n>>2];k[b+4>>2]=k[n+4>>2];k[b+8>>2]=k[n+8>>2];k[b+12>>2]=k[n+12>>2];k[b+16>>2]=k[n+16>>2];k[b+20>>2]=k[n+20>>2];j[b+24>>1]=j[n+24>>1]|0;i[b+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;r=t;return}else if((m|0)==14){xb(s,s+32|0,s+64|0,n,c)|0;r=t;return}else if((m|0)==15){a=s+32|0;b=s+64|0;d=s+96|0;xb(s,a,b,d,c)|0;if(!(Za[k[c>>2]&7](n,d)|0)){r=t;return};k[p>>2]=k[d>>2];k[p+4>>2]=k[d+4>>2];k[p+8>>2]=k[d+8>>2];k[p+12>>2]=k[d+12>>2];k[p+16>>2]=k[d+16>>2];k[p+20>>2]=k[d+20>>2];k[p+24>>2]=k[d+24>>2];k[p+28>>2]=k[d+28>>2];k[d>>2]=k[n>>2];k[d+4>>2]=k[n+4>>2];k[d+8>>2]=k[n+8>>2];k[d+12>>2]=k[n+12>>2];k[d+16>>2]=k[n+16>>2];k[d+20>>2]=k[n+20>>2];j[d+24>>1]=j[n+24>>1]|0;i[d+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;if(!(Za[k[c>>2]&7](d,b)|0)){r=t;return};k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];k[p+12>>2]=k[b+12>>2];k[p+16>>2]=k[b+16>>2];k[p+20>>2]=k[b+20>>2];k[p+24>>2]=k[b+24>>2];k[p+28>>2]=k[b+28>>2];k[b>>2]=k[d>>2];k[b+4>>2]=k[d+4>>2];k[b+8>>2]=k[d+8>>2];k[b+12>>2]=k[d+12>>2];k[b+16>>2]=k[d+16>>2];k[b+20>>2]=k[d+20>>2];j[b+24>>1]=j[d+24>>1]|0;i[b+26>>0]=i[d+26>>0]|0;k[d>>2]=k[p>>2];k[d+4>>2]=k[p+4>>2];k[d+8>>2]=k[p+8>>2];k[d+12>>2]=k[p+12>>2];k[d+16>>2]=k[p+16>>2];k[d+20>>2]=k[p+20>>2];j[d+24>>1]=j[p+24>>1]|0;i[d+26>>0]=i[p+26>>0]|0;if(!(Za[k[c>>2]&7](b,a)|0)){r=t;return};k[p>>2]=k[a>>2];k[p+4>>2]=k[a+4>>2];k[p+8>>2]=k[a+8>>2];k[p+12>>2]=k[a+12>>2];k[p+16>>2]=k[a+16>>2];k[p+20>>2]=k[a+20>>2];k[p+24>>2]=k[a+24>>2];k[p+28>>2]=k[a+28>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];j[a+24>>1]=j[b+24>>1]|0;i[a+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;if(!(Za[k[c>>2]&7](a,s)|0)){r=t;return};k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[a>>2];k[s+4>>2]=k[a+4>>2];k[s+8>>2]=k[a+8>>2];k[s+12>>2]=k[a+12>>2];k[s+16>>2]=k[a+16>>2];k[s+20>>2]=k[a+20>>2];j[s+24>>1]=j[a+24>>1]|0;i[s+26>>0]=i[a+26>>0]|0;k[a>>2]=k[p>>2];k[a+4>>2]=k[p+4>>2];k[a+8>>2]=k[p+8>>2];k[a+12>>2]=k[p+12>>2];k[a+16>>2]=k[p+16>>2];k[a+20>>2]=k[p+20>>2];j[a+24>>1]=j[p+24>>1]|0;i[a+26>>0]=i[p+26>>0]|0;r=t;return}else if((m|0)==21){b=s+64|0;a=s+32|0;n=Za[k[c>>2]&7](a,s)|0;d=Za[k[c>>2]&7](b,a)|0;do if(n){k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];if(d){k[s>>2]=k[b>>2];k[s+4>>2]=k[b+4>>2];k[s+8>>2]=k[b+8>>2];k[s+12>>2]=k[b+12>>2];k[s+16>>2]=k[b+16>>2];k[s+20>>2]=k[b+20>>2];j[s+24>>1]=j[b+24>>1]|0;i[s+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;break};k[s>>2]=k[a>>2];k[s+4>>2]=k[a+4>>2];k[s+8>>2]=k[a+8>>2];k[s+12>>2]=k[a+12>>2];k[s+16>>2]=k[a+16>>2];k[s+20>>2]=k[a+20>>2];j[s+24>>1]=j[a+24>>1]|0;i[s+26>>0]=i[a+26>>0]|0;k[a>>2]=k[p>>2];k[a+4>>2]=k[p+4>>2];k[a+8>>2]=k[p+8>>2];k[a+12>>2]=k[p+12>>2];k[a+16>>2]=k[p+16>>2];k[a+20>>2]=k[p+20>>2];j[a+24>>1]=j[p+24>>1]|0;i[a+26>>0]=i[p+26>>0]|0;if(Za[k[c>>2]&7](b,a)|0){k[p>>2]=k[a>>2];k[p+4>>2]=k[a+4>>2];k[p+8>>2]=k[a+8>>2];k[p+12>>2]=k[a+12>>2];k[p+16>>2]=k[a+16>>2];k[p+20>>2]=k[a+20>>2];k[p+24>>2]=k[a+24>>2];k[p+28>>2]=k[a+28>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];j[a+24>>1]=j[b+24>>1]|0;i[a+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0}}else if(d?(k[p>>2]=k[a>>2],k[p+4>>2]=k[a+4>>2],k[p+8>>2]=k[a+8>>2],k[p+12>>2]=k[a+12>>2],k[p+16>>2]=k[a+16>>2],k[p+20>>2]=k[a+20>>2],k[p+24>>2]=k[a+24>>2],k[p+28>>2]=k[a+28>>2],k[a>>2]=k[b>>2],k[a+4>>2]=k[b+4>>2],k[a+8>>2]=k[b+8>>2],k[a+12>>2]=k[b+12>>2],k[a+16>>2]=k[b+16>>2],k[a+20>>2]=k[b+20>>2],j[a+24>>1]=j[b+24>>1]|0,i[a+26>>0]=i[b+26>>0]|0,k[b>>2]=k[p>>2],k[b+4>>2]=k[p+4>>2],k[b+8>>2]=k[p+8>>2],k[b+12>>2]=k[p+12>>2],k[b+16>>2]=k[p+16>>2],k[b+20>>2]=k[p+20>>2],j[b+24>>1]=j[p+24>>1]|0,i[b+26>>0]=i[p+26>>0]|0,Za[k[c>>2]&7](a,s)|0):0){k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[a>>2];k[s+4>>2]=k[a+4>>2];k[s+8>>2]=k[a+8>>2];k[s+12>>2]=k[a+12>>2];k[s+16>>2]=k[a+16>>2];k[s+20>>2]=k[a+20>>2];j[s+24>>1]=j[a+24>>1]|0;i[s+26>>0]=i[a+26>>0]|0;k[a>>2]=k[p>>2];k[a+4>>2]=k[p+4>>2];k[a+8>>2]=k[p+8>>2];k[a+12>>2]=k[p+12>>2];k[a+16>>2]=k[p+16>>2];k[a+20>>2]=k[p+20>>2];j[a+24>>1]=j[p+24>>1]|0;i[a+26>>0]=i[p+26>>0]|0}while(0);a=s+96|0;if((a|0)!=(o|0))while(1){if(Za[k[c>>2]&7](a,b)|0){k[q>>2]=k[a>>2];k[q+4>>2]=k[a+4>>2];k[q+8>>2]=k[a+8>>2];k[q+12>>2]=k[a+12>>2];k[q+16>>2]=k[a+16>>2];k[q+20>>2]=k[a+20>>2];k[q+24>>2]=k[a+24>>2];k[q+28>>2]=k[a+28>>2];d=a;e=b;while(1){k[d>>2]=k[e>>2];k[d+4>>2]=k[e+4>>2];k[d+8>>2]=k[e+8>>2];k[d+12>>2]=k[e+12>>2];k[d+16>>2]=k[e+16>>2];k[d+20>>2]=k[e+20>>2];j[d+24>>1]=j[e+24>>1]|0;i[d+26>>0]=i[e+26>>0]|0;if((e|0)==(s|0))break;b=e+-32|0;if(Za[k[c>>2]&7](q,b)|0){d=e;e=b}else break}k[e>>2]=k[q>>2];k[e+4>>2]=k[q+4>>2];k[e+8>>2]=k[q+8>>2];k[e+12>>2]=k[q+12>>2];k[e+16>>2]=k[q+16>>2];k[e+20>>2]=k[q+20>>2];j[e+24>>1]=j[q+24>>1]|0;i[e+26>>0]=i[q+26>>0]|0}b=a+32|0;if((b|0)==(o|0))break;else{p=a;a=b;b=p}}r=t;return}else if((m|0)==82){r=t;return}}function rb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;a:while(1){p=b;r=b+-32|0;q=b+-64|0;z=b+-28|0;s=z+4|0;t=b+-20|0;u=b+-16|0;v=b+-12|0;w=b+-8|0;x=b+-4|0;b:while(1){o=a;c=p-o|0;d=c>>5;switch(d|0){case 2:{y=4;break a}case 3:{y=8;break a}case 4:{y=9;break a}case 5:{y=10;break a}case 1:case 0:{y=83;break a}default:{}}if((c|0)<224){y=12;break a}e=(d|0)/2|0;j=a+(e<<5)|0;if((c|0)>31968){c=(d|0)/4|0;c=vb(a,a+(c<<5)|0,j,a+(c+e<<5)|0,r)|0}else c=tb(a,j,r)|0;n=a+4|0;d=a+(e<<5)+4|0;m=i[n>>0]^1;l=i[d>>0]^1;c:do if((m&255)<(l&255))e=r;else{if((l&255)>=(m&255)?(k[n+4>>2]|0)>>>0<(k[d+4>>2]|0)>>>0:0){e=r;break}d:do if((a|0)!=(q|0)){h=d+4|0;e=q;f=r;while(1){g=f+-28|0;d=i[g>>0]^1;if((d&255)<(l&255))break;if((l&255)>=(d&255)?(k[g+4>>2]|0)>>>0<(k[h>>2]|0)>>>0:0)break;d=e+-32|0;if((a|0)==(d|0))break d;else{f=e;e=d}}G=k[a>>2]|0;E=n;F=k[E>>2]|0;E=k[E+4>>2]|0;A=a+12|0;D=k[A>>2]|0;h=a+16|0;B=k[h>>2]|0;I=a+20|0;d=k[I>>2]|0;y=a+24|0;l=k[y>>2]|0;H=a+28|0;m=k[H>>2]|0;k[a>>2]=k[e>>2];K=g;J=k[K+4>>2]|0;C=n;k[C>>2]=k[K>>2];k[C+4>>2]=J;C=f+-20|0;k[A>>2]=k[C>>2];A=f+-16|0;k[h>>2]=k[A>>2];h=f+-12|0;k[I>>2]=k[h>>2];n=f+-8|0;k[y>>2]=k[n>>2];y=f+-4|0;k[H>>2]=k[y>>2];k[e>>2]=G;k[g>>2]=F;k[g+4>>2]=E;k[C>>2]=D;k[A>>2]=B;k[h>>2]=d;k[n>>2]=l;k[y>>2]=m;c=c+1|0;break c}while(0);d=a+32|0;c=i[z>>0]^1;do if((m&255)<(c&255))a=d;else{if((c&255)>=(m&255)?(k[n+4>>2]|0)>>>0<(k[s>>2]|0)>>>0:0){a=d;break}if((d|0)==(r|0)){y=83;break a}f=n+4|0;while(1){e=a+36|0;c=i[e>>0]^1;if((m&255)<(c&255))break;if((c&255)>=(m&255)?(k[f>>2]|0)>>>0<(k[e+4>>2]|0)>>>0:0)break;a=d+32|0;if((a|0)==(r|0)){y=83;break a}else{K=d;d=a;a=K}}F=k[d>>2]|0;E=e;D=k[E>>2]|0;E=k[E+4>>2]|0;o=a+44|0;G=k[o>>2]|0;y=a+48|0;H=k[y>>2]|0;A=a+52|0;I=k[A>>2]|0;B=a+56|0;J=k[B>>2]|0;C=a+60|0;K=k[C>>2]|0;k[d>>2]=k[r>>2];j=z;l=k[j+4>>2]|0;m=e;k[m>>2]=k[j>>2];k[m+4>>2]=l;k[o>>2]=k[t>>2];k[y>>2]=k[u>>2];k[A>>2]=k[v>>2];k[B>>2]=k[w>>2];k[C>>2]=k[x>>2];k[r>>2]=F;F=z;k[F>>2]=D;k[F+4>>2]=E;k[t>>2]=G;k[u>>2]=H;k[v>>2]=I;k[w>>2]=J;k[x>>2]=K;a=a+64|0}while(0);if((a|0)==(r|0)){y=83;break a}h=n+4|0;f=r;while(1){g=i[n>>0]^1;c=i[a+4>>0]^1;e:do if((g&255)>=(c&255)){d=a;while(1){if((c&255)>=(g&255)?(k[h>>2]|0)>>>0<(k[d+4+4>>2]|0)>>>0:0){a=d;break e}a=d+32|0;c=i[d+36>>0]^1;if((g&255)<(c&255))break;else d=a}}while(0);d=f;while(1){f=d+-32|0;e=d+-28|0;c=i[e>>0]^1;if((g&255)<(c&255)){d=f;continue}if((c&255)<(g&255))break;if((k[h>>2]|0)>>>0<(k[e+4>>2]|0)>>>0)d=f;else break}if(a>>>0>=f>>>0)continue b;A=k[a>>2]|0;C=a+4|0;y=C;o=k[y>>2]|0;y=k[y+4>>2]|0;E=a+12|0;B=k[E>>2]|0;G=a+16|0;D=k[G>>2]|0;I=a+20|0;F=k[I>>2]|0;K=a+24|0;H=k[K>>2]|0;m=a+28|0;J=k[m>>2]|0;k[a>>2]=k[f>>2];j=e;l=k[j+4>>2]|0;k[C>>2]=k[j>>2];k[C+4>>2]=l;C=d+-20|0;k[E>>2]=k[C>>2];E=d+-16|0;k[G>>2]=k[E>>2];G=d+-12|0;k[I>>2]=k[G>>2];I=d+-8|0;k[K>>2]=k[I>>2];K=d+-4|0;k[m>>2]=k[K>>2];k[f>>2]=A;A=e;k[A>>2]=o;k[A+4>>2]=y;k[C>>2]=B;k[E>>2]=D;k[G>>2]=F;k[I>>2]=H;k[K>>2]=J;a=a+32|0}}while(0);d=a+32|0;f:do if(d>>>0<e>>>0)while(1){l=j+4|0;h=i[l>>0]^1;l=l+4|0;n=d;while(1){m=n+4|0;d=i[m>>0]^1;if((d&255)>=(h&255)){if((h&255)<(d&255))break;if((k[m+4>>2]|0)>>>0>=(k[l>>2]|0)>>>0)break}n=n+32|0}f=e+-32|0;d=i[e+-28>>0]^1;g:do if((d&255)>=(h&255)){g=f;while(1){if((h&255)>=(d&255)?(k[e+-28+4>>2]|0)>>>0<(k[l>>2]|0)>>>0:0){f=g;break g}f=g+-32|0;d=i[e+-60>>0]^1;if((d&255)<(h&255)){e=g;break}else{e=g;g=f}}}while(0);if(n>>>0>f>>>0){d=n;break f}l=k[n>>2]|0;B=m;A=k[B>>2]|0;B=k[B+4>>2]|0;F=n+12|0;C=k[F>>2]|0;H=n+16|0;E=k[H>>2]|0;J=n+20|0;G=k[J>>2]|0;d=n+24|0;I=k[d>>2]|0;h=n+28|0;K=k[h>>2]|0;k[n>>2]=k[f>>2];y=e+-28|0;L=y;g=k[L+4>>2]|0;D=m;k[D>>2]=k[L>>2];k[D+4>>2]=g;D=e+-20|0;k[F>>2]=k[D>>2];F=e+-16|0;k[H>>2]=k[F>>2];H=e+-12|0;k[J>>2]=k[H>>2];J=e+-8|0;k[d>>2]=k[J>>2];d=e+-4|0;k[h>>2]=k[d>>2];k[f>>2]=l;e=y;k[e>>2]=A;k[e+4>>2]=B;k[D>>2]=C;k[F>>2]=E;k[H>>2]=G;k[J>>2]=I;k[d>>2]=K;d=n+32|0;e=f;j=(j|0)==(n|0)?f:j;c=c+1|0}while(0);do if((d|0)!=(j|0)){g=j+4|0;h=d+4|0;e=i[g>>0]^1;f=i[h>>0]^1;if((e&255)>=(f&255)){if((f&255)<(e&255))break;if((k[g+4>>2]|0)>>>0>=(k[h+4>>2]|0)>>>0)break}B=k[d>>2]|0;A=h;y=k[A>>2]|0;A=k[A+4>>2]|0;F=d+12|0;C=k[F>>2]|0;H=d+16|0;E=k[H>>2]|0;J=d+20|0;G=k[J>>2]|0;L=d+24|0;I=k[L>>2]|0;n=d+28|0;K=k[n>>2]|0;k[d>>2]=k[j>>2];l=g;m=k[l+4>>2]|0;D=h;k[D>>2]=k[l>>2];k[D+4>>2]=m;D=j+12|0;k[F>>2]=k[D>>2];F=j+16|0;k[H>>2]=k[F>>2];H=j+20|0;k[J>>2]=k[H>>2];J=j+24|0;k[L>>2]=k[J>>2];L=j+28|0;k[n>>2]=k[L>>2];k[j>>2]=B;B=g;k[B>>2]=y;k[B+4>>2]=A;k[D>>2]=C;k[F>>2]=E;k[H>>2]=G;k[J>>2]=I;k[L>>2]=K;c=c+1|0}while(0);if(!c){e=wb(a,d)|0;c=d+32|0;if(wb(c,b)|0){y=78;break}if(e){a=c;continue}}L=d;if((L-o|0)>=(p-L|0)){y=82;break}rb(a,d);a=d+32|0}if((y|0)==78)if(e){y=83;break}else{b=d;continue}else if((y|0)==82){rb(d+32|0,b);b=d;continue}}if((y|0)==4){d=a+4|0;b=i[z>>0]^1;c=i[d>>0]^1;if((b&255)>=(c&255)){if((c&255)<(b&255))return;if((k[s>>2]|0)>>>0>=(k[d+4>>2]|0)>>>0)return}G=k[a>>2]|0;F=d;E=k[F>>2]|0;F=k[F+4>>2]|0;y=a+12|0;H=k[y>>2]|0;A=a+16|0;I=k[A>>2]|0;B=a+20|0;J=k[B>>2]|0;C=a+24|0;K=k[C>>2]|0;D=a+28|0;L=k[D>>2]|0;k[a>>2]=k[r>>2];p=z;q=k[p+4>>2]|0;s=d;k[s>>2]=k[p>>2];k[s+4>>2]=q;k[y>>2]=k[t>>2];k[A>>2]=k[u>>2];k[B>>2]=k[v>>2];k[C>>2]=k[w>>2];k[D>>2]=k[x>>2];k[r>>2]=G;G=z;k[G>>2]=E;k[G+4>>2]=F;k[t>>2]=H;k[u>>2]=I;k[v>>2]=J;k[w>>2]=K;k[x>>2]=L;return}else if((y|0)==8){tb(a,a+32|0,r)|0;return}else if((y|0)==9){ub(a,a+32|0,a+64|0,r)|0;return}else if((y|0)==10){vb(a,a+32|0,a+64|0,a+96|0,r)|0;return}else if((y|0)==12){d=a+64|0;tb(a,a+32|0,d)|0;c=a+96|0;if((c|0)==(b|0))return;else x=c;while(1){f=x+4|0;l=d+4|0;c=i[f>>0]^1;e=i[l>>0]^1;if((c&255)>=(e&255)){if((e&255)>=(c&255)?(k[f+4>>2]|0)>>>0<(k[l+4>>2]|0)>>>0:0)y=16}else y=16;if((y|0)==16){y=0;p=k[x>>2]|0;r=f;q=k[r>>2]|0;r=k[r+4>>2]|0;e=x+12|0;s=k[e>>2]|0;g=x+16|0;t=k[g>>2]|0;h=x+20|0;u=k[h>>2]|0;K=x+24|0;v=k[K>>2]|0;L=x+28|0;w=k[L>>2]|0;k[x>>2]=k[d>>2];I=l;J=k[I+4>>2]|0;c=f;k[c>>2]=k[I>>2];k[c+4>>2]=J;c=d+12|0;k[e>>2]=k[c>>2];e=d+16|0;k[g>>2]=k[e>>2];g=d+20|0;k[h>>2]=k[g>>2];h=d+24|0;k[K>>2]=k[h>>2];f=d+28|0;k[L>>2]=k[f>>2];h:do if((d|0)==(a|0)){j=e;e=l}else{n=q&255^1;m=d;o=f;j=e;e=l;while(1){d=m+-32|0;l=m+-28|0;f=i[l>>0]^1;if((n&255)>=(f&255)){if((f&255)<(n&255)){d=m;f=o;break h}if(r>>>0>=(k[m+-24>>2]|0)>>>0){d=m;f=o;break h}}k[m>>2]=k[d>>2];g=l;e=k[g+4>>2]|0;c=m+4|0;k[c>>2]=k[g>>2];k[c+4>>2]=e;c=m+-20|0;k[m+12>>2]=k[c>>2];e=m+-16|0;k[m+16>>2]=k[e>>2];g=m+-12|0;k[m+20>>2]=k[g>>2];h=m+-8|0;k[m+24>>2]=k[h>>2];f=m+-4|0;k[m+28>>2]=k[f>>2];if((d|0)==(a|0)){j=e;e=l;break}else{m=d;o=f;j=e;e=l}}}while(0);k[d>>2]=p;L=e;k[L>>2]=q;k[L+4>>2]=r;k[c>>2]=s;k[j>>2]=t;k[g>>2]=u;k[h>>2]=v;k[f>>2]=w}c=x+32|0;if((c|0)==(b|0))break;else{d=x;x=c}}return}else if((y|0)==83)return}function sb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0;m=a+4|0;e=k[m>>2]|0;n=k[a>>2]|0;j=n;l=e-j>>3;i=l+1|0;if(i>>>0>536870911)xa(1340,1363,303,1438);o=a+8|0;c=(k[o>>2]|0)-j|0;if(c>>3>>>0<268435455){c=c>>2;c=c>>>0<i>>>0?i:c;if(!c){f=0;d=0}else g=5}else{c=536870911;g=5}if((g|0)==5){f=c<<3;f=(f|0)==0?1:f;d=_d(f)|0;a:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(f)|0;if(d)break a}a=ya(4)|0;k[a>>2]=128;La(a|0,8,1)}while(0);f=c}c=d+(l<<3)|0;h=d+(f<<3)|0;k[c>>2]=k[b>>2];k[d+(l<<3)+4>>2]=k[b+4>>2];g=d+(i<<3)|0;if((e|0)!=(n|0)){f=e+-8|0;while(1){b=e;e=e+-8|0;k[c+-8>>2]=k[e>>2];k[c+-4>>2]=k[b+-4>>2];if((e|0)==(n|0))break;else c=c+-8|0}c=d+(l+~((f-j|0)>>>3)<<3)|0}k[a>>2]=c;k[m>>2]=g;k[o>>2]=h;if(!n)return;$d(n);return}function tb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;x=b+4|0;v=a+4|0;e=i[x>>0]^1;d=i[v>>0]^1;if((e&255)>=(d&255))if((d&255)<(e&255))f=0;else f=(k[x+4>>2]|0)>>>0<(k[v+4>>2]|0)>>>0;else f=1;w=c+4|0;d=i[w>>0]^1;if((d&255)>=(e&255))if((e&255)<(d&255))e=0;else e=(k[w+4>>2]|0)>>>0<(k[x+4>>2]|0)>>>0;else e=1;if(!f){if(!e){x=0;return x|0}z=k[b>>2]|0;m=x;y=k[m>>2]|0;m=k[m+4>>2]|0;f=b+12|0;n=k[f>>2]|0;g=b+16|0;p=k[g>>2]|0;h=b+20|0;r=k[h>>2]|0;j=b+24|0;t=k[j>>2]|0;l=b+28|0;e=k[l>>2]|0;k[b>>2]=k[c>>2];s=w;q=k[s+4>>2]|0;o=x;k[o>>2]=k[s>>2];k[o+4>>2]=q;o=c+12|0;k[f>>2]=k[o>>2];q=c+16|0;k[g>>2]=k[q>>2];s=c+20|0;k[h>>2]=k[s>>2];u=c+24|0;k[j>>2]=k[u>>2];d=c+28|0;k[l>>2]=k[d>>2];k[c>>2]=z;c=w;k[c>>2]=y;k[c+4>>2]=m;k[o>>2]=n;k[q>>2]=p;k[s>>2]=r;k[u>>2]=t;k[d>>2]=e;d=i[x>>0]^1;e=i[v>>0]^1;if((d&255)>=(e&255)){if((e&255)<(d&255)){z=1;return z|0}if((k[x+4>>2]|0)>>>0>=(k[v+4>>2]|0)>>>0){z=1;return z|0}}r=k[a>>2]|0;t=v;s=k[t>>2]|0;t=k[t+4>>2]|0;m=a+12|0;u=k[m>>2]|0;n=a+16|0;w=k[n>>2]|0;o=a+20|0;c=k[o>>2]|0;p=a+24|0;y=k[p>>2]|0;q=a+28|0;z=k[q>>2]|0;k[a>>2]=k[b>>2];e=x;a=k[e+4>>2]|0;k[v>>2]=k[e>>2];k[v+4>>2]=a;k[m>>2]=k[f>>2];k[n>>2]=k[g>>2];k[o>>2]=k[h>>2];k[p>>2]=k[j>>2];k[q>>2]=k[l>>2];k[b>>2]=r;k[x>>2]=s;k[x+4>>2]=t;k[f>>2]=u;k[g>>2]=w;k[h>>2]=c;k[j>>2]=y;k[l>>2]=z;z=2;return z|0}n=k[a>>2]|0;p=v;o=k[p>>2]|0;p=k[p+4>>2]|0;d=a+12|0;q=k[d>>2]|0;f=a+16|0;r=k[f>>2]|0;g=a+20|0;s=k[g>>2]|0;l=a+24|0;t=k[l>>2]|0;m=a+28|0;u=k[m>>2]|0;if(e){k[a>>2]=k[c>>2];x=w;b=k[x+4>>2]|0;k[v>>2]=k[x>>2];k[v+4>>2]=b;v=c+12|0;k[d>>2]=k[v>>2];b=c+16|0;k[f>>2]=k[b>>2];x=c+20|0;k[g>>2]=k[x>>2];y=c+24|0;k[l>>2]=k[y>>2];z=c+28|0;k[m>>2]=k[z>>2];k[c>>2]=n;c=w;k[c>>2]=o;k[c+4>>2]=p;k[v>>2]=q;k[b>>2]=r;k[x>>2]=s;k[y>>2]=t;k[z>>2]=u;z=1;return z|0}k[a>>2]=k[b>>2];h=x;j=k[h+4>>2]|0;a=v;k[a>>2]=k[h>>2];k[a+4>>2]=j;a=b+12|0;k[d>>2]=k[a>>2];j=b+16|0;k[f>>2]=k[j>>2];h=b+20|0;k[g>>2]=k[h>>2];g=b+24|0;k[l>>2]=k[g>>2];f=b+28|0;k[m>>2]=k[f>>2];k[b>>2]=n;d=x;k[d>>2]=o;k[d+4>>2]=p;k[a>>2]=q;k[j>>2]=r;k[h>>2]=s;k[g>>2]=t;k[f>>2]=u;d=i[w>>0]^1;e=o&255^1;if((d&255)>=(e&255)){if((e&255)<(d&255)){z=1;return z|0}if((k[w+4>>2]|0)>>>0>=p>>>0){z=1;return z|0}}k[b>>2]=k[c>>2];y=w;b=k[y+4>>2]|0;v=x;k[v>>2]=k[y>>2];k[v+4>>2]=b;v=c+12|0;k[a>>2]=k[v>>2];b=c+16|0;k[j>>2]=k[b>>2];x=c+20|0;k[h>>2]=k[x>>2];y=c+24|0;k[g>>2]=k[y>>2];z=c+28|0;k[f>>2]=k[z>>2];k[c>>2]=n;c=w;k[c>>2]=o;k[c+4>>2]=p;k[v>>2]=q;k[b>>2]=r;k[x>>2]=s;k[y>>2]=t;k[z>>2]=u;z=2;return z|0}function ub(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;v=tb(a,b,c)|0;g=d+4|0;t=c+4|0;e=i[g>>0]^1;f=i[t>>0]^1;if((e&255)>=(f&255)){if((f&255)<(e&255)){b=v;return b|0}if((k[g+4>>2]|0)>>>0>=(k[t+4>>2]|0)>>>0){b=v;return b|0}}A=k[c>>2]|0;y=t;z=k[y>>2]|0;y=k[y+4>>2]|0;o=c+12|0;x=k[o>>2]|0;p=c+16|0;h=k[p>>2]|0;q=c+20|0;l=k[q>>2]|0;r=c+24|0;n=k[r>>2]|0;s=c+28|0;u=k[s>>2]|0;k[c>>2]=k[d>>2];m=g;j=k[m+4>>2]|0;w=t;k[w>>2]=k[m>>2];k[w+4>>2]=j;w=d+12|0;k[o>>2]=k[w>>2];j=d+16|0;k[p>>2]=k[j>>2];m=d+20|0;k[q>>2]=k[m>>2];f=d+24|0;k[r>>2]=k[f>>2];e=d+28|0;k[s>>2]=k[e>>2];k[d>>2]=A;d=g;k[d>>2]=z;k[d+4>>2]=y;k[w>>2]=x;k[j>>2]=h;k[m>>2]=l;k[f>>2]=n;k[e>>2]=u;e=v+1|0;u=b+4|0;f=i[t>>0]^1;d=i[u>>0]^1;if((f&255)>=(d&255)){if((d&255)<(f&255)){A=e;return A|0}if((k[t+4>>2]|0)>>>0>=(k[u+4>>2]|0)>>>0){A=e;return A|0}}z=k[b>>2]|0;y=u;x=k[y>>2]|0;y=k[y+4>>2]|0;h=b+12|0;A=k[h>>2]|0;j=b+16|0;f=k[j>>2]|0;l=b+20|0;e=k[l>>2]|0;m=b+24|0;g=k[m>>2]|0;n=b+28|0;d=k[n>>2]|0;k[b>>2]=k[c>>2];C=t;B=k[C+4>>2]|0;w=u;k[w>>2]=k[C>>2];k[w+4>>2]=B;k[h>>2]=k[o>>2];k[j>>2]=k[p>>2];k[l>>2]=k[q>>2];k[m>>2]=k[r>>2];k[n>>2]=k[s>>2];k[c>>2]=z;z=t;k[z>>2]=x;k[z+4>>2]=y;k[o>>2]=A;k[p>>2]=f;k[q>>2]=e;k[r>>2]=g;k[s>>2]=d;d=v+2|0;g=a+4|0;e=i[u>>0]^1;f=i[g>>0]^1;if((e&255)>=(f&255)){if((f&255)<(e&255)){C=d;return C|0}if((k[u+4>>2]|0)>>>0>=(k[g+4>>2]|0)>>>0){C=d;return C|0}}x=k[a>>2]|0;w=g;t=k[w>>2]|0;w=k[w+4>>2]|0;p=a+12|0;y=k[p>>2]|0;q=a+16|0;z=k[q>>2]|0;r=a+20|0;A=k[r>>2]|0;s=a+24|0;B=k[s>>2]|0;c=a+28|0;C=k[c>>2]|0;k[a>>2]=k[b>>2];d=u;o=k[d+4>>2]|0;a=g;k[a>>2]=k[d>>2];k[a+4>>2]=o;k[p>>2]=k[h>>2];k[q>>2]=k[j>>2];k[r>>2]=k[l>>2];k[s>>2]=k[m>>2];k[c>>2]=k[n>>2];k[b>>2]=x;x=u;k[x>>2]=t;k[x+4>>2]=w;k[h>>2]=y;k[j>>2]=z;k[l>>2]=A;k[m>>2]=B;k[n>>2]=C;C=v+3|0;return C|0}function vb(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;v=ub(a,b,c,d)|0;h=e+4|0;p=d+4|0;f=i[h>>0]^1;g=i[p>>0]^1;if((f&255)>=(g&255)){if((g&255)<(f&255)){b=v;return b|0}if((k[h+4>>2]|0)>>>0>=(k[p+4>>2]|0)>>>0){b=v;return b|0}}B=k[d>>2]|0;z=p;A=k[z>>2]|0;z=k[z+4>>2]|0;j=d+12|0;y=k[j>>2]|0;l=d+16|0;w=k[l>>2]|0;m=d+20|0;r=k[m>>2]|0;n=d+24|0;t=k[n>>2]|0;o=d+28|0;u=k[o>>2]|0;k[d>>2]=k[e>>2];s=h;q=k[s+4>>2]|0;x=p;k[x>>2]=k[s>>2];k[x+4>>2]=q;x=e+12|0;k[j>>2]=k[x>>2];q=e+16|0;k[l>>2]=k[q>>2];s=e+20|0;k[m>>2]=k[s>>2];g=e+24|0;k[n>>2]=k[g>>2];f=e+28|0;k[o>>2]=k[f>>2];k[e>>2]=B;e=h;k[e>>2]=A;k[e+4>>2]=z;k[x>>2]=y;k[q>>2]=w;k[s>>2]=r;k[g>>2]=t;k[f>>2]=u;f=v+1|0;u=c+4|0;g=i[p>>0]^1;e=i[u>>0]^1;if((g&255)>=(e&255)){if((e&255)<(g&255)){B=f;return B|0}if((k[p+4>>2]|0)>>>0>=(k[u+4>>2]|0)>>>0){B=f;return B|0}}x=k[c>>2]|0;z=u;y=k[z>>2]|0;z=k[z+4>>2]|0;h=c+12|0;A=k[h>>2]|0;q=c+16|0;B=k[q>>2]|0;r=c+20|0;g=k[r>>2]|0;s=c+24|0;f=k[s>>2]|0;t=c+28|0;e=k[t>>2]|0;k[c>>2]=k[d>>2];D=p;C=k[D+4>>2]|0;w=u;k[w>>2]=k[D>>2];k[w+4>>2]=C;k[h>>2]=k[j>>2];k[q>>2]=k[l>>2];k[r>>2]=k[m>>2];k[s>>2]=k[n>>2];k[t>>2]=k[o>>2];k[d>>2]=x;d=p;k[d>>2]=y;k[d+4>>2]=z;k[j>>2]=A;k[l>>2]=B;k[m>>2]=g;k[n>>2]=f;k[o>>2]=e;e=v+2|0;d=b+4|0;f=i[u>>0]^1;g=i[d>>0]^1;if((f&255)>=(g&255)){if((g&255)<(f&255)){D=e;return D|0}if((k[u+4>>2]|0)>>>0>=(k[d+4>>2]|0)>>>0){D=e;return D|0}}B=k[b>>2]|0;A=d;z=k[A>>2]|0;A=k[A+4>>2]|0;j=b+12|0;C=k[j>>2]|0;l=b+16|0;D=k[l>>2]|0;m=b+20|0;e=k[m>>2]|0;n=b+24|0;g=k[n>>2]|0;o=b+28|0;f=k[o>>2]|0;k[b>>2]=k[c>>2];w=u;x=k[w+4>>2]|0;y=d;k[y>>2]=k[w>>2];k[y+4>>2]=x;k[j>>2]=k[h>>2];k[l>>2]=k[q>>2];k[m>>2]=k[r>>2];k[n>>2]=k[s>>2];k[o>>2]=k[t>>2];k[c>>2]=B;B=u;k[B>>2]=z;k[B+4>>2]=A;k[h>>2]=C;k[q>>2]=D;k[r>>2]=e;k[s>>2]=g;k[t>>2]=f;f=v+3|0;h=a+4|0;g=i[d>>0]^1;e=i[h>>0]^1;if((g&255)>=(e&255)){if((e&255)<(g&255)){D=f;return D|0}if((k[d+4>>2]|0)>>>0>=(k[h+4>>2]|0)>>>0){D=f;return D|0}}y=k[a>>2]|0;x=h;w=k[x>>2]|0;x=k[x+4>>2]|0;r=a+12|0;z=k[r>>2]|0;s=a+16|0;A=k[s>>2]|0;t=a+20|0;B=k[t>>2]|0;u=a+24|0;C=k[u>>2]|0;c=a+28|0;D=k[c>>2]|0;k[a>>2]=k[b>>2];p=d;q=k[p+4>>2]|0;a=h;k[a>>2]=k[p>>2];k[a+4>>2]=q;k[r>>2]=k[j>>2];k[s>>2]=k[l>>2];k[t>>2]=k[m>>2];k[u>>2]=k[n>>2];k[c>>2]=k[o>>2];k[b>>2]=y;y=d;k[y>>2]=w;k[y+4>>2]=x;k[j>>2]=z;k[l>>2]=A;k[m>>2]=B;k[n>>2]=C;k[o>>2]=D;D=v+4|0;return D|0}function wb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;switch(b-a>>5|0){case 2:{c=b+-32|0;f=b+-28|0;g=a+4|0;d=i[f>>0]^1;e=i[g>>0]^1;if((d&255)>=(e&255)){if((e&255)<(d&255)){b=1;return b|0}if((k[f+4>>2]|0)>>>0>=(k[g+4>>2]|0)>>>0){b=1;return b|0}}r=k[a>>2]|0;q=g;p=k[q>>2]|0;q=k[q+4>>2]|0;v=a+12|0;s=k[v>>2]|0;x=a+16|0;u=k[x>>2]|0;m=a+20|0;w=k[m>>2]|0;n=a+24|0;y=k[n>>2]|0;o=a+28|0;z=k[o>>2]|0;k[a>>2]=k[c>>2];l=f;a=k[l+4>>2]|0;t=g;k[t>>2]=k[l>>2];k[t+4>>2]=a;t=b+-20|0;k[v>>2]=k[t>>2];v=b+-16|0;k[x>>2]=k[v>>2];x=b+-12|0;k[m>>2]=k[x>>2];a=b+-8|0;k[n>>2]=k[a>>2];b=b+-4|0;k[o>>2]=k[b>>2];k[c>>2]=r;r=f;k[r>>2]=p;k[r+4>>2]=q;k[t>>2]=s;k[v>>2]=u;k[x>>2]=w;k[a>>2]=y;k[b>>2]=z;b=1;return b|0}case 3:{tb(a,a+32|0,b+-32|0)|0;b=1;return b|0}case 4:{ub(a,a+32|0,a+64|0,b+-32|0)|0;b=1;return b|0}case 5:{vb(a,a+32|0,a+64|0,a+96|0,b+-32|0)|0;b=1;return b|0}case 1:case 0:{b=1;return b|0}default:{e=a+64|0;tb(a,a+32|0,e)|0;d=a+96|0;if((d|0)==(b|0)){b=1;return b|0}else c=0;while(1){h=d+4|0;j=e+4|0;f=i[h>>0]^1;g=i[j>>0]^1;if((f&255)>=(g&255)){if((g&255)>=(f&255)?(k[h+4>>2]|0)>>>0<(k[j+4>>2]|0)>>>0:0)z=13}else z=13;if((z|0)==13){z=0;r=k[d>>2]|0;t=h;s=k[t>>2]|0;t=k[t+4>>2]|0;m=d+12|0;u=k[m>>2]|0;p=d+16|0;v=k[p>>2]|0;g=d+20|0;w=k[g>>2]|0;f=d+24|0;x=k[f>>2]|0;q=d+28|0;y=k[q>>2]|0;k[d>>2]=k[e>>2];n=j;o=k[n+4>>2]|0;l=h;k[l>>2]=k[n>>2];k[l+4>>2]=o;l=e+12|0;k[m>>2]=k[l>>2];m=e+16|0;k[p>>2]=k[m>>2];h=e+20|0;k[g>>2]=k[h>>2];g=e+24|0;k[f>>2]=k[g>>2];f=e+28|0;k[q>>2]=k[f>>2];a:do if((e|0)!=(a|0)){q=s&255^1;p=e;o=h;while(1){e=p+-32|0;n=p+-28|0;h=i[n>>0]^1;if((q&255)>=(h&255)){if((h&255)<(q&255)){e=p;h=o;break a}if(t>>>0>=(k[p+-24>>2]|0)>>>0){e=p;h=o;break a}}k[p>>2]=k[e>>2];h=n;m=k[h+4>>2]|0;l=p+4|0;k[l>>2]=k[h>>2];k[l+4>>2]=m;l=p+-20|0;k[p+12>>2]=k[l>>2];m=p+-16|0;k[p+16>>2]=k[m>>2];h=p+-12|0;k[p+20>>2]=k[h>>2];g=p+-8|0;k[p+24>>2]=k[g>>2];f=p+-4|0;k[p+28>>2]=k[f>>2];if((e|0)==(a|0)){j=n;break}else{p=e;o=h;j=n}}}while(0);k[e>>2]=r;r=j;k[r>>2]=s;k[r+4>>2]=t;k[l>>2]=u;k[m>>2]=v;k[h>>2]=w;k[g>>2]=x;k[f>>2]=y;c=c+1|0;if((c|0)==8)break}e=d+32|0;if((e|0)==(b|0)){c=1;z=22;break}else{y=d;d=e;e=y}}if((z|0)==22)return c|0;b=(d+32|0)==(b|0);return b|0}}return 0}function xb(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,l=0;h=r;r=r+32|0;g=h;l=Za[k[e>>2]&7](b,a)|0;f=Za[k[e>>2]&7](c,b)|0;do if(l){k[g>>2]=k[a>>2];k[g+4>>2]=k[a+4>>2];k[g+8>>2]=k[a+8>>2];k[g+12>>2]=k[a+12>>2];k[g+16>>2]=k[a+16>>2];k[g+20>>2]=k[a+20>>2];k[g+24>>2]=k[a+24>>2];k[g+28>>2]=k[a+28>>2];if(f){k[a>>2]=k[c>>2];k[a+4>>2]=k[c+4>>2];k[a+8>>2]=k[c+8>>2];k[a+12>>2]=k[c+12>>2];k[a+16>>2]=k[c+16>>2];k[a+20>>2]=k[c+20>>2];j[a+24>>1]=j[c+24>>1]|0;i[a+26>>0]=i[c+26>>0]|0;k[c>>2]=k[g>>2];k[c+4>>2]=k[g+4>>2];k[c+8>>2]=k[g+8>>2];k[c+12>>2]=k[g+12>>2];k[c+16>>2]=k[g+16>>2];k[c+20>>2]=k[g+20>>2];j[c+24>>1]=j[g+24>>1]|0;i[c+26>>0]=i[g+26>>0]|0;f=1;break};k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];j[a+24>>1]=j[b+24>>1]|0;i[a+26>>0]=i[b+26>>0]|0;k[b>>2]=k[g>>2];k[b+4>>2]=k[g+4>>2];k[b+8>>2]=k[g+8>>2];k[b+12>>2]=k[g+12>>2];k[b+16>>2]=k[g+16>>2];k[b+20>>2]=k[g+20>>2];j[b+24>>1]=j[g+24>>1]|0;i[b+26>>0]=i[g+26>>0]|0;if(Za[k[e>>2]&7](c,b)|0){k[g>>2]=k[b>>2];k[g+4>>2]=k[b+4>>2];k[g+8>>2]=k[b+8>>2];k[g+12>>2]=k[b+12>>2];k[g+16>>2]=k[b+16>>2];k[g+20>>2]=k[b+20>>2];k[g+24>>2]=k[b+24>>2];k[g+28>>2]=k[b+28>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];j[b+24>>1]=j[c+24>>1]|0;i[b+26>>0]=i[c+26>>0]|0;k[c>>2]=k[g>>2];k[c+4>>2]=k[g+4>>2];k[c+8>>2]=k[g+8>>2];k[c+12>>2]=k[g+12>>2];k[c+16>>2]=k[g+16>>2];k[c+20>>2]=k[g+20>>2];j[c+24>>1]=j[g+24>>1]|0;i[c+26>>0]=i[g+26>>0]|0;f=2}else f=1}else if(f){k[g>>2]=k[b>>2];k[g+4>>2]=k[b+4>>2];k[g+8>>2]=k[b+8>>2];k[g+12>>2]=k[b+12>>2];k[g+16>>2]=k[b+16>>2];k[g+20>>2]=k[b+20>>2];k[g+24>>2]=k[b+24>>2];k[g+28>>2]=k[b+28>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];j[b+24>>1]=j[c+24>>1]|0;i[b+26>>0]=i[c+26>>0]|0;k[c>>2]=k[g>>2];k[c+4>>2]=k[g+4>>2];k[c+8>>2]=k[g+8>>2];k[c+12>>2]=k[g+12>>2];k[c+16>>2]=k[g+16>>2];k[c+20>>2]=k[g+20>>2];j[c+24>>1]=j[g+24>>1]|0;i[c+26>>0]=i[g+26>>0]|0;if(Za[k[e>>2]&7](b,a)|0){k[g>>2]=k[a>>2];k[g+4>>2]=k[a+4>>2];k[g+8>>2]=k[a+8>>2];k[g+12>>2]=k[a+12>>2];k[g+16>>2]=k[a+16>>2];k[g+20>>2]=k[a+20>>2];k[g+24>>2]=k[a+24>>2];k[g+28>>2]=k[a+28>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];j[a+24>>1]=j[b+24>>1]|0;i[a+26>>0]=i[b+26>>0]|0;k[b>>2]=k[g>>2];k[b+4>>2]=k[g+4>>2];k[b+8>>2]=k[g+8>>2];k[b+12>>2]=k[g+12>>2];k[b+16>>2]=k[g+16>>2];k[b+20>>2]=k[g+20>>2];j[b+24>>1]=j[g+24>>1]|0;i[b+26>>0]=i[g+26>>0]|0;f=2}else f=1}else f=0;while(0);if(!(Za[k[e>>2]&7](d,c)|0)){l=f;r=h;return l|0};k[g>>2]=k[c>>2];k[g+4>>2]=k[c+4>>2];k[g+8>>2]=k[c+8>>2];k[g+12>>2]=k[c+12>>2];k[g+16>>2]=k[c+16>>2];k[g+20>>2]=k[c+20>>2];k[g+24>>2]=k[c+24>>2];k[g+28>>2]=k[c+28>>2];k[c>>2]=k[d>>2];k[c+4>>2]=k[d+4>>2];k[c+8>>2]=k[d+8>>2];k[c+12>>2]=k[d+12>>2];k[c+16>>2]=k[d+16>>2];k[c+20>>2]=k[d+20>>2];j[c+24>>1]=j[d+24>>1]|0;i[c+26>>0]=i[d+26>>0]|0;k[d>>2]=k[g>>2];k[d+4>>2]=k[g+4>>2];k[d+8>>2]=k[g+8>>2];k[d+12>>2]=k[g+12>>2];k[d+16>>2]=k[g+16>>2];k[d+20>>2]=k[g+20>>2];j[d+24>>1]=j[g+24>>1]|0;i[d+26>>0]=i[g+26>>0]|0;if(!(Za[k[e>>2]&7](c,b)|0)){l=f+1|0;r=h;return l|0};k[g>>2]=k[b>>2];k[g+4>>2]=k[b+4>>2];k[g+8>>2]=k[b+8>>2];k[g+12>>2]=k[b+12>>2];k[g+16>>2]=k[b+16>>2];k[g+20>>2]=k[b+20>>2];k[g+24>>2]=k[b+24>>2];k[g+28>>2]=k[b+28>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];j[b+24>>1]=j[c+24>>1]|0;i[b+26>>0]=i[c+26>>0]|0;k[c>>2]=k[g>>2];k[c+4>>2]=k[g+4>>2];k[c+8>>2]=k[g+8>>2];k[c+12>>2]=k[g+12>>2];k[c+16>>2]=k[g+16>>2];k[c+20>>2]=k[g+20>>2];j[c+24>>1]=j[g+24>>1]|0;i[c+26>>0]=i[g+26>>0]|0;if(!(Za[k[e>>2]&7](b,a)|0)){l=f+2|0;r=h;return l|0};k[g>>2]=k[a>>2];k[g+4>>2]=k[a+4>>2];k[g+8>>2]=k[a+8>>2];k[g+12>>2]=k[a+12>>2];k[g+16>>2]=k[a+16>>2];k[g+20>>2]=k[a+20>>2];k[g+24>>2]=k[a+24>>2];k[g+28>>2]=k[a+28>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];j[a+24>>1]=j[b+24>>1]|0;i[a+26>>0]=i[b+26>>0]|0;k[b>>2]=k[g>>2];k[b+4>>2]=k[g+4>>2];k[b+8>>2]=k[g+8>>2];k[b+12>>2]=k[g+12>>2];k[b+16>>2]=k[g+16>>2];k[b+20>>2]=k[g+20>>2];j[b+24>>1]=j[g+24>>1]|0;i[b+26>>0]=i[g+26>>0]|0;l=f+3|0;r=h;return l|0}function yb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,l=0,m=0,n=0;n=r;r=r+64|0;h=n+32|0;l=n;switch(b-a>>5|0){case 2:{d=b+-32|0;if(!(Za[k[c>>2]&7](d,a)|0)){a=1;r=n;return a|0};k[h>>2]=k[a>>2];k[h+4>>2]=k[a+4>>2];k[h+8>>2]=k[a+8>>2];k[h+12>>2]=k[a+12>>2];k[h+16>>2]=k[a+16>>2];k[h+20>>2]=k[a+20>>2];k[h+24>>2]=k[a+24>>2];k[h+28>>2]=k[a+28>>2];k[a>>2]=k[d>>2];k[a+4>>2]=k[d+4>>2];k[a+8>>2]=k[d+8>>2];k[a+12>>2]=k[d+12>>2];k[a+16>>2]=k[d+16>>2];k[a+20>>2]=k[d+20>>2];j[a+24>>1]=j[d+24>>1]|0;i[a+26>>0]=i[d+26>>0]|0;k[d>>2]=k[h>>2];k[d+4>>2]=k[h+4>>2];k[d+8>>2]=k[h+8>>2];k[d+12>>2]=k[h+12>>2];k[d+16>>2]=k[h+16>>2];k[d+20>>2]=k[h+20>>2];j[d+24>>1]=j[h+24>>1]|0;i[d+26>>0]=i[h+26>>0]|0;a=1;r=n;return a|0}case 3:{f=a+32|0;e=b+-32|0;b=Za[k[c>>2]&7](f,a)|0;d=Za[k[c>>2]&7](e,f)|0;if(!b){if(!d){a=1;r=n;return a|0};k[h>>2]=k[f>>2];k[h+4>>2]=k[f+4>>2];k[h+8>>2]=k[f+8>>2];k[h+12>>2]=k[f+12>>2];k[h+16>>2]=k[f+16>>2];k[h+20>>2]=k[f+20>>2];k[h+24>>2]=k[f+24>>2];k[h+28>>2]=k[f+28>>2];k[f>>2]=k[e>>2];k[f+4>>2]=k[e+4>>2];k[f+8>>2]=k[e+8>>2];k[f+12>>2]=k[e+12>>2];k[f+16>>2]=k[e+16>>2];k[f+20>>2]=k[e+20>>2];j[f+24>>1]=j[e+24>>1]|0;i[f+26>>0]=i[e+26>>0]|0;k[e>>2]=k[h>>2];k[e+4>>2]=k[h+4>>2];k[e+8>>2]=k[h+8>>2];k[e+12>>2]=k[h+12>>2];k[e+16>>2]=k[h+16>>2];k[e+20>>2]=k[h+20>>2];j[e+24>>1]=j[h+24>>1]|0;i[e+26>>0]=i[h+26>>0]|0;if(!(Za[k[c>>2]&7](f,a)|0)){a=1;r=n;return a|0};k[h>>2]=k[a>>2];k[h+4>>2]=k[a+4>>2];k[h+8>>2]=k[a+8>>2];k[h+12>>2]=k[a+12>>2];k[h+16>>2]=k[a+16>>2];k[h+20>>2]=k[a+20>>2];k[h+24>>2]=k[a+24>>2];k[h+28>>2]=k[a+28>>2];k[a>>2]=k[f>>2];k[a+4>>2]=k[f+4>>2];k[a+8>>2]=k[f+8>>2];k[a+12>>2]=k[f+12>>2];k[a+16>>2]=k[f+16>>2];k[a+20>>2]=k[f+20>>2];j[a+24>>1]=j[f+24>>1]|0;i[a+26>>0]=i[f+26>>0]|0;k[f>>2]=k[h>>2];k[f+4>>2]=k[h+4>>2];k[f+8>>2]=k[h+8>>2];k[f+12>>2]=k[h+12>>2];k[f+16>>2]=k[h+16>>2];k[f+20>>2]=k[h+20>>2];j[f+24>>1]=j[h+24>>1]|0;i[f+26>>0]=i[h+26>>0]|0;a=1;r=n;return a|0};k[h>>2]=k[a>>2];k[h+4>>2]=k[a+4>>2];k[h+8>>2]=k[a+8>>2];k[h+12>>2]=k[a+12>>2];k[h+16>>2]=k[a+16>>2];k[h+20>>2]=k[a+20>>2];k[h+24>>2]=k[a+24>>2];k[h+28>>2]=k[a+28>>2];if(d){k[a>>2]=k[e>>2];k[a+4>>2]=k[e+4>>2];k[a+8>>2]=k[e+8>>2];k[a+12>>2]=k[e+12>>2];k[a+16>>2]=k[e+16>>2];k[a+20>>2]=k[e+20>>2];j[a+24>>1]=j[e+24>>1]|0;i[a+26>>0]=i[e+26>>0]|0;k[e>>2]=k[h>>2];k[e+4>>2]=k[h+4>>2];k[e+8>>2]=k[h+8>>2];k[e+12>>2]=k[h+12>>2];k[e+16>>2]=k[h+16>>2];k[e+20>>2]=k[h+20>>2];j[e+24>>1]=j[h+24>>1]|0;i[e+26>>0]=i[h+26>>0]|0;a=1;r=n;return a|0};k[a>>2]=k[f>>2];k[a+4>>2]=k[f+4>>2];k[a+8>>2]=k[f+8>>2];k[a+12>>2]=k[f+12>>2];k[a+16>>2]=k[f+16>>2];k[a+20>>2]=k[f+20>>2];j[a+24>>1]=j[f+24>>1]|0;i[a+26>>0]=i[f+26>>0]|0;k[f>>2]=k[h>>2];k[f+4>>2]=k[h+4>>2];k[f+8>>2]=k[h+8>>2];k[f+12>>2]=k[h+12>>2];k[f+16>>2]=k[h+16>>2];k[f+20>>2]=k[h+20>>2];j[f+24>>1]=j[h+24>>1]|0;i[f+26>>0]=i[h+26>>0]|0;if(!(Za[k[c>>2]&7](e,f)|0)){a=1;r=n;return a|0};k[h>>2]=k[f>>2];k[h+4>>2]=k[f+4>>2];k[h+8>>2]=k[f+8>>2];k[h+12>>2]=k[f+12>>2];k[h+16>>2]=k[f+16>>2];k[h+20>>2]=k[f+20>>2];k[h+24>>2]=k[f+24>>2];k[h+28>>2]=k[f+28>>2];k[f>>2]=k[e>>2];k[f+4>>2]=k[e+4>>2];k[f+8>>2]=k[e+8>>2];k[f+12>>2]=k[e+12>>2];k[f+16>>2]=k[e+16>>2];k[f+20>>2]=k[e+20>>2];j[f+24>>1]=j[e+24>>1]|0;i[f+26>>0]=i[e+26>>0]|0;k[e>>2]=k[h>>2];k[e+4>>2]=k[h+4>>2];k[e+8>>2]=k[h+8>>2];k[e+12>>2]=k[h+12>>2];k[e+16>>2]=k[h+16>>2];k[e+20>>2]=k[h+20>>2];j[e+24>>1]=j[h+24>>1]|0;i[e+26>>0]=i[h+26>>0]|0;a=1;r=n;return a|0}case 4:{xb(a,a+32|0,a+64|0,b+-32|0,c)|0;a=1;r=n;return a|0}case 5:{e=a+32|0;f=a+64|0;g=a+96|0;d=b+-32|0;xb(a,e,f,g,c)|0;if(!(Za[k[c>>2]&7](d,g)|0)){a=1;r=n;return a|0};k[h>>2]=k[g>>2];k[h+4>>2]=k[g+4>>2];k[h+8>>2]=k[g+8>>2];k[h+12>>2]=k[g+12>>2];k[h+16>>2]=k[g+16>>2];k[h+20>>2]=k[g+20>>2];k[h+24>>2]=k[g+24>>2];k[h+28>>2]=k[g+28>>2];k[g>>2]=k[d>>2];k[g+4>>2]=k[d+4>>2];k[g+8>>2]=k[d+8>>2];k[g+12>>2]=k[d+12>>2];k[g+16>>2]=k[d+16>>2];k[g+20>>2]=k[d+20>>2];j[g+24>>1]=j[d+24>>1]|0;i[g+26>>0]=i[d+26>>0]|0;k[d>>2]=k[h>>2];k[d+4>>2]=k[h+4>>2];k[d+8>>2]=k[h+8>>2];k[d+12>>2]=k[h+12>>2];k[d+16>>2]=k[h+16>>2];k[d+20>>2]=k[h+20>>2];j[d+24>>1]=j[h+24>>1]|0;i[d+26>>0]=i[h+26>>0]|0;if(!(Za[k[c>>2]&7](g,f)|0)){a=1;r=n;return a|0};k[h>>2]=k[f>>2];k[h+4>>2]=k[f+4>>2];k[h+8>>2]=k[f+8>>2];k[h+12>>2]=k[f+12>>2];k[h+16>>2]=k[f+16>>2];k[h+20>>2]=k[f+20>>2];k[h+24>>2]=k[f+24>>2];k[h+28>>2]=k[f+28>>2];k[f>>2]=k[g>>2];k[f+4>>2]=k[g+4>>2];k[f+8>>2]=k[g+8>>2];k[f+12>>2]=k[g+12>>2];k[f+16>>2]=k[g+16>>2];k[f+20>>2]=k[g+20>>2];j[f+24>>1]=j[g+24>>1]|0;i[f+26>>0]=i[g+26>>0]|0;k[g>>2]=k[h>>2];k[g+4>>2]=k[h+4>>2];k[g+8>>2]=k[h+8>>2];k[g+12>>2]=k[h+12>>2];k[g+16>>2]=k[h+16>>2];k[g+20>>2]=k[h+20>>2];j[g+24>>1]=j[h+24>>1]|0;i[g+26>>0]=i[h+26>>0]|0;if(!(Za[k[c>>2]&7](f,e)|0)){a=1;r=n;return a|0};k[h>>2]=k[e>>2];k[h+4>>2]=k[e+4>>2];k[h+8>>2]=k[e+8>>2];k[h+12>>2]=k[e+12>>2];k[h+16>>2]=k[e+16>>2];k[h+20>>2]=k[e+20>>2];k[h+24>>2]=k[e+24>>2];k[h+28>>2]=k[e+28>>2];k[e>>2]=k[f>>2];k[e+4>>2]=k[f+4>>2];k[e+8>>2]=k[f+8>>2];k[e+12>>2]=k[f+12>>2];k[e+16>>2]=k[f+16>>2];k[e+20>>2]=k[f+20>>2];j[e+24>>1]=j[f+24>>1]|0;i[e+26>>0]=i[f+26>>0]|0;k[f>>2]=k[h>>2];k[f+4>>2]=k[h+4>>2];k[f+8>>2]=k[h+8>>2];k[f+12>>2]=k[h+12>>2];k[f+16>>2]=k[h+16>>2];k[f+20>>2]=k[h+20>>2];j[f+24>>1]=j[h+24>>1]|0;i[f+26>>0]=i[h+26>>0]|0;if(!(Za[k[c>>2]&7](e,a)|0)){a=1;r=n;return a|0};k[h>>2]=k[a>>2];k[h+4>>2]=k[a+4>>2];k[h+8>>2]=k[a+8>>2];k[h+12>>2]=k[a+12>>2];k[h+16>>2]=k[a+16>>2];k[h+20>>2]=k[a+20>>2];k[h+24>>2]=k[a+24>>2];k[h+28>>2]=k[a+28>>2];k[a>>2]=k[e>>2];k[a+4>>2]=k[e+4>>2];k[a+8>>2]=k[e+8>>2];k[a+12>>2]=k[e+12>>2];k[a+16>>2]=k[e+16>>2];k[a+20>>2]=k[e+20>>2];j[a+24>>1]=j[e+24>>1]|0;i[a+26>>0]=i[e+26>>0]|0;k[e>>2]=k[h>>2];k[e+4>>2]=k[h+4>>2];k[e+8>>2]=k[h+8>>2];k[e+12>>2]=k[h+12>>2];k[e+16>>2]=k[h+16>>2];k[e+20>>2]=k[h+20>>2];j[e+24>>1]=j[h+24>>1]|0;i[e+26>>0]=i[h+26>>0]|0;a=1;r=n;return a|0}case 1:case 0:{a=1;r=n;return a|0}default:{f=a+64|0;d=a+32|0;g=Za[k[c>>2]&7](d,a)|0;e=Za[k[c>>2]&7](f,d)|0;do if(g){k[h>>2]=k[a>>2];k[h+4>>2]=k[a+4>>2];k[h+8>>2]=k[a+8>>2];k[h+12>>2]=k[a+12>>2];k[h+16>>2]=k[a+16>>2];k[h+20>>2]=k[a+20>>2];k[h+24>>2]=k[a+24>>2];k[h+28>>2]=k[a+28>>2];if(e){k[a>>2]=k[f>>2];k[a+4>>2]=k[f+4>>2];k[a+8>>2]=k[f+8>>2];k[a+12>>2]=k[f+12>>2];k[a+16>>2]=k[f+16>>2];k[a+20>>2]=k[f+20>>2];j[a+24>>1]=j[f+24>>1]|0;i[a+26>>0]=i[f+26>>0]|0;k[f>>2]=k[h>>2];k[f+4>>2]=k[h+4>>2];k[f+8>>2]=k[h+8>>2];k[f+12>>2]=k[h+12>>2];k[f+16>>2]=k[h+16>>2];k[f+20>>2]=k[h+20>>2];j[f+24>>1]=j[h+24>>1]|0;i[f+26>>0]=i[h+26>>0]|0;break};k[a>>2]=k[d>>2];k[a+4>>2]=k[d+4>>2];k[a+8>>2]=k[d+8>>2];k[a+12>>2]=k[d+12>>2];k[a+16>>2]=k[d+16>>2];k[a+20>>2]=k[d+20>>2];j[a+24>>1]=j[d+24>>1]|0;i[a+26>>0]=i[d+26>>0]|0;k[d>>2]=k[h>>2];k[d+4>>2]=k[h+4>>2];k[d+8>>2]=k[h+8>>2];k[d+12>>2]=k[h+12>>2];k[d+16>>2]=k[h+16>>2];k[d+20>>2]=k[h+20>>2];j[d+24>>1]=j[h+24>>1]|0;i[d+26>>0]=i[h+26>>0]|0;if(Za[k[c>>2]&7](f,d)|0){k[h>>2]=k[d>>2];k[h+4>>2]=k[d+4>>2];k[h+8>>2]=k[d+8>>2];k[h+12>>2]=k[d+12>>2];k[h+16>>2]=k[d+16>>2];k[h+20>>2]=k[d+20>>2];k[h+24>>2]=k[d+24>>2];k[h+28>>2]=k[d+28>>2];k[d>>2]=k[f>>2];k[d+4>>2]=k[f+4>>2];k[d+8>>2]=k[f+8>>2];k[d+12>>2]=k[f+12>>2];k[d+16>>2]=k[f+16>>2];k[d+20>>2]=k[f+20>>2];j[d+24>>1]=j[f+24>>1]|0;i[d+26>>0]=i[f+26>>0]|0;k[f>>2]=k[h>>2];k[f+4>>2]=k[h+4>>2];k[f+8>>2]=k[h+8>>2];k[f+12>>2]=k[h+12>>2];k[f+16>>2]=k[h+16>>2];k[f+20>>2]=k[h+20>>2];j[f+24>>1]=j[h+24>>1]|0;i[f+26>>0]=i[h+26>>0]|0}}else if(e?(k[h>>2]=k[d>>2],k[h+4>>2]=k[d+4>>2],k[h+8>>2]=k[d+8>>2],k[h+12>>2]=k[d+12>>2],k[h+16>>2]=k[d+16>>2],k[h+20>>2]=k[d+20>>2],k[h+24>>2]=k[d+24>>2],k[h+28>>2]=k[d+28>>2],k[d>>2]=k[f>>2],k[d+4>>2]=k[f+4>>2],k[d+8>>2]=k[f+8>>2],k[d+12>>2]=k[f+12>>2],k[d+16>>2]=k[f+16>>2],k[d+20>>2]=k[f+20>>2],j[d+24>>1]=j[f+24>>1]|0,i[d+26>>0]=i[f+26>>0]|0,k[f>>2]=k[h>>2],k[f+4>>2]=k[h+4>>2],k[f+8>>2]=k[h+8>>2],k[f+12>>2]=k[h+12>>2],k[f+16>>2]=k[h+16>>2],k[f+20>>2]=k[h+20>>2],j[f+24>>1]=j[h+24>>1]|0,i[f+26>>0]=i[h+26>>0]|0,Za[k[c>>2]&7](d,a)|0):0){k[h>>2]=k[a>>2];k[h+4>>2]=k[a+4>>2];k[h+8>>2]=k[a+8>>2];k[h+12>>2]=k[a+12>>2];k[h+16>>2]=k[a+16>>2];k[h+20>>2]=k[a+20>>2];k[h+24>>2]=k[a+24>>2];k[h+28>>2]=k[a+28>>2];k[a>>2]=k[d>>2];k[a+4>>2]=k[d+4>>2];k[a+8>>2]=k[d+8>>2];k[a+12>>2]=k[d+12>>2];k[a+16>>2]=k[d+16>>2];k[a+20>>2]=k[d+20>>2];j[a+24>>1]=j[d+24>>1]|0;i[a+26>>0]=i[d+26>>0]|0;k[d>>2]=k[h>>2];k[d+4>>2]=k[h+4>>2];k[d+8>>2]=k[h+8>>2];k[d+12>>2]=k[h+12>>2];k[d+16>>2]=k[h+16>>2];k[d+20>>2]=k[h+20>>2];j[d+24>>1]=j[h+24>>1]|0;i[d+26>>0]=i[h+26>>0]|0}while(0);e=a+96|0;if((e|0)==(b|0)){a=1;r=n;return a|0}d=0;while(1){if(Za[k[c>>2]&7](e,f)|0){k[l>>2]=k[e>>2];k[l+4>>2]=k[e+4>>2];k[l+8>>2]=k[e+8>>2];k[l+12>>2]=k[e+12>>2];k[l+16>>2]=k[e+16>>2];k[l+20>>2]=k[e+20>>2];k[l+24>>2]=k[e+24>>2];k[l+28>>2]=k[e+28>>2];g=e;h=f;while(1){k[g>>2]=k[h>>2];k[g+4>>2]=k[h+4>>2];k[g+8>>2]=k[h+8>>2];k[g+12>>2]=k[h+12>>2];k[g+16>>2]=k[h+16>>2];k[g+20>>2]=k[h+20>>2];j[g+24>>1]=j[h+24>>1]|0;i[g+26>>0]=i[h+26>>0]|0;if((h|0)==(a|0))break;f=h+-32|0;if(Za[k[c>>2]&7](l,f)|0){g=h;h=f}else break}k[h>>2]=k[l>>2];k[h+4>>2]=k[l+4>>2];k[h+8>>2]=k[l+8>>2];k[h+12>>2]=k[l+12>>2];k[h+16>>2]=k[l+16>>2];k[h+20>>2]=k[l+20>>2];j[h+24>>1]=j[l+24>>1]|0;i[h+26>>0]=i[l+26>>0]|0;d=d+1|0;if((d|0)==8)break}f=e+32|0;if((f|0)==(b|0)){d=1;m=35;break}else{h=e;e=f;f=h}}if((m|0)==35){r=n;return d|0}a=(e+32|0)==(b|0);r=n;return a|0}}return 0}function zb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;v=Za[k[d>>2]&7](b,a)|0;e=Za[k[d>>2]&7](c,b)|0;if(!v){if(!e){c=0;return c|0}y=k[b>>2]|0;j=b+4|0;l=j;w=k[l>>2]|0;l=k[l+4>>2]|0;e=b+12|0;m=k[e>>2]|0;f=b+16|0;o=k[f>>2]|0;g=b+20|0;q=k[g>>2]|0;h=b+24|0;s=k[h>>2]|0;i=b+28|0;u=k[i>>2]|0;k[b>>2]=k[c>>2];x=c+4|0;r=x;p=k[r+4>>2]|0;n=j;k[n>>2]=k[r>>2];k[n+4>>2]=p;n=c+12|0;k[e>>2]=k[n>>2];p=c+16|0;k[f>>2]=k[p>>2];r=c+20|0;k[g>>2]=k[r>>2];t=c+24|0;k[h>>2]=k[t>>2];v=c+28|0;k[i>>2]=k[v>>2];k[c>>2]=y;c=x;k[c>>2]=w;k[c+4>>2]=l;k[n>>2]=m;k[p>>2]=o;k[r>>2]=q;k[t>>2]=s;k[v>>2]=u;if(!(Za[k[d>>2]&7](b,a)|0)){y=1;return y|0}t=k[a>>2]|0;n=a+4|0;v=n;u=k[v>>2]|0;v=k[v+4>>2]|0;o=a+12|0;d=k[o>>2]|0;p=a+16|0;c=k[p>>2]|0;q=a+20|0;w=k[q>>2]|0;r=a+24|0;x=k[r>>2]|0;s=a+28|0;y=k[s>>2]|0;k[a>>2]=k[b>>2];a=j;m=k[a+4>>2]|0;k[n>>2]=k[a>>2];k[n+4>>2]=m;k[o>>2]=k[e>>2];k[p>>2]=k[f>>2];k[q>>2]=k[g>>2];k[r>>2]=k[h>>2];k[s>>2]=k[i>>2];k[b>>2]=t;b=j;k[b>>2]=u;k[b+4>>2]=v;k[e>>2]=d;k[f>>2]=c;k[g>>2]=w;k[h>>2]=x;k[i>>2]=y;y=2;return y|0}r=k[a>>2]|0;f=a+4|0;t=f;s=k[t>>2]|0;t=k[t+4>>2]|0;g=a+12|0;u=k[g>>2]|0;j=a+16|0;v=k[j>>2]|0;l=a+20|0;n=k[l>>2]|0;m=a+24|0;o=k[m>>2]|0;p=a+28|0;q=k[p>>2]|0;if(e){k[a>>2]=k[c>>2];a=c+4|0;w=a;b=k[w+4>>2]|0;d=f;k[d>>2]=k[w>>2];k[d+4>>2]=b;d=c+12|0;k[g>>2]=k[d>>2];b=c+16|0;k[j>>2]=k[b>>2];w=c+20|0;k[l>>2]=k[w>>2];x=c+24|0;k[m>>2]=k[x>>2];y=c+28|0;k[p>>2]=k[y>>2];k[c>>2]=r;c=a;k[c>>2]=s;k[c+4>>2]=t;k[d>>2]=u;k[b>>2]=v;k[w>>2]=n;k[x>>2]=o;k[y>>2]=q;y=1;return y|0}k[a>>2]=k[b>>2];a=b+4|0;e=a;h=k[e+4>>2]|0;i=f;k[i>>2]=k[e>>2];k[i+4>>2]=h;i=b+12|0;k[g>>2]=k[i>>2];h=b+16|0;k[j>>2]=k[h>>2];g=b+20|0;k[l>>2]=k[g>>2];f=b+24|0;k[m>>2]=k[f>>2];e=b+28|0;k[p>>2]=k[e>>2];k[b>>2]=r;y=a;k[y>>2]=s;k[y+4>>2]=t;k[i>>2]=u;k[h>>2]=v;k[g>>2]=n;k[f>>2]=o;k[e>>2]=q;if(!(Za[k[d>>2]&7](c,b)|0)){y=1;return y|0}n=k[b>>2]|0;q=a;p=k[q>>2]|0;q=k[q+4>>2]|0;r=k[i>>2]|0;t=k[h>>2]|0;v=k[g>>2]|0;d=k[f>>2]|0;x=k[e>>2]|0;k[b>>2]=k[c>>2];o=c+4|0;b=o;u=k[b+4>>2]|0;s=a;k[s>>2]=k[b>>2];k[s+4>>2]=u;s=c+12|0;k[i>>2]=k[s>>2];u=c+16|0;k[h>>2]=k[u>>2];b=c+20|0;k[g>>2]=k[b>>2];w=c+24|0;k[f>>2]=k[w>>2];y=c+28|0;k[e>>2]=k[y>>2];k[c>>2]=n;c=o;k[c>>2]=p;k[c+4>>2]=q;k[s>>2]=r;k[u>>2]=t;k[b>>2]=v;k[w>>2]=d;k[y>>2]=x;y=2;return y|0}function Ab(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;l=zb(a,b,c,e)|0;if(!(Za[k[e>>2]&7](d,c)|0)){c=l;return c|0}A=k[c>>2]|0;r=c+4|0;x=r;y=k[x>>2]|0;x=k[x+4>>2]|0;m=c+12|0;w=k[m>>2]|0;n=c+16|0;u=k[n>>2]|0;o=c+20|0;s=k[o>>2]|0;p=c+24|0;g=k[p>>2]|0;q=c+28|0;i=k[q>>2]|0;k[c>>2]=k[d>>2];z=d+4|0;f=z;t=k[f+4>>2]|0;v=r;k[v>>2]=k[f>>2];k[v+4>>2]=t;v=d+12|0;k[m>>2]=k[v>>2];t=d+16|0;k[n>>2]=k[t>>2];f=d+20|0;k[o>>2]=k[f>>2];h=d+24|0;k[p>>2]=k[h>>2];j=d+28|0;k[q>>2]=k[j>>2];k[d>>2]=A;d=z;k[d>>2]=y;k[d+4>>2]=x;k[v>>2]=w;k[t>>2]=u;k[f>>2]=s;k[h>>2]=g;k[j>>2]=i;if(!(Za[k[e>>2]&7](c,b)|0)){A=l+1|0;return A|0}v=k[b>>2]|0;d=b+4|0;u=d;t=k[u>>2]|0;u=k[u+4>>2]|0;f=b+12|0;w=k[f>>2]|0;g=b+16|0;x=k[g>>2]|0;h=b+20|0;y=k[h>>2]|0;i=b+24|0;z=k[i>>2]|0;j=b+28|0;A=k[j>>2]|0;k[b>>2]=k[c>>2];C=r;B=k[C+4>>2]|0;s=d;k[s>>2]=k[C>>2];k[s+4>>2]=B;k[f>>2]=k[m>>2];k[g>>2]=k[n>>2];k[h>>2]=k[o>>2];k[i>>2]=k[p>>2];k[j>>2]=k[q>>2];k[c>>2]=v;v=r;k[v>>2]=t;k[v+4>>2]=u;k[m>>2]=w;k[n>>2]=x;k[o>>2]=y;k[p>>2]=z;k[q>>2]=A;if(!(Za[k[e>>2]&7](b,a)|0)){C=l+2|0;return C|0}x=k[a>>2]|0;p=a+4|0;w=p;v=k[w>>2]|0;w=k[w+4>>2]|0;e=a+12|0;y=k[e>>2]|0;c=a+16|0;z=k[c>>2]|0;s=a+20|0;A=k[s>>2]|0;t=a+24|0;B=k[t>>2]|0;u=a+28|0;C=k[u>>2]|0;k[a>>2]=k[b>>2];q=d;r=k[q+4>>2]|0;a=p;k[a>>2]=k[q>>2];k[a+4>>2]=r;k[e>>2]=k[f>>2];k[c>>2]=k[g>>2];k[s>>2]=k[h>>2];k[t>>2]=k[i>>2];k[u>>2]=k[j>>2];k[b>>2]=x;x=d;k[x>>2]=v;k[x+4>>2]=w;k[f>>2]=y;k[g>>2]=z;k[h>>2]=A;k[i>>2]=B;k[j>>2]=C;C=l+3|0;return C|0}function Bb(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;t=Ab(a,b,c,d,f)|0;if(!(Za[k[f>>2]&7](e,d)|0)){c=t;return c|0}B=k[d>>2]|0;m=d+4|0;y=m;z=k[y>>2]|0;y=k[y+4>>2]|0;g=d+12|0;x=k[g>>2]|0;h=d+16|0;v=k[h>>2]|0;i=d+20|0;n=k[i>>2]|0;j=d+24|0;p=k[j>>2]|0;l=d+28|0;r=k[l>>2]|0;k[d>>2]=k[e>>2];A=e+4|0;o=A;u=k[o+4>>2]|0;w=m;k[w>>2]=k[o>>2];k[w+4>>2]=u;w=e+12|0;k[g>>2]=k[w>>2];u=e+16|0;k[h>>2]=k[u>>2];o=e+20|0;k[i>>2]=k[o>>2];q=e+24|0;k[j>>2]=k[q>>2];s=e+28|0;k[l>>2]=k[s>>2];k[e>>2]=B;e=A;k[e>>2]=z;k[e+4>>2]=y;k[w>>2]=x;k[u>>2]=v;k[o>>2]=n;k[q>>2]=p;k[s>>2]=r;if(!(Za[k[f>>2]&7](d,c)|0)){B=t+1|0;return B|0}w=k[c>>2]|0;n=c+4|0;v=n;u=k[v>>2]|0;v=k[v+4>>2]|0;o=c+12|0;x=k[o>>2]|0;p=c+16|0;y=k[p>>2]|0;q=c+20|0;z=k[q>>2]|0;r=c+24|0;A=k[r>>2]|0;s=c+28|0;B=k[s>>2]|0;k[c>>2]=k[d>>2];D=m;C=k[D+4>>2]|0;e=n;k[e>>2]=k[D>>2];k[e+4>>2]=C;k[o>>2]=k[g>>2];k[p>>2]=k[h>>2];k[q>>2]=k[i>>2];k[r>>2]=k[j>>2];k[s>>2]=k[l>>2];k[d>>2]=w;w=m;k[w>>2]=u;k[w+4>>2]=v;k[g>>2]=x;k[h>>2]=y;k[i>>2]=z;k[j>>2]=A;k[l>>2]=B;if(!(Za[k[f>>2]&7](c,b)|0)){D=t+2|0;return D|0}y=k[b>>2]|0;j=b+4|0;x=j;w=k[x>>2]|0;x=k[x+4>>2]|0;l=b+12|0;z=k[l>>2]|0;e=b+16|0;A=k[e>>2]|0;g=b+20|0;B=k[g>>2]|0;h=b+24|0;C=k[h>>2]|0;i=b+28|0;D=k[i>>2]|0;k[b>>2]=k[c>>2];d=n;u=k[d+4>>2]|0;v=j;k[v>>2]=k[d>>2];k[v+4>>2]=u;k[l>>2]=k[o>>2];k[e>>2]=k[p>>2];k[g>>2]=k[q>>2];k[h>>2]=k[r>>2];k[i>>2]=k[s>>2];k[c>>2]=y;y=n;k[y>>2]=w;k[y+4>>2]=x;k[o>>2]=z;k[p>>2]=A;k[q>>2]=B;k[r>>2]=C;k[s>>2]=D;if(!(Za[k[f>>2]&7](b,a)|0)){D=t+3|0;return D|0}y=k[a>>2]|0;p=a+4|0;x=p;w=k[x>>2]|0;x=k[x+4>>2]|0;s=a+12|0;z=k[s>>2]|0;f=a+16|0;A=k[f>>2]|0;c=a+20|0;B=k[c>>2]|0;u=a+24|0;C=k[u>>2]|0;v=a+28|0;D=k[v>>2]|0;k[a>>2]=k[b>>2];q=j;r=k[q+4>>2]|0;a=p;k[a>>2]=k[q>>2];k[a+4>>2]=r;k[s>>2]=k[l>>2];k[f>>2]=k[e>>2];k[c>>2]=k[g>>2];k[u>>2]=k[h>>2];k[v>>2]=k[i>>2];k[b>>2]=y;y=j;k[y>>2]=w;k[y+4>>2]=x;k[l>>2]=z;k[e>>2]=A;k[g>>2]=B;k[h>>2]=C;k[i>>2]=D;D=t+4|0;return D|0}function Cb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0;x=r;r=r+32|0;v=x;switch(b-a>>5|0){case 2:{d=b+-32|0;if(!(Za[k[c>>2]&7](d,a)|0)){w=1;r=x;return w|0}j=k[a>>2]|0;p=a+4|0;n=p;m=k[n>>2]|0;n=k[n+4>>2]|0;s=a+12|0;o=k[s>>2]|0;u=a+16|0;q=k[u>>2]|0;h=a+20|0;t=k[h>>2]|0;w=a+24|0;v=k[w>>2]|0;i=a+28|0;c=k[i>>2]|0;k[a>>2]=k[d>>2];l=b+-28|0;g=l;a=k[g+4>>2]|0;k[p>>2]=k[g>>2];k[p+4>>2]=a;p=b+-20|0;k[s>>2]=k[p>>2];s=b+-16|0;k[u>>2]=k[s>>2];u=b+-12|0;k[h>>2]=k[u>>2];a=b+-8|0;k[w>>2]=k[a>>2];w=b+-4|0;k[i>>2]=k[w>>2];k[d>>2]=j;b=l;k[b>>2]=m;k[b+4>>2]=n;k[p>>2]=o;k[s>>2]=q;k[u>>2]=t;k[a>>2]=v;k[w>>2]=c;w=1;r=x;return w|0}case 3:{zb(a,a+32|0,b+-32|0,c)|0;w=1;r=x;return w|0}case 4:{Ab(a,a+32|0,a+64|0,b+-32|0,c)|0;w=1;r=x;return w|0}case 5:{Bb(a,a+32|0,a+64|0,a+96|0,b+-32|0,c)|0;w=1;r=x;return w|0}case 1:case 0:{w=1;r=x;return w|0}default:{f=a+64|0;zb(a,a+32|0,f,c)|0;e=a+96|0;if((e|0)==(b|0)){w=1;r=x;return w|0}o=v+4|0;p=v+12|0;q=v+16|0;s=v+20|0;t=v+24|0;u=v+28|0;d=0;while(1){if(Za[k[c>>2]&7](e,f)|0){k[v>>2]=k[e>>2];m=e+4|0;n=k[m+4>>2]|0;g=o;k[g>>2]=k[m>>2];k[g+4>>2]=n;k[p>>2]=k[e+12>>2];k[q>>2]=k[e+16>>2];k[s>>2]=k[e+20>>2];k[t>>2]=k[e+24>>2];k[u>>2]=k[e+28>>2];g=e;while(1){k[g>>2]=k[f>>2];n=f+4|0;j=n;i=k[j+4>>2]|0;h=g+4|0;k[h>>2]=k[j>>2];k[h+4>>2]=i;h=f+12|0;k[g+12>>2]=k[h>>2];i=f+16|0;k[g+16>>2]=k[i>>2];j=f+20|0;k[g+20>>2]=k[j>>2];l=f+24|0;k[g+24>>2]=k[l>>2];m=f+28|0;k[g+28>>2]=k[m>>2];if((f|0)==(a|0))break;g=f+-32|0;if(Za[k[c>>2]&7](v,g)|0){n=f;f=g;g=n}else break}k[f>>2]=k[v>>2];f=o;g=k[f+4>>2]|0;k[n>>2]=k[f>>2];k[n+4>>2]=g;k[h>>2]=k[p>>2];k[i>>2]=k[q>>2];k[j>>2]=k[s>>2];k[l>>2]=k[t>>2];k[m>>2]=k[u>>2];d=d+1|0;if((d|0)==8)break}f=e+32|0;if((f|0)==(b|0)){d=1;w=16;break}else{n=e;e=f;f=n}}if((w|0)==16){r=x;return d|0}w=(e+32|0)==(b|0);r=x;return w|0}}return 0}function Db(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0;m=a+4|0;e=k[m>>2]|0;l=k[a>>2]|0;c=l;i=(e-c|0)/24|0;j=i+1|0;if(j>>>0>178956970)xa(1340,1363,303,1438);n=a+8|0;d=((k[n>>2]|0)-c|0)/24|0;if(d>>>0<89478485){d=d<<1;d=d>>>0<j>>>0?j:d;if(!d){g=0;f=0}else h=5}else{d=178956970;h=5}if((h|0)==5){g=d*24|0;g=(g|0)==0?1:g;f=_d(g)|0;a:do if(!f){while(1){f=k[35]|0;k[35]=f+0;if(!f)break;Xa[f&0]();f=_d(g)|0;if(f)break a}n=ya(4)|0;k[n>>2]=128;La(n|0,8,1)}while(0);g=d}h=f+(i*24|0)|0;d=h;g=f+(g*24|0)|0;k[h>>2]=k[b>>2];k[f+(i*24|0)+4>>2]=k[b+4>>2];k[f+(i*24|0)+8>>2]=k[b+8>>2];k[f+(i*24|0)+12>>2]=k[b+12>>2];k[f+(i*24|0)+16>>2]=k[b+16>>2];k[f+(i*24|0)+20>>2]=k[b+20>>2];f=f+(j*24|0)|0;if((e|0)==(l|0))e=a;else{c=h;do{i=e;e=e+-24|0;k[c+-24>>2]=k[e>>2];k[c+-20>>2]=k[i+-20>>2];k[c+-16>>2]=k[i+-16>>2];k[c+-12>>2]=k[i+-12>>2];i=i+-8|0;j=k[i+4>>2]|0;b=c+-8|0;k[b>>2]=k[i>>2];k[b+4>>2]=j;c=d+-24|0;d=c}while((e|0)!=(l|0));e=a;c=k[a>>2]|0}k[e>>2]=d;k[m>>2]=f;k[n>>2]=g;if(!c)return;$d(c);return}function Eb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0;V=r;r=r+160|0;K=V+132|0;y=V+8|0;z=V;A=V+120|0;B=V+108|0;I=V+52|0;H=V+40|0;G=V+28|0;M=V+16|0;S=V+96|0;O=V+84|0;v=V+64|0;k[S>>2]=0;T=S+4|0;k[T>>2]=0;k[S+8>>2]=0;k[O>>2]=0;R=O+4|0;k[R>>2]=0;k[O+8>>2]=0;do if((b|0)!=(c|0)){p=v+4|0;q=v+8|0;s=v+12|0;t=v+16|0;u=S+8|0;f=0;g=0;o=0;n=0;h=0;e=0;a:while(1){l=b+16|0;if((f|0)==(g|0)){m=e-n|0;i=m>>3;j=i+1|0;if(j>>>0>536870911){N=6;break}d=h-n|0;if(d>>3>>>0<268435455){d=d>>2;d=d>>>0<j>>>0?j:d;if(!d){d=0;g=0}else N=9}else{d=536870911;N=9}if((N|0)==9){N=0;f=d<<3;f=(f|0)==0?1:f;e=_d(f)|0;if(!e)do{e=k[35]|0;k[35]=e+0;if(!e){N=12;break a}Xa[e&0]();e=_d(f)|0}while((e|0)==0);g=e}h=g+(d<<3)|0;e=l;d=k[e+4>>2]|0;f=g+(i<<3)|0;k[f>>2]=k[e>>2];k[f+4>>2]=d;f=g+(j<<3)|0;d=g;e=n;fe(g|0,e|0,m|0)|0;if(!n){l=h;j=f}else{$d(e);l=h;j=f}}else{j=l;l=k[j+4>>2]|0;d=f;k[d>>2]=k[j>>2];k[d+4>>2]=l;d=n;l=h;j=e+8|0}e=k[b>>2]|0;k[v>>2]=e;f=k[b+4>>2]|0;k[p>>2]=f;g=k[b+8>>2]|0;k[q>>2]=g;h=k[b+12>>2]|0;k[s>>2]=h;k[t>>2]=o;i=k[T>>2]|0;if(i>>>0<(k[u>>2]|0)>>>0){k[i>>2]=e;k[i+4>>2]=f;k[i+8>>2]=g;k[i+12>>2]=h;k[i+16>>2]=o;k[T>>2]=i+20}else Fb(S,v);b=b+24|0;if((b|0)==(c|0)){N=21;break}f=j;g=l;o=o+1|0;n=d;h=l;e=j}if((N|0)==6)xa(1340,1363,303,1438);else if((N|0)==12){V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}else if((N|0)==21){x=k[T>>2]|0;w=k[S>>2]|0;U=d;break}}else{x=0;w=0;U=0}while(0);n=(x-w|0)/20|0;k[M>>2]=0;J=M+4|0;k[J>>2]=0;k[M+8>>2]=0;g=(x|0)==(w|0);if(!g){if(n>>>0>357913941)xa(1340,1363,303,1438);d=n*12|0;b=_d(d)|0;b:do if(!b){while(1){b=k[35]|0;k[35]=b+0;if(!b)break;Xa[b&0]();b=_d(d)|0;if(b)break b}V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}while(0);k[J>>2]=b;k[M>>2]=b;k[M+8>>2]=b+(n*12|0);e=n;f=b;while(1){k[f+4>>2]=0;k[f+8>>2]=0;k[f>>2]=f+4;d=b+12|0;k[J>>2]=d;b=e+-1|0;if(!b)break;else{e=b;f=d;b=d}}}k[I>>2]=0;E=I+4|0;k[E>>2]=0;k[I+8>>2]=0;k[K>>2]=0;m=K+4|0;k[m>>2]=0;k[K+8>>2]=0;e=n<<1;j=K+8|0;if(g){f=0;g=0;d=0}else{d=n<<4;b=_d(d)|0;c:do if(!b){while(1){b=k[35]|0;k[35]=b+0;if(!b)break;Xa[b&0]();b=_d(d)|0;if(b)break c}V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}while(0);f=b;d=b+(e<<3)|0;k[K>>2]=f;k[m>>2]=f;k[j>>2]=d;f=b;g=b}F=w;D=(F|0)==(x|0);if(D){e=g;b=g;d=f;j=f}else{h=y+4|0;i=z+4|0;b=F;while(1){C=k[b+4>>2]|0;e=b+12|0;f=(C|0)<(k[e>>2]|0)?1:-1;k[y>>2]=C;k[h>>2]=f;if(g>>>0<d>>>0){w=y;C=k[w+4>>2]|0;d=g;k[d>>2]=k[w>>2];k[d+4>>2]=C;d=(k[m>>2]|0)+8|0;k[m>>2]=d}else{dc(K,y);d=k[m>>2]|0}k[z>>2]=k[e>>2];k[i>>2]=0-f;if(d>>>0<(k[j>>2]|0)>>>0){c=z;w=k[c+4>>2]|0;C=d;k[C>>2]=k[c>>2];k[C+4>>2]=w;k[m>>2]=d+8}else dc(K,z);b=b+20|0;if((b|0)==(x|0))break;g=k[m>>2]|0;d=k[j>>2]|0}j=k[K>>2]|0;d=k[m>>2]|0;e=j;b=d}ec(e,b);h=d-j>>3;l=I+8|0;b=k[l>>2]|0;i=k[I>>2]|0;e=i;d=k[E>>2]|0;if(((b-e|0)/12|0)>>>0<h>>>0){f=d-e|0;g=(f|0)/12|0;if(!h)e=0;else{d=h*12|0;d=(d|0)==0?1:d;b=_d(d)|0;d:do if(!b){while(1){b=k[35]|0;k[35]=b+0;if(!b)break;Xa[b&0]();b=_d(d)|0;if(b)break d}V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}while(0);e=b}d=e+(g*12|0)|0;b=e+(h*12|0)|0;C=e+((((f|0)/-12|0)+g|0)*12|0)|0;fe(C|0,i|0,f|0)|0;k[I>>2]=C;k[E>>2]=d;k[l>>2]=b;if(!i)e=j;else{$d(i);e=k[K>>2]|0}}else e=j;k[A>>2]=k[e>>2];k[A+4>>2]=0;k[A+8>>2]=0;if(d>>>0<b>>>0){k[d>>2]=k[A>>2];k[d+4>>2]=k[A+4>>2];k[d+8>>2]=k[A+8>>2];k[E>>2]=(k[E>>2]|0)+12}else fc(I,A);i=k[K>>2]|0;d=k[m>>2]|0;if((i|0)==(d|0))d=i;else{f=B+4|0;g=B+8|0;h=i;e=k[E>>2]|0;do{b=k[h>>2]|0;do if((b|0)!=(k[e+-12>>2]|0)){k[B>>2]=b;k[f>>2]=k[e+-8>>2];k[g>>2]=k[e+-4>>2];if(e>>>0<(k[l>>2]|0)>>>0){k[e>>2]=k[B>>2];k[e+4>>2]=k[B+4>>2];k[e+8>>2]=k[B+8>>2];e=e+12|0;k[E>>2]=e;break}else{fc(I,B);e=k[E>>2]|0;break}}while(0);b=k[h+4>>2]|0;if((b|0)<0){C=e+-4|0;k[C>>2]=(k[C>>2]|0)-b}C=e+-8|0;k[C>>2]=(k[C>>2]|0)+b;h=h+8|0}while((h|0)!=(d|0))}b=i;if(i){if((d|0)!=(i|0))k[m>>2]=d+(~((d+-8-b|0)>>>3)<<3);$d(i)}k[H>>2]=0;C=H+4|0;k[C>>2]=0;k[H+8>>2]=0;d=k[I>>2]|0;Mb(H,d,k[E>>2]|0,n);z=G+4|0;k[z>>2]=0;A=G+8|0;k[A>>2]=0;B=G+4|0;k[G>>2]=B;b=_d(32)|0;e:do if(!b){while(1){b=k[35]|0;k[35]=b+0;if(!b)break;Xa[b&0]();b=_d(32)|0;if(b)break e}V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}while(0);y=B;k[b+16>>2]=k[d>>2];g=b+20|0;k[g>>2]=0;h=b+24|0;k[h>>2]=0;f=b+28|0;k[f>>2]=0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=y;k[B>>2]=b;d=k[k[G>>2]>>2]|0;if(!d)d=b;else{k[G>>2]=d;d=b}Nb(b,d);k[A>>2]=(k[A>>2]|0)+1;b=k[g>>2]|0;d=b;if(!b)b=f;else{e=k[h>>2]|0;if((e|0)!=(b|0))k[h>>2]=e+(~(((e+-20-d|0)>>>0)/20|0)*20|0);$d(b);k[f>>2]=0;k[h>>2]=0;k[g>>2]=0;b=f}k[g>>2]=0;k[h>>2]=0;k[b>>2]=0;b=k[H>>2]|0;f:do if((b|0)!=(k[C>>2]|0)){g:while(1){d=k[B>>2]|0;do if(d){g=k[b>>2]|0;while(1){e=k[d+16>>2]|0;if((g|0)<(e|0)){e=k[d>>2]|0;if(!e){N=90;break}else d=e}else{if((e|0)>=(g|0)){N=96;break}f=d+4|0;e=k[f>>2]|0;if(!e){N=94;break}else d=e}}if((N|0)==90){k[K>>2]=d;f=d;N=97;break}else if((N|0)==94){k[K>>2]=d;N=97;break}else if((N|0)==96){N=0;k[K>>2]=d;if(!d){f=K;N=97;break}else break}}else{k[K>>2]=B;f=B;d=y;N=97}while(0);if((N|0)==97){N=0;e=_d(32)|0;if(!e)do{e=k[35]|0;k[35]=e+0;if(!e)break g;Xa[e&0]();e=_d(32)|0}while((e|0)==0);k[e+16>>2]=k[b>>2];k[e+20>>2]=0;k[e+24>>2]=0;k[e+28>>2]=0;k[e>>2]=0;k[e+4>>2]=0;k[e+8>>2]=d;k[f>>2]=e;d=k[k[G>>2]>>2]|0;if(!d)d=e;else{k[G>>2]=d;d=k[f>>2]|0}Nb(k[z>>2]|0,d);k[A>>2]=(k[A>>2]|0)+1;d=e}i=d+20|0;e=k[i>>2]|0;f=e;h=d+24|0;if(!e)d=d+28|0;else{g=k[h>>2]|0;if((g|0)!=(e|0))k[h>>2]=g+(~(((g+-20-f|0)>>>0)/20|0)*20|0);$d(e);d=d+28|0;k[d>>2]=0;k[h>>2]=0;k[i>>2]=0}k[i>>2]=0;k[h>>2]=0;k[d>>2]=0;b=b+4|0;if((b|0)==(k[C>>2]|0))break f}V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}while(0);h:do if(!D){c=F;i:while(1){v=c+4|0;h=k[v>>2]|0;w=c+12|0;i=k[w>>2]|0;e=k[B>>2]|0;j=(e|0)==0;j:do if(j)d=B;else{g=(i|0)<(h|0)?i:h;d=B;f=e;while(1){b=f;while(1){if((k[b+16>>2]|0)>=(g|0))break;b=k[b+4>>2]|0;if(!b)break j}f=k[b>>2]|0;if(!f){d=b;break}else d=b}}while(0);if((d|0)!=(k[G>>2]|0)){b=k[d>>2]|0;if(!b)while(1){b=k[d+8>>2]|0;if((k[b>>2]|0)==(d|0))d=b;else{d=b;break}}else{d=b;while(1){b=k[d+4>>2]|0;if(!b)break;else d=b}}}k:do if(j)f=B;else{g=(h|0)<(i|0)?i:h;f=B;while(1){b=e;while(1){if((g|0)<(k[b+16>>2]|0))break;b=k[b+4>>2]|0;if(!b)break k}e=k[b>>2]|0;if(!e){f=b;break}else f=b}}while(0);if((d|0)!=(f|0)){t=c+8|0;u=c+16|0;while(1){o=d+24|0;l=k[o>>2]|0;p=d+28|0;do if((l|0)==(k[p>>2]|0)){q=d+20|0;s=k[q>>2]|0;m=s;n=(l-m|0)/20|0;h=n+1|0;if(h>>>0>214748364){N=135;break i}if(n>>>0<107374182){b=n<<1;b=b>>>0<h>>>0?h:b;if(!b){g=0;e=0}else N=138}else{b=214748364;N=138}if((N|0)==138){N=0;g=b*20|0;g=(g|0)==0?1:g;e=_d(g)|0;if(!e)do{e=k[35]|0;k[35]=e+0;if(!e){N=141;break i}Xa[e&0]();e=_d(g)|0}while((e|0)==0);g=b}b=e+(n*20|0)|0;j=e+(g*20|0)|0;k[b>>2]=k[c>>2];k[e+(n*20|0)+4>>2]=k[v>>2];k[e+(n*20|0)+8>>2]=k[t>>2];k[e+(n*20|0)+12>>2]=k[w>>2];k[e+(n*20|0)+16>>2]=k[u>>2];i=e+(h*20|0)|0;if((l|0)!=(s|0)){h=l+-20|0;g=l;while(1){l=g;g=g+-20|0;k[b+-20>>2]=k[g>>2];k[b+-16>>2]=k[l+-16>>2];k[b+-12>>2]=k[l+-12>>2];k[b+-8>>2]=k[l+-8>>2];k[b+-4>>2]=k[l+-4>>2];if((g|0)==(s|0))break;else b=b+-20|0}b=e+((n+~(((h-m|0)>>>0)/20|0)|0)*20|0)|0}k[q>>2]=b;k[o>>2]=i;k[p>>2]=j;if(!s)break;$d(s)}else{k[l>>2]=k[c>>2];k[l+4>>2]=k[v>>2];k[l+8>>2]=k[t>>2];k[l+12>>2]=k[w>>2];k[l+16>>2]=k[u>>2];k[o>>2]=l+20}while(0);b=k[d+4>>2]|0;if(!b)while(1){b=k[d+8>>2]|0;if((k[b>>2]|0)==(d|0))break;else d=b}else while(1){d=k[b>>2]|0;if(!d)break;else b=d}if((b|0)==(f|0))break;else d=b}}c=c+20|0;if((c|0)==(x|0))break h}if((N|0)==135)xa(1340,1363,303,1438);else if((N|0)==141){V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}}while(0);h=k[I>>2]|0;b=k[B>>2]|0;do if(b){g=k[h>>2]|0;f=b;while(1){d=k[f+16>>2]|0;if((g|0)<(d|0)){d=k[f>>2]|0;if(!d){N=159;break}}else{if((d|0)>=(g|0)){N=165;break}e=f+4|0;d=k[e>>2]|0;if(!d){N=163;break}}f=d}if((N|0)==159){k[K>>2]=f;e=f;N=166;break}else if((N|0)==163){k[K>>2]=f;N=166;break}else if((N|0)==165){k[K>>2]=f;if(!f){e=K;N=166;break}else{d=f;break}}}else{k[K>>2]=B;e=B;f=y;N=166}while(0);if((N|0)==166){b=_d(32)|0;l:do if(!b){while(1){b=k[35]|0;k[35]=b+0;if(!b)break;Xa[b&0]();b=_d(32)|0;if(b){d=b;break l}}V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}else d=b;while(0);k[d+16>>2]=k[h>>2];k[d+20>>2]=0;k[d+24>>2]=0;k[d+28>>2]=0;k[d>>2]=0;k[d+4>>2]=0;k[d+8>>2]=f;k[e>>2]=d;b=k[k[G>>2]>>2]|0;if(!b)b=d;else{k[G>>2]=b;b=k[e>>2]|0}Nb(k[z>>2]|0,b);k[A>>2]=(k[A>>2]|0)+1;b=k[B>>2]|0;h=k[I>>2]|0}g=k[d+20>>2]|0;do if(b){f=k[h>>2]|0;while(1){d=k[b+16>>2]|0;if((f|0)<(d|0)){d=k[b>>2]|0;if(!d){N=177;break}else b=d}else{if((d|0)>=(f|0)){N=183;break}e=b+4|0;d=k[e>>2]|0;if(!d){N=181;break}else b=d}}if((N|0)==177){k[K>>2]=b;e=b;d=b;N=184;break}else if((N|0)==181){k[K>>2]=b;d=b;N=184;break}else if((N|0)==183){k[K>>2]=b;if(!b){e=K;d=b;N=184;break}else break}}else{k[K>>2]=B;e=B;d=y;N=184}while(0);if((N|0)==184){b=_d(32)|0;m:do if(!b){while(1){b=k[35]|0;k[35]=b+0;if(!b)break;Xa[b&0]();b=_d(32)|0;if(b)break m}V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}while(0);k[b+16>>2]=k[h>>2];k[b+20>>2]=0;k[b+24>>2]=0;k[b+28>>2]=0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=d;k[e>>2]=b;d=k[k[G>>2]>>2]|0;if(!d)d=b;else{k[G>>2]=d;d=k[e>>2]|0}Nb(k[z>>2]|0,d);k[A>>2]=(k[A>>2]|0)+1}Pb(M,g,k[b+24>>2]|0,-2147483648);b=k[H>>2]|0;n:do if((b|0)!=(k[C>>2]|0)){o:while(1){g=k[B>>2]|0;do if(g){h=k[b>>2]|0;f=g;while(1){d=k[f+16>>2]|0;if((h|0)<(d|0)){d=k[f>>2]|0;if(!d){N=197;break}}else{if((d|0)>=(h|0)){N=203;break}e=f+4|0;d=k[e>>2]|0;if(!d){N=201;break}}f=d}if((N|0)==197){k[K>>2]=f;g=f;N=204;break}else if((N|0)==201){k[K>>2]=f;g=e;N=204;break}else if((N|0)==203){N=0;k[K>>2]=f;if(!f){g=K;N=204;break}else{d=f;break}}}else{k[K>>2]=B;g=B;f=y;N=204}while(0);if((N|0)==204){d=_d(32)|0;if(!d)while(1){d=k[35]|0;k[35]=d+0;if(!d){N=207;break o}Xa[d&0]();d=_d(32)|0;if(d){e=d;break}}else e=d;k[e+16>>2]=k[b>>2];k[e+20>>2]=0;k[e+24>>2]=0;k[e+28>>2]=0;k[e>>2]=0;k[e+4>>2]=0;k[e+8>>2]=f;k[g>>2]=e;d=k[k[G>>2]>>2]|0;if(!d)d=e;else{k[G>>2]=d;d=k[g>>2]|0}Nb(k[z>>2]|0,d);k[A>>2]=(k[A>>2]|0)+1;g=k[B>>2]|0;d=e}h=k[d+20>>2]|0;do if(g){f=k[b>>2]|0;while(1){d=k[g+16>>2]|0;if((f|0)<(d|0)){d=k[g>>2]|0;if(!d){N=215;break}}else{if((d|0)>=(f|0)){N=221;break}e=g+4|0;d=k[e>>2]|0;if(!d){N=219;break}}g=d}if((N|0)==215){k[K>>2]=g;f=g;N=222;break}else if((N|0)==219){k[K>>2]=g;f=e;N=222;break}else if((N|0)==221){N=0;k[K>>2]=g;if(!g){f=K;N=222;break}else{d=g;break}}}else{k[K>>2]=B;f=B;g=y;N=222}while(0);if((N|0)==222){N=0;d=_d(32)|0;if(!d)do{d=k[35]|0;k[35]=d+0;if(!d){N=225;break o}Xa[d&0]();d=_d(32)|0}while((d|0)==0);k[d+16>>2]=k[b>>2];k[d+20>>2]=0;k[d+24>>2]=0;k[d+28>>2]=0;k[d>>2]=0;k[d+4>>2]=0;k[d+8>>2]=g;k[f>>2]=d;e=k[k[G>>2]>>2]|0;if(!e)e=d;else{k[G>>2]=e;e=k[f>>2]|0}Nb(k[z>>2]|0,e);k[A>>2]=(k[A>>2]|0)+1}Pb(M,h,k[d+24>>2]|0,k[b>>2]|0);b=b+4|0;if((b|0)==(k[C>>2]|0))break n}if((N|0)==207){V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}else if((N|0)==225){V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}}while(0);Ob(k[B>>2]|0);b=k[H>>2]|0;d=b;if(b){e=k[C>>2]|0;if((e|0)!=(b|0))k[C>>2]=e+(~((e+-4-d|0)>>>2)<<2);$d(b)}b=k[I>>2]|0;d=b;if(b){e=k[E>>2]|0;if((e|0)!=(b|0))k[E>>2]=e+(~(((e+-12-d|0)>>>0)/12|0)*12|0);$d(b)}p:do if(!D){c=K+4|0;w=K+8|0;y=K+12|0;z=K+16|0;A=O+8|0;B=K+4|0;C=K+8|0;D=K+12|0;E=K+16|0;u=F;q:while(1){v=k[u+16>>2]|0;n=k[M>>2]|0;m=n+(v*12|0)|0;b=k[u>>2]|0;d=k[u+8>>2]|0;do if((b|0)==(d|0))N=320;else{H=k[u+4>>2]|0;l=b+1|0;h=k[u+12>>2]|0;H=be(h|0,((h|0)<0)<<31>>31|0,H|0,((H|0)<0)<<31>>31|0)|0;h=L;e=((b|0)<0)<<31>>31;l=be(l|0,((l|0)<0)<<31>>31|0,b|0,e|0)|0;g=L;e=be(d|0,((d|0)<0)<<31>>31|0,b|0,e|0)|0;i=L;I=(i|0)<0;b=be(0,0,H|0,h|0)|0;d=L;f=be(0,0,e|0,i|0)|0;j=L;b=I?b:H;d=I?d:h;e=(g|0)<0;f=be(0,0,l|0,g|0)|0;g=e?L:g;h=(d|0)<0;i=((I?j:i)|0)<0?-1:1;j=ha(h?-1:1,(g|0)<0?-1:1)|0;if((j|0)>=(i|0)?(I=be(0,0,b|0,d|0)|0,I=ne((h?I:b)|0,(h?L:d)|0,(e?f:l)|0,g|0)|0,!(((I|0)!=0|(L|0)!=0)&((i|0)>=(j|0)&(j|0)==-1))):0){N=320;break}e=k[n+(v*12|0)+8>>2]|0;if(!e){s=0;t=0;i=0}else{d=e<<3;d=(d|0)==0?1:d;b=_d(d)|0;if(!b)do{b=k[35]|0;k[35]=b+0;if(!b){N=247;break q}Xa[b&0]();b=_d(d)|0}while((b|0)==0);s=b;t=b;i=b+(e<<3)|0}q=s;h=k[m>>2]|0;m=n+(v*12|0)+4|0;l=m;n=t;o=q-t>>3;f=h;do if((f|0)==(m|0)){j=t;b=t}else{e=h;d=e;g=0;while(1){j=g+1|0;b=k[d+4>>2]|0;if(!b)while(1){b=k[d+8>>2]|0;if((k[b>>2]|0)==(d|0))break;else d=b}else while(1){d=k[b>>2]|0;if(!d)break;else b=d}if((b|0)==(m|0))break;else{d=b;g=j}}if((g|0)<=-1){j=t;b=t;break}p=t;if((g|0)>=(i-t>>3|0)){d=(t-t>>3)+j|0;if(d>>>0>536870911){N=290;break q}b=i-t|0;if(b>>3>>>0<268435455){b=b>>2;b=b>>>0<d>>>0?d:b;if(!b)g=0;else N=293}else{b=536870911;N=293}if((N|0)==293){N=0;d=b<<3;d=(d|0)==0?1:d;b=_d(d)|0;if(!b)do{b=k[35]|0;k[35]=b+0;if(!b){N=296;break q}Xa[b&0]();b=_d(d)|0}while((b|0)==0);g=b}d=g+(o<<3)|0;h=d;while(1){k[h>>2]=k[f+16>>2];k[h+4>>2]=k[f+20>>2];b=h+8|0;f=k[e+4>>2]|0;if(!f)while(1){f=k[e+8>>2]|0;if((k[f>>2]|0)==(e|0)){e=f;break}else e=f}else{e=f;while(1){f=k[e>>2]|0;if(!f)break;else e=f}}if((e|0)==(m|0))break;else{f=e;h=b}}if((n|0)!=(s|0)){f=s+-8|0;e=s;while(1){I=e;e=e+-8|0;k[d+-8>>2]=k[e>>2];k[d+-4>>2]=k[I+-4>>2];if((e|0)==(n|0))break;else d=d+-8|0}d=g+(o+~((f-t|0)>>>3)<<3)|0}if((p|0)!=(s|0)){g=p+-8|0;e=s;f=h;while(1){k[f+8>>2]=k[e>>2];k[f+12>>2]=k[e+4>>2];e=e+8|0;if((e|0)==(p|0))break;else{f=b;b=b+8|0}}b=h+(((g-q|0)>>>3)+2<<3)|0}if(!t){j=d;break}$d(t);j=d;break}i=t-q|0;b=i>>3;if((g|0)>=(b|0)){do if((i|0)>-8){if((i|0)>0){d=e;g=b}else{l=h;break}while(1){b=k[d+4>>2]|0;if(!b)while(1){b=k[d+8>>2]|0;if((k[b>>2]|0)==(d|0))break;else d=b}else while(1){d=k[b>>2]|0;if(!d)break;else b=d}if((g|0)>1){d=b;g=g+-1|0}else break}l=b}else{d=e;g=b;while(1){b=k[d>>2]|0;if(!b)while(1){b=k[d+8>>2]|0;if((k[b>>2]|0)==(d|0))d=b;else break}else while(1){d=k[b+4>>2]|0;if(!d)break;else b=d}if((g|0)<-1){d=b;g=g+1|0}else break}l=b}while(0);b=l;if((b|0)==(m|0)){d=p;b=t}else{g=p;d=l;while(1){k[g>>2]=k[b+16>>2];k[g+4>>2]=k[b+20>>2];g=g+8|0;b=k[d+4>>2]|0;if(!b){b=d;while(1){d=k[b+8>>2]|0;if((k[d>>2]|0)==(b|0))break;else b=d}}else while(1){d=k[b>>2]|0;if(!d){d=b;break}else b=d}if((d|0)==(m|0))break;else b=d}d=g;b=g}if((i|0)<=0){j=t;break}}else{d=p;b=t}j=d-(n+(j+o<<3))>>3;g=s+(j<<3)|0;if(g>>>0<p>>>0){i=p+(0-j<<3)+~q|0;b=d;h=g;while(1){k[b>>2]=k[h>>2];k[b+4>>2]=k[h+4>>2];h=h+8|0;if(h>>>0>=p>>>0)break;else b=b+8|0}b=d+((i>>>3)+1<<3)|0}if(j)do{I=d;d=d+-8|0;H=g;g=g+-8|0;k[d>>2]=k[g>>2];k[I+-4>>2]=k[H+-4>>2]}while((g|0)!=(s|0));h=l;if((f|0)==(h|0)){j=t;break}else g=s;while(1){k[g>>2]=k[f+16>>2];k[g+4>>2]=k[f+20>>2];d=k[e+4>>2]|0;if(!d)while(1){d=k[e+8>>2]|0;if((k[d>>2]|0)==(e|0))break;else e=d}else while(1){e=k[d>>2]|0;if(!e)break;else d=e}if((d|0)==(h|0)){j=t;break}else{g=g+8|0;f=d;e=d}}}while(0);e=j;Hb(e,b);d=e+8|0;if((d|0)!=(b|0)){i=d;while(1){g=k[e>>2]|0;h=k[e+4>>2]|0;f=k[e+8>>2]|0;d=k[e+12>>2]|0;k[K>>2]=g;k[B>>2]=h;k[C>>2]=f;k[D>>2]=d;k[E>>2]=v;e=k[R>>2]|0;if(e>>>0<(k[A>>2]|0)>>>0){k[e>>2]=g;k[e+4>>2]=h;k[e+8>>2]=f;k[e+12>>2]=d;k[e+16>>2]=v;k[R>>2]=e+20}else Fb(O,K);d=i+8|0;if((d|0)==(b|0))break;else{e=i;i=d}}}if(!j)break;$d(j)}while(0);if((N|0)==320){N=0;d=k[m>>2]|0;j=n+(v*12|0)+4|0;e=d;b=k[d+4>>2]|0;if(!b)while(1){b=k[d+8>>2]|0;if((k[b>>2]|0)==(d|0))break;else d=b}else while(1){d=k[b>>2]|0;if(!d)break;else b=d}if((b|0)!=(j|0)){d=b;i=e;while(1){e=i;i=d;b=k[e+16>>2]|0;e=k[e+20>>2]|0;f=k[d+16>>2]|0;g=k[d+20>>2]|0;k[K>>2]=b;k[c>>2]=e;k[w>>2]=f;k[y>>2]=g;k[z>>2]=v;h=k[R>>2]|0;if(h>>>0<(k[A>>2]|0)>>>0){k[h>>2]=b;k[h+4>>2]=e;k[h+8>>2]=f;k[h+12>>2]=g;k[h+16>>2]=v;k[R>>2]=h+20}else Fb(O,K);b=k[d+4>>2]|0;if(!b)while(1){b=k[d+8>>2]|0;if((k[b>>2]|0)==(d|0))break;else d=b}else while(1){d=k[b>>2]|0;if(!d)break;else b=d}if((b|0)==(j|0))break;else d=b}}}u=u+20|0;if((u|0)==(x|0))break p}if((N|0)==247){V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}else if((N|0)==290)xa(1340,1363,303,1438);else if((N|0)==296){V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}}while(0);d=k[M>>2]|0;if(d){b=k[J>>2]|0;if((b|0)!=(d|0)){do{Gb(k[b+-8>>2]|0);b=b+-12|0}while((b|0)!=(d|0));k[J>>2]=d}$d(d)}b=k[R>>2]|0;d=k[O>>2]|0;r:do if((b|0)!=(d|0)){v=a+4|0;c=a+8|0;w=U;e=k[v>>2]|0;u=0;s:while(1){m=k[d+(u*20|0)+16>>2]|0;p=k[d+(u*20|0)>>2]|0;q=k[d+(u*20|0)+4>>2]|0;s=k[d+(u*20|0)+8>>2]|0;j=k[d+(u*20|0)+12>>2]|0;l=k[w+(m<<3)>>2]|0;m=k[w+(m<<3)+4>>2]|0;d=k[c>>2]|0;do if(e>>>0<d>>>0){k[e>>2]=p;k[e+4>>2]=q;k[e+8>>2]=s;k[e+12>>2]=j;e=e+16|0;k[e>>2]=l;k[e+4>>2]=m;e=(k[v>>2]|0)+24|0;k[v>>2]=e}else{t=k[a>>2]|0;b=t;n=(e-b|0)/24|0;o=n+1|0;if(o>>>0>178956970){N=344;break s}d=(d-b|0)/24|0;if(d>>>0<89478485){d=d<<1;d=d>>>0<o>>>0?o:d;if(!d){g=0;f=0}else N=347}else{d=178956970;N=347}if((N|0)==347){N=0;g=d*24|0;g=(g|0)==0?1:g;f=_d(g)|0;if(!f)do{f=k[35]|0;k[35]=f+0;if(!f){N=350;break s}Xa[f&0]();f=_d(g)|0}while((f|0)==0);g=d}h=f+(n*24|0)|0;d=h;i=f+(g*24|0)|0;k[h>>2]=p;k[f+(n*24|0)+4>>2]=q;k[f+(n*24|0)+8>>2]=s;k[f+(n*24|0)+12>>2]=j;g=f+(n*24|0)+16|0;k[g>>2]=l;k[g+4>>2]=m;f=f+(o*24|0)|0;g=f;if((e|0)!=(t|0)){b=h;do{J=e;e=e+-24|0;k[b+-24>>2]=k[e>>2];k[b+-20>>2]=k[J+-20>>2];k[b+-16>>2]=k[J+-16>>2];k[b+-12>>2]=k[J+-12>>2];J=J+-8|0;K=k[J+4>>2]|0;M=b+-8|0;k[M>>2]=k[J>>2];k[M+4>>2]=K;b=d+-24|0;d=b}while((e|0)!=(t|0));b=k[a>>2]|0}k[a>>2]=d;k[v>>2]=g;k[c>>2]=i;if(!b){e=f;break}$d(b);e=k[v>>2]|0}while(0);m=e+-24|0;n=k[m>>2]|0;o=e+-16|0;p=k[o>>2]|0;do if((n|0)<(p|0))f=1;else{if((n|0)==(p|0)?(k[e+-20>>2]|0)<(k[e+-12>>2]|0):0){f=1;break}f=0}while(0);d=k[O>>2]|0;h=k[d+(u*20|0)+16>>2]|0;i=k[S>>2]|0;j=i+(h*20|0)|0;g=k[j>>2]|0;l=i+(h*20|0)+8|0;b=k[l>>2]|0;do if((g|0)>=(b|0)){if((g|0)==(b|0)?(k[i+(h*20|0)+4>>2]|0)<(k[i+(h*20|0)+12>>2]|0):0){N=364;break}if(f)N=366}else N=364;while(0);if((N|0)==364){N=0;if(!f)N=366}if((N|0)==366){N=0;g=e+-4|0;k[g>>2]=0-(k[g>>2]|0);g=k[j>>2]|0;b=k[l>>2]|0}f=(n|0)==(p|0);if((g|0)!=(b|0)&f){M=e+-4|0;k[M>>2]=0-(k[M>>2]|0)}do if((p|0)>=(n|0)){if(!f)break;b=e+-12|0;h=k[b>>2]|0;g=e+-20|0;f=k[g>>2]|0;if((h|0)<(f|0))N=373}else{f=e+-20|0;h=e+-12|0;b=h;g=f;h=k[h>>2]|0;f=k[f>>2]|0;N=373}while(0);if((N|0)==373){N=0;k[m>>2]=p;k[g>>2]=h;k[o>>2]=n;k[b>>2]=f}u=u+1|0;b=k[R>>2]|0;if(u>>>0>=((b-d|0)/20|0)>>>0){P=d;Q=b;break r}}if((N|0)==344)xa(1340,1363,303,1438);else if((N|0)==350){V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}}else{P=b;Q=b}while(0);b=P;if(P){if((Q|0)!=(P|0))k[R>>2]=Q+(~(((Q+-20-b|0)>>>0)/20|0)*20|0);$d(P)}b=k[S>>2]|0;d=b;if(b){e=k[T>>2]|0;if((e|0)!=(b|0))k[T>>2]=e+(~(((e+-20-d|0)>>>0)/20|0)*20|0);$d(b)}if(!U){r=V;return}$d(U);r=V;return}function Fb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0;m=a+4|0;e=k[m>>2]|0;n=k[a>>2]|0;j=n;l=(e-j|0)/20|0;i=l+1|0;if(i>>>0>214748364)xa(1340,1363,303,1438);o=a+8|0;c=((k[o>>2]|0)-j|0)/20|0;if(c>>>0<107374182){c=c<<1;c=c>>>0<i>>>0?i:c;if(!c){f=0;d=0}else g=5}else{c=214748364;g=5}if((g|0)==5){f=c*20|0;f=(f|0)==0?1:f;d=_d(f)|0;a:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(f)|0;if(d)break a}a=ya(4)|0;k[a>>2]=128;La(a|0,8,1)}while(0);f=c}c=d+(l*20|0)|0;h=d+(f*20|0)|0;k[c>>2]=k[b>>2];k[d+(l*20|0)+4>>2]=k[b+4>>2];k[d+(l*20|0)+8>>2]=k[b+8>>2];k[d+(l*20|0)+12>>2]=k[b+12>>2];k[d+(l*20|0)+16>>2]=k[b+16>>2];g=d+(i*20|0)|0;if((e|0)!=(n|0)){f=e+-20|0;while(1){b=e;e=e+-20|0;k[c+-20>>2]=k[e>>2];k[c+-16>>2]=k[b+-16>>2];k[c+-12>>2]=k[b+-12>>2];k[c+-8>>2]=k[b+-8>>2];k[c+-4>>2]=k[b+-4>>2];if((e|0)==(n|0))break;else c=c+-20|0}c=d+((l+~(((f-j|0)>>>0)/20|0)|0)*20|0)|0}k[a>>2]=c;k[m>>2]=g;k[o>>2]=h;if(!n)return;$d(n);return}function Gb(a){a=a|0;if(!a)return;else{Gb(k[a>>2]|0);Gb(k[a+4>>2]|0);$d(a);return}}function Hb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;t=b;a:while(1){m=t;n=t+-8|0;o=t+-16|0;s=t+-4|0;y=a;b:while(1){l=y;a=m-l|0;b=a>>3;switch(b|0){case 2:{x=4;break a}case 3:{x=9;break a}case 4:{x=10;break a}case 5:{x=11;break a}case 1:case 0:{x=88;break a}default:{}}if((a|0)<56){x=13;break a}c=(b|0)/2|0;g=y+(c<<3)|0;if((a|0)>7992){a=(b|0)/4|0;a=Kb(y,y+(a<<3)|0,g,y+(a+c<<3)|0,n)|0}else a=Ib(y,g,n)|0;h=k[y>>2]|0;f=k[g>>2]|0;c:do if((h|0)<(f|0))c=n;else{if((h|0)==(f|0)?(k[y+4>>2]|0)>(k[y+(c<<3)+4>>2]|0):0){c=n;break}d:do if((y|0)!=(o|0)){e=y+(c<<3)+4|0;c=o;d=n;while(1){b=k[c>>2]|0;if((b|0)<(f|0)){x=58;break}if((b|0)==(f|0)?(p=d+-4|0,(k[p>>2]|0)>(k[e>>2]|0)):0){d=p;b=f;break}b=c+-8|0;if((y|0)==(b|0))break d;else{d=c;c=b}}if((x|0)==58){x=0;d=d+-4|0}i=y+4|0;j=k[i>>2]|0;k[y>>2]=b;k[i>>2]=k[d>>2];k[c>>2]=h;k[d>>2]=j;a=a+1|0;break c}while(0);a=y+8|0;f=k[n>>2]|0;do if((h|0)>=(f|0)){if((h|0)==(f|0)?(k[y+4>>2]|0)>(k[s>>2]|0):0)break;if((a|0)==(n|0)){x=88;break a}c=y+4|0;e=y;while(1){d=e+8|0;b=k[d>>2]|0;if((h|0)<(b|0)){x=40;break}if((h|0)==(b|0)?(q=e+12|0,r=k[q>>2]|0,(k[c>>2]|0)>(r|0)):0){c=q;a=h;b=r;break}b=a+8|0;if((b|0)==(n|0)){x=88;break a}else{e=a;a=b}}if((x|0)==40){x=0;l=e+12|0;c=l;a=b;b=k[l>>2]|0}k[d>>2]=f;k[c>>2]=k[s>>2];k[n>>2]=a;k[s>>2]=b;a=e+16|0}while(0);if((a|0)==(n|0)){x=88;break a}h=y+4|0;c=n;while(1){g=k[y>>2]|0;b=k[a>>2]|0;e:do if((g|0)<(b|0)){f=a;e=a}else while(1){if((g|0)==(b|0)?(k[h>>2]|0)>(k[a+4>>2]|0):0){f=a;b=g;e=a;break e}a=a+8|0;b=k[a>>2]|0;if((g|0)<(b|0)){f=a;e=a;break}}while(0);while(1){d=c+-8|0;a=k[d>>2]|0;if((g|0)<(a|0)){c=d;continue}if((g|0)!=(a|0))break;if((k[h>>2]|0)>(k[c+-4>>2]|0))c=d;else{a=g;break}}if(e>>>0>=d>>>0){y=e;continue b}j=e+4|0;l=k[j>>2]|0;k[f>>2]=a;a=c+-4|0;k[j>>2]=k[a>>2];k[d>>2]=b;k[a>>2]=l;a=e+8|0;c=d}}while(0);b=y+8|0;f:do if(b>>>0<c>>>0)while(1){i=k[g>>2]|0;f=g+4|0;j=b;while(1){b=k[j>>2]|0;if((b|0)>=(i|0)){if((b|0)!=(i|0))break;if((k[j+4>>2]|0)<=(k[f>>2]|0)){b=i;break}}j=j+8|0}d=c+-8|0;e=k[d>>2]|0;g:do if((e|0)<(i|0)){h=d;f=d}else while(1){if((e|0)==(i|0)?(k[c+-4>>2]|0)>(k[f>>2]|0):0){h=d;f=d;e=i;break g}c=d+-8|0;e=k[c>>2]|0;if((e|0)<(i|0)){h=c;f=c;c=d;break}else{h=d;d=c;c=h}}while(0);if(j>>>0>h>>>0){h=j;break f}d=j+4|0;i=k[d>>2]|0;k[j>>2]=e;c=c+-4|0;k[d>>2]=k[c>>2];k[f>>2]=b;k[c>>2]=i;b=j+8|0;c=h;g=(g|0)==(j|0)?h:g;a=a+1|0}else h=b;while(0);do if((h|0)!=(g|0)){e=k[g>>2]|0;f=k[h>>2]|0;if((e|0)>=(f|0)){if((e|0)!=(f|0))break;b=g+4|0;d=h+4|0;c=k[d>>2]|0;if((k[b>>2]|0)<=(c|0))break}else{c=h+4|0;b=g+4|0;d=c;c=k[c>>2]|0}k[h>>2]=e;k[d>>2]=k[b>>2];k[g>>2]=f;k[b>>2]=c;a=a+1|0}while(0);if(!a){a=Lb(y,h)|0;b=h+8|0;if(Lb(b,t)|0){x=83;break}if(a){y=b;continue}}j=h;if((j-l|0)>=(m-j|0)){x=87;break}Hb(y,h);y=h+8|0}if((x|0)==83){x=0;if(a){x=88;break}else{a=y;t=h;continue}}else if((x|0)==87){x=0;Hb(h+8|0,t);a=y;t=h;continue}}if((x|0)==4){c=t+-8|0;d=k[c>>2]|0;e=k[y>>2]|0;if((d|0)>=(e|0)){if((d|0)!=(e|0))return;a=y+4|0;b=k[a>>2]|0;if((k[s>>2]|0)<=(b|0))return}else{b=y+4|0;a=b;b=k[b>>2]|0}k[y>>2]=d;k[a>>2]=k[s>>2];k[c>>2]=e;k[s>>2]=b;return}else if((x|0)==9){Ib(y,y+8|0,n)|0;return}else if((x|0)==10){Jb(y,y+8|0,y+16|0,n)|0;return}else if((x|0)==11){Kb(y,y+8|0,y+16|0,y+24|0,n)|0;return}else if((x|0)==13){b=y+16|0;Ib(y,y+8|0,b)|0;a=y+24|0;if((a|0)==(t|0))return;while(1){h=k[a>>2]|0;e=k[b>>2]|0;if((h|0)>=(e|0)){if((h|0)==(e|0)?(u=a+4|0,v=k[u>>2]|0,w=b+4|0,(v|0)>(k[w>>2]|0)):0){d=u;c=w;i=v;x=18}}else{i=a+4|0;d=i;c=b+4|0;i=k[i>>2]|0;x=18}if((x|0)==18){x=0;k[a>>2]=e;k[d>>2]=k[c>>2];h:do if((b|0)!=(y|0)){f=b;while(1){b=f+-8|0;g=k[b>>2]|0;if((h|0)>=(g|0)){if((h|0)!=(g|0)){b=f;break h}e=f+-4|0;d=k[e>>2]|0;if((i|0)>(d|0))c=e;else{b=f;break h}}else{d=f+-4|0;c=d;d=k[d>>2]|0}k[f>>2]=g;k[f+4>>2]=d;if((b|0)==(y|0))break;else f=b}}while(0);k[b>>2]=h;k[c>>2]=i}b=a+8|0;if((b|0)==(t|0))break;else{s=a;a=b;b=s}}return}else if((x|0)==88)return}function Ib(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0;f=k[b>>2]|0;i=k[a>>2]|0;do if((f|0)<(i|0))d=1;else{if((f|0)==(i|0)?(k[b+4>>2]|0)>(k[a+4>>2]|0):0){d=1;break}d=0}while(0);g=k[c>>2]|0;do if((g|0)<(f|0))e=1;else{if((g|0)==(f|0)?(k[c+4>>2]|0)>(k[b+4>>2]|0):0){e=1;break}e=0}while(0);if(!d){if(!e){b=0;return b|0}h=b+4|0;i=k[h>>2]|0;k[b>>2]=g;g=c+4|0;k[h>>2]=k[g>>2];k[c>>2]=f;k[g>>2]=i;f=k[b>>2]|0;g=k[a>>2]|0;if((f|0)>=(g|0)){if((f|0)!=(g|0)){b=1;return b|0}d=a+4|0;e=k[d>>2]|0;if((k[h>>2]|0)<=(e|0)){b=1;return b|0}}else{e=a+4|0;d=e;e=k[e>>2]|0}k[a>>2]=f;k[d>>2]=k[h>>2];k[b>>2]=g;k[h>>2]=e;b=2;return b|0}d=a+4|0;h=k[d>>2]|0;if(e){k[a>>2]=g;b=c+4|0;k[d>>2]=k[b>>2];k[c>>2]=i;k[b>>2]=h;b=1;return b|0}k[a>>2]=f;f=b+4|0;k[d>>2]=k[f>>2];k[b>>2]=i;k[f>>2]=h;e=k[c>>2]|0;if((e|0)>=(i|0)){if((e|0)!=(i|0)){b=1;return b|0}d=c+4|0;if((k[d>>2]|0)<=(h|0)){b=1;return b|0}}else d=c+4|0;k[b>>2]=e;k[f>>2]=k[d>>2];k[c>>2]=i;k[d>>2]=h;b=2;return b|0}function Jb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0;l=Ib(a,b,c)|0;h=k[d>>2]|0;i=k[c>>2]|0;if((h|0)>=(i|0)){if((h|0)!=(i|0)){b=l;return b|0}f=d+4|0;g=c+4|0;e=k[g>>2]|0;if((k[f>>2]|0)>(e|0))j=g;else{b=l;return b|0}}else{e=c+4|0;f=d+4|0;j=e;e=k[e>>2]|0}k[c>>2]=h;k[j>>2]=k[f>>2];k[d>>2]=i;k[f>>2]=e;f=l+1|0;h=k[c>>2]|0;i=k[b>>2]|0;if((h|0)>=(i|0)){if((h|0)!=(i|0)){b=f;return b|0}g=b+4|0;e=k[g>>2]|0;if((k[j>>2]|0)>(e|0))d=g;else{b=f;return b|0}}else{e=b+4|0;d=e;e=k[e>>2]|0}k[b>>2]=h;k[d>>2]=k[j>>2];k[c>>2]=i;k[j>>2]=e;g=l+2|0;h=k[b>>2]|0;i=k[a>>2]|0;if((h|0)>=(i|0)){if((h|0)!=(i|0)){b=g;return b|0}f=a+4|0;e=k[f>>2]|0;if((k[d>>2]|0)<=(e|0)){b=g;return b|0}}else{e=a+4|0;f=e;e=k[e>>2]|0}k[a>>2]=h;k[f>>2]=k[d>>2];k[b>>2]=i;k[d>>2]=e;b=l+3|0;return b|0}function Kb(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0;n=Jb(a,b,c,d)|0;i=k[e>>2]|0;j=k[d>>2]|0;if((i|0)>=(j|0)){if((i|0)!=(j|0)){b=n;return b|0}g=e+4|0;h=d+4|0;f=k[h>>2]|0;if((k[g>>2]|0)>(f|0))m=h;else{b=n;return b|0}}else{f=d+4|0;g=e+4|0;m=f;f=k[f>>2]|0}k[d>>2]=i;k[m>>2]=k[g>>2];k[e>>2]=j;k[g>>2]=f;g=n+1|0;i=k[d>>2]|0;j=k[c>>2]|0;if((i|0)>=(j|0)){if((i|0)!=(j|0)){b=g;return b|0}h=c+4|0;f=k[h>>2]|0;if((k[m>>2]|0)>(f|0))l=h;else{b=g;return b|0}}else{f=c+4|0;l=f;f=k[f>>2]|0}k[c>>2]=i;k[l>>2]=k[m>>2];k[d>>2]=j;k[m>>2]=f;g=n+2|0;i=k[c>>2]|0;j=k[b>>2]|0;if((i|0)>=(j|0)){if((i|0)!=(j|0)){b=g;return b|0}h=b+4|0;f=k[h>>2]|0;if((k[l>>2]|0)>(f|0))e=h;else{b=g;return b|0}}else{f=b+4|0;e=f;f=k[f>>2]|0}k[b>>2]=i;k[e>>2]=k[l>>2];k[c>>2]=j;k[l>>2]=f;h=n+3|0;i=k[b>>2]|0;j=k[a>>2]|0;if((i|0)>=(j|0)){if((i|0)!=(j|0)){b=h;return b|0}g=a+4|0;f=k[g>>2]|0;if((k[e>>2]|0)<=(f|0)){b=h;return b|0}}else{f=a+4|0;g=f;f=k[f>>2]|0}k[a>>2]=i;k[g>>2]=k[e>>2];k[b>>2]=j;k[e>>2]=f;b=n+4|0;return b|0}function Lb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;switch(b-a>>3|0){case 2:{f=b+-8|0;g=k[f>>2]|0;h=k[a>>2]|0;if((g|0)>=(h|0)){if((g|0)!=(h|0)){a=1;return a|0}e=b+-4|0;c=a+4|0;d=k[c>>2]|0;if((k[e>>2]|0)<=(d|0)){a=1;return a|0}}else{d=a+4|0;c=d;e=b+-4|0;d=k[d>>2]|0}k[a>>2]=g;k[c>>2]=k[e>>2];k[f>>2]=h;k[e>>2]=d;a=1;return a|0}case 3:{Ib(a,a+8|0,b+-8|0)|0;a=1;return a|0}case 4:{Jb(a,a+8|0,a+16|0,b+-8|0)|0;a=1;return a|0}case 5:{Kb(a,a+8|0,a+16|0,a+24|0,b+-8|0)|0;a=1;return a|0}case 1:case 0:{a=1;return a|0}default:{e=a+16|0;Ib(a,a+8|0,e)|0;d=a+24|0;if((d|0)==(b|0)){a=1;return a|0}else c=0;while(1){l=k[d>>2]|0;h=k[e>>2]|0;if((l|0)>=(h|0)){if((l|0)==(h|0)?(n=d+4|0,o=k[n>>2]|0,p=e+4|0,(o|0)>(k[p>>2]|0)):0){f=p;g=n;m=o;q=15}}else{m=d+4|0;f=e+4|0;g=m;m=k[m>>2]|0;q=15}if((q|0)==15){q=0;k[d>>2]=h;k[g>>2]=k[f>>2];a:do if((e|0)!=(a|0)){j=e;while(1){e=j+-8|0;i=k[e>>2]|0;if((l|0)>=(i|0)){if((l|0)!=(i|0)){e=j;break a}h=j+-4|0;g=k[h>>2]|0;if((m|0)>(g|0))f=h;else{e=j;break a}}else{g=j+-4|0;f=g;g=k[g>>2]|0}k[j>>2]=i;k[j+4>>2]=g;if((e|0)==(a|0))break;else j=e}}while(0);k[e>>2]=l;k[f>>2]=m;c=c+1|0;if((c|0)==8)break}e=d+8|0;if((e|0)==(b|0)){c=1;q=24;break}else{m=d;d=e;e=m}}if((q|0)==24)return c|0;a=(d+8|0)==(b|0);return a|0}}return 0}function Mb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0;e=b;if(d>>>0<30|(b|0)==(c|0))return;l=(c-e|0)/12|0;m=(l>>>0)/3|0;j=b;f=e;g=e;e=0;h=d;i=0;while(1){if(i>>>0>=m>>>0){if((l-i|0)>>>0<m>>>0)break;o=k[j+4>>2]|0;n=o>>>0<h>>>0;f=n?g:f;e=n?i:e;h=n?o:h}g=j+12|0;if((g|0)==(c|0))break;else{j=g;i=i+1|0}}if(!e)return;e=k[f+4>>2]|0;if(e>>>0>((d>>>0)/9|0)>>>0)return;o=f+8|0;Mb(a,b,f,(k[o>>2]|0)+e|0);m=a+4|0;e=k[m>>2]|0;b=a+8|0;if((e|0)==(k[b>>2]|0)){n=k[a>>2]|0;i=e-n|0;j=i>>2;l=j+1|0;if(l>>>0>1073741823)xa(1340,1363,303,1438);if(j>>>0<536870911){e=i>>1;e=e>>>0<l>>>0?l:e;if(!e){e=0;g=0}else p=15}else{e=1073741823;p=15}if((p|0)==15){h=e<<2;h=(h|0)==0?1:h;g=_d(h)|0;a:do if(!g){while(1){g=k[35]|0;k[35]=g+0;if(!g)break;Xa[g&0]();g=_d(h)|0;if(g)break a}a=ya(4)|0;k[a>>2]=128;La(a|0,8,1)}while(0)}k[g+(j<<2)>>2]=k[f>>2];fe(g|0,n|0,i|0)|0;k[a>>2]=g;k[m>>2]=g+(l<<2);k[b>>2]=g+(e<<2);if(n)$d(n)}else{k[e>>2]=k[f>>2];k[m>>2]=e+4}Mb(a,f,c,d-(k[o>>2]|0)|0);return}function Nb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0;h=(b|0)==(a|0);i[b+12>>0]=h&1;if(h)return;while(1){f=b+8|0;g=k[f>>2]|0;d=g+12|0;if(i[d>>0]|0){c=37;break}h=g+8|0;e=k[h>>2]|0;c=k[e>>2]|0;if((c|0)==(g|0)){c=k[e+4>>2]|0;if(!c){c=7;break}c=c+12|0;if(i[c>>0]|0){c=7;break}i[d>>0]=1;i[e+12>>0]=(e|0)==(a|0)&1;i[c>>0]=1}else{if(!c){c=24;break}c=c+12|0;if(i[c>>0]|0){c=24;break}i[d>>0]=1;i[e+12>>0]=(e|0)==(a|0)&1;i[c>>0]=1}if((e|0)==(a|0)){c=37;break}else b=e}if((c|0)==7){if((k[g>>2]|0)==(b|0)){b=g;a=e}else{f=g+4|0;b=k[f>>2]|0;c=k[b>>2]|0;k[f>>2]=c;if(!c)c=e;else{k[c+8>>2]=g;c=k[h>>2]|0}d=b+8|0;k[d>>2]=c;c=k[h>>2]|0;if((k[c>>2]|0)==(g|0))k[c>>2]=b;else k[c+4>>2]=b;k[b>>2]=g;k[h>>2]=b;a=k[d>>2]|0}i[b+12>>0]=1;i[a+12>>0]=0;d=k[a>>2]|0;e=d+4|0;b=k[e>>2]|0;k[a>>2]=b;if(b)k[b+8>>2]=a;b=a+8|0;k[d+8>>2]=k[b>>2];c=k[b>>2]|0;if((k[c>>2]|0)==(a|0))k[c>>2]=d;else k[c+4>>2]=d;k[e>>2]=a;k[b>>2]=d;return}else if((c|0)==24){if((k[g>>2]|0)==(b|0)){d=b+4|0;c=k[d>>2]|0;k[g>>2]=c;if(!c)c=e;else{k[c+8>>2]=g;c=k[h>>2]|0}k[f>>2]=c;c=k[h>>2]|0;if((k[c>>2]|0)==(g|0))k[c>>2]=b;else k[c+4>>2]=b;k[d>>2]=g;k[h>>2]=b;e=k[f>>2]|0}else b=g;i[b+12>>0]=1;i[e+12>>0]=0;h=e+4|0;d=k[h>>2]|0;b=k[d>>2]|0;k[h>>2]=b;if(b)k[b+8>>2]=e;b=e+8|0;k[d+8>>2]=k[b>>2];c=k[b>>2]|0;if((k[c>>2]|0)==(e|0))k[c>>2]=d;else k[c+4>>2]=d;k[d>>2]=e;k[b>>2]=d;return}else if((c|0)==37)return}function Ob(a){a=a|0;var b=0,c=0,d=0,e=0;if(!a)return;Ob(k[a>>2]|0);Ob(k[a+4>>2]|0);b=k[a+20>>2]|0;c=b;if(b){d=a+24|0;e=k[d>>2]|0;if((e|0)!=(b|0))k[d>>2]=e+(~(((e+-20-c|0)>>>0)/20|0)*20|0);$d(b)}$d(a);return}function Pb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0.0,q=0,s=0.0,t=0.0,u=0,v=0,w=0,x=0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0.0;ca=r;r=r+48|0;g=b;$=ca+40|0;X=ca+32|0;Z=ca+16|0;Y=ca;aa=ca+8|0;k[Z>>2]=0;ba=Z+4|0;k[ba>>2]=0;k[Z+8>>2]=0;f=c-g|0;do if((c|0)!=(b|0)){if(((f|0)/20|0)>>>0>214748364)xa(1340,1363,303,1438);e=_d(f)|0;a:do if(!e){while(1){e=k[35]|0;k[35]=e+0;if(!e)break;Xa[e&0]();e=_d(f)|0;if(e)break a}ca=ya(4)|0;k[ca>>2]=128;La(ca|0,8,1)}while(0);if((b|0)!=(c|0)){g=c+-20-g|0;f=e;while(1){k[f>>2]=k[b>>2];k[f+4>>2]=k[b+4>>2];k[f+8>>2]=k[b+8>>2];k[f+12>>2]=k[b+12>>2];k[f+16>>2]=k[b+16>>2];b=b+20|0;if((b|0)==(c|0))break;else f=f+20|0}q=e+((((g>>>0)/20|0)+1|0)*20|0)|0;g=(q|0)==(e|0);if(g){Qb(e,q);h=g;break}c=(q-e|0)/20|0;o=0;do{h=e+(o*20|0)+8|0;i=k[h>>2]|0;j=e+(o*20|0)|0;l=k[j>>2]|0;if((i|0)>=(l|0)){if((i|0)==(l|0)?(u=e+(o*20|0)+12|0,v=k[u>>2]|0,w=e+(o*20|0)+4|0,x=k[w>>2]|0,(v|0)<(x|0)):0){b=u;f=w;m=v;n=x;_=19}}else{n=e+(o*20|0)+4|0;m=e+(o*20|0)+12|0;b=m;f=n;m=k[m>>2]|0;n=k[n>>2]|0;_=19}if((_|0)==19){_=0;k[j>>2]=i;k[f>>2]=m;k[h>>2]=l;k[b>>2]=n}o=o+1|0}while(o>>>0<c>>>0);W=g;Qb(e,q);if(W)h=W;else{S=Z+8|0;T=Y+4|0;U=$+4|0;V=X+4|0;R=e;while(1){b=k[ba>>2]|0;f=k[S>>2]|0;if((b|0)==(f|0)){Rb(Z,R);b=k[ba>>2]|0;f=k[S>>2]|0}else{k[b>>2]=k[R>>2];k[b+4>>2]=k[R+4>>2];b=b+8|0;k[ba>>2]=b}Q=R+8|0;if((b|0)==(f|0))Rb(Z,Q);else{k[b>>2]=k[Q>>2];k[b+4>>2]=k[R+12>>2];k[ba>>2]=b+8}P=R+16|0;h=k[P>>2]|0;O=k[a>>2]|0;b=k[O+(h*12|0)>>2]|0;h=O+(h*12|0)+4|0;if((b|0)!=(h|0)){f=b;while(1){b=f+16|0;g=f+20|0;do if((k[g>>2]|0)>=(d|0)){c=k[ba>>2]|0;if((c|0)==(k[S>>2]|0)){Rb(Z,b);break}else{k[c>>2]=k[b>>2];k[c+4>>2]=k[g>>2];k[ba>>2]=c+8;break}}while(0);b=k[f+4>>2]|0;if(!b)while(1){b=k[f+8>>2]|0;if((k[b>>2]|0)==(f|0))break;else f=b}else while(1){f=k[b>>2]|0;if(!f)break;else b=f}if((b|0)==(h|0))break;else f=b}}L=R+4|0;if((k[L>>2]|0)<(d|0))O=0;else O=(k[R+12>>2]|0)>=(d|0);M=R+8|0;N=R+12|0;K=R;b:do{if(!O){if((k[K+4>>2]|0)>=(d|0)?(k[K+12>>2]|0)>=(d|0):0)_=46}else _=46;c:do if((_|0)==46){_=0;b=k[R>>2]|0;f=k[K>>2]|0;g=(b|0)==(f|0);if(((g?(k[L>>2]|0)==(k[K+4>>2]|0):0)?(k[M>>2]|0)==(k[K+8>>2]|0):0)?(k[N>>2]|0)==(k[K+12>>2]|0):0)break;J=K+8|0;c=k[J>>2]|0;h=k[Q>>2]|0;if((((c|0)<(f|0)?c:f)|0)>=(((h|0)<(b|0)?b:h)|0))break b;if(g?(k[L>>2]|0)==(k[K+4>>2]|0):0)break;if((h|0)==(c|0)?(k[N>>2]|0)==(k[K+12>>2]|0):0)break;I=Y;k[I>>2]=0;k[I+4>>2]=0;if(!(Sb(R,K)|0))break;b=k[R>>2]|0;h=k[M>>2]|0;g=k[L>>2]|0;n=k[N>>2]|0;m=(h|0)<(b|0);j=m?h:b;m=m?b:h;G=(n|0)<(g|0);x=G?n:g;G=G?g:n;o=k[K>>2]|0;c=k[J>>2]|0;H=K+4|0;u=k[H>>2]|0;I=K+12|0;v=k[I>>2]|0;l=(c|0)<(o|0);i=l?c:o;l=l?o:c;F=(v|0)<(u|0);w=F?v:u;F=F?u:v;d:do if((m|0)>=(i|0)&(j|0)<=(l|0)){if(!((x|0)<=(F|0)&(G|0)>=(w|0))){_=79;break}f=(c|0)==(o|0);do if((h|0)==(b|0)){if(f){_=79;break d}do if((v|0)==(u|0))g=u;else{p=+(o|0);s=+(u|0);t=+(b|0)-p;if(t==0.0){g=u;break}g=~~(s+(+(v|0)-s)*t/(+(c|0)-p))}while(0);if(!((x|0)<=(g|0)&(G|0)>=(g|0))){_=79;break d}k[Y>>2]=b;k[T>>2]=g}else{if(!f){z=+(v-u|0);A=+(n-g|0);y=+(c-o|0);p=+(h-b|0);s=z*p;t=A*y;if(s==t){_=79;break d}da=+(o|0);C=+(u|0);E=A*+(b|0);B=+(g|0)*p;D=(y*E-z*da*p+y*(C*p)-y*B)/(t-s);E=(z*(A*da)+(z*B-A*(C*y))-z*E)/(s-t);b=~~D;o=~~E;b=((D<+(b|0))<<31>>31)+b|0;g=(v|0)==(u|0)?u:(n|0)==(g|0)?g:((E<+(o|0))<<31>>31)+o|0;if(!((x|0)<=(g|0)&(((j|0)>(b|0)|(m|0)<(b|0)|(G|0)<(g|0))^1))){_=79;break d}if(!((w|0)<=(g|0)&(((i|0)>(b|0)|(l|0)<(b|0)|(F|0)<(g|0))^1))){_=79;break d}k[Y>>2]=b;k[T>>2]=g;break}do if((n|0)!=(g|0)){p=+(b|0);s=+(g|0);t=+(o|0)-p;if(t==0.0)break;g=~~(s+(+(n|0)-s)*t/(+(h|0)-p))}while(0);if(!((w|0)<=(g|0)&(F|0)>=(g|0))){_=79;break d}k[Y>>2]=o;k[T>>2]=g;b=o}while(0);k[$>>2]=b;k[U>>2]=g;if(!(Tb($,R)|0)){_=79;break}k[X>>2]=b;k[V>>2]=g;if(!(Tb(X,K)|0)){_=79;break}}else _=79;while(0);e:do if((_|0)==79){_=0;f:do if(Sb(R,K)|0){b=k[R>>2]|0;i=k[M>>2]|0;n=k[L>>2]|0;v=k[N>>2]|0;u=(b|0)>(i|0);o=u?i:b;u=u?b:i;G=(n|0)>(v|0);F=G?v:n;G=G?n:v;j=k[K>>2]|0;g=k[J>>2]|0;l=k[H>>2]|0;m=k[I>>2]|0;h=(j|0)>(g|0);c=h?g:j;h=h?j:g;x=(l|0)>(m|0);w=x?m:l;x=x?l:m;if(!((u|0)>=(c|0)&(o|0)<=(h|0)))break;if(!((F|0)<=(x|0)&(G|0)>=(w|0)))break;f=(j|0)==(g|0);do if((b|0)==(i|0)){if(f)break f;do if((l|0)==(m|0))p=+(l|0);else{t=+(j|0);p=+(l|0);s=+(b|0)-t;if(s==0.0)break;p=p+(+(m|0)-p)*s/(+(g|0)-t)}while(0);g=~~p;g=((p<+(g|0))<<31>>31)+g|0;if(!((G|0)>=(g|0)&(F|0)<=(g|0)))break f;k[Y>>2]=b;k[T>>2]=g}else{if(!f){B=+(l|0);C=+(m|0)-B;D=+(n|0);E=+(v|0)-D;A=+(j|0);z=+(g|0)-A;y=+(b|0);p=+(i|0)-y;s=C*p;t=z*E;if(s==t)break f;da=y*E;y=p*D;D=(da*z-A*C*p+z*(B*p)-z*y)/(t-s);da=(y*C-B*z*E+C*(E*A)-C*da)/(s-t);b=~~D;g=~~da;b=((D<+(b|0))<<31>>31)+b|0;g=(l|0)==(m|0)?l:(n|0)==(v|0)?n:((da<+(g|0))<<31>>31)+g|0;if(!((F|0)<=(g|0)&(((o|0)>(b|0)|(u|0)<(b|0)|(G|0)<(g|0))^1)))break f;if(!((w|0)<=(g|0)&(((c|0)>(b|0)|(h|0)<(b|0)|(x|0)<(g|0))^1)))break f;k[Y>>2]=b;k[T>>2]=g;break}do if((n|0)==(v|0))p=+(n|0);else{t=+(b|0);p=+(n|0);s=+(j|0)-t;if(s==0.0)break;p=p+(+(v|0)-p)*s/(+(i|0)-t)}while(0);g=~~p;g=((p<+(g|0))<<31>>31)+g|0;if(!((x|0)>=(g|0)&(w|0)<=(g|0)))break f;k[Y>>2]=j;k[T>>2]=g;b=j}while(0);break e}while(0);break c}while(0);f=k[ba>>2]|0;if((f|0)==(k[S>>2]|0))Rb(Z,Y);else{k[f>>2]=b;k[f+4>>2]=g;k[ba>>2]=f+8}Ub($,(k[a>>2]|0)+((k[K+16>>2]|0)*12|0)|0,Y);Ub($,(k[a>>2]|0)+((k[P>>2]|0)*12|0)|0,Y)}while(0);K=K+20|0}while((K|0)!=(q|0));R=R+20|0;if((R|0)==(q|0)){h=W;break}}}}else{b=e;_=11}}else{b=0;_=11}while(0);if((_|0)==11){Qb(b,b);h=(b|0)==(b|0);e=b;q=b}n=k[Z>>2]|0;o=k[ba>>2]|0;Vb(n,o);u=(n|0)==(o|0);g:do if(!u){b=n+8|0;if((b|0)==(o|0))m=o;else{f=b;b=n;while(1){if((k[b>>2]|0)==(k[b+8>>2]|0)?(k[b+4>>2]|0)==(k[b+12>>2]|0):0){_=114;break g}b=f+8|0;if((b|0)==(o|0)){m=o;break}else{Z=f;f=b;b=Z}}}}else{b=n;_=114}while(0);if((_|0)==114)if((b|0)==(o|0))m=o;else{f=b+16|0;if((f|0)!=(o|0)){c=b;b=b+8|0;while(1){g=k[f>>2]|0;if((k[c>>2]|0)==(g|0)){b=b+12|0;if((k[c+4>>2]|0)==(k[b>>2]|0))b=c;else _=120}else{b=b+12|0;_=120}if((_|0)==120){_=0;Z=c+8|0;k[Z>>2]=g;k[c+12>>2]=k[b>>2];b=Z}g=f+8|0;if((g|0)==(o|0))break;else{Z=f;f=g;c=b;b=Z}}}m=b+8|0}if(!h){i=aa+4|0;j=e;f=n;do{l=k[j+16>>2]|0;b=j+8|0;c=k[b>>2]|0;h=k[j>>2]|0;if((c|0)>=(h|0))if((c|0)==(h|0))g=(k[j+12>>2]|0)<(k[j+4>>2]|0)?b:j;else g=j;else g=b;g=k[g>>2]|0;if((h|0)>=(c|0))if((h|0)==(c|0))b=(k[j+4>>2]|0)<(k[j+12>>2]|0)?b:j;else b=j;c=k[b>>2]|0;b=f;h:do if((b|0)!=(m|0))do{if((k[b>>2]|0)>=(g|0))break h;b=b+8|0;f=b}while((b|0)!=(m|0));while(0);b=f;i:do if((b|0)!=(m|0))do{g=k[b>>2]|0;if((g|0)>(c|0))break i;k[aa>>2]=g;k[i>>2]=k[b+4>>2];if(Tb(aa,j)|0)Ub($,(k[a>>2]|0)+(l*12|0)|0,b);b=b+8|0}while((b|0)!=(m|0));while(0);j=j+20|0}while((j|0)!=(q|0))}if(e)$d(e);if(!n){r=ca;return}if(!u)k[ba>>2]=o+(~((o+-8-n|0)>>>3)<<3);$d(n);r=ca;return}\\nfunction Jc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0;L=r;r=r+176|0;D=L+72|0;E=L;K=L+40|0;B=L+104|0;F=L+168|0;G=L+164|0;H=L+160|0;I=a+16|0;c=k[I>>2]|0;k[K>>2]=k[c>>2];k[K+4>>2]=k[c+4>>2];k[K+8>>2]=k[c+8>>2];k[K+12>>2]=k[c+12>>2];k[K+16>>2]=k[c+16>>2];k[K+20>>2]=k[c+20>>2];k[K+24>>2]=k[c+24>>2];h=c+28|0;l=k[K>>2]|0;J=K+8|0;if((l|0)==(k[J>>2]|0)?(t=K+4|0,e=k[t>>2]|0,(e|0)==(k[K+12>>2]|0)):0){u=a+20|0;d=k[u>>2]|0;v=a+24|0;f=k[v>>2]|0;if((d|0)!=(f|0)?(w=a+64|0,x=a+72|0,y=a+68|0,(k[d>>2]|0)==(l|0)):0){c=f;while(1){l=d+4|0;if((k[l>>2]|0)!=(e|0))break;s=k[d+8>>2]|0;e=c-d|0;if((e|0)>12){f=(e|0)/12|0;m=c+-12|0;q=d;C=k[q>>2]|0;q=k[q+4>>2]|0;n=m;o=k[n+4>>2]|0;p=d;k[p>>2]=k[n>>2];k[p+4>>2]=o;k[m>>2]=C;k[m+4>>2]=q;m=d+8|0;q=c+-4|0;C=k[m>>2]|0;k[m>>2]=k[q>>2];k[q>>2]=C;q=f+-1|0;do if((e|0)>=36?(C=f+-3|0,z=(C|0)/2|0,(C|0)>=-1):0){c=d+12|0;e=c;do if((q|0)>2){f=d+24|0;g=k[f>>2]|0;c=k[c>>2]|0;if((g|0)==(c|0)){if((k[d+28>>2]|0)>=(k[d+16>>2]|0)){j=1;break}}else if((g|0)>=(c|0)){j=1;break}e=f;j=2}else j=1;while(0);c=e;f=k[d>>2]|0;g=k[c>>2]|0;if((f|0)==(g|0)){if((k[l>>2]|0)<(k[c+4>>2]|0))break}else if((f|0)<(g|0))break;o=d;n=k[o>>2]|0;o=k[o+4>>2]|0;p=k[m>>2]|0;g=e;l=k[g+4>>2]|0;C=d;k[C>>2]=k[g>>2];k[C+4>>2]=l;k[m>>2]=k[c+8>>2];a:do if((z|0)>=(j|0)){m=c;c=j;while(1){f=c<<1|1;c=d+(f*12|0)|0;g=c;l=f+1|0;do if((l|0)<(q|0)){e=d+(l*12|0)|0;j=k[e>>2]|0;c=k[c>>2]|0;if((j|0)==(c|0)){if((k[d+(l*12|0)+4>>2]|0)>=(k[d+(f*12|0)+4>>2]|0))break}else if((j|0)>=(c|0))break;g=e;f=l}while(0);c=g;e=k[c>>2]|0;if((n|0)==(e|0)){if((o|0)<(k[c+4>>2]|0)){c=m;break a}}else if((n|0)<(e|0)){c=m;break a}j=g;l=k[j+4>>2]|0;C=m;k[C>>2]=k[j>>2];k[C+4>>2]=l;k[m+8>>2]=k[c+8>>2];if((z|0)<(f|0))break;else{m=c;c=f}}}while(0);C=c;k[C>>2]=n;k[C+4>>2]=o;k[c+8>>2]=p}while(0);c=k[v>>2]|0}k[v>>2]=c+-12;e=s;c=k[e+4>>2]|0;if(!c){d=s;while(1){c=k[d+8>>2]|0;if((k[c>>2]|0)==(d|0))break;else d=c}}else while(1){d=k[c>>2]|0;if(!d)break;else c=d}if((k[w>>2]|0)==(e|0))k[w>>2]=c;k[x>>2]=(k[x>>2]|0)+-1;Mc(k[y>>2]|0,s);$d(s);d=k[u>>2]|0;c=k[v>>2]|0;if((d|0)==(c|0))break;if((k[d>>2]|0)!=(k[K>>2]|0))break;e=k[t>>2]|0}c=k[I>>2]|0}d=c;f=c}else A=3;b:do if((A|0)==3){j=k[a+8>>2]|0;if((h|0)==(j|0)){d=c;f=c}else{g=k[K+4>>2]|0;f=c;while(1){e=k[f+28>>2]|0;if((e|0)==(k[f+36>>2]|0)){d=k[f+32>>2]|0;if(!((e|0)==(l|0)?(d|0)!=(k[f+40>>2]|0):0)){d=c;f=c;break b}}else{if((e|0)!=(l|0)){d=c;f=c;break b}d=k[f+32>>2]|0}if((d|0)!=(g|0)){d=c;f=c;break b}d=h+28|0;if((d|0)==(j|0)){d=c;f=c;h=j;break}else{f=h;h=d}}}}while(0);k[B>>2]=k[d>>2];k[B+4>>2]=k[d+4>>2];k[B+8>>2]=k[d+8>>2];k[B+12>>2]=k[d+12>>2];k[B+16>>2]=k[d+16>>2];k[B+20>>2]=k[d+20>>2];k[B+24>>2]=k[d+24>>2];C=B+28|0;k[C>>2]=k[d>>2];k[C+4>>2]=k[d+4>>2];k[C+8>>2]=k[d+8>>2];k[C+12>>2]=k[d+12>>2];k[C+16>>2]=k[d+16>>2];k[C+20>>2]=k[d+20>>2];k[C+24>>2]=k[d+24>>2];C=a+68|0;c=k[C>>2]|0;c:do if(!c)d=C;else{e=C;while(1){d=c;while(1){if(!(cd(d+16|0,B)|0))break;c=k[d+4>>2]|0;if(!c){d=e;break c}else d=c}c=k[d>>2]|0;if(!c)break;else e=d}}while(0);if((f|0)==(h|0)){r=L;return}m=D+24|0;n=a+80|0;o=a+36|0;p=E+32|0;q=a+64|0;s=K+4|0;t=K+12|0;u=D+24|0;v=E+32|0;w=K+8|0;x=K+24|0;y=D+24|0;z=E+32|0;A=D+24|0;B=E+32|0;c=f;do{k[K>>2]=k[c>>2];k[K+4>>2]=k[c+4>>2];k[K+8>>2]=k[c+8>>2];k[K+12>>2]=k[c+12>>2];k[K+16>>2]=k[c+16>>2];k[K+20>>2]=k[c+20>>2];k[K+24>>2]=k[c+24>>2];e=d;do if((e|0)==(C|0)){e=d;c=k[e>>2]|0;if(!c)while(1){c=k[e+8>>2]|0;if((k[c>>2]|0)==(e|0))e=c;else break}else while(1){e=k[c+4>>2]|0;if(!e)break;else c=e}l=c+44|0;k[F>>2]=d;k[D>>2]=k[F>>2];e=dd(a,l,l,K,D,b)|0;d=e;i[m>>0]=1;if(Nc(n,c+16|0,l,K,D)|0){k[E>>2]=k[D>>2];k[E+4>>2]=k[D+4>>2];k[E+8>>2]=k[D+8>>2];k[E+12>>2]=k[D+12>>2];k[E+16>>2]=k[D+16>>2];k[E+20>>2]=k[D+20>>2];k[E+24>>2]=k[D+24>>2];k[E+28>>2]=k[D+28>>2];k[p>>2]=d;l=Oc(o,E)|0;k[e+72>>2]=l}}else{l=e+16|0;if((e|0)==(k[q>>2]|0)){k[G>>2]=d;k[D>>2]=k[G>>2];c=dd(a,l,l,K,D,b)|0;if(!((k[K>>2]|0)==(k[J>>2]|0)?(k[s>>2]|0)==(k[t>>2]|0):0)){g=K;f=k[g>>2]|0;g=k[g+4>>2]|0;N=w;M=k[N+4>>2]|0;j=K;k[j>>2]=k[N>>2];k[j+4>>2]=M;j=w;k[j>>2]=f;k[j+4>>2]=g;k[x>>2]=k[x>>2]^32}i[u>>0]=1;if(Nc(n,K,l,e+44|0,D)|0){k[E>>2]=k[D>>2];k[E+4>>2]=k[D+4>>2];k[E+8>>2]=k[D+8>>2];k[E+12>>2]=k[D+12>>2];k[E+16>>2]=k[D+16>>2];k[E+20>>2]=k[D+20>>2];k[E+24>>2]=k[D+24>>2];k[E+28>>2]=k[D+28>>2];k[v>>2]=d;N=Oc(o,E)|0;k[e+72>>2]=N}d=c;break}j=e+44|0;g=e+72|0;c=k[g>>2]|0;if(c){i[c+24>>0]=0;k[g>>2]=0}c=d;e=k[c>>2]|0;if(!e)while(1){e=k[c+8>>2]|0;if((k[e>>2]|0)==(c|0))c=e;else{c=e;break}}else{c=e;while(1){e=k[c+4>>2]|0;if(!e)break;else c=e}}N=c+44|0;k[H>>2]=d;k[D>>2]=k[H>>2];e=dd(a,N,l,K,D,b)|0;f=e;i[y>>0]=1;if(Nc(n,c+16|0,N,K,D)|0){k[E>>2]=k[D>>2];k[E+4>>2]=k[D+4>>2];k[E+8>>2]=k[D+8>>2];k[E+12>>2]=k[D+12>>2];k[E+16>>2]=k[D+16>>2];k[E+20>>2]=k[D+20>>2];k[E+24>>2]=k[D+24>>2];k[E+28>>2]=k[D+28>>2];k[z>>2]=f;N=Oc(o,E)|0;k[e+72>>2]=N}if(!((k[K>>2]|0)==(k[J>>2]|0)?(k[s>>2]|0)==(k[t>>2]|0):0)){M=K;e=k[M>>2]|0;M=k[M+4>>2]|0;O=w;c=k[O+4>>2]|0;N=K;k[N>>2]=k[O>>2];k[N+4>>2]=c;N=w;k[N>>2]=e;k[N+4>>2]=M;k[x>>2]=k[x>>2]^32}i[A>>0]=1;if(Nc(n,K,l,j,D)|0){k[E>>2]=k[D>>2];k[E+4>>2]=k[D+4>>2];k[E+8>>2]=k[D+8>>2];k[E+12>>2]=k[D+12>>2];k[E+16>>2]=k[D+16>>2];k[E+20>>2]=k[D+20>>2];k[E+24>>2]=k[D+24>>2];k[E+28>>2]=k[D+28>>2];k[B>>2]=d;O=Oc(o,E)|0;k[g>>2]=O}d=f}while(0);c=(k[I>>2]|0)+28|0;k[I>>2]=c}while((c|0)!=(h|0));r=L;return}function Kc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,q=0.0,s=0.0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0;J=r;r=r+144|0;E=J+72|0;F=J+32|0;I=J;H=J+104|0;G=a+36|0;h=k[k[G>>2]>>2]|0;A=k[h+40>>2]|0;B=A;y=B+44|0;k[I>>2]=k[y>>2];k[I+4>>2]=k[y+4>>2];k[I+8>>2]=k[y+8>>2];k[I+12>>2]=k[y+12>>2];k[I+16>>2]=k[y+16>>2];k[I+20>>2]=k[y+20>>2];k[I+24>>2]=k[y+24>>2];y=k[B+76>>2]|0;z=A;c=k[z>>2]|0;if(!c){d=z;while(1){c=k[d+8>>2]|0;if((k[c>>2]|0)==(d|0))d=c;else break}}else while(1){d=k[c+4>>2]|0;if(!d)break;else c=d}C=c;d=c+16|0;D=c+72|0;w=D+4|0;x=k[w>>2]|0;k[H>>2]=k[d>>2];k[H+4>>2]=k[d+4>>2];k[H+8>>2]=k[d+8>>2];k[H+12>>2]=k[d+12>>2];k[H+16>>2]=k[d+16>>2];k[H+20>>2]=k[d+20>>2];k[H+24>>2]=k[d+24>>2];d=k[H>>2]|0;u=H+8|0;do if((d|0)==(k[u>>2]|0)?(g=k[H+4>>2]|0,(g|0)==(k[H+12>>2]|0)):0){e=k[I+8>>2]|0;if((k[I>>2]|0)==(e|0)?(k[I+4>>2]|0)==(k[I+12>>2]|0):0)break;f=I+8|0;if((e|0)==(d|0)?(k[I+12>>2]|0)==(g|0):0){o=I;n=k[o>>2]|0;o=k[o+4>>2]|0;l=f;m=k[l+4>>2]|0;t=I;k[t>>2]=k[l>>2];k[t+4>>2]=m;t=f;k[t>>2]=n;k[t+4>>2]=o;t=I+24|0;k[t>>2]=k[t>>2]^32}}while(0);m=c+44|0;k[m>>2]=k[I>>2];k[m+4>>2]=k[I+4>>2];k[m+8>>2]=k[I+8>>2];k[m+12>>2]=k[I+12>>2];k[m+16>>2]=k[I+16>>2];k[m+20>>2]=k[I+20>>2];k[m+24>>2]=k[I+24>>2];s=+p[h+8>>3];q=+p[h+16>>3];m=b+16|0;d=k[m>>2]|0;n=b+20|0;e=k[n>>2]|0;if(d>>>0>=e>>>0){o=b+12|0;t=k[o>>2]|0;f=t;j=d-f|0;l=(j|0)/24|0;h=l+1|0;if(h>>>0>178956970)xa(1340,1363,303,1438);d=(e-f|0)/24|0;if(d>>>0<89478485){g=d<<1;g=g>>>0<h>>>0?h:g}else g=178956970;f=g*24|0;f=(f|0)==0?1:f;e=_d(f)|0;a:do if(!e){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();e=_d(f)|0;if(e)break a}J=ya(4)|0;k[J>>2]=128;La(J|0,8,1)}while(0);p[e+(l*24|0)>>3]=s;p[e+(l*24|0)+8>>3]=q;k[e+(l*24|0)+16>>2]=0;k[e+(l*24|0)+20>>2]=0;d=e+(h*24|0)|0;l=e+((((j|0)/-24|0)+l|0)*24|0)|0;fe(l|0,t|0,j|0)|0;k[o>>2]=l;k[m>>2]=d;k[n>>2]=e+(g*24|0);if(t){$d(t);d=k[m>>2]|0}}else{p[d>>3]=s;p[d+8>>3]=q;k[d+16>>2]=0;k[d+20>>2]=0;d=(k[m>>2]|0)+24|0;k[m>>2]=d}t=d+-24|0;k[x+4>>2]=t;k[y+4>>2]=t;o=k[H>>2]|0;l=k[u>>2]|0;h=(o|0)==(l|0);if(h)f=(k[H+4>>2]|0)!=(k[H+12>>2]|0);else f=1;m=k[I>>2]|0;n=k[I+8>>2]|0;j=(m|0)==(n|0);do if(j){e=k[I+4>>2]|0;d=(e|0)!=(k[I+12>>2]|0);if(!(d|f^1)){if((o|0)==(m|0)?(k[H+4>>2]|0)==(e|0):0){g=1;break}if((l|0)==(m|0)?(k[H+12>>2]|0)==(e|0):0)g=1;else v=36}else v=31}else{d=1;v=31}while(0);do if((v|0)==31)if(!(f|d^1)){if((m|0)==(o|0)?(k[I+4>>2]|0)==(k[H+4>>2]|0):0){g=1;break}if((n|0)==(o|0)?(k[I+12>>2]|0)==(k[H+4>>2]|0):0)g=1;else v=36}else v=36;while(0);if((v|0)==36){if(h)d=(k[H+4>>2]|0)!=(k[H+12>>2]|0);else d=1;if(j)e=(k[I+4>>2]|0)!=(k[I+12>>2]|0);else e=1;g=d^e^1}if(h)f=(k[H+4>>2]|0)!=(k[H+12>>2]|0);else f=1;do if(j){e=k[I+4>>2]|0;d=(e|0)!=(k[I+12>>2]|0);if(!(d|f^1)){if((o|0)==(m|0)?(k[H+4>>2]|0)==(e|0):0){d=0;break}if((l|0)==(m|0))d=(k[H+12>>2]|0)!=(e|0);else d=1}else v=49}else{d=1;v=49}while(0);do if((v|0)==49)if(!(f|d^1)){if((m|0)==(o|0)?(k[I+4>>2]|0)==(k[H+4>>2]|0):0){d=0;break}if((n|0)==(o|0))d=(k[I+12>>2]|0)!=(k[H+4>>2]|0);else d=1}else d=1;while(0);l=b+24|0;e=g&1;e=d?e|2:e;k[E>>2]=0;k[E+4>>2]=0;k[E+8>>2]=0;k[E+12>>2]=0;k[E+16>>2]=0;k[E+20>>2]=e;f=b+28|0;d=k[f>>2]|0;g=b+32|0;if(d>>>0<(k[g>>2]|0)>>>0){k[d>>2]=k[E>>2];k[d+4>>2]=k[E+4>>2];k[d+8>>2]=k[E+8>>2];k[d+12>>2]=k[E+12>>2];k[d+16>>2]=k[E+16>>2];k[d+20>>2]=k[E+20>>2];j=(k[f>>2]|0)+24|0;k[f>>2]=j}else{bd(l,E);j=k[f>>2]|0}h=j+-24|0;k[h>>2]=(k[b>>2]|0)+((k[H+16>>2]|0)*12|0);k[F>>2]=0;k[F+4>>2]=0;k[F+8>>2]=0;k[F+12>>2]=0;k[F+16>>2]=0;k[F+20>>2]=e;if(j>>>0<(k[g>>2]|0)>>>0){k[j>>2]=k[F>>2];k[j+4>>2]=k[F+4>>2];k[j+8>>2]=k[F+8>>2];k[j+12>>2]=k[F+12>>2];k[j+16>>2]=k[F+16>>2];k[j+20>>2]=k[F+20>>2];d=(k[f>>2]|0)+24|0;k[f>>2]=d}else{bd(l,F);d=k[f>>2]|0}v=d+-24|0;k[v>>2]=(k[b>>2]|0)+((k[I+16>>2]|0)*12|0);k[j+-16>>2]=v;k[d+-16>>2]=h;k[d+-20>>2]=t;k[x+16>>2]=h;k[j+-12>>2]=x;j=k[x+8>>2]|0;k[j+12>>2]=y;k[y+16>>2]=j;j=k[y+8>>2]|0;k[j+12>>2]=v;k[d+-8>>2]=j;k[w>>2]=h;j=a+64|0;d=k[B+4>>2]|0;if(!d){e=z;while(1){d=k[e+8>>2]|0;if((k[d>>2]|0)==(e|0))break;else e=d}}else while(1){e=k[d>>2]|0;if(!e)break;else d=e}if((k[j>>2]|0)==(B|0))k[j>>2]=d;e=a+72|0;k[e>>2]=(k[e>>2]|0)+-1;Mc(k[a+68>>2]|0,z);$d(A);e=k[G>>2]|0;g=k[e>>2]|0;h=a+40|0;d=k[h>>2]|0;f=d-e|0;if((f|0)>4){d=d+-4|0;k[e>>2]=k[d>>2];k[d>>2]=g;Lc(e,(f>>2)+-1|0,e);d=k[h>>2]|0}k[h>>2]=d+-4;B=g+4|0;A=k[g>>2]|0;k[A+4>>2]=k[B>>2];k[k[B>>2]>>2]=A;B=a+60|0;k[B>>2]=(k[B>>2]|0)+-1;$d(g);if((c|0)!=(k[j>>2]|0)){d=k[D>>2]|0;if(d){i[d+24>>0]=0;k[D>>2]=0}d=k[c>>2]|0;if(!d){e=c;while(1){d=k[e+8>>2]|0;if((k[d>>2]|0)==(e|0))e=d;else break}}else while(1){e=k[d+4>>2]|0;if(!e)break;else d=e}i[E+24>>0]=1;if(Nc(a+80|0,d+16|0,H,I,E)|0){k[F>>2]=k[E>>2];k[F+4>>2]=k[E+4>>2];k[F+8>>2]=k[E+8>>2];k[F+12>>2]=k[E+12>>2];k[F+16>>2]=k[E+16>>2];k[F+20>>2]=k[E+20>>2];k[F+24>>2]=k[E+24>>2];k[F+28>>2]=k[E+28>>2];k[F+32>>2]=C;C=Oc(G,F)|0;k[D>>2]=C}}d=k[c+4>>2]|0;if(!d)while(1){d=k[c+8>>2]|0;if((k[d>>2]|0)==(c|0)){c=d;break}else c=d}else{c=d;while(1){d=k[c>>2]|0;if(!d)break;else c=d}}if((c|0)==(a+68|0)){r=J;return}d=c+72|0;e=k[d>>2]|0;if(e){i[e+24>>0]=0;k[d>>2]=0}i[E+24>>0]=1;if(Nc(a+80|0,H,I,c+44|0,E)|0){k[F>>2]=k[E>>2];k[F+4>>2]=k[E+4>>2];k[F+8>>2]=k[E+8>>2];k[F+12>>2]=k[E+12>>2];k[F+16>>2]=k[E+16>>2];k[F+20>>2]=k[E+20>>2];k[F+24>>2]=k[E+24>>2];k[F+28>>2]=k[E+28>>2];k[F+32>>2]=c;a=Oc(G,F)|0;k[d>>2]=a}r=J;return}function Lc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0.0,h=0.0,i=0,j=0,l=0,m=0.0,n=0,o=0,q=0;d=c-a|0;if((b|0)<2)return;q=(b+-2|0)/2|0;if((q|0)<(d>>2|0))return;l=d>>1|1;f=a+(l<<2)|0;d=f;e=l+1|0;do if((e|0)<(b|0)){j=a+(e<<2)|0;f=k[f>>2]|0;i=k[j>>2]|0;g=+p[i+24>>3];h=+p[f+24>>3];if(g!=h){if(!(g<h)){e=l;break}}else if(!(+p[i+16>>3]<+p[f+16>>3])){e=l;break}d=j}else e=l;while(0);f=k[d>>2]|0;i=k[c>>2]|0;g=+p[i+24>>3];h=+p[f+24>>3];o=i;if(g!=h){if(g<h)return}else if(+p[i+16>>3]<+p[f+16>>3])return;n=i+16|0;k[c>>2]=k[d>>2];a:do if((q|0)>=(e|0)){m=+p[i+24>>3];while(1){e=e<<1|1;i=a+(e<<2)|0;f=i;c=e+1|0;do if((c|0)<(b|0)){l=a+(c<<2)|0;i=k[i>>2]|0;j=k[l>>2]|0;g=+p[j+24>>3];h=+p[i+24>>3];if(g!=h){if(!(g<h))break}else if(!(+p[j+16>>3]<+p[i+16>>3]))break;f=l;e=c}while(0);i=k[f>>2]|0;g=+p[i+24>>3];if(m!=g){if(m<g)break a}else if(+p[n>>3]<+p[i+16>>3])break a;k[d>>2]=k[f>>2];if((q|0)<(e|0)){d=f;break}else d=f}}while(0);k[d>>2]=o;return}function Mc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0;d=k[b>>2]|0;if(d){c=k[b+4>>2]|0;if(!c){e=b;c=b;h=6}else while(1){d=k[c>>2]|0;if(!d){h=4;break}else c=d}}else{c=b;h=4}if((h|0)==4){d=k[c+4>>2]|0;if(!d){l=c+8|0;e=c;d=0;m=0;j=c}else{e=c;h=6}}if((h|0)==6){l=e+8|0;k[d+8>>2]=k[l>>2];m=1;j=c}c=k[l>>2]|0;f=k[c>>2]|0;if((f|0)==(e|0)){k[c>>2]=d;if((e|0)==(a|0)){a=d;f=0}else f=k[c+4>>2]|0}else k[c+4>>2]=d;g=e+12|0;h=(i[g>>0]|0)!=0;if((e|0)!=(b|0)){o=b+8|0;c=k[o>>2]|0;k[l>>2]=c;if((k[k[o>>2]>>2]|0)==(b|0))k[c>>2]=e;else k[c+4>>2]=e;c=k[b>>2]|0;k[j>>2]=c;k[c+8>>2]=e;c=k[b+4>>2]|0;k[e+4>>2]=c;if(c)k[c+8>>2]=e;i[g>>0]=i[b+12>>0]|0;a=(a|0)==(b|0)?e:a}if(!(h&(a|0)!=0))return;if(m){i[d+12>>0]=1;return}else g=f;while(1){f=g+8|0;h=k[f>>2]|0;c=g+12|0;d=(i[c>>0]|0)!=0;if((k[h>>2]|0)==(g|0)){if(!d){i[c>>0]=1;i[h+12>>0]=0;e=g+4|0;c=k[e>>2]|0;k[h>>2]=c;if(c)k[c+8>>2]=h;d=h+8|0;k[f>>2]=k[d>>2];c=k[d>>2]|0;if((k[c>>2]|0)==(h|0))k[c>>2]=g;else k[c+4>>2]=g;k[e>>2]=h;k[d>>2]=g;a=(a|0)==(h|0)?g:a;g=k[h>>2]|0}e=k[g>>2]|0;f=(e|0)==0;if(!f?(i[e+12>>0]|0)==0:0){c=e;a=g;h=76;break}c=g+4|0;d=k[c>>2]|0;if((d|0)!=0?(i[d+12>>0]|0)==0:0){h=67;break}i[g+12>>0]=0;c=k[g+8>>2]|0;d=c+12|0;if((c|0)==(a|0)|(i[d>>0]|0)==0){h=64;break}o=k[c+8>>2]|0;c=(k[o>>2]|0)==(c|0)?o+4|0:o}else{if(d)f=g;else{i[c>>0]=1;i[h+12>>0]=0;o=h+4|0;e=k[o>>2]|0;c=k[e>>2]|0;k[o>>2]=c;if(c)k[c+8>>2]=h;c=h+8|0;k[e+8>>2]=k[c>>2];d=k[c>>2]|0;if((k[d>>2]|0)==(h|0))k[d>>2]=e;else k[d+4>>2]=e;k[e>>2]=h;k[c>>2]=e;f=k[g>>2]|0;a=(a|0)==(f|0)?g:a;f=k[f+4>>2]|0}c=k[f>>2]|0;if((c|0)!=0?(n=c+12|0,(i[n>>0]|0)==0):0){h=37;break}c=k[f+4>>2]|0;if((c|0)!=0?(i[c+12>>0]|0)==0:0){a=c;c=f;h=46;break}i[f+12>>0]=0;c=k[f+8>>2]|0;if((c|0)==(a|0)){h=35;break}if(!(i[c+12>>0]|0)){a=c;h=35;break}o=k[c+8>>2]|0;c=(k[o>>2]|0)==(c|0)?o+4|0:o}g=k[c>>2]|0}do if((h|0)==35){i[a+12>>0]=1;return}else if((h|0)==37){a=k[f+4>>2]|0;if(!a)a=n;else{if(!(i[a+12>>0]|0)){c=f;h=46;break}a=c+12|0}i[a>>0]=1;i[f+12>>0]=0;e=c+4|0;a=k[e>>2]|0;k[f>>2]=a;if(a)k[a+8>>2]=f;a=f+8|0;k[c+8>>2]=k[a>>2];d=k[a>>2]|0;if((k[d>>2]|0)==(f|0))k[d>>2]=c;else k[d+4>>2]=c;k[e>>2]=f;k[a>>2]=c;a=f;h=46}else if((h|0)==64){i[d>>0]=1;return}else if((h|0)==67){if(!f){if(!(i[e+12>>0]|0)){c=e;a=g;h=76;break}d=g+4|0;c=d;d=k[d>>2]|0}i[d+12>>0]=1;i[g+12>>0]=0;a=k[d>>2]|0;k[c>>2]=a;if(a)k[a+8>>2]=g;a=g+8|0;k[d+8>>2]=k[a>>2];c=k[a>>2]|0;if((k[c>>2]|0)==(g|0))k[c>>2]=d;else k[c+4>>2]=d;k[d>>2]=g;k[a>>2]=d;c=g;a=d;h=76}while(0);if((h|0)==46){e=k[c+8>>2]|0;o=e+12|0;i[c+12>>0]=i[o>>0]|0;i[o>>0]=1;i[a+12>>0]=1;o=e+4|0;d=k[o>>2]|0;a=k[d>>2]|0;k[o>>2]=a;if(a)k[a+8>>2]=e;a=e+8|0;k[d+8>>2]=k[a>>2];c=k[a>>2]|0;if((k[c>>2]|0)==(e|0))k[c>>2]=d;else k[c+4>>2]=d;k[d>>2]=e;k[a>>2]=d;return}else if((h|0)==76){f=k[a+8>>2]|0;d=f+12|0;i[a+12>>0]=i[d>>0]|0;i[d>>0]=1;i[c+12>>0]=1;d=k[f>>2]|0;e=d+4|0;a=k[e>>2]|0;k[f>>2]=a;if(a)k[a+8>>2]=f;a=f+8|0;k[d+8>>2]=k[a>>2];c=k[a>>2]|0;if((k[c>>2]|0)==(f|0))k[c>>2]=d;else k[c+4>>2]=d;k[e>>2]=f;k[a>>2]=d;return}}function Nc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0.0,n=0.0,o=0.0,q=0.0,s=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,M=0,N=0.0,O=0.0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0.0,ia=0,ja=0.0,ka=0.0,la=0,ma=0.0,na=0.0,oa=0.0,pa=0.0,qa=0.0,ra=0.0,sa=0.0,ta=0.0,ua=0.0,va=0.0,wa=0.0,xa=0.0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0;gb=r;r=r+11200|0;Na=gb+10416|0;Oa=gb+9376|0;Ma=gb+8336|0;Ea=gb+8072|0;Fa=gb+7812|0;Xa=gb+7552|0;Ga=gb+7292|0;Ha=gb+7032|0;Ya=gb+6772|0;Ia=gb+792|0;Ja=gb+6512|0;Za=gb+6252|0;Ka=gb+5992|0;La=gb+528|0;Wa=gb+5732|0;Pa=gb+5472|0;Qa=gb+5212|0;Ra=gb+4952|0;Sa=gb+4692|0;Ua=gb+264|0;Va=gb;_a=gb+3912|0;Ta=gb+3132|0;Z=gb+2872|0;_=gb+2612|0;$=gb+2352|0;aa=gb+2092|0;ca=gb+1832|0;ba=gb+1572|0;fa=gb+1312|0;ga=gb+1052|0;U=k[b>>2]|0;$a=b+8|0;T=k[$a>>2]|0;if((U|0)==(T|0))f=(k[b+4>>2]|0)!=(k[b+12>>2]|0);else f=1;V=k[c>>2]|0;cb=c+8|0;S=k[cb>>2]|0;if((V|0)==(S|0))g=(k[c+4>>2]|0)!=(k[c+12>>2]|0);else g=1;ea=k[d>>2]|0;fb=d+8|0;da=k[fb>>2]|0;if((ea|0)==(da|0))h=(k[d+4>>2]|0)!=(k[d+12>>2]|0);else h=1;do if(!f){if(g){if(h)if((k[c+16>>2]|0)==(k[d+16>>2]|0)){e=0;r=gb;return e|0}else{Rc(a+4|0,b,c,d,1,e);break}if(((V|0)==(U|0)?((S|0)==(ea|0)?(k[c+4>>2]|0)==(k[b+4>>2]|0):0):0)?(k[c+12>>2]|0)==(k[d+4>>2]|0):0){e=0;r=gb;return e|0}Qc(a+4|0,b,d,c,2,e);break}D=b+4|0;f=k[D>>2]|0;G=c+4|0;j=k[G>>2]|0;P=d+4|0;l=k[P>>2]|0;g=Pc(U,f,V,j,ea,l)|0;if(h){f=Pc(U,f,V,j,da,k[d+12>>2]|0)|0;if((V|0)<(U|0)){if((g|0)!=-1&(f|0)!=-1){e=0;r=gb;return e|0}}else if((f|0)!=-1){e=0;r=gb;return e|0}Qc(a+4|0,b,c,d,3,e);break}if((g|0)!=-1){e=0;r=gb;return e|0}v=+(U|0);w=+(V|0);O=v-w;q=+(ea|0);ha=w-q;s=+(f|0);n=+(j|0);ja=s-n;u=+(l|0);ka=n-u;Ba=((V|0)<0)<<31>>31;g=be(U|0,((U|0)<0)<<31>>31|0,V|0,Ba|0)|0;Ca=L;Ba=be(V|0,Ba|0,ea|0,((ea|0)<0)<<31>>31|0)|0;h=L;da=((j|0)<0)<<31>>31;za=be(f|0,((f|0)<0)<<31>>31|0,j|0,da|0)|0;Aa=L;da=be(j|0,da|0,l|0,((l|0)<0)<<31>>31|0)|0;ea=L;Da=(Ca|0)<0;la=be(0,0,g|0,Ca|0)|0;f=Da?L:Ca;Ca=(h|0)<0;j=be(0,0,Ba|0,h|0)|0;h=Ca?L:h;l=(Aa|0)<0;ya=be(0,0,za|0,Aa|0)|0;Aa=l?L:Aa;a=(ea|0)<0;Y=be(0,0,da|0,ea|0)|0;f=ne((a?Y:da)|0,(a?L:ea)|0,(Da?la:g)|0,f|0)|0;g=L;h=ne((l?ya:za)|0,Aa|0,(Ca?j:Ba)|0,h|0)|0;j=L;l=Ca^l;do if(Da^a){if(!l){a=ge(f|0,g|0,h|0,j|0)|0;m=-(+(a>>>0)+4294967296.0*+(L>>>0));break}if(g>>>0>j>>>0|(g|0)==(j|0)&f>>>0>h>>>0){a=be(f|0,g|0,h|0,j|0)|0;m=-(+(a>>>0)+4294967296.0*+(L>>>0));break}else{a=be(h|0,j|0,f|0,g|0)|0;m=+(a>>>0)+4294967296.0*+(L>>>0);break}}else{if(l){a=ge(f|0,g|0,h|0,j|0)|0;m=+(a>>>0)+4294967296.0*+(L>>>0);break}if(g>>>0<j>>>0|(g|0)==(j|0)&f>>>0<h>>>0){a=be(h|0,j|0,f|0,g|0)|0;m=-(+(a>>>0)+4294967296.0*+(L>>>0));break}else{a=be(f|0,g|0,h|0,j|0)|0;m=+(a>>>0)+4294967296.0*+(L>>>0);break}}while(0);ma=.5/m;x=w+q;o=s+n;y=n+u;C=v-q;B=s-u;z=O*(v+w);m=ka*z;if(m<0.0){n=0.0-m;if(m>0.0){m=(m*2.0+0.0)/n;m=m<0.0?-m:m}else m=2.0;u=0.0;v=0.0;q=m+1.0}else{u=m+0.0;v=3.0;n=0.0;q=0.0}A=ja*o;m=ka*A;do if(m<0.0){o=n-m;if(m>0.0|n<0.0){m=(m*2.0+n*q)/o;m=m<0.0?-m:m}else m=q<2.0?2.0:q;n=o;q=m+1.0}else{o=m+u;if(u<0.0?m>0.0|u>0.0:0){v=(u*v-m*2.0)/o;u=o;v=(v<0.0?-v:v)+1.0;break}u=o;v=v<2.0?3.0:v+1.0}while(0);w=ha*x;o=ja*w;do if(o<0.0){s=u-o;if(o>0.0|u<0.0){m=(o*2.0+u*v)/s;m=m<0.0?-m:m}else m=v<2.0?2.0:v;v=m+1.0}else{m=o+n;if(n<0.0?o>0.0|n>0.0:0){q=(n*q-o*2.0)/m;n=m;q=(q<0.0?-q:q)+1.0;s=u;break}n=m;q=q<2.0?3.0:q+1.0;s=u}while(0);y=ka*y;o=ja*y;do if(o<0.0){u=s-o;if(o>0.0|s<0.0){m=(o*2.0+s*v)/u;m=m<0.0?-m:m}else m=v<2.0?2.0:v;N=n;s=u;v=m+1.0}else{m=o+n;if(n<0.0?o>0.0|n>0.0:0){q=(n*q-o*2.0)/m;N=m;q=(q<0.0?-q:q)+1.0;break}N=m;q=q<2.0?3.0:q+1.0}while(0);m=O*w;if(m<0.0){n=0.0-m;if(m>0.0){m=(m*2.0+0.0)/n;m=m<0.0?-m:m}else m=2.0;x=0.0;w=0.0;u=m+1.0}else{x=m+0.0;w=3.0;n=0.0;u=0.0}m=O*y;do if(m<0.0){o=n-m;if(m>0.0|n<0.0){m=(m*2.0+n*u)/o;m=m<0.0?-m:m}else m=u<2.0?2.0:u;n=o;y=m+1.0}else{o=m+x;if(x<0.0?m>0.0|x>0.0:0){w=(x*w-m*2.0)/o;y=u;x=o;w=(w<0.0?-w:w)+1.0;break}y=u;x=o;w=w<2.0?3.0:w+1.0}while(0);o=ha*z;do if(o<0.0){u=x-o;if(o>0.0|x<0.0){m=(o*2.0+x*w)/u;m=m<0.0?-m:m}else m=w<2.0?2.0:w;z=n;w=m+1.0}else{m=o+n;if(n<0.0?o>0.0|n>0.0:0){y=(n*y-o*2.0)/m;z=m;y=(y<0.0?-y:y)+1.0;u=x;break}z=m;y=y<2.0?3.0:y+1.0;u=x}while(0);n=ha*A;a:do if(n<0.0){o=u-n;if(n>0.0|u<0.0){m=(n*2.0+u*w)/o;m=m<0.0?-m:m}else m=w<2.0?2.0:w;w=m+1.0}else{m=n+z;do if(z<0.0){if(!(n>0.0|z>0.0))break;y=(z*y-n*2.0)/m;z=m;o=u;y=(y<0.0?-y:y)+1.0;break a}while(0);z=m;o=u;y=y<2.0?3.0:y+1.0}while(0);n=+X(+((O*O+ja*ja)*(ha*ha+ka*ka)*(C*C+B*B)));b:do if(n<0.0){m=s-n;if(s<0.0|n>0.0){n=(s*v+n*5.0)/m;n=n<0.0?-n:n}else n=v<5.0?5.0:v;C=N;A=m;B=q;x=n+1.0}else{m=N+n;do if(N<0.0){if(!(N>0.0|n>0.0))break;B=(N*q-n*5.0)/m;C=m;A=s;B=(B<0.0?-B:B)+1.0;x=v;break b}while(0);C=m;A=s;B=q<5.0?6.0:q+1.0;x=v}while(0);m=s-N;n=o-z;f=o<0.0|z>0.0;u=A-C;g=C>0.0|A<0.0;p[e>>3]=ma*m;Y=e+8|0;p[Y>>3]=ma*n;W=e+16|0;p[W>>3]=ma*u;i[e+24>>0]=1;do if(s<0.0|N>0.0){if(!(s>0.0|N<0.0)){ia=97;break}m=(s*v+N*q)/m;if(!(m<0.0))break;m=-m}else ia=97;while(0);if((ia|0)==97)m=v<q?q:v;T=m+1.0>64.0;do if(f){if(!(o>0.0|z<0.0)){ia=102;break}m=(o*w+z*y)/n;if(!(m<0.0))break;m=-m}else ia=102;while(0);if((ia|0)==102)m=w<y?y:w;V=m+1.0>64.0;do if(g){if(!(C<0.0|A>0.0)){ia=107;break}m=(B*C+x*A)/u;if(!(m<0.0))break;m=-m}else ia=107;while(0);if((ia|0)==107)m=x<B?B:x;S=m+1.0>64.0;if(!(T|V|S))break;E=k[b>>2]|0;F=((E|0)<0)<<31>>31;K=k[c>>2]|0;M=((K|0)<0)<<31>>31;f=be(E|0,F|0,K|0,M|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;a=L;k[_a>>2]=Da;k[_a+4>>2]=a;k[_a+256>>2]=(a|0)!=0?-2:-1;break}else{k[_a+256>>2]=0;break}else{k[_a>>2]=f;k[_a+4>>2]=g;k[_a+256>>2]=(g|0)!=0?2:1}while(0);U=_a+260|0;I=k[d>>2]|0;J=((I|0)<0)<<31>>31;f=be(K|0,M|0,I|0,J|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;a=L;k[U>>2]=Da;k[_a+264>>2]=a;k[_a+516>>2]=(a|0)!=0?-2:-1;break}else{k[_a+516>>2]=0;break}else{k[U>>2]=f;k[_a+264>>2]=g;k[_a+516>>2]=(g|0)!=0?2:1}while(0);R=_a+520|0;f=be(E|0,F|0,I|0,J|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;a=L;k[R>>2]=Da;k[_a+524>>2]=a;k[_a+776>>2]=(a|0)!=0?-2:-1;break}else{k[_a+776>>2]=0;break}else{k[R>>2]=f;k[_a+524>>2]=g;k[_a+776>>2]=(g|0)!=0?2:1}while(0);j=k[D>>2]|0;D=((j|0)<0)<<31>>31;G=k[G>>2]|0;H=((G|0)<0)<<31>>31;f=be(j|0,D|0,G|0,H|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;a=L;k[Ta>>2]=Da;k[Ta+4>>2]=a;k[Ta+256>>2]=(a|0)!=0?-2:-1;break}else{k[Ta+256>>2]=0;break}else{k[Ta>>2]=f;k[Ta+4>>2]=g;k[Ta+256>>2]=(g|0)!=0?2:1}while(0);Q=Ta+260|0;h=k[P>>2]|0;l=((h|0)<0)<<31>>31;f=be(G|0,H|0,h|0,l|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;a=L;k[Q>>2]=Da;k[Ta+264>>2]=a;k[Ta+516>>2]=(a|0)!=0?-2:-1;break}else{k[Ta+516>>2]=0;break}else{k[Q>>2]=f;k[Ta+264>>2]=g;k[Ta+516>>2]=(g|0)!=0?2:1}while(0);P=Ta+520|0;f=be(j|0,D|0,h|0,l|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;a=L;k[P>>2]=Da;k[Ta+524>>2]=a;k[Ta+776>>2]=(a|0)!=0?-2:-1;break}else{k[Ta+776>>2]=0;break}else{k[P>>2]=f;k[Ta+524>>2]=g;k[Ta+776>>2]=(g|0)!=0?2:1}while(0);f=ge(K|0,M|0,E|0,F|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;a=L;k[Na>>2]=Da;k[Na+4>>2]=a;k[Na+256>>2]=(a|0)!=0?-2:-1;break}else{k[Na+256>>2]=0;break}else{k[Na>>2]=f;k[Na+4>>2]=g;k[Na+256>>2]=(g|0)!=0?2:1}while(0);E=Na+260|0;f=ge(I|0,J|0,K|0,M|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;a=L;k[E>>2]=Da;k[Na+264>>2]=a;k[Na+516>>2]=(a|0)!=0?-2:-1;break}else{k[Na+516>>2]=0;break}else{k[E>>2]=f;k[Na+264>>2]=g;k[Na+516>>2]=(g|0)!=0?2:1}while(0);f=ge(G|0,H|0,j|0,D|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;a=L;k[Oa>>2]=Da;k[Oa+4>>2]=a;k[Oa+256>>2]=(a|0)!=0?-2:-1;break}else{k[Oa+256>>2]=0;break}else{k[Oa>>2]=f;k[Oa+4>>2]=g;k[Oa+256>>2]=(g|0)!=0?2:1}while(0);j=Oa+260|0;f=ge(h|0,l|0,G|0,H|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;a=L;k[j>>2]=Da;k[Oa+264>>2]=a;k[Oa+516>>2]=(a|0)!=0?-2:-1;break}else{k[Oa+516>>2]=0;break}else{k[j>>2]=f;k[Oa+264>>2]=g;k[Oa+516>>2]=(g|0)!=0?2:1}while(0);Sc(Ea,_a,Q);Sc(Fa,U,Ta);Uc(Ma,Ea,Fa);g=k[Ma+256>>2]|0;f=(g|0)>-1?g:0-g|0;c:do switch(f|0){case 0:{f=0;m=0.0;break}case 1:{m=+((k[Ma>>2]|0)>>>0);ia=164;break}case 2:{m=+((k[Ma+4>>2]|0)>>>0)*4294967296.0+ +((k[Ma>>2]|0)>>>0);ia=164;break}default:{m=+((k[Ma+(f+-3<<2)>>2]|0)>>>0)+(+((k[Ma+(f+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Ma+(f+-2<<2)>>2]|0)>>>0))*4294967296.0;h=f<<5;f=h+-96|0;m=(g|0)<0?-m:m;if((f|0)>1023){m=m*89884656743115795.0e291;f=h+-1119|0;if((f|0)<=1023)break c;f=h+-2142|0;f=(f|0)>1023?1023:f;m=m*89884656743115795.0e291;break c}if((f|0)>=-1022)break c;m=m*2.2250738585072014e-308;f=h+926|0;if((f|0)>=-1022)break c;f=h+1948|0;f=(f|0)<-1022?-1022:f;m=m*2.2250738585072014e-308}}while(0);if((ia|0)==164){f=0;m=(g|0)<0?-m:m}Fa=ee(f+1023|0,0,52)|0;Ma=L;k[t>>2]=Fa;k[t+4>>2]=Ma;q=.5/(m*+p[t>>3]);Sc(Ga,_a,Na);Sc(Ha,Ta,Oa);Tc(Xa,Ga,Ha);Sc(Ia,U,E);Sc(Ja,Q,j);Tc(Ya,Ia,Ja);if(T|S){Sc(Ka,Xa,Q);Sc(La,Ya,Ta);Uc(Za,Ka,La);j=Za+256|0;g=k[j>>2]|0;f=(g|0)>-1?g:0-g|0;d:do switch(f|0){case 0:{f=0;m=0.0;break}case 1:{m=+((k[Za>>2]|0)>>>0);ia=175;break}case 2:{m=+((k[Za+4>>2]|0)>>>0)*4294967296.0+ +((k[Za>>2]|0)>>>0);ia=175;break}default:{m=+((k[Za+(f+-3<<2)>>2]|0)>>>0)+(+((k[Za+(f+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Za+(f+-2<<2)>>2]|0)>>>0))*4294967296.0;h=f<<5;f=h+-96|0;m=(g|0)<0?-m:m;if((f|0)>1023){m=m*89884656743115795.0e291;f=h+-1119|0;if((f|0)<=1023)break d;f=h+-2142|0;f=(f|0)>1023?1023:f;m=m*89884656743115795.0e291;break d}if((f|0)>=-1022)break d;m=m*2.2250738585072014e-308;f=h+926|0;if((f|0)>=-1022)break d;f=h+1948|0;f=(f|0)<-1022?-1022:f;m=m*2.2250738585072014e-308}}while(0);if((ia|0)==175){f=0;m=(g|0)<0?-m:m}Na=ee(f+1023|0,0,52)|0;Oa=L;k[t>>2]=Na;k[t+4>>2]=Oa;p[e>>3]=q*(m*+p[t>>3]);if(S){Sc(Pa,_a,_a);Sc(Qa,Ta,Ta);Tc(Ra,Pa,Qa);Sc(Ua,U,U);Sc(Va,Q,Q);Tc(Sa,Ua,Va);Sc(Z,Ra,Sa);Sc($,R,R);Sc(aa,P,P);Tc(_,$,aa);Sc(Wa,Z,_);g=k[Wa+256>>2]|0;f=(g|0)>-1?g:0-g|0;e:do switch(f|0){case 0:{f=0;m=0.0;break}case 1:{m=+((k[Wa>>2]|0)>>>0);ia=186;break}case 2:{m=+((k[Wa+4>>2]|0)>>>0)*4294967296.0+ +((k[Wa>>2]|0)>>>0);ia=186;break}default:{m=+((k[Wa+(f+-3<<2)>>2]|0)>>>0)+(+((k[Wa+(f+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Wa+(f+-2<<2)>>2]|0)>>>0))*4294967296.0;h=f<<5;f=h+-96|0;m=(g|0)<0?-m:m;if((f|0)>1023){m=m*89884656743115795.0e291;f=h+-1119|0;if((f|0)<=1023)break e;f=h+-2142|0;f=(f|0)>1023?1023:f;m=m*89884656743115795.0e291;break e}if((f|0)>=-1022)break e;m=m*2.2250738585072014e-308;f=h+926|0;if((f|0)>=-1022)break e;f=h+1948|0;f=(f|0)<-1022?-1022:f;m=m*2.2250738585072014e-308}}while(0);if((ia|0)==186){f=0;m=(g|0)<0?-m:m}Ua=ee(f+1023|0,0,52)|0;Va=L;k[t>>2]=Ua;k[t+4>>2]=Va;o=+X(+(m*+p[t>>3]));n=+p[e>>3];do if(!(n<0.0)){m=q*o;if(q<0.0){p[W>>3]=n-m;break}else{p[W>>3]=n+m;break}}else{Sc(ba,Za,Za);Uc(ca,ba,Wa);g=k[ca+256>>2]|0;f=(g|0)>-1?g:0-g|0;f:do switch(f|0){case 0:{f=0;m=0.0;break}case 1:{m=+((k[ca>>2]|0)>>>0);ia=200;break}case 2:{m=+((k[ca+4>>2]|0)>>>0)*4294967296.0+ +((k[ca>>2]|0)>>>0);ia=200;break}default:{m=+((k[ca+(f+-3<<2)>>2]|0)>>>0)+(+((k[ca+(f+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[ca+(f+-2<<2)>>2]|0)>>>0))*4294967296.0;h=f<<5;f=h+-96|0;m=(g|0)<0?-m:m;if((f|0)>1023){m=m*89884656743115795.0e291;f=h+-1119|0;if((f|0)<=1023)break f;f=h+-2142|0;f=(f|0)>1023?1023:f;m=m*89884656743115795.0e291;break f}if((f|0)>=-1022)break f;m=m*2.2250738585072014e-308;f=h+926|0;if((f|0)>=-1022)break f;f=h+1948|0;f=(f|0)<-1022?-1022:f;m=m*2.2250738585072014e-308}}while(0);if((ia|0)==200){f=0;m=(g|0)<0?-m:m}f=ee(f+1023|0,0,52)|0;g=L;k[t>>2]=f;k[t+4>>2]=g;n=q*(m*+p[t>>3]);g=k[j>>2]|0;f=(g|0)>-1?g:0-g|0;g:do switch(f|0){case 0:{f=0;m=0.0;break}case 1:{m=+((k[Za>>2]|0)>>>0);ia=210;break}case 2:{m=+((k[Za+4>>2]|0)>>>0)*4294967296.0+ +((k[Za>>2]|0)>>>0);ia=210;break}default:{m=+((k[Za+(f+-3<<2)>>2]|0)>>>0)+(+((k[Za+(f+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Za+(f+-2<<2)>>2]|0)>>>0))*4294967296.0;h=f<<5;f=h+-96|0;m=(g|0)<0?-m:m;if((f|0)>1023){m=m*89884656743115795.0e291;f=h+-1119|0;if((f|0)<=1023)break g;f=h+-2142|0;f=(f|0)>1023?1023:f;m=m*89884656743115795.0e291;break g}if((f|0)>=-1022)break g;m=m*2.2250738585072014e-308;f=h+926|0;if((f|0)>=-1022)break g;f=h+1948|0;f=(f|0)<-1022?-1022:f;m=m*2.2250738585072014e-308}}while(0);if((ia|0)==210){f=0;m=(g|0)<0?-m:m}Va=ee(f+1023|0,0,52)|0;Wa=L;k[t>>2]=Va;k[t+4>>2]=Wa;p[W>>3]=n/(o+m*+p[t>>3])}while(0)}}if(V){Sc(fa,Ya,_a);Sc(ga,Xa,U);Uc(Za,fa,ga);g=k[Za+256>>2]|0;f=(g|0)>-1?g:0-g|0;h:do switch(f|0){case 0:{f=0;m=0.0;break}case 1:{m=+((k[Za>>2]|0)>>>0);ia=224;break}case 2:{m=+((k[Za+4>>2]|0)>>>0)*4294967296.0+ +((k[Za>>2]|0)>>>0);ia=224;break}default:{m=+((k[Za+(f+-3<<2)>>2]|0)>>>0)+(+((k[Za+(f+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Za+(f+-2<<2)>>2]|0)>>>0))*4294967296.0;h=f<<5;f=h+-96|0;m=(g|0)<0?-m:m;if((f|0)>1023){m=m*89884656743115795.0e291;f=h+-1119|0;if((f|0)<=1023)break h;f=h+-2142|0;f=(f|0)>1023?1023:f;m=m*89884656743115795.0e291;break h}if((f|0)>=-1022)break h;m=m*2.2250738585072014e-308;f=h+926|0;if((f|0)>=-1022)break h;f=h+1948|0;f=(f|0)<-1022?-1022:f;m=m*2.2250738585072014e-308}}while(0);if((ia|0)==224){f=0;m=(g|0)<0?-m:m}Za=ee(f+1023|0,0,52)|0;_a=L;k[t>>2]=Za;k[t+4>>2]=_a;p[Y>>3]=q*(m*+p[t>>3])}}else{if(!g){if(!h){g=k[c+4>>2]|0;h=k[d+4>>2]|0;f=Pc(V,g,ea,h,U,k[b+4>>2]|0)|0;if((V|0)<(ea|0)){if((f|0)!=-1&(Pc(V,g,ea,h,T,k[b+12>>2]|0)|0)!=-1){e=0;r=gb;return e|0}}else if((f|0)!=-1){e=0;r=gb;return e|0}Qc(a+4|0,c,d,b,1,e);break}if((k[b+16>>2]|0)==(k[d+16>>2]|0)){e=0;r=gb;return e|0}f=(k[d+24>>2]&32|0)==0;if(!(k[b+24>>2]&32))if(f)ia=254;else{e=0;r=gb;return e|0}else if(!f)ia=254;if((ia|0)==254?(Pc(U,k[b+4>>2]|0,V,k[c+4>>2]|0,da,k[d+12>>2]|0)|0)!=-1:0){e=0;r=gb;return e|0}Rc(a+4|0,c,b,d,2,e);break}f=k[b+16>>2]|0;g=k[c+16>>2]|0;if(!h)if((f|0)==(g|0)){e=0;r=gb;return e|0}else{Rc(a+4|0,d,b,c,3,e);break}if(!((f|0)!=(g|0)?(g|0)!=(k[d+16>>2]|0):0)){e=0;r=gb;return e|0}O=+(T|0)-+(U|0);ya=b+12|0;J=k[ya>>2]|0;za=b+4|0;K=k[za>>2]|0;xa=+(J|0)-+(K|0);M=((U|0)<0)<<31>>31;P=((K|0)<0)<<31>>31;Q=((T|0)<0)<<31>>31;R=((J|0)<0)<<31>>31;Ca=(U|0)<0;g=be(0,0,U|0,M|0)|0;f=Ca?L:M;l=(K|0)<0;la=be(0,0,K|0,P|0)|0;Aa=l?L:P;Ba=(T|0)<0;j=be(0,0,T|0,Q|0)|0;h=Ba?L:Q;Da=(J|0)<0;ga=be(0,0,J|0,R|0)|0;f=ne((Da?ga:J)|0,(Da?L:R)|0,(Ca?g:U)|0,f|0)|0;g=L;h=ne((l?la:K)|0,Aa|0,(Ba?j:T)|0,h|0)|0;j=L;l=Ba^l;do if(Ca^Da){if(!l){Da=ge(h|0,j|0,f|0,g|0)|0;wa=-(+(Da>>>0)+4294967296.0*+(L>>>0));break}if(g>>>0>j>>>0|(g|0)==(j|0)&f>>>0>h>>>0){Da=be(f|0,g|0,h|0,j|0)|0;wa=-(+(Da>>>0)+4294967296.0*+(L>>>0));break}else{Da=be(h|0,j|0,f|0,g|0)|0;wa=+(Da>>>0)+4294967296.0*+(L>>>0);break}}else{if(l){Da=ge(h|0,j|0,f|0,g|0)|0;wa=+(Da>>>0)+4294967296.0*+(L>>>0);break}if(g>>>0<j>>>0|(g|0)==(j|0)&f>>>0<h>>>0){Da=be(h|0,j|0,f|0,g|0)|0;wa=-(+(Da>>>0)+4294967296.0*+(L>>>0));break}else{Da=be(f|0,g|0,h|0,j|0)|0;wa=+(Da>>>0)+4294967296.0*+(L>>>0);break}}while(0);B=+(S|0)-+(V|0);Aa=c+12|0;D=k[Aa>>2]|0;Ba=c+4|0;E=k[Ba>>2]|0;ra=+(D|0)-+(E|0);F=((V|0)<0)<<31>>31;G=((E|0)<0)<<31>>31;H=((S|0)<0)<<31>>31;I=((D|0)<0)<<31>>31;Ca=(V|0)<0;g=be(0,0,V|0,F|0)|0;f=Ca?L:F;l=(E|0)<0;fa=be(0,0,E|0,G|0)|0;ga=l?L:G;la=(S|0)<0;j=be(0,0,S|0,H|0)|0;h=la?L:H;Da=(D|0)<0;ca=be(0,0,D|0,I|0)|0;f=ne((Da?ca:D)|0,(Da?L:I)|0,(Ca?g:V)|0,f|0)|0;g=L;h=ne((l?fa:E)|0,ga|0,(la?j:S)|0,h|0)|0;j=L;l=la^l;do if(Ca^Da){if(!l){Da=ge(h|0,j|0,f|0,g|0)|0;sa=-(+(Da>>>0)+4294967296.0*+(L>>>0));break}if(g>>>0>j>>>0|(g|0)==(j|0)&f>>>0>h>>>0){Da=be(f|0,g|0,h|0,j|0)|0;sa=-(+(Da>>>0)+4294967296.0*+(L>>>0));break}else{Da=be(h|0,j|0,f|0,g|0)|0;sa=+(Da>>>0)+4294967296.0*+(L>>>0);break}}else{if(l){Da=ge(h|0,j|0,f|0,g|0)|0;sa=+(Da>>>0)+4294967296.0*+(L>>>0);break}if(g>>>0<j>>>0|(g|0)==(j|0)&f>>>0<h>>>0){Da=be(h|0,j|0,f|0,g|0)|0;sa=-(+(Da>>>0)+4294967296.0*+(L>>>0));break}else{Da=be(f|0,g|0,h|0,j|0)|0;sa=+(Da>>>0)+4294967296.0*+(L>>>0);break}}while(0);C=+(da|0)-+(ea|0);Ca=d+12|0;Z=k[Ca>>2]|0;Da=d+4|0;_=k[Da>>2]|0;ta=+(Z|0)-+(_|0);$=((ea|0)<0)<<31>>31;aa=((_|0)<0)<<31>>31;ba=((da|0)<0)<<31>>31;ca=((Z|0)<0)<<31>>31;ga=(ea|0)<0;g=be(0,0,ea|0,$|0)|0;f=ga?L:$;l=(_|0)<0;W=be(0,0,_|0,aa|0)|0;Y=l?L:aa;fa=(da|0)<0;j=be(0,0,da|0,ba|0)|0;h=fa?L:ba;la=(Z|0)<0;hb=be(0,0,Z|0,ca|0)|0;f=ne((la?hb:Z)|0,(la?L:ca)|0,(ga?g:ea)|0,f|0)|0;g=L;h=ne((l?W:_)|0,Y|0,(fa?j:da)|0,h|0)|0;j=L;l=fa^l;do if(ga^la){if(!l){hb=ge(h|0,j|0,f|0,g|0)|0;ua=-(+(hb>>>0)+4294967296.0*+(L>>>0));break}if(g>>>0>j>>>0|(g|0)==(j|0)&f>>>0>h>>>0){hb=be(f|0,g|0,h|0,j|0)|0;ua=-(+(hb>>>0)+4294967296.0*+(L>>>0));break}else{hb=be(h|0,j|0,f|0,g|0)|0;ua=+(hb>>>0)+4294967296.0*+(L>>>0);break}}else{if(l){hb=ge(h|0,j|0,f|0,g|0)|0;ua=+(hb>>>0)+4294967296.0*+(L>>>0);break}if(g>>>0<j>>>0|(g|0)==(j|0)&f>>>0<h>>>0){hb=be(h|0,j|0,f|0,g|0)|0;ua=-(+(hb>>>0)+4294967296.0*+(L>>>0));break}else{hb=be(f|0,g|0,h|0,j|0)|0;ua=+(hb>>>0)+4294967296.0*+(L>>>0);break}}while(0);qa=+X(+(O*O+xa*xa));va=+X(+(B*B+ra*ra));pa=+X(+(C*C+ta*ta));U=be(T|0,Q|0,U|0,M|0)|0;Y=L;R=be(J|0,R|0,K|0,P|0)|0;T=L;J=be(S|0,H|0,V|0,F|0)|0;K=L;M=be(D|0,I|0,E|0,G|0)|0;P=L;W=(Y|0)<0;V=be(0,0,U|0,Y|0)|0;U=W?V:U;V=W?L:Y;Y=(T|0)<0;S=be(0,0,R|0,T|0)|0;S=Y?S:R;T=Y?L:T;R=(K|0)<0;Q=be(0,0,J|0,K|0)|0;J=R?Q:J;K=R?L:K;Q=(P|0)<0;f=be(0,0,M|0,P|0)|0;M=Q?f:M;P=Q?L:P;f=ne(M|0,P|0,U|0,V|0)|0;g=L;h=ne(J|0,K|0,S|0,T|0)|0;j=L;l=Y^R;do if(W^Q){if(!l){hb=ge(f|0,g|0,h|0,j|0)|0;w=-(+(hb>>>0)+4294967296.0*+(L>>>0));break}if(g>>>0>j>>>0|(g|0)==(j|0)&f>>>0>h>>>0){hb=be(f|0,g|0,h|0,j|0)|0;w=-(+(hb>>>0)+4294967296.0*+(L>>>0));break}else{hb=be(h|0,j|0,f|0,g|0)|0;w=+(hb>>>0)+4294967296.0*+(L>>>0);break}}else{if(l){hb=ge(f|0,g|0,h|0,j|0)|0;w=+(hb>>>0)+4294967296.0*+(L>>>0);break}if(g>>>0<j>>>0|(g|0)==(j|0)&f>>>0<h>>>0){hb=be(h|0,j|0,f|0,g|0)|0;w=-(+(hb>>>0)+4294967296.0*+(L>>>0));break}else{hb=be(f|0,g|0,h|0,j|0)|0;w=+(hb>>>0)+4294967296.0*+(L>>>0);break}}while(0);D=be(da|0,ba|0,ea|0,$|0)|0;E=L;F=be(Z|0,ca|0,_|0,aa|0)|0;G=L;I=(E|0)<0;H=be(0,0,D|0,E|0)|0;D=I?H:D;E=I?L:E;H=(G|0)<0;j=be(0,0,F|0,G|0)|0;F=H?j:F;G=H?L:G;j=ne(F|0,G|0,J|0,K|0)|0;l=L;g=ne(D|0,E|0,M|0,P|0)|0;h=L;f=Q^I;do if(R^H){if(!f){hb=ge(j|0,l|0,g|0,h|0)|0;z=-(+(hb>>>0)+4294967296.0*+(L>>>0));break}if(l>>>0>h>>>0|(l|0)==(h|0)&j>>>0>g>>>0){hb=be(j|0,l|0,g|0,h|0)|0;z=-(+(hb>>>0)+4294967296.0*+(L>>>0));break}else{hb=be(g|0,h|0,j|0,l|0)|0;z=+(hb>>>0)+4294967296.0*+(L>>>0);break}}else{if(f){hb=ge(j|0,l|0,g|0,h|0)|0;z=+(hb>>>0)+4294967296.0*+(L>>>0);break}if(l>>>0<h>>>0|(l|0)==(h|0)&j>>>0<g>>>0){hb=be(g|0,h|0,j|0,l|0)|0;z=-(+(hb>>>0)+4294967296.0*+(L>>>0));break}else{hb=be(j|0,l|0,g|0,h|0)|0;z=+(hb>>>0)+4294967296.0*+(L>>>0);break}}while(0);j=ne(S|0,T|0,D|0,E|0)|0;l=L;g=ne(U|0,V|0,F|0,G|0)|0;h=L;f=H^W;do if(I^Y){if(!f){hb=ge(j|0,l|0,g|0,h|0)|0;y=-(+(hb>>>0)+4294967296.0*+(L>>>0));break}if(l>>>0>h>>>0|(l|0)==(h|0)&j>>>0>g>>>0){hb=be(j|0,l|0,g|0,h|0)|0;y=-(+(hb>>>0)+4294967296.0*+(L>>>0));break}else{hb=be(g|0,h|0,j|0,l|0)|0;y=+(hb>>>0)+4294967296.0*+(L>>>0);break}}else{if(f){hb=ge(j|0,l|0,g|0,h|0)|0;y=+(hb>>>0)+4294967296.0*+(L>>>0);break}if(l>>>0<h>>>0|(l|0)==(h|0)&j>>>0<g>>>0){hb=be(g|0,h|0,j|0,l|0)|0;y=-(+(hb>>>0)+4294967296.0*+(L>>>0));break}else{hb=be(j|0,l|0,g|0,h|0)|0;y=+(hb>>>0)+4294967296.0*+(L>>>0);break}}while(0);m=pa*w;if(m<0.0){n=0.0-m;if(m>0.0){m=(m*4.0+0.0)/n;m=m<0.0?-m:m}else m=4.0;u=0.0;v=0.0;s=m+1.0}else{u=m+0.0;v=5.0;n=0.0;s=0.0}o=qa*z;do if(o<0.0){q=n-o;if(o>0.0|n<0.0){o=(o*4.0+n*s)/q;o=o<0.0?-o:o}else o=s<4.0?4.0:s;m=u;n=q;s=o+1.0}else{m=o+u;if(u<0.0?o>0.0|u>0.0:0){v=(u*v-o*4.0)/m;v=(v<0.0?-v:v)+1.0;break}v=v<4.0?5.0:v+1.0}while(0);o=va*y;i:do if(o<0.0){q=n-o;if(o>0.0|n<0.0){n=(o*4.0+n*s)/q;n=n<0.0?-n:n}else n=s<4.0?4.0:s;oa=q;q=m;s=n+1.0;na=v}else{q=o+m;do if(m<0.0){if(!(o>0.0|m>0.0))break;na=(m*v-o*4.0)/q;oa=n;na=(na<0.0?-na:na)+1.0;break i}while(0);oa=n;na=v<4.0?5.0:v+1.0}while(0);m=ua*w;if(m<0.0){n=0.0-m;if(m>0.0){m=(m*3.0+0.0)/n;m=m<0.0?-m:m}else m=3.0;w=0.0;x=0.0;u=m+1.0}else{w=m+0.0;x=4.0;n=0.0;u=0.0}o=wa*z;j:do if(o<0.0){v=n-o;if(o>0.0|n<0.0){m=(o*3.0+n*u)/v;m=m<0.0?-m:m}else m=u<3.0?3.0:u;n=v;u=m+1.0}else{m=o+w;do if(w<0.0){if(!(o>0.0|w>0.0))break;x=(w*x-o*3.0)/m;w=m;x=(x<0.0?-x:x)+1.0;break j}while(0);w=m;x=x<3.0?4.0:x+1.0}while(0);m=sa*y;k:do if(m<0.0){o=n-m;if(m>0.0|n<0.0){m=(m*3.0+n*u)/o;m=m<0.0?-m:m}else m=u<3.0?3.0:u;A=o;z=m+1.0;ma=w;N=x}else{o=m+w;do if(w<0.0){if(!(m>0.0|w>0.0))break;N=(w*x-m*3.0)/o;A=n;z=u;ma=o;N=(N<0.0?-N:N)+1.0;break k}while(0);A=n;z=u;ma=o;N=x<3.0?4.0:x+1.0}while(0);n=O*sa*pa;if(n<0.0){m=0.0-n;if(n>0.0){n=(n*5.0+0.0)/m;n=n<0.0?-n:n}else n=5.0;w=n+1.0;u=0.0;v=0.0}else{m=0.0;w=0.0;u=n+0.0;v=6.0}n=wa*B*pa;l:do if(n<0.0){o=u-n;if(n>0.0|u<0.0){n=(n*5.0+u*v)/o;n=n<0.0?-n:n}else n=v<5.0?5.0:v;u=o;v=n+1.0}else{o=n+m;do if(m<0.0){if(!(n>0.0|m>0.0))break;w=(m*w-n*5.0)/o;m=o;w=(w<0.0?-w:w)+1.0;break l}while(0);m=o;w=w<5.0?6.0:w+1.0}while(0);n=B*ua*qa;m:do if(n<0.0){o=m-n;if(n>0.0|m<0.0){n=(n*5.0+m*w)/o;n=n<0.0?-n:n}else n=w<5.0?5.0:w;m=o;w=n+1.0}else{o=n+u;do if(u<0.0){if(!(n>0.0|u>0.0))break;v=(u*v-n*5.0)/o;u=o;v=(v<0.0?-v:v)+1.0;break m}while(0);u=o;v=v<5.0?6.0:v+1.0}while(0);n=sa*C*qa;n:do if(n<0.0){o=u-n;if(n>0.0|u<0.0){n=(n*5.0+u*v)/o;n=n<0.0?-n:n}else n=v<5.0?5.0:v;x=o;v=n+1.0}else{o=n+m;do if(m<0.0){if(!(n>0.0|m>0.0))break;w=(m*w-n*5.0)/o;x=u;m=o;w=(w<0.0?-w:w)+1.0;break n}while(0);x=u;m=o;w=w<5.0?6.0:w+1.0}while(0);n=wa*C*va;o:do if(n<0.0){o=m-n;if(n>0.0|m<0.0){m=(n*5.0+m*w)/o;m=m<0.0?-m:m}else m=w<5.0?5.0:w;w=m+1.0;u=x}else{u=n+x;do if(x<0.0){if(!(n>0.0|x>0.0))break;v=(x*v-n*5.0)/u;o=m;v=(v<0.0?-v:v)+1.0;break o}while(0);o=m;v=v<5.0?6.0:v+1.0}while(0);m=O*ua*va;p:do if(m<0.0){n=u-m;if(m>0.0|u<0.0){m=(m*5.0+u*v)/n;m=m<0.0?-m:m}else m=v<5.0?5.0:v;ka=n;ja=m+1.0;ha=o}else{n=m+o;do if(o<0.0){if(!(m>0.0|o>0.0))break;w=(o*w-m*5.0)/n;ka=u;ja=v;ha=n;w=(w<0.0?-w:w)+1.0;break p}while(0);ka=u;ja=v;ha=n;w=w<5.0?6.0:w+1.0}while(0);n=xa*sa*pa;if(n<0.0){m=0.0-n;if(n>0.0){n=(n*5.0+0.0)/m;n=n<0.0?-n:n}else n=5.0;x=n+1.0;u=0.0;v=0.0}else{m=0.0;x=0.0;u=n+0.0;v=6.0}n=wa*ra*pa;q:do if(n<0.0){o=u-n;if(n>0.0|u<0.0){n=(n*5.0+u*v)/o;n=n<0.0?-n:n}else n=v<5.0?5.0:v;y=o;v=n+1.0}else{o=n+m;do if(m<0.0){if(!(n>0.0|m>0.0))break;x=(m*x-n*5.0)/o;y=u;m=o;x=(x<0.0?-x:x)+1.0;break q}while(0);y=u;m=o;x=x<5.0?6.0:x+1.0}while(0);n=ra*ua*qa;r:do if(n<0.0){o=m-n;if(n>0.0|m<0.0){n=(n*5.0+m*x)/o;n=n<0.0?-n:n}else n=x<5.0?5.0:x;m=o;x=n+1.0;u=y}else{u=n+y;do if(y<0.0){if(!(n>0.0|y>0.0))break;v=(y*v-n*5.0)/u;v=(v<0.0?-v:v)+1.0;break r}while(0);v=v<5.0?6.0:v+1.0}while(0);n=sa*ta*qa;s:do if(n<0.0){o=u-n;if(n>0.0|u<0.0){n=(n*5.0+u*v)/o;n=n<0.0?-n:n}else n=v<5.0?5.0:v;u=o;o=m;v=n+1.0}else{o=n+m;do if(m<0.0){if(!(n>0.0|m>0.0))break;x=(m*x-n*5.0)/o;x=(x<0.0?-x:x)+1.0;break s}while(0);x=x<5.0?6.0:x+1.0}while(0);m=wa*ta*va;t:do if(m<0.0){n=o-m;if(m>0.0|o<0.0){m=(m*5.0+o*x)/n;m=m<0.0?-m:m}else m=x<5.0?5.0:x;y=n;x=m+1.0}else{n=m+u;do if(u<0.0){if(!(m>0.0|u>0.0))break;v=(u*v-m*5.0)/n;y=o;u=n;v=(v<0.0?-v:v)+1.0;break t}while(0);y=o;u=n;v=v<5.0?6.0:v+1.0}while(0);n=xa*ua*va;u:do if(n<0.0){o=u-n;if(n>0.0|u<0.0){m=(n*5.0+u*v)/o;m=m<0.0?-m:m}else m=v<5.0?5.0:v;v=m+1.0}else{m=n+y;do if(y<0.0){if(!(n>0.0|y>0.0))break;x=(y*x-n*5.0)/m;y=m;o=u;x=(x<0.0?-x:x)+1.0;break u}while(0);y=m;o=u;x=x<5.0?6.0:x+1.0}while(0);O=A+ka;g=ka<0.0;do if(A<0.0|g){if(!(A>0.0|ka>0.0)){ia=474;break}m=(ka*ja-A*z)/O;if(!(m<0.0))break;m=-m}else ia=474;while(0);if((ia|0)==474)m=ja<z?z:ja;C=m+1.0;B=ma+ha;f=ha<0.0;do if(ma<0.0|f){if(!(ma>0.0|ha>0.0)){ia=479;break}m=(ha*w-ma*N)/B;if(!(m<0.0))break;m=-m}else ia=479;while(0);if((ia|0)==479)m=w<N?N:w;A=m+1.0;N=q-oa;do if(q<0.0|oa>0.0){if(!(q>0.0|oa<0.0)){ia=484;break}m=(q*na+oa*s)/N;if(!(m<0.0))break;m=-m}else ia=484;while(0);if((ia|0)==484)m=na<s?s:na;z=m+1.0;n=ka-ha;do if((g|ha>0.0)&(ka>0.0|f)){m=(ka*ja+ha*w)/n;if(!(m<0.0))break;m=-m}else m=ja<w?w:ja;while(0);u=n/N;s=z+(m+1.0)+1.0;n=o-y;do if(o<0.0|y>0.0){if(!(o>0.0|y<0.0)){ia=493;break}m=(o*v+y*x)/n;if(!(m<0.0))break;m=-m}else ia=493;while(0);if((ia|0)==493)m=v<x?x:v;o=n/N;n=z+(m+1.0)+1.0;q=O-B;do if(O<0.0|B>0.0){if(!(O>0.0|B<0.0)){ia=498;break}m=(O*C+B*A)/q;if(!(m<0.0))break;m=-m}else ia=498;while(0);if((ia|0)==498)m=C<A?A:C;ga=s>64.0;da=n>64.0;ia=z+(m+1.0)+1.0>64.0;p[e>>3]=u;fa=e+8|0;p[fa>>3]=o;la=e+16|0;p[la>>3]=q/N;i[e+24>>0]=1;if(!(ga|da|ia))break;P=k[$a>>2]|0;Q=((P|0)<0)<<31>>31;R=k[b>>2]|0;S=((R|0)<0)<<31>>31;f=be(P|0,Q|0,R|0,S|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){ea=be(0,0,f|0,g|0)|0;hb=L;k[_a>>2]=ea;k[_a+4>>2]=hb;k[_a+256>>2]=(hb|0)!=0?-2:-1;break}else{k[_a+256>>2]=0;break}else{k[_a>>2]=f;k[_a+4>>2]=g;k[_a+256>>2]=(g|0)!=0?2:1}while(0);ea=_a+260|0;T=k[cb>>2]|0;U=((T|0)<0)<<31>>31;V=k[c>>2]|0;W=((V|0)<0)<<31>>31;f=be(T|0,U|0,V|0,W|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){ca=be(0,0,f|0,g|0)|0;hb=L;k[ea>>2]=ca;k[_a+264>>2]=hb;k[_a+516>>2]=(hb|0)!=0?-2:-1;break}else{k[_a+516>>2]=0;break}else{k[ea>>2]=f;k[_a+264>>2]=g;k[_a+516>>2]=(g|0)!=0?2:1}while(0);ca=_a+520|0;Y=k[fb>>2]|0;Z=((Y|0)<0)<<31>>31;_=k[d>>2]|0;$=((_|0)<0)<<31>>31;f=be(Y|0,Z|0,_|0,$|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){ba=be(0,0,f|0,g|0)|0;hb=L;k[ca>>2]=ba;k[_a+524>>2]=hb;k[_a+776>>2]=(hb|0)!=0?-2:-1;break}else{k[_a+776>>2]=0;break}else{k[ca>>2]=f;k[_a+524>>2]=g;k[_a+776>>2]=(g|0)!=0?2:1}while(0);K=k[ya>>2]|0;M=((K|0)<0)<<31>>31;G=k[za>>2]|0;H=((G|0)<0)<<31>>31;f=be(K|0,M|0,G|0,H|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){za=be(0,0,f|0,g|0)|0;hb=L;k[Ta>>2]=za;k[Ta+4>>2]=hb;k[Ta+256>>2]=(hb|0)!=0?-2:-1;break}else{k[Ta+256>>2]=0;break}else{k[Ta>>2]=f;k[Ta+4>>2]=g;k[Ta+256>>2]=(g|0)!=0?2:1}while(0);ba=Ta+260|0;I=k[Aa>>2]|0;J=((I|0)<0)<<31>>31;l=k[Ba>>2]|0;D=((l|0)<0)<<31>>31;f=be(I|0,J|0,l|0,D|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Ba=be(0,0,f|0,g|0)|0;hb=L;k[ba>>2]=Ba;k[Ta+264>>2]=hb;k[Ta+516>>2]=(hb|0)!=0?-2:-1;break}else{k[Ta+516>>2]=0;break}else{k[ba>>2]=f;k[Ta+264>>2]=g;k[Ta+516>>2]=(g|0)!=0?2:1}while(0);aa=Ta+520|0;E=k[Ca>>2]|0;F=((E|0)<0)<<31>>31;h=k[Da>>2]|0;j=((h|0)<0)<<31>>31;f=be(E|0,F|0,h|0,j|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;hb=L;k[aa>>2]=Da;k[Ta+524>>2]=hb;k[Ta+776>>2]=(hb|0)!=0?-2:-1;break}else{k[Ta+776>>2]=0;break}else{k[aa>>2]=f;k[Ta+524>>2]=g;k[Ta+776>>2]=(g|0)!=0?2:1}while(0);hb=ne(K|0,M|0,R|0,S|0)|0;g=L;f=ne(P|0,Q|0,G|0,H|0)|0;f=be(hb|0,g|0,f|0,L|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;hb=L;k[Na>>2]=Da;k[Na+4>>2]=hb;k[Na+256>>2]=(hb|0)!=0?-2:-1;break}else{k[Na+256>>2]=0;break}else{k[Na>>2]=f;k[Na+4>>2]=g;k[Na+256>>2]=(g|0)!=0?2:1}while(0);G=Na+260|0;hb=ne(I|0,J|0,V|0,W|0)|0;g=L;f=ne(T|0,U|0,l|0,D|0)|0;f=be(hb|0,g|0,f|0,L|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;hb=L;k[G>>2]=Da;k[Na+264>>2]=hb;k[Na+516>>2]=(hb|0)!=0?-2:-1;break}else{k[Na+516>>2]=0;break}else{k[G>>2]=f;k[Na+264>>2]=g;k[Na+516>>2]=(g|0)!=0?2:1}while(0);D=Na+520|0;hb=ne(E|0,F|0,_|0,$|0)|0;g=L;f=ne(Y|0,Z|0,h|0,j|0)|0;f=be(hb|0,g|0,f|0,L|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;hb=L;k[D>>2]=Da;k[Na+524>>2]=hb;k[Na+776>>2]=(hb|0)!=0?-2:-1;break}else{k[Na+776>>2]=0;break}else{k[D>>2]=f;k[Na+524>>2]=g;k[Na+776>>2]=(g|0)!=0?2:1}while(0);Sc(Fa,_a,_a);Sc(Xa,Ta,Ta);Tc(Ea,Fa,Xa);fe(Ma|0,Ea|0,260)|0;Sc(Fa,ea,ea);Sc(Xa,ba,ba);Tc(Ea,Fa,Xa);fe(Ma+260|0,Ea|0,260)|0;Sc(Fa,ca,ca);Sc(Xa,aa,aa);Tc(Ea,Fa,Xa);fe(Ma+520|0,Ea|0,260)|0;Sc(Ha,ea,aa);Sc(Ya,ca,ba);Uc(Ga,Ha,Ya);fe(Oa|0,Ga|0,260)|0;h=Oa+260|0;Sc(Ha,ca,Ta);Sc(Ya,_a,aa);Uc(Ga,Ha,Ya);fe(h|0,Ga|0,260)|0;j=Oa+520|0;Sc(Ha,_a,ba);Sc(Ya,ea,Ta);Uc(Ga,Ha,Ya);fe(j|0,Ga|0,260)|0;l=a+4|0;Vc(Ia,l,Oa,Ma);m=+p[Ia>>3];g=k[Ia+8>>2]|0;do if((g|0)>1023){m=m*89884656743115795.0e291;f=g+-1023|0;if((f|0)<=1023)break;f=g+-2046|0;f=(f|0)>1023?1023:f;m=m*89884656743115795.0e291}else{if((g|0)>=-1022){f=g;break}m=m*2.2250738585072014e-308;f=g+1022|0;if((f|0)>=-1022)break;f=g+2044|0;f=(f|0)<-1022?-1022:f;m=m*2.2250738585072014e-308}while(0);Ya=ee(f+1023|0,0,52)|0;hb=L;k[t>>2]=Ya;k[t+4>>2]=hb;n=m*+p[t>>3];if(da){Sc(Za,ba,D);Sc(Ka,aa,G);Uc(Ja,Za,Ka);fe(Oa|0,Ja|0,260)|0;Sc(Za,aa,Na);Sc(Ka,Ta,D);Uc(Ja,Za,Ka);fe(h|0,Ja|0,260)|0;Sc(Za,Ta,G);Sc(Ka,ba,Na);Uc(Ja,Za,Ka);fe(j|0,Ja|0,260)|0;Vc(La,l,Oa,Ma);m=+p[La>>3];g=k[La+8>>2]|0;do if((g|0)>1023){m=m*89884656743115795.0e291;f=g+-1023|0;if((f|0)<=1023)break;f=g+-2046|0;f=(f|0)>1023?1023:f;m=m*89884656743115795.0e291}else{if((g|0)>=-1022){f=g;break}m=m*2.2250738585072014e-308;f=g+1022|0;if((f|0)>=-1022)break;f=g+2044|0;f=(f|0)<-1022?-1022:f;m=m*2.2250738585072014e-308}while(0);Za=ee(f+1023|0,0,52)|0;hb=L;k[t>>2]=Za;k[t+4>>2]=hb;p[fa>>3]=m*+p[t>>3]/n}do if(ga|ia){f=Oa+780|0;k[Oa+1036>>2]=0;Sc(Pa,ea,D);Sc(Qa,ca,G);Uc(Wa,Pa,Qa);fe(Oa|0,Wa|0,260)|0;if(ia){Sc(Sa,Oa,Ta);Tc(Ra,f,Sa);fe(f|0,Ra|0,260)|0;Sc(Pa,ca,Na);Sc(Qa,_a,D);Uc(Wa,Pa,Qa);fe(h|0,Wa|0,260)|0;Sc(Sa,h,ba);Tc(Ra,f,Sa);fe(f|0,Ra|0,260)|0;Sc(Pa,_a,G);Sc(Qa,ea,Na);Uc(Wa,Pa,Qa);fe(j|0,Wa|0,260)|0;Sc(Sa,j,aa);Tc(Ra,f,Sa);fe(f|0,Ra|0,260)|0}else{Sc(Pa,ca,Na);Sc(Qa,_a,D);Uc(Wa,Pa,Qa);fe(h|0,Wa|0,260)|0;Sc(Pa,_a,G);Sc(Qa,ea,Na);Uc(Wa,Pa,Qa);fe(j|0,Wa|0,260)|0}if(ga){Vc(Ua,l,Oa,Ma);m=+p[Ua>>3];g=k[Ua+8>>2]|0;do if((g|0)>1023){m=m*89884656743115795.0e291;f=g+-1023|0;if((f|0)<=1023)break;f=g+-2046|0;f=(f|0)>1023?1023:f;m=m*89884656743115795.0e291}else{if((g|0)>=-1022){f=g;break}m=m*2.2250738585072014e-308;f=g+1022|0;if((f|0)>=-1022)break;f=g+2044|0;f=(f|0)<-1022?-1022:f;m=m*2.2250738585072014e-308}while(0);_a=ee(f+1023|0,0,52)|0;hb=L;k[t>>2]=_a;k[t+4>>2]=hb;p[e>>3]=m*+p[t>>3]/n}if(!ia)break;k[Ma+780>>2]=1;k[Ma+1036>>2]=1;Wc(Va,l,Oa,Ma);m=+p[Va>>3];g=k[Va+8>>2]|0;do if((g|0)>1023){m=m*89884656743115795.0e291;f=g+-1023|0;if((f|0)<=1023)break;f=g+-2046|0;f=(f|0)>1023?1023:f;m=m*89884656743115795.0e291}else{if((g|0)>=-1022){f=g;break}m=m*2.2250738585072014e-308;f=g+1022|0;if((f|0)>=-1022)break;f=g+2044|0;f=(f|0)<-1022?-1022:f;m=m*2.2250738585072014e-308}while(0);_a=ee(f+1023|0,0,52)|0;hb=L;k[t>>2]=_a;k[t+4>>2]=hb;p[la>>3]=m*+p[t>>3]/n}while(0)}while(0);if((k[b>>2]|0)==(k[$a>>2]|0)?(ab=k[b+4>>2]|0,bb=k[b+12>>2]|0,(ab|0)!=(bb|0)):0){f=(k[b+24>>2]&32|0)!=0;h=e+8|0;g=k[h>>2]|0;h=k[h+4>>2]|0;p[t>>3]=+((f?bb:ab)|0);$a=k[t>>2]|0;_a=k[t+4>>2]|0;hb=(h|0)>-1|(h|0)==-1&g>>>0>4294967295;b=be(0,-2147483648,g|0,h|0)|0;g=hb?b:g;h=hb?L:h;hb=(_a|0)>-1|(_a|0)==-1&$a>>>0>4294967295;b=be(0,-2147483648,$a|0,_a|0)|0;$a=hb?b:$a;_a=hb?L:_a;hb=be(g|0,h|0,$a|0,_a|0)|0;b=L;if((h>>>0>_a>>>0|(h|0)==(_a|0)&g>>>0>$a>>>0)&(b>>>0>0|(b|0)==0&hb>>>0>64)){hb=0;r=gb;return hb|0}p[t>>3]=+((f?ab:bb)|0);$a=k[t>>2]|0;_a=k[t+4>>2]|0;ab=(_a|0)>-1|(_a|0)==-1&$a>>>0>4294967295;b=be(0,-2147483648,$a|0,_a|0)|0;$a=ab?b:$a;_a=ab?L:_a;ab=be(g|0,h|0,$a|0,_a|0)|0;b=L;hb=be($a|0,_a|0,g|0,h|0)|0;bb=L;if(((h>>>0>_a>>>0|(h|0)==(_a|0)&g>>>0>$a>>>0?(b>>>0>0|(b|0)==0&ab>>>0>64)<<31>>31:(bb>>>0>0|(bb|0)==0&hb>>>0>64)&1)|0)==1){hb=0;r=gb;return hb|0}}if((k[c>>2]|0)==(k[cb>>2]|0)?(db=k[c+4>>2]|0,eb=k[c+12>>2]|0,(db|0)!=(eb|0)):0){f=(k[c+24>>2]&32|0)!=0;h=e+8|0;g=k[h>>2]|0;h=k[h+4>>2]|0;p[t>>3]=+((f?eb:db)|0);cb=k[t>>2]|0;bb=k[t+4>>2]|0;hb=(h|0)>-1|(h|0)==-1&g>>>0>4294967295;c=be(0,-2147483648,g|0,h|0)|0;g=hb?c:g;h=hb?L:h;hb=(bb|0)>-1|(bb|0)==-1&cb>>>0>4294967295;c=be(0,-2147483648,cb|0,bb|0)|0;cb=hb?c:cb;bb=hb?L:bb;hb=be(g|0,h|0,cb|0,bb|0)|0;c=L;if((h>>>0>bb>>>0|(h|0)==(bb|0)&g>>>0>cb>>>0)&(c>>>0>0|(c|0)==0&hb>>>0>64)){hb=0;r=gb;return hb|0}p[t>>3]=+((f?db:eb)|0);cb=k[t>>2]|0;bb=k[t+4>>2]|0;db=(bb|0)>-1|(bb|0)==-1&cb>>>0>4294967295;c=be(0,-2147483648,cb|0,bb|0)|0;cb=db?c:cb;bb=db?L:bb;db=be(g|0,h|0,cb|0,bb|0)|0;c=L;hb=be(cb|0,bb|0,g|0,h|0)|0;eb=L;if(((h>>>0>bb>>>0|(h|0)==(bb|0)&g>>>0>cb>>>0?(c>>>0>0|(c|0)==0&db>>>0>64)<<31>>31:(eb>>>0>0|(eb|0)==0&hb>>>0>64)&1)|0)==1){hb=0;r=gb;return hb|0}}if((k[d>>2]|0)!=(k[fb>>2]|0)){hb=1;r=gb;return hb|0}j=k[d+4>>2]|0;l=k[d+12>>2]|0;if((j|0)==(l|0)){hb=1;r=gb;return hb|0}h=(k[d+24>>2]&32|0)!=0;g=e+8|0;f=k[g>>2]|0;g=k[g+4>>2]|0;p[t>>3]=+((h?l:j)|0);d=k[t>>2]|0;fb=k[t+4>>2]|0;hb=(g|0)>-1|(g|0)==-1&f>>>0>4294967295;e=be(0,-2147483648,f|0,g|0)|0;f=hb?e:f;g=hb?L:g;hb=(fb|0)>-1|(fb|0)==-1&d>>>0>4294967295;e=be(0,-2147483648,d|0,fb|0)|0;d=hb?e:d;fb=hb?L:fb;hb=be(f|0,g|0,d|0,fb|0)|0;e=L;if((g>>>0>fb>>>0|(g|0)==(fb|0)&f>>>0>d>>>0)&(e>>>0>0|(e|0)==0&hb>>>0>64)){hb=0;r=gb;return hb|0}p[t>>3]=+((h?j:l)|0);eb=k[t>>2]|0;db=k[t+4>>2]|0;d=(db|0)>-1|(db|0)==-1&eb>>>0>4294967295;fb=be(0,-2147483648,eb|0,db|0)|0;eb=d?fb:eb;db=d?L:db;d=be(f|0,g|0,eb|0,db|0)|0;fb=L;hb=be(eb|0,db|0,f|0,g|0)|0;e=L;hb=((g>>>0>db>>>0|(g|0)==(db|0)&f>>>0>eb>>>0?(fb>>>0>0|(fb|0)==0&d>>>0>64)<<31>>31:(e>>>0>0|(e|0)==0&hb>>>0>64)&1)|0)!=1;r=gb;return hb|0}function Oc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0.0,h=0,i=0.0,j=0,l=0,m=0,n=0,o=0,q=0;f=a+16|0;c=_d(48)|0;a:do if(!c){while(1){c=k[35]|0;k[35]=c+0;if(!c)break;Xa[c&0]();c=_d(48)|0;if(c)break a}q=ya(4)|0;k[q>>2]=128;La(q|0,8,1)}while(0);e=c+8|0;d=e+40|0;do{k[e>>2]=k[b>>2];e=e+4|0;b=b+4|0}while((e|0)<(d|0));k[c>>2]=f;q=a+20|0;n=k[q>>2]|0;k[c+4>>2]=n;k[n>>2]=c;k[q>>2]=c;n=a+24|0;k[n>>2]=(k[n>>2]|0)+1;n=a+4|0;b=k[n>>2]|0;l=a+8|0;d=k[l>>2]|0;if(b>>>0>=d>>>0){m=k[a>>2]|0;e=m;j=b-e|0;f=j>>2;h=f+1|0;if(h>>>0>1073741823)xa(1340,1363,303,1438);b=d-e|0;if(b>>2>>>0<536870911){b=b>>1;b=b>>>0<h>>>0?h:b;if(!b){b=0;d=0}else o=11}else{b=1073741823;o=11}if((o|0)==11){e=b<<2;e=(e|0)==0?1:e;d=_d(e)|0;b:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(e)|0;if(d)break b}q=ya(4)|0;k[q>>2]=128;La(q|0,8,1)}while(0)}k[d+(f<<2)>>2]=c;c=d+(h<<2)|0;fe(d|0,m|0,j|0)|0;k[a>>2]=d;k[n>>2]=c;k[l>>2]=d+(b<<2);if(m){$d(m);c=k[n>>2]|0}}else{k[b>>2]=c;c=(k[n>>2]|0)+4|0;k[n>>2]=c}j=k[a>>2]|0;o=c-j|0;f=o>>2;if((o|0)<=4){q=k[q>>2]|0;q=q+8|0;return q|0}h=(f+-2|0)/2|0;a=j+(h<<2)|0;d=c+-4|0;b=k[a>>2]|0;c=k[d>>2]|0;i=+p[c+24>>3];g=+p[b+24>>3];e=b;l=c;do if(i!=g)if(i<g){c=c+16|0;break}else{q=k[q>>2]|0;q=q+8|0;return q|0}else{c=c+16|0;if(!(+p[c>>3]<+p[b+16>>3])){q=k[q>>2]|0;q=q+8|0;return q|0}}while(0);k[d>>2]=e;c:do if((f+-1|0)>>>0>=3)while(1){b=h;h=(h+-1|0)/2|0;d=j+(h<<2)|0;e=k[d>>2]|0;g=+p[e+24>>3];f=e;if(i!=g){if(!(i<g))break c}else if(!(+p[c>>3]<+p[e+16>>3]))break c;k[a>>2]=f;if(b>>>0<3){a=d;break}else a=d}while(0);k[a>>2]=l;q=k[q>>2]|0;q=q+8|0;return q|0}function Pc(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0.0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;j=((c|0)<0)<<31>>31;n=be(a|0,((a|0)<0)<<31>>31|0,c|0,j|0)|0;a=L;j=be(c|0,j|0,e|0,((e|0)<0)<<31>>31|0)|0;c=L;p=((d|0)<0)<<31>>31;l=be(b|0,((b|0)<0)<<31>>31|0,d|0,p|0)|0;k=L;p=be(d|0,p|0,f|0,((f|0)<0)<<31>>31|0)|0;o=L;h=(a|0)<0;b=be(0,0,n|0,a|0)|0;a=h?L:a;e=(k|0)<0;m=be(0,0,l|0,k|0)|0;k=e?L:k;i=(c|0)<0;d=be(0,0,j|0,c|0)|0;c=i?L:c;f=(o|0)<0;q=be(0,0,p|0,o|0)|0;a=ne((f?q:p)|0,(f?L:o)|0,(h?b:n)|0,a|0)|0;b=L;c=ne((e?m:l)|0,k|0,(i?d:j)|0,c|0)|0;d=L;e=i^e;do if(h^f){if(!e){q=ge(a|0,b|0,c|0,d|0)|0;g=-(+(q>>>0)+4294967296.0*+(L>>>0));break}if(b>>>0>d>>>0|(b|0)==(d|0)&a>>>0>c>>>0){q=be(a|0,b|0,c|0,d|0)|0;g=-(+(q>>>0)+4294967296.0*+(L>>>0));break}else{q=be(c|0,d|0,a|0,b|0)|0;g=+(q>>>0)+4294967296.0*+(L>>>0);break}}else{if(e){q=ge(a|0,b|0,c|0,d|0)|0;g=+(q>>>0)+4294967296.0*+(L>>>0);break}if(b>>>0<d>>>0|(b|0)==(d|0)&a>>>0<c>>>0){q=be(c|0,d|0,a|0,b|0)|0;g=-(+(q>>>0)+4294967296.0*+(L>>>0));break}else{q=be(a|0,b|0,c|0,d|0)|0;g=+(q>>>0)+4294967296.0*+(L>>>0);break}}while(0);return (g==0.0?0:g<0.0?-1:1)|0}function Qc(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0.0,h=0,j=0,l=0,m=0.0,n=0,o=0,q=0,s=0,u=0,v=0,w=0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0,H=0.0,I=0,J=0,K=0.0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,Y=0,Z=0,_=0,$=0,aa=0.0,ba=0.0,ca=0.0,da=0.0,ea=0.0,fa=0.0,ga=0.0,ha=0.0,ia=0.0,ja=0.0,ka=0.0,la=0.0,ma=0.0,na=0.0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Kb=0,Lb=0;Ib=r;r=r+18272|0;bb=Ib+18008|0;Eb=Ib+16968|0;Fb=Ib+15928|0;Fa=Ib+15664|0;Ga=Ib+15404|0;Gb=Ib+15144|0;pa=Ib+14884|0;qa=Ib+14624|0;ib=Ib+14364|0;rb=Ib+14104|0;hb=Ib+13844|0;pb=Ib+13584|0;zb=Ib+13324|0;ra=Ib+13064|0;sa=Ib+12804|0;Cb=Ib+12544|0;ta=Ib+12284|0;ua=Ib+12024|0;Da=Ib+11764|0;Ea=Ib+11504|0;Xa=Ib+11244|0;xa=Ib+10984|0;za=Ib+10724|0;Ya=Ib+10464|0;Ba=Ib+10204|0;Ca=Ib+9944|0;yb=Ib+9684|0;Bb=Ib+9424|0;Ha=Ib+9164|0;Ia=Ib+8904|0;Ja=Ib+8644|0;Ka=Ib+8384|0;La=Ib+8124|0;Ma=Ib+7864|0;Na=Ib+7604|0;Oa=Ib+7344|0;Pa=Ib+7084|0;Qa=Ib+6824|0;Ra=Ib+6564|0;Za=Ib+6304|0;_a=Ib+6044|0;$a=Ib+5784|0;ab=Ib+5524|0;Db=Ib+48|0;Sa=Ib+5264|0;Ta=Ib+5004|0;Ua=Ib+4744|0;Va=Ib+4484|0;Wa=Ib+4224|0;cb=Ib+3964|0;db=Ib+3704|0;eb=Ib+3444|0;fb=Ib+3184|0;gb=Ib+2924|0;jb=Ib+32|0;kb=Ib+2664|0;lb=Ib+2404|0;mb=Ib+2144|0;nb=Ib+1884|0;ob=Ib+1624|0;qb=Ib+16|0;sb=Ib+1364|0;tb=Ib+1104|0;ub=Ib+844|0;vb=Ib+584|0;wb=Ib+324|0;xb=Ib+64|0;Ab=Ib;wa=d+12|0;v=k[wa>>2]|0;oa=d+4|0;q=k[oa>>2]|0;la=+(q|0);ma=+(v|0)-la;M=k[d>>2]|0;ja=+(M|0);Aa=d+8|0;N=k[Aa>>2]|0;na=ja-+(N|0);ya=c+4|0;O=k[ya>>2]|0;ga=+(O|0);va=b+4|0;P=k[va>>2]|0;ha=+(P|0);ba=ga-ha;Q=k[b>>2]|0;F=+(Q|0);R=k[c>>2]|0;aa=+(R|0);ia=F-aa;w=((v|0)<0)<<31>>31;s=((q|0)<0)<<31>>31;Z=be(v|0,w|0,q|0,s|0)|0;_=L;S=((M|0)<0)<<31>>31;T=((N|0)<0)<<31>>31;G=be(M|0,S|0,N|0,T|0)|0;I=L;U=((R|0)<0)<<31>>31;V=((Q|0)<0)<<31>>31;n=be(R|0,U|0,Q|0,V|0)|0;l=L;W=((O|0)<0)<<31>>31;Y=((P|0)<0)<<31>>31;j=be(O|0,W|0,P|0,Y|0)|0;h=L;$=(_|0)<0;J=be(0,0,Z|0,_|0)|0;Z=$?J:Z;_=$?L:_;J=(I|0)<0;o=be(0,0,G|0,I|0)|0;G=J?o:G;I=J?L:I;o=(l|0)<0;Jb=be(0,0,n|0,l|0)|0;l=o?L:l;u=(h|0)<0;Kb=be(0,0,j|0,h|0)|0;h=ne((u?Kb:j)|0,(u?L:h)|0,Z|0,_|0)|0;j=L;l=ne((o?Jb:n)|0,l|0,G|0,I|0)|0;n=L;o=J^o;do if($^u){if(!o){Kb=ge(l|0,n|0,h|0,j|0)|0;E=-(+(Kb>>>0)+4294967296.0*+(L>>>0));break}if(j>>>0>n>>>0|(j|0)==(n|0)&h>>>0>l>>>0){Kb=be(h|0,j|0,l|0,n|0)|0;E=-(+(Kb>>>0)+4294967296.0*+(L>>>0));break}else{Kb=be(l|0,n|0,h|0,j|0)|0;E=+(Kb>>>0)+4294967296.0*+(L>>>0);break}}else{if(o){Kb=ge(l|0,n|0,h|0,j|0)|0;E=+(Kb>>>0)+4294967296.0*+(L>>>0);break}if(j>>>0<n>>>0|(j|0)==(n|0)&h>>>0<l>>>0){Kb=be(l|0,n|0,h|0,j|0)|0;E=-(+(Kb>>>0)+4294967296.0*+(L>>>0));break}else{Kb=be(h|0,j|0,l|0,n|0)|0;E=+(Kb>>>0)+4294967296.0*+(L>>>0);break}}while(0);q=be(q|0,s|0,v|0,w|0)|0;s=L;n=be(v|0,w|0,P|0,Y|0)|0;l=L;j=be(N|0,T|0,Q|0,V|0)|0;h=L;u=(s|0)<0;o=be(0,0,q|0,s|0)|0;q=u?o:q;s=u?L:s;o=(l|0)<0;Jb=be(0,0,n|0,l|0)|0;l=o?L:l;Kb=(h|0)<0;Lb=be(0,0,j|0,h|0)|0;h=ne((Kb?Lb:j)|0,(Kb?L:h)|0,q|0,s|0)|0;j=L;l=ne((o?Jb:n)|0,l|0,G|0,I|0)|0;n=L;o=J^o;do if(u^Kb){if(!o){Lb=ge(h|0,j|0,l|0,n|0)|0;D=-(+(Lb>>>0)+4294967296.0*+(L>>>0));break}if(j>>>0>n>>>0|(j|0)==(n|0)&h>>>0>l>>>0){Lb=be(h|0,j|0,l|0,n|0)|0;D=-(+(Lb>>>0)+4294967296.0*+(L>>>0));break}else{Lb=be(l|0,n|0,h|0,j|0)|0;D=+(Lb>>>0)+4294967296.0*+(L>>>0);break}}else{if(o){Lb=ge(h|0,j|0,l|0,n|0)|0;D=+(Lb>>>0)+4294967296.0*+(L>>>0);break}if(j>>>0<n>>>0|(j|0)==(n|0)&h>>>0<l>>>0){Lb=be(l|0,n|0,h|0,j|0)|0;D=-(+(Lb>>>0)+4294967296.0*+(L>>>0));break}else{Lb=be(h|0,j|0,l|0,n|0)|0;D=+(Lb>>>0)+4294967296.0*+(L>>>0);break}}while(0);l=be(v|0,w|0,O|0,W|0)|0;j=L;o=be(N|0,T|0,R|0,U|0)|0;n=L;h=(j|0)<0;Kb=be(0,0,l|0,j|0)|0;j=h?L:j;Lb=(n|0)<0;Jb=be(0,0,o|0,n|0)|0;n=ne((Lb?Jb:o)|0,(Lb?L:n)|0,q|0,s|0)|0;o=L;j=ne((h?Kb:l)|0,j|0,G|0,I|0)|0;l=L;h=J^h;do if(u^Lb){if(!h){Lb=ge(n|0,o|0,j|0,l|0)|0;z=-(+(Lb>>>0)+4294967296.0*+(L>>>0));break}if(o>>>0>l>>>0|(o|0)==(l|0)&n>>>0>j>>>0){Lb=be(n|0,o|0,j|0,l|0)|0;z=-(+(Lb>>>0)+4294967296.0*+(L>>>0));break}else{Lb=be(j|0,l|0,n|0,o|0)|0;z=+(Lb>>>0)+4294967296.0*+(L>>>0);break}}else{if(h){Lb=ge(n|0,o|0,j|0,l|0)|0;z=+(Lb>>>0)+4294967296.0*+(L>>>0);break}if(o>>>0<l>>>0|(o|0)==(l|0)&n>>>0<j>>>0){Lb=be(j|0,l|0,n|0,o|0)|0;z=-(+(Lb>>>0)+4294967296.0*+(L>>>0));break}else{Lb=be(n|0,o|0,j|0,l|0)|0;z=+(Lb>>>0)+4294967296.0*+(L>>>0);break}}while(0);o=be(P|0,Y|0,O|0,W|0)|0;n=L;l=be(Q|0,V|0,R|0,U|0)|0;j=L;V=be(N|0,T|0,M|0,S|0)|0;W=L;Kb=(n|0)<0;Y=be(0,0,o|0,n|0)|0;n=Kb?L:n;h=(j|0)<0;Jb=be(0,0,l|0,j|0)|0;j=h?L:j;Lb=(W|0)<0;U=be(0,0,V|0,W|0)|0;n=ne((Lb?U:V)|0,(Lb?L:W)|0,(Kb?Y:o)|0,n|0)|0;o=L;j=ne(Z|0,_|0,(h?Jb:l)|0,j|0)|0;l=L;h=h^$;do if(Kb^Lb){if(!h){Lb=ge(n|0,o|0,j|0,l|0)|0;y=-(+(Lb>>>0)+4294967296.0*+(L>>>0));break}if(o>>>0>l>>>0|(o|0)==(l|0)&n>>>0>j>>>0){Lb=be(n|0,o|0,j|0,l|0)|0;y=-(+(Lb>>>0)+4294967296.0*+(L>>>0));break}else{Lb=be(j|0,l|0,n|0,o|0)|0;y=+(Lb>>>0)+4294967296.0*+(L>>>0);break}}else{if(h){Lb=ge(n|0,o|0,j|0,l|0)|0;y=+(Lb>>>0)+4294967296.0*+(L>>>0);break}if(o>>>0<l>>>0|(o|0)==(l|0)&n>>>0<j>>>0){Lb=be(j|0,l|0,n|0,o|0)|0;y=-(+(Lb>>>0)+4294967296.0*+(L>>>0));break}else{Lb=be(n|0,o|0,j|0,l|0)|0;y=+(Lb>>>0)+4294967296.0*+(L>>>0);break}}while(0);ka=1.0/+X(+(ma*ma+na*na));do if(y==0.0){m=E/(D*8.0);if(m<0.0){g=0.0-m;if(m>0.0){m=(m*4.0+0.0)/g;m=m<0.0?-m:m}else m=4.0;A=g;z=m+1.0;y=0.0;x=0.0}else{A=0.0;z=0.0;y=m+0.0;x=5.0}g=D/(E*2.0);if(g<0.0){m=y-g;if(y<0.0|g>0.0){g=(y*x+g*4.0)/m;g=g<0.0?-g:g}else g=x<4.0?4.0:x;x=g+1.0;K=z;y=m;H=A;break}else{m=A+g;if(A<0.0?A>0.0|g>0.0:0){K=(A*z-g*4.0)/m;K=(K<0.0?-K:K)+1.0;H=m;break}K=z<4.0?5.0:z+1.0;H=m;break}}else{m=y*y;m=+X(+(z*(D*(E*E+m))))/m;h=m<0.0;do if((e|0)==2){if(!h){C=0.0;x=0.0;B=m+0.0;A=10.0;break}g=0.0-m;if(m>0.0){m=(m*9.0+0.0)/g;m=m<0.0?-m:m}else m=9.0;C=g;x=m+1.0;B=0.0;A=0.0}else{if(!h){C=m+0.0;x=10.0;B=0.0;A=0.0;break}g=0.0-m;if(m>0.0){m=(m*9.0+0.0)/g;m=m<0.0?-m:m}else m=9.0;C=0.0;x=0.0;B=g;A=m+1.0}while(0);m=D+z;if(D<0.0|z<0.0?D>0.0|z>0.0:0){g=(D-z)/m;if(g<0.0)g=-g}else g=1.0;m=E*m/(y*(y*2.0));g=g+1.0+1.0+1.0+4.0+1.0;if(m<0.0){z=B-m;if(B<0.0|m>0.0){g=(B*A+m*g)/z;g=g<0.0?-g:g}else g=A<g?g:A;K=g+1.0;y=C;H=z;break}else{y=C+m;if(C<0.0?C>0.0|m>0.0:0){x=(C*x-m*g)/y;x=(x<0.0?-x:x)+1.0;K=A;H=B;break}x=(x<g?g:x)+1.0;K=A;H=B;break}}while(0);g=(F+aa)*.5;if(g<0.0){m=0.0-g;if(g>0.0){g=(g*0.0+0.0)/m;g=g<0.0?-g:g}else g=0.0;C=0.0;D=0.0;F=g+1.0}else{C=g+0.0;D=1.0;m=0.0;F=0.0}if(ba<0.0){A=-ba;g=x;E=y*A;z=K;A=H*A}else{g=K;E=ba*H;z=x;A=ba*y}B=g+0.0+1.0;g=z+0.0+1.0;fa=C+A;if(C<0.0|A<0.0?C>0.0|A>0.0:0){g=(C*D-A*g)/fa;g=g<0.0?-g:g}else g=D<g?g:D;da=g+1.0;ea=m+E;if(m<0.0|E<0.0?m>0.0|E>0.0:0){g=(m*F-E*B)/ea;g=g<0.0?-g:g}else g=F<B?B:F;ca=g+1.0;g=(ha+ga)*.5;if(g<0.0){m=0.0-g;if(g>0.0){g=(g*0.0+0.0)/m;g=g<0.0?-g:g}else g=0.0;A=0.0;B=0.0;D=g+1.0}else{A=g+0.0;B=1.0;m=0.0;D=0.0}if(ia<0.0){ia=-ia;z=x;C=y*ia;g=K;x=H*ia}else{z=K;C=ia*H;g=x;x=ia*y}y=z+0.0+1.0;g=g+0.0+1.0;ba=A+x;if(A<0.0|x<0.0?A>0.0|x>0.0:0){g=(A*B-x*g)/ba;g=g<0.0?-g:g}else g=B<g?g:B;K=g+1.0;aa=m+C;if(m<0.0|C<0.0?m>0.0|C>0.0:0){g=(m*D-C*y)/aa;g=g<0.0?-g:g}else g=D<y?y:D;H=g+1.0;g=ma*ja;if(g<0.0){m=0.0-g;if(g>0.0){g=(g+0.0)/m;g=g<0.0?-g:g}else g=1.0;z=0.0;A=0.0;y=g+1.0}else{z=g+0.0;A=2.0;m=0.0;y=0.0}g=na*la;do if(g<0.0){x=m-g;if(m<0.0|g>0.0){g=(m*y+g)/x;g=g<0.0?-g:g}else g=y<1.0?1.0:y;m=x;C=g+1.0;x=z;D=A}else{x=z+g;if(z<0.0?z>0.0|g>0.0:0){D=(z*A-g)/x;C=y;D=(D<0.0?-D:D)+1.0;break}C=y;D=A<1.0?2.0:A+1.0}while(0);if(ma<0.0){z=-ma;g=da;B=fa*z;y=ca;z=ea*z}else{g=ca;B=ma*ea;y=da;z=ma*fa}A=g+0.0+1.0;g=y+0.0+1.0;F=m+z;if(m<0.0|z<0.0?m>0.0|z>0.0:0){g=(m*C-z*g)/F;g=g<0.0?-g:g}else g=C<g?g:C;C=g+1.0;E=x+B;if(x<0.0|B<0.0?x>0.0|B>0.0:0){g=(x*D-B*A)/E;g=g<0.0?-g:g}else g=D<A?A:D;B=g+1.0;if(na<0.0){x=-na;g=K;z=ba*x;m=H;x=aa*x}else{g=H;z=na*aa;m=K;x=na*ba}y=g+0.0+1.0;g=m+0.0+1.0;m=F+x;do if(F<0.0|x<0.0){if(!(F>0.0|x>0.0)){Hb=146;break}g=(F*C-x*g)/m;g=g<0.0?-g:g}else Hb=146;while(0);if((Hb|0)==146)g=C<g?g:C;x=g+1.0;A=E+z;do if(E<0.0|z<0.0){if(!(E>0.0|z>0.0)){Hb=150;break}g=(E*B-z*y)/A;g=g<0.0?-g:g}else Hb=150;while(0);if((Hb|0)==150)g=B<y?y:B;g=g+1.0;if(m<A){y=g;g=x;z=A}else{y=x;z=m;m=A}if(ka<0.0){x=g;g=y;A=-(ka*z);m=-(ka*m)}else{x=y;A=ka*m;m=ka*z}y=g+3.0+1.0;g=x+3.0+1.0;C=fa+m;l=fa<0.0;do if(l|m<0.0){if(!(fa>0.0|m>0.0)){Hb=159;break}g=(fa*da-m*g)/C;g=g<0.0?-g:g}else Hb=159;while(0);if((Hb|0)==159)g=da<g?g:da;z=g+1.0;B=ea+A;h=ea<0.0;do if(h|A<0.0){if(!(ea>0.0|A>0.0)){Hb=163;break}g=(ea*ca-A*y)/B;g=g<0.0?-g:g}else Hb=163;while(0);if((Hb|0)==163)g=ca<y?y:ca;x=g+1.0;g=fa-ea;m=ba-aa;j=ba<0.0|aa>0.0;y=C-B;n=C<0.0|B>0.0;p[f>>3]=g;O=f+8|0;p[O>>3]=m;P=f+16|0;p[P>>3]=y;i[f+24>>0]=1;do if((l|ea>0.0)&(fa>0.0|h)){g=(fa*da+ea*ca)/g;if(!(g<0.0))break;g=-g}else g=da<ca?ca:da;while(0);J=g+1.0>64.0;do if(j){if(!(ba>0.0|aa<0.0)){Hb=171;break}g=(ba*K+aa*H)/m;if(!(g<0.0))break;g=-g}else Hb=171;while(0);if((Hb|0)==171)g=K<H?H:K;M=g+1.0>64.0;do if(n){if(!(C>0.0|B<0.0)){Hb=176;break}g=(C*z+B*x)/y;if(!(g<0.0))break;g=-g}else Hb=176;while(0);if((Hb|0)==176)g=z<x?x:z;N=g+1.0>64.0;if(!(J|M|N)){r=Ib;return}j=k[wa>>2]|0;h=k[oa>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Kb=be(0,0,h|0,j|0)|0;Lb=L;k[Fa>>2]=Kb;k[Fa+4>>2]=Lb;k[Fa+256>>2]=(Lb|0)!=0?-2:-1;break}else{k[Fa+256>>2]=0;break}else{k[Fa>>2]=h;k[Fa+4>>2]=j;k[Fa+256>>2]=(j|0)!=0?2:1}while(0);j=k[d>>2]|0;h=k[Aa>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Kb=be(0,0,h|0,j|0)|0;Lb=L;k[Ga>>2]=Kb;k[Ga+4>>2]=Lb;k[Ga+256>>2]=(Lb|0)!=0?-2:-1;break}else{k[Ga+256>>2]=0;break}else{k[Ga>>2]=h;k[Ga+4>>2]=j;k[Ga+256>>2]=(j|0)!=0?2:1}while(0);Sc(pa,Fa,Fa);Sc(qa,Ga,Ga);Tc(Gb,pa,qa);s=k[ya>>2]|0;u=((s|0)<0)<<31>>31;v=k[va>>2]|0;w=((v|0)<0)<<31>>31;h=be(s|0,u|0,v|0,w|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Lb=be(0,0,h|0,j|0)|0;G=L;k[ib>>2]=Lb;k[ib+4>>2]=G;G=(G|0)!=0?-2:-1;k[ib+256>>2]=G;break}else{k[ib+256>>2]=0;G=0;break}else{k[ib>>2]=h;k[ib+4>>2]=j;G=(j|0)!=0?2:1;k[ib+256>>2]=G}while(0);l=k[b>>2]|0;n=((l|0)<0)<<31>>31;o=k[c>>2]|0;q=((o|0)<0)<<31>>31;h=be(l|0,n|0,o|0,q|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Lb=be(0,0,h|0,j|0)|0;I=L;k[rb>>2]=Lb;k[rb+4>>2]=I;I=(I|0)!=0?-2:-1;k[rb+256>>2]=I;break}else{k[rb+256>>2]=0;I=0;break}else{k[rb>>2]=h;k[rb+4>>2]=j;I=(j|0)!=0?2:1;k[rb+256>>2]=I}while(0);h=ge(o|0,q|0,l|0,n|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Kb=be(0,0,h|0,j|0)|0;Lb=L;k[hb>>2]=Kb;k[hb+4>>2]=Lb;k[hb+256>>2]=(Lb|0)!=0?-2:-1;break}else{k[hb+256>>2]=0;break}else{k[hb>>2]=h;k[hb+4>>2]=j;k[hb+256>>2]=(j|0)!=0?2:1}while(0);h=ge(s|0,u|0,v|0,w|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Kb=be(0,0,h|0,j|0)|0;Lb=L;k[pb>>2]=Kb;k[pb+4>>2]=Lb;k[pb+256>>2]=(Lb|0)!=0?-2:-1;break}else{k[pb+256>>2]=0;break}else{k[pb>>2]=h;k[pb+4>>2]=j;k[pb+256>>2]=(j|0)!=0?2:1}while(0);Sc(ra,Fa,ib);Sc(sa,Ga,rb);Tc(zb,ra,sa);Sc(ta,ib,Ga);Sc(ua,rb,Fa);Uc(Cb,ta,ua);j=k[wa>>2]|0;h=k[va>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Kb=be(0,0,h|0,j|0)|0;Lb=L;k[Da>>2]=Kb;k[Da+4>>2]=Lb;k[Da+256>>2]=(Lb|0)!=0?-2:-1;break}else{k[Da+256>>2]=0;break}else{k[Da>>2]=h;k[Da+4>>2]=j;k[Da+256>>2]=(j|0)!=0?2:1}while(0);j=k[b>>2]|0;h=k[Aa>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Kb=be(0,0,h|0,j|0)|0;Lb=L;k[Ea>>2]=Kb;k[Ea+4>>2]=Lb;k[Ea+256>>2]=(Lb|0)!=0?-2:-1;break}else{k[Ea+256>>2]=0;break}else{k[Ea>>2]=h;k[Ea+4>>2]=j;k[Ea+256>>2]=(j|0)!=0?2:1}while(0);Sc(xa,Fa,Ea);Sc(za,Ga,Da);Uc(Xa,xa,za);j=k[wa>>2]|0;h=k[ya>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Kb=be(0,0,h|0,j|0)|0;Lb=L;k[Da>>2]=Kb;k[Da+4>>2]=Lb;k[Da+256>>2]=(Lb|0)!=0?-2:-1;break}else{k[Da+256>>2]=0;break}else{k[Da>>2]=h;k[Da+4>>2]=j;k[Da+256>>2]=(j|0)!=0?2:1}while(0);j=k[c>>2]|0;h=k[Aa>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Kb=be(0,0,h|0,j|0)|0;Lb=L;k[Ea>>2]=Kb;k[Ea+4>>2]=Lb;k[Ea+256>>2]=(Lb|0)!=0?-2:-1;break}else{k[Ea+256>>2]=0;break}else{k[Ea>>2]=h;k[Ea+4>>2]=j;k[Ea+256>>2]=(j|0)!=0?2:1}while(0);Sc(Ba,Fa,Ea);Sc(Ca,Ga,Da);Uc(Ya,Ba,Ca);Tc(yb,Xa,Ya);h=Cb+256|0;if(!(k[h>>2]|0)){Sc(Ha,zb,zb);Sc(Ia,yb,yb);Uc(Bb,Ha,Ia);Sc(Ja,zb,yb);fe(Cb|0,Ja|0,260)|0;Sc(La,Cb,hb);k[bb>>2]=2;k[bb+256>>2]=1;Sc(Ma,La,bb);Sc(Na,Bb,ib);Tc(Ka,Ma,Na);fe(Eb|0,Ka|0,260)|0;fe(Fb|0,Gb|0,260)|0;Sc(Pa,Cb,yb);k[bb>>2]=2;k[bb+256>>2]=1;Sc(Qa,Pa,bb);Sc(Ra,Bb,zb);Tc(Oa,Qa,Ra);fe(Eb+260|0,Oa|0,260)|0;k[Fb+260>>2]=1;k[Fb+516>>2]=1;n=Eb+520|0;Sc(_a,Cb,pb);k[bb>>2]=2;k[bb+256>>2]=1;Sc($a,_a,bb);Sc(ab,Bb,rb);Tc(Za,$a,ab);fe(n|0,Za|0,260)|0;j=k[h>>2]|0;h=(j|0)>-1?j:0-j|0;a:do switch(h|0){case 0:{h=0;g=0.0;break}case 1:{g=+((k[Cb>>2]|0)>>>0);Hb=234;break}case 2:{g=+((k[Cb+4>>2]|0)>>>0)*4294967296.0+ +((k[Cb>>2]|0)>>>0);Hb=234;break}default:{g=+((k[Cb+(h+-3<<2)>>2]|0)>>>0)+(+((k[Cb+(h+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Cb+(h+-2<<2)>>2]|0)>>>0))*4294967296.0;l=h<<5;h=l+-96|0;g=(j|0)<0?-g:g;if((h|0)>1023){g=g*89884656743115795.0e291;h=l+-1119|0;if((h|0)<=1023)break a;h=l+-2142|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291;break a}if((h|0)>=-1022)break a;g=g*2.2250738585072014e-308;h=l+926|0;if((h|0)>=-1022)break a;h=l+1948|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}}while(0);if((Hb|0)==234){h=0;g=(j|0)<0?-g:g}Kb=ee(h+1023|0,0,52)|0;Lb=L;k[t>>2]=Kb;k[t+4>>2]=Lb;m=1.0/(g*+p[t>>3]);if(J){j=k[Eb+256>>2]|0;h=(j|0)>-1?j:0-j|0;b:do switch(h|0){case 0:{h=0;g=0.0;break}case 1:{g=+((k[Eb>>2]|0)>>>0);Hb=245;break}case 2:{g=+((k[Eb+4>>2]|0)>>>0)*4294967296.0+ +((k[Eb>>2]|0)>>>0);Hb=245;break}default:{g=+((k[Eb+(h+-3<<2)>>2]|0)>>>0)+(+((k[Eb+(h+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Eb+(h+-2<<2)>>2]|0)>>>0))*4294967296.0;l=h<<5;h=l+-96|0;g=(j|0)<0?-g:g;if((h|0)>1023){g=g*89884656743115795.0e291;h=l+-1119|0;if((h|0)<=1023)break b;h=l+-2142|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291;break b}if((h|0)>=-1022)break b;g=g*2.2250738585072014e-308;h=l+926|0;if((h|0)>=-1022)break b;h=l+1948|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}}while(0);if((Hb|0)==245){h=0;g=(j|0)<0?-g:g}Kb=ee(h+1023|0,0,52)|0;Lb=L;k[t>>2]=Kb;k[t+4>>2]=Lb;p[f>>3]=m*(g*+p[t>>3]*.25)}if(M){j=k[Eb+776>>2]|0;h=(j|0)>-1?j:0-j|0;c:do switch(h|0){case 0:{h=0;g=0.0;break}case 1:{g=+((k[n>>2]|0)>>>0);Hb=257;break}case 2:{g=+((k[Eb+524>>2]|0)>>>0)*4294967296.0+ +((k[n>>2]|0)>>>0);Hb=257;break}default:{g=+((k[Eb+520+(h+-3<<2)>>2]|0)>>>0)+(+((k[Eb+520+(h+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Eb+520+(h+-2<<2)>>2]|0)>>>0))*4294967296.0;l=h<<5;h=l+-96|0;g=(j|0)<0?-g:g;if((h|0)>1023){g=g*89884656743115795.0e291;h=l+-1119|0;if((h|0)<=1023)break c;h=l+-2142|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291;break c}if((h|0)>=-1022)break c;g=g*2.2250738585072014e-308;h=l+926|0;if((h|0)>=-1022)break c;h=l+1948|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}}while(0);if((Hb|0)==257){h=0;g=(j|0)<0?-g:g}Kb=ee(h+1023|0,0,52)|0;Lb=L;k[t>>2]=Kb;k[t+4>>2]=Lb;p[O>>3]=m*(g*+p[t>>3]*.25)}if(N){Xc(Db,Eb,Fb);g=+p[Db>>3];j=k[Db+8>>2]|0;do if((j|0)>1023){g=g*89884656743115795.0e291;h=j+-1023|0;if((h|0)<=1023)break;h=j+-2046|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291}else{if((j|0)>=-1022){h=j;break}g=g*2.2250738585072014e-308;h=j+1022|0;if((h|0)>=-1022)break;h=j+2044|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}while(0);h=ee(h+1023|0,0,52)|0;j=L;k[t>>2]=h;k[t+4>>2]=j;m=m*(g*+p[t>>3]*.25);j=k[Gb+256>>2]|0;h=(j|0)>-1?j:0-j|0;d:do switch(h|0){case 0:{h=0;g=0.0;break}case 1:{g=+((k[Gb>>2]|0)>>>0);Hb=275;break}case 2:{g=+((k[Gb+4>>2]|0)>>>0)*4294967296.0+ +((k[Gb>>2]|0)>>>0);Hb=275;break}default:{g=+((k[Gb+(h+-3<<2)>>2]|0)>>>0)+(+((k[Gb+(h+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Gb+(h+-2<<2)>>2]|0)>>>0))*4294967296.0;l=h<<5;h=l+-96|0;g=(j|0)<0?-g:g;if((h|0)>1023){g=g*89884656743115795.0e291;h=l+-1119|0;if((h|0)<=1023)break d;h=l+-2142|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291;break d}if((h|0)>=-1022)break d;g=g*2.2250738585072014e-308;h=l+926|0;if((h|0)>=-1022)break d;h=l+1948|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}}while(0);if((Hb|0)==275){h=0;g=(j|0)<0?-g:g}Kb=ee(h+1023|0,0,52)|0;Lb=L;k[t>>2]=Kb;k[t+4>>2]=Lb;na=m/+X(+(g*+p[t>>3]));p[P>>3]=na}}else{Sc(Sa,zb,zb);Sc(Ta,Cb,Cb);Tc(Ua,Sa,Ta);Sc(Va,Ua,Xa);Sc(Wa,Va,Ya);k[bb>>2]=4;k[bb+256>>2]=1;Sc(Bb,Wa,bb);j=k[h>>2]|0;h=(j|0)>-1?j:0-j|0;e:do switch(h|0){case 0:{h=0;g=0.0;break}case 1:{g=+((k[Cb>>2]|0)>>>0);Hb=287;break}case 2:{g=+((k[Cb+4>>2]|0)>>>0)*4294967296.0+ +((k[Cb>>2]|0)>>>0);Hb=287;break}default:{g=+((k[Cb+(h+-3<<2)>>2]|0)>>>0)+(+((k[Cb+(h+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Cb+(h+-2<<2)>>2]|0)>>>0))*4294967296.0;l=h<<5;h=l+-96|0;g=(j|0)<0?-g:g;if((h|0)>1023){g=g*89884656743115795.0e291;h=l+-1119|0;if((h|0)<=1023)break e;h=l+-2142|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291;break e}if((h|0)>=-1022)break e;g=g*2.2250738585072014e-308;h=l+926|0;if((h|0)>=-1022)break e;h=l+1948|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}}while(0);if((Hb|0)==287){h=0;g=(j|0)<0?-g:g}Kb=ee(h+1023|0,0,52)|0;Lb=L;k[t>>2]=Kb;k[t+4>>2]=Lb;m=1.0/(g*+p[t>>3]);m=m*m;do if(J|N){Sc(db,hb,Cb);Sc(eb,db,Cb);Sc(gb,zb,yb);Sc(fb,gb,ib);Tc(cb,eb,fb);fe(Eb|0,cb|0,260)|0;k[Fb>>2]=1;k[Fb+256>>2]=1;fe(Eb+260|0,ib|0,256)|0;k[Eb+516>>2]=(e|0)==2?0-G|0:G;fe(Fb+260|0,Bb|0,260)|0;if(!J)break;Xc(jb,Eb,Fb);g=+p[jb>>3];j=k[jb+8>>2]|0;do if((j|0)>1023){g=g*89884656743115795.0e291;h=j+-1023|0;if((h|0)<=1023)break;h=j+-2046|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291}else{if((j|0)>=-1022){h=j;break}g=g*2.2250738585072014e-308;h=j+1022|0;if((h|0)>=-1022)break;h=j+2044|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}while(0);Kb=ee(h+1023|0,0,52)|0;Lb=L;k[t>>2]=Kb;k[t+4>>2]=Lb;p[f>>3]=m*(g*+p[t>>3]*.5)}while(0);do if(M|N){j=Eb+520|0;Sc(lb,pb,Cb);Sc(mb,lb,Cb);Sc(ob,zb,yb);Sc(nb,ob,rb);Tc(kb,mb,nb);fe(j|0,kb|0,260)|0;h=Fb+520|0;k[h>>2]=1;k[Fb+776>>2]=1;fe(Eb+780|0,rb|0,256)|0;k[Eb+1036>>2]=(e|0)==2?0-I|0:I;fe(Fb+780|0,Bb|0,260)|0;if(!M)break;Xc(qb,j,h);g=+p[qb>>3];j=k[qb+8>>2]|0;do if((j|0)>1023){g=g*89884656743115795.0e291;h=j+-1023|0;if((h|0)<=1023)break;h=j+-2046|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291}else{if((j|0)>=-1022){h=j;break}g=g*2.2250738585072014e-308;h=j+1022|0;if((h|0)>=-1022)break;h=j+2044|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}while(0);Kb=ee(h+1023|0,0,52)|0;Lb=L;k[t>>2]=Kb;k[t+4>>2]=Lb;p[O>>3]=m*(g*+p[t>>3]*.5)}while(0);if(N){Sc(sb,Fb,Gb);fe(Fb|0,sb|0,260)|0;j=Fb+260|0;Sc(tb,j,Gb);fe(j|0,tb|0,260)|0;Sc(wb,Cb,Cb);Sc(xb,zb,zb);Tc(vb,wb,xb);Sc(ub,yb,vb);fe(Eb+520|0,ub|0,260)|0;k[Fb+520>>2]=1;k[Fb+776>>2]=1;j=k[zb+256>>2]|0;fe(Eb+780|0,zb|0,256)|0;k[Eb+1036>>2]=(e|0)==2?0-j|0:j;fe(Fb+780|0,Bb|0,260)|0;Wc(Ab,a,Eb,Fb);g=+p[Ab>>3];j=k[Ab+8>>2]|0;do if((j|0)>1023){g=g*89884656743115795.0e291;h=j+-1023|0;if((h|0)<=1023)break;h=j+-2046|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291}else{if((j|0)>=-1022){h=j;break}g=g*2.2250738585072014e-308;h=j+1022|0;if((h|0)>=-1022)break;h=j+2044|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}while(0);h=ee(h+1023|0,0,52)|0;j=L;k[t>>2]=h;k[t+4>>2]=j;m=m*(g*+p[t>>3]*.5);j=k[Gb+256>>2]|0;h=(j|0)>-1?j:0-j|0;f:do switch(h|0){case 0:{h=0;g=0.0;break}case 1:{g=+((k[Gb>>2]|0)>>>0);Hb=322;break}case 2:{g=+((k[Gb+4>>2]|0)>>>0)*4294967296.0+ +((k[Gb>>2]|0)>>>0);Hb=322;break}default:{g=+((k[Gb+(h+-3<<2)>>2]|0)>>>0)+(+((k[Gb+(h+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Gb+(h+-2<<2)>>2]|0)>>>0))*4294967296.0;l=h<<5;h=l+-96|0;g=(j|0)<0?-g:g;if((h|0)>1023){g=g*89884656743115795.0e291;h=l+-1119|0;if((h|0)<=1023)break f;h=l+-2142|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291;break f}if((h|0)>=-1022)break f;g=g*2.2250738585072014e-308;h=l+926|0;if((h|0)>=-1022)break f;h=l+1948|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}}while(0);if((Hb|0)==322){h=0;g=(j|0)<0?-g:g}Kb=ee(h+1023|0,0,52)|0;Lb=L;k[t>>2]=Kb;k[t+4>>2]=Lb;na=m/+X(+(g*+p[t>>3]));p[P>>3]=na}}r=Ib;return}function Rc(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0.0,h=0,j=0,l=0,m=0.0,n=0,o=0.0,q=0,s=0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0,D=0.0,E=0.0,F=0,G=0.0,H=0,I=0.0,J=0.0,K=0.0,M=0,N=0,O=0.0,P=0,Q=0,R=0,S=0,T=0.0,U=0.0,V=0,W=0,Y=0,Z=0,_=0,$=0,aa=0.0,ba=0,ca=0.0,da=0,ea=0.0,fa=0.0,ga=0.0,ia=0.0,ja=0.0,ka=0,la=0,ma=0.0,na=0,oa=0,pa=0,qa=0.0,ra=0,sa=0.0,ta=0.0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0.0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Kb=0,Lb=0,Mb=0,Nb=0,Ob=0,Pb=0,Qb=0,Rb=0,Sb=0,Tb=0,Ub=0,Vb=0,Wb=0,Xb=0,Yb=0,Zb=0,_b=0,$b=0,ac=0,bc=0,cc=0,dc=0,ec=0,fc=0,gc=0,hc=0,ic=0,jc=0,kc=0,lc=0,mc=0,nc=0,oc=0,pc=0,qc=0,rc=0,sc=0,tc=0,uc=0,vc=0,wc=0,xc=0,yc=0,zc=0,Ac=0,Bc=0,Cc=0,Dc=0,Ec=0,Fc=0,Gc=0,Hc=0,Ic=0,Jc=0,Kc=0,Lc=0,Mc=0,Nc=0,Oc=0,Pc=0,Qc=0,Rc=0,Wc=0,Yc=0,Zc=0,_c=0,$c=0,bd=0,cd=0,dd=0,ed=0,fd=0,gd=0,hd=0,id=0,jd=0,kd=0,ld=0;ld=r;r=r+34960|0;id=ld+34696|0;gd=ld+34176|0;hd=ld+33656|0;cd=ld+33136|0;jd=ld+32096|0;kd=ld+31056|0;Oc=ld+30792|0;Ca=ld+30532|0;Da=ld+30272|0;Ha=ld+30012|0;Ea=ld+29752|0;Fa=ld+29492|0;wb=ld+29232|0;xb=ld+28972|0;yb=ld+28712|0;dd=ld+28452|0;zb=ld+28192|0;Ab=ld+27932|0;fd=ld+27672|0;Bb=ld+27412|0;Cb=ld+27152|0;$b=ld+26892|0;Db=ld+26632|0;Eb=ld+26372|0;Fb=ld+26112|0;Gb=ld+25852|0;ac=ld+25592|0;bc=ld+25332|0;cc=ld+25072|0;dc=ld+96|0;Pc=ld+24812|0;Cc=ld+24552|0;Dc=ld+24292|0;Ec=ld+24032|0;Fc=ld+23772|0;Qc=ld+23512|0;Rc=ld+23252|0;Wc=ld+22992|0;Yc=ld+80|0;Zc=ld+22732|0;_c=ld+22472|0;$c=ld+22212|0;bd=ld+64|0;Ia=ld+21952|0;Ja=ld+21692|0;Ka=ld+21432|0;Na=ld+21172|0;Oa=ld+20912|0;Pa=ld+20652|0;Qa=ld+20392|0;Ra=ld+20132|0;Sa=ld+19872|0;Ta=ld+19612|0;Lc=ld+19352|0;Ua=ld+19092|0;Mc=ld+18832|0;Va=ld+18572|0;xc=ld+18312|0;Wa=ld+18052|0;Xa=ld+17792|0;Ya=ld+17532|0;Za=ld+17272|0;_a=ld+17012|0;$a=ld+16752|0;ab=ld+16492|0;bb=ld+16232|0;cb=ld+15972|0;db=ld+15712|0;eb=ld+15452|0;fb=ld+15192|0;gb=ld+14932|0;hb=ld+14672|0;ib=ld+14412|0;jb=ld+14152|0;kb=ld+13892|0;lb=ld+13632|0;mb=ld+13372|0;nb=ld+13112|0;ob=ld+12852|0;pb=ld+12592|0;qb=ld+12332|0;rb=ld+12072|0;sb=ld+11812|0;tb=ld+11552|0;ub=ld+11292|0;vb=ld+48|0;Hb=ld+11032|0;Ib=ld+10772|0;Jb=ld+10512|0;Kb=ld+10252|0;Lb=ld+9992|0;Mb=ld+9732|0;Nb=ld+9472|0;Ob=ld+9212|0;Pb=ld+8952|0;Qb=ld+8692|0;Rb=ld+8432|0;Sb=ld+8172|0;Tb=ld+7912|0;Ub=ld+7652|0;Vb=ld+7392|0;Wb=ld+7132|0;Xb=ld+6872|0;Yb=ld+6612|0;Zb=ld+6352|0;_b=ld+32|0;rc=ld+6092|0;sc=ld+5832|0;tc=ld+5572|0;uc=ld+5312|0;vc=ld+5052|0;wc=ld+4792|0;ec=ld+4532|0;fc=ld+4272|0;gc=ld+4012|0;hc=ld+3752|0;ic=ld+3492|0;jc=ld+3232|0;kc=ld+2972|0;lc=ld+2712|0;mc=ld+2452|0;nc=ld+2192|0;oc=ld+1932|0;pc=ld+1672|0;qc=ld+1412|0;yc=ld+16|0;Gc=ld+1152|0;Hc=ld+892|0;Ic=ld+632|0;Jc=ld+372|0;Kc=ld+112|0;Nc=ld;C=k[c>>2]|0;zc=c+8|0;s=k[zc>>2]|0;o=+(s|0);aa=+(C|0)-o;Ga=c+4|0;W=k[Ga>>2]|0;Ac=c+12|0;M=k[Ac>>2]|0;x=+(M|0);ca=+(W|0)-x;Ma=d+8|0;$=k[Ma>>2]|0;P=k[d>>2]|0;u=+(P|0);B=+($|0)-u;La=d+12|0;Y=k[La>>2]|0;Bc=d+4|0;R=k[Bc>>2]|0;y=+(R|0);I=+(Y|0)-y;F=((W|0)<0)<<31>>31;N=((M|0)<0)<<31>>31;ua=be(W|0,F|0,M|0,N|0)|0;va=L;V=((C|0)<0)<<31>>31;H=((s|0)<0)<<31>>31;wa=be(C|0,V|0,s|0,H|0)|0;xa=L;Z=((Y|0)<0)<<31>>31;S=((R|0)<0)<<31>>31;na=be(Y|0,Z|0,R|0,S|0)|0;oa=L;_=(($|0)<0)<<31>>31;Q=((P|0)<0)<<31>>31;ka=be($|0,_|0,P|0,Q|0)|0;la=L;ya=(va|0)<0;za=be(0,0,ua|0,va|0)|0;ua=ya?za:ua;va=ya?L:va;za=(xa|0)<0;pa=be(0,0,wa|0,xa|0)|0;wa=za?pa:wa;xa=za?L:xa;pa=(oa|0)<0;ra=be(0,0,na|0,oa|0)|0;na=pa?ra:na;oa=pa?L:oa;ra=(la|0)<0;h=be(0,0,ka|0,la|0)|0;ka=ra?h:ka;la=ra?L:la;h=ne(ka|0,la|0,ua|0,va|0)|0;j=L;l=ne(na|0,oa|0,wa|0,xa|0)|0;n=L;q=za^pa;do if(ya^ra){if(!q){Aa=ge(l|0,n|0,h|0,j|0)|0;Ba=-(+(Aa>>>0)+4294967296.0*+(L>>>0));break}if(j>>>0>n>>>0|(j|0)==(n|0)&h>>>0>l>>>0){Aa=be(h|0,j|0,l|0,n|0)|0;Ba=-(+(Aa>>>0)+4294967296.0*+(L>>>0));break}else{Aa=be(l|0,n|0,h|0,j|0)|0;Ba=+(Aa>>>0)+4294967296.0*+(L>>>0);break}}else{if(q){Aa=ge(l|0,n|0,h|0,j|0)|0;Ba=+(Aa>>>0)+4294967296.0*+(L>>>0);break}if(j>>>0<n>>>0|(j|0)==(n|0)&h>>>0<l>>>0){Aa=be(l|0,n|0,h|0,j|0)|0;Ba=-(+(Aa>>>0)+4294967296.0*+(L>>>0));break}else{Aa=be(h|0,j|0,l|0,n|0)|0;Ba=+(Aa>>>0)+4294967296.0*+(L>>>0);break}}while(0);Aa=Ba<0.0;U=aa*aa+ca*ca;if(Ba==0.0){n=be(R|0,S|0,M|0,N|0)|0;l=L;j=be(P|0,Q|0,s|0,H|0)|0;h=L;q=(l|0)<0;ra=be(0,0,n|0,l|0)|0;l=q?L:l;Aa=(h|0)<0;pa=be(0,0,j|0,h|0)|0;h=ne((Aa?pa:j)|0,(Aa?L:h)|0,ua|0,va|0)|0;j=L;l=ne((q?ra:n)|0,l|0,wa|0,xa|0)|0;n=L;q=za^q;do if(ya^Aa){if(!q){Aa=ge(h|0,j|0,l|0,n|0)|0;T=-(+(Aa>>>0)+4294967296.0*+(L>>>0));break}if(j>>>0>n>>>0|(j|0)==(n|0)&h>>>0>l>>>0){Aa=be(h|0,j|0,l|0,n|0)|0;T=-(+(Aa>>>0)+4294967296.0*+(L>>>0));break}else{Aa=be(l|0,n|0,h|0,j|0)|0;T=+(Aa>>>0)+4294967296.0*+(L>>>0);break}}else{if(q){Aa=ge(h|0,j|0,l|0,n|0)|0;T=+(Aa>>>0)+4294967296.0*+(L>>>0);break}if(j>>>0<n>>>0|(j|0)==(n|0)&h>>>0<l>>>0){Aa=be(l|0,n|0,h|0,j|0)|0;T=-(+(Aa>>>0)+4294967296.0*+(L>>>0));break}else{Aa=be(h|0,j|0,l|0,n|0)|0;T=+(Aa>>>0)+4294967296.0*+(L>>>0);break}}while(0);F=k[b>>2]|0;C=((F|0)<0)<<31>>31;n=be(F|0,C|0,s|0,H|0)|0;l=L;H=k[b+4>>2]|0;s=((H|0)<0)<<31>>31;j=be(H|0,s|0,M|0,N|0)|0;h=L;q=(l|0)<0;ra=be(0,0,n|0,l|0)|0;l=q?L:l;Aa=(h|0)<0;pa=be(0,0,j|0,h|0)|0;h=ne((Aa?pa:j)|0,(Aa?L:h)|0,wa|0,xa|0)|0;j=L;l=ne((q?ra:n)|0,l|0,ua|0,va|0)|0;n=L;q=ya^q;do if(za^Aa){if(!q){Aa=ge(h|0,j|0,l|0,n|0)|0;m=-(+(Aa>>>0)+4294967296.0*+(L>>>0));break}if(j>>>0>n>>>0|(j|0)==(n|0)&h>>>0>l>>>0){Aa=be(h|0,j|0,l|0,n|0)|0;m=-(+(Aa>>>0)+4294967296.0*+(L>>>0));break}else{Aa=be(l|0,n|0,h|0,j|0)|0;m=+(Aa>>>0)+4294967296.0*+(L>>>0);break}}else{if(q){Aa=ge(h|0,j|0,l|0,n|0)|0;m=+(Aa>>>0)+4294967296.0*+(L>>>0);break}if(j>>>0<n>>>0|(j|0)==(n|0)&h>>>0<l>>>0){Aa=be(l|0,n|0,h|0,j|0)|0;m=-(+(Aa>>>0)+4294967296.0*+(L>>>0));break}else{Aa=be(h|0,j|0,l|0,n|0)|0;m=+(Aa>>>0)+4294967296.0*+(L>>>0);break}}while(0);l=be(H|0,s|0,R|0,S|0)|0;j=L;q=be(F|0,C|0,P|0,Q|0)|0;n=L;h=(j|0)<0;ra=be(0,0,l|0,j|0)|0;j=h?L:j;Aa=(n|0)<0;pa=be(0,0,q|0,n|0)|0;n=ne((Aa?pa:q)|0,(Aa?L:n)|0,ua|0,va|0)|0;q=L;j=ne((h?ra:l)|0,j|0,wa|0,xa|0)|0;l=L;h=za^h;do if(ya^Aa){if(!h){Aa=ge(n|0,q|0,j|0,l|0)|0;g=-(+(Aa>>>0)+4294967296.0*+(L>>>0));break}if(q>>>0>l>>>0|(q|0)==(l|0)&n>>>0>j>>>0){Aa=be(n|0,q|0,j|0,l|0)|0;g=-(+(Aa>>>0)+4294967296.0*+(L>>>0));break}else{Aa=be(j|0,l|0,n|0,q|0)|0;g=+(Aa>>>0)+4294967296.0*+(L>>>0);break}}else{if(h){Aa=ge(n|0,q|0,j|0,l|0)|0;g=+(Aa>>>0)+4294967296.0*+(L>>>0);break}if(q>>>0<l>>>0|(q|0)==(l|0)&n>>>0<j>>>0){Aa=be(j|0,l|0,n|0,q|0)|0;g=-(+(Aa>>>0)+4294967296.0*+(L>>>0));break}else{Aa=be(n|0,q|0,j|0,l|0)|0;g=+(Aa>>>0)+4294967296.0*+(L>>>0);break}}while(0);z=m*g;G=(o+u)*.5;g=aa*(G-+(F|0));if(g<0.0){m=0.0-g;if(g>0.0){g=(g+0.0)/m;g=g<0.0?-g:g}else g=1.0;v=0.0;w=0.0;u=g+1.0}else{v=g+0.0;w=2.0;m=0.0;u=0.0}O=(x+y)*.5;g=ca*(O-+(H|0));do if(g<0.0){o=m-g;if(m<0.0|g>0.0){g=(m*u+g)/o;g=g<0.0?-g:g}else g=u<1.0?1.0:u;m=o;x=g+1.0;y=v}else{o=v+g;if(v<0.0?v>0.0|g>0.0:0){w=(v*w-g)/o;x=u;y=o;w=(w<0.0?-w:w)+1.0;break}x=u;y=o;w=w<1.0?2.0:w+1.0}while(0);u=+X(+z);h=u<0.0;do if((e|0)==2)if(h){v=y-u;if(y<0.0|u>0.0){g=(y*w+u*2.5)/v;g=g<0.0?-g:g}else g=w<2.5?2.5:w;u=x;o=g+1.0;g=v;break}else{g=m+u;if(m<0.0?m>0.0|u>0.0:0){u=(m*x-u*2.5)/g;u=(u<0.0?-u:u)+1.0;m=g;o=w;g=y;break}u=x<2.5?3.5:x+1.0;m=g;o=w;g=y;break}else if(h){o=m-u;if(m<0.0|u>0.0){g=(m*x+u*2.5)/o;g=g<0.0?-g:g}else g=x<2.5?2.5:x;u=g+1.0;m=o;o=w;g=y;break}else{g=y+u;if(y<0.0?y>0.0|u>0.0:0){o=(y*w-u*2.5)/g;u=x;o=(o<0.0?-o:o)+1.0;break}u=x;o=w<2.5?3.5:w+1.0;break}while(0);D=u+3.0;E=m/U;A=o+3.0;B=g/U;if(G<0.0){g=0.0-G;if(G>0.0){m=(G*0.0+0.0)/g;m=m<0.0?-m:m}else m=0.0;v=0.0;w=0.0;z=g;y=m+1.0}else{v=G+0.0;w=1.0;z=0.0;y=0.0}if(aa<0.0){o=-aa;g=D;x=E*o;m=A;o=B*o}else{g=A;x=aa*B;m=D;o=aa*E}u=g+0.0+1.0;g=m+0.0+1.0;K=v+o;if(v<0.0|o<0.0?v>0.0|o>0.0:0){g=(v*w-o*g)/K;g=g<0.0?-g:g}else g=w<g?g:w;I=g+1.0;J=z+x;if(z<0.0|x<0.0?z>0.0|x>0.0:0){g=(z*y-x*u)/J;g=g<0.0?-g:g}else g=y<u?u:y;G=g+1.0;if(O<0.0){g=0.0-O;if(O>0.0){m=(O*0.0+0.0)/g;m=m<0.0?-m:m}else m=0.0;u=0.0;v=0.0;y=g;x=m+1.0}else{u=O+0.0;v=1.0;y=0.0;x=0.0}if(ca<0.0){m=-ca;o=D;w=E*m;g=A;m=B*m}else{o=A;w=ca*B;g=D;m=ca*E}o=o+0.0+1.0;g=g+0.0+1.0;D=u+m;if(u<0.0|m<0.0?u>0.0|m>0.0:0){g=(u*v-m*g)/D;g=g<0.0?-g:g}else g=v<g?g:v;A=g+1.0;B=y+w;if(y<0.0|w<0.0?y>0.0|w>0.0:0){g=(y*x-w*o)/B;g=g<0.0?-g:g}else g=x<o?o:x;u=g+1.0;o=T*.5/+X(+U);h=o<0.0;a:do if(T<0.0)if(h){m=K-o;if(K<0.0|o>0.0){o=(K*I+o*5.0)/m;o=o<0.0?-o:o}else o=I<5.0?5.0:I;g=J;z=m;x=G;w=o+1.0;break}else{g=J+o;do if(J<0.0){if(!(J>0.0|o>0.0))break;x=(J*G-o*5.0)/g;z=K;x=(x<0.0?-x:x)+1.0;w=I;break a}while(0);z=K;x=G<5.0?6.0:G+1.0;w=I;break}else if(h){g=J-o;if(J<0.0|o>0.0){m=(J*G+o*5.0)/g;m=m<0.0?-m:m}else m=G<5.0?5.0:G;z=K;x=m+1.0;w=I;break}else{m=K+o;do if(K<0.0){if(!(K>0.0|o>0.0))break;w=(K*I-o*5.0)/m;g=J;z=m;x=G;w=(w<0.0?-w:w)+1.0;break a}while(0);g=J;z=m;x=G;w=I<5.0?6.0:I+1.0;break}while(0);y=K-J;do if(K<0.0|J>0.0){if(!(K>0.0|J<0.0)){ed=132;break}o=(K*I+J*G)/y;if(!(o<0.0))break;o=-o}else ed=132;while(0);if((ed|0)==132)o=I<G?G:I;v=D-B;do if(D<0.0|B>0.0){if(!(D>0.0|B<0.0)){ed=137;break}m=(D*A+B*u)/v;if(!(m<0.0))break;m=-m}else ed=137;while(0);if((ed|0)==137)m=A<u?u:A;u=z-g;do if(g>0.0|z<0.0){if(!(g<0.0|z>0.0)){ed=142;break}g=(x*g+w*z)/u;if(!(g<0.0))break;g=-g}else ed=142;while(0);if((ed|0)==142)g=w<x?x:w;p[f>>3]=y;p[f+8>>3]=v;p[f+16>>3]=u;i[f+24>>0]=1}else{J=+X(+U);qa=+X(+(B*B+I*I));n=be(R|0,S|0,Y|0,Z|0)|0;l=L;q=(l|0)<0;da=be(0,0,n|0,l|0)|0;l=q?L:l;h=ne(ka|0,la|0,wa|0,xa|0)|0;j=L;l=ne((q?da:n)|0,l|0,ua|0,va|0)|0;n=L;q=ya^q;do if(za^ra){if(!q){da=ge(h|0,j|0,l|0,n|0)|0;o=-(+(da>>>0)+4294967296.0*+(L>>>0));break}if(j>>>0>n>>>0|(j|0)==(n|0)&h>>>0>l>>>0){da=be(h|0,j|0,l|0,n|0)|0;o=-(+(da>>>0)+4294967296.0*+(L>>>0));break}else{da=be(l|0,n|0,h|0,j|0)|0;o=+(da>>>0)+4294967296.0*+(L>>>0);break}}else{if(q){da=ge(h|0,j|0,l|0,n|0)|0;o=+(da>>>0)+4294967296.0*+(L>>>0);break}if(j>>>0<n>>>0|(j|0)==(n|0)&h>>>0<l>>>0){da=be(l|0,n|0,h|0,j|0)|0;o=-(+(da>>>0)+4294967296.0*+(L>>>0));break}else{da=be(h|0,j|0,l|0,n|0)|0;o=+(da>>>0)+4294967296.0*+(L>>>0);break}}while(0);if(!(o<0.0)){g=J*qa;m=g+o;if(g<0.0?g>0.0|o>0.0:0){sa=(o-g*5.0)/m;ta=m;sa=(sa<0.0?-sa:sa)+1.0}else{ta=m;sa=6.0}}else{m=Ba*Ba;g=J*qa;u=g-o;if(g<0.0|o>0.0){g=(g*5.0+o)/u;if(g<0.0)g=-g}else g=5.0;ta=m/u;sa=g+1.0+3.0+1.0}H=k[b+4>>2]|0;s=((H|0)<0)<<31>>31;n=be(W|0,F|0,H|0,s|0)|0;l=L;ba=k[b>>2]|0;da=((ba|0)<0)<<31>>31;j=be(C|0,V|0,ba|0,da|0)|0;h=L;q=(l|0)<0;R=be(0,0,n|0,l|0)|0;l=q?L:l;S=(h|0)<0;Q=be(0,0,j|0,h|0)|0;h=ne((S?Q:j)|0,(S?L:h)|0,ua|0,va|0)|0;j=L;l=ne((q?R:n)|0,l|0,wa|0,xa|0)|0;n=L;q=za^q;do if(ya^S){if(!q){S=ge(h|0,j|0,l|0,n|0)|0;m=-(+(S>>>0)+4294967296.0*+(L>>>0));break}if(j>>>0>n>>>0|(j|0)==(n|0)&h>>>0>l>>>0){S=be(h|0,j|0,l|0,n|0)|0;m=-(+(S>>>0)+4294967296.0*+(L>>>0));break}else{S=be(l|0,n|0,h|0,j|0)|0;m=+(S>>>0)+4294967296.0*+(L>>>0);break}}else{if(q){S=ge(h|0,j|0,l|0,n|0)|0;m=+(S>>>0)+4294967296.0*+(L>>>0);break}if(j>>>0<n>>>0|(j|0)==(n|0)&h>>>0<l>>>0){S=be(l|0,n|0,h|0,j|0)|0;m=-(+(S>>>0)+4294967296.0*+(L>>>0));break}else{S=be(h|0,j|0,l|0,n|0)|0;m=+(S>>>0)+4294967296.0*+(L>>>0);break}}while(0);n=be($|0,_|0,ba|0,da|0)|0;l=L;j=be(Y|0,Z|0,H|0,s|0)|0;h=L;q=(l|0)<0;R=be(0,0,n|0,l|0)|0;l=q?L:l;S=(h|0)<0;Q=be(0,0,j|0,h|0)|0;h=ne((S?Q:j)|0,(S?L:h)|0,ka|0,la|0)|0;j=L;l=ne((q?R:n)|0,l|0,na|0,oa|0)|0;n=L;q=pa^q;do if(ra^S){if(!q){S=ge(h|0,j|0,l|0,n|0)|0;g=-(+(S>>>0)+4294967296.0*+(L>>>0));break}if(j>>>0>n>>>0|(j|0)==(n|0)&h>>>0>l>>>0){S=be(h|0,j|0,l|0,n|0)|0;g=-(+(S>>>0)+4294967296.0*+(L>>>0));break}else{S=be(l|0,n|0,h|0,j|0)|0;g=+(S>>>0)+4294967296.0*+(L>>>0);break}}else{if(q){S=ge(h|0,j|0,l|0,n|0)|0;g=+(S>>>0)+4294967296.0*+(L>>>0);break}if(j>>>0<n>>>0|(j|0)==(n|0)&h>>>0<l>>>0){S=be(l|0,n|0,h|0,j|0)|0;g=-(+(S>>>0)+4294967296.0*+(L>>>0));break}else{S=be(h|0,j|0,l|0,n|0)|0;g=+(S>>>0)+4294967296.0*+(L>>>0);break}}while(0);T=ta*2.0*m*g;fa=sa+0.0+1.0+1.0+1.0+1.0+1.0;l=(W|0)<0;j=be(0,0,W|0,F|0)|0;h=l?L:F;S=(C|0)<0;n=be(0,0,C|0,V|0)|0;n=ne(ua|0,va|0,(S?n:C)|0,(S?L:V)|0)|0;q=L;h=ne(wa|0,xa|0,(l?j:W)|0,h|0)|0;j=L;l=l^za;do if(S^ya){if(!l){W=ge(h|0,j|0,n|0,q|0)|0;A=-(+(W>>>0)+4294967296.0*+(L>>>0));break}if(q>>>0>j>>>0|(q|0)==(j|0)&n>>>0>h>>>0){W=be(n|0,q|0,h|0,j|0)|0;A=-(+(W>>>0)+4294967296.0*+(L>>>0));break}else{W=be(h|0,j|0,n|0,q|0)|0;A=+(W>>>0)+4294967296.0*+(L>>>0);break}}else{if(l){W=ge(h|0,j|0,n|0,q|0)|0;A=+(W>>>0)+4294967296.0*+(L>>>0);break}if(q>>>0<j>>>0|(q|0)==(j|0)&n>>>0<h>>>0){W=be(h|0,j|0,n|0,q|0)|0;A=-(+(W>>>0)+4294967296.0*+(L>>>0));break}else{W=be(n|0,q|0,h|0,j|0)|0;A=+(W>>>0)+4294967296.0*+(L>>>0);break}}while(0);l=($|0)<0;j=be(0,0,$|0,_|0)|0;h=l?L:_;_=(Y|0)<0;n=be(0,0,Y|0,Z|0)|0;n=ne(ka|0,la|0,(_?n:Y)|0,(_?L:Z)|0)|0;q=L;h=ne(na|0,oa|0,(l?j:$)|0,h|0)|0;j=L;l=l^pa;do if(_^ra){if(!l){$=ge(h|0,j|0,n|0,q|0)|0;y=-(+($>>>0)+4294967296.0*+(L>>>0));break}if(q>>>0>j>>>0|(q|0)==(j|0)&n>>>0>h>>>0){$=be(n|0,q|0,h|0,j|0)|0;y=-(+($>>>0)+4294967296.0*+(L>>>0));break}else{$=be(h|0,j|0,n|0,q|0)|0;y=+($>>>0)+4294967296.0*+(L>>>0);break}}else{if(l){$=ge(h|0,j|0,n|0,q|0)|0;y=+($>>>0)+4294967296.0*+(L>>>0);break}if(q>>>0<j>>>0|(q|0)==(j|0)&n>>>0<h>>>0){$=be(h|0,j|0,n|0,q|0)|0;y=-(+($>>>0)+4294967296.0*+(L>>>0));break}else{$=be(n|0,q|0,h|0,j|0)|0;y=+($>>>0)+4294967296.0*+(L>>>0);break}}while(0);z=1.0/Ba;g=B*A*z;if(g<0.0){m=0.0-g;if(g>0.0){g=(g*5.0+0.0)/m;g=g<0.0?-g:g}else g=5.0;v=0.0;x=0.0;w=g+1.0}else{v=g+0.0;x=6.0;m=0.0;w=0.0}o=aa*y*z;do if(o<0.0){u=m-o;if(o>0.0|m<0.0){g=(o*5.0+m*w)/u;g=g<0.0?-g:g}else g=w<5.0?5.0:w;U=v;ea=u;K=x;O=g+1.0}else{g=o+v;if(v<0.0?o>0.0|v>0.0:0){K=(v*x-o*5.0)/g;U=g;ea=m;K=(K<0.0?-K:K)+1.0;O=w;break}U=g;ea=m;K=x<5.0?6.0:x+1.0;O=w}while(0);g=ca*y*z;if(g<0.0){m=0.0-g;if(g>0.0){g=(g*5.0+0.0)/m;g=g<0.0?-g:g}else g=5.0;v=0.0;x=0.0;w=g+1.0}else{v=g+0.0;x=6.0;m=0.0;w=0.0}o=I*A*z;do if(o<0.0){u=m-o;if(o>0.0|m<0.0){g=(o*5.0+m*w)/u;g=g<0.0?-g:g}else g=w<5.0?5.0:w;ja=v;ma=u;ga=x;ia=g+1.0}else{g=o+v;if(v<0.0?o>0.0|v>0.0:0){ga=(v*x-o*5.0)/g;ja=g;ma=m;ga=(ga<0.0?-ga:ga)+1.0;ia=w;break}ja=g;ma=m;ga=x<5.0?6.0:x+1.0;ia=w}while(0);E=aa*qa;P=E<0.0;if(P){m=O;g=K;v=-(E*U);o=-(E*ea)}else{m=K;g=O;v=E*ea;o=E*U}u=g+3.0+1.0;g=m+3.0+1.0;y=o+0.0;if(o<0.0&o>0.0){g=(0.0-o*g)/y;g=g<0.0?-g:g}else g=g>0.0?g:0.0;w=g+1.0;z=v+0.0;if(v<0.0&v>0.0){g=(0.0-v*u)/z;g=g<0.0?-g:g}else g=u>0.0?u:0.0;x=g+1.0;G=B*J;S=G<0.0;if(S){m=O;g=K;v=-(G*U);o=-(G*ea)}else{m=K;g=O;v=G*ea;o=G*U}u=g+3.0+1.0;g=m+3.0+1.0;B=y+o;if(y<0.0|o<0.0?y>0.0|o>0.0:0){g=(y*w-o*g)/B;g=g<0.0?-g:g}else g=w<g?g:w;y=g+1.0;A=z+v;do if(z<0.0|v<0.0){if(!(z>0.0|v>0.0)){ed=255;break}g=(z*x-v*u)/A;g=g<0.0?-g:g}else ed=255;while(0);if((ed|0)==255)g=x<u?u:x;w=g+1.0;ca=ca*qa;R=ca<0.0;if(R){m=ia;g=ga;v=-(ca*ja);o=-(ca*ma)}else{m=ga;g=ia;v=ca*ma;o=ca*ja}u=g+3.0+1.0;g=m+3.0+1.0;D=B+o;do if(B<0.0|o<0.0){if(!(B>0.0|o>0.0)){ed=262;break}g=(B*y-o*g)/D;g=g<0.0?-g:g}else ed=262;while(0);if((ed|0)==262)g=y<g?g:y;z=g+1.0;B=A+v;do if(A<0.0|v<0.0){if(!(A>0.0|v>0.0)){ed=266;break}g=(A*w-v*u)/B;g=g<0.0?-g:g}else ed=266;while(0);if((ed|0)==266)g=w<u?u:w;y=g+1.0;aa=I*J;Q=aa<0.0;if(Q){m=ia;g=ga;x=-(aa*ja);o=-(aa*ma)}else{m=ga;g=ia;x=aa*ma;o=aa*ja}u=g+3.0+1.0;g=m+3.0+1.0;w=D+o;do if(D<0.0|o<0.0){if(!(D>0.0|o>0.0)){ed=273;break}g=(D*z-o*g)/w;g=g<0.0?-g:g}else ed=273;while(0);if((ed|0)==273)g=z<g?g:z;v=g+1.0;z=B+x;do if(B<0.0|x<0.0){if(!(B>0.0|x>0.0)){ed=277;break}g=(B*y-x*u)/z;g=g<0.0?-g:g}else ed=277;while(0);if((ed|0)==277)g=y<u?u:y;u=g+1.0;F=0-H|0;N=((F|0)<0)<<31>>31;M=(H|0)>0;H=be(0,0,F|0,N|0)|0;F=M?H:F;H=M?L:N;N=(ba|0)<0;C=be(0,0,ba|0,da|0)|0;C=N?C:ba;s=N?L:da;n=ne(C|0,s|0,ka|0,la|0)|0;q=L;j=ne(na|0,oa|0,F|0,H|0)|0;l=L;h=M^pa;do if(ra^N){if(!h){ra=ge(n|0,q|0,j|0,l|0)|0;g=-(+(ra>>>0)+4294967296.0*+(L>>>0));break}if(q>>>0>l>>>0|(q|0)==(l|0)&n>>>0>j>>>0){ra=be(n|0,q|0,j|0,l|0)|0;g=-(+(ra>>>0)+4294967296.0*+(L>>>0));break}else{ra=be(j|0,l|0,n|0,q|0)|0;g=+(ra>>>0)+4294967296.0*+(L>>>0);break}}else{if(h){ra=ge(n|0,q|0,j|0,l|0)|0;g=+(ra>>>0)+4294967296.0*+(L>>>0);break}if(q>>>0<l>>>0|(q|0)==(l|0)&n>>>0<j>>>0){ra=be(j|0,l|0,n|0,q|0)|0;g=-(+(ra>>>0)+4294967296.0*+(L>>>0));break}else{ra=be(n|0,q|0,j|0,l|0)|0;g=+(ra>>>0)+4294967296.0*+(L>>>0);break}}while(0);m=J*g;b:do if(m<0.0){o=w-m;if(w<0.0|m>0.0){g=(w*v+m*4.0)/o;g=g<0.0?-g:g}else g=v<4.0?4.0:v;x=z;w=o;v=g+1.0}else{g=z+m;do if(z<0.0){if(!(z>0.0|m>0.0))break;u=(z*u-m*4.0)/g;x=g;u=(u<0.0?-u:u)+1.0;break b}while(0);x=g;u=u<4.0?5.0:u+1.0}while(0);n=ne(C|0,s|0,wa|0,xa|0)|0;q=L;j=ne(ua|0,va|0,F|0,H|0)|0;l=L;h=M^ya;do if(za^N){if(!h){za=ge(n|0,q|0,j|0,l|0)|0;g=-(+(za>>>0)+4294967296.0*+(L>>>0));break}if(q>>>0>l>>>0|(q|0)==(l|0)&n>>>0>j>>>0){za=be(n|0,q|0,j|0,l|0)|0;g=-(+(za>>>0)+4294967296.0*+(L>>>0));break}else{za=be(j|0,l|0,n|0,q|0)|0;g=+(za>>>0)+4294967296.0*+(L>>>0);break}}else{if(h){za=ge(n|0,q|0,j|0,l|0)|0;g=+(za>>>0)+4294967296.0*+(L>>>0);break}if(q>>>0<l>>>0|(q|0)==(l|0)&n>>>0<j>>>0){za=be(j|0,l|0,n|0,q|0)|0;g=-(+(za>>>0)+4294967296.0*+(L>>>0));break}else{za=be(n|0,q|0,j|0,l|0)|0;g=+(za>>>0)+4294967296.0*+(L>>>0);break}}while(0);m=qa*g;c:do if(m<0.0){o=w-m;if(w<0.0|m>0.0){m=(w*v+m*4.0)/o;m=m<0.0?-m:m}else m=v<4.0?4.0:v;g=x;m=m+1.0}else{g=x+m;do if(x<0.0){if(!(x>0.0|m>0.0))break;u=(x*u-m*4.0)/g;u=(u<0.0?-u:u)+1.0;o=w;m=v;break c}while(0);u=u<4.0?5.0:u+1.0;o=w;m=v}while(0);z=g+0.0;if(g<0.0&g>0.0){g=(0.0-g*u)/z;g=g<0.0?-g:g}else g=u>0.0?u:0.0;x=g+1.0;y=o+0.0;if(o<0.0&o>0.0){g=(0.0-o*m)/y;g=g<0.0?-g:g}else g=m>0.0?m:0.0;o=g+1.0;v=+X(+T);w=fa*.5+1.0;h=v<0.0;d:do if((e|0)==2)if(h){u=y-v;if(y<0.0|v>0.0){g=(y*o+w*v)/u;g=g<0.0?-g:g}else g=o<w?w:o;v=x;m=z;o=g+1.0;g=u;break}else{g=z+v;do if(z<0.0){if(!(z>0.0|v>0.0))break;v=(z*x-w*v)/g;v=(v<0.0?-v:v)+1.0;m=g;g=y;break d}while(0);v=(x<w?w:x)+1.0;m=g;g=y;break}else if(h){m=z-v;if(z<0.0|v>0.0){g=(z*x+w*v)/m;g=g<0.0?-g:g}else g=x<w?w:x;v=g+1.0;g=y;break}else{g=y+v;do if(y<0.0){if(!(y>0.0|v>0.0))break;o=(y*o-w*v)/g;v=x;m=z;o=(o<0.0?-o:o)+1.0;break d}while(0);v=x;m=z;o=(o<w?w:o)+1.0;break}while(0);I=ta*ta;T=sa+sa+1.0+1.0;v=T+v;J=m/I;T=T+o;I=g/I;if(P){m=T;g=v;w=-(E*J);o=-(E*I)}else{m=v;g=T;w=E*I;o=E*J}u=g+3.0+1.0;g=m+3.0+1.0;A=U+o;do if(U<0.0|o<0.0){if(!(U>0.0|o>0.0)){ed=349;break}g=(U*K-o*g)/A;g=g<0.0?-g:g}else ed=349;while(0);if((ed|0)==349)g=K<g?g:K;y=g+1.0;z=ea+w;do if(ea<0.0|w<0.0){if(!(ea>0.0|w>0.0)){ed=353;break}g=(ea*O-w*u)/z;g=g<0.0?-g:g}else ed=353;while(0);if((ed|0)==353)g=O<u?u:O;x=g+1.0;if(S){m=T;g=v;w=-(G*J);o=-(G*I)}else{m=v;g=T;w=G*I;o=G*J}u=g+3.0+1.0;g=m+3.0+1.0;U=A+o;do if(A<0.0|o<0.0){if(!(A>0.0|o>0.0)){ed=360;break}g=(A*y-o*g)/U;g=g<0.0?-g:g}else ed=360;while(0);if((ed|0)==360)g=y<g?g:y;K=g+1.0;O=z+w;do if(z<0.0|w<0.0){if(!(z>0.0|w>0.0)){ed=364;break}g=(z*x-w*u)/O;g=g<0.0?-g:g}else ed=364;while(0);if((ed|0)==364)g=x<u?u:x;G=g+1.0;if(R){m=T;g=v;w=-(ca*J);o=-(ca*I)}else{m=v;g=T;w=ca*I;o=ca*J}u=g+3.0+1.0;g=m+3.0+1.0;A=ja+o;do if(ja<0.0|o<0.0){if(!(ja>0.0|o>0.0)){ed=371;break}g=(ja*ga-o*g)/A;g=g<0.0?-g:g}else ed=371;while(0);if((ed|0)==371)g=ga<g?g:ga;y=g+1.0;z=ma+w;do if(ma<0.0|w<0.0){if(!(ma>0.0|w>0.0)){ed=375;break}g=(ma*ia-w*u)/z;g=g<0.0?-g:g}else ed=375;while(0);if((ed|0)==375)g=ia<u?u:ia;x=g+1.0;if(Q){m=T;g=v;w=-(aa*J);o=-(aa*I)}else{m=v;g=T;w=aa*I;o=aa*J}u=g+3.0+1.0;g=m+3.0+1.0;E=A+o;do if(A<0.0|o<0.0){if(!(A>0.0|o>0.0)){ed=382;break}g=(A*y-o*g)/E;g=g<0.0?-g:g}else ed=382;while(0);if((ed|0)==382)g=y<g?g:y;B=g+1.0;D=z+w;do if(z<0.0|w<0.0){if(!(z>0.0|w>0.0)){ed=386;break}g=(z*x-w*u)/D;g=g<0.0?-g:g}else ed=386;while(0);if((ed|0)==386)g=x<u?u:x;A=g+1.0;if(J<I){o=J;g=I;x=T}else{o=I;g=J;x=v;v=T}e:do if(Aa){w=Ba*o;m=Ba*g;g=x+1.0+1.0;o=v+1.0+1.0;u=U-m;do if(U<0.0|m>-0.0){if(!(U>0.0|m<-0.0)){ed=393;break}g=(U*K+m*g)/u;g=g<0.0?-g:g}else ed=393;while(0);if((ed|0)==393)g=K<g?g:K;m=g+1.0;g=O-w;do if(O<0.0|w>-0.0){if(!(O>0.0|w<-0.0))break;o=(O*G+w*o)/g;o=o<0.0?-o:o;z=u;x=m;break e}while(0);o=G<o?o:G;z=u;x=m}else{m=Ba*g;u=Ba*o;o=v+1.0+1.0;g=x+1.0+1.0;v=U+m;do if(U<0.0|m<0.0){if(!(U>0.0|m>0.0)){ed=401;break}g=(U*K-m*g)/v;g=g<0.0?-g:g}else ed=401;while(0);if((ed|0)==401)g=K<g?g:K;m=g+1.0;g=O+u;do if(O<0.0|u<0.0){if(!(O>0.0|u>0.0))break;o=(O*G-u*o)/g;o=o<0.0?-o:o;z=v;x=m;break e}while(0);o=G<o?o:G;z=v;x=m}while(0);w=o+1.0;y=U-O;do if(U<0.0|O>0.0){if(!(U>0.0|O<0.0)){ed=409;break}o=(U*K+O*G)/y;if(!(o<0.0))break;o=-o}else ed=409;while(0);if((ed|0)==409)o=K<G?G:K;v=E-D;do if(E<0.0|D>0.0){if(!(E>0.0|D<0.0)){ed=414;break}m=(E*B+D*A)/v;if(!(m<0.0))break;m=-m}else ed=414;while(0);if((ed|0)==414)m=B<A?A:B;u=z-g;do if(g>0.0|z<0.0){if(!(g<0.0|z>0.0)){ed=419;break}g=(g*w+x*z)/u;if(!(g<0.0))break;g=-g}else ed=419;while(0);if((ed|0)==419)g=x<w?w:x;p[f>>3]=y;p[f+8>>3]=v;p[f+16>>3]=u;i[f+24>>0]=1}N=g+1.0>64.0;H=m+1.0>64.0;M=o+1.0>64.0;if(!(M|H|N)){r=ld;return}j=k[c>>2]|0;h=k[zc>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){za=be(0,0,h|0,j|0)|0;Aa=L;k[gd>>2]=za;k[gd+4>>2]=Aa;k[gd+256>>2]=(Aa|0)!=0?-2:-1;break}else{k[gd+256>>2]=0;break}else{k[gd>>2]=h;k[gd+4>>2]=j;k[gd+256>>2]=(j|0)!=0?2:1}while(0);j=k[Ga>>2]|0;h=k[Ac>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){za=be(0,0,h|0,j|0)|0;Aa=L;k[hd>>2]=za;k[hd+4>>2]=Aa;k[hd+256>>2]=(Aa|0)!=0?-2:-1;break}else{k[hd+256>>2]=0;break}else{k[hd>>2]=h;k[hd+4>>2]=j;k[hd+256>>2]=(j|0)!=0?2:1}while(0);F=gd+260|0;j=k[Ma>>2]|0;h=k[d>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){za=be(0,0,h|0,j|0)|0;Aa=L;k[F>>2]=za;k[gd+264>>2]=Aa;k[gd+516>>2]=(Aa|0)!=0?-2:-1;break}else{k[gd+516>>2]=0;break}else{k[F>>2]=h;k[gd+264>>2]=j;k[gd+516>>2]=(j|0)!=0?2:1}while(0);C=hd+260|0;j=k[La>>2]|0;h=k[Bc>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){za=be(0,0,h|0,j|0)|0;Aa=L;k[C>>2]=za;k[hd+264>>2]=Aa;k[hd+516>>2]=(Aa|0)!=0?-2:-1;break}else{k[hd+516>>2]=0;break}else{k[C>>2]=h;k[hd+264>>2]=j;k[hd+516>>2]=(j|0)!=0?2:1}while(0);Sc(Ca,F,hd);Sc(Da,gd,C);Uc(Oc,Ca,Da);l=Oc+256|0;if(k[l>>2]|0){h=k[c>>2]|0;do if((h|0)<=0)if((h|0)<0){k[id>>2]=0-h;k[id+256>>2]=-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+256>>2]=1}while(0);Sc(Ja,hd,id);h=k[Ga>>2]|0;do if((h|0)<=0)if((h|0)<0){k[id>>2]=0-h;k[id+256>>2]=-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+256>>2]=1}while(0);Sc(Ka,gd,id);Uc(Ia,Ja,Ka);fe(cd|0,Ia|0,260)|0;j=cd+260|0;h=k[La>>2]|0;do if((h|0)<=0)if((h|0)<0){k[id>>2]=0-h;k[id+256>>2]=-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+256>>2]=1}while(0);Sc(Oa,F,id);h=k[Ma>>2]|0;do if((h|0)<=0)if((h|0)<0){k[id>>2]=0-h;k[id+256>>2]=-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+256>>2]=1}while(0);Sc(Pa,C,id);Uc(Na,Oa,Pa);fe(j|0,Na|0,260)|0;Sc(Qa,gd,j);Sc(Ra,F,cd);Tc(dd,Qa,Ra);Sc(Sa,hd,j);Sc(Ta,C,cd);Tc(fd,Sa,Ta);h=k[b>>2]|0;do if((h|0)<=0)if((h|0)<0){k[id>>2]=0-h;k[id+256>>2]=-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+256>>2]=1}while(0);Sc(Ua,Oc,id);Uc(Lc,dd,Ua);h=k[b+4>>2]|0;do if((h|0)<=0)if((h|0)<0){k[id>>2]=0-h;k[id+256>>2]=-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+256>>2]=1}while(0);Sc(Va,Oc,id);Uc(Mc,fd,Va);if((k[Lc+256>>2]|0)==0?(k[Mc+256>>2]|0)==0:0){j=k[l>>2]|0;h=(j|0)>-1?j:0-j|0;f:do switch(h|0){case 0:{h=0;g=0.0;break}case 1:{g=+((k[Oc>>2]|0)>>>0);ed=576;break}case 2:{g=+((k[Oc+4>>2]|0)>>>0)*4294967296.0+ +((k[Oc>>2]|0)>>>0);ed=576;break}default:{g=+((k[Oc+(h+-3<<2)>>2]|0)>>>0)+(+((k[Oc+(h+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Oc+(h+-2<<2)>>2]|0)>>>0))*4294967296.0;l=h<<5;h=l+-96|0;g=(j|0)<0?-g:g;if((h|0)>1023){g=g*89884656743115795.0e291;h=l+-1119|0;if((h|0)<=1023)break f;h=l+-2142|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291;break f}if((h|0)>=-1022)break f;g=g*2.2250738585072014e-308;h=l+926|0;if((h|0)>=-1022)break f;h=l+1948|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}}while(0);if((ed|0)==576){h=0;g=(j|0)<0?-g:g}h=ee(h+1023|0,0,52)|0;j=L;k[t>>2]=h;k[t+4>>2]=j;o=g*+p[t>>3];j=k[dd+256>>2]|0;h=(j|0)>-1?j:0-j|0;g:do switch(h|0){case 0:{h=0;g=0.0;break}case 1:{g=+((k[dd>>2]|0)>>>0);ed=586;break}case 2:{g=+((k[dd+4>>2]|0)>>>0)*4294967296.0+ +((k[dd>>2]|0)>>>0);ed=586;break}default:{g=+((k[dd+(h+-3<<2)>>2]|0)>>>0)+(+((k[dd+(h+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[dd+(h+-2<<2)>>2]|0)>>>0))*4294967296.0;l=h<<5;h=l+-96|0;g=(j|0)<0?-g:g;if((h|0)>1023){g=g*89884656743115795.0e291;h=l+-1119|0;if((h|0)<=1023)break g;h=l+-2142|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291;break g}if((h|0)>=-1022)break g;g=g*2.2250738585072014e-308;h=l+926|0;if((h|0)>=-1022)break g;h=l+1948|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}}while(0);if((ed|0)==586){h=0;g=(j|0)<0?-g:g}h=ee(h+1023|0,0,52)|0;j=L;k[t>>2]=h;k[t+4>>2]=j;m=g*+p[t>>3]/o;j=k[fd+256>>2]|0;h=(j|0)>-1?j:0-j|0;h:do switch(h|0){case 0:{h=0;g=0.0;break}case 1:{g=+((k[fd>>2]|0)>>>0);ed=596;break}case 2:{g=+((k[fd+4>>2]|0)>>>0)*4294967296.0+ +((k[fd>>2]|0)>>>0);ed=596;break}default:{g=+((k[fd+(h+-3<<2)>>2]|0)>>>0)+(+((k[fd+(h+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[fd+(h+-2<<2)>>2]|0)>>>0))*4294967296.0;l=h<<5;h=l+-96|0;g=(j|0)<0?-g:g;if((h|0)>1023){g=g*89884656743115795.0e291;h=l+-1119|0;if((h|0)<=1023)break h;h=l+-2142|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291;break h}if((h|0)>=-1022)break h;g=g*2.2250738585072014e-308;h=l+926|0;if((h|0)>=-1022)break h;h=l+1948|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}}while(0);if((ed|0)==596){h=0;g=(j|0)<0?-g:g}kd=ee(h+1023|0,0,52)|0;a=L;k[t>>2]=kd;k[t+4>>2]=a;Ba=g*+p[t>>3]/o;p[f>>3]=m;p[f+8>>3]=Ba;p[f+16>>3]=m;i[f+24>>0]=1}else{h=ha((k[l>>2]>>31&2)+-1|0,(e|0)==2?1:-1)|0;do if((h|0)<=0)if((h|0)<0){k[xc>>2]=0-h;k[xc+256>>2]=-1;break}else{k[xc+256>>2]=0;break}else{k[xc>>2]=h;k[xc+256>>2]=1}while(0);fe(Xa|0,Lc|0,260)|0;q=Xa+256|0;k[q>>2]=0-(k[q>>2]|0);Sc(Ya,F,Xa);fe(_a|0,Mc|0,260)|0;q=_a+256|0;k[q>>2]=0-(k[q>>2]|0);Sc(Za,C,_a);Tc(Wa,Ya,Za);fe(jd|0,Wa|0,260)|0;q=jd+260|0;fe(ab|0,Lc|0,260)|0;n=ab+256|0;k[n>>2]=0-(k[n>>2]|0);Sc(bb,gd,ab);fe(db|0,Mc|0,260)|0;n=db+256|0;k[n>>2]=0-(k[n>>2]|0);Sc(cb,hd,db);Tc($a,bb,cb);fe(q|0,$a|0,260)|0;n=jd+520|0;fe(n|0,xc|0,260)|0;s=jd+780|0;k[jd+1036>>2]=0;Sc(fb,gd,gd);Sc(gb,hd,hd);Tc(eb,fb,gb);fe(kd|0,eb|0,260)|0;Sc(ib,F,F);Sc(jb,C,C);Tc(hb,ib,jb);fe(kd+260|0,hb|0,260)|0;Sc(lb,gd,F);Sc(mb,hd,C);Tc(kb,lb,mb);fe(kd+520|0,kb|0,260)|0;Sc(ob,gd,Mc);Sc(pb,hd,Lc);Uc(qb,ob,pb);Sc(sb,F,Mc);Sc(tb,C,Lc);Uc(rb,sb,tb);Sc(ub,qb,rb);k[id>>2]=2;k[id+256>>2]=-1;Sc(nb,ub,id);fe(kd+780|0,nb|0,260)|0;ad(vb,a,jd,kd);g=+p[vb>>3];j=k[vb+8>>2]|0;do if((j|0)>1023){g=g*89884656743115795.0e291;h=j+-1023|0;if((h|0)<=1023)break;h=j+-2046|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291}else{if((j|0)>=-1022){h=j;break}g=g*2.2250738585072014e-308;h=j+1022|0;if((h|0)>=-1022)break;h=j+2044|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}while(0);h=ee(h+1023|0,0,52)|0;j=L;k[t>>2]=h;k[t+4>>2]=j;o=g*+p[t>>3];j=k[l>>2]|0;h=(j|0)>-1?j:0-j|0;i:do switch(h|0){case 0:{h=0;g=0.0;break}case 1:{g=+((k[Oc>>2]|0)>>>0);ed=618;break}case 2:{g=+((k[Oc+4>>2]|0)>>>0)*4294967296.0+ +((k[Oc>>2]|0)>>>0);ed=618;break}default:{g=+((k[Oc+(h+-3<<2)>>2]|0)>>>0)+(+((k[Oc+(h+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Oc+(h+-2<<2)>>2]|0)>>>0))*4294967296.0;l=h<<5;h=l+-96|0;g=(j|0)<0?-g:g;if((h|0)>1023){g=g*89884656743115795.0e291;h=l+-1119|0;if((h|0)<=1023)break i;h=l+-2142|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291;break i}if((h|0)>=-1022)break i;g=g*2.2250738585072014e-308;h=l+926|0;if((h|0)>=-1022)break i;h=l+1948|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}}while(0);if((ed|0)==618){h=0;g=(j|0)<0?-g:g}cd=ee(h+1023|0,0,52)|0;ed=L;k[t>>2]=cd;k[t+4>>2]=ed;m=o*(g*+p[t>>3]);if(H){Sc(Jb,Lc,Lc);Sc(Kb,Mc,Mc);Tc(Ib,Jb,Kb);Sc(Lb,C,Ib);Sc(Ob,Lc,F);Sc(Pb,Mc,C);Tc(Nb,Ob,Pb);Sc(Mb,fd,Nb);Uc(Hb,Lb,Mb);fe(jd|0,Hb|0,260)|0;Sc(Sb,Lc,Lc);Sc(Tb,Mc,Mc);Tc(Rb,Sb,Tb);Sc(Ub,hd,Rb);Sc(Xb,Lc,gd);Sc(Yb,Mc,hd);Tc(Wb,Xb,Yb);Sc(Vb,fd,Wb);Uc(Qb,Ub,Vb);fe(q|0,Qb|0,260)|0;Sc(Zb,fd,xc);fe(n|0,Zb|0,260)|0;ad(_b,a,jd,kd);g=+p[_b>>3];j=k[_b+8>>2]|0;do if((j|0)>1023){g=g*89884656743115795.0e291;h=j+-1023|0;if((h|0)<=1023)break;h=j+-2046|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291}else{if((j|0)>=-1022){h=j;break}g=g*2.2250738585072014e-308;h=j+1022|0;if((h|0)>=-1022)break;h=j+2044|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}while(0);ed=ee(h+1023|0,0,52)|0;fd=L;k[t>>2]=ed;k[t+4>>2]=fd;p[f+8>>3]=g*+p[t>>3]/m}do if(M|N){Sc(tc,Lc,Lc);Sc(uc,Mc,Mc);Tc(sc,tc,uc);Sc(vc,F,sc);Sc(fc,Lc,F);Sc(gc,Mc,C);Tc(ec,fc,gc);Sc(wc,dd,ec);Uc(rc,vc,wc);fe(jd|0,rc|0,260)|0;Sc(jc,Lc,Lc);Sc(kc,Mc,Mc);Tc(ic,jc,kc);Sc(lc,gd,ic);Sc(oc,Lc,gd);Sc(pc,Mc,hd);Tc(nc,oc,pc);Sc(mc,dd,nc);Uc(hc,lc,mc);fe(q|0,hc|0,260)|0;Sc(qc,dd,xc);fe(n|0,qc|0,260)|0;if(M){ad(yc,a,jd,kd);g=+p[yc>>3];j=k[yc+8>>2]|0;do if((j|0)>1023){g=g*89884656743115795.0e291;h=j+-1023|0;if((h|0)<=1023)break;h=j+-2046|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291}else{if((j|0)>=-1022){h=j;break}g=g*2.2250738585072014e-308;h=j+1022|0;if((h|0)>=-1022)break;h=j+2044|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}while(0);gd=ee(h+1023|0,0,52)|0;hd=L;k[t>>2]=gd;k[t+4>>2]=hd;p[f>>3]=g*+p[t>>3]/m}if(!N)break;Sc(Ic,Lc,Lc);Sc(Jc,Mc,Mc);Tc(Hc,Ic,Jc);Sc(Kc,Oc,Hc);k[id>>2]=1;k[id+256>>2]=o<0.0?-1:1;Sc(Gc,Kc,id);fe(s|0,Gc|0,260)|0;ad(Nc,a,jd,kd);g=+p[Nc>>3];j=k[Nc+8>>2]|0;do if((j|0)>1023){g=g*89884656743115795.0e291;h=j+-1023|0;if((h|0)<=1023)break;h=j+-2046|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291}else{if((j|0)>=-1022){h=j;break}g=g*2.2250738585072014e-308;h=j+1022|0;if((h|0)>=-1022)break;h=j+2044|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}while(0);kd=ee(h+1023|0,0,52)|0;a=L;k[t>>2]=kd;k[t+4>>2]=a;p[f+16>>3]=g*+p[t>>3]/m}while(0)}}else{Sc(Ea,gd,gd);Sc(Fa,hd,hd);Tc(Ha,Ea,Fa);j=k[Ha+256>>2]|0;h=(j|0)>-1?j:0-j|0;j:do switch(h|0){case 0:{h=0;g=0.0;break}case 1:{g=+((k[Ha>>2]|0)>>>0);ed=448;break}case 2:{g=+((k[Ha+4>>2]|0)>>>0)*4294967296.0+ +((k[Ha>>2]|0)>>>0);ed=448;break}default:{g=+((k[Ha+(h+-3<<2)>>2]|0)>>>0)+(+((k[Ha+(h+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Ha+(h+-2<<2)>>2]|0)>>>0))*4294967296.0;l=h<<5;h=l+-96|0;g=(j|0)<0?-g:g;if((h|0)>1023){g=g*89884656743115795.0e291;h=l+-1119|0;if((h|0)<=1023)break j;h=l+-2142|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291;break j}if((h|0)<-1022){g=g*2.2250738585072014e-308;h=l+926|0;if((h|0)<-1022){h=l+1948|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}}}}while(0);if((ed|0)==448){h=0;g=(j|0)<0?-g:g}h=ee(h+1023|0,0,52)|0;j=L;k[t>>2]=h;k[t+4>>2]=j;m=g*+p[t>>3]*2.0;j=k[d>>2]|0;h=k[zc>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Oc=be(0,0,h|0,j|0)|0;ed=L;k[id>>2]=Oc;k[id+4>>2]=ed;k[id+256>>2]=(ed|0)!=0?-2:-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+4>>2]=j;k[id+256>>2]=(j|0)!=0?2:1}while(0);Sc(xb,hd,id);j=k[Bc>>2]|0;h=k[Ac>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Oc=be(0,0,h|0,j|0)|0;ed=L;k[id>>2]=Oc;k[id+4>>2]=ed;k[id+256>>2]=(ed|0)!=0?-2:-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+4>>2]=j;k[id+256>>2]=(j|0)!=0?2:1}while(0);Sc(yb,gd,id);Uc(wb,xb,yb);fe(cd|0,wb|0,260)|0;s=b+4|0;j=k[s>>2]|0;h=k[Ac>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Oc=be(0,0,h|0,j|0)|0;ed=L;k[id>>2]=Oc;k[id+4>>2]=ed;k[id+256>>2]=(ed|0)!=0?-2:-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+4>>2]=j;k[id+256>>2]=(j|0)!=0?2:1}while(0);Sc(zb,gd,id);j=k[b>>2]|0;h=k[zc>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Oc=be(0,0,h|0,j|0)|0;ed=L;k[id>>2]=Oc;k[id+4>>2]=ed;k[id+256>>2]=(ed|0)!=0?-2:-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+4>>2]=j;k[id+256>>2]=(j|0)!=0?2:1}while(0);Sc(Ab,hd,id);Uc(dd,zb,Ab);j=k[b>>2]|0;h=k[d>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Oc=be(0,0,h|0,j|0)|0;ed=L;k[id>>2]=Oc;k[id+4>>2]=ed;k[id+256>>2]=(ed|0)!=0?-2:-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+4>>2]=j;k[id+256>>2]=(j|0)!=0?2:1}while(0);Sc(Bb,hd,id);j=k[s>>2]|0;h=k[Bc>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Oc=be(0,0,h|0,j|0)|0;ed=L;k[id>>2]=Oc;k[id+4>>2]=ed;k[id+256>>2]=(ed|0)!=0?-2:-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+4>>2]=j;k[id+256>>2]=(j|0)!=0?2:1}while(0);Sc(Cb,gd,id);Uc(fd,Bb,Cb);Sc(kd,dd,fd);k[kd+260>>2]=1;k[kd+516>>2]=1;if(H){k[id>>2]=2;k[id+256>>2]=(e|0)==2?1:-1;Sc(jd,hd,id);q=jd+260|0;Sc(Db,gd,gd);h=k[Ac>>2]|0;j=k[Bc>>2]|0;h=ge(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){ed=be(0,0,h|0,j|0)|0;fd=L;k[id>>2]=ed;k[id+4>>2]=fd;k[id+256>>2]=(fd|0)!=0?-2:-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+4>>2]=j;k[id+256>>2]=(j|0)!=0?2:1}while(0);Sc(Eb,Db,id);Sc(Gb,gd,hd);fd=k[zc>>2]|0;j=k[d>>2]|0;fd=ge(j|0,((j|0)<0)<<31>>31|0,fd|0,((fd|0)<0)<<31>>31|0)|0;j=L;h=k[b>>2]|0;h=ee(h|0,((h|0)<0)<<31>>31|0,1)|0;h=be(fd|0,j|0,h|0,L|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){ed=be(0,0,h|0,j|0)|0;fd=L;k[id>>2]=ed;k[id+4>>2]=fd;k[id+256>>2]=(fd|0)!=0?-2:-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+4>>2]=j;k[id+256>>2]=(j|0)!=0?2:1}while(0);Sc(Fb,Gb,id);Uc(ac,Eb,Fb);Sc(cc,hd,hd);h=k[s>>2]|0;j=((h|0)<0)<<31>>31;l=ee(h|0,j|0,1)|0;n=L;do if((h|0)<=0)if((h|0)<0){ed=be(0,0,l|0,n|0)|0;fd=L;k[id>>2]=ed;k[id+4>>2]=fd;k[id+256>>2]=(fd|0)!=0?-2:-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=l;fd=de(h|0,j|0,31)|0;k[id+4>>2]=fd;k[id+256>>2]=(fd|0)!=0?2:1}while(0);Sc(bc,cc,id);Tc($b,ac,bc);fe(q|0,$b|0,260)|0;Xc(dc,jd,kd);g=+p[dc>>3];j=k[dc+8>>2]|0;do if((j|0)>1023){g=g*89884656743115795.0e291;h=j+-1023|0;if((h|0)<=1023)break;h=j+-2046|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291}else{if((j|0)>=-1022){h=j;break}g=g*2.2250738585072014e-308;h=j+1022|0;if((h|0)>=-1022)break;h=j+2044|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}while(0);ed=ee(h+1023|0,0,52)|0;fd=L;k[t>>2]=ed;k[t+4>>2]=fd;p[f+8>>3]=g*+p[t>>3]/m}do if(M|N){k[id>>2]=2;k[id+256>>2]=(e|0)==2?1:-1;Sc(jd,gd,id);q=jd+260|0;Sc(Cc,hd,hd);h=k[zc>>2]|0;j=k[d>>2]|0;h=ge(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){ed=be(0,0,h|0,j|0)|0;fd=L;k[id>>2]=ed;k[id+4>>2]=fd;k[id+256>>2]=(fd|0)!=0?-2:-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+4>>2]=j;k[id+256>>2]=(j|0)!=0?2:1}while(0);Sc(Dc,Cc,id);Sc(Fc,gd,hd);fd=k[Ac>>2]|0;j=k[Bc>>2]|0;fd=ge(j|0,((j|0)<0)<<31>>31|0,fd|0,((fd|0)<0)<<31>>31|0)|0;j=L;h=k[s>>2]|0;h=ee(h|0,((h|0)<0)<<31>>31|0,1)|0;h=be(fd|0,j|0,h|0,L|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){ed=be(0,0,h|0,j|0)|0;fd=L;k[id>>2]=ed;k[id+4>>2]=fd;k[id+256>>2]=(fd|0)!=0?-2:-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+4>>2]=j;k[id+256>>2]=(j|0)!=0?2:1}while(0);Sc(Ec,Fc,id);Uc(Qc,Dc,Ec);Sc(Wc,gd,gd);h=k[b>>2]|0;j=((h|0)<0)<<31>>31;l=ee(h|0,j|0,1)|0;n=L;do if((h|0)<=0)if((h|0)<0){ed=be(0,0,l|0,n|0)|0;fd=L;k[id>>2]=ed;k[id+4>>2]=fd;k[id+256>>2]=(fd|0)!=0?-2:-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=l;fd=de(h|0,j|0,31)|0;k[id+4>>2]=fd;k[id+256>>2]=(fd|0)!=0?2:1}while(0);Sc(Rc,Wc,id);Tc(Pc,Qc,Rc);fe(q|0,Pc|0,260)|0;if(M){Xc(Yc,jd,kd);g=+p[Yc>>3];j=k[Yc+8>>2]|0;do if((j|0)>1023){g=g*89884656743115795.0e291;h=j+-1023|0;if((h|0)<=1023)break;h=j+-2046|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291}else{if((j|0)>=-1022){h=j;break}g=g*2.2250738585072014e-308;h=j+1022|0;if((h|0)>=-1022)break;h=j+2044|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}while(0);fd=ee(h+1023|0,0,52)|0;id=L;k[t>>2]=fd;k[t+4>>2]=id;p[f>>3]=g*+p[t>>3]/m}if(!N)break;j=k[cd+256>>2]|0;fe(jd+520|0,cd|0,256)|0;k[jd+776>>2]=(j|0)<0?0-j|0:j;Sc(_c,gd,gd);Sc($c,hd,hd);Tc(Zc,_c,$c);fe(kd+520|0,Zc|0,260)|0;Vc(bd,a,jd,kd);g=+p[bd>>3];j=k[bd+8>>2]|0;do if((j|0)>1023){g=g*89884656743115795.0e291;h=j+-1023|0;if((h|0)<=1023)break;h=j+-2046|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291}else{if((j|0)>=-1022){h=j;break}g=g*2.2250738585072014e-308;h=j+1022|0;if((h|0)>=-1022)break;h=j+2044|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}while(0);kd=ee(h+1023|0,0,52)|0;a=L;k[t>>2]=kd;k[t+4>>2]=a;p[f+16>>3]=g*+p[t>>3]/m}while(0)}r=ld;return}function Sc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;r=b+256|0;d=k[r>>2]|0;if((d|0)!=0?(s=c+256|0,e=k[s>>2]|0,(e|0)!=0):0){d=(d|0)>-1?d:0-d|0;p=(e|0)>-1?e:0-e|0;o=d+-1+p|0;o=o>>>0<64?o:64;q=a+256|0;k[q>>2]=o;if(o){o=(d|0)==0;l=0-d|0;e=0;g=0;m=-1;n=0;while(1){j=0-(m>>>0>l>>>0?m:l)|0;if(o){f=0;d=0}else{f=0;d=0;i=0;do{h=n-i|0;if(h>>>0<p>>>0){t=ne(k[c+(h<<2)>>2]|0,0,k[b+(i<<2)>>2]|0,0)|0;h=L;e=ge(t|0,0,e|0,g|0)|0;g=L;f=ge(h|0,0,f|0,d|0)|0;d=L}i=i+1|0}while((i|0)!=(j|0))}k[a+(n<<2)>>2]=e;e=ge(g|0,0,f|0,d|0)|0;g=L;n=n+1|0;d=k[q>>2]|0;if(n>>>0>=d>>>0)break;else m=m+-1|0}if(!((e|0)==0&(g|0)==0|(d|0)==64)){k[a+(d<<2)>>2]=e;d=(k[q>>2]|0)+1|0;k[q>>2]=d}}else d=0;if(!((k[r>>2]|0)>0^(k[s>>2]|0)>0))return;k[q>>2]=0-d;return}k[a+256>>2]=0;return}\\nfunction Tc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0;j=b+256|0;d=k[j>>2]|0;if(!d){fe(a|0,c|0,260)|0;return}e=k[c+256>>2]|0;if(!e){fe(a|0,b|0,260)|0;return}f=(d|0)>-1?d:0-d|0;g=(e|0)>-1?e:0-e|0;if(!((d|0)>0^(e|0)>0)){while(1)if(f>>>0<g>>>0){h=g;i=c;g=f;f=h;c=b;b=i}else break;i=a+256|0;k[i>>2]=f;if(!g){e=0;d=0;c=0}else{e=0;d=0;h=0;while(1){m=k[c+(h<<2)>>2]|0;d=ge(k[b+(h<<2)>>2]|0,0,e|0,d|0)|0;d=ge(d|0,L|0,m|0,0)|0;e=L;k[a+(h<<2)>>2]=d;h=h+1|0;if((h|0)==(g|0)){d=0;c=g;break}else d=0}}if(c>>>0<f>>>0)while(1){m=ge(k[b+(c<<2)>>2]|0,0,e|0,d|0)|0;e=L;k[a+(c<<2)>>2]=m;c=c+1|0;if((c|0)==(f|0)){d=0;break}else d=0}if(!((e|0)==0&(d|0)==0)?(l=k[i>>2]|0,(l|0)!=64):0){k[a+(l<<2)>>2]=e;k[i>>2]=(k[i>>2]|0)+1}}else $c(a,b,f,c,g,0);if((k[j>>2]|0)>=0)return;m=a+256|0;k[m>>2]=0-(k[m>>2]|0);return}function Uc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0;j=b+256|0;d=k[j>>2]|0;if(!d){fe(a|0,c|0,260)|0;a=a+256|0;k[a>>2]=0-(k[a>>2]|0);return}e=k[c+256>>2]|0;if(!e){fe(a|0,b|0,260)|0;return}f=(d|0)>-1?d:0-d|0;g=(e|0)>-1?e:0-e|0;if((d|0)>0^(e|0)>0){while(1)if(f>>>0<g>>>0){h=g;i=c;g=f;f=h;c=b;b=i}else break;i=a+256|0;k[i>>2]=f;if(!g){e=0;d=0;c=0}else{e=0;d=0;h=0;while(1){m=k[c+(h<<2)>>2]|0;d=ge(k[b+(h<<2)>>2]|0,0,e|0,d|0)|0;d=ge(d|0,L|0,m|0,0)|0;e=L;k[a+(h<<2)>>2]=d;h=h+1|0;if((h|0)==(g|0)){d=0;c=g;break}else d=0}}if(c>>>0<f>>>0)while(1){m=ge(k[b+(c<<2)>>2]|0,0,e|0,d|0)|0;e=L;k[a+(c<<2)>>2]=m;c=c+1|0;if((c|0)==(f|0)){d=0;break}else d=0}if(!((e|0)==0&(d|0)==0)?(l=k[i>>2]|0,(l|0)!=64):0){k[a+(l<<2)>>2]=e;k[i>>2]=(k[i>>2]|0)+1}}else $c(a,b,f,c,g,0);if((k[j>>2]|0)>=0)return;m=a+256|0;k[m>>2]=0-(k[m>>2]|0);return}function Vc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0.0,n=0,o=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0.0,A=0,B=0,C=0,D=0,E=0;C=r;r=r+3184|0;A=C+2924|0;x=C+48|0;y=C+32|0;e=C+2664|0;f=C+2404|0;n=C+2144|0;o=C+1884|0;q=C+1624|0;s=C+1364|0;t=C+1104|0;u=C+844|0;v=C+584|0;w=C+324|0;g=C+64|0;h=C+16|0;i=C;Xc(x,c,d);j=c+520|0;l=d+520|0;_c(y,j,l);m=+p[x>>3];if(!(!(m<0.0)?!(+p[y>>3]<0.0):0))B=3;if((B|0)==3?(z=+p[y>>3],m>0.0|z>0.0):0){D=b+780|0;Sc(f,c,c);Sc(n,f,d);E=c+260|0;Sc(q,E,E);f=d+260|0;Sc(o,q,f);Tc(s,n,o);Sc(u,j,j);Sc(t,u,l);Uc(e,s,t);fe(D|0,e|0,260)|0;B=b+2080|0;k[B>>2]=1;k[b+2336>>2]=1;Sc(w,c,E);k[A>>2]=2;k[A+256>>2]=1;Sc(v,w,A);fe(b+1040|0,v|0,260)|0;Sc(g,d,f);fe(b+2340|0,g|0,260)|0;Xc(h,D,B);Zc(i,x,z,k[y+8>>2]|0);b=(k[h+8>>2]|0)-(k[i+8>>2]|0)|0;B=a+8|0;z=+Kd(+p[h>>3]/+p[i>>3],B);p[a>>3]=z;k[B>>2]=b+(k[B>>2]|0);r=C;return}Yc(a,x,y);r=C;return}function Wc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,q=0,s=0,t=0,u=0,v=0.0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0.0,G=0,H=0,I=0,J=0;I=r;r=r+4752|0;G=I+4484|0;D=I+48|0;E=I+32|0;e=I+4224|0;f=I+3964|0;t=I+3704|0;w=I+3444|0;x=I+3184|0;y=I+2924|0;z=I+2664|0;A=I+2404|0;B=I+2144|0;C=I+1884|0;g=I+1624|0;h=I+1364|0;i=I+1104|0;j=I+844|0;l=I+584|0;m=I+324|0;n=I+64|0;o=I+16|0;q=I;Xc(D,c,d);s=c+520|0;u=d+520|0;Xc(E,s,u);v=+p[D>>3];if(!(!(v<0.0)?!(+p[E>>3]<0.0):0))H=3;if((H|0)==3?(F=+p[E>>3],v>0.0|F>0.0):0){Sc(f,c,c);Sc(t,f,d);J=c+260|0;Sc(x,J,J);f=d+260|0;Sc(w,x,f);Tc(y,t,w);Sc(A,s,s);Sc(z,A,u);Uc(B,y,z);z=c+780|0;Sc(g,z,z);A=d+780|0;Sc(C,g,A);Uc(e,B,C);fe(b|0,e|0,260)|0;H=b+1300|0;k[H>>2]=1;k[b+1556>>2]=1;Sc(i,c,J);k[G>>2]=2;k[G+256>>2]=1;Sc(h,i,G);fe(b+260|0,h|0,260)|0;Sc(j,d,f);fe(b+1560|0,j|0,260)|0;Sc(m,s,z);k[G>>2]=2;k[G+256>>2]=-1;Sc(l,m,G);fe(b+520|0,l|0,260)|0;Sc(n,u,A);fe(b+1820|0,n|0,260)|0;Vc(o,b,b,H);Zc(q,D,F,k[E+8>>2]|0);b=(k[o+8>>2]|0)-(k[q+8>>2]|0)|0;H=a+8|0;F=+Kd(+p[o>>3]/+p[q>>3],H);p[a>>3]=F;k[H>>2]=b+(k[H>>2]|0);r=I;return}Yc(a,D,E);r=I;return}function Xc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0.0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,q=0,s=0,t=0;t=r;r=r+1376|0;o=t+48|0;q=t+32|0;l=t+1104|0;d=t+844|0;f=t+584|0;g=t+324|0;h=t+64|0;m=t+16|0;n=t;_c(o,b,c);i=b+260|0;j=c+260|0;_c(q,i,j);e=+p[o>>3];if(!(!(e<0.0)?!(+p[q>>3]<0.0):0))s=3;do if((s|0)==3){if(!(e>0.0)?!(+p[q>>3]>0.0):0)break;Sc(d,b,b);Sc(f,d,c);Sc(h,i,i);Sc(g,h,j);Uc(l,f,g);f=k[l+256>>2]|0;d=(f|0)>-1?f:0-f|0;switch(d|0){case 0:{e=0.0;d=0;break}case 1:{e=+((k[l>>2]|0)>>>0);d=0;s=10;break}case 2:{e=+((k[l+4>>2]|0)>>>0)*4294967296.0+ +((k[l>>2]|0)>>>0);d=0;s=10;break}default:{e=+((k[l+(d+-3<<2)>>2]|0)>>>0)+(+((k[l+(d+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[l+(d+-2<<2)>>2]|0)>>>0))*4294967296.0;d=(d<<5)+-96|0;s=10}}if((s|0)==10)e=(f|0)<0?-e:e;l=m+8|0;e=+Kd(e,l);p[m>>3]=e;s=(k[l>>2]|0)+d|0;k[l>>2]=s;Zc(n,o,+p[q>>3],k[q+8>>2]|0);q=s-(k[n+8>>2]|0)|0;s=a+8|0;e=+Kd(e/+p[n>>3],s);p[a>>3]=e;k[s>>2]=q+(k[s>>2]|0);r=t;return}while(0);Yc(a,o,q);r=t;return}function Yc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0.0,f=0,g=0;d=+p[b>>3];if(!(d==0.0)?(f=k[c+8>>2]|0,g=k[b+8>>2]|0,(f|0)<=(g+54|0)):0){e=+p[c>>3];if((g|0)>(f+54|0)|e==0.0){k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];return}if((g|0)<(f|0)){b=f-g|0;if((b|0)>1023){e=e*89884656743115795.0e291;c=b+-1023|0;if((c|0)>1023){c=b+-2046|0;c=(c|0)>1023?1023:c;e=e*89884656743115795.0e291}}else if((b|0)<-1022){e=e*2.2250738585072014e-308;c=b+1022|0;if((c|0)<-1022){c=b+2044|0;c=(c|0)<-1022?-1022:c;e=e*2.2250738585072014e-308}}else c=b;b=ee(c+1023|0,0,52)|0;f=L;k[t>>2]=b;k[t+4>>2]=f;f=a+8|0;e=+Kd(d+e*+p[t>>3],f);p[a>>3]=e;k[f>>2]=(k[f>>2]|0)+g;return}else{b=g-f|0;if((b|0)>1023){d=d*89884656743115795.0e291;c=b+-1023|0;if((c|0)>1023){c=b+-2046|0;c=(c|0)>1023?1023:c;d=d*89884656743115795.0e291}}else if((b|0)<-1022){d=d*2.2250738585072014e-308;c=b+1022|0;if((c|0)<-1022){c=b+2044|0;c=(c|0)<-1022?-1022:c;d=d*2.2250738585072014e-308}}else c=b;b=ee(c+1023|0,0,52)|0;g=L;k[t>>2]=b;k[t+4>>2]=g;g=a+8|0;e=+Kd(e+d*+p[t>>3],g);p[a>>3]=e;k[g>>2]=(k[g>>2]|0)+f;return}};k[a>>2]=k[c>>2];k[a+4>>2]=k[c+4>>2];k[a+8>>2]=k[c+8>>2];k[a+12>>2]=k[c+12>>2];return}function Zc(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;var e=0.0,f=0.0,g=0,h=0;e=+p[b>>3];if(!(e==0.0)?(h=k[b+8>>2]|0,(h+54|0)>=(d|0)):0){if((h|0)>(d+54|0)|c==0.0){k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];return}if((h|0)<(d|0)){g=d-h|0;if((g|0)>1023){f=c*-89884656743115795.0e291;b=g+-1023|0;if((b|0)>1023){b=g+-2046|0;b=(b|0)>1023?1023:b;f=f*89884656743115795.0e291}}else{f=-c;if((g|0)<-1022){f=c*-2.2250738585072014e-308;b=g+1022|0;if((b|0)<-1022){b=g+2044|0;b=(b|0)<-1022?-1022:b;f=f*2.2250738585072014e-308}}else b=g}g=ee(b+1023|0,0,52)|0;d=L;k[t>>2]=g;k[t+4>>2]=d;d=a+8|0;c=+Kd(e+f*+p[t>>3],d);p[a>>3]=c;k[d>>2]=(k[d>>2]|0)+h;return}else{g=h-d|0;if((g|0)>1023){e=e*89884656743115795.0e291;b=g+-1023|0;if((b|0)>1023){b=g+-2046|0;b=(b|0)>1023?1023:b;e=e*89884656743115795.0e291}}else if((g|0)<-1022){e=e*2.2250738585072014e-308;b=g+1022|0;if((b|0)<-1022){b=g+2044|0;b=(b|0)<-1022?-1022:b;e=e*2.2250738585072014e-308}}else b=g;g=ee(b+1023|0,0,52)|0;h=L;k[t>>2]=g;k[t+4>>2]=h;h=a+8|0;c=+Kd(e*+p[t>>3]-c,h);p[a>>3]=c;k[h>>2]=(k[h>>2]|0)+d;return}}h=a+8|0;c=+Kd(-c,h);p[a>>3]=c;k[h>>2]=(k[h>>2]|0)+d;return}function _c(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0,f=0,g=0,h=0.0,i=0,j=0,l=0,m=0;m=r;r=r+48|0;g=m+32|0;j=m+16|0;i=m;f=k[b+256>>2]|0;e=(f|0)>-1?f:0-f|0;switch(e|0){case 0:{d=0.0;b=0;break}case 1:{d=+((k[b>>2]|0)>>>0);b=0;l=5;break}case 2:{d=+((k[b+4>>2]|0)>>>0)*4294967296.0+ +((k[b>>2]|0)>>>0);b=0;l=5;break}default:{d=+((k[b+(e+-3<<2)>>2]|0)>>>0)+(+((k[b+(e+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[b+(e+-2<<2)>>2]|0)>>>0))*4294967296.0;b=(e<<5)+-96|0;l=5}}if((l|0)==5)d=(f|0)<0?-d:d;e=g+8|0;h=+Kd(d,e);p[g>>3]=h;f=(k[e>>2]|0)+b|0;k[e>>2]=f;e=k[c+256>>2]|0;b=(e|0)>-1?e:0-e|0;switch(b|0){case 0:{d=0.0;b=0;break}case 1:{d=+((k[c>>2]|0)>>>0);b=0;l=10;break}case 2:{d=+((k[c+4>>2]|0)>>>0)*4294967296.0+ +((k[c>>2]|0)>>>0);b=0;l=10;break}default:{d=+((k[c+(b+-3<<2)>>2]|0)>>>0)+(+((k[c+(b+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[c+(b+-2<<2)>>2]|0)>>>0))*4294967296.0;b=(b<<5)+-96|0;l=10}}if((l|0)==10)d=(e|0)<0?-d:d;l=j+8|0;d=+Kd(d,l);p[j>>3]=d;l=(k[l>>2]|0)+b|0;c=(l&1|0)==0;j=i+8|0;d=+Kd(+X(+(c?d:d*2.0)),j);p[i>>3]=d;j=(((c^1)<<31>>31)+l>>1)+(k[j>>2]|0)+f|0;l=a+8|0;h=+Kd(h*d,l);p[a>>3]=h;k[l>>2]=j+(k[l>>2]|0);r=m;return}function $c(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0;if(c>>>0<e>>>0){$c(a,d,e,b,c,1);a=a+256|0;k[a>>2]=0-(k[a>>2]|0);return}do if((c|0)!=(e|0)|f){f=a+256|0;k[f>>2]=c+-1;if(!e){e=0;h=f;f=0}else{j=f;i=12}}else{while(1){f=c+-1|0;e=k[b+(f<<2)>>2]|0;g=k[d+(f<<2)>>2]|0;if(e>>>0<g>>>0){i=5;break}if(e>>>0>g>>>0){i=8;break}if(!f)break;else c=f}if((i|0)==5){$c(a,d,c,b,c,1);a=a+256|0;k[a>>2]=0-(k[a>>2]|0);return}if((i|0)==8?(c|0)!=0:0){j=a+256|0;k[j>>2]=f;e=c;i=12;break}k[a+256>>2]=0;return}while(0);if((i|0)==12){f=0;i=0;do{g=b+(i<<2)|0;h=d+(i<<2)|0;k[a+(i<<2)>>2]=(k[g>>2]|0)+(f<<31>>31)-(k[h>>2]|0);g=k[g>>2]|0;h=k[h>>2]|0;if(g>>>0<h>>>0)f=1;else f=f&(g|0)==(h|0);i=i+1|0}while((i|0)!=(e|0));h=j}if(e>>>0<c>>>0){g=f;while(1){f=b+(e<<2)|0;k[a+(e<<2)>>2]=(k[f>>2]|0)-(g&1);e=e+1|0;if((e|0)==(c|0))break;else g=g&(k[f>>2]|0)==0}}f=k[h>>2]|0;if(!(k[a+(f<<2)>>2]|0))return;k[h>>2]=f+1;return}function ad(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0.0,g=0,h=0,i=0,j=0,l=0,m=0,n=0.0,o=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0;Ka=r;r=r+16688|0;Ja=Ka+16416|0;xa=Ka+15896|0;ya=Ka+15376|0;za=Ka+272|0;Ba=Ka+256|0;ha=Ka+15112|0;ia=Ka+14852|0;pa=Ka+14592|0;qa=Ka+14332|0;ra=Ka+14072|0;sa=Ka+13812|0;ta=Ka+13552|0;ua=Ka+13292|0;va=Ka+13032|0;wa=Ka+12772|0;ja=Ka+12512|0;ka=Ka+12252|0;la=Ka+11992|0;ma=Ka+11732|0;na=Ka+11472|0;Aa=Ka+240|0;oa=Ka+224|0;Ha=Ka+10432|0;Ia=Ka+9392|0;K=Ka+208|0;M=Ka+192|0;e=Ka+176|0;o=Ka+160|0;q=Ka+144|0;u=Ka+9128|0;v=Ka+8868|0;w=Ka+8608|0;x=Ka+8348|0;y=Ka+8088|0;z=Ka+7828|0;A=Ka+7568|0;B=Ka+7308|0;C=Ka+7048|0;D=Ka+6788|0;E=Ka+6528|0;F=Ka+6268|0;G=Ka+6008|0;H=Ka+5748|0;I=Ka+5488|0;L=Ka+128|0;J=Ka+112|0;Fa=Ka+96|0;t=Ka+80|0;j=Ka+64|0;s=Ka+48|0;Ea=Ka+32|0;N=Ka+5228|0;O=Ka+4968|0;P=Ka+4708|0;Q=Ka+4448|0;R=Ka+4188|0;S=Ka+3928|0;T=Ka+3668|0;U=Ka+3408|0;V=Ka+3148|0;W=Ka+2888|0;Y=Ka+2628|0;Z=Ka+2368|0;_=Ka+2108|0;$=Ka+1848|0;ba=Ka+1588|0;ca=Ka+1328|0;da=Ka+1068|0;ea=Ka+808|0;fa=Ka+548|0;ga=Ka+288|0;Ca=Ka+16|0;Da=Ka;aa=c+780|0;if(!(k[c+1036>>2]|0)){Xc(K,c,d);k[Ha>>2]=1;k[Ha+256>>2]=1;g=d+260|0;Sc(Ia,d,g);h=Ha+260|0;i=d+520|0;fe(h|0,i|0,260)|0;j=Ia+260|0;k[j>>2]=1;k[Ia+516>>2]=1;l=c+520|0;m=d+780|0;_c(e,l,m);Xc(q,Ha,Ia);f=+p[q>>3];Fa=k[q+8>>2]|0;Ea=(Fa&1|0)==0;Ga=o+8|0;f=+Kd(+X(+(Ea?f:f*2.0)),Ga);p[o>>3]=f;Fa=(((Ea^1)<<31>>31)+Fa>>1)+(k[Ga>>2]|0)|0;k[Ga>>2]=Fa;Fa=Fa+(k[e+8>>2]|0)|0;Ga=M+8|0;f=+Kd(+p[e>>3]*f,Ga);p[M>>3]=f;e=Fa+(k[Ga>>2]|0)|0;k[Ga>>2]=e;n=+p[K>>3];if(n<0.0|f<0.0?n>0.0|f>0.0:0){Sc(v,c,c);Sc(w,v,d);Ga=c+260|0;Sc(y,Ga,Ga);Sc(x,y,g);Tc(z,w,x);Sc(B,l,l);Sc(C,B,m);Sc(A,C,i);Uc(u,z,A);fe(Ha|0,u|0,260)|0;k[Ia>>2]=1;k[Ia+256>>2]=1;Sc(E,c,Ga);k[Ja>>2]=2;k[Ja+256>>2]=1;Sc(F,E,Ja);Sc(H,l,l);Sc(G,H,m);Uc(D,F,G);fe(h|0,D|0,260)|0;Sc(I,d,g);fe(j|0,I|0,260)|0;Xc(L,Ha,Ia);Zc(J,K,f,e);Ia=(k[L+8>>2]|0)-(k[J+8>>2]|0)|0;Ja=a+8|0;n=+Kd(+p[L>>3]/+p[J>>3],Ja);p[a>>3]=n;k[Ja>>2]=Ia+(k[Ja>>2]|0);r=Ka;return}Yc(a,K,M);r=Ka;return}k[Ha>>2]=1;k[Ha+256>>2]=1;l=d+260|0;Sc(Ia,d,l);m=Ha+260|0;g=d+520|0;fe(m|0,g|0,260)|0;o=Ia+260|0;k[o>>2]=1;k[Ia+516>>2]=1;h=c+520|0;i=d+780|0;_c(t,h,i);Xc(s,Ha,Ia);n=+p[s>>3];e=k[s+8>>2]|0;M=(e&1|0)==0;q=j+8|0;n=+Kd(+X(+(M?n:n*2.0)),q);p[j>>3]=n;e=(((M^1)<<31>>31)+e>>1)+(k[q>>2]|0)|0;k[q>>2]=e;e=e+(k[t+8>>2]|0)|0;q=Fa+8|0;n=+Kd(+p[t>>3]*n,q);p[Fa>>3]=n;k[q>>2]=e+(k[q>>2]|0);fe(Ha|0,c|0,260)|0;fe(Ia|0,d|0,260)|0;e=c+260|0;fe(m|0,e|0,260)|0;fe(o|0,l|0,260)|0;j=Ha+520|0;fe(j|0,aa|0,260)|0;k[Ia+520>>2]=1;k[Ia+776>>2]=1;Vc(Ea,b,Ha,Ia);f=+p[Ea>>3];if(f<0.0|n<0.0?f>0.0|n>0.0:0){Sc(N,aa,c);k[Ja>>2]=2;k[Ja+256>>2]=1;Sc(Ha,N,Ja);Sc(P,aa,e);k[Ja>>2]=2;k[Ja+256>>2]=1;Sc(O,P,Ja);fe(m|0,O|0,260)|0;Sc(R,c,c);Sc(S,R,d);Sc(U,e,e);Sc(T,U,l);Tc(V,S,T);Sc(W,aa,aa);Tc(Y,V,W);Sc(_,h,h);Sc($,_,g);Sc(Z,$,i);Uc(Q,Y,Z);fe(j|0,Q|0,260)|0;g=Ha+780|0;Sc(ca,c,e);k[Ja>>2]=2;k[Ja+256>>2]=1;Sc(da,ca,Ja);Sc(fa,h,h);Sc(ea,fa,i);Uc(ba,da,ea);fe(g|0,ba|0,260)|0;e=Ia+780|0;Sc(ga,d,l);fe(e|0,ga|0,260)|0;Xc(za,Ha,Ia);Xc(Ba,j,Ia+520|0);f=+p[za>>3];if(!(f<0.0)?!(+p[Ba>>3]<0.0):0)Ga=12;else{n=+p[Ba>>3];if(f>0.0|n>0.0){Sc(ia,Ha,Ha);Sc(pa,ia,Ia);Sc(ra,m,m);Sc(qa,ra,o);Tc(sa,pa,qa);Sc(ta,j,j);Uc(ua,sa,ta);Sc(wa,g,g);Sc(ja,wa,Ia);Sc(va,ja,o);Uc(ha,ua,va);fe(xa|0,ha|0,260)|0;k[ya>>2]=1;k[ya+256>>2]=1;Sc(la,Ha,m);Sc(ma,j,g);Uc(na,la,ma);k[Ja>>2]=2;k[Ja+256>>2]=1;Sc(ka,na,Ja);fe(xa+260|0,ka|0,260)|0;fe(ya+260|0,e|0,260)|0;Xc(Aa,xa,ya);Zc(oa,za,n,k[Ba+8>>2]|0);e=(k[Aa+8>>2]|0)-(k[oa+8>>2]|0)|0;Ja=Ca+8|0;f=+Kd(+p[Aa>>3]/+p[oa>>3],Ja);p[Ca>>3]=f;e=e+(k[Ja>>2]|0)|0;k[Ja>>2]=e}else Ga=12}if((Ga|0)==12){Yc(Ca,za,Ba);f=+p[Ca>>3];e=k[Ca+8>>2]|0}Zc(Da,Ea,+p[Fa>>3],k[q>>2]|0);Ia=e-(k[Da+8>>2]|0)|0;Ja=a+8|0;n=+Kd(f/+p[Da>>3],Ja);p[a>>3]=n;k[Ja>>2]=Ia+(k[Ja>>2]|0);r=Ka;return}Yc(a,Ea,Fa);r=Ka;return}function bd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0;f=a+4|0;g=k[a>>2]|0;c=g;h=(k[f>>2]|0)-c|0;i=(h|0)/24|0;j=i+1|0;if(j>>>0>178956970)xa(1340,1363,303,1438);l=a+8|0;c=((k[l>>2]|0)-c|0)/24|0;if(c>>>0<89478485){c=c<<1;c=c>>>0<j>>>0?j:c;if(!c){c=0;d=0}else e=5}else{c=178956970;e=5}if((e|0)==5){e=c*24|0;e=(e|0)==0?1:e;d=_d(e)|0;a:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(e)|0;if(d)break a}a=ya(4)|0;k[a>>2]=128;La(a|0,8,1)}while(0)}e=d+(i*24|0)|0;k[e>>2]=k[b>>2];k[e+4>>2]=k[b+4>>2];k[e+8>>2]=k[b+8>>2];k[e+12>>2]=k[b+12>>2];k[e+16>>2]=k[b+16>>2];k[e+20>>2]=k[b+20>>2];b=d+((((h|0)/-24|0)+i|0)*24|0)|0;fe(b|0,g|0,h|0)|0;k[a>>2]=b;k[f>>2]=d+(j*24|0);k[l>>2]=d+(c*24|0);if(!g)return;$d(g);return}function cd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;j=k[a+16>>2]|0;h=a+28|0;l=k[a+44>>2]|0;m=j>>>0>l>>>0;o=m?a:h;t=k[b+16>>2]|0;i=b+28|0;r=k[b+44>>2]|0;s=t>>>0>r>>>0;p=s?b:i;c=o+8|0;d=k[o>>2]|0;e=k[c>>2]|0;q=(d|0)==(e|0);if(q)if((k[o+4>>2]|0)<(k[o+12>>2]|0))c=o;else g=4;else if((d|0)<(e|0))c=o;else g=4;d=p+8|0;e=k[p>>2]|0;f=k[d>>2]|0;n=(e|0)==(f|0);if(n)if((k[p+4>>2]|0)<(k[p+12>>2]|0))f=p;else g=8;else if((e|0)<(f|0))f=p;else g=8;if((g|0)==8)f=d;d=k[c>>2]|0;e=k[f>>2]|0;if((d|0)<(e|0)){b=hd(a,h,f)|0;return b|0}if((d|0)>(e|0)){b=(hd(b,i,c)|0)^1;return b|0}d=k[o+16>>2]|0;e=k[p+16>>2]|0;if((d|0)==(e|0)){do if((j|0)!=(l|0))if(m){c=a+12|0;f=1;break}else{c=a+32|0;f=-1;break}else{c=a+4|0;f=0}while(0);e=k[c>>2]|0;do if((t|0)!=(r|0))if(s){c=b+12|0;d=1;break}else{c=b+32|0;d=-1;break}else{c=b+4|0;d=0}while(0);c=k[c>>2]|0;if((e|0)<(c|0)){b=1;return b|0}else return (f|0)<(d|0)&(c|0)>=(e|0)|0}c=(j|0)==(l|0);if(d>>>0<e>>>0){do if(!c){if(!m){c=a+32|0;e=-1;break}if((k[a>>2]|0)==(k[a+8>>2]|0)){c=a+4|0;e=1;break}else{c=a+12|0;e=1;break}}else{c=a+4|0;e=0}while(0);d=k[c>>2]|0;do if((t|0)!=(r|0))if(s){c=b+12|0;break}else{c=b+32|0;break}else c=b+4|0;while(0);c=k[c>>2]|0;if((d|0)!=(c|0)){b=(d|0)<(c|0);return b|0}if(q)c=(k[o+4>>2]|0)==(k[o+12>>2]|0);else c=0;b=(e|0)<0&c;return b|0}else{do if(!c)if(m){c=a+12|0;break}else{c=a+32|0;break}else c=a+4|0;while(0);e=k[c>>2]|0;do if((t|0)!=(r|0)){if(!s){c=b+32|0;d=-1;break}if((k[b>>2]|0)==(k[b+8>>2]|0)){c=b+4|0;d=1;break}else{c=b+12|0;d=1;break}}else{c=b+4|0;d=0}while(0);c=k[c>>2]|0;if((e|0)!=(c|0)){b=(e|0)<(c|0);return b|0}if(n)c=(k[p+4>>2]|0)!=(k[p+12>>2]|0);else c=1;b=(d|0)>0|c;return b|0}return 0}function dd(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;B=r;r=r+144|0;A=B+128|0;z=B+72|0;p=B;x=B+64|0;u=B+32|0;k[z>>2]=k[b>>2];k[z+4>>2]=k[b+4>>2];k[z+8>>2]=k[b+8>>2];k[z+12>>2]=k[b+12>>2];k[z+16>>2]=k[b+16>>2];k[z+20>>2]=k[b+20>>2];k[z+24>>2]=k[b+24>>2];i=z+28|0;k[i>>2]=k[d>>2];k[i+4>>2]=k[d+4>>2];k[i+8>>2]=k[d+8>>2];k[i+12>>2]=k[d+12>>2];k[i+16>>2]=k[d+16>>2];k[i+20>>2]=k[d+20>>2];k[i+24>>2]=k[d+24>>2];i=d;g=k[i>>2]|0;i=k[i+4>>2]|0;v=d+8|0;h=v;b=k[h>>2]|0;h=k[h+4>>2]|0;s=d+16|0;m=s;l=k[m>>2]|0;m=k[m+4>>2]|0;t=d+24|0;j=k[t>>2]|0;k[p>>2]=k[c>>2];k[p+4>>2]=k[c+4>>2];k[p+8>>2]=k[c+8>>2];k[p+12>>2]=k[c+12>>2];k[p+16>>2]=k[c+16>>2];k[p+20>>2]=k[c+20>>2];k[p+24>>2]=k[c+24>>2];q=d+8|0;if((g|0)==(b|0)?(k[d+4>>2]|0)==(k[d+12>>2]|0):0){n=g;o=i}else{n=b;o=h;b=g;h=i;j=j^32}ed(x,f,c,d);y=a+64|0;i=k[e>>2]|0;f=k[x+4>>2]|0;c=_d(80)|0;a:do if(!c){while(1){g=k[35]|0;k[35]=g+0;if(!g)break;Xa[g&0]();c=_d(80)|0;if(c)break a}B=ya(4)|0;k[B>>2]=128;La(B|0,8,1)}while(0);g=c+16|0;C=g;k[C>>2]=n;k[C+4>>2]=o;o=c+24|0;k[o>>2]=b;k[o+4>>2]=h;b=c+32|0;k[b>>2]=l;k[b+4>>2]=m;k[c+40>>2]=j;b=c+44|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];k[b+24>>2]=k[p+24>>2];k[c+72>>2]=0;k[c+76>>2]=f;g=fd(y,i,A,g)|0;b=k[g>>2]|0;if(b)if((b|0)==(c|0))c=b;else{$d(c);c=b}else{b=k[A>>2]|0;k[c>>2]=0;k[c+4>>2]=0;k[c+8>>2]=b;k[g>>2]=c;b=k[k[y>>2]>>2]|0;if(!b)b=c;else{k[y>>2]=b;b=k[g>>2]|0}Nb(k[a+68>>2]|0,b);C=a+72|0;k[C>>2]=(k[C>>2]|0)+1}k[e>>2]=c;if(!((k[d>>2]|0)==(k[q>>2]|0)?(k[d+4>>2]|0)==(k[d+12>>2]|0):0))w=16;do if((w|0)==16){k[u>>2]=k[d>>2];k[u+4>>2]=k[d+4>>2];k[u+8>>2]=k[d+8>>2];k[u+12>>2]=k[d+12>>2];k[u+16>>2]=k[d+16>>2];k[u+20>>2]=k[d+20>>2];k[u+24>>2]=k[d+24>>2];n=d;m=k[n>>2]|0;n=k[n+4>>2]|0;l=v;f=k[l>>2]|0;l=k[l+4>>2]|0;j=s;i=k[j>>2]|0;j=k[j+4>>2]|0;g=k[t>>2]^32;b=_d(80)|0;b:do if(!b){while(1){b=k[35]|0;k[35]=b+0;if(!b)break;Xa[b&0]();b=_d(80)|0;if(b){h=b;break b}}C=ya(4)|0;k[C>>2]=128;La(C|0,8,1)}else h=b;while(0);b=h+16|0;k[b>>2]=k[u>>2];k[b+4>>2]=k[u+4>>2];k[b+8>>2]=k[u+8>>2];k[b+12>>2]=k[u+12>>2];k[b+16>>2]=k[u+16>>2];k[b+20>>2]=k[u+20>>2];k[b+24>>2]=k[u+24>>2];C=h+44|0;k[C>>2]=f;k[C+4>>2]=l;C=h+52|0;k[C>>2]=m;k[C+4>>2]=n;C=h+60|0;k[C>>2]=i;k[C+4>>2]=j;k[h+68>>2]=g;k[h+72>>2]=0;k[h+76>>2]=0;g=fd(y,c,A,b)|0;b=k[g>>2]|0;if(b)if((b|0)==(h|0))g=b;else{$d(h);g=b}else{b=k[A>>2]|0;k[h>>2]=0;k[h+4>>2]=0;k[h+8>>2]=b;k[g>>2]=h;b=k[k[y>>2]>>2]|0;if(!b)b=h;else{k[y>>2]=b;b=k[g>>2]|0}Nb(k[a+68>>2]|0,b);g=a+72|0;k[g>>2]=(k[g>>2]|0)+1;g=h}k[e>>2]=g;b=a+20|0;n=v;m=k[n>>2]|0;n=k[n+4>>2]|0;q=a+24|0;h=k[q>>2]|0;o=a+28|0;i=k[o>>2]|0;if(h>>>0>=i>>>0){p=k[b>>2]|0;j=p;c=h-j|0;l=(c|0)/12|0;f=l+1|0;if(f>>>0>357913941)xa(1340,1363,303,1438);h=(i-j|0)/12|0;if(h>>>0<178956970){h=h<<1;h=h>>>0<f>>>0?f:h;if(!h){j=0;i=0}else w=32}else{h=357913941;w=32}if((w|0)==32){j=h*12|0;j=(j|0)==0?1:j;i=_d(j)|0;c:do if(!i){while(1){i=k[35]|0;k[35]=i+0;if(!i)break;Xa[i&0]();i=_d(j)|0;if(i)break c}C=ya(4)|0;k[C>>2]=128;La(C|0,8,1)}while(0);j=h}h=i+(l*12|0)|0;k[h>>2]=m;k[h+4>>2]=n;k[i+(l*12|0)+8>>2]=g;h=i+(f*12|0)|0;C=i+((((c|0)/-12|0)+l|0)*12|0)|0;fe(C|0,p|0,c|0)|0;k[b>>2]=C;k[q>>2]=h;k[o>>2]=i+(j*12|0);if(!p)f=h;else{$d(p);f=k[q>>2]|0}}else{f=h;k[f>>2]=m;k[f+4>>2]=n;k[h+8>>2]=g;f=(k[q>>2]|0)+12|0;k[q>>2]=f}o=k[b>>2]|0;C=f-o|0;c=(C|0)/12|0;if((C|0)>12){j=(c+-2|0)/2|0;b=o+(j*12|0)|0;l=f+-12|0;h=k[l>>2]|0;i=k[b>>2]|0;if((h|0)==(i|0)){if((k[f+-8>>2]|0)>=(k[o+(j*12|0)+4>>2]|0)){c=g;break}}else if((h|0)>=(i|0)){c=g;break}n=l;m=k[n>>2]|0;n=k[n+4>>2]|0;C=f+-4|0;f=k[C>>2]|0;u=b;v=k[u+4>>2]|0;w=l;k[w>>2]=k[u>>2];k[w+4>>2]=v;k[C>>2]=k[o+(j*12|0)+8>>2];d:do if((c+-1|0)>>>0>=3)while(1){g=j;j=(j+-1|0)/2|0;h=o+(j*12|0)|0;i=k[h>>2]|0;if((m|0)==(i|0)){if((n|0)>=(k[o+(j*12|0)+4>>2]|0))break d}else if((m|0)>=(i|0))break d;v=h;w=k[v+4>>2]|0;C=b;k[C>>2]=k[v>>2];k[C+4>>2]=w;k[o+(g*12|0)+8>>2]=k[o+(j*12|0)+8>>2];if(g>>>0<3){b=h;break}else b=h}while(0);c=b;k[c>>2]=m;k[c+4>>2]=n;k[b+8>>2]=f;c=k[e>>2]|0}else c=g}while(0);j=k[x>>2]|0;b=_d(80)|0;e:do if(!b){while(1){b=k[35]|0;k[35]=b+0;if(!b)break;Xa[b&0]();b=_d(80)|0;if(b){f=b;break e}}C=ya(4)|0;k[C>>2]=128;La(C|0,8,1)}else f=b;while(0);h=f+16|0;i=h;b=z;g=i+56|0;do{k[i>>2]=k[b>>2];i=i+4|0;b=b+4|0}while((i|0)<(g|0));k[f+72>>2]=0;k[f+76>>2]=j;g=fd(y,c,A,h)|0;b=k[g>>2]|0;if(!b){b=k[A>>2]|0;k[f>>2]=0;k[f+4>>2]=0;k[f+8>>2]=b;k[g>>2]=f;b=k[k[y>>2]>>2]|0;if(!b)b=f;else{k[y>>2]=b;b=k[g>>2]|0}Nb(k[a+68>>2]|0,b);C=a+72|0;k[C>>2]=(k[C>>2]|0)+1;C=f;r=B;return C|0}else{if((b|0)==(f|0)){C=b;r=B;return C|0}$d(f);C=b;r=B;return C|0}return 0}function ed(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0;x=r;r=r+80|0;q=x+48|0;s=x+24|0;t=x+12|0;u=x;v=k[c+16>>2]|0;w=k[d+16>>2]|0;o=k[c>>2]|0;l=k[c+8>>2]|0;i=(o|0)==(l|0);if(i)g=(k[c+4>>2]|0)!=(k[c+12>>2]|0);else g=1;m=k[d>>2]|0;n=k[d+8>>2]|0;j=(m|0)==(n|0);do if(j){f=k[d+4>>2]|0;e=(f|0)!=(k[d+12>>2]|0);if(!(e|g^1)){if((o|0)==(m|0)?(k[c+4>>2]|0)==(f|0):0){h=1;break}if((l|0)==(m|0)?(k[c+12>>2]|0)==(f|0):0)h=1;else p=14}else p=9}else{e=1;p=9}while(0);do if((p|0)==9)if(!(g|e^1)){if((m|0)==(o|0)?(k[d+4>>2]|0)==(k[c+4>>2]|0):0){h=1;break}if((n|0)==(o|0)?(k[d+12>>2]|0)==(k[c+4>>2]|0):0)h=1;else p=14}else p=14;while(0);if((p|0)==14){if(i)e=(k[c+4>>2]|0)!=(k[c+12>>2]|0);else e=1;if(j)f=(k[d+4>>2]|0)!=(k[d+12>>2]|0);else f=1;h=e^f^1}if(i)g=(k[c+4>>2]|0)!=(k[c+12>>2]|0);else g=1;do if(j){f=k[d+4>>2]|0;e=(f|0)!=(k[d+12>>2]|0);if(!(e|g^1)){if((o|0)==(m|0)?(k[c+4>>2]|0)==(f|0):0){e=0;break}if((l|0)==(m|0))e=(k[c+12>>2]|0)!=(f|0);else e=1}else p=27}else{e=1;p=27}while(0);do if((p|0)==27)if(!(g|e^1)){if((m|0)==(o|0)?(k[d+4>>2]|0)==(k[c+4>>2]|0):0){e=0;break}if((n|0)==(o|0))e=(k[d+12>>2]|0)!=(k[c+4>>2]|0);else e=1}else e=1;while(0);i=b+24|0;f=h&1;f=e?f|2:f;k[q>>2]=0;k[q+4>>2]=0;k[q+8>>2]=0;k[q+12>>2]=0;k[q+16>>2]=0;k[q+20>>2]=f;g=b+28|0;e=k[g>>2]|0;h=b+32|0;if(e>>>0<(k[h>>2]|0)>>>0){k[e>>2]=k[q>>2];k[e+4>>2]=k[q+4>>2];k[e+8>>2]=k[q+8>>2];k[e+12>>2]=k[q+12>>2];k[e+16>>2]=k[q+16>>2];k[e+20>>2]=k[q+20>>2];m=(k[g>>2]|0)+24|0;k[g>>2]=m}else{bd(i,q);m=k[g>>2]|0}l=m+-24|0;k[s>>2]=0;k[s+4>>2]=0;k[s+8>>2]=0;k[s+12>>2]=0;k[s+16>>2]=0;k[s+20>>2]=f;if(m>>>0<(k[h>>2]|0)>>>0){k[m>>2]=k[s>>2];k[m+4>>2]=k[s+4>>2];k[m+8>>2]=k[s+8>>2];k[m+12>>2]=k[s+12>>2];k[m+16>>2]=k[s+16>>2];k[m+20>>2]=k[s+20>>2];i=(k[g>>2]|0)+24|0;k[g>>2]=i}else{bd(i,s);i=k[g>>2]|0}h=i+-24|0;g=k[b>>2]|0;j=b+4|0;e=k[j>>2]|0;do if((g|0)==(e|0)){f=k[c+24>>2]&31;k[t>>2]=k[c+20>>2];k[t+4>>2]=0;k[t+8>>2]=f;f=b+8|0;if(g>>>0<(k[f>>2]|0)>>>0){k[g>>2]=k[t>>2];k[g+4>>2]=k[t+4>>2];k[g+8>>2]=k[t+8>>2];e=(k[j>>2]|0)+12|0;k[j>>2]=e;break}else{gd(b,t);e=k[j>>2]|0;break}}else f=b+8|0;while(0);t=k[d+24>>2]&31;k[u>>2]=k[d+20>>2];k[u+4>>2]=0;k[u+8>>2]=t;if(e>>>0<(k[f>>2]|0)>>>0){k[e>>2]=k[u>>2];k[e+4>>2]=k[u+4>>2];k[e+8>>2]=k[u+8>>2];k[j>>2]=(k[j>>2]|0)+12;b=k[b>>2]|0;d=b+(v*12|0)|0;k[l>>2]=d;b=b+(w*12|0)|0;k[h>>2]=b;b=m+-16|0;k[b>>2]=h;b=i+-16|0;k[b>>2]=l;b=l;d=h;k[a>>2]=b;b=a+4|0;k[b>>2]=d;r=x;return}else{gd(b,u);b=k[b>>2]|0;d=b+(v*12|0)|0;k[l>>2]=d;b=b+(w*12|0)|0;k[h>>2]=b;b=m+-16|0;k[b>>2]=h;b=i+-16|0;k[b>>2]=l;b=l;d=h;k[a>>2]=b;b=a+4|0;k[b>>2]=d;r=x;return}}function fd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;h=a+4|0;e=b;if((h|0)!=(b|0)?(f=b+16|0,!(cd(d,f)|0)):0){if(!(cd(f,d)|0)){k[c>>2]=e;return c|0}a=b+4|0;e=k[a>>2]|0;g=(e|0)==0;if(g){f=b;while(1){e=k[f+8>>2]|0;if((k[e>>2]|0)==(f|0))break;else f=e}}else while(1){f=k[e>>2]|0;if(!f)break;else e=f}if((e|0)!=(h|0)?!(cd(d,e+16|0)|0):0){e=k[h>>2]|0;if(!e){k[c>>2]=h;c=h;return c|0}else a=e;while(1){e=a+16|0;if(cd(d,e)|0){e=k[a>>2]|0;if(!e){h=33;break}}else{if(!(cd(e,d)|0)){h=38;break}f=a+4|0;e=k[f>>2]|0;if(!e){h=37;break}}a=e}if((h|0)==33){k[c>>2]=a;c=a;return c|0}else if((h|0)==37){k[c>>2]=a;c=f;return c|0}else if((h|0)==38){k[c>>2]=a;return c|0}}if(g){k[c>>2]=b;c=a;return c|0}else{k[c>>2]=e;c=e;return c|0}}g=k[b>>2]|0;if((k[a>>2]|0)!=(b|0)){if(!g){f=b;while(1){e=k[f+8>>2]|0;if((k[e>>2]|0)==(f|0))f=e;else break}}else{e=g;while(1){f=k[e+4>>2]|0;if(!f)break;else e=f}}if(!(cd(e+16|0,d)|0)){e=k[h>>2]|0;if(!e){k[c>>2]=h;c=h;return c|0}else a=e;while(1){e=a+16|0;if(cd(d,e)|0){e=k[a>>2]|0;if(!e){h=14;break}}else{if(!(cd(e,d)|0)){h=19;break}f=a+4|0;e=k[f>>2]|0;if(!e){h=18;break}}a=e}if((h|0)==14){k[c>>2]=a;c=a;return c|0}else if((h|0)==18){k[c>>2]=a;c=f;return c|0}else if((h|0)==19){k[c>>2]=a;return c|0}}else{a=b;f=g}}else{a=b;f=g}if(!f){k[c>>2]=b;c=a;return c|0}else{d=e;k[c>>2]=d;c=d+4|0;return c|0}return 0}function gd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0;f=a+4|0;g=k[a>>2]|0;c=g;h=(k[f>>2]|0)-c|0;i=(h|0)/12|0;j=i+1|0;if(j>>>0>357913941)xa(1340,1363,303,1438);l=a+8|0;c=((k[l>>2]|0)-c|0)/12|0;if(c>>>0<178956970){c=c<<1;c=c>>>0<j>>>0?j:c;if(!c){c=0;d=0}else e=5}else{c=357913941;e=5}if((e|0)==5){e=c*12|0;e=(e|0)==0?1:e;d=_d(e)|0;a:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(e)|0;if(d)break a}a=ya(4)|0;k[a>>2]=128;La(a|0,8,1)}while(0)}e=d+(i*12|0)|0;k[e>>2]=k[b>>2];k[e+4>>2]=k[b+4>>2];k[e+8>>2]=k[b+8>>2];b=d+((((h|0)/-12|0)+i|0)*12|0)|0;fe(b|0,g|0,h|0)|0;k[a>>2]=b;k[f>>2]=d+(j*12|0);k[l>>2]=d+(c*12|0);if(!g)return;$d(g);return}function hd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0.0,l=0.0,m=0.0,n=0.0;i=k[a>>2]|0;f=k[a+8>>2]|0;if((i|0)==(f|0))d=(k[a+4>>2]|0)!=(k[a+12>>2]|0);else d=1;h=k[b>>2]|0;if((h|0)==(k[b+8>>2]|0))e=(k[b+4>>2]|0)!=(k[b+12>>2]|0);else e=1;if(d)if(e){e=k[c>>2]|0;d=k[c+4>>2]|0;if((k[a+16>>2]|0)==(k[b+16>>2]|0)){i=(Pc(i,k[a+4>>2]|0,f,k[a+12>>2]|0,e,d)|0)==1;return i|0}else{j=+jd(a,e,d);i=j<+jd(b,e,d);return i|0}}else{g=k[b+4>>2]|0;f=k[c>>2]|0;e=k[c+4>>2]|0;d=id(h,g,a,f,e,1)|0;if(!d){j=+(h|0)-+(f|0);l=+(g|0)-+(e|0);i=!((j*j+l*l)/(j*2.0)<+jd(a,f,e));return i|0}else{i=(d|0)==-1;return i|0}}if(e){f=k[a+4>>2]|0;g=k[c>>2]|0;e=k[c+4>>2]|0;d=id(i,f,b,g,e,0)|0;if(!d){l=+(i|0)-+(g|0);j=+(f|0)-+(e|0);i=(l*l+j*j)/(l*2.0)<+jd(b,g,e);return i|0}else{i=(d|0)==-1;return i|0}}do if((i|0)>(h|0)){e=k[c+4>>2]|0;d=k[a+4>>2]|0;if((e|0)>(d|0)){f=e;e=k[b+4>>2]|0;break}else{i=0;return i|0}}else{if((i|0)>=(h|0)){h=k[a+4>>2]|0;b=k[b+4>>2]|0;b=ge(b|0,((b|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;h=L;i=k[c+4>>2]|0;i=ee(i|0,((i|0)<0)<<31>>31|0,1)|0;c=L;i=(h|0)<(c|0)|(h|0)==(c|0)&b>>>0<i>>>0;return i|0}f=k[c+4>>2]|0;e=k[b+4>>2]|0;if((f|0)<(e|0)){d=k[a+4>>2]|0;break}else{i=1;return i|0}}while(0);l=+(k[c>>2]|0);m=+(i|0)-l;j=+(f|0);n=+(d|0)-j;l=+(h|0)-l;j=+(e|0)-j;i=(n*n+m*m)/(m*2.0)<(j*j+l*l)/(l*2.0);return i|0}function id(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0.0,h=0,i=0,j=0,l=0,m=0.0,n=0.0,o=0.0,q=0.0,r=0,s=0,u=0,v=0,w=0,x=0,y=0,z=0;h=k[c>>2]|0;i=k[c+4>>2]|0;j=k[c+8>>2]|0;l=k[c+12>>2]|0;if((Pc(h,i,j,l,d,e)|0)!=-1){c=((k[c+24>>2]|0)>>>4&2)+-1|0;return c|0}q=+(d|0)-+(a|0);m=+(e|0)-+(b|0);n=+(j|0)-+(h|0);o=+(l|0)-+(i|0);if((h|0)==(j|0))if((e|0)>=(b|0)|f)return ((e|0)>(b|0)&f)<<31>>31|0;else{c=1;return c|0}y=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;x=L;u=be(l|0,((l|0)<0)<<31>>31|0,i|0,((i|0)<0)<<31>>31|0)|0;s=L;l=be(d|0,((d|0)<0)<<31>>31|0,a|0,((a|0)<0)<<31>>31|0)|0;j=L;i=be(e|0,((e|0)<0)<<31>>31|0,b|0,((b|0)<0)<<31>>31|0)|0;h=L;e=(x|0)<0;z=be(0,0,y|0,x|0)|0;x=e?L:x;a=(s|0)<0;v=be(0,0,u|0,s|0)|0;s=a?L:s;b=(j|0)<0;r=be(0,0,l|0,j|0)|0;j=b?L:j;d=(h|0)<0;w=be(0,0,i|0,h|0)|0;h=ne((e?z:y)|0,x|0,(d?w:i)|0,(d?L:h)|0)|0;i=L;j=ne((a?v:u)|0,s|0,(b?r:l)|0,j|0)|0;l=L;a=b^a;do if(d^e){if(!a){z=ge(j|0,l|0,h|0,i|0)|0;g=-(+(z>>>0)+4294967296.0*+(L>>>0));break}if(i>>>0>l>>>0|(i|0)==(l|0)&h>>>0>j>>>0){z=be(h|0,i|0,j|0,l|0)|0;g=-(+(z>>>0)+4294967296.0*+(L>>>0));break}else{z=be(j|0,l|0,h|0,i|0)|0;g=+(z>>>0)+4294967296.0*+(L>>>0);break}}else{if(a){z=ge(j|0,l|0,h|0,i|0)|0;g=+(z>>>0)+4294967296.0*+(L>>>0);break}if(i>>>0<l>>>0|(i|0)==(l|0)&h>>>0<j>>>0){z=be(j|0,l|0,h|0,i|0)|0;g=-(+(z>>>0)+4294967296.0*+(L>>>0));break}else{z=be(h|0,i|0,j|0,l|0)|0;g=+(z>>>0)+4294967296.0*+(L>>>0);break}}while(0);if(!(g!=0.0&!(g<0.0))){p[t>>3]=(m-q)*((q+m)*n);u=k[t>>2]|0;r=k[t+4>>2]|0;p[t>>3]=m*(q*(o*2.0));v=k[t>>2]|0;s=k[t+4>>2]|0;x=(r|0)>-1|(r|0)==-1&u>>>0>4294967295;w=be(0,-2147483648,u|0,r|0)|0;u=x?w:u;r=x?L:r;x=(s|0)>-1|(s|0)==-1&v>>>0>4294967295;w=be(0,-2147483648,v|0,s|0)|0;v=x?w:v;s=x?L:s;x=be(u|0,r|0,v|0,s|0)|0;w=L;z=be(v|0,s|0,u|0,r|0)|0;y=L;z=r>>>0>s>>>0|(r|0)==(s|0)&u>>>0>v>>>0?(w>>>0>0|(w|0)==0&x>>>0>4)<<31>>31:(y>>>0>0|(y|0)==0&z>>>0>4)&1;return ((z|0)!=0&((z|0)==1^f)?(f?-1:1):0)|0}if(!(k[c+24>>2]&32)){z=f<<31>>31;return z|0}else{z=f&1^1;return z|0}return 0}function jd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0,f=0,g=0.0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0;e=k[a>>2]|0;f=k[a+8>>2]|0;if((e|0)==(f|0)){g=(+(e|0)-+(b|0))*.5;return +g}t=+(f|0)-+(e|0);l=k[a+12>>2]|0;q=k[a+4>>2]|0;g=+(l|0)-+(q|0);t=t*t;d=+X(+(t+g*g));g=g<0.0?(d-g)/t:1.0/(d+g);n=((e|0)<0)<<31>>31;p=be(f|0,((f|0)<0)<<31>>31|0,e|0,n|0)|0;a=L;r=((q|0)<0)<<31>>31;l=be(l|0,((l|0)<0)<<31>>31|0,q|0,r|0)|0;f=L;n=be(b|0,((b|0)<0)<<31>>31|0,e|0,n|0)|0;m=L;r=be(c|0,((c|0)<0)<<31>>31|0,q|0,r|0)|0;q=L;i=(a|0)<0;e=be(0,0,p|0,a|0)|0;a=i?L:a;j=(f|0)<0;b=be(0,0,l|0,f|0)|0;f=j?L:f;c=(m|0)<0;o=be(0,0,n|0,m|0)|0;m=c?L:m;h=(q|0)<0;s=be(0,0,r|0,q|0)|0;a=ne((h?s:r)|0,(h?L:q)|0,(i?e:p)|0,a|0)|0;e=L;f=ne((c?o:n)|0,m|0,(j?b:l)|0,f|0)|0;b=L;c=j^c;do if(i^h){if(!c){s=ge(a|0,e|0,f|0,b|0)|0;d=-(+(s>>>0)+4294967296.0*+(L>>>0));break}if(e>>>0>b>>>0|(e|0)==(b|0)&a>>>0>f>>>0){s=be(a|0,e|0,f|0,b|0)|0;d=-(+(s>>>0)+4294967296.0*+(L>>>0));break}else{s=be(f|0,b|0,a|0,e|0)|0;d=+(s>>>0)+4294967296.0*+(L>>>0);break}}else{if(c){s=ge(a|0,e|0,f|0,b|0)|0;d=+(s>>>0)+4294967296.0*+(L>>>0);break}if(e>>>0<b>>>0|(e|0)==(b|0)&a>>>0<f>>>0){s=be(f|0,b|0,a|0,e|0)|0;d=-(+(s>>>0)+4294967296.0*+(L>>>0));break}else{s=be(a|0,e|0,f|0,b|0)|0;d=+(s>>>0)+4294967296.0*+(L>>>0);break}}while(0);t=g*d;return +t}function kd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0.0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,M=0,N=0;N=r;r=r+32|0;M=N;H=b;a:while(1){q=H;G=H+-28|0;s=H+-56|0;v=H+-20|0;D=H+-24|0;F=H+-16|0;K=a;b:while(1){p=K;a=q-p|0;switch((a|0)/28|0|0){case 2:{J=4;break a}case 3:{J=20;break a}case 4:{J=21;break a}case 5:{J=22;break a}case 1:case 0:{J=240;break a}default:{}}if((a|0)<868){J=24;break a}g=(a|0)/56|0;h=K+(g*28|0)|0;if((a|0)>27972){a=(a|0)/112|0;a=nd(K,K+(a*28|0)|0,h,K+((a+g|0)*28|0)|0,G)|0}else a=ld(K,h,G)|0;o=k[K>>2]|0;n=k[h>>2]|0;do if((o|0)==(n|0)){d=k[K+8>>2]|0;b=(o|0)==(d|0);if(b?(t=k[K+4>>2]|0,(t|0)==(k[K+12>>2]|0)):0){if((o|0)!=(k[K+(g*28|0)+8>>2]|0)){c=G;break}b=k[K+(g*28|0)+4>>2]|0;if((b|0)==(k[K+(g*28|0)+12>>2]|0))if((t|0)<(b|0)){c=G;break}else{J=92;break}else if((t|0)>(b|0)){J=92;break}else{c=G;break}}e=k[K+(g*28|0)+8>>2]|0;if((o|0)==(e|0)){if(!b){J=92;break}if((k[K+4>>2]|0)<(k[K+(g*28|0)+4>>2]|0)){c=G;break}else{J=92;break}}if(!b){b=k[K+4>>2]|0;c=k[K+(g*28|0)+4>>2]|0;if((b|0)==(c|0))if((Pc(d,k[K+12>>2]|0,o,b,e,k[K+(g*28|0)+12>>2]|0)|0)==1){c=G;break}else{J=92;break}else if((b|0)<(c|0)){c=G;break}else{J=92;break}}else c=G}else if((o|0)<(n|0))c=G;else J=92;while(0);c:do if((J|0)==92){J=0;d:do if((K|0)!=(s|0)){l=K+(g*28|0)+8|0;m=K+(g*28|0)+4|0;j=K+(g*28|0)+12|0;c=s;i=G;e:while(1){b=k[c>>2]|0;do if((b|0)==(n|0)){e=k[i+-20>>2]|0;b=(n|0)==(e|0);if(b?(z=k[i+-24>>2]|0,(z|0)==(k[i+-16>>2]|0)):0){if((n|0)!=(k[l>>2]|0))break e;b=k[m>>2]|0;if((b|0)==(k[j>>2]|0))if((z|0)<(b|0))break e;else break;else if((z|0)>(b|0))break;else break e}g=k[l>>2]|0;if((n|0)==(g|0)){if(!b)break;if((k[i+-24>>2]|0)<(k[m>>2]|0))break e;else break}if(b)break e;b=k[i+-24>>2]|0;d=k[m>>2]|0;if((b|0)==(d|0))if((Pc(e,k[i+-16>>2]|0,n,k[c+4>>2]|0,g,k[j>>2]|0)|0)==1)break e;else break;else if((b|0)<(d|0))break e;else break}else if((b|0)<(n|0))break e;while(0);b=c+-28|0;if((K|0)==(b|0))break d;else{i=c;c=b}}k[M>>2]=k[K>>2];k[M+4>>2]=k[K+4>>2];k[M+8>>2]=k[K+8>>2];k[M+12>>2]=k[K+12>>2];k[M+16>>2]=k[K+16>>2];k[M+20>>2]=k[K+20>>2];k[M+24>>2]=k[K+24>>2];k[K>>2]=k[c>>2];k[K+4>>2]=k[c+4>>2];k[K+8>>2]=k[c+8>>2];k[K+12>>2]=k[c+12>>2];k[K+16>>2]=k[c+16>>2];k[K+20>>2]=k[c+20>>2];k[K+24>>2]=k[c+24>>2];k[c>>2]=k[M>>2];k[c+4>>2]=k[M+4>>2];k[c+8>>2]=k[M+8>>2];k[c+12>>2]=k[M+12>>2];k[c+16>>2]=k[M+16>>2];k[c+20>>2]=k[M+20>>2];k[c+24>>2]=k[M+24>>2];a=a+1|0;break c}while(0);e=K+28|0;a=k[G>>2]|0;do if((o|0)==(a|0)){c=k[K+8>>2]|0;a=(o|0)==(c|0);if(a?(u=k[K+4>>2]|0,(u|0)==(k[K+12>>2]|0)):0){if((o|0)!=(k[v>>2]|0)){a=e;break}a=k[D>>2]|0;if((a|0)==(k[F>>2]|0))if((u|0)<(a|0)){a=e;break}else{J=109;break}else if((u|0)>(a|0)){J=109;break}else{a=e;break}}d=k[v>>2]|0;if((o|0)==(d|0)){if(!a){J=109;break}if((k[K+4>>2]|0)<(k[D>>2]|0)){a=e;break}else{J=109;break}}if(!a){a=k[K+4>>2]|0;b=k[D>>2]|0;if((a|0)==(b|0))if((Pc(c,k[K+12>>2]|0,o,a,d,k[F>>2]|0)|0)==1){a=e;break}else{J=109;break}else if((a|0)<(b|0)){a=e;break}else{J=109;break}}else a=e}else if((o|0)<(a|0))a=e;else J=109;while(0);if((J|0)==109){J=0;if((e|0)==(G|0)){J=240;break a}h=K+8|0;i=K+4|0;j=K+12|0;g=K;f:while(1){a=k[g+28>>2]|0;do if((o|0)==(a|0)){c=k[h>>2]|0;a=(o|0)==(c|0);if(a?(w=k[i>>2]|0,(w|0)==(k[j>>2]|0)):0){if((o|0)!=(k[g+36>>2]|0))break f;a=k[g+32>>2]|0;if((a|0)==(k[g+40>>2]|0))if((w|0)<(a|0))break f;else break;else if((w|0)>(a|0))break;else break f}d=k[g+36>>2]|0;if((o|0)==(d|0)){if(!a)break;if((k[i>>2]|0)<(k[g+32>>2]|0))break f;else break}if(a)break f;a=k[i>>2]|0;b=k[g+32>>2]|0;if((a|0)==(b|0))if((Pc(c,k[j>>2]|0,o,a,d,k[g+40>>2]|0)|0)==1)break f;else break;else if((a|0)<(b|0))break f;else break}else if((o|0)<(a|0))break f;while(0);a=e+28|0;if((a|0)==(G|0)){J=240;break a}else{g=e;e=a}}k[M>>2]=k[e>>2];k[M+4>>2]=k[e+4>>2];k[M+8>>2]=k[e+8>>2];k[M+12>>2]=k[e+12>>2];k[M+16>>2]=k[e+16>>2];k[M+20>>2]=k[e+20>>2];k[M+24>>2]=k[e+24>>2];k[e>>2]=k[G>>2];k[e+4>>2]=k[G+4>>2];k[e+8>>2]=k[G+8>>2];k[e+12>>2]=k[G+12>>2];k[e+16>>2]=k[G+16>>2];k[e+20>>2]=k[G+20>>2];k[e+24>>2]=k[G+24>>2];k[G>>2]=k[M>>2];k[G+4>>2]=k[M+4>>2];k[G+8>>2]=k[M+8>>2];k[G+12>>2]=k[M+12>>2];k[G+16>>2]=k[M+16>>2];k[G+20>>2]=k[M+20>>2];k[G+24>>2]=k[M+24>>2];a=g+56|0}if((a|0)==(G|0)){J=240;break a}j=K+4|0;l=K+8|0;m=K+12|0;g=G;while(1){i=k[K>>2]|0;g:while(1){b=k[a>>2]|0;do if((i|0)==(b|0)){d=k[l>>2]|0;b=(i|0)==(d|0);if(b?(x=k[j>>2]|0,(x|0)==(k[m>>2]|0)):0){if((i|0)!=(k[a+8>>2]|0)){h=g;break g}b=k[a+4>>2]|0;if((b|0)==(k[a+12>>2]|0))if((x|0)<(b|0)){h=g;break g}else break;else if((x|0)>(b|0))break;else{h=g;break g}}e=k[a+8>>2]|0;if((i|0)==(e|0)){if(!b)break;if((k[j>>2]|0)<(k[a+4>>2]|0)){h=g;break g}else break}if(b){h=g;break g}b=k[j>>2]|0;c=k[a+4>>2]|0;if((b|0)==(c|0))if((Pc(d,k[m>>2]|0,i,b,e,k[a+12>>2]|0)|0)==1){h=g;break g}else break;else if((b|0)<(c|0)){h=g;break g}else break}else if((i|0)<(b|0)){h=g;break g}while(0);a=a+28|0}while(1){g=h+-28|0;b=k[g>>2]|0;if((i|0)!=(b|0))if((i|0)<(b|0)){h=g;continue}else break;d=k[l>>2]|0;b=(i|0)==(d|0);if(b?(y=k[j>>2]|0,(y|0)==(k[m>>2]|0)):0){if((i|0)!=(k[h+-20>>2]|0)){h=g;continue}b=k[h+-24>>2]|0;if((b|0)==(k[h+-16>>2]|0))if((y|0)<(b|0)){h=g;continue}else break;else if((y|0)>(b|0))break;else{h=g;continue}}e=k[h+-20>>2]|0;if((i|0)==(e|0)){if(!b)break;if((k[j>>2]|0)<(k[h+-24>>2]|0)){h=g;continue}else break}if(b){h=g;continue}b=k[j>>2]|0;c=k[h+-24>>2]|0;if((b|0)==(c|0))if((Pc(d,k[m>>2]|0,i,b,e,k[h+-16>>2]|0)|0)==1){h=g;continue}else break;else if((b|0)<(c|0)){h=g;continue}else break}if(a>>>0>=g>>>0){K=a;continue b};k[M>>2]=k[a>>2];k[M+4>>2]=k[a+4>>2];k[M+8>>2]=k[a+8>>2];k[M+12>>2]=k[a+12>>2];k[M+16>>2]=k[a+16>>2];k[M+20>>2]=k[a+20>>2];k[M+24>>2]=k[a+24>>2];k[a>>2]=k[g>>2];k[a+4>>2]=k[g+4>>2];k[a+8>>2]=k[g+8>>2];k[a+12>>2]=k[g+12>>2];k[a+16>>2]=k[g+16>>2];k[a+20>>2]=k[g+20>>2];k[a+24>>2]=k[g+24>>2];k[g>>2]=k[M>>2];k[g+4>>2]=k[M+4>>2];k[g+8>>2]=k[M+8>>2];k[g+12>>2]=k[M+12>>2];k[g+16>>2]=k[M+16>>2];k[g+20>>2]=k[M+20>>2];k[g+24>>2]=k[M+24>>2];a=a+28|0}}while(0);b=K+28|0;h:do if(b>>>0<c>>>0)while(1){j=k[h>>2]|0;l=h+8|0;m=h+4|0;n=h+12|0;o=b;i:while(1){b=k[o>>2]|0;do if((b|0)==(j|0)){e=k[o+8>>2]|0;b=(j|0)==(e|0);if(b?(A=k[o+4>>2]|0,(A|0)==(k[o+12>>2]|0)):0){if((j|0)!=(k[l>>2]|0))break;b=k[m>>2]|0;if((b|0)==(k[n>>2]|0))if((A|0)<(b|0))break;else break i;else if((A|0)>(b|0))break i;else break}g=k[l>>2]|0;if((j|0)==(g|0)){if(!b)break i;if((k[o+4>>2]|0)<(k[m>>2]|0))break;else break i}if(!b){b=k[o+4>>2]|0;d=k[m>>2]|0;if((b|0)==(d|0))if((Pc(e,k[o+12>>2]|0,j,b,g,k[n>>2]|0)|0)==1)break;else break i;else if((b|0)<(d|0))break;else break i}}else if((b|0)>=(j|0))break i;while(0);o=o+28|0}while(1){i=c+-28|0;b=k[i>>2]|0;if((b|0)!=(j|0))if((b|0)<(j|0))break;else{c=i;continue}e=k[c+-20>>2]|0;b=(j|0)==(e|0);if(b?(B=k[c+-24>>2]|0,(B|0)==(k[c+-16>>2]|0)):0){if((j|0)!=(k[l>>2]|0))break;b=k[m>>2]|0;if((b|0)==(k[n>>2]|0))if((B|0)<(b|0))break;else{c=i;continue}else if((B|0)>(b|0)){c=i;continue}else break}g=k[l>>2]|0;if((j|0)==(g|0)){if(!b){c=i;continue}if((k[c+-24>>2]|0)<(k[m>>2]|0))break;else{c=i;continue}}if(b)break;b=k[c+-24>>2]|0;d=k[m>>2]|0;if((b|0)==(d|0))if((Pc(e,k[c+-16>>2]|0,j,b,g,k[n>>2]|0)|0)==1)break;else{c=i;continue}else if((b|0)<(d|0))break;else{c=i;continue}}if(o>>>0>i>>>0){i=o;break h};k[M>>2]=k[o>>2];k[M+4>>2]=k[o+4>>2];k[M+8>>2]=k[o+8>>2];k[M+12>>2]=k[o+12>>2];k[M+16>>2]=k[o+16>>2];k[M+20>>2]=k[o+20>>2];k[M+24>>2]=k[o+24>>2];k[o>>2]=k[i>>2];k[o+4>>2]=k[i+4>>2];k[o+8>>2]=k[i+8>>2];k[o+12>>2]=k[i+12>>2];k[o+16>>2]=k[i+16>>2];k[o+20>>2]=k[i+20>>2];k[o+24>>2]=k[i+24>>2];k[i>>2]=k[M>>2];k[i+4>>2]=k[M+4>>2];k[i+8>>2]=k[M+8>>2];k[i+12>>2]=k[M+12>>2];k[i+16>>2]=k[M+16>>2];k[i+20>>2]=k[M+20>>2];k[i+24>>2]=k[M+24>>2];b=o+28|0;c=i;h=(h|0)==(o|0)?i:h;a=a+1|0}else i=b;while(0);j:do if((i|0)!=(h|0)){g=k[h>>2]|0;b=k[i>>2]|0;do if((g|0)==(b|0)){d=k[h+8>>2]|0;b=(g|0)==(d|0);if(b?(C=k[h+4>>2]|0,(C|0)==(k[h+12>>2]|0)):0){if((g|0)!=(k[i+8>>2]|0))break;b=k[i+4>>2]|0;if((b|0)==(k[i+12>>2]|0))if((C|0)<(b|0))break;else break j;else if((C|0)>(b|0))break j;else break}e=k[i+8>>2]|0;if((g|0)==(e|0)){if(!b)break j;if((k[h+4>>2]|0)<(k[i+4>>2]|0))break;else break j}if(!b){b=k[h+4>>2]|0;c=k[i+4>>2]|0;if((b|0)==(c|0))if((Pc(d,k[h+12>>2]|0,g,b,e,k[i+12>>2]|0)|0)==1)break;else break j;else if((b|0)<(c|0))break;else break j}}else if((g|0)>=(b|0))break j;while(0);k[M>>2]=k[i>>2];k[M+4>>2]=k[i+4>>2];k[M+8>>2]=k[i+8>>2];k[M+12>>2]=k[i+12>>2];k[M+16>>2]=k[i+16>>2];k[M+20>>2]=k[i+20>>2];k[M+24>>2]=k[i+24>>2];k[i>>2]=k[h>>2];k[i+4>>2]=k[h+4>>2];k[i+8>>2]=k[h+8>>2];k[i+12>>2]=k[h+12>>2];k[i+16>>2]=k[h+16>>2];k[i+20>>2]=k[h+20>>2];k[i+24>>2]=k[h+24>>2];k[h>>2]=k[M>>2];k[h+4>>2]=k[M+4>>2];k[h+8>>2]=k[M+8>>2];k[h+12>>2]=k[M+12>>2];k[h+16>>2]=k[M+16>>2];k[h+20>>2]=k[M+20>>2];k[h+24>>2]=k[M+24>>2];a=a+1|0}while(0);if(!a){a=od(K,i)|0;b=i+28|0;if(od(b,H)|0){J=235;break}if(a){K=b;continue}}o=i;if((o-p|0)>=(q-o|0)){J=239;break}kd(K,i);K=i+28|0}if((J|0)==235){J=0;if(a){J=240;break}else{a=K;H=i;continue}}else if((J|0)==239){J=0;kd(i+28|0,H);a=K;H=i;continue}}if((J|0)==4){e=k[G>>2]|0;a=k[K>>2]|0;do if((e|0)==(a|0)){d=k[v>>2]|0;a=(e|0)==(d|0);if(a?(E=k[D>>2]|0,(E|0)==(k[F>>2]|0)):0){if((e|0)!=(k[K+8>>2]|0))break;a=k[K+4>>2]|0;if((a|0)==(k[K+12>>2]|0)){if((E|0)<(a|0))break;r=N;return}else{if((E|0)<=(a|0))break;r=N;return}}c=k[K+8>>2]|0;if((e|0)==(c|0)){if(!a){r=N;return}if((k[D>>2]|0)<(k[K+4>>2]|0))break;r=N;return}if(!a){a=k[D>>2]|0;b=k[K+4>>2]|0;if((a|0)==(b|0)){if((Pc(d,k[F>>2]|0,e,a,c,k[K+12>>2]|0)|0)==1)break;r=N;return}else{if((a|0)<(b|0))break;r=N;return}}}else if((e|0)>=(a|0)){r=N;return}while(0);k[M>>2]=k[K>>2];k[M+4>>2]=k[K+4>>2];k[M+8>>2]=k[K+8>>2];k[M+12>>2]=k[K+12>>2];k[M+16>>2]=k[K+16>>2];k[M+20>>2]=k[K+20>>2];k[M+24>>2]=k[K+24>>2];k[K>>2]=k[G>>2];k[K+4>>2]=k[G+4>>2];k[K+8>>2]=k[G+8>>2];k[K+12>>2]=k[G+12>>2];k[K+16>>2]=k[G+16>>2];k[K+20>>2]=k[G+20>>2];k[K+24>>2]=k[G+24>>2];k[G>>2]=k[M>>2];k[G+4>>2]=k[M+4>>2];k[G+8>>2]=k[M+8>>2];k[G+12>>2]=k[M+12>>2];k[G+16>>2]=k[M+16>>2];k[G+20>>2]=k[M+20>>2];k[G+24>>2]=k[M+24>>2];r=N;return}else if((J|0)==20){ld(K,K+28|0,G)|0;r=N;return}else if((J|0)==21){md(K,K+28|0,K+56|0,G)|0;r=N;return}else if((J|0)==22){nd(K,K+28|0,K+56|0,K+84|0,G)|0;r=N;return}else if((J|0)==24){b=K+56|0;ld(K,K+28|0,b)|0;a=K+84|0;if((a|0)!=(H|0)){x=a;while(1){w=k[x>>2]|0;a=k[b>>2]|0;do if((w|0)==(a|0)){d=k[x+8>>2]|0;a=(w|0)==(d|0);if(a?(I=k[x+4>>2]|0,(I|0)==(k[x+12>>2]|0)):0){if((w|0)!=(k[b+8>>2]|0)){d=w;J=41;break}a=k[b+4>>2]|0;if((a|0)==(k[b+12>>2]|0))if((I|0)<(a|0)){d=w;J=41;break}else break;else if((I|0)>(a|0))break;else{d=w;J=41;break}}e=k[b+8>>2]|0;if((w|0)==(e|0)){if(!a)break;if((k[x+4>>2]|0)<(k[b+4>>2]|0)){d=w;J=41;break}else break}if(!a){a=k[x+4>>2]|0;c=k[b+4>>2]|0;if((a|0)==(c|0))if((Pc(d,k[x+12>>2]|0,w,a,e,k[b+12>>2]|0)|0)==1){J=41;break}else break;else if((a|0)<(c|0)){J=41;break}else break}else{d=w;J=41}}else if((w|0)<(a|0)){d=k[x+8>>2]|0;J=41}while(0);if((J|0)==41){J=0;u=k[x+4>>2]|0;v=k[x+12>>2]|0;G=x+16|0;k[M>>2]=k[G>>2];k[M+4>>2]=k[G+4>>2];k[M+8>>2]=k[G+8>>2];k[x>>2]=k[b>>2];k[x+4>>2]=k[b+4>>2];k[x+8>>2]=k[b+8>>2];k[x+12>>2]=k[b+12>>2];k[x+16>>2]=k[b+16>>2];k[x+20>>2]=k[b+20>>2];k[x+24>>2]=k[b+24>>2];k:do if((b|0)==(K|0))a=K;else{t=(w|0)==(d|0);j=((w|0)<0)<<31>>31;n=be(d|0,((d|0)<0)<<31>>31|0,w|0,j|0)|0;o=L;l=((u|0)<0)<<31>>31;q=be(v|0,((v|0)<0)<<31>>31|0,u|0,l|0)|0;s=L;m=(o|0)<0;p=be(0,0,n|0,o|0)|0;n=m?p:n;o=m?L:o;p=(s|0)<0;G=be(0,0,q|0,s|0)|0;q=p?G:q;s=p?L:s;if(t&(u|0)==(v|0))while(1){a=b;b=b+-28|0;c=k[b>>2]|0;do if((w|0)==(c|0)){if((w|0)==(k[a+-20>>2]|0)){c=k[a+-24>>2]|0;if((c|0)==(k[a+-16>>2]|0))if((u|0)<(c|0))break;else break k;else if((u|0)>(c|0))break k;else break}}else if((w|0)>=(c|0))break k;while(0);k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];k[a+24>>2]=k[b+24>>2];if((b|0)==(K|0)){a=K;break k}}while(1){a=b;b=b+-28|0;c=k[b>>2]|0;do if((w|0)==(c|0)){c=k[a+-20>>2]|0;if((w|0)==(c|0)){if(!t)break k;if((u|0)<(k[a+-24>>2]|0))break;else break k}if(!t){e=k[a+-24>>2]|0;if((u|0)!=(e|0))if((u|0)<(e|0))break;else break k;h=be(w|0,j|0,c|0,((c|0)<0)<<31>>31|0)|0;g=L;e=k[a+-16>>2]|0;e=be(u|0,l|0,e|0,((e|0)<0)<<31>>31|0)|0;c=L;i=(g|0)<0;F=be(0,0,h|0,g|0)|0;g=i?L:g;G=(c|0)<0;E=be(0,0,e|0,c|0)|0;c=ne((G?E:e)|0,(G?L:c)|0,n|0,o|0)|0;e=L;g=ne((i?F:h)|0,g|0,q|0,s|0)|0;h=L;i=p^i;do if(m^G){if(!i){G=ge(c|0,e|0,g|0,h|0)|0;f=-(+(G>>>0)+4294967296.0*+(L>>>0));break}if(e>>>0>h>>>0|(e|0)==(h|0)&c>>>0>g>>>0){G=be(c|0,e|0,g|0,h|0)|0;f=-(+(G>>>0)+4294967296.0*+(L>>>0));break}else{G=be(g|0,h|0,c|0,e|0)|0;f=+(G>>>0)+4294967296.0*+(L>>>0);break}}else{if(i){G=ge(c|0,e|0,g|0,h|0)|0;f=+(G>>>0)+4294967296.0*+(L>>>0);break}if(e>>>0<h>>>0|(e|0)==(h|0)&c>>>0<g>>>0){G=be(g|0,h|0,c|0,e|0)|0;f=-(+(G>>>0)+4294967296.0*+(L>>>0));break}else{G=be(c|0,e|0,g|0,h|0)|0;f=+(G>>>0)+4294967296.0*+(L>>>0);break}}while(0);if(!(f!=0.0&!(f<0.0)))break k}}else if((w|0)>=(c|0))break k;while(0);k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];k[a+24>>2]=k[b+24>>2];if((b|0)==(K|0)){a=K;break}}}while(0);k[a>>2]=w;k[a+4>>2]=u;k[a+8>>2]=d;k[a+12>>2]=v;G=a+16|0;k[G>>2]=k[M>>2];k[G+4>>2]=k[M+4>>2];k[G+8>>2]=k[M+8>>2]}a=x+28|0;if((a|0)==(H|0))break;else{b=x;x=a}}}r=N;return}else if((J|0)==240){r=N;return}}function ld(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0;o=r;r=r+32|0;n=o;j=k[b>>2]|0;d=k[a>>2]|0;do if((j|0)==(d|0)){g=k[b+8>>2]|0;d=(j|0)==(g|0);if(d?(e=k[b+4>>2]|0,(e|0)==(k[b+12>>2]|0)):0){if((j|0)!=(k[a+8>>2]|0)){h=1;break}d=k[a+4>>2]|0;if((d|0)==(k[a+12>>2]|0)){h=(e|0)<(d|0);break}else{h=(e|0)<=(d|0);break}}f=k[a+8>>2]|0;if((j|0)==(f|0)){if(!d){h=0;break}h=(k[b+4>>2]|0)<(k[a+4>>2]|0);break}if(!d){d=k[b+4>>2]|0;e=k[a+4>>2]|0;if((d|0)==(e|0)){h=(Pc(g,k[b+12>>2]|0,j,d,f,k[a+12>>2]|0)|0)==1;break}else{h=(d|0)<(e|0);break}}else h=1}else h=(j|0)<(d|0);while(0);d=k[c>>2]|0;do if((d|0)==(j|0)){g=k[c+8>>2]|0;d=(j|0)==(g|0);if(d?(i=k[c+4>>2]|0,(i|0)==(k[c+12>>2]|0)):0){if((j|0)!=(k[b+8>>2]|0)){d=1;break}d=k[b+4>>2]|0;if((d|0)==(k[b+12>>2]|0)){d=(i|0)<(d|0);break}else{d=(i|0)<=(d|0);break}}f=k[b+8>>2]|0;if((j|0)==(f|0)){if(!d){d=0;break}d=(k[c+4>>2]|0)<(k[b+4>>2]|0);break}if(!d){d=k[c+4>>2]|0;e=k[b+4>>2]|0;if((d|0)==(e|0)){d=(Pc(g,k[c+12>>2]|0,j,d,f,k[b+12>>2]|0)|0)==1;break}else{d=(d|0)<(e|0);break}}else d=1}else d=(d|0)<(j|0);while(0);if(!h){if(!d){b=0;r=o;return b|0};k[n>>2]=k[b>>2];k[n+4>>2]=k[b+4>>2];k[n+8>>2]=k[b+8>>2];k[n+12>>2]=k[b+12>>2];k[n+16>>2]=k[b+16>>2];k[n+20>>2]=k[b+20>>2];k[n+24>>2]=k[b+24>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];k[b+24>>2]=k[c+24>>2];k[c>>2]=k[n>>2];k[c+4>>2]=k[n+4>>2];k[c+8>>2]=k[n+8>>2];k[c+12>>2]=k[n+12>>2];k[c+16>>2]=k[n+16>>2];k[c+20>>2]=k[n+20>>2];k[c+24>>2]=k[n+24>>2];h=k[b>>2]|0;d=k[a>>2]|0;do if((h|0)==(d|0)){g=k[b+8>>2]|0;d=(h|0)==(g|0);if(d?(m=k[b+4>>2]|0,(m|0)==(k[b+12>>2]|0)):0){if((h|0)!=(k[a+8>>2]|0))break;d=k[a+4>>2]|0;if((d|0)==(k[a+12>>2]|0)){if((m|0)<(d|0))break;else d=1;r=o;return d|0}else{if((m|0)>(d|0))d=1;else break;r=o;return d|0}}f=k[a+8>>2]|0;if((h|0)==(f|0)){if(!d){b=1;r=o;return b|0}if((k[b+4>>2]|0)<(k[a+4>>2]|0))break;else d=1;r=o;return d|0}if(!d){d=k[b+4>>2]|0;e=k[a+4>>2]|0;if((d|0)==(e|0)){if((Pc(g,k[b+12>>2]|0,h,d,f,k[a+12>>2]|0)|0)==1)break;else d=1;r=o;return d|0}else{if((d|0)<(e|0))break;else d=1;r=o;return d|0}}}else if((h|0)>=(d|0)){b=1;r=o;return b|0}while(0);k[n>>2]=k[a>>2];k[n+4>>2]=k[a+4>>2];k[n+8>>2]=k[a+8>>2];k[n+12>>2]=k[a+12>>2];k[n+16>>2]=k[a+16>>2];k[n+20>>2]=k[a+20>>2];k[n+24>>2]=k[a+24>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];k[a+24>>2]=k[b+24>>2];k[b>>2]=k[n>>2];k[b+4>>2]=k[n+4>>2];k[b+8>>2]=k[n+8>>2];k[b+12>>2]=k[n+12>>2];k[b+16>>2]=k[n+16>>2];k[b+20>>2]=k[n+20>>2];k[b+24>>2]=k[n+24>>2];b=2;r=o;return b|0}if(d){k[n>>2]=k[a>>2];k[n+4>>2]=k[a+4>>2];k[n+8>>2]=k[a+8>>2];k[n+12>>2]=k[a+12>>2];k[n+16>>2]=k[a+16>>2];k[n+20>>2]=k[a+20>>2];k[n+24>>2]=k[a+24>>2];k[a>>2]=k[c>>2];k[a+4>>2]=k[c+4>>2];k[a+8>>2]=k[c+8>>2];k[a+12>>2]=k[c+12>>2];k[a+16>>2]=k[c+16>>2];k[a+20>>2]=k[c+20>>2];k[a+24>>2]=k[c+24>>2];k[c>>2]=k[n>>2];k[c+4>>2]=k[n+4>>2];k[c+8>>2]=k[n+8>>2];k[c+12>>2]=k[n+12>>2];k[c+16>>2]=k[n+16>>2];k[c+20>>2]=k[n+20>>2];k[c+24>>2]=k[n+24>>2];b=1;r=o;return b|0};k[n>>2]=k[a>>2];k[n+4>>2]=k[a+4>>2];k[n+8>>2]=k[a+8>>2];k[n+12>>2]=k[a+12>>2];k[n+16>>2]=k[a+16>>2];k[n+20>>2]=k[a+20>>2];k[n+24>>2]=k[a+24>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];k[a+24>>2]=k[b+24>>2];k[b>>2]=k[n>>2];k[b+4>>2]=k[n+4>>2];k[b+8>>2]=k[n+8>>2];k[b+12>>2]=k[n+12>>2];k[b+16>>2]=k[n+16>>2];k[b+20>>2]=k[n+20>>2];k[b+24>>2]=k[n+24>>2];h=k[c>>2]|0;d=k[b>>2]|0;do if((h|0)==(d|0)){g=k[c+8>>2]|0;d=(h|0)==(g|0);if(d?(l=k[c+4>>2]|0,(l|0)==(k[c+12>>2]|0)):0){if((h|0)!=(k[b+8>>2]|0))break;d=k[b+4>>2]|0;if((d|0)==(k[b+12>>2]|0)){if((l|0)<(d|0))break;else d=1;r=o;return d|0}else{if((l|0)>(d|0))d=1;else break;r=o;return d|0}}f=k[b+8>>2]|0;if((h|0)==(f|0)){if(!d){b=1;r=o;return b|0}if((k[c+4>>2]|0)<(k[b+4>>2]|0))break;else d=1;r=o;return d|0}if(!d){d=k[c+4>>2]|0;e=k[b+4>>2]|0;if((d|0)==(e|0)){if((Pc(g,k[c+12>>2]|0,h,d,f,k[b+12>>2]|0)|0)==1)break;else d=1;r=o;return d|0}else{if((d|0)<(e|0))break;else d=1;r=o;return d|0}}}else if((h|0)>=(d|0)){b=1;r=o;return b|0}while(0);k[n>>2]=k[b>>2];k[n+4>>2]=k[b+4>>2];k[n+8>>2]=k[b+8>>2];k[n+12>>2]=k[b+12>>2];k[n+16>>2]=k[b+16>>2];k[n+20>>2]=k[b+20>>2];k[n+24>>2]=k[b+24>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];k[b+24>>2]=k[c+24>>2];k[c>>2]=k[n>>2];k[c+4>>2]=k[n+4>>2];k[c+8>>2]=k[n+8>>2];k[c+12>>2]=k[n+12>>2];k[c+16>>2]=k[n+16>>2];k[c+20>>2]=k[n+20>>2];k[c+24>>2]=k[n+24>>2];b=2;r=o;return b|0}function md(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0;o=r;r=r+32|0;n=o;e=ld(a,b,c)|0;j=k[d>>2]|0;f=k[c>>2]|0;do if((j|0)==(f|0)){i=k[d+8>>2]|0;f=(j|0)==(i|0);if(f?(g=k[d+4>>2]|0,(g|0)==(k[d+12>>2]|0)):0){if((j|0)!=(k[c+8>>2]|0))break;f=k[c+4>>2]|0;if((f|0)==(k[c+12>>2]|0)){if((g|0)<(f|0))break;r=o;return e|0}else{if((g|0)<=(f|0))break;r=o;return e|0}}h=k[c+8>>2]|0;if((j|0)==(h|0)){if(!f){b=e;r=o;return b|0}if((k[d+4>>2]|0)<(k[c+4>>2]|0))break;r=o;return e|0}if(!f){f=k[d+4>>2]|0;g=k[c+4>>2]|0;if((f|0)==(g|0)){if((Pc(i,k[d+12>>2]|0,j,f,h,k[c+12>>2]|0)|0)==1)break;r=o;return e|0}else{if((f|0)<(g|0))break;r=o;return e|0}}}else if((j|0)>=(f|0)){b=e;r=o;return b|0}while(0);k[n>>2]=k[c>>2];k[n+4>>2]=k[c+4>>2];k[n+8>>2]=k[c+8>>2];k[n+12>>2]=k[c+12>>2];k[n+16>>2]=k[c+16>>2];k[n+20>>2]=k[c+20>>2];k[n+24>>2]=k[c+24>>2];k[c>>2]=k[d>>2];k[c+4>>2]=k[d+4>>2];k[c+8>>2]=k[d+8>>2];k[c+12>>2]=k[d+12>>2];k[c+16>>2]=k[d+16>>2];k[c+20>>2]=k[d+20>>2];k[c+24>>2]=k[d+24>>2];k[d>>2]=k[n>>2];k[d+4>>2]=k[n+4>>2];k[d+8>>2]=k[n+8>>2];k[d+12>>2]=k[n+12>>2];k[d+16>>2]=k[n+16>>2];k[d+20>>2]=k[n+20>>2];k[d+24>>2]=k[n+24>>2];d=e+1|0;j=k[c>>2]|0;f=k[b>>2]|0;do if((j|0)==(f|0)){i=k[c+8>>2]|0;f=(j|0)==(i|0);if(f?(l=k[c+4>>2]|0,(l|0)==(k[c+12>>2]|0)):0){if((j|0)!=(k[b+8>>2]|0))break;f=k[b+4>>2]|0;if((f|0)==(k[b+12>>2]|0)){if((l|0)<(f|0))break;else e=d;r=o;return e|0}else{if((l|0)>(f|0))e=d;else break;r=o;return e|0}}h=k[b+8>>2]|0;if((j|0)==(h|0)){if(!f){b=d;r=o;return b|0}if((k[c+4>>2]|0)<(k[b+4>>2]|0))break;else e=d;r=o;return e|0}if(!f){f=k[c+4>>2]|0;g=k[b+4>>2]|0;if((f|0)==(g|0)){if((Pc(i,k[c+12>>2]|0,j,f,h,k[b+12>>2]|0)|0)==1)break;else e=d;r=o;return e|0}else{if((f|0)<(g|0))break;else e=d;r=o;return e|0}}}else if((j|0)>=(f|0)){b=d;r=o;return b|0}while(0);k[n>>2]=k[b>>2];k[n+4>>2]=k[b+4>>2];k[n+8>>2]=k[b+8>>2];k[n+12>>2]=k[b+12>>2];k[n+16>>2]=k[b+16>>2];k[n+20>>2]=k[b+20>>2];k[n+24>>2]=k[b+24>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];k[b+24>>2]=k[c+24>>2];k[c>>2]=k[n>>2];k[c+4>>2]=k[n+4>>2];k[c+8>>2]=k[n+8>>2];k[c+12>>2]=k[n+12>>2];k[c+16>>2]=k[n+16>>2];k[c+20>>2]=k[n+20>>2];k[c+24>>2]=k[n+24>>2];d=e+2|0;j=k[b>>2]|0;f=k[a>>2]|0;do if((j|0)==(f|0)){i=k[b+8>>2]|0;f=(j|0)==(i|0);if(f?(m=k[b+4>>2]|0,(m|0)==(k[b+12>>2]|0)):0){if((j|0)!=(k[a+8>>2]|0))break;f=k[a+4>>2]|0;if((f|0)==(k[a+12>>2]|0)){if((m|0)<(f|0))break;else e=d;r=o;return e|0}else{if((m|0)>(f|0))e=d;else break;r=o;return e|0}}h=k[a+8>>2]|0;if((j|0)==(h|0)){if(!f){b=d;r=o;return b|0}if((k[b+4>>2]|0)<(k[a+4>>2]|0))break;else e=d;r=o;return e|0}if(!f){f=k[b+4>>2]|0;g=k[a+4>>2]|0;if((f|0)==(g|0)){if((Pc(i,k[b+12>>2]|0,j,f,h,k[a+12>>2]|0)|0)==1)break;else e=d;r=o;return e|0}else{if((f|0)<(g|0))break;else e=d;r=o;return e|0}}}else if((j|0)>=(f|0)){b=d;r=o;return b|0}while(0);k[n>>2]=k[a>>2];k[n+4>>2]=k[a+4>>2];k[n+8>>2]=k[a+8>>2];k[n+12>>2]=k[a+12>>2];k[n+16>>2]=k[a+16>>2];k[n+20>>2]=k[a+20>>2];k[n+24>>2]=k[a+24>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];k[a+24>>2]=k[b+24>>2];k[b>>2]=k[n>>2];k[b+4>>2]=k[n+4>>2];k[b+8>>2]=k[n+8>>2];k[b+12>>2]=k[n+12>>2];k[b+16>>2]=k[n+16>>2];k[b+20>>2]=k[n+20>>2];k[b+24>>2]=k[n+24>>2];b=e+3|0;r=o;return b|0}function nd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;q=r;r=r+32|0;p=q;f=md(a,b,c,d)|0;l=k[e>>2]|0;g=k[d>>2]|0;do if((l|0)==(g|0)){j=k[e+8>>2]|0;g=(l|0)==(j|0);if(g?(h=k[e+4>>2]|0,(h|0)==(k[e+12>>2]|0)):0){if((l|0)!=(k[d+8>>2]|0))break;g=k[d+4>>2]|0;if((g|0)==(k[d+12>>2]|0)){if((h|0)<(g|0))break;r=q;return f|0}else{if((h|0)<=(g|0))break;r=q;return f|0}}i=k[d+8>>2]|0;if((l|0)==(i|0)){if(!g){b=f;r=q;return b|0}if((k[e+4>>2]|0)<(k[d+4>>2]|0))break;r=q;return f|0}if(!g){g=k[e+4>>2]|0;h=k[d+4>>2]|0;if((g|0)==(h|0)){if((Pc(j,k[e+12>>2]|0,l,g,i,k[d+12>>2]|0)|0)==1)break;r=q;return f|0}else{if((g|0)<(h|0))break;r=q;return f|0}}}else if((l|0)>=(g|0)){b=f;r=q;return b|0}while(0);k[p>>2]=k[d>>2];k[p+4>>2]=k[d+4>>2];k[p+8>>2]=k[d+8>>2];k[p+12>>2]=k[d+12>>2];k[p+16>>2]=k[d+16>>2];k[p+20>>2]=k[d+20>>2];k[p+24>>2]=k[d+24>>2];k[d>>2]=k[e>>2];k[d+4>>2]=k[e+4>>2];k[d+8>>2]=k[e+8>>2];k[d+12>>2]=k[e+12>>2];k[d+16>>2]=k[e+16>>2];k[d+20>>2]=k[e+20>>2];k[d+24>>2]=k[e+24>>2];k[e>>2]=k[p>>2];k[e+4>>2]=k[p+4>>2];k[e+8>>2]=k[p+8>>2];k[e+12>>2]=k[p+12>>2];k[e+16>>2]=k[p+16>>2];k[e+20>>2]=k[p+20>>2];k[e+24>>2]=k[p+24>>2];e=f+1|0;l=k[d>>2]|0;g=k[c>>2]|0;do if((l|0)==(g|0)){j=k[d+8>>2]|0;g=(l|0)==(j|0);if(g?(m=k[d+4>>2]|0,(m|0)==(k[d+12>>2]|0)):0){if((l|0)!=(k[c+8>>2]|0))break;g=k[c+4>>2]|0;if((g|0)==(k[c+12>>2]|0)){if((m|0)<(g|0))break;else f=e;r=q;return f|0}else{if((m|0)>(g|0))f=e;else break;r=q;return f|0}}i=k[c+8>>2]|0;if((l|0)==(i|0)){if(!g){b=e;r=q;return b|0}if((k[d+4>>2]|0)<(k[c+4>>2]|0))break;else f=e;r=q;return f|0}if(!g){g=k[d+4>>2]|0;h=k[c+4>>2]|0;if((g|0)==(h|0)){if((Pc(j,k[d+12>>2]|0,l,g,i,k[c+12>>2]|0)|0)==1)break;else f=e;r=q;return f|0}else{if((g|0)<(h|0))break;else f=e;r=q;return f|0}}}else if((l|0)>=(g|0)){b=e;r=q;return b|0}while(0);k[p>>2]=k[c>>2];k[p+4>>2]=k[c+4>>2];k[p+8>>2]=k[c+8>>2];k[p+12>>2]=k[c+12>>2];k[p+16>>2]=k[c+16>>2];k[p+20>>2]=k[c+20>>2];k[p+24>>2]=k[c+24>>2];k[c>>2]=k[d>>2];k[c+4>>2]=k[d+4>>2];k[c+8>>2]=k[d+8>>2];k[c+12>>2]=k[d+12>>2];k[c+16>>2]=k[d+16>>2];k[c+20>>2]=k[d+20>>2];k[c+24>>2]=k[d+24>>2];k[d>>2]=k[p>>2];k[d+4>>2]=k[p+4>>2];k[d+8>>2]=k[p+8>>2];k[d+12>>2]=k[p+12>>2];k[d+16>>2]=k[p+16>>2];k[d+20>>2]=k[p+20>>2];k[d+24>>2]=k[p+24>>2];e=f+2|0;l=k[c>>2]|0;g=k[b>>2]|0;do if((l|0)==(g|0)){j=k[c+8>>2]|0;g=(l|0)==(j|0);if(g?(n=k[c+4>>2]|0,(n|0)==(k[c+12>>2]|0)):0){if((l|0)!=(k[b+8>>2]|0))break;g=k[b+4>>2]|0;if((g|0)==(k[b+12>>2]|0)){if((n|0)<(g|0))break;else f=e;r=q;return f|0}else{if((n|0)>(g|0))f=e;else break;r=q;return f|0}}i=k[b+8>>2]|0;if((l|0)==(i|0)){if(!g){b=e;r=q;return b|0}if((k[c+4>>2]|0)<(k[b+4>>2]|0))break;else f=e;r=q;return f|0}if(!g){g=k[c+4>>2]|0;h=k[b+4>>2]|0;if((g|0)==(h|0)){if((Pc(j,k[c+12>>2]|0,l,g,i,k[b+12>>2]|0)|0)==1)break;else f=e;r=q;return f|0}else{if((g|0)<(h|0))break;else f=e;r=q;return f|0}}}else if((l|0)>=(g|0)){b=e;r=q;return b|0}while(0);k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];k[p+12>>2]=k[b+12>>2];k[p+16>>2]=k[b+16>>2];k[p+20>>2]=k[b+20>>2];k[p+24>>2]=k[b+24>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];k[b+24>>2]=k[c+24>>2];k[c>>2]=k[p>>2];k[c+4>>2]=k[p+4>>2];k[c+8>>2]=k[p+8>>2];k[c+12>>2]=k[p+12>>2];k[c+16>>2]=k[p+16>>2];k[c+20>>2]=k[p+20>>2];k[c+24>>2]=k[p+24>>2];e=f+3|0;l=k[b>>2]|0;g=k[a>>2]|0;do if((l|0)==(g|0)){j=k[b+8>>2]|0;g=(l|0)==(j|0);if(g?(o=k[b+4>>2]|0,(o|0)==(k[b+12>>2]|0)):0){if((l|0)!=(k[a+8>>2]|0))break;g=k[a+4>>2]|0;if((g|0)==(k[a+12>>2]|0)){if((o|0)<(g|0))break;else f=e;r=q;return f|0}else{if((o|0)>(g|0))f=e;else break;r=q;return f|0}}i=k[a+8>>2]|0;if((l|0)==(i|0)){if(!g){b=e;r=q;return b|0}if((k[b+4>>2]|0)<(k[a+4>>2]|0))break;else f=e;r=q;return f|0}if(!g){g=k[b+4>>2]|0;h=k[a+4>>2]|0;if((g|0)==(h|0)){if((Pc(j,k[b+12>>2]|0,l,g,i,k[a+12>>2]|0)|0)==1)break;else f=e;r=q;return f|0}else{if((g|0)<(h|0))break;else f=e;r=q;return f|0}}}else if((l|0)>=(g|0)){b=e;r=q;return b|0}while(0);k[p>>2]=k[a>>2];k[p+4>>2]=k[a+4>>2];k[p+8>>2]=k[a+8>>2];k[p+12>>2]=k[a+12>>2];k[p+16>>2]=k[a+16>>2];k[p+20>>2]=k[a+20>>2];k[p+24>>2]=k[a+24>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];k[a+24>>2]=k[b+24>>2];k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];k[b+24>>2]=k[p+24>>2];b=f+4|0;r=q;return b|0}function od(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0.0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;F=r;r=r+48|0;i=F+12|0;D=F;switch((b-a|0)/28|0|0){case 2:{h=b+-28|0;g=k[h>>2]|0;c=k[a>>2]|0;do if((g|0)==(c|0)){f=k[b+-20>>2]|0;c=(g|0)==(f|0);if(c?(d=k[b+-24>>2]|0,(d|0)==(k[b+-16>>2]|0)):0){if((g|0)!=(k[a+8>>2]|0))break;c=k[a+4>>2]|0;if((c|0)==(k[a+12>>2]|0)){if((d|0)<(c|0))break;else c=1;r=F;return c|0}else{if((d|0)>(c|0))c=1;else break;r=F;return c|0}}e=k[a+8>>2]|0;if((g|0)==(e|0)){if(!c){a=1;r=F;return a|0}if((k[b+-24>>2]|0)<(k[a+4>>2]|0))break;else c=1;r=F;return c|0}if(!c){c=k[b+-24>>2]|0;d=k[a+4>>2]|0;if((c|0)==(d|0)){if((Pc(f,k[b+-16>>2]|0,g,c,e,k[a+12>>2]|0)|0)==1)break;else c=1;r=F;return c|0}else{if((c|0)<(d|0))break;else c=1;r=F;return c|0}}}else if((g|0)>=(c|0)){a=1;r=F;return a|0}while(0);k[i>>2]=k[a>>2];k[i+4>>2]=k[a+4>>2];k[i+8>>2]=k[a+8>>2];k[i+12>>2]=k[a+12>>2];k[i+16>>2]=k[a+16>>2];k[i+20>>2]=k[a+20>>2];k[i+24>>2]=k[a+24>>2];k[a>>2]=k[h>>2];k[a+4>>2]=k[h+4>>2];k[a+8>>2]=k[h+8>>2];k[a+12>>2]=k[h+12>>2];k[a+16>>2]=k[h+16>>2];k[a+20>>2]=k[h+20>>2];k[a+24>>2]=k[h+24>>2];k[h>>2]=k[i>>2];k[h+4>>2]=k[i+4>>2];k[h+8>>2]=k[i+8>>2];k[h+12>>2]=k[i+12>>2];k[h+16>>2]=k[i+16>>2];k[h+20>>2]=k[i+20>>2];k[h+24>>2]=k[i+24>>2];a=1;r=F;return a|0}case 3:{ld(a,a+28|0,b+-28|0)|0;a=1;r=F;return a|0}case 4:{md(a,a+28|0,a+56|0,b+-28|0)|0;a=1;r=F;return a|0}case 5:{nd(a,a+28|0,a+56|0,a+84|0,b+-28|0)|0;a=1;r=F;return a|0}case 1:case 0:{a=1;r=F;return a|0}default:{e=a+56|0;ld(a,a+28|0,e)|0;d=a+84|0;if((d|0)==(b|0)){a=1;r=F;return a|0}c=0;while(1){B=k[d>>2]|0;f=k[e>>2]|0;do if((B|0)==(f|0)){h=k[d+8>>2]|0;f=(B|0)==(h|0);if(f?(C=k[d+4>>2]|0,(C|0)==(k[d+12>>2]|0)):0){if((B|0)!=(k[e+8>>2]|0)){h=B;E=39;break}f=k[e+4>>2]|0;if((f|0)==(k[e+12>>2]|0))if((C|0)<(f|0)){h=B;E=39;break}else break;else if((C|0)>(f|0))break;else{h=B;E=39;break}}i=k[e+8>>2]|0;if((B|0)==(i|0)){if(!f)break;if((k[d+4>>2]|0)<(k[e+4>>2]|0)){h=B;E=39;break}else break}if(!f){f=k[d+4>>2]|0;g=k[e+4>>2]|0;if((f|0)==(g|0))if((Pc(h,k[d+12>>2]|0,B,f,i,k[e+12>>2]|0)|0)==1){E=39;break}else break;else if((f|0)<(g|0)){E=39;break}else break}else{h=B;E=39}}else if((B|0)<(f|0)){h=k[d+8>>2]|0;E=39}while(0);if((E|0)==39){E=0;z=k[d+4>>2]|0;A=k[d+12>>2]|0;y=d+16|0;k[D>>2]=k[y>>2];k[D+4>>2]=k[y+4>>2];k[D+8>>2]=k[y+8>>2];k[d>>2]=k[e>>2];k[d+4>>2]=k[e+4>>2];k[d+8>>2]=k[e+8>>2];k[d+12>>2]=k[e+12>>2];k[d+16>>2]=k[e+16>>2];k[d+20>>2]=k[e+20>>2];k[d+24>>2]=k[e+24>>2];a:do if((e|0)==(a|0))e=a;else{o=(B|0)==(h|0);y=o&(z|0)==(A|0);p=((B|0)<0)<<31>>31;t=be(h|0,((h|0)<0)<<31>>31|0,B|0,p|0)|0;u=L;q=((z|0)<0)<<31>>31;w=be(A|0,((A|0)<0)<<31>>31|0,z|0,q|0)|0;x=L;s=(u|0)<0;v=be(0,0,t|0,u|0)|0;t=s?v:t;u=s?L:u;v=(x|0)<0;n=be(0,0,w|0,x|0)|0;w=v?n:w;x=v?L:x;while(1){n=e;e=e+-28|0;f=k[e>>2]|0;do if((B|0)==(f|0)){g=k[n+-20>>2]|0;f=(B|0)==(g|0);if(y){if(!f)break;f=k[n+-24>>2]|0;if((f|0)==(k[n+-16>>2]|0))if((z|0)<(f|0))break;else{e=n;break a}else if((z|0)>(f|0)){e=n;break a}else break}if(f){if(!o){e=n;break a}if((z|0)<(k[n+-24>>2]|0))break;else{e=n;break a}}if(!o){f=k[n+-24>>2]|0;if((z|0)!=(f|0))if((z|0)<(f|0))break;else{e=n;break a}l=be(B|0,p|0,g|0,((g|0)<0)<<31>>31|0)|0;i=L;g=k[n+-16>>2]|0;g=be(z|0,q|0,g|0,((g|0)<0)<<31>>31|0)|0;f=L;m=(i|0)<0;H=be(0,0,l|0,i|0)|0;i=m?L:i;G=(f|0)<0;I=be(0,0,g|0,f|0)|0;f=ne((G?I:g)|0,(G?L:f)|0,t|0,u|0)|0;g=L;i=ne((m?H:l)|0,i|0,w|0,x|0)|0;l=L;m=v^m;do if(s^G){if(!m){I=ge(f|0,g|0,i|0,l|0)|0;j=-(+(I>>>0)+4294967296.0*+(L>>>0));break}if(g>>>0>l>>>0|(g|0)==(l|0)&f>>>0>i>>>0){I=be(f|0,g|0,i|0,l|0)|0;j=-(+(I>>>0)+4294967296.0*+(L>>>0));break}else{I=be(i|0,l|0,f|0,g|0)|0;j=+(I>>>0)+4294967296.0*+(L>>>0);break}}else{if(m){I=ge(f|0,g|0,i|0,l|0)|0;j=+(I>>>0)+4294967296.0*+(L>>>0);break}if(g>>>0<l>>>0|(g|0)==(l|0)&f>>>0<i>>>0){I=be(i|0,l|0,f|0,g|0)|0;j=-(+(I>>>0)+4294967296.0*+(L>>>0));break}else{I=be(f|0,g|0,i|0,l|0)|0;j=+(I>>>0)+4294967296.0*+(L>>>0);break}}while(0);if(!(j!=0.0&!(j<0.0))){e=n;break a}}}else if((B|0)>=(f|0)){e=n;break a}while(0);k[n>>2]=k[e>>2];k[n+4>>2]=k[e+4>>2];k[n+8>>2]=k[e+8>>2];k[n+12>>2]=k[e+12>>2];k[n+16>>2]=k[e+16>>2];k[n+20>>2]=k[e+20>>2];k[n+24>>2]=k[e+24>>2];if((e|0)==(a|0)){e=a;break}}}while(0);k[e>>2]=B;k[e+4>>2]=z;k[e+8>>2]=h;k[e+12>>2]=A;I=e+16|0;k[I>>2]=k[D>>2];k[I+4>>2]=k[D+4>>2];k[I+8>>2]=k[D+8>>2];c=c+1|0;if((c|0)==8)break}e=d+28|0;if((e|0)==(b|0)){c=1;E=70;break}else{I=d;d=e;e=I}}if((E|0)==70){r=F;return c|0}I=(d+28|0)==(b|0);r=F;return I|0}}return 0}function pd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0;f=a+4|0;g=k[a>>2]|0;c=g;h=(k[f>>2]|0)-c|0;i=(h|0)/28|0;j=i+1|0;if(j>>>0>153391689)xa(1340,1363,303,1438);l=a+8|0;c=((k[l>>2]|0)-c|0)/28|0;if(c>>>0<76695844){c=c<<1;c=c>>>0<j>>>0?j:c;if(!c){c=0;d=0}else e=5}else{c=153391689;e=5}if((e|0)==5){e=c*28|0;e=(e|0)==0?1:e;d=_d(e)|0;a:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(e)|0;if(d)break a}a=ya(4)|0;k[a>>2]=128;La(a|0,8,1)}while(0)}e=d+(i*28|0)|0;k[e>>2]=k[b>>2];k[e+4>>2]=k[b+4>>2];k[e+8>>2]=k[b+8>>2];k[e+12>>2]=k[b+12>>2];k[e+16>>2]=k[b+16>>2];k[e+20>>2]=k[b+20>>2];k[e+24>>2]=k[b+24>>2];b=d+((((h|0)/-28|0)+i|0)*28|0)|0;fe(b|0,g|0,h|0)|0;k[a>>2]=b;k[f>>2]=d+(j*28|0);k[l>>2]=d+(c*28|0);if(!g)return;$d(g);return}function qd(a){a=a|0;return}function rd(a){a=a|0;$d(a);return}function sd(a){a=a|0;return 1459}function td(a){a=a|0;return}function ud(a){a=a|0;return}function vd(a){a=a|0;return}function wd(a){a=a|0;$d(a);return}function xd(a){a=a|0;$d(a);return}function yd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;g=r;r=r+64|0;f=g;if((a|0)!=(b|0))if((b|0)!=0?(e=Bd(b,56)|0,(e|0)!=0):0){b=f;d=b+56|0;do{k[b>>2]=0;b=b+4|0}while((b|0)<(d|0));k[f>>2]=e;k[f+8>>2]=a;k[f+12>>2]=-1;k[f+48>>2]=1;_a[k[(k[e>>2]|0)+28>>2]&3](e,f,k[c>>2]|0,1);if((k[f+24>>2]|0)==1){k[c>>2]=k[f+16>>2];b=1}else b=0}else b=0;else b=1;r=g;return b|0}function zd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;do if((a|0)==(k[b+8>>2]|0)){a=b+16|0;e=k[a>>2]|0;if(!e){k[a>>2]=c;k[b+24>>2]=d;k[b+36>>2]=1;break}if((e|0)!=(c|0)){d=b+36|0;k[d>>2]=(k[d>>2]|0)+1;k[b+24>>2]=2;i[b+54>>0]=1;break}a=b+24|0;if((k[a>>2]|0)==2)k[a>>2]=d}while(0);return}function Ad(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;do if((a|0)==(k[b+8>>2]|0)){a=b+16|0;e=k[a>>2]|0;if(!e){k[a>>2]=c;k[b+24>>2]=d;k[b+36>>2]=1;break}if((e|0)!=(c|0)){d=b+36|0;k[d>>2]=(k[d>>2]|0)+1;k[b+24>>2]=2;i[b+54>>0]=1;break}a=b+24|0;if((k[a>>2]|0)==2)k[a>>2]=d}else{e=k[a+8>>2]|0;_a[k[(k[e>>2]|0)+28>>2]&3](e,b,c,d)}while(0);return}function Bd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0;s=r;r=r+64|0;q=s;p=k[a>>2]|0;o=a+(k[p+-8>>2]|0)|0;p=k[p+-4>>2]|0;k[q>>2]=b;k[q+4>>2]=a;k[q+8>>2]=40;l=q+12|0;a=q+16|0;c=q+20|0;d=q+24|0;e=q+28|0;f=q+32|0;g=q+40|0;h=(p|0)==(b|0);m=l;n=m+40|0;do{k[m>>2]=0;m=m+4|0}while((m|0)<(n|0));j[l+40>>1]=0;i[l+42>>0]=0;a:do if(h){k[q+48>>2]=1;Ya[k[(k[b>>2]|0)+20>>2]&3](b,q,o,o,1,0);a=(k[d>>2]|0)==1?o:0}else{Ua[k[(k[p>>2]|0)+24>>2]&3](p,q,o,1,0);switch(k[q+36>>2]|0){case 0:{a=(k[g>>2]|0)==1&(k[e>>2]|0)==1&(k[f>>2]|0)==1?k[c>>2]|0:0;break a}case 1:break;default:{a=0;break a}}if((k[d>>2]|0)!=1?!((k[g>>2]|0)==0&(k[e>>2]|0)==1&(k[f>>2]|0)==1):0){a=0;break}a=k[a>>2]|0}while(0);r=s;return a|0}function Cd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;i[a+53>>0]=1;do if((k[a+4>>2]|0)==(c|0)){i[a+52>>0]=1;c=a+16|0;e=k[c>>2]|0;if(!e){k[c>>2]=b;k[a+24>>2]=d;k[a+36>>2]=1;if(!((d|0)==1?(k[a+48>>2]|0)==1:0))break;i[a+54>>0]=1;break}if((e|0)!=(b|0)){d=a+36|0;k[d>>2]=(k[d>>2]|0)+1;i[a+54>>0]=1;break}e=a+24|0;c=k[e>>2]|0;if((c|0)==2){k[e>>2]=d;c=d}if((c|0)==1?(k[a+48>>2]|0)==1:0)i[a+54>>0]=1}while(0);return}function Dd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0;a:do if((a|0)==(k[b+8>>2]|0)){if((k[b+4>>2]|0)==(c|0)?(f=b+28|0,(k[f>>2]|0)!=1):0)k[f>>2]=d}else{if((a|0)!=(k[b>>2]|0)){h=k[a+8>>2]|0;Ua[k[(k[h>>2]|0)+24>>2]&3](h,b,c,d,e);break}if((k[b+16>>2]|0)!=(c|0)?(g=b+20|0,(k[g>>2]|0)!=(c|0)):0){k[b+32>>2]=d;d=b+44|0;if((k[d>>2]|0)==4)break;f=b+52|0;i[f>>0]=0;j=b+53|0;i[j>>0]=0;a=k[a+8>>2]|0;Ya[k[(k[a>>2]|0)+20>>2]&3](a,b,c,c,1,e);if(i[j>>0]|0){if(!(i[f>>0]|0)){f=1;h=13}}else{f=0;h=13}do if((h|0)==13){k[g>>2]=c;j=b+40|0;k[j>>2]=(k[j>>2]|0)+1;if((k[b+36>>2]|0)==1?(k[b+24>>2]|0)==2:0){i[b+54>>0]=1;if(f)break}else h=16;if((h|0)==16?f:0)break;k[d>>2]=4;break a}while(0);k[d>>2]=3;break}if((d|0)==1)k[b+32>>2]=1}while(0);return}function Ed(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;do if((a|0)==(k[b+8>>2]|0)){if((k[b+4>>2]|0)==(c|0)?(g=b+28|0,(k[g>>2]|0)!=1):0)k[g>>2]=d}else if((a|0)==(k[b>>2]|0)){if((k[b+16>>2]|0)!=(c|0)?(f=b+20|0,(k[f>>2]|0)!=(c|0)):0){k[b+32>>2]=d;k[f>>2]=c;e=b+40|0;k[e>>2]=(k[e>>2]|0)+1;if((k[b+36>>2]|0)==1?(k[b+24>>2]|0)==2:0)i[b+54>>0]=1;k[b+44>>2]=4;break}if((d|0)==1)k[b+32>>2]=1}while(0);return}function Fd(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if((a|0)==(k[b+8>>2]|0))Cd(b,c,d,e);else{a=k[a+8>>2]|0;Ya[k[(k[a>>2]|0)+20>>2]&3](a,b,c,d,e,f)}return}function Gd(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if((a|0)==(k[b+8>>2]|0))Cd(b,c,d,e);return}function Hd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;e=r;r=r+16|0;d=e;k[d>>2]=k[c>>2];a=Ta[k[(k[a>>2]|0)+16>>2]&7](a,b,d)|0;if(a)k[c>>2]=k[d>>2];r=e;return a&1|0}function Id(a){a=a|0;if(!a)a=0;else a=(Bd(a,88)|0)!=0;return a&1|0}function Jd(a){a=a|0;var b=0,c=0;b=0;while(1){if((l[1474+b>>0]|0)==(a|0)){c=2;break}b=b+1|0;if((b|0)==87){b=87;a=1562;c=5;break}}if((c|0)==2)if(!b)b=1562;else{a=1562;c=5}if((c|0)==5)while(1){do{c=a;a=a+1|0}while((i[c>>0]|0)!=0);b=b+-1|0;if(!b){b=a;break}else c=5}return b|0}function Kd(a,b){a=+a;b=b|0;var c=0,d=0,e=0;p[t>>3]=a;c=k[t>>2]|0;d=k[t+4>>2]|0;e=de(c|0,d|0,52)|0;e=e&2047;switch(e|0){case 0:{if(a!=0.0){a=+Kd(a*18446744073709552.0e3,b);c=(k[b>>2]|0)+-64|0}else c=0;k[b>>2]=c;break}case 2047:break;default:{k[b>>2]=e+-1022;k[t>>2]=c;k[t+4>>2]=d&-2146435073|1071644672;a=+p[t>>3]}}return +a}function Ld(a,b){a=a|0;b=b|0;do if(!a)a=1;else{if(b>>>0<128){i[a>>0]=b;a=1;break}if(b>>>0<2048){i[a>>0]=b>>>6|192;i[a+1>>0]=b&63|128;a=2;break}if(b>>>0<55296|(b&-8192|0)==57344){i[a>>0]=b>>>12|224;i[a+1>>0]=b>>>6&63|128;i[a+2>>0]=b&63|128;a=3;break}if((b+-65536|0)>>>0<1048576){i[a>>0]=b>>>18|240;i[a+1>>0]=b>>>12&63|128;i[a+2>>0]=b>>>6&63|128;i[a+3>>0]=b&63|128;a=4;break}if(!(k[56]|0))a=268;else{a=(Ga()|0)+60|0;a=k[a>>2]|0}k[a>>2]=84;a=-1}while(0);return a|0}function Md(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;d=c+16|0;e=k[d>>2]|0;if(!e)if(!(Td(c)|0)){e=k[d>>2]|0;f=4}else d=0;else f=4;a:do if((f|0)==4){g=c+20|0;f=k[g>>2]|0;if((e-f|0)>>>0<b>>>0){d=Ta[k[c+36>>2]&7](c,a,b)|0;break}b:do if((i[c+75>>0]|0)>-1){d=b;while(1){if(!d){e=f;d=0;break b}e=d+-1|0;if((i[a+e>>0]|0)==10)break;else d=e}if((Ta[k[c+36>>2]&7](c,a,d)|0)>>>0<d>>>0)break a;b=b-d|0;a=a+d|0;e=k[g>>2]|0}else{e=f;d=0}while(0);fe(e|0,a|0,b|0)|0;k[g>>2]=(k[g>>2]|0)+b;d=d+b|0}while(0);return d|0}function Nd(a,b){a=a|0;b=b|0;var c=0,d=0;c=r;r=r+16|0;d=c;k[d>>2]=b;Od(272,a,d)|0;r=c;return}function Od(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;q=r;r=r+224|0;m=q+120|0;p=q+80|0;o=q;n=q+136|0;d=p;e=d+40|0;do{k[d>>2]=0;d=d+4|0}while((d|0)<(e|0));k[m>>2]=k[c>>2];if((Vd(0,b,m,o,p)|0)<0)c=-1;else{c=k[a>>2]|0;l=c&32;if((i[a+74>>0]|0)<1)k[a>>2]=c&-33;j=a+48|0;if(!(k[j>>2]|0)){d=a+44|0;e=k[d>>2]|0;k[d>>2]=n;f=a+28|0;k[f>>2]=n;g=a+20|0;k[g>>2]=n;k[j>>2]=80;h=a+16|0;k[h>>2]=n+80;c=Vd(a,b,m,o,p)|0;if(e){Ta[k[a+36>>2]&7](a,0,0)|0;c=(k[g>>2]|0)==0?-1:c;k[d>>2]=e;k[j>>2]=0;k[h>>2]=0;k[f>>2]=0;k[g>>2]=0}}else c=Vd(a,b,m,o,p)|0;p=k[a>>2]|0;k[a>>2]=p|l;c=(p&32|0)==0?c:-1}r=q;return c|0}function Pd(a){a=a|0;var b=0,c=0;c=r;r=r+16|0;b=c;k[b>>2]=k[a+60>>2];a=va(6,b|0)|0;if(a>>>0>4294963200){if(!(k[56]|0))b=268;else{b=(Ga()|0)+60|0;b=k[b>>2]|0}k[b>>2]=0-a;a=-1}r=c;return a|0}function Qd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;f=r;r=r+32|0;g=f;d=f+20|0;k[g>>2]=k[a+60>>2];k[g+4>>2]=0;k[g+8>>2]=b;k[g+12>>2]=d;k[g+16>>2]=c;b=Ha(140,g|0)|0;if(b>>>0<=4294963200)if((b|0)<0)e=7;else a=k[d>>2]|0;else{if(!(k[56]|0))a=268;else{a=(Ga()|0)+60|0;a=k[a>>2]|0}k[a>>2]=0-b;e=7}if((e|0)==7){k[d>>2]=-1;a=-1}r=f;return a|0}function Rd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0;p=r;r=r+48|0;m=p+16|0;l=p;i=p+32|0;n=a+28|0;f=k[n>>2]|0;k[i>>2]=f;o=a+20|0;f=(k[o>>2]|0)-f|0;k[i+4>>2]=f;k[i+8>>2]=b;k[i+12>>2]=c;h=a+60|0;j=a+44|0;e=2;f=f+c|0;while(1){if(!(k[56]|0)){k[m>>2]=k[h>>2];k[m+4>>2]=i;k[m+8>>2]=e;b=Qa(146,m|0)|0;if(b>>>0>4294963200){if(!(k[56]|0))d=268;else{d=(Ga()|0)+60|0;d=k[d>>2]|0}k[d>>2]=0-b;b=-1}}else{Na(8,a|0);k[l>>2]=k[h>>2];k[l+4>>2]=i;k[l+8>>2]=e;b=Qa(146,l|0)|0;if(b>>>0>4294963200){if(!(k[56]|0))d=268;else{d=(Ga()|0)+60|0;d=k[d>>2]|0}k[d>>2]=0-b;b=-1}ua(0)}if((f|0)==(b|0)){b=13;break}if((b|0)<0){b=15;break}f=f-b|0;d=k[i+4>>2]|0;if(b>>>0<=d>>>0)if((e|0)==2){k[n>>2]=(k[n>>2]|0)+b;g=d;d=i;e=2}else{g=d;d=i}else{g=k[j>>2]|0;k[n>>2]=g;k[o>>2]=g;g=k[i+12>>2]|0;b=b-d|0;d=i+8|0;e=e+-1|0}k[d>>2]=(k[d>>2]|0)+b;k[d+4>>2]=g-b;i=d}if((b|0)==13){m=k[j>>2]|0;k[a+16>>2]=m+(k[a+48>>2]|0);a=m;k[n>>2]=a;k[o>>2]=a}else if((b|0)==15){k[a+16>>2]=0;k[n>>2]=0;k[o>>2]=0;k[a>>2]=k[a>>2]|32;if((e|0)==2)c=0;else c=c-(k[i+4>>2]|0)|0}r=p;return c|0}function Sd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;e=r;r=r+80|0;d=e;k[a+36>>2]=4;if((k[a>>2]&64|0)==0?(k[d>>2]=k[a+60>>2],k[d+4>>2]=21505,k[d+8>>2]=e+12,(Ia(54,d|0)|0)!=0):0)i[a+75>>0]=-1;d=Rd(a,b,c)|0;r=e;return d|0}function Td(a){a=a|0;var b=0,c=0;b=a+74|0;c=i[b>>0]|0;i[b>>0]=c+255|c;b=k[a>>2]|0;if(!(b&8)){k[a+8>>2]=0;k[a+4>>2]=0;b=k[a+44>>2]|0;k[a+28>>2]=b;k[a+20>>2]=b;k[a+16>>2]=b+(k[a+48>>2]|0);b=0}else{k[a>>2]=b|32;b=-1}return b|0}function Ud(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;f=b&255;d=(c|0)!=0;a:do if(d&(a&3|0)!=0){e=b&255;while(1){if((i[a>>0]|0)==e<<24>>24)break a;a=a+1|0;c=c+-1|0;d=(c|0)!=0;if(!(d&(a&3|0)!=0)){g=5;break}}}else g=5;while(0);b:do if((g|0)==5)if(d){e=b&255;if((i[a>>0]|0)!=e<<24>>24){d=ha(f,16843009)|0;c:do if(c>>>0>3)while(1){f=k[a>>2]^d;if((f&-2139062144^-2139062144)&f+-16843009)break;a=a+4|0;c=c+-4|0;if(c>>>0<=3){g=11;break c}}else g=11;while(0);if((g|0)==11)if(!c){c=0;break}while(1){if((i[a>>0]|0)==e<<24>>24)break b;a=a+1|0;c=c+-1|0;if(!c){c=0;break}}}}else c=0;while(0);return ((c|0)!=0?a:0)|0}function Vd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,m=0.0,n=0,o=0,q=0,s=0,u=0,v=0,w=0,x=0.0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0;ga=r;r=r+624|0;ba=ga+24|0;da=ga+16|0;ca=ga+588|0;Y=ga+576|0;aa=ga;V=ga+536|0;fa=ga+8|0;ea=ga+528|0;M=(a|0)!=0;N=V+40|0;U=N;V=V+39|0;W=fa+4|0;X=Y+12|0;Y=Y+11|0;Z=ca;_=X;$=_-Z|0;O=-2-Z|0;P=_+2|0;Q=ba+288|0;R=ca+9|0;S=R;T=ca+8|0;f=0;g=0;q=0;a:while(1){do if((f|0)>-1){if((g|0)<=(2147483647-f|0)){f=g+f|0;break}if(!(k[56]|0))f=268;else{f=(Ga()|0)+60|0;f=k[f>>2]|0}k[f>>2]=75;f=-1}while(0);g=i[b>>0]|0;if(!(g<<24>>24)){K=249;break}else h=b;b:while(1){switch(g<<24>>24){case 37:{g=h;K=11;break b}case 0:{g=h;break b}default:{}}J=h+1|0;g=i[J>>0]|0;h=J}c:do if((K|0)==11)while(1){K=0;if((i[g+1>>0]|0)!=37)break c;h=h+1|0;g=g+2|0;if((i[g>>0]|0)==37)K=11;else break}while(0);y=h-b|0;if(M?(k[a>>2]&32|0)==0:0)Md(b,y,a)|0;if((h|0)!=(b|0)){b=g;g=y;continue}o=g+1|0;h=i[o>>0]|0;n=(h<<24>>24)+-48|0;if(n>>>0<10){J=(i[g+2>>0]|0)==36;o=J?g+3|0:o;h=i[o>>0]|0;u=J?n:-1;q=J?1:q}else u=-1;g=h<<24>>24;d:do if((g&-32|0)==32){n=0;while(1){if(!(1<<g+-32&75913)){s=n;break d}n=1<<(h<<24>>24)+-32|n;o=o+1|0;h=i[o>>0]|0;g=h<<24>>24;if((g&-32|0)!=32){s=n;break}}}else s=0;while(0);do if(h<<24>>24==42){h=o+1|0;g=(i[h>>0]|0)+-48|0;if(g>>>0<10?(i[o+2>>0]|0)==36:0){k[e+(g<<2)>>2]=10;q=1;g=o+3|0;n=k[d+((i[h>>0]|0)+-48<<3)>>2]|0}else{if(q){f=-1;break a}if(!M){w=s;q=0;J=0;break}q=(k[c>>2]|0)+(4-1)&~(4-1);n=k[q>>2]|0;k[c>>2]=q+4;q=0;g=h}if((n|0)<0){w=s|8192;h=g;J=0-n|0}else{w=s;h=g;J=n}}else{g=(h<<24>>24)+-48|0;if(g>>>0<10){h=o;n=0;do{n=(n*10|0)+g|0;h=h+1|0;g=(i[h>>0]|0)+-48|0}while(g>>>0<10);if((n|0)<0){f=-1;break a}else{w=s;J=n}}else{w=s;h=o;J=0}}while(0);e:do if((i[h>>0]|0)==46){n=h+1|0;g=i[n>>0]|0;if(g<<24>>24!=42){o=(g<<24>>24)+-48|0;if(o>>>0<10){g=n;h=0}else{g=n;o=0;break}while(1){h=(h*10|0)+o|0;g=g+1|0;o=(i[g>>0]|0)+-48|0;if(o>>>0>=10){o=h;break e}}}n=h+2|0;g=(i[n>>0]|0)+-48|0;if(g>>>0<10?(i[h+3>>0]|0)==36:0){k[e+(g<<2)>>2]=10;g=h+4|0;o=k[d+((i[n>>0]|0)+-48<<3)>>2]|0;break}if(q){f=-1;break a}if(M){g=(k[c>>2]|0)+(4-1)&~(4-1);o=k[g>>2]|0;k[c>>2]=g+4;g=n}else{g=n;o=0}}else{g=h;o=-1}while(0);v=0;while(1){h=(i[g>>0]|0)+-65|0;if(h>>>0>57){f=-1;break a}I=g+1|0;h=i[4398+(v*58|0)+h>>0]|0;n=h&255;if((n+-1|0)>>>0<8){g=I;v=n}else break}if(!(h<<24>>24)){f=-1;break}s=(u|0)>-1;do if(h<<24>>24==19)if(s){f=-1;break a}else K=54;else{if(s){k[e+(u<<2)>>2]=n;G=d+(u<<3)|0;H=k[G+4>>2]|0;K=aa;k[K>>2]=k[G>>2];k[K+4>>2]=H;K=54;break}if(!M){f=0;break a}Xd(aa,n,c)}while(0);if((K|0)==54?(K=0,!M):0){b=I;g=y;continue}u=i[g>>0]|0;u=(v|0)!=0&(u&15|0)==3?u&-33:u;h=w&-65537;H=(w&8192|0)==0?w:h;f:do switch(u|0){case 110:switch(v|0){case 0:{k[k[aa>>2]>>2]=f;b=I;g=y;continue a}case 1:{k[k[aa>>2]>>2]=f;b=I;g=y;continue a}case 2:{b=k[aa>>2]|0;k[b>>2]=f;k[b+4>>2]=((f|0)<0)<<31>>31;b=I;g=y;continue a}case 3:{j[k[aa>>2]>>1]=f;b=I;g=y;continue a}case 4:{i[k[aa>>2]>>0]=f;b=I;g=y;continue a}case 6:{k[k[aa>>2]>>2]=f;b=I;g=y;continue a}case 7:{b=k[aa>>2]|0;k[b>>2]=f;k[b+4>>2]=((f|0)<0)<<31>>31;b=I;g=y;continue a}default:{b=I;g=y;continue a}}case 112:{s=H|8;o=o>>>0>8?o:8;u=120;K=66;break}case 88:case 120:{s=H;K=66;break}case 111:{h=aa;g=k[h>>2]|0;h=k[h+4>>2]|0;if((g|0)==0&(h|0)==0)b=N;else{b=N;do{b=b+-1|0;i[b>>0]=g&7|48;g=de(g|0,h|0,3)|0;h=L}while(!((g|0)==0&(h|0)==0))}if(!(H&8)){g=H;s=0;n=4878;K=79}else{s=U-b+1|0;g=H;o=(o|0)<(s|0)?s:o;s=0;n=4878;K=79}break}case 105:case 100:{g=aa;b=k[g>>2]|0;g=k[g+4>>2]|0;if((g|0)<0){b=be(0,0,b|0,g|0)|0;g=L;h=aa;k[h>>2]=b;k[h+4>>2]=g;h=1;n=4878;K=78;break f}if(!(H&2048)){n=H&1;h=n;n=(n|0)==0?4878:4880;K=78}else{h=1;n=4879;K=78}break}case 117:{g=aa;b=k[g>>2]|0;g=k[g+4>>2]|0;h=0;n=4878;K=78;break}case 99:{i[V>>0]=k[aa>>2];b=V;u=1;w=0;v=4878;g=N;break}case 109:{if(!(k[56]|0))b=268;else{b=(Ga()|0)+60|0;b=k[b>>2]|0}g=Jd(k[b>>2]|0)|0;K=86;break}case 115:{g=k[aa>>2]|0;g=(g|0)!=0?g:4888;K=86;break}case 67:{k[fa>>2]=k[aa>>2];k[W>>2]=0;k[aa>>2]=fa;h=fa;o=-1;K=91;break}case 83:if(!o){Zd(a,32,J,0,H);g=0;K=102;break f}else{h=k[aa>>2]|0;K=91;break f}case 65:case 71:case 70:case 69:case 97:case 103:case 102:case 101:{m=+p[aa>>3];k[da>>2]=0;p[t>>3]=m;if((k[t+4>>2]|0)>=0)if(!(H&2048)){G=H&1;F=G;G=(G|0)==0?4896:4901}else{F=1;G=4898}else{m=-m;F=1;G=4895}p[t>>3]=m;E=k[t+4>>2]&2146435072;do if(E>>>0<2146435072|(E|0)==2146435072&0<0){x=+Kd(m,da)*2.0;g=x!=0.0;if(g)k[da>>2]=(k[da>>2]|0)+-1;C=u|32;if((C|0)==97){v=u&32;y=(v|0)==0?G:G+9|0;w=F|2;b=12-o|0;do if(!(o>>>0>11|(b|0)==0)){m=8.0;do{b=b+-1|0;m=m*16.0}while((b|0)!=0);if((i[y>>0]|0)==45){m=-(m+(-x-m));break}else{m=x+m-m;break}}else m=x;while(0);g=k[da>>2]|0;b=(g|0)<0?0-g|0:g;b=Yd(b,((b|0)<0)<<31>>31,X)|0;if((b|0)==(X|0)){i[Y>>0]=48;b=Y}i[b+-1>>0]=(g>>31&2)+43;s=b+-2|0;i[s>>0]=u+15;n=(o|0)<1;h=(H&8|0)==0;g=ca;while(1){G=~~m;b=g+1|0;i[g>>0]=l[4862+G>>0]|v;m=(m-+(G|0))*16.0;do if((b-Z|0)==1){if(h&(n&m==0.0))break;i[b>>0]=46;b=g+2|0}while(0);if(!(m!=0.0))break;else g=b}h=s;o=(o|0)!=0&(O+b|0)<(o|0)?P+o-h|0:$-h+b|0;n=o+w|0;Zd(a,32,J,n,H);if(!(k[a>>2]&32))Md(y,w,a)|0;Zd(a,48,J,n,H^65536);g=b-Z|0;if(!(k[a>>2]&32))Md(ca,g,a)|0;b=_-h|0;Zd(a,48,o-(g+b)|0,0,0);if(!(k[a>>2]&32))Md(s,b,a)|0;Zd(a,32,J,n,H^8192);g=(n|0)<(J|0)?J:n;break}b=(o|0)<0?6:o;if(g){g=(k[da>>2]|0)+-28|0;k[da>>2]=g;m=x*268435456.0}else{m=x;g=k[da>>2]|0}E=(g|0)<0?ba:Q;D=E;h=E;do{B=~~m>>>0;k[h>>2]=B;h=h+4|0;m=(m-+(B>>>0))*1.0e9}while(m!=0.0);g=k[da>>2]|0;if((g|0)>0){n=E;o=h;while(1){s=(g|0)>29?29:g;g=o+-4|0;do if(g>>>0>=n>>>0){h=0;do{A=ee(k[g>>2]|0,0,s|0)|0;A=ge(A|0,L|0,h|0,0)|0;B=L;z=pe(A|0,B|0,1e9,0)|0;k[g>>2]=z;h=oe(A|0,B|0,1e9,0)|0;g=g+-4|0}while(g>>>0>=n>>>0);if(!h)break;n=n+-4|0;k[n>>2]=h}while(0);h=o;while(1){if(h>>>0<=n>>>0)break;g=h+-4|0;if(!(k[g>>2]|0))h=g;else break}g=(k[da>>2]|0)-s|0;k[da>>2]=g;if((g|0)>0)o=h;else break}}else n=E;if((g|0)<0){y=((b+25|0)/9|0)+1|0;z=(C|0)==102;do{w=0-g|0;w=(w|0)>9?9:w;do if(n>>>0<h>>>0){g=(1<<w)+-1|0;o=1e9>>>w;v=0;s=n;do{B=k[s>>2]|0;k[s>>2]=(B>>>w)+v;v=ha(B&g,o)|0;s=s+4|0}while(s>>>0<h>>>0);g=(k[n>>2]|0)==0?n+4|0:n;if(!v){n=g;g=h;break}k[h>>2]=v;n=g;g=h+4|0}else{n=(k[n>>2]|0)==0?n+4|0:n;g=h}while(0);h=z?E:n;h=(g-h>>2|0)>(y|0)?h+(y<<2)|0:g;g=(k[da>>2]|0)+w|0;k[da>>2]=g}while((g|0)<0);s=n;B=h}else{s=n;B=h}do if(s>>>0<B>>>0){g=(D-s>>2)*9|0;n=k[s>>2]|0;if(n>>>0<10)break;else h=10;do{h=h*10|0;g=g+1|0}while(n>>>0>=h>>>0)}else g=0;while(0);z=(C|0)==103;A=(b|0)!=0;h=b-((C|0)!=102?g:0)+((A&z)<<31>>31)|0;if((h|0)<(((B-D>>2)*9|0)+-9|0)){o=h+9216|0;y=(o|0)/9|0;h=E+(y+-1023<<2)|0;o=((o|0)%9|0)+1|0;if((o|0)<9){n=10;do{n=n*10|0;o=o+1|0}while((o|0)!=9)}else n=10;v=k[h>>2]|0;w=(v>>>0)%(n>>>0)|0;if((w|0)==0?(E+(y+-1022<<2)|0)==(B|0):0)n=s;else K=167;do if((K|0)==167){K=0;x=(((v>>>0)/(n>>>0)|0)&1|0)==0?9007199254740992.0:9007199254740994.0;o=(n|0)/2|0;do if(w>>>0<o>>>0)m=.5;else{if((w|0)==(o|0)?(E+(y+-1022<<2)|0)==(B|0):0){m=1.0;break}m=1.5}while(0);do if(F){if((i[G>>0]|0)!=45)break;x=-x;m=-m}while(0);o=v-w|0;k[h>>2]=o;if(!(x+m!=x)){n=s;break}C=o+n|0;k[h>>2]=C;if(C>>>0>999999999){g=s;while(1){n=h+-4|0;k[h>>2]=0;if(n>>>0<g>>>0){g=g+-4|0;k[g>>2]=0}C=(k[n>>2]|0)+1|0;k[n>>2]=C;if(C>>>0>999999999)h=n;else{s=g;h=n;break}}}g=(D-s>>2)*9|0;o=k[s>>2]|0;if(o>>>0<10){n=s;break}else n=10;do{n=n*10|0;g=g+1|0}while(o>>>0>=n>>>0);n=s}while(0);h=h+4|0;C=n;h=B>>>0>h>>>0?h:B}else{C=s;h=B}w=0-g|0;B=h;while(1){if(B>>>0<=C>>>0){y=0;break}h=B+-4|0;if(!(k[h>>2]|0))B=h;else{y=1;break}}do if(z){b=(A&1^1)+b|0;if((b|0)>(g|0)&(g|0)>-5){u=u+-1|0;b=b+-1-g|0}else{u=u+-2|0;b=b+-1|0}h=H&8;if(h)break;do if(y){h=k[B+-4>>2]|0;if(!h){n=9;break}if(!((h>>>0)%10|0)){o=10;n=0}else{n=0;break}do{o=o*10|0;n=n+1|0}while(((h>>>0)%(o>>>0)|0|0)==0)}else n=9;while(0);h=((B-D>>2)*9|0)+-9|0;if((u|32|0)==102){h=h-n|0;h=(h|0)<0?0:h;b=(b|0)<(h|0)?b:h;h=0;break}else{h=h+g-n|0;h=(h|0)<0?0:h;b=(b|0)<(h|0)?b:h;h=0;break}}else h=H&8;while(0);v=b|h;o=(v|0)!=0&1;s=(u|32|0)==102;if(s){g=(g|0)>0?g:0;u=0}else{n=(g|0)<0?w:g;n=Yd(n,((n|0)<0)<<31>>31,X)|0;if((_-n|0)<2)do{n=n+-1|0;i[n>>0]=48}while((_-n|0)<2);i[n+-1>>0]=(g>>31&2)+43;D=n+-2|0;i[D>>0]=u;g=_-D|0;u=D}w=F+1+b+o+g|0;Zd(a,32,J,w,H);if(!(k[a>>2]&32))Md(G,F,a)|0;Zd(a,48,J,w,H^65536);do if(s){n=C>>>0>E>>>0?E:C;h=n;do{g=Yd(k[h>>2]|0,0,R)|0;do if((h|0)==(n|0)){if((g|0)!=(R|0))break;i[T>>0]=48;g=T}else{if(g>>>0<=ca>>>0)break;do{g=g+-1|0;i[g>>0]=48}while(g>>>0>ca>>>0)}while(0);if(!(k[a>>2]&32))Md(g,S-g|0,a)|0;h=h+4|0}while(h>>>0<=E>>>0);do if(v){if(k[a>>2]&32)break;Md(4930,1,a)|0}while(0);if((b|0)>0&h>>>0<B>>>0)while(1){g=Yd(k[h>>2]|0,0,R)|0;if(g>>>0>ca>>>0)do{g=g+-1|0;i[g>>0]=48}while(g>>>0>ca>>>0);if(!(k[a>>2]&32))Md(g,(b|0)>9?9:b,a)|0;h=h+4|0;g=b+-9|0;if(!((b|0)>9&h>>>0<B>>>0)){b=g;break}else b=g}Zd(a,48,b+9|0,9,0)}else{s=y?B:C+4|0;if((b|0)>-1){o=(h|0)==0;n=C;do{g=Yd(k[n>>2]|0,0,R)|0;if((g|0)==(R|0)){i[T>>0]=48;g=T}do if((n|0)==(C|0)){h=g+1|0;if(!(k[a>>2]&32))Md(g,1,a)|0;if(o&(b|0)<1){g=h;break}if(k[a>>2]&32){g=h;break}Md(4930,1,a)|0;g=h}else{if(g>>>0<=ca>>>0)break;do{g=g+-1|0;i[g>>0]=48}while(g>>>0>ca>>>0)}while(0);h=S-g|0;if(!(k[a>>2]&32))Md(g,(b|0)>(h|0)?h:b,a)|0;b=b-h|0;n=n+4|0}while(n>>>0<s>>>0&(b|0)>-1)}Zd(a,48,b+18|0,18,0);if(k[a>>2]&32)break;Md(u,_-u|0,a)|0}while(0);Zd(a,32,J,w,H^8192);g=(w|0)<(J|0)?J:w}else{s=(u&32|0)!=0;o=m!=m|0.0!=0.0;g=o?0:F;n=g+3|0;Zd(a,32,J,n,h);b=k[a>>2]|0;if(!(b&32)){Md(G,g,a)|0;b=k[a>>2]|0}if(!(b&32))Md(o?(s?4922:4926):s?4914:4918,3,a)|0;Zd(a,32,J,n,H^8192);g=(n|0)<(J|0)?J:n}while(0);b=I;continue a}default:{h=H;u=o;w=0;v=4878;g=N}}while(0);g:do if((K|0)==66){h=aa;g=k[h>>2]|0;h=k[h+4>>2]|0;n=u&32;if(!((g|0)==0&(h|0)==0)){b=N;do{b=b+-1|0;i[b>>0]=l[4862+(g&15)>>0]|n;g=de(g|0,h|0,4)|0;h=L}while(!((g|0)==0&(h|0)==0));K=aa;if((s&8|0)==0|(k[K>>2]|0)==0&(k[K+4>>2]|0)==0){g=s;s=0;n=4878;K=79}else{g=s;s=2;n=4878+(u>>4)|0;K=79}}else{b=N;g=s;s=0;n=4878;K=79}}else if((K|0)==78){b=Yd(b,g,N)|0;g=H;s=h;K=79}else if((K|0)==86){K=0;H=Ud(g,0,o)|0;G=(H|0)==0;b=g;u=G?o:H-g|0;w=0;v=4878;g=G?g+o|0:H}else if((K|0)==91){K=0;g=0;b=0;s=h;while(1){n=k[s>>2]|0;if(!n)break;b=Ld(ea,n)|0;if((b|0)<0|b>>>0>(o-g|0)>>>0)break;g=b+g|0;if(o>>>0>g>>>0)s=s+4|0;else break}if((b|0)<0){f=-1;break a}Zd(a,32,J,g,H);if(!g){g=0;K=102}else{n=0;while(1){b=k[h>>2]|0;if(!b){K=102;break g}b=Ld(ea,b)|0;n=b+n|0;if((n|0)>(g|0)){K=102;break g}if(!(k[a>>2]&32))Md(ea,b,a)|0;if(n>>>0>=g>>>0){K=102;break}else h=h+4|0}}}while(0);if((K|0)==102){K=0;Zd(a,32,J,g,H^8192);b=I;g=(J|0)>(g|0)?J:g;continue}if((K|0)==79){K=0;h=(o|0)>-1?g&-65537:g;g=aa;g=(k[g>>2]|0)!=0|(k[g+4>>2]|0)!=0;if((o|0)!=0|g){u=(g&1^1)+(U-b)|0;u=(o|0)>(u|0)?o:u;w=s;v=n;g=N}else{b=N;u=0;w=s;v=n;g=N}}s=g-b|0;n=(u|0)<(s|0)?s:u;o=w+n|0;g=(J|0)<(o|0)?o:J;Zd(a,32,g,o,h);if(!(k[a>>2]&32))Md(v,w,a)|0;Zd(a,48,g,o,h^65536);Zd(a,48,n,s,0);if(!(k[a>>2]&32))Md(b,s,a)|0;Zd(a,32,g,o,h^8192);b=I}h:do if((K|0)==249)if(!a)if(!q)f=0;else{f=1;while(1){b=k[e+(f<<2)>>2]|0;if(!b){b=0;break}Xd(d+(f<<3)|0,b,c);f=f+1|0;if((f|0)>=10){f=1;break h}}while(1){f=f+1|0;if(b){f=-1;break h}if((f|0)>=10){f=1;break h}b=k[e+(f<<2)>>2]|0}}while(0);r=ga;return f|0}function Wd(a){a=a|0;return}function Xd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0.0;a:do if(b>>>0<=20)do switch(b|0){case 9:{d=(k[c>>2]|0)+(4-1)&~(4-1);b=k[d>>2]|0;k[c>>2]=d+4;k[a>>2]=b;break a}case 10:{d=(k[c>>2]|0)+(4-1)&~(4-1);b=k[d>>2]|0;k[c>>2]=d+4;d=a;k[d>>2]=b;k[d+4>>2]=((b|0)<0)<<31>>31;break a}case 11:{d=(k[c>>2]|0)+(4-1)&~(4-1);b=k[d>>2]|0;k[c>>2]=d+4;d=a;k[d>>2]=b;k[d+4>>2]=0;break a}case 12:{d=(k[c>>2]|0)+(8-1)&~(8-1);b=d;e=k[b>>2]|0;b=k[b+4>>2]|0;k[c>>2]=d+8;d=a;k[d>>2]=e;k[d+4>>2]=b;break a}case 13:{e=(k[c>>2]|0)+(4-1)&~(4-1);d=k[e>>2]|0;k[c>>2]=e+4;d=(d&65535)<<16>>16;e=a;k[e>>2]=d;k[e+4>>2]=((d|0)<0)<<31>>31;break a}case 14:{e=(k[c>>2]|0)+(4-1)&~(4-1);d=k[e>>2]|0;k[c>>2]=e+4;e=a;k[e>>2]=d&65535;k[e+4>>2]=0;break a}case 15:{e=(k[c>>2]|0)+(4-1)&~(4-1);d=k[e>>2]|0;k[c>>2]=e+4;d=(d&255)<<24>>24;e=a;k[e>>2]=d;k[e+4>>2]=((d|0)<0)<<31>>31;break a}case 16:{e=(k[c>>2]|0)+(4-1)&~(4-1);d=k[e>>2]|0;k[c>>2]=e+4;e=a;k[e>>2]=d&255;k[e+4>>2]=0;break a}case 17:{e=(k[c>>2]|0)+(8-1)&~(8-1);f=+p[e>>3];k[c>>2]=e+8;p[a>>3]=f;break a}case 18:{e=(k[c>>2]|0)+(8-1)&~(8-1);f=+p[e>>3];k[c>>2]=e+8;p[a>>3]=f;break a}default:break a}while(0);while(0);return}function Yd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if(b>>>0>0|(b|0)==0&a>>>0>4294967295)while(1){d=pe(a|0,b|0,10,0)|0;c=c+-1|0;i[c>>0]=d|48;d=a;a=oe(a|0,b|0,10,0)|0;if(!(b>>>0>9|(b|0)==9&d>>>0>4294967295))break;else b=L}if(a)while(1){c=c+-1|0;i[c>>0]=(a>>>0)%10|0|48;if(a>>>0<10)break;else a=(a>>>0)/10|0}return c|0}function Zd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;g=r;r=r+256|0;f=g;do if((c|0)>(d|0)&(e&73728|0)==0){e=c-d|0;ce(f|0,b|0,(e>>>0>256?256:e)|0)|0;d=k[a>>2]|0;c=(d&32|0)==0;if(e>>>0>255){b=e;do{if(c){Md(f,256,a)|0;d=k[a>>2]|0}b=b+-256|0;c=(d&32|0)==0}while(b>>>0>255);if(c)e=e&255;else break}else if(!c)break;Md(f,e,a)|0}while(0);r=g;return}function _d(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;do if(a>>>0<245){o=a>>>0<11?16:a+11&-8;a=o>>>3;h=k[96]|0;b=h>>>a;if(b&3){b=(b&1^1)+a|0;d=b<<1;c=424+(d<<2)|0;d=424+(d+2<<2)|0;e=k[d>>2]|0;f=e+8|0;g=k[f>>2]|0;do if((c|0)!=(g|0)){if(g>>>0<(k[100]|0)>>>0)Ma();a=g+12|0;if((k[a>>2]|0)==(e|0)){k[a>>2]=c;k[d>>2]=g;break}else Ma()}else k[96]=h&~(1<<b);while(0);L=b<<3;k[e+4>>2]=L|3;L=e+(L|4)|0;k[L>>2]=k[L>>2]|1;L=f;return L|0}g=k[98]|0;if(o>>>0>g>>>0){if(b){d=2<<a;d=b<<a&(d|0-d);d=(d&0-d)+-1|0;i=d>>>12&16;d=d>>>i;e=d>>>5&8;d=d>>>e;f=d>>>2&4;d=d>>>f;c=d>>>1&2;d=d>>>c;b=d>>>1&1;b=(e|i|f|c|b)+(d>>>b)|0;d=b<<1;c=424+(d<<2)|0;d=424+(d+2<<2)|0;f=k[d>>2]|0;i=f+8|0;e=k[i>>2]|0;do if((c|0)!=(e|0)){if(e>>>0<(k[100]|0)>>>0)Ma();a=e+12|0;if((k[a>>2]|0)==(f|0)){k[a>>2]=c;k[d>>2]=e;j=k[98]|0;break}else Ma()}else{k[96]=h&~(1<<b);j=g}while(0);L=b<<3;g=L-o|0;k[f+4>>2]=o|3;h=f+o|0;k[f+(o|4)>>2]=g|1;k[f+L>>2]=g;if(j){e=k[101]|0;c=j>>>3;a=c<<1;d=424+(a<<2)|0;b=k[96]|0;c=1<<c;if(b&c){b=424+(a+2<<2)|0;a=k[b>>2]|0;if(a>>>0<(k[100]|0)>>>0)Ma();else{l=b;m=a}}else{k[96]=b|c;l=424+(a+2<<2)|0;m=d}k[l>>2]=e;k[m+12>>2]=e;k[e+8>>2]=m;k[e+12>>2]=d}k[98]=g;k[101]=h;L=i;return L|0}a=k[97]|0;if(a){h=(a&0-a)+-1|0;K=h>>>12&16;h=h>>>K;J=h>>>5&8;h=h>>>J;L=h>>>2&4;h=h>>>L;b=h>>>1&2;h=h>>>b;i=h>>>1&1;i=k[688+((J|K|L|b|i)+(h>>>i)<<2)>>2]|0;h=(k[i+4>>2]&-8)-o|0;b=i;while(1){a=k[b+16>>2]|0;if(!a){a=k[b+20>>2]|0;if(!a)break}b=(k[a+4>>2]&-8)-o|0;L=b>>>0<h>>>0;h=L?b:h;b=a;i=L?a:i}e=k[100]|0;if(i>>>0<e>>>0)Ma();g=i+o|0;if(i>>>0>=g>>>0)Ma();f=k[i+24>>2]|0;c=k[i+12>>2]|0;do if((c|0)==(i|0)){b=i+20|0;a=k[b>>2]|0;if(!a){b=i+16|0;a=k[b>>2]|0;if(!a){n=0;break}}while(1){c=a+20|0;d=k[c>>2]|0;if(d){a=d;b=c;continue}c=a+16|0;d=k[c>>2]|0;if(!d)break;else{a=d;b=c}}if(b>>>0<e>>>0)Ma();else{k[b>>2]=0;n=a;break}}else{d=k[i+8>>2]|0;if(d>>>0<e>>>0)Ma();a=d+12|0;if((k[a>>2]|0)!=(i|0))Ma();b=c+8|0;if((k[b>>2]|0)==(i|0)){k[a>>2]=c;k[b>>2]=d;n=c;break}else Ma()}while(0);do if(f){a=k[i+28>>2]|0;b=688+(a<<2)|0;if((i|0)==(k[b>>2]|0)){k[b>>2]=n;if(!n){k[97]=k[97]&~(1<<a);break}}else{if(f>>>0<(k[100]|0)>>>0)Ma();a=f+16|0;if((k[a>>2]|0)==(i|0))k[a>>2]=n;else k[f+20>>2]=n;if(!n)break}b=k[100]|0;if(n>>>0<b>>>0)Ma();k[n+24>>2]=f;a=k[i+16>>2]|0;do if(a)if(a>>>0<b>>>0)Ma();else{k[n+16>>2]=a;k[a+24>>2]=n;break}while(0);a=k[i+20>>2]|0;if(a)if(a>>>0<(k[100]|0)>>>0)Ma();else{k[n+20>>2]=a;k[a+24>>2]=n;break}}while(0);if(h>>>0<16){L=h+o|0;k[i+4>>2]=L|3;L=i+(L+4)|0;k[L>>2]=k[L>>2]|1}else{k[i+4>>2]=o|3;k[i+(o|4)>>2]=h|1;k[i+(h+o)>>2]=h;a=k[98]|0;if(a){e=k[101]|0;c=a>>>3;a=c<<1;d=424+(a<<2)|0;b=k[96]|0;c=1<<c;if(b&c){a=424+(a+2<<2)|0;b=k[a>>2]|0;if(b>>>0<(k[100]|0)>>>0)Ma();else{p=a;q=b}}else{k[96]=b|c;p=424+(a+2<<2)|0;q=d}k[p>>2]=e;k[q+12>>2]=e;k[e+8>>2]=q;k[e+12>>2]=d}k[98]=h;k[101]=g}L=i+8|0;return L|0}}}else if(a>>>0<=4294967231){a=a+11|0;o=a&-8;i=k[97]|0;if(i){b=0-o|0;a=a>>>8;if(a)if(o>>>0>16777215)h=31;else{q=(a+1048320|0)>>>16&8;x=a<<q;p=(x+520192|0)>>>16&4;x=x<<p;h=(x+245760|0)>>>16&2;h=14-(p|q|h)+(x<<h>>>15)|0;h=o>>>(h+7|0)&1|h<<1}else h=0;a=k[688+(h<<2)>>2]|0;a:do if(!a){c=0;a=0;x=86}else{e=b;c=0;f=o<<((h|0)==31?0:25-(h>>>1)|0);g=a;a=0;while(1){d=k[g+4>>2]&-8;b=d-o|0;if(b>>>0<e>>>0)if((d|0)==(o|0)){d=g;a=g;x=90;break a}else a=g;else b=e;x=k[g+20>>2]|0;g=k[g+16+(f>>>31<<2)>>2]|0;c=(x|0)==0|(x|0)==(g|0)?c:x;if(!g){x=86;break}else{e=b;f=f<<1}}}while(0);if((x|0)==86){if((c|0)==0&(a|0)==0){a=2<<h;a=i&(a|0-a);if(!a)break;a=(a&0-a)+-1|0;n=a>>>12&16;a=a>>>n;m=a>>>5&8;a=a>>>m;p=a>>>2&4;a=a>>>p;q=a>>>1&2;a=a>>>q;c=a>>>1&1;c=k[688+((m|n|p|q|c)+(a>>>c)<<2)>>2]|0;a=0}if(!c){h=b;i=a}else{d=c;x=90}}if((x|0)==90)while(1){x=0;q=(k[d+4>>2]&-8)-o|0;c=q>>>0<b>>>0;b=c?q:b;a=c?d:a;c=k[d+16>>2]|0;if(c){d=c;x=90;continue}d=k[d+20>>2]|0;if(!d){h=b;i=a;break}else x=90}if((i|0)!=0?h>>>0<((k[98]|0)-o|0)>>>0:0){e=k[100]|0;if(i>>>0<e>>>0)Ma();g=i+o|0;if(i>>>0>=g>>>0)Ma();f=k[i+24>>2]|0;c=k[i+12>>2]|0;do if((c|0)==(i|0)){b=i+20|0;a=k[b>>2]|0;if(!a){b=i+16|0;a=k[b>>2]|0;if(!a){s=0;break}}while(1){c=a+20|0;d=k[c>>2]|0;if(d){a=d;b=c;continue}c=a+16|0;d=k[c>>2]|0;if(!d)break;else{a=d;b=c}}if(b>>>0<e>>>0)Ma();else{k[b>>2]=0;s=a;break}}else{d=k[i+8>>2]|0;if(d>>>0<e>>>0)Ma();a=d+12|0;if((k[a>>2]|0)!=(i|0))Ma();b=c+8|0;if((k[b>>2]|0)==(i|0)){k[a>>2]=c;k[b>>2]=d;s=c;break}else Ma()}while(0);do if(f){a=k[i+28>>2]|0;b=688+(a<<2)|0;if((i|0)==(k[b>>2]|0)){k[b>>2]=s;if(!s){k[97]=k[97]&~(1<<a);break}}else{if(f>>>0<(k[100]|0)>>>0)Ma();a=f+16|0;if((k[a>>2]|0)==(i|0))k[a>>2]=s;else k[f+20>>2]=s;if(!s)break}b=k[100]|0;if(s>>>0<b>>>0)Ma();k[s+24>>2]=f;a=k[i+16>>2]|0;do if(a)if(a>>>0<b>>>0)Ma();else{k[s+16>>2]=a;k[a+24>>2]=s;break}while(0);a=k[i+20>>2]|0;if(a)if(a>>>0<(k[100]|0)>>>0)Ma();else{k[s+20>>2]=a;k[a+24>>2]=s;break}}while(0);b:do if(h>>>0>=16){k[i+4>>2]=o|3;k[i+(o|4)>>2]=h|1;k[i+(h+o)>>2]=h;a=h>>>3;if(h>>>0<256){b=a<<1;d=424+(b<<2)|0;c=k[96]|0;a=1<<a;if(c&a){a=424+(b+2<<2)|0;b=k[a>>2]|0;if(b>>>0<(k[100]|0)>>>0)Ma();else{t=a;u=b}}else{k[96]=c|a;t=424+(b+2<<2)|0;u=d}k[t>>2]=g;k[u+12>>2]=g;k[i+(o+8)>>2]=u;k[i+(o+12)>>2]=d;break}a=h>>>8;if(a)if(h>>>0>16777215)d=31;else{K=(a+1048320|0)>>>16&8;L=a<<K;J=(L+520192|0)>>>16&4;L=L<<J;d=(L+245760|0)>>>16&2;d=14-(J|K|d)+(L<<d>>>15)|0;d=h>>>(d+7|0)&1|d<<1}else d=0;a=688+(d<<2)|0;k[i+(o+28)>>2]=d;k[i+(o+20)>>2]=0;k[i+(o+16)>>2]=0;b=k[97]|0;c=1<<d;if(!(b&c)){k[97]=b|c;k[a>>2]=g;k[i+(o+24)>>2]=a;k[i+(o+12)>>2]=g;k[i+(o+8)>>2]=g;break}a=k[a>>2]|0;c:do if((k[a+4>>2]&-8|0)!=(h|0)){d=h<<((d|0)==31?0:25-(d>>>1)|0);while(1){c=a+16+(d>>>31<<2)|0;b=k[c>>2]|0;if(!b)break;if((k[b+4>>2]&-8|0)==(h|0)){w=b;break c}else{d=d<<1;a=b}}if(c>>>0<(k[100]|0)>>>0)Ma();else{k[c>>2]=g;k[i+(o+24)>>2]=a;k[i+(o+12)>>2]=g;k[i+(o+8)>>2]=g;break b}}else w=a;while(0);a=w+8|0;b=k[a>>2]|0;L=k[100]|0;if(b>>>0>=L>>>0&w>>>0>=L>>>0){k[b+12>>2]=g;k[a>>2]=g;k[i+(o+8)>>2]=b;k[i+(o+12)>>2]=w;k[i+(o+24)>>2]=0;break}else Ma()}else{L=h+o|0;k[i+4>>2]=L|3;L=i+(L+4)|0;k[L>>2]=k[L>>2]|1}while(0);L=i+8|0;return L|0}}}else o=-1;while(0);c=k[98]|0;if(c>>>0>=o>>>0){a=c-o|0;b=k[101]|0;if(a>>>0>15){k[101]=b+o;k[98]=a;k[b+(o+4)>>2]=a|1;k[b+c>>2]=a;k[b+4>>2]=o|3}else{k[98]=0;k[101]=0;k[b+4>>2]=c|3;L=b+(c+4)|0;k[L>>2]=k[L>>2]|1}L=b+8|0;return L|0}a=k[99]|0;if(a>>>0>o>>>0){K=a-o|0;k[99]=K;L=k[102]|0;k[102]=L+o;k[L+(o+4)>>2]=K|1;k[L+4>>2]=o|3;L=L+8|0;return L|0}do if(!(k[214]|0)){a=Fa(30)|0;if(!(a+-1&a)){k[216]=a;k[215]=a;k[217]=-1;k[218]=-1;k[219]=0;k[207]=0;w=(Oa(0)|0)&-16^1431655768;k[214]=w;break}else Ma()}while(0);f=o+48|0;e=k[216]|0;g=o+47|0;d=e+g|0;e=0-e|0;h=d&e;if(h>>>0<=o>>>0){L=0;return L|0}a=k[206]|0;if((a|0)!=0?(u=k[204]|0,w=u+h|0,w>>>0<=u>>>0|w>>>0>a>>>0):0){L=0;return L|0}d:do if(!(k[207]&4)){c=k[102]|0;e:do if(c){a=832;while(1){b=k[a>>2]|0;if(b>>>0<=c>>>0?(r=a+4|0,(b+(k[r>>2]|0)|0)>>>0>c>>>0):0)break;a=k[a+8>>2]|0;if(!a){x=174;break e}}b=d-(k[99]|0)&e;if(b>>>0<2147483647){c=Ba(b|0)|0;w=(c|0)==((k[a>>2]|0)+(k[r>>2]|0)|0);a=w?b:0;if(w){if((c|0)!=(-1|0)){r=c;q=a;x=194;break d}}else x=184}else a=0}else x=174;while(0);do if((x|0)==174){d=Ba(0)|0;if((d|0)!=(-1|0)){a=d;b=k[215]|0;c=b+-1|0;if(!(c&a))b=h;else b=h-a+(c+a&0-b)|0;a=k[204]|0;c=a+b|0;if(b>>>0>o>>>0&b>>>0<2147483647){w=k[206]|0;if((w|0)!=0?c>>>0<=a>>>0|c>>>0>w>>>0:0){a=0;break}c=Ba(b|0)|0;x=(c|0)==(d|0);a=x?b:0;if(x){r=d;q=a;x=194;break d}else x=184}else a=0}else a=0}while(0);f:do if((x|0)==184){d=0-b|0;do if(f>>>0>b>>>0&(b>>>0<2147483647&(c|0)!=(-1|0))?(v=k[216]|0,v=g-b+v&0-v,v>>>0<2147483647):0)if((Ba(v|0)|0)==(-1|0)){Ba(d|0)|0;break f}else{b=v+b|0;break}while(0);if((c|0)!=(-1|0)){r=c;q=b;x=194;break d}}while(0);k[207]=k[207]|4;x=191}else{a=0;x=191}while(0);if((((x|0)==191?h>>>0<2147483647:0)?(y=Ba(h|0)|0,z=Ba(0)|0,y>>>0<z>>>0&((y|0)!=(-1|0)&(z|0)!=(-1|0))):0)?(A=z-y|0,B=A>>>0>(o+40|0)>>>0,B):0){r=y;q=B?A:a;x=194}if((x|0)==194){a=(k[204]|0)+q|0;k[204]=a;if(a>>>0>(k[205]|0)>>>0)k[205]=a;g=k[102]|0;g:do if(g){e=832;while(1){a=k[e>>2]|0;b=e+4|0;c=k[b>>2]|0;if((r|0)==(a+c|0)){x=204;break}d=k[e+8>>2]|0;if(!d)break;else e=d}if(((x|0)==204?(k[e+12>>2]&8|0)==0:0)?g>>>0<r>>>0&g>>>0>=a>>>0:0){k[b>>2]=c+q;L=(k[99]|0)+q|0;K=g+8|0;K=(K&7|0)==0?0:0-K&7;J=L-K|0;k[102]=g+K;k[99]=J;k[g+(K+4)>>2]=J|1;k[g+(L+4)>>2]=40;k[103]=k[218];break}a=k[100]|0;if(r>>>0<a>>>0){k[100]=r;i=r}else i=a;b=r+q|0;a=832;while(1){if((k[a>>2]|0)==(b|0)){x=212;break}a=k[a+8>>2]|0;if(!a){b=832;break}}if((x|0)==212)if(!(k[a+12>>2]&8)){k[a>>2]=r;n=a+4|0;k[n>>2]=(k[n>>2]|0)+q;n=r+8|0;n=(n&7|0)==0?0:0-n&7;j=r+(q+8)|0;j=(j&7|0)==0?0:0-j&7;a=r+(j+q)|0;m=n+o|0;p=r+m|0;l=a-(r+n)-o|0;k[r+(n+4)>>2]=o|3;h:do if((a|0)!=(g|0)){if((a|0)==(k[101]|0)){L=(k[98]|0)+l|0;k[98]=L;k[101]=p;k[r+(m+4)>>2]=L|1;k[r+(L+m)>>2]=L;break}g=q+4|0;b=k[r+(g+j)>>2]|0;if((b&3|0)==1){h=b&-8;e=b>>>3;i:do if(b>>>0>=256){f=k[r+((j|24)+q)>>2]|0;d=k[r+(q+12+j)>>2]|0;do if((d|0)==(a|0)){c=j|16;d=r+(g+c)|0;b=k[d>>2]|0;if(!b){c=r+(c+q)|0;b=k[c>>2]|0;if(!b){I=0;break}}else c=d;while(1){d=b+20|0;e=k[d>>2]|0;if(e){b=e;c=d;continue}d=b+16|0;e=k[d>>2]|0;if(!e)break;else{b=e;c=d}}if(c>>>0<i>>>0)Ma();else{k[c>>2]=0;I=b;break}}else{e=k[r+((j|8)+q)>>2]|0;if(e>>>0<i>>>0)Ma();b=e+12|0;if((k[b>>2]|0)!=(a|0))Ma();c=d+8|0;if((k[c>>2]|0)==(a|0)){k[b>>2]=d;k[c>>2]=e;I=d;break}else Ma()}while(0);if(!f)break;b=k[r+(q+28+j)>>2]|0;c=688+(b<<2)|0;do if((a|0)!=(k[c>>2]|0)){if(f>>>0<(k[100]|0)>>>0)Ma();b=f+16|0;if((k[b>>2]|0)==(a|0))k[b>>2]=I;else k[f+20>>2]=I;if(!I)break i}else{k[c>>2]=I;if(I)break;k[97]=k[97]&~(1<<b);break i}while(0);c=k[100]|0;if(I>>>0<c>>>0)Ma();k[I+24>>2]=f;a=j|16;b=k[r+(a+q)>>2]|0;do if(b)if(b>>>0<c>>>0)Ma();else{k[I+16>>2]=b;k[b+24>>2]=I;break}while(0);a=k[r+(g+a)>>2]|0;if(!a)break;if(a>>>0<(k[100]|0)>>>0)Ma();else{k[I+20>>2]=a;k[a+24>>2]=I;break}}else{c=k[r+((j|8)+q)>>2]|0;d=k[r+(q+12+j)>>2]|0;b=424+(e<<1<<2)|0;do if((c|0)!=(b|0)){if(c>>>0<i>>>0)Ma();if((k[c+12>>2]|0)==(a|0))break;Ma()}while(0);if((d|0)==(c|0)){k[96]=k[96]&~(1<<e);break}do if((d|0)==(b|0))E=d+8|0;else{if(d>>>0<i>>>0)Ma();b=d+8|0;if((k[b>>2]|0)==(a|0)){E=b;break}Ma()}while(0);k[c+12>>2]=d;k[E>>2]=c}while(0);a=r+((h|j)+q)|0;e=h+l|0}else e=l;a=a+4|0;k[a>>2]=k[a>>2]&-2;k[r+(m+4)>>2]=e|1;k[r+(e+m)>>2]=e;a=e>>>3;if(e>>>0<256){b=a<<1;d=424+(b<<2)|0;c=k[96]|0;a=1<<a;do if(!(c&a)){k[96]=c|a;J=424+(b+2<<2)|0;K=d}else{a=424+(b+2<<2)|0;b=k[a>>2]|0;if(b>>>0>=(k[100]|0)>>>0){J=a;K=b;break}Ma()}while(0);k[J>>2]=p;k[K+12>>2]=p;k[r+(m+8)>>2]=K;k[r+(m+12)>>2]=d;break}a=e>>>8;do if(!a)d=0;else{if(e>>>0>16777215){d=31;break}J=(a+1048320|0)>>>16&8;K=a<<J;I=(K+520192|0)>>>16&4;K=K<<I;d=(K+245760|0)>>>16&2;d=14-(I|J|d)+(K<<d>>>15)|0;d=e>>>(d+7|0)&1|d<<1}while(0);a=688+(d<<2)|0;k[r+(m+28)>>2]=d;k[r+(m+20)>>2]=0;k[r+(m+16)>>2]=0;b=k[97]|0;c=1<<d;if(!(b&c)){k[97]=b|c;k[a>>2]=p;k[r+(m+24)>>2]=a;k[r+(m+12)>>2]=p;k[r+(m+8)>>2]=p;break}a=k[a>>2]|0;j:do if((k[a+4>>2]&-8|0)!=(e|0)){d=e<<((d|0)==31?0:25-(d>>>1)|0);while(1){c=a+16+(d>>>31<<2)|0;b=k[c>>2]|0;if(!b)break;if((k[b+4>>2]&-8|0)==(e|0)){L=b;break j}else{d=d<<1;a=b}}if(c>>>0<(k[100]|0)>>>0)Ma();else{k[c>>2]=p;k[r+(m+24)>>2]=a;k[r+(m+12)>>2]=p;k[r+(m+8)>>2]=p;break h}}else L=a;while(0);a=L+8|0;b=k[a>>2]|0;K=k[100]|0;if(b>>>0>=K>>>0&L>>>0>=K>>>0){k[b+12>>2]=p;k[a>>2]=p;k[r+(m+8)>>2]=b;k[r+(m+12)>>2]=L;k[r+(m+24)>>2]=0;break}else Ma()}else{L=(k[99]|0)+l|0;k[99]=L;k[102]=p;k[r+(m+4)>>2]=L|1}while(0);L=r+(n|8)|0;return L|0}else b=832;while(1){a=k[b>>2]|0;if(a>>>0<=g>>>0?(C=k[b+4>>2]|0,D=a+C|0,D>>>0>g>>>0):0)break;b=k[b+8>>2]|0}b=a+(C+-39)|0;b=a+(C+-47+((b&7|0)==0?0:0-b&7))|0;e=g+16|0;b=b>>>0<e>>>0?g:b;a=b+8|0;c=r+8|0;c=(c&7|0)==0?0:0-c&7;L=q+-40-c|0;k[102]=r+c;k[99]=L;k[r+(c+4)>>2]=L|1;k[r+(q+-36)>>2]=40;k[103]=k[218];c=b+4|0;k[c>>2]=27;k[a>>2]=k[208];k[a+4>>2]=k[209];k[a+8>>2]=k[210];k[a+12>>2]=k[211];k[208]=r;k[209]=q;k[211]=0;k[210]=a;a=b+28|0;k[a>>2]=7;if((b+32|0)>>>0<D>>>0)do{L=a;a=a+4|0;k[a>>2]=7}while((L+8|0)>>>0<D>>>0);if((b|0)!=(g|0)){f=b-g|0;k[c>>2]=k[c>>2]&-2;k[g+4>>2]=f|1;k[b>>2]=f;a=f>>>3;if(f>>>0<256){b=a<<1;d=424+(b<<2)|0;c=k[96]|0;a=1<<a;if(c&a){a=424+(b+2<<2)|0;b=k[a>>2]|0;if(b>>>0<(k[100]|0)>>>0)Ma();else{F=a;G=b}}else{k[96]=c|a;F=424+(b+2<<2)|0;G=d}k[F>>2]=g;k[G+12>>2]=g;k[g+8>>2]=G;k[g+12>>2]=d;break}a=f>>>8;if(a)if(f>>>0>16777215)d=31;else{K=(a+1048320|0)>>>16&8;L=a<<K;J=(L+520192|0)>>>16&4;L=L<<J;d=(L+245760|0)>>>16&2;d=14-(J|K|d)+(L<<d>>>15)|0;d=f>>>(d+7|0)&1|d<<1}else d=0;c=688+(d<<2)|0;k[g+28>>2]=d;k[g+20>>2]=0;k[e>>2]=0;a=k[97]|0;b=1<<d;if(!(a&b)){k[97]=a|b;k[c>>2]=g;k[g+24>>2]=c;k[g+12>>2]=g;k[g+8>>2]=g;break}a=k[c>>2]|0;k:do if((k[a+4>>2]&-8|0)!=(f|0)){d=f<<((d|0)==31?0:25-(d>>>1)|0);while(1){c=a+16+(d>>>31<<2)|0;b=k[c>>2]|0;if(!b)break;if((k[b+4>>2]&-8|0)==(f|0)){H=b;break k}else{d=d<<1;a=b}}if(c>>>0<(k[100]|0)>>>0)Ma();else{k[c>>2]=g;k[g+24>>2]=a;k[g+12>>2]=g;k[g+8>>2]=g;break g}}else H=a;while(0);a=H+8|0;b=k[a>>2]|0;L=k[100]|0;if(b>>>0>=L>>>0&H>>>0>=L>>>0){k[b+12>>2]=g;k[a>>2]=g;k[g+8>>2]=b;k[g+12>>2]=H;k[g+24>>2]=0;break}else Ma()}}else{L=k[100]|0;if((L|0)==0|r>>>0<L>>>0)k[100]=r;k[208]=r;k[209]=q;k[211]=0;k[105]=k[214];k[104]=-1;a=0;do{L=a<<1;K=424+(L<<2)|0;k[424+(L+3<<2)>>2]=K;k[424+(L+2<<2)>>2]=K;a=a+1|0}while((a|0)!=32);L=r+8|0;L=(L&7|0)==0?0:0-L&7;K=q+-40-L|0;k[102]=r+L;k[99]=K;k[r+(L+4)>>2]=K|1;k[r+(q+-36)>>2]=40;k[103]=k[218]}while(0);a=k[99]|0;if(a>>>0>o>>>0){K=a-o|0;k[99]=K;L=k[102]|0;k[102]=L+o;k[L+(o+4)>>2]=K|1;k[L+4>>2]=o|3;L=L+8|0;return L|0}}if(!(k[56]|0))a=268;else{a=(Ga()|0)+60|0;a=k[a>>2]|0}k[a>>2]=12;L=0;return L|0}function $d(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;if(!a)return;b=a+-8|0;h=k[100]|0;if(b>>>0<h>>>0)Ma();c=k[a+-4>>2]|0;d=c&3;if((d|0)==1)Ma();o=c&-8;q=a+(o+-8)|0;do if(!(c&1)){b=k[b>>2]|0;if(!d)return;i=-8-b|0;l=a+i|0;m=b+o|0;if(l>>>0<h>>>0)Ma();if((l|0)==(k[101]|0)){b=a+(o+-4)|0;c=k[b>>2]|0;if((c&3|0)!=3){u=l;f=m;break}k[98]=m;k[b>>2]=c&-2;k[a+(i+4)>>2]=m|1;k[q>>2]=m;return}e=b>>>3;if(b>>>0<256){d=k[a+(i+8)>>2]|0;c=k[a+(i+12)>>2]|0;b=424+(e<<1<<2)|0;if((d|0)!=(b|0)){if(d>>>0<h>>>0)Ma();if((k[d+12>>2]|0)!=(l|0))Ma()}if((c|0)==(d|0)){k[96]=k[96]&~(1<<e);u=l;f=m;break}if((c|0)!=(b|0)){if(c>>>0<h>>>0)Ma();b=c+8|0;if((k[b>>2]|0)==(l|0))g=b;else Ma()}else g=c+8|0;k[d+12>>2]=c;k[g>>2]=d;u=l;f=m;break}g=k[a+(i+24)>>2]|0;d=k[a+(i+12)>>2]|0;do if((d|0)==(l|0)){c=a+(i+20)|0;b=k[c>>2]|0;if(!b){c=a+(i+16)|0;b=k[c>>2]|0;if(!b){j=0;break}}while(1){d=b+20|0;e=k[d>>2]|0;if(e){b=e;c=d;continue}d=b+16|0;e=k[d>>2]|0;if(!e)break;else{b=e;c=d}}if(c>>>0<h>>>0)Ma();else{k[c>>2]=0;j=b;break}}else{e=k[a+(i+8)>>2]|0;if(e>>>0<h>>>0)Ma();b=e+12|0;if((k[b>>2]|0)!=(l|0))Ma();c=d+8|0;if((k[c>>2]|0)==(l|0)){k[b>>2]=d;k[c>>2]=e;j=d;break}else Ma()}while(0);if(g){b=k[a+(i+28)>>2]|0;c=688+(b<<2)|0;if((l|0)==(k[c>>2]|0)){k[c>>2]=j;if(!j){k[97]=k[97]&~(1<<b);u=l;f=m;break}}else{if(g>>>0<(k[100]|0)>>>0)Ma();b=g+16|0;if((k[b>>2]|0)==(l|0))k[b>>2]=j;else k[g+20>>2]=j;if(!j){u=l;f=m;break}}c=k[100]|0;if(j>>>0<c>>>0)Ma();k[j+24>>2]=g;b=k[a+(i+16)>>2]|0;do if(b)if(b>>>0<c>>>0)Ma();else{k[j+16>>2]=b;k[b+24>>2]=j;break}while(0);b=k[a+(i+20)>>2]|0;if(b)if(b>>>0<(k[100]|0)>>>0)Ma();else{k[j+20>>2]=b;k[b+24>>2]=j;u=l;f=m;break}else{u=l;f=m}}else{u=l;f=m}}else{u=b;f=o}while(0);if(u>>>0>=q>>>0)Ma();b=a+(o+-4)|0;c=k[b>>2]|0;if(!(c&1))Ma();if(!(c&2)){if((q|0)==(k[102]|0)){t=(k[99]|0)+f|0;k[99]=t;k[102]=u;k[u+4>>2]=t|1;if((u|0)!=(k[101]|0))return;k[101]=0;k[98]=0;return}if((q|0)==(k[101]|0)){t=(k[98]|0)+f|0;k[98]=t;k[101]=u;k[u+4>>2]=t|1;k[u+t>>2]=t;return}f=(c&-8)+f|0;e=c>>>3;do if(c>>>0>=256){g=k[a+(o+16)>>2]|0;b=k[a+(o|4)>>2]|0;do if((b|0)==(q|0)){c=a+(o+12)|0;b=k[c>>2]|0;if(!b){c=a+(o+8)|0;b=k[c>>2]|0;if(!b){p=0;break}}while(1){d=b+20|0;e=k[d>>2]|0;if(e){b=e;c=d;continue}d=b+16|0;e=k[d>>2]|0;if(!e)break;else{b=e;c=d}}if(c>>>0<(k[100]|0)>>>0)Ma();else{k[c>>2]=0;p=b;break}}else{c=k[a+o>>2]|0;if(c>>>0<(k[100]|0)>>>0)Ma();d=c+12|0;if((k[d>>2]|0)!=(q|0))Ma();e=b+8|0;if((k[e>>2]|0)==(q|0)){k[d>>2]=b;k[e>>2]=c;p=b;break}else Ma()}while(0);if(g){b=k[a+(o+20)>>2]|0;c=688+(b<<2)|0;if((q|0)==(k[c>>2]|0)){k[c>>2]=p;if(!p){k[97]=k[97]&~(1<<b);break}}else{if(g>>>0<(k[100]|0)>>>0)Ma();b=g+16|0;if((k[b>>2]|0)==(q|0))k[b>>2]=p;else k[g+20>>2]=p;if(!p)break}c=k[100]|0;if(p>>>0<c>>>0)Ma();k[p+24>>2]=g;b=k[a+(o+8)>>2]|0;do if(b)if(b>>>0<c>>>0)Ma();else{k[p+16>>2]=b;k[b+24>>2]=p;break}while(0);b=k[a+(o+12)>>2]|0;if(b)if(b>>>0<(k[100]|0)>>>0)Ma();else{k[p+20>>2]=b;k[b+24>>2]=p;break}}}else{d=k[a+o>>2]|0;c=k[a+(o|4)>>2]|0;b=424+(e<<1<<2)|0;if((d|0)!=(b|0)){if(d>>>0<(k[100]|0)>>>0)Ma();if((k[d+12>>2]|0)!=(q|0))Ma()}if((c|0)==(d|0)){k[96]=k[96]&~(1<<e);break}if((c|0)!=(b|0)){if(c>>>0<(k[100]|0)>>>0)Ma();b=c+8|0;if((k[b>>2]|0)==(q|0))n=b;else Ma()}else n=c+8|0;k[d+12>>2]=c;k[n>>2]=d}while(0);k[u+4>>2]=f|1;k[u+f>>2]=f;if((u|0)==(k[101]|0)){k[98]=f;return}}else{k[b>>2]=c&-2;k[u+4>>2]=f|1;k[u+f>>2]=f}b=f>>>3;if(f>>>0<256){c=b<<1;e=424+(c<<2)|0;d=k[96]|0;b=1<<b;if(d&b){b=424+(c+2<<2)|0;c=k[b>>2]|0;if(c>>>0<(k[100]|0)>>>0)Ma();else{r=b;s=c}}else{k[96]=d|b;r=424+(c+2<<2)|0;s=e}k[r>>2]=u;k[s+12>>2]=u;k[u+8>>2]=s;k[u+12>>2]=e;return}b=f>>>8;if(b)if(f>>>0>16777215)e=31;else{r=(b+1048320|0)>>>16&8;s=b<<r;q=(s+520192|0)>>>16&4;s=s<<q;e=(s+245760|0)>>>16&2;e=14-(q|r|e)+(s<<e>>>15)|0;e=f>>>(e+7|0)&1|e<<1}else e=0;b=688+(e<<2)|0;k[u+28>>2]=e;k[u+20>>2]=0;k[u+16>>2]=0;c=k[97]|0;d=1<<e;a:do if(c&d){b=k[b>>2]|0;b:do if((k[b+4>>2]&-8|0)!=(f|0)){e=f<<((e|0)==31?0:25-(e>>>1)|0);while(1){d=b+16+(e>>>31<<2)|0;c=k[d>>2]|0;if(!c)break;if((k[c+4>>2]&-8|0)==(f|0)){t=c;break b}else{e=e<<1;b=c}}if(d>>>0<(k[100]|0)>>>0)Ma();else{k[d>>2]=u;k[u+24>>2]=b;k[u+12>>2]=u;k[u+8>>2]=u;break a}}else t=b;while(0);b=t+8|0;c=k[b>>2]|0;s=k[100]|0;if(c>>>0>=s>>>0&t>>>0>=s>>>0){k[c+12>>2]=u;k[b>>2]=u;k[u+8>>2]=c;k[u+12>>2]=t;k[u+24>>2]=0;break}else Ma()}else{k[97]=c|d;k[b>>2]=u;k[u+24>>2]=b;k[u+12>>2]=u;k[u+8>>2]=u}while(0);u=(k[104]|0)+-1|0;k[104]=u;if(!u)b=840;else return;while(1){b=k[b>>2]|0;if(!b)break;else b=b+8|0}k[104]=-1;return}function ae(){}function be(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;d=b-d-(c>>>0>a>>>0|0)>>>0;return (L=d,a-c>>>0|0)|0}function ce(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;d=a+c|0;if((c|0)>=20){b=b&255;f=a&3;g=b|b<<8|b<<16|b<<24;e=d&~3;if(f){f=a+4-f|0;while((a|0)<(f|0)){i[a>>0]=b;a=a+1|0}}while((a|0)<(e|0)){k[a>>2]=g;a=a+4|0}}while((a|0)<(d|0)){i[a>>0]=b;a=a+1|0}return a-c|0}function de(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){L=b>>>c;return a>>>c|(b&(1<<c)-1)<<32-c}L=0;return b>>>c-32|0}function ee(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){L=b<<c|(a&(1<<c)-1<<32-c)>>>32-c;return a<<c}L=a<<c-32;return 0}function fe(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if((c|0)>=4096)return Ca(a|0,b|0,c|0)|0;d=a|0;if((a&3)==(b&3)){while(a&3){if(!c)return d|0;i[a>>0]=i[b>>0]|0;a=a+1|0;b=b+1|0;c=c-1|0}while((c|0)>=4){k[a>>2]=k[b>>2];a=a+4|0;b=b+4|0;c=c-4|0}}while((c|0)>0){i[a>>0]=i[b>>0]|0;a=a+1|0;b=b+1|0;c=c-1|0}return d|0}function ge(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;c=a+c>>>0;return (L=b+d+(c>>>0<a>>>0|0)>>>0,c|0)|0}function he(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if((b|0)<(a|0)&(a|0)<(b+c|0)){d=a;b=b+c|0;a=a+c|0;while((c|0)>0){a=a-1|0;b=b-1|0;c=c-1|0;i[a>>0]=i[b>>0]|0}a=d}else fe(a,b,c)|0;return a|0}function ie(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){L=b>>c;return a>>>c|(b&(1<<c)-1)<<32-c}L=(b|0)<0?-1:0;return b>>c-32|0}function je(a){a=a|0;var b=0;b=i[v+(a&255)>>0]|0;if((b|0)<8)return b|0;b=i[v+(a>>8&255)>>0]|0;if((b|0)<8)return b+8|0;b=i[v+(a>>16&255)>>0]|0;if((b|0)<8)return b+16|0;return (i[v+(a>>>24)>>0]|0)+24|0}function ke(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;f=a&65535;e=b&65535;c=ha(e,f)|0;d=a>>>16;a=(c>>>16)+(ha(e,d)|0)|0;e=b>>>16;b=ha(e,f)|0;return (L=(a>>>16)+(ha(e,d)|0)+(((a&65535)+b|0)>>>16)|0,a+b<<16|c&65535|0)|0}function le(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;j=b>>31|((b|0)<0?-1:0)<<1;i=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;f=d>>31|((d|0)<0?-1:0)<<1;e=((d|0)<0?-1:0)>>31|((d|0)<0?-1:0)<<1;h=be(j^a,i^b,j,i)|0;g=L;a=f^j;b=e^i;return be((qe(h,g,be(f^c,e^d,f,e)|0,L,0)|0)^a,L^b,a,b)|0}function me(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;e=r;r=r+16|0;h=e|0;g=b>>31|((b|0)<0?-1:0)<<1;f=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;j=d>>31|((d|0)<0?-1:0)<<1;i=((d|0)<0?-1:0)>>31|((d|0)<0?-1:0)<<1;a=be(g^a,f^b,g,f)|0;b=L;qe(a,b,be(j^c,i^d,j,i)|0,L,h)|0;d=be(k[h>>2]^g,k[h+4>>2]^f,g,f)|0;c=L;r=e;return (L=c,d)|0}function ne(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=a;f=c;c=ke(e,f)|0;a=L;return (L=(ha(b,f)|0)+(ha(d,e)|0)+a|a&0,c|0|0)|0}function oe(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return qe(a,b,c,d,0)|0}function pe(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;f=r;r=r+16|0;e=f|0;qe(a,b,c,d,e)|0;r=f;return (L=k[e+4>>2]|0,k[e>>2]|0)|0}function qe(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0;l=a;i=b;j=i;g=c;n=d;h=n;if(!j){f=(e|0)!=0;if(!h){if(f){k[e>>2]=(l>>>0)%(g>>>0);k[e+4>>2]=0}n=0;e=(l>>>0)/(g>>>0)>>>0;return (L=n,e)|0}else{if(!f){n=0;e=0;return (L=n,e)|0}k[e>>2]=a|0;k[e+4>>2]=b&0;n=0;e=0;return (L=n,e)|0}}f=(h|0)==0;do if(g){if(!f){f=(ja(h|0)|0)-(ja(j|0)|0)|0;if(f>>>0<=31){m=f+1|0;h=31-f|0;b=f-31>>31;g=m;a=l>>>(m>>>0)&b|j<<h;b=j>>>(m>>>0)&b;f=0;h=l<<h;break}if(!e){n=0;e=0;return (L=n,e)|0}k[e>>2]=a|0;k[e+4>>2]=i|b&0;n=0;e=0;return (L=n,e)|0}f=g-1|0;if(f&g){h=(ja(g|0)|0)+33-(ja(j|0)|0)|0;p=64-h|0;m=32-h|0;i=m>>31;o=h-32|0;b=o>>31;g=h;a=m-1>>31&j>>>(o>>>0)|(j<<m|l>>>(h>>>0))&b;b=b&j>>>(h>>>0);f=l<<p&i;h=(j<<p|l>>>(o>>>0))&i|l<<m&h-33>>31;break}if(e){k[e>>2]=f&l;k[e+4>>2]=0}if((g|0)==1){o=i|b&0;p=a|0|0;return (L=o,p)|0}else{p=je(g|0)|0;o=j>>>(p>>>0)|0;p=j<<32-p|l>>>(p>>>0)|0;return (L=o,p)|0}}else{if(f){if(e){k[e>>2]=(j>>>0)%(g>>>0);k[e+4>>2]=0}o=0;p=(j>>>0)/(g>>>0)>>>0;return (L=o,p)|0}if(!l){if(e){k[e>>2]=0;k[e+4>>2]=(j>>>0)%(h>>>0)}o=0;p=(j>>>0)/(h>>>0)>>>0;return (L=o,p)|0}f=h-1|0;if(!(f&h)){if(e){k[e>>2]=a|0;k[e+4>>2]=f&j|b&0}o=0;p=j>>>((je(h|0)|0)>>>0);return (L=o,p)|0}f=(ja(h|0)|0)-(ja(j|0)|0)|0;if(f>>>0<=30){b=f+1|0;h=31-f|0;g=b;a=j<<h|l>>>(b>>>0);b=j>>>(b>>>0);f=0;h=l<<h;break}if(!e){o=0;p=0;return (L=o,p)|0}k[e>>2]=a|0;k[e+4>>2]=i|b&0;o=0;p=0;return (L=o,p)|0}while(0);if(!g){j=h;i=0;h=0}else{m=c|0|0;l=n|d&0;j=ge(m|0,l|0,-1,-1)|0;c=L;i=h;h=0;do{d=i;i=f>>>31|i<<1;f=h|f<<1;d=a<<1|d>>>31|0;n=a>>>31|b<<1|0;be(j,c,d,n)|0;p=L;o=p>>31|((p|0)<0?-1:0)<<1;h=o&1;a=be(d,n,o&m,(((p|0)<0?-1:0)>>31|((p|0)<0?-1:0)<<1)&l)|0;b=L;g=g-1|0}while((g|0)!=0);j=i;i=0}g=0;if(e){k[e>>2]=a;k[e+4>>2]=b}o=(f|0)>>>31|(j|g)<<1|(g<<1|f>>>31)&0|i;p=(f<<1|0>>>31)&-2|h;return (L=o,p)|0}function re(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return Ta[a&7](b|0,c|0,d|0)|0}function se(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;Ua[a&3](b|0,c|0,d|0,e|0,f|0)}function te(a,b){a=a|0;b=b|0;Va[a&15](b|0)}function ue(a,b){a=a|0;b=b|0;return Wa[a&3](b|0)|0}function ve(a){a=a|0;Xa[a&0]()}function we(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;Ya[a&3](b|0,c|0,d|0,e|0,f|0,g|0)}function xe(a,b,c){a=a|0;b=b|0;c=c|0;return Za[a&7](b|0,c|0)|0}function ye(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;_a[a&3](b|0,c|0,d|0,e|0)}function ze(a,b,c){a=a|0;b=b|0;c=c|0;ka(0);return 0}function Ae(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ka(1)}function Be(a){a=a|0;ka(2)}function Ce(a){a=a|0;ka(3);return 0}function De(){ka(4)}function Ee(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ka(5)}function Fe(a,b){a=a|0;b=b|0;ka(6);return 0}function Ge(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ka(7)}\\nfunction Qb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0;T=b;a:while(1){u=T;v=T+-20|0;w=T+-40|0;Q=T+-16|0;P=T+-12|0;R=T+-4|0;S=T+-8|0;X=a;b:while(1){s=X;a=u-s|0;switch((a|0)/20|0|0){case 2:{t=4;break a}case 3:{t=23;break a}case 4:{t=24;break a}case 5:{t=25;break a}case 1:case 0:{t=262;break a}default:{}}if((a|0)<140){t=27;break a}h=(a|0)/40|0;j=X+(h*20|0)|0;if((a|0)>19980){a=(a|0)/80|0;a=bc(X,X+(a*20|0)|0,j,X+((a+h|0)*20|0)|0,v)|0}else a=$b(X,j,v)|0;q=k[X>>2]|0;b=k[j>>2]|0;c:do if((q|0)<(b|0))e=v;else{e=(q|0)==(b|0);if(e?(k[X+4>>2]|0)<(k[X+(h*20|0)+4>>2]|0):0){e=v;break}do if((b|0)>=(q|0)){if(e?(x=k[X+(h*20|0)+4>>2]|0,y=k[X+4>>2]|0,(x|0)<(y|0)):0){e=x;f=y;t=82}else{g=k[X+8>>2]|0;f=k[X+(h*20|0)+8>>2]|0;if((g|0)<(f|0)){e=v;break c}if((g|0)==(f|0)?(k[X+12>>2]|0)<(k[X+(h*20|0)+12>>2]|0):0){e=v;break c}if(e){e=k[X+(h*20|0)+4>>2]|0;f=k[X+4>>2]|0;t=82}else{e=g;t=85}}if((t|0)==82){t=0;if((e|0)<(f|0))break;if((f|0)>=(e|0)){f=k[X+(h*20|0)+8>>2]|0;e=k[X+8>>2]|0;t=85}}if((t|0)==85){if((f|0)<(e|0))break;if((f|0)==(e|0)?(k[X+(h*20|0)+12>>2]|0)<(k[X+12>>2]|0):0)break}if((k[X+16>>2]|0)<(k[X+(h*20|0)+16>>2]|0)){e=v;break c}}while(0);d:do if((X|0)!=(w|0)){o=X+(h*20|0)+4|0;n=X+(h*20|0)+8|0;p=X+(h*20|0)+16|0;l=X+(h*20|0)+12|0;e=w;m=v;e:while(1){i=k[e>>2]|0;if((i|0)<(b|0)){b=i;break}f=(i|0)==(b|0);if(f?(k[m+-16>>2]|0)<(k[o>>2]|0):0)break;do if((b|0)>=(i|0)){if(f?(H=k[o>>2]|0,I=k[m+-16>>2]|0,(H|0)<(I|0)):0){f=H;g=I;t=184}else{h=k[m+-12>>2]|0;g=k[n>>2]|0;if((h|0)<(g|0)){b=i;break e}if((h|0)==(g|0)?(k[m+-8>>2]|0)<(k[l>>2]|0):0){b=i;break e}if(f){f=k[o>>2]|0;g=k[m+-16>>2]|0;t=184}else{f=h;t=187}}if((t|0)==184){t=0;if((f|0)<(g|0))break;if((g|0)>=(f|0)){g=k[n>>2]|0;f=k[m+-12>>2]|0;t=187}}if((t|0)==187){if((g|0)<(f|0))break;if((g|0)==(f|0)?(k[l>>2]|0)<(k[m+-8>>2]|0):0)break}if((k[m+-4>>2]|0)<(k[p>>2]|0)){b=i;break e}}while(0);f=e+-20|0;if((X|0)==(f|0))break d;else{m=e;e=f}}t=X+4|0;o=k[t>>2]|0;k[X>>2]=b;p=m+-16|0;k[t>>2]=k[p>>2];k[e>>2]=q;k[p>>2]=o;q=X+8|0;p=k[q>>2]|0;o=X+12|0;t=k[o>>2]|0;r=m+-12|0;k[q>>2]=k[r>>2];q=m+-8|0;k[o>>2]=k[q>>2];k[r>>2]=p;k[q>>2]=t;q=X+16|0;t=m+-4|0;r=k[q>>2]|0;k[q>>2]=k[t>>2];k[t>>2]=r;a=a+1|0;break c}while(0);a=X+20|0;o=k[v>>2]|0;f:do if((q|0)>=(o|0)){b=(q|0)==(o|0);if(b?(k[X+4>>2]|0)<(k[Q>>2]|0):0)break;do if((o|0)>=(q|0)){if(b?(z=k[Q>>2]|0,A=k[X+4>>2]|0,(z|0)<(A|0)):0){b=z;e=A;t=102}else{f=k[X+8>>2]|0;e=k[P>>2]|0;if((f|0)<(e|0))break f;if((f|0)==(e|0)?(k[X+12>>2]|0)<(k[S>>2]|0):0)break f;if(b){b=k[Q>>2]|0;e=k[X+4>>2]|0;t=102}else{b=f;t=105}}if((t|0)==102){t=0;if((b|0)<(e|0))break;if((e|0)>=(b|0)){e=k[P>>2]|0;b=k[X+8>>2]|0;t=105}}if((t|0)==105){if((e|0)<(b|0))break;if((e|0)==(b|0)?(k[S>>2]|0)<(k[X+12>>2]|0):0)break}if((k[X+16>>2]|0)<(k[R>>2]|0))break f}while(0);if((a|0)==(v|0)){t=262;break a}j=X+4|0;i=X+8|0;l=X+16|0;m=X+12|0;n=X;h=a;g:while(1){g=n+20|0;a=k[g>>2]|0;if((q|0)<(a|0))break;f=(q|0)==(a|0);if(f?(k[j>>2]|0)<(k[n+24>>2]|0):0){a=q;break}h:do if((a|0)>=(q|0)){if(f?(B=k[n+24>>2]|0,C=k[j>>2]|0,(B|0)<(C|0)):0){b=B;e=C;t=122}else t=117;do if((t|0)==117){e=k[i>>2]|0;b=k[n+28>>2]|0;if((e|0)<(b|0))break g;if((e|0)==(b|0)?(k[m>>2]|0)<(k[n+32>>2]|0):0)break g;if(!f){t=125;break}b=k[n+24>>2]|0;e=k[j>>2]|0;t=122}while(0);do if((t|0)==122){t=0;if((b|0)<(e|0))break h;if((e|0)<(b|0))break;b=k[n+28>>2]|0;e=k[i>>2]|0;t=125}while(0);do if((t|0)==125){if((b|0)<(e|0))break h;if((b|0)!=(e|0))break;if((k[n+32>>2]|0)<(k[m>>2]|0))break h}while(0);if((k[l>>2]|0)<(k[n+36>>2]|0))break g}while(0);a=h+20|0;if((a|0)==(v|0)){t=262;break a}else{n=h;h=a}}s=n+24|0;r=k[s>>2]|0;k[g>>2]=o;k[s>>2]=k[Q>>2];k[v>>2]=a;k[Q>>2]=r;r=n+28|0;a=k[r>>2]|0;s=n+32|0;t=k[s>>2]|0;k[r>>2]=k[P>>2];k[s>>2]=k[S>>2];k[P>>2]=a;k[S>>2]=t;t=n+36|0;a=k[t>>2]|0;k[t>>2]=k[R>>2];k[R>>2]=a;a=n+40|0}while(0);if((a|0)==(v|0)){t=262;break a}o=X+4|0;p=X+12|0;n=X+8|0;q=X+16|0;h=v;while(1){m=k[X>>2]|0;b=k[a>>2]|0;i:do if((m|0)<(b|0)){l=a;j=a}else while(1){g=(m|0)==(b|0);if(g?(k[o>>2]|0)<(k[a+4>>2]|0):0){l=a;b=m;j=a;break i}j:do if((b|0)>=(m|0)){if(g?(D=k[a+4>>2]|0,E=k[o>>2]|0,(D|0)<(E|0)):0){e=D;f=E;t=145}else t=140;do if((t|0)==140){f=k[n>>2]|0;e=k[a+8>>2]|0;if((f|0)<(e|0)){l=a;j=a;break i}if((f|0)==(e|0)?(k[p>>2]|0)<(k[a+12>>2]|0):0){l=a;j=a;break i}if(!g){t=148;break}e=k[a+4>>2]|0;f=k[o>>2]|0;t=145}while(0);do if((t|0)==145){t=0;if((e|0)<(f|0))break j;if((f|0)<(e|0))break;e=k[a+8>>2]|0;f=k[n>>2]|0;t=148}while(0);do if((t|0)==148){if((e|0)<(f|0))break j;if((e|0)!=(f|0))break;if((k[a+12>>2]|0)<(k[p>>2]|0))break j}while(0);if((k[q>>2]|0)<(k[a+16>>2]|0)){l=a;j=a;break i}}while(0);a=a+20|0;b=k[a>>2]|0;if((m|0)<(b|0)){l=a;j=a;break}}while(0);k:while(1){i=h+-20|0;g=k[i>>2]|0;if((m|0)<(g|0)){h=i;continue}f=(m|0)==(g|0);if(f?(k[o>>2]|0)<(k[h+-16>>2]|0):0){h=i;continue}if((g|0)<(m|0))break;if(f?(F=k[h+-16>>2]|0,G=k[o>>2]|0,(F|0)<(G|0)):0){a=F;e=G;t=164}else t=159;do if((t|0)==159){e=k[n>>2]|0;a=k[h+-12>>2]|0;if((e|0)<(a|0)){h=i;continue k}if((e|0)==(a|0)?(k[p>>2]|0)<(k[h+-8>>2]|0):0){h=i;continue k}if(!f){t=167;break}a=k[h+-16>>2]|0;e=k[o>>2]|0;t=164}while(0);do if((t|0)==164){t=0;if((a|0)<(e|0))break k;if((e|0)<(a|0))break;a=k[h+-12>>2]|0;e=k[n>>2]|0;t=167}while(0);do if((t|0)==167){if((a|0)<(e|0))break k;if((a|0)!=(e|0))break;if((k[h+-8>>2]|0)<(k[p>>2]|0))break k}while(0);if((k[q>>2]|0)<(k[h+-4>>2]|0))h=i;else break}if(j>>>0>=i>>>0){X=j;continue b}m=j+4|0;r=k[m>>2]|0;k[l>>2]=g;t=h+-16|0;k[m>>2]=k[t>>2];k[i>>2]=b;k[t>>2]=r;t=j+8|0;r=k[t>>2]|0;m=j+12|0;a=k[m>>2]|0;s=h+-12|0;k[t>>2]=k[s>>2];t=h+-8|0;k[m>>2]=k[t>>2];k[s>>2]=r;k[t>>2]=a;t=j+16|0;a=h+-4|0;h=k[t>>2]|0;k[t>>2]=k[a>>2];k[a>>2]=h;a=j+20|0;h=i}}while(0);b=X+20|0;l:do if(b>>>0<e>>>0)while(1){m=j+12|0;p=k[j>>2]|0;n=j+4|0;l=j+8|0;o=j+16|0;r=b;m:while(1){q=k[r>>2]|0;do if((q|0)>=(p|0)){b=(q|0)==(p|0);if(b?(k[r+4>>2]|0)<(k[n>>2]|0):0)break;if((p|0)<(q|0))break m;if(b?(J=k[n>>2]|0,K=k[r+4>>2]|0,(J|0)<(K|0)):0){b=J;f=K;t=207}else{g=k[r+8>>2]|0;f=k[l>>2]|0;if((g|0)<(f|0))break;if((g|0)==(f|0)?(k[r+12>>2]|0)<(k[m>>2]|0):0)break;if(b){b=k[n>>2]|0;f=k[r+4>>2]|0;t=207}else{b=g;t=210}}if((t|0)==207){t=0;if((b|0)<(f|0))break m;if((f|0)>=(b|0)){f=k[l>>2]|0;b=k[r+8>>2]|0;t=210}}if((t|0)==210){if((f|0)<(b|0))break m;if((f|0)==(b|0)?(k[m>>2]|0)<(k[r+12>>2]|0):0)break m}if((k[r+16>>2]|0)>=(k[o>>2]|0))break m}while(0);r=r+20|0}f=e+-20|0;b=k[f>>2]|0;n:do if((b|0)<(p|0)){h=f;g=f}else while(1){g=(b|0)==(p|0);if(g?(k[e+-16>>2]|0)<(k[n>>2]|0):0){h=f;g=f;b=p;break n}do if((p|0)>=(b|0)){if(g?(L=k[n>>2]|0,M=k[e+-16>>2]|0,(L|0)<(M|0)):0){g=L;h=M;t=225}else{i=k[e+-12>>2]|0;h=k[l>>2]|0;if((i|0)<(h|0)){h=f;g=f;break n}if((i|0)==(h|0)?(k[e+-8>>2]|0)<(k[m>>2]|0):0){h=f;g=f;break n}if(g){g=k[n>>2]|0;h=k[e+-16>>2]|0;t=225}else{g=i;t=228}}if((t|0)==225){t=0;if((g|0)<(h|0))break;if((h|0)>=(g|0)){h=k[l>>2]|0;g=k[e+-12>>2]|0;t=228}}if((t|0)==228){if((h|0)<(g|0))break;if((h|0)==(g|0)?(k[m>>2]|0)<(k[e+-8>>2]|0):0)break}if((k[e+-4>>2]|0)<(k[o>>2]|0)){h=f;g=f;break n}}while(0);e=f+-20|0;b=k[e>>2]|0;if((b|0)<(p|0)){h=e;g=e;e=f;break}else{t=f;f=e;e=t}}while(0);if(r>>>0>h>>>0){b=r;break l}o=r+4|0;p=k[o>>2]|0;k[r>>2]=b;t=e+-16|0;k[o>>2]=k[t>>2];k[g>>2]=q;k[t>>2]=p;t=r+8|0;p=k[t>>2]|0;o=r+12|0;b=k[o>>2]|0;q=e+-12|0;k[t>>2]=k[q>>2];t=e+-8|0;k[o>>2]=k[t>>2];k[q>>2]=p;k[t>>2]=b;t=r+16|0;b=e+-4|0;e=k[t>>2]|0;k[t>>2]=k[b>>2];k[b>>2]=e;b=r+20|0;e=h;j=(j|0)==(r|0)?h:j;a=a+1|0}while(0);o:do if((b|0)!=(j|0)){h=k[j>>2]|0;i=k[b>>2]|0;do if((h|0)>=(i|0)){e=(h|0)==(i|0);if(e?(k[j+4>>2]|0)<(k[b+4>>2]|0):0)break;if((i|0)<(h|0))break o;if(e?(N=k[b+4>>2]|0,O=k[j+4>>2]|0,(N|0)<(O|0)):0){e=N;f=O;t=247}else{g=k[j+8>>2]|0;f=k[b+8>>2]|0;if((g|0)<(f|0))break;if((g|0)==(f|0)?(k[j+12>>2]|0)<(k[b+12>>2]|0):0)break;if(e){e=k[b+4>>2]|0;f=k[j+4>>2]|0;t=247}else{e=g;t=250}}if((t|0)==247){t=0;if((e|0)<(f|0))break o;if((f|0)>=(e|0)){f=k[b+8>>2]|0;e=k[j+8>>2]|0;t=250}}if((t|0)==250){if((f|0)<(e|0))break o;if((f|0)==(e|0)?(k[b+12>>2]|0)<(k[j+12>>2]|0):0)break o}if((k[j+16>>2]|0)>=(k[b+16>>2]|0))break o}while(0);o=b+4|0;p=k[o>>2]|0;k[b>>2]=h;q=j+4|0;k[o>>2]=k[q>>2];k[j>>2]=i;k[q>>2]=p;q=b+8|0;p=k[q>>2]|0;o=b+12|0;t=k[o>>2]|0;r=j+8|0;k[q>>2]=k[r>>2];q=j+12|0;k[o>>2]=k[q>>2];k[r>>2]=p;k[q>>2]=t;q=b+16|0;t=j+16|0;r=k[q>>2]|0;k[q>>2]=k[t>>2];k[t>>2]=r;a=a+1|0}while(0);if(!a){e=cc(X,b)|0;a=b+20|0;if(cc(a,T)|0){t=257;break}if(e){X=a;continue}}t=b;if((t-s|0)>=(u-t|0)){t=261;break}Qb(X,b);X=b+20|0}if((t|0)==257)if(e){t=262;break}else{a=X;T=b;continue}else if((t|0)==261){Qb(b+20|0,T);a=X;T=b;continue}}if((t|0)==4){f=T+-20|0;b=k[f>>2]|0;e=k[X>>2]|0;do if((b|0)>=(e|0)){a=(b|0)==(e|0);if(a?(k[Q>>2]|0)<(k[X+4>>2]|0):0)break;if((e|0)<(b|0))return;if(a?(d=k[X+4>>2]|0,c=k[Q>>2]|0,(d|0)<(c|0)):0)t=15;else{d=k[P>>2]|0;c=k[X+8>>2]|0;if((d|0)<(c|0))break;if((d|0)==(c|0)?(k[S>>2]|0)<(k[X+12>>2]|0):0)break;if(a){d=k[X+4>>2]|0;c=k[Q>>2]|0;t=15}else t=18}if((t|0)==15){if((d|0)<(c|0))return;if((c|0)>=(d|0)){c=k[X+8>>2]|0;d=k[P>>2]|0;t=18}}if((t|0)==18){if((c|0)<(d|0))return;if((c|0)==(d|0)?(k[X+12>>2]|0)<(k[S>>2]|0):0)return}if((k[R>>2]|0)>=(k[X+16>>2]|0))return}while(0);V=X+4|0;T=k[V>>2]|0;k[X>>2]=b;k[V>>2]=k[Q>>2];k[f>>2]=e;k[Q>>2]=T;T=X+8|0;V=k[T>>2]|0;U=X+12|0;W=k[U>>2]|0;k[T>>2]=k[P>>2];k[U>>2]=k[S>>2];k[P>>2]=V;k[S>>2]=W;W=X+16|0;X=k[W>>2]|0;k[W>>2]=k[R>>2];k[R>>2]=X;return}else if((t|0)==23){$b(X,X+20|0,v)|0;return}else if((t|0)==24){ac(X,X+20|0,X+40|0,v)|0;return}else if((t|0)==25){bc(X,X+20|0,X+40|0,X+60|0,v)|0;return}else if((t|0)==27){d=X+40|0;$b(X,X+20|0,d)|0;c=X+60|0;if((c|0)==(T|0))return;else p=c;while(1){o=k[p>>2]|0;e=k[d>>2]|0;do if((o|0)>=(e|0)){b=(o|0)==(e|0);if(b?(k[p+4>>2]|0)<(k[d+4>>2]|0):0){t=46;break}if((e|0)>=(o|0)){if(b?(V=k[d+4>>2]|0,W=k[p+4>>2]|0,(V|0)<(W|0)):0){c=V;a=W;t=39}else{c=k[p+8>>2]|0;a=k[d+8>>2]|0;if((c|0)<(a|0)){t=46;break}if((c|0)==(a|0)?(k[p+12>>2]|0)<(k[d+12>>2]|0):0){t=46;break}if(b){c=k[d+4>>2]|0;a=k[p+4>>2]|0;t=39}else t=42}if((t|0)==39){t=0;if((c|0)<(a|0))break;if((a|0)>=(c|0)){a=k[d+8>>2]|0;c=k[p+8>>2]|0;t=42}}if((t|0)==42){t=0;if((a|0)<(c|0))break;if((a|0)==(c|0)?(k[d+12>>2]|0)<(k[p+12>>2]|0):0)break}if((k[p+16>>2]|0)<(k[d+16>>2]|0))t=46}}else t=46;while(0);if((t|0)==46){t=0;R=p+4|0;j=k[R>>2]|0;a=p+8|0;l=k[a>>2]|0;c=p+12|0;m=k[c>>2]|0;S=p+16|0;n=k[S>>2]|0;k[p>>2]=e;b=d+4|0;k[R>>2]=k[b>>2];e=d+8|0;k[a>>2]=k[e>>2];a=d+12|0;k[c>>2]=k[a>>2];c=d+16|0;k[S>>2]=k[c>>2];p:do if((d|0)!=(X|0)){i=d;h=e;g=b;while(1){d=i+-20|0;f=k[d>>2]|0;do if((o|0)>=(f|0)){e=(o|0)==(f|0);if(e?(j|0)<(k[i+-16>>2]|0):0)break;if((f|0)<(o|0)){d=i;b=g;e=h;break p}if(e?(U=k[i+-16>>2]|0,(U|0)<(j|0)):0){b=U;t=58}else{b=k[i+-12>>2]|0;if((l|0)<(b|0))break;if((l|0)==(b|0)?(m|0)<(k[i+-8>>2]|0):0)break;if(e){b=k[i+-16>>2]|0;t=58}else t=61}if((t|0)==58){t=0;if((b|0)<(j|0)){d=i;b=g;e=h;break p}if((j|0)>=(b|0)){b=k[i+-12>>2]|0;t=61}}if((t|0)==61){t=0;if((b|0)<(l|0)){d=i;b=g;e=h;break p}if((b|0)==(l|0)?(k[i+-8>>2]|0)<(m|0):0){d=i;b=g;e=h;break p}}if((n|0)>=(k[i+-4>>2]|0)){d=i;b=g;e=h;break p}}while(0);k[i>>2]=f;b=i+-16|0;k[i+4>>2]=k[b>>2];e=i+-12|0;k[i+8>>2]=k[e>>2];a=i+-8|0;k[i+12>>2]=k[a>>2];c=i+-4|0;k[i+16>>2]=k[c>>2];if((d|0)==(X|0))break;else{i=d;h=e;g=b}}}while(0);k[d>>2]=o;k[b>>2]=j;k[e>>2]=l;k[a>>2]=m;k[c>>2]=n}c=p+20|0;if((c|0)==(T|0))break;else{d=p;p=c}}return}else if((t|0)==262)return}function Rb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0;m=a+4|0;e=k[m>>2]|0;n=k[a>>2]|0;j=n;l=e-j>>3;i=l+1|0;if(i>>>0>536870911)xa(1340,1363,303,1438);o=a+8|0;c=(k[o>>2]|0)-j|0;if(c>>3>>>0<268435455){c=c>>2;c=c>>>0<i>>>0?i:c;if(!c){f=0;d=0}else g=5}else{c=536870911;g=5}if((g|0)==5){f=c<<3;f=(f|0)==0?1:f;d=_d(f)|0;a:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(f)|0;if(d)break a}a=ya(4)|0;k[a>>2]=128;La(a|0,8,1)}while(0);f=c}c=d+(l<<3)|0;h=d+(f<<3)|0;k[c>>2]=k[b>>2];k[d+(l<<3)+4>>2]=k[b+4>>2];g=d+(i<<3)|0;if((e|0)!=(n|0)){f=e+-8|0;while(1){b=e;e=e+-8|0;k[c+-8>>2]=k[e>>2];k[c+-4>>2]=k[b+-4>>2];if((e|0)==(n|0))break;else c=c+-8|0}c=d+(l+~((f-j|0)>>>3)<<3)|0}k[a>>2]=c;k[m>>2]=g;k[o>>2]=h;if(!n)return;$d(n);return}function Sb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;A=k[a>>2]|0;D=k[a+8>>2]|0;E=k[a+4>>2]|0;F=k[a+12>>2]|0;i=(A|0)>(D|0);e=i?D:A;i=i?A:D;g=(E|0)>(F|0);c=g?F:E;g=g?E:F;z=k[b>>2]|0;B=k[b+8>>2]|0;y=k[b+4>>2]|0;C=k[b+12>>2]|0;j=(z|0)>(B|0);f=j?B:z;j=j?z:B;h=(y|0)>(C|0);d=h?C:y;h=h?y:C;l=(i|0)>(f|0)&(e|0)<(j|0);if(l?(c|0)<(h|0)&(g|0)>(d|0):0){h=(A|0)==(z|0);if(h&(E|0)==(y|0)){if((!((D|0)==(B|0)&(F|0)==(C|0))?(p=((E|0)<0)<<31>>31,a=be(C|0,((C|0)<0)<<31>>31|0,E|0,p|0)|0,C=L,p=be(F|0,((F|0)<0)<<31>>31|0,E|0,p|0)|0,o=L,E=((A|0)<0)<<31>>31,r=be(B|0,((B|0)<0)<<31>>31|0,A|0,E|0)|0,B=L,D=be(D|0,((D|0)<0)<<31>>31|0,A|0,E|0)|0,E=L,m=(B|0)<0,F=be(0,0,r|0,B|0)|0,B=m?L:B,n=(o|0)<0,q=be(0,0,p|0,o|0)|0,o=ne((m?F:r)|0,B|0,(n?q:p)|0,(n?L:o)|0)|0,p=L,q=(E|0)<0,B=be(0,0,D|0,E|0)|0,E=q?L:E,r=(C|0)<0,F=be(0,0,a|0,C|0)|0,F=ne((q?B:D)|0,E|0,(r?F:a)|0,(r?L:C)|0)|0,(o|0)==(F|0)&(p|0)==(L|0)):0)?(F=ha(q?-1:1,r?-1:1)|0,(o|0)==0&(p|0)==0|(ha(m?-1:1,n?-1:1)|0)==(F|0)):0){F=1;return F|0}F=0;return F|0}g=(A|0)==(B|0);f=(D|0)==(z|0);c=f&(F|0)==(y|0);if(g&(E|0)==(C|0)){if((!c?(v=((E|0)<0)<<31>>31,B=be(y|0,((y|0)<0)<<31>>31|0,E|0,v|0)|0,C=L,v=be(F|0,((F|0)<0)<<31>>31|0,E|0,v|0)|0,u=L,E=((A|0)<0)<<31>>31,x=be(z|0,((z|0)<0)<<31>>31|0,A|0,E|0)|0,t=L,D=be(D|0,((D|0)<0)<<31>>31|0,A|0,E|0)|0,E=L,s=(t|0)<0,F=be(0,0,x|0,t|0)|0,A=s?L:t,t=(u|0)<0,w=be(0,0,v|0,u|0)|0,u=ne((s?F:x)|0,A|0,(t?w:v)|0,(t?L:u)|0)|0,v=L,w=(E|0)<0,A=be(0,0,D|0,E|0)|0,E=w?L:E,x=(C|0)<0,F=be(0,0,B|0,C|0)|0,F=ne((w?A:D)|0,E|0,(x?F:B)|0,(x?L:C)|0)|0,(u|0)==(F|0)&(v|0)==(L|0)):0)?(F=ha(w?-1:1,x?-1:1)|0,(u|0)==0&(v|0)==0|(ha(s?-1:1,t?-1:1)|0)==(F|0)):0){F=1;return F|0}F=0;return F|0}if(c){f=((F|0)<0)<<31>>31;a=be(C|0,((C|0)<0)<<31>>31|0,F|0,f|0)|0;C=L;f=be(E|0,((E|0)<0)<<31>>31|0,F|0,f|0)|0;e=L;E=((D|0)<0)<<31>>31;h=be(B|0,((B|0)<0)<<31>>31|0,D|0,E|0)|0;B=L;D=be(A|0,((A|0)<0)<<31>>31|0,D|0,E|0)|0;E=L;c=(B|0)<0;F=be(0,0,h|0,B|0)|0;B=c?L:B;d=(e|0)<0;g=be(0,0,f|0,e|0)|0;e=ne((c?F:h)|0,B|0,(d?g:f)|0,(d?L:e)|0)|0;f=L;g=(E|0)<0;B=be(0,0,D|0,E|0)|0;E=g?L:E;h=(C|0)<0;F=be(0,0,a|0,C|0)|0;F=ne((g?B:D)|0,E|0,(h?F:a)|0,(h?L:C)|0)|0;if((e|0)==(F|0)&(f|0)==(L|0)?(F=ha(g?-1:1,h?-1:1)|0,(e|0)==0&(f|0)==0|(ha(c?-1:1,d?-1:1)|0)==(F|0)):0){F=1;return F|0}F=0;return F|0}e=(D|0)==(B|0);if(e&(F|0)==(C|0)){f=((F|0)<0)<<31>>31;B=be(y|0,((y|0)<0)<<31>>31|0,F|0,f|0)|0;C=L;f=be(E|0,((E|0)<0)<<31>>31|0,F|0,f|0)|0;e=L;E=((D|0)<0)<<31>>31;h=be(z|0,((z|0)<0)<<31>>31|0,D|0,E|0)|0;d=L;D=be(A|0,((A|0)<0)<<31>>31|0,D|0,E|0)|0;E=L;c=(d|0)<0;F=be(0,0,h|0,d|0)|0;A=c?L:d;d=(e|0)<0;g=be(0,0,f|0,e|0)|0;e=ne((c?F:h)|0,A|0,(d?g:f)|0,(d?L:e)|0)|0;f=L;g=(E|0)<0;A=be(0,0,D|0,E|0)|0;E=g?L:E;h=(C|0)<0;F=be(0,0,B|0,C|0)|0;F=ne((g?A:D)|0,E|0,(h?F:B)|0,(h?L:C)|0)|0;if((e|0)==(F|0)&(f|0)==(L|0)?(F=ha(g?-1:1,h?-1:1)|0,(e|0)==0&(f|0)==0|(ha(c?-1:1,d?-1:1)|0)==(F|0)):0){F=1;return F|0}F=0;return F|0}d=_b(A,E,b)|0;do if(!d){if((z|0)>=(B|0)?!((z|0)==(B|0)&(y|0)<(C|0)):0){if(!((A|0)<(z|0)|h&(E|0)<(y|0)))break;if((B|0)<(A|0)|g&(C|0)<(E|0))c=1;else break;return c|0}if((A|0)<(B|0)|g&(E|0)<(C|0)?(z|0)<(A|0)|h&(y|0)<(E|0):0){F=1;return F|0}}while(0);c=_b(D,F,b)|0;do if(!c){if((z|0)>=(B|0)?!((z|0)==(B|0)&(y|0)<(C|0)):0){if(!((D|0)<(z|0)|f&(F|0)<(y|0)))break;if((B|0)<(D|0)|e&(C|0)<(F|0))c=1;else break;return c|0}if((D|0)<(B|0)|e&(F|0)<(C|0)?(z|0)<(D|0)|f&(y|0)<(F|0):0){F=1;return F|0}}while(0);if((d|0)!=0&(d|0)==(c|0)){F=0;return F|0}d=_b(z,y,a)|0;do if(!d){if((A|0)>=(D|0)?!((A|0)==(D|0)&(E|0)<(F|0)):0){if(!((z|0)<(A|0)|h&(y|0)<(E|0)))break;if((D|0)<(z|0)|f&(F|0)<(y|0))c=1;else break;return c|0}if((z|0)<(D|0)|f&(y|0)<(F|0)?(A|0)<(z|0)|h&(E|0)<(y|0):0){F=1;return F|0}}while(0);c=_b(B,C,a)|0;do if(!c){if((A|0)>=(D|0)?!((A|0)==(D|0)&(E|0)<(F|0)):0){if(!((B|0)<(A|0)|g&(C|0)<(E|0)))break;if((D|0)<(B|0)|e&(F|0)<(C|0))c=1;else break;return c|0}if((B|0)<(D|0)|e&(C|0)<(F|0)?(A|0)<(B|0)|g&(E|0)<(C|0):0){F=1;return F|0}}while(0);F=(d|0)!=(c|0);return F|0}if((A|0)==(D|0)&(z|0)==(B|0)&(A|0)==(z|0))if((g|0)>(d|0)&(c|0)<(h|0))return (g|0)!=(h|0)|(c|0)!=(d|0)|0;else{F=0;return F|0}if(!((E|0)==(F|0)&(y|0)==(C|0)&(E|0)==(y|0)&l)){F=0;return F|0}F=(i|0)!=(j|0)|(e|0)!=(f|0);return F|0}function Tb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;t=r;r=r+32|0;q=t+16|0;s=t;p=k[a>>2]|0;m=k[b+8>>2]|0;n=(p|0)==(m|0);if(n?(k[a+4>>2]|0)==(k[b+12>>2]|0):0){s=1;r=t;return s|0}o=k[b>>2]|0;l=(p|0)==(o|0);if(l){a=k[a+4>>2]|0;c=k[b+4>>2]|0;if((a|0)==(c|0)){s=1;r=t;return s|0}else j=a}else{c=k[b+4>>2]|0;j=k[a+4>>2]|0}a=k[b+12>>2]|0;h=(o|0)>(m|0);i=(c|0)>(a|0);if(!(((i?a:c)|0)<=(j|0)&((((h?m:o)|0)>(p|0)|((h?o:m)|0)<(p|0)|((i?c:a)|0)<(j|0))^1))){s=0;r=t;return s|0}if((o|0)==(m|0)|(c|0)==(a|0)){s=1;r=t;return s|0}g=((j|0)<0)<<31>>31;v=be(a|0,((a|0)<0)<<31>>31|0,j|0,g|0)|0;u=L;g=be(c|0,((c|0)<0)<<31>>31|0,j|0,g|0)|0;f=L;y=((p|0)<0)<<31>>31;i=be(m|0,((m|0)<0)<<31>>31|0,p|0,y|0)|0;z=L;y=be(o|0,((o|0)<0)<<31>>31|0,p|0,y|0)|0;x=L;d=(z|0)<0;w=be(0,0,i|0,z|0)|0;z=d?L:z;e=(f|0)<0;h=be(0,0,g|0,f|0)|0;f=ne((d?w:i)|0,z|0,(e?h:g)|0,(e?L:f)|0)|0;g=L;h=(x|0)<0;z=be(0,0,y|0,x|0)|0;x=h?L:x;i=(u|0)<0;w=be(0,0,v|0,u|0)|0;u=ne((h?z:y)|0,x|0,(i?w:v)|0,(i?L:u)|0)|0;do if((f|0)==(u|0)&(g|0)==(L|0)?(z=ha(h?-1:1,i?-1:1)|0,(f|0)==0&(g|0)==0|(ha(d?-1:1,e?-1:1)|0)==(z|0)):0)if((o|0)<(m|0)){if(!((p|0)<(m|0)|n&(j|0)<(a|0)))break;if((o|0)<(p|0)|l&(c|0)<(j|0))c=1;else break;r=t;return c|0}else{if(!((p|0)<(o|0)|l&(j|0)<(c|0)))break;if((m|0)<(p|0)|n&(a|0)<(j|0))c=1;else break;r=t;return c|0}while(0);c=j+1|0;a=p+1|0;k[q>>2]=p;k[q+4>>2]=j;k[q+8>>2]=a;k[q+12>>2]=c;if(Sb(q,b)|0?(_b(a,c,b)|0)!=0:0){z=1;r=t;return z|0}k[s>>2]=p;k[s+4>>2]=c;k[s+8>>2]=a;k[s+12>>2]=j;if((Sb(s,b)|0?(_b(p,c,b)|0)!=0:0)?(_b(a,j,b)|0)!=0:0){z=1;r=t;return z|0}z=0;r=t;return z|0}function Ub(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0;m=r;r=r+16|0;j=m;d=b+4|0;e=k[d>>2]|0;do if(e){g=k[c>>2]|0;h=k[c+4>>2]|0;a:while(1){d=k[e+16>>2]|0;do if((g|0)>=(d|0)){f=(g|0)==(d|0);if(f?(h|0)<(k[e+20>>2]|0):0){l=6;break}if((d|0)>=(g|0)){if(!f){l=14;break a}if((k[e+20>>2]|0)>=(h|0)){l=14;break a}}f=e+4|0;d=k[f>>2]|0;if(!d){l=13;break a}}else l=6;while(0);if((l|0)==6){l=0;d=k[e>>2]|0;if(!d){l=7;break}}e=d}if((l|0)==7){k[j>>2]=e;f=e;g=e;break}else if((l|0)==13){k[j>>2]=e;g=e;break}else if((l|0)==14){k[j>>2]=e;f=j;g=e;break}}else{k[j>>2]=d;f=d;g=d}while(0);d=k[f>>2]|0;if(d){c=0;b=d;k[a>>2]=b;b=a+4|0;i[b>>0]=c;r=m;return}d=_d(24)|0;b:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(24)|0;if(d){e=d;break b}}m=ya(4)|0;k[m>>2]=128;La(m|0,8,1)}else e=d;while(0);k[e+16>>2]=k[c>>2];k[e+20>>2]=k[c+4>>2];k[e>>2]=0;k[e+4>>2]=0;k[e+8>>2]=g;k[f>>2]=e;d=k[k[b>>2]>>2]|0;if(!d)d=e;else{k[b>>2]=d;d=k[f>>2]|0}Nb(k[b+4>>2]|0,d);c=b+8|0;k[c>>2]=(k[c>>2]|0)+1;c=1;b=e;k[a>>2]=b;b=a+4|0;i[b>>0]=c;r=m;return}function Vb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;t=b;a:while(1){m=t;n=t+-8|0;o=t+-16|0;s=t+-4|0;y=a;b:while(1){l=y;a=m-l|0;b=a>>3;switch(b|0){case 2:{x=4;break a}case 3:{x=9;break a}case 4:{x=10;break a}case 5:{x=11;break a}case 1:case 0:{x=88;break a}default:{}}if((a|0)<56){x=13;break a}c=(b|0)/2|0;g=y+(c<<3)|0;if((a|0)>7992){a=(b|0)/4|0;a=Yb(y,y+(a<<3)|0,g,y+(a+c<<3)|0,n)|0}else a=Wb(y,g,n)|0;h=k[y>>2]|0;f=k[g>>2]|0;c:do if((h|0)<(f|0))c=n;else{if((h|0)==(f|0)?(k[y+4>>2]|0)<(k[y+(c<<3)+4>>2]|0):0){c=n;break}d:do if((y|0)!=(o|0)){e=y+(c<<3)+4|0;c=o;d=n;while(1){b=k[c>>2]|0;if((b|0)<(f|0)){x=58;break}if((b|0)==(f|0)?(p=d+-4|0,(k[p>>2]|0)<(k[e>>2]|0)):0){d=p;b=f;break}b=c+-8|0;if((y|0)==(b|0))break d;else{d=c;c=b}}if((x|0)==58){x=0;d=d+-4|0}i=y+4|0;j=k[i>>2]|0;k[y>>2]=b;k[i>>2]=k[d>>2];k[c>>2]=h;k[d>>2]=j;a=a+1|0;break c}while(0);a=y+8|0;f=k[n>>2]|0;do if((h|0)>=(f|0)){if((h|0)==(f|0)?(k[y+4>>2]|0)<(k[s>>2]|0):0)break;if((a|0)==(n|0)){x=88;break a}c=y+4|0;e=y;while(1){d=e+8|0;b=k[d>>2]|0;if((h|0)<(b|0)){x=40;break}if((h|0)==(b|0)?(q=e+12|0,r=k[q>>2]|0,(k[c>>2]|0)<(r|0)):0){c=q;a=h;b=r;break}b=a+8|0;if((b|0)==(n|0)){x=88;break a}else{e=a;a=b}}if((x|0)==40){x=0;l=e+12|0;c=l;a=b;b=k[l>>2]|0}k[d>>2]=f;k[c>>2]=k[s>>2];k[n>>2]=a;k[s>>2]=b;a=e+16|0}while(0);if((a|0)==(n|0)){x=88;break a}h=y+4|0;c=n;while(1){g=k[y>>2]|0;b=k[a>>2]|0;e:do if((g|0)<(b|0)){f=a;e=a}else while(1){if((g|0)==(b|0)?(k[h>>2]|0)<(k[a+4>>2]|0):0){f=a;b=g;e=a;break e}a=a+8|0;b=k[a>>2]|0;if((g|0)<(b|0)){f=a;e=a;break}}while(0);while(1){d=c+-8|0;a=k[d>>2]|0;if((g|0)<(a|0)){c=d;continue}if((g|0)!=(a|0))break;if((k[h>>2]|0)<(k[c+-4>>2]|0))c=d;else{a=g;break}}if(e>>>0>=d>>>0){y=e;continue b}j=e+4|0;l=k[j>>2]|0;k[f>>2]=a;a=c+-4|0;k[j>>2]=k[a>>2];k[d>>2]=b;k[a>>2]=l;a=e+8|0;c=d}}while(0);b=y+8|0;f:do if(b>>>0<c>>>0)while(1){i=k[g>>2]|0;f=g+4|0;j=b;while(1){b=k[j>>2]|0;if((b|0)>=(i|0)){if((b|0)!=(i|0))break;if((k[j+4>>2]|0)>=(k[f>>2]|0)){b=i;break}}j=j+8|0}d=c+-8|0;e=k[d>>2]|0;g:do if((e|0)<(i|0)){h=d;f=d}else while(1){if((e|0)==(i|0)?(k[c+-4>>2]|0)<(k[f>>2]|0):0){h=d;f=d;e=i;break g}c=d+-8|0;e=k[c>>2]|0;if((e|0)<(i|0)){h=c;f=c;c=d;break}else{h=d;d=c;c=h}}while(0);if(j>>>0>h>>>0){h=j;break f}d=j+4|0;i=k[d>>2]|0;k[j>>2]=e;c=c+-4|0;k[d>>2]=k[c>>2];k[f>>2]=b;k[c>>2]=i;b=j+8|0;c=h;g=(g|0)==(j|0)?h:g;a=a+1|0}else h=b;while(0);do if((h|0)!=(g|0)){e=k[g>>2]|0;f=k[h>>2]|0;if((e|0)>=(f|0)){if((e|0)!=(f|0))break;b=g+4|0;d=h+4|0;c=k[d>>2]|0;if((k[b>>2]|0)>=(c|0))break}else{c=h+4|0;b=g+4|0;d=c;c=k[c>>2]|0}k[h>>2]=e;k[d>>2]=k[b>>2];k[g>>2]=f;k[b>>2]=c;a=a+1|0}while(0);if(!a){a=Zb(y,h)|0;b=h+8|0;if(Zb(b,t)|0){x=83;break}if(a){y=b;continue}}j=h;if((j-l|0)>=(m-j|0)){x=87;break}Vb(y,h);y=h+8|0}if((x|0)==83){x=0;if(a){x=88;break}else{a=y;t=h;continue}}else if((x|0)==87){x=0;Vb(h+8|0,t);a=y;t=h;continue}}if((x|0)==4){c=t+-8|0;d=k[c>>2]|0;e=k[y>>2]|0;if((d|0)>=(e|0)){if((d|0)!=(e|0))return;a=y+4|0;b=k[a>>2]|0;if((k[s>>2]|0)>=(b|0))return}else{b=y+4|0;a=b;b=k[b>>2]|0}k[y>>2]=d;k[a>>2]=k[s>>2];k[c>>2]=e;k[s>>2]=b;return}else if((x|0)==9){Wb(y,y+8|0,n)|0;return}else if((x|0)==10){Xb(y,y+8|0,y+16|0,n)|0;return}else if((x|0)==11){Yb(y,y+8|0,y+16|0,y+24|0,n)|0;return}else if((x|0)==13){b=y+16|0;Wb(y,y+8|0,b)|0;a=y+24|0;if((a|0)==(t|0))return;while(1){h=k[a>>2]|0;e=k[b>>2]|0;if((h|0)>=(e|0)){if((h|0)==(e|0)?(u=a+4|0,v=k[u>>2]|0,w=b+4|0,(v|0)<(k[w>>2]|0)):0){d=u;c=w;i=v;x=18}}else{i=a+4|0;d=i;c=b+4|0;i=k[i>>2]|0;x=18}if((x|0)==18){x=0;k[a>>2]=e;k[d>>2]=k[c>>2];h:do if((b|0)!=(y|0)){f=b;while(1){b=f+-8|0;g=k[b>>2]|0;if((h|0)>=(g|0)){if((h|0)!=(g|0)){b=f;break h}e=f+-4|0;d=k[e>>2]|0;if((i|0)<(d|0))c=e;else{b=f;break h}}else{d=f+-4|0;c=d;d=k[d>>2]|0}k[f>>2]=g;k[f+4>>2]=d;if((b|0)==(y|0))break;else f=b}}while(0);k[b>>2]=h;k[c>>2]=i}b=a+8|0;if((b|0)==(t|0))break;else{s=a;a=b;b=s}}return}else if((x|0)==88)return}function Wb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0;f=k[b>>2]|0;i=k[a>>2]|0;if((f|0)>=(i|0))if((f|0)==(i|0))d=(k[b+4>>2]|0)<(k[a+4>>2]|0);else d=0;else d=1;g=k[c>>2]|0;if((g|0)>=(f|0))if((g|0)==(f|0))e=(k[c+4>>2]|0)<(k[b+4>>2]|0);else e=0;else e=1;if(!d){if(!e){b=0;return b|0}h=b+4|0;i=k[h>>2]|0;k[b>>2]=g;g=c+4|0;k[h>>2]=k[g>>2];k[c>>2]=f;k[g>>2]=i;f=k[b>>2]|0;g=k[a>>2]|0;if((f|0)>=(g|0)){if((f|0)!=(g|0)){b=1;return b|0}d=a+4|0;e=k[d>>2]|0;if((k[h>>2]|0)>=(e|0)){b=1;return b|0}}else{e=a+4|0;d=e;e=k[e>>2]|0}k[a>>2]=f;k[d>>2]=k[h>>2];k[b>>2]=g;k[h>>2]=e;b=2;return b|0}d=a+4|0;h=k[d>>2]|0;if(e){k[a>>2]=g;b=c+4|0;k[d>>2]=k[b>>2];k[c>>2]=i;k[b>>2]=h;b=1;return b|0}k[a>>2]=f;f=b+4|0;k[d>>2]=k[f>>2];k[b>>2]=i;k[f>>2]=h;e=k[c>>2]|0;if((e|0)>=(i|0)){if((e|0)!=(i|0)){b=1;return b|0}d=c+4|0;if((k[d>>2]|0)>=(h|0)){b=1;return b|0}}else d=c+4|0;k[b>>2]=e;k[f>>2]=k[d>>2];k[c>>2]=i;k[d>>2]=h;b=2;return b|0}function Xb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0;l=Wb(a,b,c)|0;h=k[d>>2]|0;i=k[c>>2]|0;if((h|0)>=(i|0)){if((h|0)!=(i|0)){b=l;return b|0}f=d+4|0;g=c+4|0;e=k[g>>2]|0;if((k[f>>2]|0)<(e|0))j=g;else{b=l;return b|0}}else{e=c+4|0;f=d+4|0;j=e;e=k[e>>2]|0}k[c>>2]=h;k[j>>2]=k[f>>2];k[d>>2]=i;k[f>>2]=e;f=l+1|0;h=k[c>>2]|0;i=k[b>>2]|0;if((h|0)>=(i|0)){if((h|0)!=(i|0)){b=f;return b|0}g=b+4|0;e=k[g>>2]|0;if((k[j>>2]|0)<(e|0))d=g;else{b=f;return b|0}}else{e=b+4|0;d=e;e=k[e>>2]|0}k[b>>2]=h;k[d>>2]=k[j>>2];k[c>>2]=i;k[j>>2]=e;g=l+2|0;h=k[b>>2]|0;i=k[a>>2]|0;if((h|0)>=(i|0)){if((h|0)!=(i|0)){b=g;return b|0}f=a+4|0;e=k[f>>2]|0;if((k[d>>2]|0)>=(e|0)){b=g;return b|0}}else{e=a+4|0;f=e;e=k[e>>2]|0}k[a>>2]=h;k[f>>2]=k[d>>2];k[b>>2]=i;k[d>>2]=e;b=l+3|0;return b|0}function Yb(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0;n=Xb(a,b,c,d)|0;i=k[e>>2]|0;j=k[d>>2]|0;if((i|0)>=(j|0)){if((i|0)!=(j|0)){b=n;return b|0}g=e+4|0;h=d+4|0;f=k[h>>2]|0;if((k[g>>2]|0)<(f|0))m=h;else{b=n;return b|0}}else{f=d+4|0;g=e+4|0;m=f;f=k[f>>2]|0}k[d>>2]=i;k[m>>2]=k[g>>2];k[e>>2]=j;k[g>>2]=f;g=n+1|0;i=k[d>>2]|0;j=k[c>>2]|0;if((i|0)>=(j|0)){if((i|0)!=(j|0)){b=g;return b|0}h=c+4|0;f=k[h>>2]|0;if((k[m>>2]|0)<(f|0))l=h;else{b=g;return b|0}}else{f=c+4|0;l=f;f=k[f>>2]|0}k[c>>2]=i;k[l>>2]=k[m>>2];k[d>>2]=j;k[m>>2]=f;g=n+2|0;i=k[c>>2]|0;j=k[b>>2]|0;if((i|0)>=(j|0)){if((i|0)!=(j|0)){b=g;return b|0}h=b+4|0;f=k[h>>2]|0;if((k[l>>2]|0)<(f|0))e=h;else{b=g;return b|0}}else{f=b+4|0;e=f;f=k[f>>2]|0}k[b>>2]=i;k[e>>2]=k[l>>2];k[c>>2]=j;k[l>>2]=f;h=n+3|0;i=k[b>>2]|0;j=k[a>>2]|0;if((i|0)>=(j|0)){if((i|0)!=(j|0)){b=h;return b|0}g=a+4|0;f=k[g>>2]|0;if((k[e>>2]|0)>=(f|0)){b=h;return b|0}}else{f=a+4|0;g=f;f=k[f>>2]|0}k[a>>2]=i;k[g>>2]=k[e>>2];k[b>>2]=j;k[e>>2]=f;b=n+4|0;return b|0}function Zb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;switch(b-a>>3|0){case 2:{f=b+-8|0;g=k[f>>2]|0;h=k[a>>2]|0;if((g|0)>=(h|0)){if((g|0)!=(h|0)){a=1;return a|0}e=b+-4|0;c=a+4|0;d=k[c>>2]|0;if((k[e>>2]|0)>=(d|0)){a=1;return a|0}}else{d=a+4|0;c=d;e=b+-4|0;d=k[d>>2]|0}k[a>>2]=g;k[c>>2]=k[e>>2];k[f>>2]=h;k[e>>2]=d;a=1;return a|0}case 3:{Wb(a,a+8|0,b+-8|0)|0;a=1;return a|0}case 4:{Xb(a,a+8|0,a+16|0,b+-8|0)|0;a=1;return a|0}case 5:{Yb(a,a+8|0,a+16|0,a+24|0,b+-8|0)|0;a=1;return a|0}case 1:case 0:{a=1;return a|0}default:{e=a+16|0;Wb(a,a+8|0,e)|0;d=a+24|0;if((d|0)==(b|0)){a=1;return a|0}else c=0;while(1){l=k[d>>2]|0;h=k[e>>2]|0;if((l|0)>=(h|0)){if((l|0)==(h|0)?(n=d+4|0,o=k[n>>2]|0,p=e+4|0,(o|0)<(k[p>>2]|0)):0){f=p;g=n;m=o;q=15}}else{m=d+4|0;f=e+4|0;g=m;m=k[m>>2]|0;q=15}if((q|0)==15){q=0;k[d>>2]=h;k[g>>2]=k[f>>2];a:do if((e|0)!=(a|0)){j=e;while(1){e=j+-8|0;i=k[e>>2]|0;if((l|0)>=(i|0)){if((l|0)!=(i|0)){e=j;break a}h=j+-4|0;g=k[h>>2]|0;if((m|0)<(g|0))f=h;else{e=j;break a}}else{g=j+-4|0;f=g;g=k[g>>2]|0}k[j>>2]=i;k[j+4>>2]=g;if((e|0)==(a|0))break;else j=e}}while(0);k[e>>2]=l;k[f>>2]=m;c=c+1|0;if((c|0)==8)break}e=d+8|0;if((e|0)==(b|0)){c=1;q=24;break}else{m=d;d=e;e=m}}if((q|0)==24)return c|0;a=(d+8|0)==(b|0);return a|0}}return 0}function _b(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;y=k[c>>2]|0;z=(y|0)==(a|0);if(z?(k[c+4>>2]|0)==(b|0):0){b=0;return b|0}A=k[c+8>>2]|0;B=(A|0)==(a|0);C=k[c+12>>2]|0;if(B&(C|0)==(b|0)){b=0;return b|0}i=((b|0)<0)<<31>>31;n=be(C|0,((C|0)<0)<<31>>31|0,b|0,i|0)|0;p=L;x=k[c+4>>2]|0;c=be(x|0,((x|0)<0)<<31>>31|0,b|0,i|0)|0;i=L;v=((a|0)<0)<<31>>31;q=be(A|0,((A|0)<0)<<31>>31|0,a|0,v|0)|0;s=L;v=be(y|0,((y|0)<0)<<31>>31|0,a|0,v|0)|0;w=L;u=(s|0)<0;r=be(0,0,q|0,s|0)|0;t=L;d=(i|0)<0;e=be(0,0,c|0,i|0)|0;j=L;f=ne((u?r:q)|0,(u?t:s)|0,(d?e:c)|0,(d?j:i)|0)|0;g=L;l=(w|0)<0;h=be(0,0,v|0,w|0)|0;v=l?h:v;w=l?L:w;h=(p|0)<0;m=be(0,0,n|0,p|0)|0;o=L;D=ne(v|0,w|0,(h?m:n)|0,(h?o:p)|0)|0;if((f|0)==(D|0)&(g|0)==(L|0)?(D=ha(l?-1:1,h?-1:1)|0,(f|0)==0&(g|0)==0|(ha(u?-1:1,d?-1:1)|0)==(D|0)):0){D=0;return D|0}h=l?e:c;g=l?j:i;do if(l|z^1){f=u?m:n;e=u?o:p;d=u?r:q;c=u?t:s;if(!(u|B^1)){c=(y|0)!=(a|0);break}u=(c|0)<0;s=be(0,0,d|0,c|0)|0;t=u?L:c;D=(g|0)<0;c=be(0,0,h|0,g|0)|0;g=ne((u?s:d)|0,t|0,(D?c:h)|0,(D?L:g)|0)|0;h=L;c=(e|0)<0;d=be(0,0,f|0,e|0)|0;e=ne((c?d:f)|0,(c?L:e)|0,v|0,w|0)|0;f=L;d=ha(u?-1:1,D?-1:1)|0;c=ha(c?-1:1,(w|0)<0?-1:1)|0;if((d|0)>=(c|0))if((c|0)>=(d|0))if((d|0)==-1){c=f>>>0<h>>>0|(f|0)==(h|0)&e>>>0<g>>>0;break}else{c=h>>>0<f>>>0|(h|0)==(f|0)&g>>>0<e>>>0;break}else c=0;else c=1}else c=0;while(0);d=c?-1:1;if((A|0)<(y|0))c=1;else c=(A|0)==(y|0)&(C|0)<(x|0);d=c?0-d|0:d;if((y|0)>=(A|0)?!((y|0)==(A|0)&(x|0)<(C|0)):0)if((y|0)>(a|0)|z&(x|0)>(b|0))if((A|0)<(a|0))c=1;else c=B&(C|0)<(b|0);else c=0;else if((A|0)>(a|0)|B&(C|0)>(b|0))if((y|0)<(a|0))c=1;else c=z&(x|0)<(b|0);else c=0;D=c?d:0-d|0;return D|0}function $b(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;n=k[b>>2]|0;o=k[a>>2]|0;do if((n|0)>=(o|0)){h=(n|0)==(o|0);if(h?(k[b+4>>2]|0)<(k[a+4>>2]|0):0){i=1;break}if((o|0)<(n|0))i=0;else{if(h?(f=k[a+4>>2]|0,g=k[b+4>>2]|0,(f|0)<(g|0)):0)r=12;else{g=k[b+8>>2]|0;f=k[a+8>>2]|0;if((g|0)<(f|0)){i=1;break}if((g|0)==(f|0)?(k[b+12>>2]|0)<(k[a+12>>2]|0):0){i=1;break}if(h){f=k[a+4>>2]|0;g=k[b+4>>2]|0;r=12}else r=15}if((r|0)==12){if((f|0)<(g|0)){i=0;break}if((g|0)>=(f|0)){f=k[a+8>>2]|0;g=k[b+8>>2]|0;r=15}}if((r|0)==15){if((f|0)<(g|0)){i=0;break}if((f|0)==(g|0)?(k[a+12>>2]|0)<(k[b+12>>2]|0):0){i=0;break}}i=(k[b+16>>2]|0)<(k[a+16>>2]|0)}}else i=1;while(0);l=k[c>>2]|0;do if((l|0)>=(n|0)){h=(l|0)==(n|0);if(h?(k[c+4>>2]|0)<(k[b+4>>2]|0):0){f=1;break}if((n|0)<(l|0))f=0;else{if(h?(j=k[b+4>>2]|0,m=k[c+4>>2]|0,(j|0)<(m|0)):0){g=j;f=m;r=30}else{g=k[c+8>>2]|0;f=k[b+8>>2]|0;if((g|0)<(f|0)){f=1;break}if((g|0)==(f|0)?(k[c+12>>2]|0)<(k[b+12>>2]|0):0){f=1;break}if(h){g=k[b+4>>2]|0;f=k[c+4>>2]|0;r=30}else r=33}if((r|0)==30){if((g|0)<(f|0)){f=0;break}if((f|0)>=(g|0)){f=k[b+8>>2]|0;g=k[c+8>>2]|0;r=33}}if((r|0)==33){if((f|0)<(g|0)){f=0;break}if((f|0)==(g|0)?(k[b+12>>2]|0)<(k[c+12>>2]|0):0){f=0;break}}f=(k[c+16>>2]|0)<(k[b+16>>2]|0)}}else f=1;while(0);if(!i){if(!f){b=0;return b|0}m=b+4|0;r=k[m>>2]|0;k[b>>2]=l;i=c+4|0;k[m>>2]=k[i>>2];k[c>>2]=n;k[i>>2]=r;i=b+8|0;r=k[i>>2]|0;j=b+12|0;g=k[j>>2]|0;h=c+8|0;k[i>>2]=k[h>>2];l=c+12|0;k[j>>2]=k[l>>2];k[h>>2]=r;k[l>>2]=g;l=b+16|0;g=c+16|0;h=k[l>>2]|0;k[l>>2]=k[g>>2];k[g>>2]=h;g=k[b>>2]|0;h=k[a>>2]|0;do if((g|0)>=(h|0)){f=(g|0)==(h|0);if(f?(k[m>>2]|0)<(k[a+4>>2]|0):0)break;if((h|0)<(g|0)){b=1;return b|0}if(f?(e=k[a+4>>2]|0,d=k[m>>2]|0,(e|0)<(d|0)):0)r=50;else{e=k[i>>2]|0;d=k[a+8>>2]|0;if((e|0)<(d|0))break;if((e|0)==(d|0)?(k[j>>2]|0)<(k[a+12>>2]|0):0)break;if(f){e=k[a+4>>2]|0;d=k[m>>2]|0;r=50}else r=53}if((r|0)==50){if((e|0)<(d|0)){b=1;return b|0}if((d|0)>=(e|0)){d=k[a+8>>2]|0;e=k[i>>2]|0;r=53}}if((r|0)==53){if((d|0)<(e|0)){b=1;return b|0}if((d|0)==(e|0)?(k[a+12>>2]|0)<(k[j>>2]|0):0){b=1;return b|0}}if((k[l>>2]|0)>=(k[a+16>>2]|0)){b=1;return b|0}}while(0);r=a+4|0;q=k[r>>2]|0;k[a>>2]=g;k[r>>2]=k[m>>2];k[b>>2]=h;k[m>>2]=q;q=a+8|0;b=k[q>>2]|0;r=a+12|0;c=k[r>>2]|0;k[q>>2]=k[i>>2];k[r>>2]=k[j>>2];k[i>>2]=b;k[j>>2]=c;c=a+16|0;b=k[c>>2]|0;k[c>>2]=k[l>>2];k[l>>2]=b;b=2;return b|0}d=a+4|0;e=k[d>>2]|0;if(f){k[a>>2]=l;b=c+4|0;k[d>>2]=k[b>>2];k[c>>2]=o;k[b>>2]=e;b=a+8|0;p=k[b>>2]|0;o=a+12|0;r=k[o>>2]|0;q=c+8|0;k[b>>2]=k[q>>2];b=c+12|0;k[o>>2]=k[b>>2];k[q>>2]=p;k[b>>2]=r;a=a+16|0;b=c+16|0;c=k[a>>2]|0;k[a>>2]=k[b>>2];k[b>>2]=c;b=1;return b|0}k[a>>2]=n;n=b+4|0;k[d>>2]=k[n>>2];k[b>>2]=o;k[n>>2]=e;m=a+8|0;g=k[m>>2]|0;h=a+12|0;i=k[h>>2]|0;l=b+8|0;k[m>>2]=k[l>>2];m=b+12|0;k[h>>2]=k[m>>2];k[l>>2]=g;k[m>>2]=i;i=a+16|0;g=b+16|0;h=k[i>>2]|0;k[i>>2]=k[g>>2];k[g>>2]=h;i=k[c>>2]|0;j=k[b>>2]|0;do if((i|0)>=(j|0)){f=(i|0)==(j|0);if(f?(k[c+4>>2]|0)<(k[n>>2]|0):0)break;if((j|0)<(i|0)){b=1;return b|0}if(f?(p=k[n>>2]|0,q=k[c+4>>2]|0,(p|0)<(q|0)):0){e=p;d=q;r=71}else{e=k[c+8>>2]|0;d=k[l>>2]|0;if((e|0)<(d|0))break;if((e|0)==(d|0)?(k[c+12>>2]|0)<(k[m>>2]|0):0)break;if(f){e=k[n>>2]|0;d=k[c+4>>2]|0;r=71}else r=74}if((r|0)==71){if((e|0)<(d|0)){b=1;return b|0}if((d|0)>=(e|0)){d=k[l>>2]|0;e=k[c+8>>2]|0;r=74}}if((r|0)==74){if((d|0)<(e|0)){b=1;return b|0}if((d|0)==(e|0)?(k[m>>2]|0)<(k[c+12>>2]|0):0){b=1;return b|0}}if((k[c+16>>2]|0)>=(h|0)){b=1;return b|0}}while(0);a=k[n>>2]|0;k[b>>2]=i;q=c+4|0;k[n>>2]=k[q>>2];k[c>>2]=j;k[q>>2]=a;q=k[l>>2]|0;a=k[m>>2]|0;r=c+8|0;k[l>>2]=k[r>>2];b=c+12|0;k[m>>2]=k[b>>2];k[r>>2]=q;k[b>>2]=a;b=c+16|0;c=k[g>>2]|0;k[g>>2]=k[b>>2];k[b>>2]=c;b=2;return b|0}function ac(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;t=$b(a,b,c)|0;i=k[d>>2]|0;j=k[c>>2]|0;do if((i|0)>=(j|0)){h=(i|0)==(j|0);if(h?(k[d+4>>2]|0)<(k[c+4>>2]|0):0)break;if((j|0)<(i|0)){b=t;return b|0}if(h?(f=k[c+4>>2]|0,g=k[d+4>>2]|0,(f|0)<(g|0)):0)r=12;else{g=k[d+8>>2]|0;f=k[c+8>>2]|0;if((g|0)<(f|0))break;if((g|0)==(f|0)?(k[d+12>>2]|0)<(k[c+12>>2]|0):0)break;if(h){f=k[c+4>>2]|0;g=k[d+4>>2]|0;r=12}else r=15}if((r|0)==12){if((f|0)<(g|0)){b=t;return b|0}if((g|0)>=(f|0)){f=k[c+8>>2]|0;g=k[d+8>>2]|0;r=15}}if((r|0)==15){if((f|0)<(g|0)){b=t;return b|0}if((f|0)==(g|0)?(k[c+12>>2]|0)<(k[d+12>>2]|0):0){b=t;return b|0}}if((k[d+16>>2]|0)>=(k[c+16>>2]|0)){b=t;return b|0}}while(0);l=c+4|0;r=k[l>>2]|0;k[c>>2]=i;o=d+4|0;k[l>>2]=k[o>>2];k[d>>2]=j;k[o>>2]=r;o=c+8|0;r=k[o>>2]|0;p=c+12|0;i=k[p>>2]|0;j=d+8|0;k[o>>2]=k[j>>2];q=d+12|0;k[p>>2]=k[q>>2];k[j>>2]=r;k[q>>2]=i;q=c+16|0;i=d+16|0;j=k[q>>2]|0;k[q>>2]=k[i>>2];k[i>>2]=j;i=t+1|0;j=k[c>>2]|0;d=k[b>>2]|0;do if((j|0)>=(d|0)){h=(j|0)==(d|0);if(h?(k[l>>2]|0)<(k[b+4>>2]|0):0)break;if((d|0)<(j|0)){b=i;return b|0}if(h?(m=k[b+4>>2]|0,n=k[l>>2]|0,(m|0)<(n|0)):0){g=m;f=n;r=30}else{g=k[o>>2]|0;f=k[b+8>>2]|0;if((g|0)<(f|0))break;if((g|0)==(f|0)?(k[p>>2]|0)<(k[b+12>>2]|0):0)break;if(h){g=k[b+4>>2]|0;f=k[l>>2]|0;r=30}else r=33}if((r|0)==30){if((g|0)<(f|0)){b=i;return b|0}if((f|0)>=(g|0)){f=k[b+8>>2]|0;g=k[o>>2]|0;r=33}}if((r|0)==33){if((f|0)<(g|0)){b=i;return b|0}if((f|0)==(g|0)?(k[b+12>>2]|0)<(k[p>>2]|0):0){b=i;return b|0}}if((k[q>>2]|0)>=(k[b+16>>2]|0)){b=i;return b|0}}while(0);n=b+4|0;h=k[n>>2]|0;k[b>>2]=j;k[n>>2]=k[l>>2];k[c>>2]=d;k[l>>2]=h;l=b+8|0;h=k[l>>2]|0;m=b+12|0;d=k[m>>2]|0;k[l>>2]=k[o>>2];k[m>>2]=k[p>>2];k[o>>2]=h;k[p>>2]=d;d=b+16|0;h=k[d>>2]|0;k[d>>2]=k[q>>2];k[q>>2]=h;h=t+2|0;i=k[b>>2]|0;j=k[a>>2]|0;do if((i|0)>=(j|0)){g=(i|0)==(j|0);if(g?(k[n>>2]|0)<(k[a+4>>2]|0):0)break;if((j|0)<(i|0)){b=h;return b|0}if(g?(s=k[a+4>>2]|0,e=k[n>>2]|0,(s|0)<(e|0)):0){f=s;r=48}else{f=k[l>>2]|0;e=k[a+8>>2]|0;if((f|0)<(e|0))break;if((f|0)==(e|0)?(k[m>>2]|0)<(k[a+12>>2]|0):0)break;if(g){f=k[a+4>>2]|0;e=k[n>>2]|0;r=48}else r=51}if((r|0)==48){if((f|0)<(e|0)){b=h;return b|0}if((e|0)>=(f|0)){e=k[a+8>>2]|0;f=k[l>>2]|0;r=51}}if((r|0)==51){if((e|0)<(f|0)){b=h;return b|0}if((e|0)==(f|0)?(k[a+12>>2]|0)<(k[m>>2]|0):0){b=h;return b|0}}if((k[d>>2]|0)>=(k[a+16>>2]|0)){b=h;return b|0}}while(0);s=a+4|0;c=k[s>>2]|0;k[a>>2]=i;k[s>>2]=k[n>>2];k[b>>2]=j;k[n>>2]=c;c=a+8|0;s=k[c>>2]|0;r=a+12|0;b=k[r>>2]|0;k[c>>2]=k[l>>2];k[r>>2]=k[m>>2];k[l>>2]=s;k[m>>2]=b;a=a+16|0;b=k[a>>2]|0;k[a>>2]=k[d>>2];k[d>>2]=b;b=t+3|0;return b|0}function bc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;x=ac(a,b,c,d)|0;m=k[e>>2]|0;n=k[d>>2]|0;do if((m|0)>=(n|0)){l=(m|0)==(n|0);if(l?(k[e+4>>2]|0)<(k[d+4>>2]|0):0)break;if((n|0)<(m|0)){b=x;return b|0}if(l?(i=k[d+4>>2]|0,j=k[e+4>>2]|0,(i|0)<(j|0)):0)w=12;else{j=k[e+8>>2]|0;i=k[d+8>>2]|0;if((j|0)<(i|0))break;if((j|0)==(i|0)?(k[e+12>>2]|0)<(k[d+12>>2]|0):0)break;if(l){i=k[d+4>>2]|0;j=k[e+4>>2]|0;w=12}else w=15}if((w|0)==12){if((i|0)<(j|0)){b=x;return b|0}if((j|0)>=(i|0)){i=k[d+8>>2]|0;j=k[e+8>>2]|0;w=15}}if((w|0)==15){if((i|0)<(j|0)){b=x;return b|0}if((i|0)==(j|0)?(k[d+12>>2]|0)<(k[e+12>>2]|0):0){b=x;return b|0}}if((k[e+16>>2]|0)>=(k[d+16>>2]|0)){b=x;return b|0}}while(0);o=d+4|0;w=k[o>>2]|0;k[d>>2]=m;p=e+4|0;k[o>>2]=k[p>>2];k[e>>2]=n;k[p>>2]=w;p=d+8|0;w=k[p>>2]|0;s=d+12|0;m=k[s>>2]|0;n=e+8|0;k[p>>2]=k[n>>2];u=e+12|0;k[s>>2]=k[u>>2];k[n>>2]=w;k[u>>2]=m;u=d+16|0;m=e+16|0;n=k[u>>2]|0;k[u>>2]=k[m>>2];k[m>>2]=n;m=x+1|0;n=k[d>>2]|0;e=k[c>>2]|0;do if((n|0)>=(e|0)){l=(n|0)==(e|0);if(l?(k[o>>2]|0)<(k[c+4>>2]|0):0)break;if((e|0)<(n|0)){b=m;return b|0}if(l?(q=k[c+4>>2]|0,r=k[o>>2]|0,(q|0)<(r|0)):0){j=q;i=r;w=30}else{j=k[p>>2]|0;i=k[c+8>>2]|0;if((j|0)<(i|0))break;if((j|0)==(i|0)?(k[s>>2]|0)<(k[c+12>>2]|0):0)break;if(l){j=k[c+4>>2]|0;i=k[o>>2]|0;w=30}else w=33}if((w|0)==30){if((j|0)<(i|0)){b=m;return b|0}if((i|0)>=(j|0)){i=k[c+8>>2]|0;j=k[p>>2]|0;w=33}}if((w|0)==33){if((i|0)<(j|0)){b=m;return b|0}if((i|0)==(j|0)?(k[c+12>>2]|0)<(k[s>>2]|0):0){b=m;return b|0}}if((k[u>>2]|0)>=(k[c+16>>2]|0)){b=m;return b|0}}while(0);t=c+4|0;q=k[t>>2]|0;k[c>>2]=n;k[t>>2]=k[o>>2];k[d>>2]=e;k[o>>2]=q;q=c+8|0;m=k[q>>2]|0;r=c+12|0;l=k[r>>2]|0;k[q>>2]=k[p>>2];k[r>>2]=k[s>>2];k[p>>2]=m;k[s>>2]=l;p=c+16|0;l=k[p>>2]|0;k[p>>2]=k[u>>2];k[u>>2]=l;l=x+2|0;m=k[c>>2]|0;n=k[b>>2]|0;do if((m|0)>=(n|0)){j=(m|0)==(n|0);if(j?(k[t>>2]|0)<(k[b+4>>2]|0):0)break;if((n|0)<(m|0)){b=l;return b|0}if(j?(v=k[b+4>>2]|0,h=k[t>>2]|0,(v|0)<(h|0)):0){i=v;w=48}else{i=k[q>>2]|0;h=k[b+8>>2]|0;if((i|0)<(h|0))break;if((i|0)==(h|0)?(k[r>>2]|0)<(k[b+12>>2]|0):0)break;if(j){i=k[b+4>>2]|0;h=k[t>>2]|0;w=48}else w=51}if((w|0)==48){if((i|0)<(h|0)){b=l;return b|0}if((h|0)>=(i|0)){h=k[b+8>>2]|0;i=k[q>>2]|0;w=51}}if((w|0)==51){if((h|0)<(i|0)){b=l;return b|0}if((h|0)==(i|0)?(k[b+12>>2]|0)<(k[r>>2]|0):0){b=l;return b|0}}if((k[p>>2]|0)>=(k[b+16>>2]|0)){b=l;return b|0}}while(0);o=b+4|0;i=k[o>>2]|0;k[b>>2]=m;k[o>>2]=k[t>>2];k[c>>2]=n;k[t>>2]=i;n=b+8|0;i=k[n>>2]|0;e=b+12|0;m=k[e>>2]|0;k[n>>2]=k[q>>2];k[e>>2]=k[r>>2];k[q>>2]=i;k[r>>2]=m;m=b+16|0;i=k[m>>2]|0;k[m>>2]=k[p>>2];k[p>>2]=i;i=x+3|0;j=k[b>>2]|0;l=k[a>>2]|0;do if((j|0)>=(l|0)){h=(j|0)==(l|0);if(h?(k[o>>2]|0)<(k[a+4>>2]|0):0)break;if((l|0)<(j|0)){b=i;return b|0}if(h?(g=k[a+4>>2]|0,f=k[o>>2]|0,(g|0)<(f|0)):0)w=66;else{g=k[n>>2]|0;f=k[a+8>>2]|0;if((g|0)<(f|0))break;if((g|0)==(f|0)?(k[e>>2]|0)<(k[a+12>>2]|0):0)break;if(h){g=k[a+4>>2]|0;f=k[o>>2]|0;w=66}else w=69}if((w|0)==66){if((g|0)<(f|0)){b=i;return b|0}if((f|0)>=(g|0)){f=k[a+8>>2]|0;g=k[n>>2]|0;w=69}}if((w|0)==69){if((f|0)<(g|0)){b=i;return b|0}if((f|0)==(g|0)?(k[a+12>>2]|0)<(k[e>>2]|0):0){b=i;return b|0}}if((k[m>>2]|0)>=(k[a+16>>2]|0)){b=i;return b|0}}while(0);c=a+4|0;v=k[c>>2]|0;k[a>>2]=j;k[c>>2]=k[o>>2];k[b>>2]=l;k[o>>2]=v;v=a+8|0;c=k[v>>2]|0;w=a+12|0;b=k[w>>2]|0;k[v>>2]=k[n>>2];k[w>>2]=k[e>>2];k[n>>2]=c;k[e>>2]=b;a=a+16|0;b=k[a>>2]|0;k[a>>2]=k[m>>2];k[m>>2]=b;b=x+4|0;return b|0}function cc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;switch((b-a|0)/20|0|0){case 2:{f=b+-20|0;g=k[f>>2]|0;h=k[a>>2]|0;do if((g|0)>=(h|0)){e=(g|0)==(h|0);if(e?(k[b+-16>>2]|0)<(k[a+4>>2]|0):0)break;if((h|0)<(g|0)){b=1;return b|0}if(e?(d=k[a+4>>2]|0,c=k[b+-16>>2]|0,(d|0)<(c|0)):0)w=13;else{d=k[b+-12>>2]|0;c=k[a+8>>2]|0;if((d|0)<(c|0))break;if((d|0)==(c|0)?(k[b+-8>>2]|0)<(k[a+12>>2]|0):0)break;if(e){d=k[a+4>>2]|0;c=k[b+-16>>2]|0;w=13}else w=16}if((w|0)==13){if((d|0)<(c|0)){b=1;return b|0}if((c|0)>=(d|0)){c=k[a+8>>2]|0;d=k[b+-12>>2]|0;w=16}}if((w|0)==16){if((c|0)<(d|0)){b=1;return b|0}if((c|0)==(d|0)?(k[a+12>>2]|0)<(k[b+-8>>2]|0):0){b=1;return b|0}}if((k[b+-4>>2]|0)>=(k[a+16>>2]|0)){b=1;return b|0}}while(0);s=a+4|0;t=k[s>>2]|0;k[a>>2]=g;w=b+-16|0;k[s>>2]=k[w>>2];k[f>>2]=h;k[w>>2]=t;w=a+8|0;t=k[w>>2]|0;s=a+12|0;v=k[s>>2]|0;u=b+-12|0;k[w>>2]=k[u>>2];w=b+-8|0;k[s>>2]=k[w>>2];k[u>>2]=t;k[w>>2]=v;w=a+16|0;b=b+-4|0;a=k[w>>2]|0;k[w>>2]=k[b>>2];k[b>>2]=a;b=1;return b|0}case 3:{$b(a,a+20|0,b+-20|0)|0;b=1;return b|0}case 4:{ac(a,a+20|0,a+40|0,b+-20|0)|0;b=1;return b|0}case 5:{bc(a,a+20|0,a+40|0,a+60|0,b+-20|0)|0;b=1;return b|0}case 1:case 0:{b=1;return b|0}default:{e=a+40|0;$b(a,a+20|0,e)|0;d=a+60|0;if((d|0)==(b|0)){b=1;return b|0}else c=0;while(1){s=k[d>>2]|0;i=k[e>>2]|0;do if((s|0)>=(i|0)){h=(s|0)==(i|0);if(h?(k[d+4>>2]|0)<(k[e+4>>2]|0):0){w=43;break}if((i|0)>=(s|0)){if(h?(u=k[e+4>>2]|0,v=k[d+4>>2]|0,(u|0)<(v|0)):0){f=u;g=v;w=36}else{f=k[d+8>>2]|0;g=k[e+8>>2]|0;if((f|0)<(g|0)){w=43;break}if((f|0)==(g|0)?(k[d+12>>2]|0)<(k[e+12>>2]|0):0){w=43;break}if(h){f=k[e+4>>2]|0;g=k[d+4>>2]|0;w=36}else w=39}if((w|0)==36){w=0;if((f|0)<(g|0))break;if((g|0)>=(f|0)){g=k[e+8>>2]|0;f=k[d+8>>2]|0;w=39}}if((w|0)==39){w=0;if((g|0)<(f|0))break;if((g|0)==(f|0)?(k[e+12>>2]|0)<(k[d+12>>2]|0):0)break}if((k[d+16>>2]|0)<(k[e+16>>2]|0))w=43}}else w=43;while(0);if((w|0)==43){w=0;m=d+4|0;o=k[m>>2]|0;g=d+8|0;p=k[g>>2]|0;f=d+12|0;q=k[f>>2]|0;n=d+16|0;r=k[n>>2]|0;k[d>>2]=i;h=e+4|0;k[m>>2]=k[h>>2];i=e+8|0;k[g>>2]=k[i>>2];g=e+12|0;k[f>>2]=k[g>>2];f=e+16|0;k[n>>2]=k[f>>2];a:do if((e|0)!=(a|0)){n=e;m=i;l=h;while(1){e=n+-20|0;j=k[e>>2]|0;do if((s|0)>=(j|0)){i=(s|0)==(j|0);if(i?(o|0)<(k[n+-16>>2]|0):0)break;if((j|0)<(s|0)){e=n;h=l;i=m;break a}if(i?(t=k[n+-16>>2]|0,(t|0)<(o|0)):0){h=t;w=55}else{h=k[n+-12>>2]|0;if((p|0)<(h|0))break;if((p|0)==(h|0)?(q|0)<(k[n+-8>>2]|0):0)break;if(i){h=k[n+-16>>2]|0;w=55}else w=58}if((w|0)==55){w=0;if((h|0)<(o|0)){e=n;h=l;i=m;break a}if((o|0)>=(h|0)){h=k[n+-12>>2]|0;w=58}}if((w|0)==58){w=0;if((h|0)<(p|0)){e=n;h=l;i=m;break a}if((h|0)==(p|0)?(k[n+-8>>2]|0)<(q|0):0){e=n;h=l;i=m;break a}}if((r|0)>=(k[n+-4>>2]|0)){e=n;h=l;i=m;break a}}while(0);k[n>>2]=j;h=n+-16|0;k[n+4>>2]=k[h>>2];i=n+-12|0;k[n+8>>2]=k[i>>2];g=n+-8|0;k[n+12>>2]=k[g>>2];f=n+-4|0;k[n+16>>2]=k[f>>2];if((e|0)==(a|0))break;else{n=e;m=i;l=h}}}while(0);k[e>>2]=s;k[h>>2]=o;k[i>>2]=p;k[g>>2]=q;k[f>>2]=r;c=c+1|0;if((c|0)==8)break}e=d+20|0;if((e|0)==(b|0)){c=1;w=66;break}else{s=d;d=e;e=s}}if((w|0)==66)return c|0;b=(d+20|0)==(b|0);return b|0}}return 0}function dc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0;f=a+4|0;g=k[a>>2]|0;c=g;h=(k[f>>2]|0)-c|0;i=h>>3;j=i+1|0;if(j>>>0>536870911)xa(1340,1363,303,1438);l=a+8|0;c=(k[l>>2]|0)-c|0;if(c>>3>>>0<268435455){c=c>>2;c=c>>>0<j>>>0?j:c;if(!c){c=0;d=0}else e=5}else{c=536870911;e=5}if((e|0)==5){e=c<<3;e=(e|0)==0?1:e;d=_d(e)|0;a:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(e)|0;if(d)break a}a=ya(4)|0;k[a>>2]=128;La(a|0,8,1)}while(0)}m=b;e=k[m+4>>2]|0;b=d+(i<<3)|0;k[b>>2]=k[m>>2];k[b+4>>2]=e;fe(d|0,g|0,h|0)|0;k[a>>2]=d;k[f>>2]=d+(j<<3);k[l>>2]=d+(c<<3);if(!g)return;$d(g);return}function ec(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;s=b;a:while(1){m=s;n=s+-8|0;o=s+-16|0;r=s+-4|0;w=a;b:while(1){l=w;a=m-l|0;b=a>>3;switch(b|0){case 2:{v=4;break a}case 3:{v=9;break a}case 4:{v=10;break a}case 5:{v=11;break a}case 1:case 0:{v=88;break a}default:{}}if((a|0)<56){v=13;break a}c=(b|0)/2|0;h=w+(c<<3)|0;if((a|0)>7992){a=(b|0)/4|0;a=ic(w,w+(a<<3)|0,h,w+(a+c<<3)|0,n)|0}else a=gc(w,h,n)|0;g=k[w>>2]|0;f=k[h>>2]|0;c:do if((g|0)<(f|0))c=n;else{if((f|0)>=(g|0)?(k[w+4>>2]|0)<(k[w+(c<<3)+4>>2]|0):0){c=n;break}d:do if((w|0)!=(o|0)){e=w+(c<<3)+4|0;c=o;b=n;while(1){d=k[c>>2]|0;if((d|0)<(f|0)){v=58;break}if((f|0)>=(d|0)?(p=b+-4|0,(k[p>>2]|0)<(k[e>>2]|0)):0){b=p;break}b=c+-8|0;if((w|0)==(b|0))break d;else{j=c;c=b;b=j}}if((v|0)==58){v=0;b=b+-4|0}k[w>>2]=d;k[c>>2]=g;i=w+4|0;j=k[i>>2]|0;k[i>>2]=k[b>>2];k[b>>2]=j;a=a+1|0;break c}while(0);a=w+8|0;f=k[n>>2]|0;do if((g|0)>=(f|0)){if((f|0)>=(g|0)?(k[w+4>>2]|0)<(k[r>>2]|0):0)break;if((a|0)==(n|0)){v=88;break a}d=w+4|0;e=w;while(1){b=e+8|0;c=k[b>>2]|0;if((g|0)<(c|0)){v=40;break}if((c|0)>=(g|0)?(q=e+12|0,(k[d>>2]|0)<(k[q>>2]|0)):0){a=q;break}b=a+8|0;if((b|0)==(n|0)){v=88;break a}else{e=a;a=b}}if((v|0)==40){v=0;a=e+12|0}k[b>>2]=f;k[n>>2]=c;l=k[a>>2]|0;k[a>>2]=k[r>>2];k[r>>2]=l;a=e+16|0}while(0);if((a|0)==(n|0)){v=88;break a}h=w+4|0;c=n;while(1){g=k[w>>2]|0;b=k[a>>2]|0;e:do if((g|0)<(b|0)){f=a;e=a}else while(1){if((b|0)>=(g|0)?(k[h>>2]|0)<(k[a+4>>2]|0):0){f=a;e=a;break e}a=a+8|0;b=k[a>>2]|0;if((g|0)<(b|0)){f=a;e=a;break}}while(0);while(1){d=c+-8|0;a=k[d>>2]|0;if((g|0)<(a|0)){c=d;continue}if((a|0)<(g|0))break;if((k[h>>2]|0)<(k[c+-4>>2]|0))c=d;else break}if(e>>>0>=d>>>0){w=e;continue b}k[f>>2]=a;k[d>>2]=b;l=e+4|0;a=c+-4|0;c=k[l>>2]|0;k[l>>2]=k[a>>2];k[a>>2]=c;a=e+8|0;c=d}}while(0);b=w+8|0;f:do if(b>>>0<c>>>0){f=h;while(1){g=k[f>>2]|0;h=f+4|0;j=b;while(1){i=k[j>>2]|0;if((i|0)>=(g|0)){if((g|0)<(i|0))break;if((k[j+4>>2]|0)>=(k[h>>2]|0))break}j=j+8|0}d=c+-8|0;b=k[d>>2]|0;g:do if((b|0)<(g|0))g=d;else{e=c;while(1){e=e+-8|0;if((g|0)>=(b|0)?(k[c+-4>>2]|0)<(k[h>>2]|0):0){g=e;d=e;break g}c=d+-8|0;b=k[c>>2]|0;if((b|0)<(g|0)){g=c;d=c;c=e;break}else{x=d;d=c;c=e;e=x}}}while(0);if(j>>>0>g>>>0){g=j;break f}k[j>>2]=b;k[d>>2]=i;x=j+4|0;b=c+-4|0;c=k[x>>2]|0;k[x>>2]=k[b>>2];k[b>>2]=c;b=j+8|0;c=g;f=(f|0)==(j|0)?g:f;a=a+1|0}}else{g=b;f=h}while(0);do if((g|0)!=(f|0)){d=k[f>>2]|0;e=k[g>>2]|0;if((d|0)>=(e|0)){if((e|0)<(d|0))break;b=f+4|0;c=g+4|0;if((k[b>>2]|0)>=(k[c>>2]|0))break}else{c=g+4|0;b=f+4|0}k[g>>2]=d;k[f>>2]=e;x=k[c>>2]|0;k[c>>2]=k[b>>2];k[b>>2]=x;a=a+1|0}while(0);if(!a){a=jc(w,g)|0;b=g+8|0;if(jc(b,s)|0){v=83;break}if(a){w=b;continue}}x=g;if((x-l|0)>=(m-x|0)){v=87;break}ec(w,g);w=g+8|0}if((v|0)==83){v=0;if(a){v=88;break}else{a=w;s=g;continue}}else if((v|0)==87){v=0;ec(g+8|0,s);a=w;s=g;continue}}if((v|0)==4){b=s+-8|0;c=k[b>>2]|0;d=k[w>>2]|0;if((c|0)>=(d|0)){if((d|0)<(c|0))return;a=w+4|0;if((k[r>>2]|0)>=(k[a>>2]|0))return}else a=w+4|0;k[w>>2]=c;k[b>>2]=d;x=k[a>>2]|0;k[a>>2]=k[r>>2];k[r>>2]=x;return}else if((v|0)==9){gc(w,w+8|0,n)|0;return}else if((v|0)==10){hc(w,w+8|0,w+16|0,n)|0;return}else if((v|0)==11){ic(w,w+8|0,w+16|0,w+24|0,n)|0;return}else if((v|0)==13){b=w+16|0;gc(w,w+8|0,b)|0;a=w+24|0;if((a|0)==(s|0))return;while(1){c=k[a>>2]|0;e=k[b>>2]|0;if((c|0)>=(e|0)){if((e|0)>=(c|0)?(t=a+4|0,u=b+4|0,(k[t>>2]|0)<(k[u>>2]|0)):0){c=u;d=t;v=18}}else{c=b+4|0;d=a+4|0;v=18}if((v|0)==18){v=0;i=a;h=k[i>>2]|0;i=k[i+4>>2]|0;k[a>>2]=e;k[d>>2]=k[c>>2];h:do if((b|0)!=(w|0)){f=b;while(1){b=f+-8|0;g=k[b>>2]|0;if((h|0)>=(g|0)){if((g|0)<(h|0)){b=f;break h}e=f+-4|0;d=k[e>>2]|0;if((i|0)<(d|0))c=e;else{b=f;break h}}else{d=f+-4|0;c=d;d=k[d>>2]|0}k[f>>2]=g;k[f+4>>2]=d;if((b|0)==(w|0))break;else f=b}}while(0);k[b>>2]=h;k[c>>2]=i}b=a+8|0;if((b|0)==(s|0))break;else{x=a;a=b;b=x}}return}else if((v|0)==88)return}function fc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0;f=a+4|0;g=k[a>>2]|0;c=g;h=(k[f>>2]|0)-c|0;i=(h|0)/12|0;j=i+1|0;if(j>>>0>357913941)xa(1340,1363,303,1438);l=a+8|0;c=((k[l>>2]|0)-c|0)/12|0;if(c>>>0<178956970){c=c<<1;c=c>>>0<j>>>0?j:c;if(!c){c=0;d=0}else e=5}else{c=357913941;e=5}if((e|0)==5){e=c*12|0;e=(e|0)==0?1:e;d=_d(e)|0;a:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(e)|0;if(d)break a}a=ya(4)|0;k[a>>2]=128;La(a|0,8,1)}while(0)}e=d+(i*12|0)|0;k[e>>2]=k[b>>2];k[e+4>>2]=k[b+4>>2];k[e+8>>2]=k[b+8>>2];b=d+((((h|0)/-12|0)+i|0)*12|0)|0;fe(b|0,g|0,h|0)|0;k[a>>2]=b;k[f>>2]=d+(j*12|0);k[l>>2]=d+(c*12|0);if(!g)return;$d(g);return}function gc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0;d=k[b>>2]|0;e=k[a>>2]|0;if((d|0)>=(e|0))if((e|0)<(d|0))f=0;else f=(k[b+4>>2]|0)<(k[a+4>>2]|0);else f=1;h=k[c>>2]|0;if((h|0)>=(d|0))if((d|0)<(h|0))g=0;else g=(k[c+4>>2]|0)<(k[b+4>>2]|0);else g=1;if(!f){if(!g){b=0;return b|0}k[b>>2]=h;k[c>>2]=d;g=b+4|0;e=c+4|0;f=k[g>>2]|0;k[g>>2]=k[e>>2];k[e>>2]=f;e=k[b>>2]|0;f=k[a>>2]|0;if((e|0)>=(f|0)){if((f|0)<(e|0)){b=1;return b|0}d=a+4|0;if((k[g>>2]|0)>=(k[d>>2]|0)){b=1;return b|0}}else d=a+4|0;k[a>>2]=e;k[b>>2]=f;b=k[d>>2]|0;k[d>>2]=k[g>>2];k[g>>2]=b;b=2;return b|0}if(g){k[a>>2]=h;k[c>>2]=e;a=a+4|0;b=c+4|0;c=k[a>>2]|0;k[a>>2]=k[b>>2];k[b>>2]=c;b=1;return b|0}k[a>>2]=d;k[b>>2]=e;g=a+4|0;f=b+4|0;e=k[g>>2]|0;k[g>>2]=k[f>>2];k[f>>2]=e;g=k[c>>2]|0;h=k[b>>2]|0;if((g|0)>=(h|0)){if((h|0)<(g|0)){b=1;return b|0}d=c+4|0;if((k[d>>2]|0)>=(e|0)){b=1;return b|0}}else d=c+4|0;k[b>>2]=g;k[c>>2]=h;b=k[f>>2]|0;k[f>>2]=k[d>>2];k[d>>2]=b;b=2;return b|0}function hc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;j=gc(a,b,c)|0;g=k[d>>2]|0;h=k[c>>2]|0;if((g|0)>=(h|0)){if((h|0)<(g|0)){b=j;return b|0}e=d+4|0;f=c+4|0;if((k[e>>2]|0)<(k[f>>2]|0))i=f;else{b=j;return b|0}}else{e=d+4|0;i=c+4|0}k[c>>2]=g;k[d>>2]=h;g=k[i>>2]|0;k[i>>2]=k[e>>2];k[e>>2]=g;e=j+1|0;g=k[c>>2]|0;h=k[b>>2]|0;if((g|0)>=(h|0)){if((h|0)<(g|0)){b=e;return b|0}f=b+4|0;if((k[i>>2]|0)<(k[f>>2]|0))d=f;else{b=e;return b|0}}else d=b+4|0;k[b>>2]=g;k[c>>2]=h;f=k[d>>2]|0;k[d>>2]=k[i>>2];k[i>>2]=f;f=j+2|0;g=k[b>>2]|0;h=k[a>>2]|0;if((g|0)>=(h|0)){if((h|0)<(g|0)){b=f;return b|0}e=a+4|0;if((k[d>>2]|0)>=(k[e>>2]|0)){b=f;return b|0}}else e=a+4|0;k[a>>2]=g;k[b>>2]=h;b=k[e>>2]|0;k[e>>2]=k[d>>2];k[d>>2]=b;b=j+3|0;return b|0}function ic(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0;m=hc(a,b,c,d)|0;h=k[e>>2]|0;i=k[d>>2]|0;if((h|0)>=(i|0)){if((i|0)<(h|0)){b=m;return b|0}f=e+4|0;g=d+4|0;if((k[f>>2]|0)<(k[g>>2]|0))l=g;else{b=m;return b|0}}else{f=e+4|0;l=d+4|0}k[d>>2]=h;k[e>>2]=i;h=k[l>>2]|0;k[l>>2]=k[f>>2];k[f>>2]=h;f=m+1|0;h=k[d>>2]|0;i=k[c>>2]|0;if((h|0)>=(i|0)){if((i|0)<(h|0)){b=f;return b|0}g=c+4|0;if((k[l>>2]|0)<(k[g>>2]|0))j=g;else{b=f;return b|0}}else j=c+4|0;k[c>>2]=h;k[d>>2]=i;f=k[j>>2]|0;k[j>>2]=k[l>>2];k[l>>2]=f;f=m+2|0;h=k[c>>2]|0;i=k[b>>2]|0;if((h|0)>=(i|0)){if((i|0)<(h|0)){b=f;return b|0}g=b+4|0;if((k[j>>2]|0)<(k[g>>2]|0))e=g;else{b=f;return b|0}}else e=b+4|0;k[b>>2]=h;k[c>>2]=i;g=k[e>>2]|0;k[e>>2]=k[j>>2];k[j>>2]=g;g=m+3|0;h=k[b>>2]|0;i=k[a>>2]|0;if((h|0)>=(i|0)){if((i|0)<(h|0)){b=g;return b|0}f=a+4|0;if((k[e>>2]|0)>=(k[f>>2]|0)){b=g;return b|0}}else f=a+4|0;k[a>>2]=h;k[b>>2]=i;b=k[f>>2]|0;k[f>>2]=k[e>>2];k[e>>2]=b;b=m+4|0;return b|0}function jc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0;switch(b-a>>3|0){case 2:{e=b+-8|0;f=k[e>>2]|0;g=k[a>>2]|0;if((f|0)>=(g|0)){if((g|0)<(f|0)){a=1;return a|0}c=b+-4|0;d=a+4|0;if((k[c>>2]|0)>=(k[d>>2]|0)){a=1;return a|0}}else{d=a+4|0;c=b+-4|0}k[a>>2]=f;k[e>>2]=g;a=k[d>>2]|0;k[d>>2]=k[c>>2];k[c>>2]=a;a=1;return a|0}case 3:{gc(a,a+8|0,b+-8|0)|0;a=1;return a|0}case 4:{hc(a,a+8|0,a+16|0,b+-8|0)|0;a=1;return a|0}case 5:{ic(a,a+8|0,a+16|0,a+24|0,b+-8|0)|0;a=1;return a|0}case 1:case 0:{a=1;return a|0}default:{e=a+16|0;gc(a,a+8|0,e)|0;d=a+24|0;if((d|0)==(b|0)){a=1;return a|0}else c=0;while(1){f=k[d>>2]|0;h=k[e>>2]|0;if((f|0)>=(h|0)){if((h|0)>=(f|0)?(n=d+4|0,o=e+4|0,(k[n>>2]|0)<(k[o>>2]|0)):0){f=o;g=n;p=15}}else{f=e+4|0;g=d+4|0;p=15}if((p|0)==15){p=0;m=d;l=k[m>>2]|0;m=k[m+4>>2]|0;k[d>>2]=h;k[g>>2]=k[f>>2];a:do if((e|0)!=(a|0)){j=e;while(1){e=j+-8|0;i=k[e>>2]|0;if((l|0)>=(i|0)){if((i|0)<(l|0)){e=j;break a}h=j+-4|0;g=k[h>>2]|0;if((m|0)<(g|0))f=h;else{e=j;break a}}else{g=j+-4|0;f=g;g=k[g>>2]|0}k[j>>2]=i;k[j+4>>2]=g;if((e|0)==(a|0))break;else j=e}}while(0);k[e>>2]=l;k[f>>2]=m;c=c+1|0;if((c|0)==8)break}e=d+8|0;if((e|0)==(b|0)){c=1;p=24;break}else{m=d;d=e;e=m}}if((p|0)==24)return c|0;a=(d+8|0)==(b|0);return a|0}}return 0}function kc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;m=a+4|0;e=k[m>>2]|0;l=k[a>>2]|0;c=l;i=e-c>>5;j=i+1|0;if(j>>>0>134217727)xa(1340,1363,303,1438);n=a+8|0;d=(k[n>>2]|0)-c|0;if(d>>5>>>0<67108863){d=d>>4;d=d>>>0<j>>>0?j:d;if(!d){g=0;f=0}else h=5}else{d=134217727;h=5}if((h|0)==5){g=d<<5;g=(g|0)==0?1:g;f=_d(g)|0;a:do if(!f){while(1){f=k[35]|0;k[35]=f+0;if(!f)break;Xa[f&0]();f=_d(g)|0;if(f)break a}n=ya(4)|0;k[n>>2]=128;La(n|0,8,1)}while(0);g=d}h=f+(i<<5)|0;d=h;g=f+(g<<5)|0;k[h>>2]=k[b>>2];q=b+4|0;p=k[q+4>>2]|0;o=f+(i<<5)+4|0;k[o>>2]=k[q>>2];k[o+4>>2]=p;k[f+(i<<5)+12>>2]=k[b+12>>2];k[f+(i<<5)+16>>2]=k[b+16>>2];k[f+(i<<5)+20>>2]=k[b+20>>2];k[f+(i<<5)+24>>2]=k[b+24>>2];k[f+(i<<5)+28>>2]=k[b+28>>2];f=f+(j<<5)|0;if((e|0)==(l|0))e=a;else{c=h;do{q=e;e=e+-32|0;k[c+-32>>2]=k[e>>2];b=q+-28|0;o=k[b+4>>2]|0;p=c+-28|0;k[p>>2]=k[b>>2];k[p+4>>2]=o;k[c+-20>>2]=k[q+-20>>2];k[c+-16>>2]=k[q+-16>>2];k[c+-12>>2]=k[q+-12>>2];k[c+-8>>2]=k[q+-8>>2];k[c+-4>>2]=k[q+-4>>2];c=d+-32|0;d=c}while((e|0)!=(l|0));e=a;c=k[a>>2]|0}k[e>>2]=d;k[m>>2]=f;k[n>>2]=g;if(!c)return;$d(c);return}function lc(a,b,c,d,e,f,g,h,l,m){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;g=+g;h=h|0;l=l|0;m=m|0;var n=0,o=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0;_=r;r=r+256|0;R=_+72|0;S=_+56|0;y=_+32|0;t=_+232|0;E=_+220|0;u=_+245|0;v=_+216|0;w=_+244|0;x=_+212|0;O=_+200|0;P=_+184|0;J=_+168|0;M=_+152|0;N=_+124|0;L=_+120|0;K=_+24|0;Q=_+92|0;H=_+80|0;I=_;Z=_+188|0;Y=_+172|0;a=_+156|0;X=_+140|0;V=_+128|0;p[y>>3]=f;p[y+8>>3]=g;p[y+16>>3]=0.0;Nd(911,y);kb(Z,c,d,e);mc(Y,Z,f*3.141592653589793/180.0);W=Y+4|0;if((k[Y>>2]|0)!=(k[W>>2]|0)){k[X>>2]=0;U=X+4|0;k[U>>2]=0;k[X+8>>2]=0;k[V>>2]=0;T=V+4|0;k[T>>2]=0;k[V+8>>2]=0;p[I>>3]=g;p[I+8>>3]=0.0;k[I+16>>2]=X;k[I+20>>2]=V;e=(k[87]|0)>-1;a:do if(!2){a=954;G=6}else{b=954;a=954;while(1){if(!(i[b>>0]|0))break a;b=b+1|0;a=b;if(!(a&3)){a=b;G=6;break}}}while(0);if((G|0)==6){while(1){b=k[a>>2]|0;if(!((b&-2139062144^-2139062144)&b+-16843009))a=a+4|0;else break}if((b&255)<<24>>24)do a=a+1|0;while((i[a>>0]|0)!=0)}d=a-954|0;a=k[72]|0;b=(a|0)==0;b:do if(e){do if(b){a=i[346]|0;i[346]=a+255|a;a=k[68]|0;if(!(a&8)){k[70]=0;k[69]=0;b=k[79]|0;k[75]=b;k[73]=b;a=b+(k[80]|0)|0;k[72]=a;break}else{k[68]=a|32;a=0;G=28;break b}}else b=k[73]|0;while(0);if((a-b|0)>>>0<d>>>0){a=Ta[k[308>>2]&7](272,954,d)|0;G=28;break}else{fe(b|0,954,d|0)|0;k[73]=(k[73]|0)+d;G=30;break}}else{do if(b){a=i[346]|0;i[346]=a+255|a;a=k[68]|0;if(!(a&8)){k[70]=0;k[69]=0;b=k[79]|0;k[75]=b;k[73]=b;a=b+(k[80]|0)|0;k[72]=a;break}else{k[68]=a|32;a=0;G=28;break b}}else b=k[73]|0;while(0);if((a-b|0)>>>0<d>>>0){a=Ta[k[308>>2]&7](272,954,d)|0;G=28;break}else{fe(b|0,954,d|0)|0;k[73]=(k[73]|0)+d;G=30;break}}while(0);if((G|0)==28)if(!((a|0)!=(d|0)?((a>>>0)/(d>>>0)|0|0)<1:0))G=30;do if((G|0)==30){b=i[347]|0;if(b<<24>>24!=10){d=k[73]|0;a=k[72]|0;if(d>>>0<a>>>0){k[73]=d+1;i[d>>0]=10;break}}else a=k[72]|0;i[y>>0]=10;do if(!a){b=j[173]|0;a=(b&65535)<<24>>24;i[346]=a+255|a;a=k[68]|0;if(!(a&8)){k[70]=0;k[69]=0;d=k[79]|0;k[75]=d;k[73]=d;a=d+(k[80]|0)|0;k[72]=a;b=(b&65535)>>>8&255;G=39;break}else{k[68]=a|32;break}}else{d=k[73]|0;G=39}while(0);do if((G|0)==39)if(d>>>0>=a>>>0|b<<24>>24==10){Ta[k[308>>2]&7](272,y,1)|0;break}else{k[73]=d+1;i[d>>0]=10;break}while(0)}while(0);k[E>>2]=0;F=E+4|0;k[F>>2]=0;k[E+8>>2]=0;q=k[W>>2]|0;a=k[Y>>2]|0;b=(q-a|0)/44|0;e=b<<1;s=E+8|0;if((q|0)!=(a|0)){d=b<<6;d=(d|0)==0?1:d;b=_d(d)|0;c:do if(!b){while(1){b=k[35]|0;k[35]=b+0;if(!b)break;Xa[b&0]();b=_d(d)|0;if(b)break c}_=ya(4)|0;k[_>>2]=128;La(_|0,8,1)}while(0);d=b;n=b+(e<<5)|0;k[E>>2]=d;k[F>>2]=d;k[s>>2]=n;d=b;while(1){e=a+16|0;c=a+28|0;i[u>>0]=0;k[v>>2]=a;o=a;if(d>>>0<n>>>0){k[y>>2]=k[e>>2];k[y+4>>2]=k[e+4>>2];k[y+8>>2]=k[e+8>>2];k[t>>2]=k[c>>2];k[t+4>>2]=k[c+4>>2];k[t+8>>2]=k[c+8>>2];k[d>>2]=k[y>>2];k[d+4>>2]=k[y+4>>2];k[d+8>>2]=k[y+8>>2];D=d+12|0;k[D>>2]=k[t>>2];k[D+4>>2]=k[t+4>>2];k[D+8>>2]=k[t+8>>2];k[d+24>>2]=o;i[d+28>>0]=0;i[d+29>>0]=0;d=b+32|0;k[F>>2]=d;b=n}else{nc(E,e,c,u,v);d=k[F>>2]|0;b=k[s>>2]|0}i[w>>0]=1;k[x>>2]=a;if(d>>>0<b>>>0){k[y>>2]=k[c>>2];k[y+4>>2]=k[c+4>>2];k[y+8>>2]=k[c+8>>2];k[t>>2]=k[e>>2];k[t+4>>2]=k[e+4>>2];k[t+8>>2]=k[e+8>>2];k[d>>2]=k[y>>2];k[d+4>>2]=k[y+4>>2];k[d+8>>2]=k[y+8>>2];D=d+12|0;k[D>>2]=k[t>>2];k[D+4>>2]=k[t+4>>2];k[D+8>>2]=k[t+8>>2];k[d+24>>2]=o;i[d+28>>0]=1;i[d+29>>0]=0;k[F>>2]=(k[F>>2]|0)+32}else nc(E,c,e,w,x);a=a+44|0;if((a|0)==(q|0))break;b=k[F>>2]|0;d=b;n=k[s>>2]|0}c=k[E>>2]|0;b=k[F>>2]|0;oc(c,b);a=(c|0)==(b|0);if(!a){d=c;do{e=k[d+24>>2]|0;if(!(i[d+28>>0]|0))k[e+4>>2]=d;else k[e+8>>2]=d;d=d+32|0}while((d|0)!=(b|0))}}else{oc(0,0);b=0;c=0;a=1}k[S>>2]=b-c>>5;Nd(956,S);d:do if(a){d=b;a=b}else{a=c;while(1){if(!(k[a+8>>2]|0)){d=b;break d}a=a+32|0;if((a|0)==(b|0)){d=b;a=b;break}}}while(0);D=(a|0)==(d|0)?c:a;b=D+24|0;a=k[b>>2]|0;i[a+2>>0]=1;i[(k[a+4>>2]|0)+29>>0]=1;i[(k[a+8>>2]|0)+29>>0]=1;if(i[D+28>>0]|0){D=a+28|0;a=a+16|0;k[S>>2]=k[a>>2];k[S+4>>2]=k[a+4>>2];k[S+8>>2]=k[a+8>>2];k[a>>2]=k[D>>2];k[a+4>>2]=k[D+4>>2];k[a+8>>2]=k[D+8>>2];k[D>>2]=k[S>>2];k[D+4>>2]=k[S+4>>2];k[D+8>>2]=k[S+8>>2];a=k[b>>2]|0}pc(O,I,a,((k[W>>2]|0)-(k[Y>>2]|0)|0)==44);k[P>>2]=O;e=(k[87]|0)>-1;e:do if(!0){a=976;G=71}else{b=976;a=976;while(1){if(!(i[b>>0]|0))break e;b=b+1|0;a=b;if(!(a&3)){a=b;G=71;break}}}while(0);if((G|0)==71){while(1){b=k[a>>2]|0;if(!((b&-2139062144^-2139062144)&b+-16843009))a=a+4|0;else break}if((b&255)<<24>>24)do a=a+1|0;while((i[a>>0]|0)!=0)}d=a-976|0;a=k[72]|0;b=(a|0)==0;f:do if(e){do if(b){a=i[346]|0;i[346]=a+255|a;a=k[68]|0;if(!(a&8)){k[70]=0;k[69]=0;b=k[79]|0;k[75]=b;k[73]=b;a=b+(k[80]|0)|0;k[72]=a;break}else{k[68]=a|32;a=0;G=93;break f}}else b=k[73]|0;while(0);if((a-b|0)>>>0<d>>>0){a=Ta[k[308>>2]&7](272,976,d)|0;G=93;break}else{fe(b|0,976,d|0)|0;k[73]=(k[73]|0)+d;G=95;break}}else{do if(b){a=i[346]|0;i[346]=a+255|a;a=k[68]|0;if(!(a&8)){k[70]=0;k[69]=0;b=k[79]|0;k[75]=b;k[73]=b;a=b+(k[80]|0)|0;k[72]=a;break}else{k[68]=a|32;a=0;G=93;break f}}else b=k[73]|0;while(0);if((a-b|0)>>>0<d>>>0){a=Ta[k[308>>2]&7](272,976,d)|0;G=93;break}else{fe(b|0,976,d|0)|0;k[73]=(k[73]|0)+d;G=95;break}}while(0);if((G|0)==93)if(!((a|0)!=(d|0)?((a>>>0)/(d>>>0)|0|0)<1:0))G=95;do if((G|0)==95){d=i[347]|0;if(d<<24>>24!=10){a=k[73]|0;b=k[72]|0;if(a>>>0<b>>>0){k[73]=a+1;i[a>>0]=10;break}}else b=k[72]|0;i[S>>0]=10;do if(!b){d=j[173]|0;a=(d&65535)<<24>>24;i[346]=a+255|a;a=k[68]|0;if(!(a&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;b=e+(k[80]|0)|0;k[72]=b;a=(d&65535)>>>8&255;G=104;break}else{k[68]=a|32;break}}else{e=k[73]|0;a=d;G=104}while(0);do if((G|0)==104)if(e>>>0>=b>>>0|a<<24>>24==10){Ta[k[308>>2]&7](272,S,1)|0;break}else{k[73]=e+1;i[e>>0]=10;break}while(0)}while(0);b=((k[W>>2]|0)-(k[Y>>2]|0)|0)/44|0;if(b>>>0>1){w=O+4|0;x=O+8|0;y=Q+4|0;z=Q+8|0;A=Q+12|0;B=Q+16|0;C=Q+20|0;D=Q+24|0;a=k[E>>2]|0;v=k[F>>2]|0;u=1;do{k[R>>2]=u;k[R+4>>2]=b;Nd(978,R);t=a;q=k[O>>2]|0;s=k[w>>2]|0;d=v-t>>5;if(!d)b=a;else{e=t;b=a;do{o=(d|0)/2|0;c=e;n=k[c+(o<<5)>>2]|0;if((n|0)>=(q|0))if((n|0)==(q|0)?(k[c+(o<<5)+4>>2]|0)<(s|0):0)G=115;else d=o;else G=115;if((G|0)==115){G=0;e=c+(o+1<<5)|0;b=e;d=d+-1-o|0}}while((d|0)!=0)}k[J>>2]=t;k[M>>2]=0;k[N>>2]=2147483647;k[L>>2]=2147483647;p[K>>3]=17976931348623157.0e292;k[Q>>2]=P;k[y>>2]=O;k[z>>2]=M;k[A>>2]=K;k[B>>2]=N;k[C>>2]=L;k[D>>2]=J;g:do if((b|0)!=(v|0)){d=b;do{if(!(qc(Q,d)|0))break g;d=d+32|0}while((d|0)!=(v|0))}while(0);if((b|0)!=(a|0))do b=b+-32|0;while(!((b|0)==(a|0)|(qc(Q,b)|0)^1));if(!(k[x>>2]|0)){if(k[(k[J>>2]|0)+8>>2]|0){c=(k[87]|0)>-1;h:do if(!3){b=999;G=127}else{d=999;b=999;while(1){if(!(i[d>>0]|0))break h;d=d+1|0;b=d;if(!(b&3)){b=d;G=127;break}}}while(0);if((G|0)==127){while(1){d=k[b>>2]|0;if(!((d&-2139062144^-2139062144)&d+-16843009))b=b+4|0;else break}if((d&255)<<24>>24)do b=b+1|0;while((i[b>>0]|0)!=0)}e=b-999|0;b=k[72]|0;d=(b|0)==0;i:do if(c){do if(d){b=i[346]|0;i[346]=b+255|b;b=k[68]|0;if(!(b&8)){k[70]=0;k[69]=0;d=k[79]|0;k[75]=d;k[73]=d;b=d+(k[80]|0)|0;k[72]=b;break}else{k[68]=b|32;b=0;G=149;break i}}else d=k[73]|0;while(0);if((b-d|0)>>>0<e>>>0){b=Ta[k[308>>2]&7](272,999,e)|0;G=149;break}else{fe(d|0,999,e|0)|0;k[73]=(k[73]|0)+e;G=151;break}}else{do if(d){b=i[346]|0;i[346]=b+255|b;b=k[68]|0;if(!(b&8)){k[70]=0;k[69]=0;d=k[79]|0;k[75]=d;k[73]=d;b=d+(k[80]|0)|0;k[72]=b;break}else{k[68]=b|32;b=0;G=149;break i}}else d=k[73]|0;while(0);if((b-d|0)>>>0<e>>>0){b=Ta[k[308>>2]&7](272,999,e)|0;G=149;break}else{fe(d|0,999,e|0)|0;k[73]=(k[73]|0)+e;G=151;break}}while(0);do if((G|0)==149){G=0;if((b|0)==(e|0)){G=151;break}if(((b>>>0)/(e>>>0)|0|0)>=1)G=151}while(0);j:do if((G|0)==151){G=0;e=i[347]|0;do if(e<<24>>24==10)d=k[72]|0;else{b=k[73]|0;d=k[72]|0;if(b>>>0>=d>>>0)break;k[73]=b+1;i[b>>0]=10;break j}while(0);i[S>>0]=10;do if(!d){e=j[173]|0;b=(e&65535)<<24>>24;i[346]=b+255|b;b=k[68]|0;if(!(b&8)){k[70]=0;k[69]=0;c=k[79]|0;k[75]=c;k[73]=c;d=c+(k[80]|0)|0;k[72]=d;b=(e&65535)>>>8&255;G=160;break}else{k[68]=b|32;break}}else{c=k[73]|0;b=e;G=160}while(0);do if((G|0)==160){G=0;if(c>>>0>=d>>>0|b<<24>>24==10){Ta[k[308>>2]&7](272,S,1)|0;break}else{k[73]=c+1;i[c>>0]=10;break}}while(0)}while(0);if(k[x>>2]|0)G=165}}else G=165;k:do if((G|0)==165?(G=0,(k[(k[J>>2]|0)+8>>2]|0)==0):0){c=(k[87]|0)>-1;l:do if(!0){b=1004;G=169}else{b=1004;d=1004;while(1){if(!(i[b>>0]|0)){b=d;break l}b=b+1|0;d=b;if(!(d&3)){G=169;break}}}while(0);if((G|0)==169){G=0;while(1){d=k[b>>2]|0;if(!((d&-2139062144^-2139062144)&d+-16843009))b=b+4|0;else break}if((d&255)<<24>>24)do b=b+1|0;while((i[b>>0]|0)!=0)}e=b-1004|0;b=k[72]|0;d=(b|0)==0;m:do if(c){do if(d){b=i[346]|0;i[346]=b+255|b;b=k[68]|0;if(!(b&8)){k[70]=0;k[69]=0;d=k[79]|0;k[75]=d;k[73]=d;b=d+(k[80]|0)|0;k[72]=b;break}else{k[68]=b|32;b=0;G=191;break m}}else d=k[73]|0;while(0);if((b-d|0)>>>0<e>>>0){b=Ta[k[308>>2]&7](272,1004,e)|0;G=191;break}else{fe(d|0,1004,e|0)|0;k[73]=(k[73]|0)+e;break}}else{do if(d){b=i[346]|0;i[346]=b+255|b;b=k[68]|0;if(!(b&8)){k[70]=0;k[69]=0;d=k[79]|0;k[75]=d;k[73]=d;b=d+(k[80]|0)|0;k[72]=b;break}else{k[68]=b|32;b=0;G=191;break m}}else d=k[73]|0;while(0);if((b-d|0)>>>0<e>>>0){b=Ta[k[308>>2]&7](272,1004,e)|0;G=191;break}else{fe(d|0,1004,e|0)|0;k[73]=(k[73]|0)+e;break}}while(0);do if((G|0)==191){G=0;if((b|0)==(e|0))break;if(((b>>>0)/(e>>>0)|0|0)<1)break k}while(0);e=i[347]|0;do if(e<<24>>24==10)d=k[72]|0;else{b=k[73]|0;d=k[72]|0;if(b>>>0>=d>>>0)break;k[73]=b+1;i[b>>0]=10;break k}while(0);i[S>>0]=10;do if(!d){e=j[173]|0;b=(e&65535)<<24>>24;i[346]=b+255|b;b=k[68]|0;if(!(b&8)){k[70]=0;k[69]=0;c=k[79]|0;k[75]=c;k[73]=c;d=c+(k[80]|0)|0;k[72]=d;b=(e&65535)>>>8&255;G=202;break}else{k[68]=b|32;break}}else{c=k[73]|0;b=e;G=202}while(0);do if((G|0)==202){G=0;if(c>>>0>=d>>>0|b<<24>>24==10){Ta[k[308>>2]&7](272,S,1)|0;break}else{k[73]=c+1;i[c>>0]=10;break}}while(0)}while(0);E=k[J>>2]|0;b=E+24|0;d=k[b>>2]|0;i[d+2>>0]=1;i[(k[d+4>>2]|0)+29>>0]=1;i[(k[d+8>>2]|0)+29>>0]=1;if(i[E+28>>0]|0){E=d+28|0;d=d+16|0;k[S>>2]=k[d>>2];k[S+4>>2]=k[d+4>>2];k[S+8>>2]=k[d+8>>2];k[d>>2]=k[E>>2];k[d+4>>2]=k[E+4>>2];k[d+8>>2]=k[E+8>>2];k[E>>2]=k[S>>2];k[E+4>>2]=k[S+4>>2];k[E+8>>2]=k[S+8>>2];d=k[b>>2]|0}b=((k[W>>2]|0)-(k[Y>>2]|0)|0)/44|0;u=u+1|0;pc(H,I,d,(b|0)==(u|0));k[O>>2]=k[H>>2];k[O+4>>2]=k[H+4>>2];k[O+8>>2]=k[H+8>>2]}while(u>>>0<b>>>0)}else a=k[E>>2]|0;b=a;if(a){d=k[F>>2]|0;if((d|0)!=(a|0))k[F>>2]=d+(~((d+-32-b|0)>>>5)<<5);$d(a)}e=(k[87]|0)>-1;n:do if(!0){a=1012;G=216}else{b=1012;a=1012;while(1){if(!(i[b>>0]|0))break n;b=b+1|0;a=b;if(!(a&3)){a=b;G=216;break}}}while(0);if((G|0)==216){while(1){b=k[a>>2]|0;if(!((b&-2139062144^-2139062144)&b+-16843009))a=a+4|0;else break}if((b&255)<<24>>24)do a=a+1|0;while((i[a>>0]|0)!=0)}d=a-1012|0;a=k[72]|0;b=(a|0)==0;o:do if(e){do if(b){a=i[346]|0;i[346]=a+255|a;a=k[68]|0;if(!(a&8)){k[70]=0;k[69]=0;b=k[79]|0;k[75]=b;k[73]=b;a=b+(k[80]|0)|0;k[72]=a;break}else{k[68]=a|32;a=0;G=238;break o}}else b=k[73]|0;while(0);if((a-b|0)>>>0<d>>>0){a=Ta[k[308>>2]&7](272,1012,d)|0;G=238;break}else{fe(b|0,1012,d|0)|0;k[73]=(k[73]|0)+d;G=240;break}}else{do if(b){a=i[346]|0;i[346]=a+255|a;a=k[68]|0;if(!(a&8)){k[70]=0;k[69]=0;b=k[79]|0;k[75]=b;k[73]=b;a=b+(k[80]|0)|0;k[72]=a;break}else{k[68]=a|32;a=0;G=238;break o}}else b=k[73]|0;while(0);if((a-b|0)>>>0<d>>>0){a=Ta[k[308>>2]&7](272,1012,d)|0;G=238;break}else{fe(b|0,1012,d|0)|0;k[73]=(k[73]|0)+d;G=240;break}}while(0);if((G|0)==238)if(!((a|0)!=(d|0)?((a>>>0)/(d>>>0)|0|0)<1:0))G=240;do if((G|0)==240){d=i[347]|0;if(d<<24>>24!=10){a=k[73]|0;b=k[72]|0;if(a>>>0<b>>>0){k[73]=a+1;i[a>>0]=10;break}}else b=k[72]|0;i[S>>0]=10;do if(!b){d=j[173]|0;a=(d&65535)<<24>>24;i[346]=a+255|a;a=k[68]|0;if(!(a&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;b=e+(k[80]|0)|0;k[72]=b;a=(d&65535)>>>8&255;G=249;break}else{k[68]=a|32;break}}else{e=k[73]|0;a=d;G=249}while(0);do if((G|0)==249)if(e>>>0>=b>>>0|a<<24>>24==10){Ta[k[308>>2]&7](272,S,1)|0;break}else{k[73]=e+1;i[e>>0]=10;break}while(0)}while(0);jb(h,l,m,V);a=k[V>>2]|0;if(a){b=k[T>>2]|0;if((b|0)!=(a|0)){do{d=b+-12|0;k[T>>2]=d;e=k[d>>2]|0;c=e;if(!e)b=d;else{b=b+-8|0;d=k[b>>2]|0;if((d|0)!=(e|0))k[b>>2]=d+(~(((d+-12-c|0)>>>0)/12|0)*12|0);$d(e);b=k[T>>2]|0}}while((b|0)!=(a|0));a=k[V>>2]|0}$d(a)}a=k[X>>2]|0;if(a){b=k[U>>2]|0;if((b|0)!=(a|0))k[U>>2]=b+(~(((b+-44-a|0)>>>0)/44|0)*44|0);$d(a)}}else{k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;jb(h,l,m,a)}a=k[Y>>2]|0;if(a){b=k[W>>2]|0;if((b|0)!=(a|0))k[W>>2]=b+(~(((b+-44-a|0)>>>0)/44|0)*44|0);$d(a)}o=k[Z>>2]|0;if(!o){r=_;return}n=Z+4|0;a=k[n>>2]|0;if((a|0)!=(o|0)){do{b=a;a=a+-12|0;e=k[a>>2]|0;c=e;if(e){b=b+-8|0;d=k[b>>2]|0;if((d|0)!=(e|0))k[b>>2]=d+(~((d+-8-c|0)>>>3)<<3);$d(e)}}while((a|0)!=(o|0));k[n>>2]=o}$d(o);r=_;return}\\n\\n// EMSCRIPTEN_END_FUNCS\\nvar Ta=[ze,yd,Sd,Qd,Rd,ze,ze,ze];var Ua=[Ae,Ed,Dd,Ae];var Va=[Be,qd,rd,td,wd,ud,vd,xd,Wd,Be,Be,Be,Be,Be,Be,Be];var Wa=[Ce,sd,Pd,Ce];var Xa=[De];var Ya=[Ee,Gd,Fd,Ee];var Za=[Fe,nb,pb,zc,Dc,Fe,Fe,Fe];var _a=[Ge,zd,Ad,Ge];return{___cxa_can_catch:Hd,_free:$d,___cxa_is_pointer_type:Id,_i64Add:ge,_memmove:he,_vCarve:lc,_i64Subtract:be,_memset:ce,_malloc:_d,_separateTabs:lb,_memcpy:fe,_bitshift64Lshr:de,_bitshift64Shl:ee,runPostSets:ae,_emscripten_replace_memory:Sa,stackAlloc:$a,stackSave:ab,stackRestore:bb,establishStackSpace:cb,setThrew:db,setTempRet0:gb,getTempRet0:hb,dynCall_iiii:re,dynCall_viiiii:se,dynCall_vi:te,dynCall_ii:ue,dynCall_v:ve,dynCall_viiiiii:we,dynCall_iii:xe,dynCall_viiii:ye}})\\n\\n\\n// EMSCRIPTEN_END_ASM\\n(Module.asmGlobalArg,Module.asmLibraryArg,buffer);var ___cxa_can_catch=Module[\\\"___cxa_can_catch\\\"]=asm[\\\"___cxa_can_catch\\\"];var _free=Module[\\\"_free\\\"]=asm[\\\"_free\\\"];var runPostSets=Module[\\\"runPostSets\\\"]=asm[\\\"runPostSets\\\"];var ___cxa_is_pointer_type=Module[\\\"___cxa_is_pointer_type\\\"]=asm[\\\"___cxa_is_pointer_type\\\"];var _i64Add=Module[\\\"_i64Add\\\"]=asm[\\\"_i64Add\\\"];var _memmove=Module[\\\"_memmove\\\"]=asm[\\\"_memmove\\\"];var _vCarve=Module[\\\"_vCarve\\\"]=asm[\\\"_vCarve\\\"];var _i64Subtract=Module[\\\"_i64Subtract\\\"]=asm[\\\"_i64Subtract\\\"];var _memset=Module[\\\"_memset\\\"]=asm[\\\"_memset\\\"];var _malloc=Module[\\\"_malloc\\\"]=asm[\\\"_malloc\\\"];var _separateTabs=Module[\\\"_separateTabs\\\"]=asm[\\\"_separateTabs\\\"];var _memcpy=Module[\\\"_memcpy\\\"]=asm[\\\"_memcpy\\\"];var _emscripten_replace_memory=Module[\\\"_emscripten_replace_memory\\\"]=asm[\\\"_emscripten_replace_memory\\\"];var _bitshift64Lshr=Module[\\\"_bitshift64Lshr\\\"]=asm[\\\"_bitshift64Lshr\\\"];var _bitshift64Shl=Module[\\\"_bitshift64Shl\\\"]=asm[\\\"_bitshift64Shl\\\"];var dynCall_iiii=Module[\\\"dynCall_iiii\\\"]=asm[\\\"dynCall_iiii\\\"];var dynCall_viiiii=Module[\\\"dynCall_viiiii\\\"]=asm[\\\"dynCall_viiiii\\\"];var dynCall_vi=Module[\\\"dynCall_vi\\\"]=asm[\\\"dynCall_vi\\\"];var dynCall_ii=Module[\\\"dynCall_ii\\\"]=asm[\\\"dynCall_ii\\\"];var dynCall_v=Module[\\\"dynCall_v\\\"]=asm[\\\"dynCall_v\\\"];var dynCall_viiiiii=Module[\\\"dynCall_viiiiii\\\"]=asm[\\\"dynCall_viiiiii\\\"];var dynCall_iii=Module[\\\"dynCall_iii\\\"]=asm[\\\"dynCall_iii\\\"];var dynCall_viiii=Module[\\\"dynCall_viiii\\\"]=asm[\\\"dynCall_viiii\\\"];Runtime.stackAlloc=asm[\\\"stackAlloc\\\"];Runtime.stackSave=asm[\\\"stackSave\\\"];Runtime.stackRestore=asm[\\\"stackRestore\\\"];Runtime.establishStackSpace=asm[\\\"establishStackSpace\\\"];Runtime.setTempRet0=asm[\\\"setTempRet0\\\"];Runtime.getTempRet0=asm[\\\"getTempRet0\\\"];function ExitStatus(status){this.name=\\\"ExitStatus\\\";this.message=\\\"Program terminated with exit(\\\"+status+\\\")\\\";this.status=status}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;var initialStackTop;var preloadStartTime=null;var calledMain=false;dependenciesFulfilled=function runCaller(){if(!Module[\\\"calledRun\\\"])run();if(!Module[\\\"calledRun\\\"])dependenciesFulfilled=runCaller};Module[\\\"callMain\\\"]=Module.callMain=function callMain(args){assert(runDependencies==0,\\\"cannot call main when async dependencies remain! (listen on __ATMAIN__)\\\");assert(__ATPRERUN__.length==0,\\\"cannot call main when preRun functions remain to be called\\\");args=args||[];ensureInitRuntime();var argc=args.length+1;function pad(){for(var i=0;i<4-1;i++){argv.push(0)}}var argv=[allocate(intArrayFromString(Module[\\\"thisProgram\\\"]),\\\"i8\\\",ALLOC_NORMAL)];pad();for(var i=0;i<argc-1;i=i+1){argv.push(allocate(intArrayFromString(args[i]),\\\"i8\\\",ALLOC_NORMAL));pad()}argv.push(0);argv=allocate(argv,\\\"i32\\\",ALLOC_NORMAL);try{var ret=Module[\\\"_main\\\"](argc,argv,0);exit(ret,true)}catch(e){if(e instanceof ExitStatus){return}else if(e==\\\"SimulateInfiniteLoop\\\"){Module[\\\"noExitRuntime\\\"]=true;return}else{if(e&&typeof e===\\\"object\\\"&&e.stack)Module.printErr(\\\"exception thrown: \\\"+[e,e.stack]);throw e}}finally{calledMain=true}};function run(args){args=args||Module[\\\"arguments\\\"];if(preloadStartTime===null)preloadStartTime=Date.now();if(runDependencies>0){return}preRun();if(runDependencies>0)return;if(Module[\\\"calledRun\\\"])return;function doRun(){if(Module[\\\"calledRun\\\"])return;Module[\\\"calledRun\\\"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(Module[\\\"onRuntimeInitialized\\\"])Module[\\\"onRuntimeInitialized\\\"]();if(Module[\\\"_main\\\"]&&shouldRunNow)Module[\\\"callMain\\\"](args);postRun()}if(Module[\\\"setStatus\\\"]){Module[\\\"setStatus\\\"](\\\"Running...\\\");setTimeout((function(){setTimeout((function(){Module[\\\"setStatus\\\"](\\\"\\\")}),1);doRun()}),1)}else{doRun()}}Module[\\\"run\\\"]=Module.run=run;function exit(status,implicit){if(implicit&&Module[\\\"noExitRuntime\\\"]){return}if(Module[\\\"noExitRuntime\\\"]){}else{ABORT=true;EXITSTATUS=status;STACKTOP=initialStackTop;exitRuntime();if(Module[\\\"onExit\\\"])Module[\\\"onExit\\\"](status)}if(ENVIRONMENT_IS_NODE){process[\\\"stdout\\\"][\\\"once\\\"](\\\"drain\\\",(function(){process[\\\"exit\\\"](status)}));console.log(\\\" \\\");setTimeout((function(){process[\\\"exit\\\"](status)}),500)}else if(ENVIRONMENT_IS_SHELL&&typeof quit===\\\"function\\\"){quit(status)}throw new ExitStatus(status)}Module[\\\"exit\\\"]=Module.exit=exit;var abortDecorators=[];function abort(what){if(what!==undefined){Module.print(what);Module.printErr(what);what=JSON.stringify(what)}else{what=\\\"\\\"}ABORT=true;EXITSTATUS=1;var extra=\\\"\\\\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.\\\";var output=\\\"abort(\\\"+what+\\\") at \\\"+stackTrace()+extra;if(abortDecorators){abortDecorators.forEach((function(decorator){output=decorator(output,what)}))}throw output}Module[\\\"abort\\\"]=Module.abort=abort;if(Module[\\\"preInit\\\"]){if(typeof Module[\\\"preInit\\\"]==\\\"function\\\")Module[\\\"preInit\\\"]=[Module[\\\"preInit\\\"]];while(Module[\\\"preInit\\\"].length>0){Module[\\\"preInit\\\"].pop()()}}var shouldRunNow=true;if(Module[\\\"noInitialRun\\\"]){shouldRunNow=false}Module[\\\"noExitRuntime\\\"]=true;run()\\n\\n\\n\\n\\n\"\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\tmodule.exports = function(src) {\r\n\t\tif (typeof execScript !== \"undefined\")\r\n\t\t\texecScript(src);\r\n\t\telse\r\n\t\t\teval.call(null, src);\r\n\t}\r\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(26)(__webpack_require__(25))\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\twindow.eve = __webpack_require__(13)\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tvar mina = (function (eve) {\n\t    var animations = {},\n\t    requestAnimFrame = window.requestAnimationFrame       ||\n\t                       window.webkitRequestAnimationFrame ||\n\t                       window.mozRequestAnimationFrame    ||\n\t                       window.oRequestAnimationFrame      ||\n\t                       window.msRequestAnimationFrame     ||\n\t                       function (callback) {\n\t                           setTimeout(callback, 16);\n\t                       },\n\t    isArray = Array.isArray || function (a) {\n\t        return a instanceof Array ||\n\t            Object.prototype.toString.call(a) == \"[object Array]\";\n\t    },\n\t    idgen = 0,\n\t    idprefix = \"M\" + (+new Date).toString(36),\n\t    ID = function () {\n\t        return idprefix + (idgen++).toString(36);\n\t    },\n\t    diff = function (a, b, A, B) {\n\t        if (isArray(a)) {\n\t            res = [];\n\t            for (var i = 0, ii = a.length; i < ii; i++) {\n\t                res[i] = diff(a[i], b, A[i], B);\n\t            }\n\t            return res;\n\t        }\n\t        var dif = (A - a) / (B - b);\n\t        return function (bb) {\n\t            return a + dif * (bb - b);\n\t        };\n\t    },\n\t    timer = Date.now || function () {\n\t        return +new Date;\n\t    },\n\t    sta = function (val) {\n\t        var a = this;\n\t        if (val == null) {\n\t            return a.s;\n\t        }\n\t        var ds = a.s - val;\n\t        a.b += a.dur * ds;\n\t        a.B += a.dur * ds;\n\t        a.s = val;\n\t    },\n\t    speed = function (val) {\n\t        var a = this;\n\t        if (val == null) {\n\t            return a.spd;\n\t        }\n\t        a.spd = val;\n\t    },\n\t    duration = function (val) {\n\t        var a = this;\n\t        if (val == null) {\n\t            return a.dur;\n\t        }\n\t        a.s = a.s * val / a.dur;\n\t        a.dur = val;\n\t    },\n\t    stopit = function () {\n\t        var a = this;\n\t        delete animations[a.id];\n\t        a.update();\n\t        eve(\"mina.stop.\" + a.id, a);\n\t    },\n\t    pause = function () {\n\t        var a = this;\n\t        if (a.pdif) {\n\t            return;\n\t        }\n\t        delete animations[a.id];\n\t        a.update();\n\t        a.pdif = a.get() - a.b;\n\t    },\n\t    resume = function () {\n\t        var a = this;\n\t        if (!a.pdif) {\n\t            return;\n\t        }\n\t        a.b = a.get() - a.pdif;\n\t        delete a.pdif;\n\t        animations[a.id] = a;\n\t    },\n\t    update = function () {\n\t        var a = this,\n\t            res;\n\t        if (isArray(a.start)) {\n\t            res = [];\n\t            for (var j = 0, jj = a.start.length; j < jj; j++) {\n\t                res[j] = +a.start[j] +\n\t                    (a.end[j] - a.start[j]) * a.easing(a.s);\n\t            }\n\t        } else {\n\t            res = +a.start + (a.end - a.start) * a.easing(a.s);\n\t        }\n\t        a.set(res);\n\t    },\n\t    frame = function () {\n\t        var len = 0;\n\t        for (var i in animations) if (animations.hasOwnProperty(i)) {\n\t            var a = animations[i],\n\t                b = a.get(),\n\t                res;\n\t            len++;\n\t            a.s = (b - a.b) / (a.dur / a.spd);\n\t            if (a.s >= 1) {\n\t                delete animations[i];\n\t                a.s = 1;\n\t                len--;\n\t                (function (a) {\n\t                    setTimeout(function () {\n\t                        eve(\"mina.finish.\" + a.id, a);\n\t                    });\n\t                }(a));\n\t            }\n\t            a.update();\n\t        }\n\t        len && requestAnimFrame(frame);\n\t    },\n\t    /*\\\n\t     * mina\n\t     [ method ]\n\t     **\n\t     * Generic animation of numbers\n\t     **\n\t     - a (number) start _slave_ number\n\t     - A (number) end _slave_ number\n\t     - b (number) start _master_ number (start time in general case)\n\t     - B (number) end _master_ number (end time in gereal case)\n\t     - get (function) getter of _master_ number (see @mina.time)\n\t     - set (function) setter of _slave_ number\n\t     - easing (function) #optional easing function, default is @mina.linear\n\t     = (object) animation descriptor\n\t     o {\n\t     o         id (string) animation id,\n\t     o         start (number) start _slave_ number,\n\t     o         end (number) end _slave_ number,\n\t     o         b (number) start _master_ number,\n\t     o         s (number) animation status (0..1),\n\t     o         dur (number) animation duration,\n\t     o         spd (number) animation speed,\n\t     o         get (function) getter of _master_ number (see @mina.time),\n\t     o         set (function) setter of _slave_ number,\n\t     o         easing (function) easing function, default is @mina.linear,\n\t     o         status (function) status getter/setter,\n\t     o         speed (function) speed getter/setter,\n\t     o         duration (function) duration getter/setter,\n\t     o         stop (function) animation stopper\n\t     o         pause (function) pauses the animation\n\t     o         resume (function) resumes the animation\n\t     o         update (function) calles setter with the right value of the animation\n\t     o }\n\t    \\*/\n\t    mina = function (a, A, b, B, get, set, easing) {\n\t        var anim = {\n\t            id: ID(),\n\t            start: a,\n\t            end: A,\n\t            b: b,\n\t            s: 0,\n\t            dur: B - b,\n\t            spd: 1,\n\t            get: get,\n\t            set: set,\n\t            easing: easing || mina.linear,\n\t            status: sta,\n\t            speed: speed,\n\t            duration: duration,\n\t            stop: stopit,\n\t            pause: pause,\n\t            resume: resume,\n\t            update: update\n\t        };\n\t        animations[anim.id] = anim;\n\t        var len = 0, i;\n\t        for (i in animations) if (animations.hasOwnProperty(i)) {\n\t            len++;\n\t            if (len == 2) {\n\t                break;\n\t            }\n\t        }\n\t        len == 1 && requestAnimFrame(frame);\n\t        return anim;\n\t    };\n\t    /*\\\n\t     * mina.time\n\t     [ method ]\n\t     **\n\t     * Returns the current time. Equivalent to:\n\t     | function () {\n\t     |     return (new Date).getTime();\n\t     | }\n\t    \\*/\n\t    mina.time = timer;\n\t    /*\\\n\t     * mina.getById\n\t     [ method ]\n\t     **\n\t     * Returns an animation by its id\n\t     - id (string) animation's id\n\t     = (object) See @mina\n\t    \\*/\n\t    mina.getById = function (id) {\n\t        return animations[id] || null;\n\t    };\n\t\n\t    /*\\\n\t     * mina.linear\n\t     [ method ]\n\t     **\n\t     * Default linear easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.linear = function (n) {\n\t        return n;\n\t    };\n\t    /*\\\n\t     * mina.easeout\n\t     [ method ]\n\t     **\n\t     * Easeout easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.easeout = function (n) {\n\t        return Math.pow(n, 1.7);\n\t    };\n\t    /*\\\n\t     * mina.easein\n\t     [ method ]\n\t     **\n\t     * Easein easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.easein = function (n) {\n\t        return Math.pow(n, .48);\n\t    };\n\t    /*\\\n\t     * mina.easeinout\n\t     [ method ]\n\t     **\n\t     * Easeinout easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.easeinout = function (n) {\n\t        if (n == 1) {\n\t            return 1;\n\t        }\n\t        if (n == 0) {\n\t            return 0;\n\t        }\n\t        var q = .48 - n / 1.04,\n\t            Q = Math.sqrt(.1734 + q * q),\n\t            x = Q - q,\n\t            X = Math.pow(Math.abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n\t            y = -Q - q,\n\t            Y = Math.pow(Math.abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n\t            t = X + Y + .5;\n\t        return (1 - t) * 3 * t * t + t * t * t;\n\t    };\n\t    /*\\\n\t     * mina.backin\n\t     [ method ]\n\t     **\n\t     * Backin easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.backin = function (n) {\n\t        if (n == 1) {\n\t            return 1;\n\t        }\n\t        var s = 1.70158;\n\t        return n * n * ((s + 1) * n - s);\n\t    };\n\t    /*\\\n\t     * mina.backout\n\t     [ method ]\n\t     **\n\t     * Backout easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.backout = function (n) {\n\t        if (n == 0) {\n\t            return 0;\n\t        }\n\t        n = n - 1;\n\t        var s = 1.70158;\n\t        return n * n * ((s + 1) * n + s) + 1;\n\t    };\n\t    /*\\\n\t     * mina.elastic\n\t     [ method ]\n\t     **\n\t     * Elastic easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.elastic = function (n) {\n\t        if (n == !!n) {\n\t            return n;\n\t        }\n\t        return Math.pow(2, -10 * n) * Math.sin((n - .075) *\n\t            (2 * Math.PI) / .3) + 1;\n\t    };\n\t    /*\\\n\t     * mina.bounce\n\t     [ method ]\n\t     **\n\t     * Bounce easing\n\t     - n (number) input 0..1\n\t     = (number) output 0..1\n\t    \\*/\n\t    mina.bounce = function (n) {\n\t        var s = 7.5625,\n\t            p = 2.75,\n\t            l;\n\t        if (n < (1 / p)) {\n\t            l = s * n * n;\n\t        } else {\n\t            if (n < (2 / p)) {\n\t                n -= (1.5 / p);\n\t                l = s * n * n + .75;\n\t            } else {\n\t                if (n < (2.5 / p)) {\n\t                    n -= (2.25 / p);\n\t                    l = s * n * n + .9375;\n\t                } else {\n\t                    n -= (2.625 / p);\n\t                    l = s * n * n + .984375;\n\t                }\n\t            }\n\t        }\n\t        return l;\n\t    };\n\t    window.mina = mina;\n\t    return mina;\n\t})(typeof eve == \"undefined\" ? function () {} : eve);\n\t// Copyright (c) 2013 - 2015 Adobe Systems Incorporated. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\t\n\tvar Snap = (function(root) {\n\tSnap.version = \"0.4.0\";\n\t/*\\\n\t * Snap\n\t [ method ]\n\t **\n\t * Creates a drawing surface or wraps existing SVG element.\n\t **\n\t - width (number|string) width of surface\n\t - height (number|string) height of surface\n\t * or\n\t - DOM (SVGElement) element to be wrapped into Snap structure\n\t * or\n\t - array (array) array of elements (will return set of elements)\n\t * or\n\t - query (string) CSS query selector\n\t = (object) @Element\n\t\\*/\n\tfunction Snap(w, h) {\n\t    if (w) {\n\t        if (w.nodeType) {\n\t            return wrap(w);\n\t        }\n\t        if (is(w, \"array\") && Snap.set) {\n\t            return Snap.set.apply(Snap, w);\n\t        }\n\t        if (w instanceof Element) {\n\t            return w;\n\t        }\n\t        if (h == null) {\n\t            w = glob.doc.querySelector(String(w));\n\t            return wrap(w);\n\t        }\n\t    }\n\t    w = w == null ? \"100%\" : w;\n\t    h = h == null ? \"100%\" : h;\n\t    return new Paper(w, h);\n\t}\n\tSnap.toString = function () {\n\t    return \"Snap v\" + this.version;\n\t};\n\tSnap._ = {};\n\tvar glob = {\n\t    win: root.window,\n\t    doc: root.window.document\n\t};\n\tSnap._.glob = glob;\n\tvar has = \"hasOwnProperty\",\n\t    Str = String,\n\t    toFloat = parseFloat,\n\t    toInt = parseInt,\n\t    math = Math,\n\t    mmax = math.max,\n\t    mmin = math.min,\n\t    abs = math.abs,\n\t    pow = math.pow,\n\t    PI = math.PI,\n\t    round = math.round,\n\t    E = \"\",\n\t    S = \" \",\n\t    objectToString = Object.prototype.toString,\n\t    ISURL = /^url\\(['\"]?([^\\)]+?)['\"]?\\)$/i,\n\t    colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\))\\s*$/i,\n\t    bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n\t    reURLValue = /^url\\(#?([^)]+)\\)$/,\n\t    separator = Snap._.separator = /[,\\s]+/,\n\t    whitespace = /[\\s]/g,\n\t    commaSpaces = /[\\s]*,[\\s]*/,\n\t    hsrg = {hs: 1, rg: 1},\n\t    pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n\t    tCommand = /([rstm])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n\t    pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\\\d+)?)[\\s]*,?[\\s]*/ig,\n\t    idgen = 0,\n\t    idprefix = \"S\" + (+new Date).toString(36),\n\t    ID = function (el) {\n\t        return (el && el.type ? el.type : E) + idprefix + (idgen++).toString(36);\n\t    },\n\t    xlink = \"http://www.w3.org/1999/xlink\",\n\t    xmlns = \"http://www.w3.org/2000/svg\",\n\t    hub = {},\n\t    URL = Snap.url = function (url) {\n\t        return \"url('#\" + url + \"')\";\n\t    };\n\t\n\tfunction $(el, attr) {\n\t    if (attr) {\n\t        if (el == \"#text\") {\n\t            el = glob.doc.createTextNode(attr.text || attr[\"#text\"] || \"\");\n\t        }\n\t        if (el == \"#comment\") {\n\t            el = glob.doc.createComment(attr.text || attr[\"#text\"] || \"\");\n\t        }\n\t        if (typeof el == \"string\") {\n\t            el = $(el);\n\t        }\n\t        if (typeof attr == \"string\") {\n\t            if (el.nodeType == 1) {\n\t                if (attr.substring(0, 6) == \"xlink:\") {\n\t                    return el.getAttributeNS(xlink, attr.substring(6));\n\t                }\n\t                if (attr.substring(0, 4) == \"xml:\") {\n\t                    return el.getAttributeNS(xmlns, attr.substring(4));\n\t                }\n\t                return el.getAttribute(attr);\n\t            } else if (attr == \"text\") {\n\t                return el.nodeValue;\n\t            } else {\n\t                return null;\n\t            }\n\t        }\n\t        if (el.nodeType == 1) {\n\t            for (var key in attr) if (attr[has](key)) {\n\t                var val = Str(attr[key]);\n\t                if (val) {\n\t                    if (key.substring(0, 6) == \"xlink:\") {\n\t                        el.setAttributeNS(xlink, key.substring(6), val);\n\t                    } else if (key.substring(0, 4) == \"xml:\") {\n\t                        el.setAttributeNS(xmlns, key.substring(4), val);\n\t                    } else {\n\t                        el.setAttribute(key, val);\n\t                    }\n\t                } else {\n\t                    el.removeAttribute(key);\n\t                }\n\t            }\n\t        } else if (\"text\" in attr) {\n\t            el.nodeValue = attr.text;\n\t        }\n\t    } else {\n\t        el = glob.doc.createElementNS(xmlns, el);\n\t    }\n\t    return el;\n\t}\n\tSnap._.$ = $;\n\tSnap._.id = ID;\n\tfunction getAttrs(el) {\n\t    var attrs = el.attributes,\n\t        name,\n\t        out = {};\n\t    for (var i = 0; i < attrs.length; i++) {\n\t        if (attrs[i].namespaceURI == xlink) {\n\t            name = \"xlink:\";\n\t        } else {\n\t            name = \"\";\n\t        }\n\t        name += attrs[i].name;\n\t        out[name] = attrs[i].textContent;\n\t    }\n\t    return out;\n\t}\n\tfunction is(o, type) {\n\t    type = Str.prototype.toLowerCase.call(type);\n\t    if (type == \"finite\") {\n\t        return isFinite(o);\n\t    }\n\t    if (type == \"array\" &&\n\t        (o instanceof Array || Array.isArray && Array.isArray(o))) {\n\t        return true;\n\t    }\n\t    return  (type == \"null\" && o === null) ||\n\t            (type == typeof o && o !== null) ||\n\t            (type == \"object\" && o === Object(o)) ||\n\t            objectToString.call(o).slice(8, -1).toLowerCase() == type;\n\t}\n\t/*\\\n\t * Snap.format\n\t [ method ]\n\t **\n\t * Replaces construction of type `{<name>}` to the corresponding argument\n\t **\n\t - token (string) string to format\n\t - json (object) object which properties are used as a replacement\n\t = (string) formatted string\n\t > Usage\n\t | // this draws a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n\t | paper.path(Snap.format(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n\t |     x: 10,\n\t |     y: 20,\n\t |     dim: {\n\t |         width: 40,\n\t |         height: 50,\n\t |         \"negative width\": -40\n\t |     }\n\t | }));\n\t\\*/\n\tSnap.format = (function () {\n\t    var tokenRegex = /\\{([^\\}]+)\\}/g,\n\t        objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n\t        replacer = function (all, key, obj) {\n\t            var res = obj;\n\t            key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n\t                name = name || quotedName;\n\t                if (res) {\n\t                    if (name in res) {\n\t                        res = res[name];\n\t                    }\n\t                    typeof res == \"function\" && isFunc && (res = res());\n\t                }\n\t            });\n\t            res = (res == null || res == obj ? all : res) + \"\";\n\t            return res;\n\t        };\n\t    return function (str, obj) {\n\t        return Str(str).replace(tokenRegex, function (all, key) {\n\t            return replacer(all, key, obj);\n\t        });\n\t    };\n\t})();\n\tfunction clone(obj) {\n\t    if (typeof obj == \"function\" || Object(obj) !== obj) {\n\t        return obj;\n\t    }\n\t    var res = new obj.constructor;\n\t    for (var key in obj) if (obj[has](key)) {\n\t        res[key] = clone(obj[key]);\n\t    }\n\t    return res;\n\t}\n\tSnap._.clone = clone;\n\tfunction repush(array, item) {\n\t    for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n\t        return array.push(array.splice(i, 1)[0]);\n\t    }\n\t}\n\tfunction cacher(f, scope, postprocessor) {\n\t    function newf() {\n\t        var arg = Array.prototype.slice.call(arguments, 0),\n\t            args = arg.join(\"\\u2400\"),\n\t            cache = newf.cache = newf.cache || {},\n\t            count = newf.count = newf.count || [];\n\t        if (cache[has](args)) {\n\t            repush(count, args);\n\t            return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t        }\n\t        count.length >= 1e3 && delete cache[count.shift()];\n\t        count.push(args);\n\t        cache[args] = f.apply(scope, arg);\n\t        return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t    }\n\t    return newf;\n\t}\n\tSnap._.cacher = cacher;\n\tfunction angle(x1, y1, x2, y2, x3, y3) {\n\t    if (x3 == null) {\n\t        var x = x1 - x2,\n\t            y = y1 - y2;\n\t        if (!x && !y) {\n\t            return 0;\n\t        }\n\t        return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n\t    } else {\n\t        return angle(x1, y1, x3, y3) - angle(x2, y2, x3, y3);\n\t    }\n\t}\n\tfunction rad(deg) {\n\t    return deg % 360 * PI / 180;\n\t}\n\tfunction deg(rad) {\n\t    return rad * 180 / PI % 360;\n\t}\n\tfunction x_y() {\n\t    return this.x + S + this.y;\n\t}\n\tfunction x_y_w_h() {\n\t    return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n\t}\n\t\n\t/*\\\n\t * Snap.rad\n\t [ method ]\n\t **\n\t * Transform angle to radians\n\t - deg (number) angle in degrees\n\t = (number) angle in radians\n\t\\*/\n\tSnap.rad = rad;\n\t/*\\\n\t * Snap.deg\n\t [ method ]\n\t **\n\t * Transform angle to degrees\n\t - rad (number) angle in radians\n\t = (number) angle in degrees\n\t\\*/\n\tSnap.deg = deg;\n\t/*\\\n\t * Snap.sin\n\t [ method ]\n\t **\n\t * Equivalent to `Math.sin()` only works with degrees, not radians.\n\t - angle (number) angle in degrees\n\t = (number) sin\n\t\\*/\n\tSnap.sin = function (angle) {\n\t    return math.sin(Snap.rad(angle));\n\t};\n\t/*\\\n\t * Snap.tan\n\t [ method ]\n\t **\n\t * Equivalent to `Math.tan()` only works with degrees, not radians.\n\t - angle (number) angle in degrees\n\t = (number) tan\n\t\\*/\n\tSnap.tan = function (angle) {\n\t    return math.tan(Snap.rad(angle));\n\t};\n\t/*\\\n\t * Snap.cos\n\t [ method ]\n\t **\n\t * Equivalent to `Math.cos()` only works with degrees, not radians.\n\t - angle (number) angle in degrees\n\t = (number) cos\n\t\\*/\n\tSnap.cos = function (angle) {\n\t    return math.cos(Snap.rad(angle));\n\t};\n\t/*\\\n\t * Snap.asin\n\t [ method ]\n\t **\n\t * Equivalent to `Math.asin()` only works with degrees, not radians.\n\t - num (number) value\n\t = (number) asin in degrees\n\t\\*/\n\tSnap.asin = function (num) {\n\t    return Snap.deg(math.asin(num));\n\t};\n\t/*\\\n\t * Snap.acos\n\t [ method ]\n\t **\n\t * Equivalent to `Math.acos()` only works with degrees, not radians.\n\t - num (number) value\n\t = (number) acos in degrees\n\t\\*/\n\tSnap.acos = function (num) {\n\t    return Snap.deg(math.acos(num));\n\t};\n\t/*\\\n\t * Snap.atan\n\t [ method ]\n\t **\n\t * Equivalent to `Math.atan()` only works with degrees, not radians.\n\t - num (number) value\n\t = (number) atan in degrees\n\t\\*/\n\tSnap.atan = function (num) {\n\t    return Snap.deg(math.atan(num));\n\t};\n\t/*\\\n\t * Snap.atan2\n\t [ method ]\n\t **\n\t * Equivalent to `Math.atan2()` only works with degrees, not radians.\n\t - num (number) value\n\t = (number) atan2 in degrees\n\t\\*/\n\tSnap.atan2 = function (num) {\n\t    return Snap.deg(math.atan2(num));\n\t};\n\t/*\\\n\t * Snap.angle\n\t [ method ]\n\t **\n\t * Returns an angle between two or three points\n\t > Parameters\n\t - x1 (number) x coord of first point\n\t - y1 (number) y coord of first point\n\t - x2 (number) x coord of second point\n\t - y2 (number) y coord of second point\n\t - x3 (number) #optional x coord of third point\n\t - y3 (number) #optional y coord of third point\n\t = (number) angle in degrees\n\t\\*/\n\tSnap.angle = angle;\n\t/*\\\n\t * Snap.len\n\t [ method ]\n\t **\n\t * Returns distance between two points\n\t > Parameters\n\t - x1 (number) x coord of first point\n\t - y1 (number) y coord of first point\n\t - x2 (number) x coord of second point\n\t - y2 (number) y coord of second point\n\t = (number) distance\n\t\\*/\n\tSnap.len = function (x1, y1, x2, y2) {\n\t    return Math.sqrt(Snap.len2(x1, y1, x2, y2));\n\t};\n\t/*\\\n\t * Snap.len2\n\t [ method ]\n\t **\n\t * Returns squared distance between two points\n\t > Parameters\n\t - x1 (number) x coord of first point\n\t - y1 (number) y coord of first point\n\t - x2 (number) x coord of second point\n\t - y2 (number) y coord of second point\n\t = (number) distance\n\t\\*/\n\tSnap.len2 = function (x1, y1, x2, y2) {\n\t    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n\t};\n\t/*\\\n\t * Snap.closestPoint\n\t [ method ]\n\t **\n\t * Returns closest point to a given one on a given path.\n\t > Parameters\n\t - path (Element) path element\n\t - x (number) x coord of a point\n\t - y (number) y coord of a point\n\t = (object) in format\n\t {\n\t    x (number) x coord of the point on the path\n\t    y (number) y coord of the point on the path\n\t    length (number) length of the path to the point\n\t    distance (number) distance from the given point to the path\n\t }\n\t\\*/\n\t// Copied from http://bl.ocks.org/mbostock/8027637\n\tSnap.closestPoint = function (path, x, y) {\n\t    function distance2(p) {\n\t        var dx = p.x - x,\n\t            dy = p.y - y;\n\t        return dx * dx + dy * dy;\n\t    }\n\t    var pathNode = path.node,\n\t        pathLength = pathNode.getTotalLength(),\n\t        precision = pathLength / pathNode.pathSegList.numberOfItems * .125,\n\t        best,\n\t        bestLength,\n\t        bestDistance = Infinity;\n\t\n\t    // linear scan for coarse approximation\n\t    for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n\t        if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n\t            best = scan, bestLength = scanLength, bestDistance = scanDistance;\n\t        }\n\t    }\n\t\n\t    // binary search for precise estimate\n\t    precision *= .5;\n\t    while (precision > .5) {\n\t        var before,\n\t            after,\n\t            beforeLength,\n\t            afterLength,\n\t            beforeDistance,\n\t            afterDistance;\n\t        if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n\t            best = before, bestLength = beforeLength, bestDistance = beforeDistance;\n\t        } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n\t            best = after, bestLength = afterLength, bestDistance = afterDistance;\n\t        } else {\n\t            precision *= .5;\n\t        }\n\t    }\n\t\n\t    best = {\n\t        x: best.x,\n\t        y: best.y,\n\t        length: bestLength,\n\t        distance: Math.sqrt(bestDistance)\n\t    };\n\t    return best;\n\t}\n\t/*\\\n\t * Snap.is\n\t [ method ]\n\t **\n\t * Handy replacement for the `typeof` operator\n\t - o (…) any object or primitive\n\t - type (string) name of the type, e.g., `string`, `function`, `number`, etc.\n\t = (boolean) `true` if given value is of given type\n\t\\*/\n\tSnap.is = is;\n\t/*\\\n\t * Snap.snapTo\n\t [ method ]\n\t **\n\t * Snaps given value to given grid\n\t - values (array|number) given array of values or step of the grid\n\t - value (number) value to adjust\n\t - tolerance (number) #optional maximum distance to the target value that would trigger the snap. Default is `10`.\n\t = (number) adjusted value\n\t\\*/\n\tSnap.snapTo = function (values, value, tolerance) {\n\t    tolerance = is(tolerance, \"finite\") ? tolerance : 10;\n\t    if (is(values, \"array\")) {\n\t        var i = values.length;\n\t        while (i--) if (abs(values[i] - value) <= tolerance) {\n\t            return values[i];\n\t        }\n\t    } else {\n\t        values = +values;\n\t        var rem = value % values;\n\t        if (rem < tolerance) {\n\t            return value - rem;\n\t        }\n\t        if (rem > values - tolerance) {\n\t            return value - rem + values;\n\t        }\n\t    }\n\t    return value;\n\t};\n\t// Colour\n\t/*\\\n\t * Snap.getRGB\n\t [ method ]\n\t **\n\t * Parses color string as RGB object\n\t - color (string) color string in one of the following formats:\n\t # <ul>\n\t #     <li>Color name (<code>red</code>, <code>green</code>, <code>cornflowerblue</code>, etc)</li>\n\t #     <li>#••• — shortened HTML color: (<code>#000</code>, <code>#fc0</code>, etc.)</li>\n\t #     <li>#•••••• — full length HTML color: (<code>#000000</code>, <code>#bd2300</code>)</li>\n\t #     <li>rgb(•••, •••, •••) — red, green and blue channels values: (<code>rgb(200,&nbsp;100,&nbsp;0)</code>)</li>\n\t #     <li>rgba(•••, •••, •••, •••) — also with opacity</li>\n\t #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>)</li>\n\t #     <li>rgba(•••%, •••%, •••%, •••%) — also with opacity</li>\n\t #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>)</li>\n\t #     <li>hsba(•••, •••, •••, •••) — also with opacity</li>\n\t #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n\t #     <li>hsba(•••%, •••%, •••%, •••%) — also with opacity</li>\n\t #     <li>hsl(•••, •••, •••) — hue, saturation and luminosity values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;0.5)</code>)</li>\n\t #     <li>hsla(•••, •••, •••, •••) — also with opacity</li>\n\t #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n\t #     <li>hsla(•••%, •••%, •••%, •••%) — also with opacity</li>\n\t # </ul>\n\t * Note that `%` can be used any time: `rgb(20%, 255, 50%)`.\n\t = (object) RGB object in the following format:\n\t o {\n\t o     r (number) red,\n\t o     g (number) green,\n\t o     b (number) blue,\n\t o     hex (string) color in HTML/CSS format: #••••••,\n\t o     error (boolean) true if string can't be parsed\n\t o }\n\t\\*/\n\tSnap.getRGB = cacher(function (colour) {\n\t    if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n\t        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n\t    }\n\t    if (colour == \"none\") {\n\t        return {r: -1, g: -1, b: -1, hex: \"none\", toString: rgbtoString};\n\t    }\n\t    !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n\t    if (!colour) {\n\t        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n\t    }\n\t    var res,\n\t        red,\n\t        green,\n\t        blue,\n\t        opacity,\n\t        t,\n\t        values,\n\t        rgb = colour.match(colourRegExp);\n\t    if (rgb) {\n\t        if (rgb[2]) {\n\t            blue = toInt(rgb[2].substring(5), 16);\n\t            green = toInt(rgb[2].substring(3, 5), 16);\n\t            red = toInt(rgb[2].substring(1, 3), 16);\n\t        }\n\t        if (rgb[3]) {\n\t            blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n\t            green = toInt((t = rgb[3].charAt(2)) + t, 16);\n\t            red = toInt((t = rgb[3].charAt(1)) + t, 16);\n\t        }\n\t        if (rgb[4]) {\n\t            values = rgb[4].split(commaSpaces);\n\t            red = toFloat(values[0]);\n\t            values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t            green = toFloat(values[1]);\n\t            values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t            blue = toFloat(values[2]);\n\t            values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t            rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n\t            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t        }\n\t        if (rgb[5]) {\n\t            values = rgb[5].split(commaSpaces);\n\t            red = toFloat(values[0]);\n\t            values[0].slice(-1) == \"%\" && (red /= 100);\n\t            green = toFloat(values[1]);\n\t            values[1].slice(-1) == \"%\" && (green /= 100);\n\t            blue = toFloat(values[2]);\n\t            values[2].slice(-1) == \"%\" && (blue /= 100);\n\t            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t            rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n\t            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t            return Snap.hsb2rgb(red, green, blue, opacity);\n\t        }\n\t        if (rgb[6]) {\n\t            values = rgb[6].split(commaSpaces);\n\t            red = toFloat(values[0]);\n\t            values[0].slice(-1) == \"%\" && (red /= 100);\n\t            green = toFloat(values[1]);\n\t            values[1].slice(-1) == \"%\" && (green /= 100);\n\t            blue = toFloat(values[2]);\n\t            values[2].slice(-1) == \"%\" && (blue /= 100);\n\t            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t            rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n\t            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t            return Snap.hsl2rgb(red, green, blue, opacity);\n\t        }\n\t        red = mmin(math.round(red), 255);\n\t        green = mmin(math.round(green), 255);\n\t        blue = mmin(math.round(blue), 255);\n\t        opacity = mmin(mmax(opacity, 0), 1);\n\t        rgb = {r: red, g: green, b: blue, toString: rgbtoString};\n\t        rgb.hex = \"#\" + (16777216 | blue | (green << 8) | (red << 16)).toString(16).slice(1);\n\t        rgb.opacity = is(opacity, \"finite\") ? opacity : 1;\n\t        return rgb;\n\t    }\n\t    return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n\t}, Snap);\n\t/*\\\n\t * Snap.hsb\n\t [ method ]\n\t **\n\t * Converts HSB values to a hex representation of the color\n\t - h (number) hue\n\t - s (number) saturation\n\t - b (number) value or brightness\n\t = (string) hex representation of the color\n\t\\*/\n\tSnap.hsb = cacher(function (h, s, b) {\n\t    return Snap.hsb2rgb(h, s, b).hex;\n\t});\n\t/*\\\n\t * Snap.hsl\n\t [ method ]\n\t **\n\t * Converts HSL values to a hex representation of the color\n\t - h (number) hue\n\t - s (number) saturation\n\t - l (number) luminosity\n\t = (string) hex representation of the color\n\t\\*/\n\tSnap.hsl = cacher(function (h, s, l) {\n\t    return Snap.hsl2rgb(h, s, l).hex;\n\t});\n\t/*\\\n\t * Snap.rgb\n\t [ method ]\n\t **\n\t * Converts RGB values to a hex representation of the color\n\t - r (number) red\n\t - g (number) green\n\t - b (number) blue\n\t = (string) hex representation of the color\n\t\\*/\n\tSnap.rgb = cacher(function (r, g, b, o) {\n\t    if (is(o, \"finite\")) {\n\t        var round = math.round;\n\t        return \"rgba(\" + [round(r), round(g), round(b), +o.toFixed(2)] + \")\";\n\t    }\n\t    return \"#\" + (16777216 | b | (g << 8) | (r << 16)).toString(16).slice(1);\n\t});\n\tvar toHex = function (color) {\n\t    var i = glob.doc.getElementsByTagName(\"head\")[0] || glob.doc.getElementsByTagName(\"svg\")[0],\n\t        red = \"rgb(255, 0, 0)\";\n\t    toHex = cacher(function (color) {\n\t        if (color.toLowerCase() == \"red\") {\n\t            return red;\n\t        }\n\t        i.style.color = red;\n\t        i.style.color = color;\n\t        var out = glob.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n\t        return out == red ? null : out;\n\t    });\n\t    return toHex(color);\n\t},\n\thsbtoString = function () {\n\t    return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n\t},\n\thsltoString = function () {\n\t    return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n\t},\n\trgbtoString = function () {\n\t    return this.opacity == 1 || this.opacity == null ?\n\t            this.hex :\n\t            \"rgba(\" + [this.r, this.g, this.b, this.opacity] + \")\";\n\t},\n\tprepareRGB = function (r, g, b) {\n\t    if (g == null && is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n\t        b = r.b;\n\t        g = r.g;\n\t        r = r.r;\n\t    }\n\t    if (g == null && is(r, string)) {\n\t        var clr = Snap.getRGB(r);\n\t        r = clr.r;\n\t        g = clr.g;\n\t        b = clr.b;\n\t    }\n\t    if (r > 1 || g > 1 || b > 1) {\n\t        r /= 255;\n\t        g /= 255;\n\t        b /= 255;\n\t    }\n\t\n\t    return [r, g, b];\n\t},\n\tpackageRGB = function (r, g, b, o) {\n\t    r = math.round(r * 255);\n\t    g = math.round(g * 255);\n\t    b = math.round(b * 255);\n\t    var rgb = {\n\t        r: r,\n\t        g: g,\n\t        b: b,\n\t        opacity: is(o, \"finite\") ? o : 1,\n\t        hex: Snap.rgb(r, g, b),\n\t        toString: rgbtoString\n\t    };\n\t    is(o, \"finite\") && (rgb.opacity = o);\n\t    return rgb;\n\t};\n\t/*\\\n\t * Snap.color\n\t [ method ]\n\t **\n\t * Parses the color string and returns an object featuring the color's component values\n\t - clr (string) color string in one of the supported formats (see @Snap.getRGB)\n\t = (object) Combined RGB/HSB object in the following format:\n\t o {\n\t o     r (number) red,\n\t o     g (number) green,\n\t o     b (number) blue,\n\t o     hex (string) color in HTML/CSS format: #••••••,\n\t o     error (boolean) `true` if string can't be parsed,\n\t o     h (number) hue,\n\t o     s (number) saturation,\n\t o     v (number) value (brightness),\n\t o     l (number) lightness\n\t o }\n\t\\*/\n\tSnap.color = function (clr) {\n\t    var rgb;\n\t    if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n\t        rgb = Snap.hsb2rgb(clr);\n\t        clr.r = rgb.r;\n\t        clr.g = rgb.g;\n\t        clr.b = rgb.b;\n\t        clr.opacity = 1;\n\t        clr.hex = rgb.hex;\n\t    } else if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n\t        rgb = Snap.hsl2rgb(clr);\n\t        clr.r = rgb.r;\n\t        clr.g = rgb.g;\n\t        clr.b = rgb.b;\n\t        clr.opacity = 1;\n\t        clr.hex = rgb.hex;\n\t    } else {\n\t        if (is(clr, \"string\")) {\n\t            clr = Snap.getRGB(clr);\n\t        }\n\t        if (is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr && !(\"error\" in clr)) {\n\t            rgb = Snap.rgb2hsl(clr);\n\t            clr.h = rgb.h;\n\t            clr.s = rgb.s;\n\t            clr.l = rgb.l;\n\t            rgb = Snap.rgb2hsb(clr);\n\t            clr.v = rgb.b;\n\t        } else {\n\t            clr = {hex: \"none\"};\n\t            clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n\t            clr.error = 1;\n\t        }\n\t    }\n\t    clr.toString = rgbtoString;\n\t    return clr;\n\t};\n\t/*\\\n\t * Snap.hsb2rgb\n\t [ method ]\n\t **\n\t * Converts HSB values to an RGB object\n\t - h (number) hue\n\t - s (number) saturation\n\t - v (number) value or brightness\n\t = (object) RGB object in the following format:\n\t o {\n\t o     r (number) red,\n\t o     g (number) green,\n\t o     b (number) blue,\n\t o     hex (string) color in HTML/CSS format: #••••••\n\t o }\n\t\\*/\n\tSnap.hsb2rgb = function (h, s, v, o) {\n\t    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n\t        v = h.b;\n\t        s = h.s;\n\t        o = h.o;\n\t        h = h.h;\n\t    }\n\t    h *= 360;\n\t    var R, G, B, X, C;\n\t    h = (h % 360) / 60;\n\t    C = v * s;\n\t    X = C * (1 - abs(h % 2 - 1));\n\t    R = G = B = v - C;\n\t\n\t    h = ~~h;\n\t    R += [C, X, 0, 0, X, C][h];\n\t    G += [X, C, C, X, 0, 0][h];\n\t    B += [0, 0, X, C, C, X][h];\n\t    return packageRGB(R, G, B, o);\n\t};\n\t/*\\\n\t * Snap.hsl2rgb\n\t [ method ]\n\t **\n\t * Converts HSL values to an RGB object\n\t - h (number) hue\n\t - s (number) saturation\n\t - l (number) luminosity\n\t = (object) RGB object in the following format:\n\t o {\n\t o     r (number) red,\n\t o     g (number) green,\n\t o     b (number) blue,\n\t o     hex (string) color in HTML/CSS format: #••••••\n\t o }\n\t\\*/\n\tSnap.hsl2rgb = function (h, s, l, o) {\n\t    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n\t        l = h.l;\n\t        s = h.s;\n\t        h = h.h;\n\t    }\n\t    if (h > 1 || s > 1 || l > 1) {\n\t        h /= 360;\n\t        s /= 100;\n\t        l /= 100;\n\t    }\n\t    h *= 360;\n\t    var R, G, B, X, C;\n\t    h = (h % 360) / 60;\n\t    C = 2 * s * (l < .5 ? l : 1 - l);\n\t    X = C * (1 - abs(h % 2 - 1));\n\t    R = G = B = l - C / 2;\n\t\n\t    h = ~~h;\n\t    R += [C, X, 0, 0, X, C][h];\n\t    G += [X, C, C, X, 0, 0][h];\n\t    B += [0, 0, X, C, C, X][h];\n\t    return packageRGB(R, G, B, o);\n\t};\n\t/*\\\n\t * Snap.rgb2hsb\n\t [ method ]\n\t **\n\t * Converts RGB values to an HSB object\n\t - r (number) red\n\t - g (number) green\n\t - b (number) blue\n\t = (object) HSB object in the following format:\n\t o {\n\t o     h (number) hue,\n\t o     s (number) saturation,\n\t o     b (number) brightness\n\t o }\n\t\\*/\n\tSnap.rgb2hsb = function (r, g, b) {\n\t    b = prepareRGB(r, g, b);\n\t    r = b[0];\n\t    g = b[1];\n\t    b = b[2];\n\t\n\t    var H, S, V, C;\n\t    V = mmax(r, g, b);\n\t    C = V - mmin(r, g, b);\n\t    H = (C == 0 ? null :\n\t         V == r ? (g - b) / C :\n\t         V == g ? (b - r) / C + 2 :\n\t                  (r - g) / C + 4\n\t        );\n\t    H = ((H + 360) % 6) * 60 / 360;\n\t    S = C == 0 ? 0 : C / V;\n\t    return {h: H, s: S, b: V, toString: hsbtoString};\n\t};\n\t/*\\\n\t * Snap.rgb2hsl\n\t [ method ]\n\t **\n\t * Converts RGB values to an HSL object\n\t - r (number) red\n\t - g (number) green\n\t - b (number) blue\n\t = (object) HSL object in the following format:\n\t o {\n\t o     h (number) hue,\n\t o     s (number) saturation,\n\t o     l (number) luminosity\n\t o }\n\t\\*/\n\tSnap.rgb2hsl = function (r, g, b) {\n\t    b = prepareRGB(r, g, b);\n\t    r = b[0];\n\t    g = b[1];\n\t    b = b[2];\n\t\n\t    var H, S, L, M, m, C;\n\t    M = mmax(r, g, b);\n\t    m = mmin(r, g, b);\n\t    C = M - m;\n\t    H = (C == 0 ? null :\n\t         M == r ? (g - b) / C :\n\t         M == g ? (b - r) / C + 2 :\n\t                  (r - g) / C + 4);\n\t    H = ((H + 360) % 6) * 60 / 360;\n\t    L = (M + m) / 2;\n\t    S = (C == 0 ? 0 :\n\t         L < .5 ? C / (2 * L) :\n\t                  C / (2 - 2 * L));\n\t    return {h: H, s: S, l: L, toString: hsltoString};\n\t};\n\t\n\t// Transformations\n\t/*\\\n\t * Snap.parsePathString\n\t [ method ]\n\t **\n\t * Utility method\n\t **\n\t * Parses given path string into an array of arrays of path segments\n\t - pathString (string|array) path string or array of segments (in the last case it is returned straight away)\n\t = (array) array of segments\n\t\\*/\n\tSnap.parsePathString = function (pathString) {\n\t    if (!pathString) {\n\t        return null;\n\t    }\n\t    var pth = Snap.path(pathString);\n\t    if (pth.arr) {\n\t        return Snap.path.clone(pth.arr);\n\t    }\n\t\n\t    var paramCounts = {a: 7, c: 6, o: 2, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, u: 3, z: 0},\n\t        data = [];\n\t    if (is(pathString, \"array\") && is(pathString[0], \"array\")) { // rough assumption\n\t        data = Snap.path.clone(pathString);\n\t    }\n\t    if (!data.length) {\n\t        Str(pathString).replace(pathCommand, function (a, b, c) {\n\t            var params = [],\n\t                name = b.toLowerCase();\n\t            c.replace(pathValues, function (a, b) {\n\t                b && params.push(+b);\n\t            });\n\t            if (name == \"m\" && params.length > 2) {\n\t                data.push([b].concat(params.splice(0, 2)));\n\t                name = \"l\";\n\t                b = b == \"m\" ? \"l\" : \"L\";\n\t            }\n\t            if (name == \"o\" && params.length == 1) {\n\t                data.push([b, params[0]]);\n\t            }\n\t            if (name == \"r\") {\n\t                data.push([b].concat(params));\n\t            } else while (params.length >= paramCounts[name]) {\n\t                data.push([b].concat(params.splice(0, paramCounts[name])));\n\t                if (!paramCounts[name]) {\n\t                    break;\n\t                }\n\t            }\n\t        });\n\t    }\n\t    data.toString = Snap.path.toString;\n\t    pth.arr = Snap.path.clone(data);\n\t    return data;\n\t};\n\t/*\\\n\t * Snap.parseTransformString\n\t [ method ]\n\t **\n\t * Utility method\n\t **\n\t * Parses given transform string into an array of transformations\n\t - TString (string|array) transform string or array of transformations (in the last case it is returned straight away)\n\t = (array) array of transformations\n\t\\*/\n\tvar parseTransformString = Snap.parseTransformString = function (TString) {\n\t    if (!TString) {\n\t        return null;\n\t    }\n\t    var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n\t        data = [];\n\t    if (is(TString, \"array\") && is(TString[0], \"array\")) { // rough assumption\n\t        data = Snap.path.clone(TString);\n\t    }\n\t    if (!data.length) {\n\t        Str(TString).replace(tCommand, function (a, b, c) {\n\t            var params = [],\n\t                name = b.toLowerCase();\n\t            c.replace(pathValues, function (a, b) {\n\t                b && params.push(+b);\n\t            });\n\t            data.push([b].concat(params));\n\t        });\n\t    }\n\t    data.toString = Snap.path.toString;\n\t    return data;\n\t};\n\tfunction svgTransform2string(tstr) {\n\t    var res = [];\n\t    tstr = tstr.replace(/(?:^|\\s)(\\w+)\\(([^)]+)\\)/g, function (all, name, params) {\n\t        params = params.split(/\\s*,\\s*|\\s+/);\n\t        if (name == \"rotate\" && params.length == 1) {\n\t            params.push(0, 0);\n\t        }\n\t        if (name == \"scale\") {\n\t            if (params.length > 2) {\n\t                params = params.slice(0, 2);\n\t            } else if (params.length == 2) {\n\t                params.push(0, 0);\n\t            }\n\t            if (params.length == 1) {\n\t                params.push(params[0], 0, 0);\n\t            }\n\t        }\n\t        if (name == \"skewX\") {\n\t            res.push([\"m\", 1, 0, math.tan(rad(params[0])), 1, 0, 0]);\n\t        } else if (name == \"skewY\") {\n\t            res.push([\"m\", 1, math.tan(rad(params[0])), 0, 1, 0, 0]);\n\t        } else {\n\t            res.push([name.charAt(0)].concat(params));\n\t        }\n\t        return all;\n\t    });\n\t    return res;\n\t}\n\tSnap._.svgTransform2string = svgTransform2string;\n\tSnap._.rgTransform = /^[a-z][\\s]*-?\\.?\\d/i;\n\tfunction transform2matrix(tstr, bbox) {\n\t    var tdata = parseTransformString(tstr),\n\t        m = new Snap.Matrix;\n\t    if (tdata) {\n\t        for (var i = 0, ii = tdata.length; i < ii; i++) {\n\t            var t = tdata[i],\n\t                tlen = t.length,\n\t                command = Str(t[0]).toLowerCase(),\n\t                absolute = t[0] != command,\n\t                inver = absolute ? m.invert() : 0,\n\t                x1,\n\t                y1,\n\t                x2,\n\t                y2,\n\t                bb;\n\t            if (command == \"t\" && tlen == 2){\n\t                m.translate(t[1], 0);\n\t            } else if (command == \"t\" && tlen == 3) {\n\t                if (absolute) {\n\t                    x1 = inver.x(0, 0);\n\t                    y1 = inver.y(0, 0);\n\t                    x2 = inver.x(t[1], t[2]);\n\t                    y2 = inver.y(t[1], t[2]);\n\t                    m.translate(x2 - x1, y2 - y1);\n\t                } else {\n\t                    m.translate(t[1], t[2]);\n\t                }\n\t            } else if (command == \"r\") {\n\t                if (tlen == 2) {\n\t                    bb = bb || bbox;\n\t                    m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                } else if (tlen == 4) {\n\t                    if (absolute) {\n\t                        x2 = inver.x(t[2], t[3]);\n\t                        y2 = inver.y(t[2], t[3]);\n\t                        m.rotate(t[1], x2, y2);\n\t                    } else {\n\t                        m.rotate(t[1], t[2], t[3]);\n\t                    }\n\t                }\n\t            } else if (command == \"s\") {\n\t                if (tlen == 2 || tlen == 3) {\n\t                    bb = bb || bbox;\n\t                    m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                } else if (tlen == 4) {\n\t                    if (absolute) {\n\t                        x2 = inver.x(t[2], t[3]);\n\t                        y2 = inver.y(t[2], t[3]);\n\t                        m.scale(t[1], t[1], x2, y2);\n\t                    } else {\n\t                        m.scale(t[1], t[1], t[2], t[3]);\n\t                    }\n\t                } else if (tlen == 5) {\n\t                    if (absolute) {\n\t                        x2 = inver.x(t[3], t[4]);\n\t                        y2 = inver.y(t[3], t[4]);\n\t                        m.scale(t[1], t[2], x2, y2);\n\t                    } else {\n\t                        m.scale(t[1], t[2], t[3], t[4]);\n\t                    }\n\t                }\n\t            } else if (command == \"m\" && tlen == 7) {\n\t                m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n\t            }\n\t        }\n\t    }\n\t    return m;\n\t}\n\tSnap._.transform2matrix = transform2matrix;\n\tSnap._unit2px = unit2px;\n\tvar contains = glob.doc.contains || glob.doc.compareDocumentPosition ?\n\t    function (a, b) {\n\t        var adown = a.nodeType == 9 ? a.documentElement : a,\n\t            bup = b && b.parentNode;\n\t            return a == bup || !!(bup && bup.nodeType == 1 && (\n\t                adown.contains ?\n\t                    adown.contains(bup) :\n\t                    a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16\n\t            ));\n\t    } :\n\t    function (a, b) {\n\t        if (b) {\n\t            while (b) {\n\t                b = b.parentNode;\n\t                if (b == a) {\n\t                    return true;\n\t                }\n\t            }\n\t        }\n\t        return false;\n\t    };\n\tfunction getSomeDefs(el) {\n\t    var p = (el.node.ownerSVGElement && wrap(el.node.ownerSVGElement)) ||\n\t            (el.node.parentNode && wrap(el.node.parentNode)) ||\n\t            Snap.select(\"svg\") ||\n\t            Snap(0, 0),\n\t        pdefs = p.select(\"defs\"),\n\t        defs  = pdefs == null ? false : pdefs.node;\n\t    if (!defs) {\n\t        defs = make(\"defs\", p.node).node;\n\t    }\n\t    return defs;\n\t}\n\tfunction getSomeSVG(el) {\n\t    return el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || Snap.select(\"svg\");\n\t}\n\tSnap._.getSomeDefs = getSomeDefs;\n\tSnap._.getSomeSVG = getSomeSVG;\n\tfunction unit2px(el, name, value) {\n\t    var svg = getSomeSVG(el).node,\n\t        out = {},\n\t        mgr = svg.querySelector(\".svg---mgr\");\n\t    if (!mgr) {\n\t        mgr = $(\"rect\");\n\t        $(mgr, {x: -9e9, y: -9e9, width: 10, height: 10, \"class\": \"svg---mgr\", fill: \"none\"});\n\t        svg.appendChild(mgr);\n\t    }\n\t    function getW(val) {\n\t        if (val == null) {\n\t            return E;\n\t        }\n\t        if (val == +val) {\n\t            return val;\n\t        }\n\t        $(mgr, {width: val});\n\t        try {\n\t            return mgr.getBBox().width;\n\t        } catch (e) {\n\t            return 0;\n\t        }\n\t    }\n\t    function getH(val) {\n\t        if (val == null) {\n\t            return E;\n\t        }\n\t        if (val == +val) {\n\t            return val;\n\t        }\n\t        $(mgr, {height: val});\n\t        try {\n\t            return mgr.getBBox().height;\n\t        } catch (e) {\n\t            return 0;\n\t        }\n\t    }\n\t    function set(nam, f) {\n\t        if (name == null) {\n\t            out[nam] = f(el.attr(nam) || 0);\n\t        } else if (nam == name) {\n\t            out = f(value == null ? el.attr(nam) || 0 : value);\n\t        }\n\t    }\n\t    switch (el.type) {\n\t        case \"rect\":\n\t            set(\"rx\", getW);\n\t            set(\"ry\", getH);\n\t        case \"image\":\n\t            set(\"width\", getW);\n\t            set(\"height\", getH);\n\t        case \"text\":\n\t            set(\"x\", getW);\n\t            set(\"y\", getH);\n\t        break;\n\t        case \"circle\":\n\t            set(\"cx\", getW);\n\t            set(\"cy\", getH);\n\t            set(\"r\", getW);\n\t        break;\n\t        case \"ellipse\":\n\t            set(\"cx\", getW);\n\t            set(\"cy\", getH);\n\t            set(\"rx\", getW);\n\t            set(\"ry\", getH);\n\t        break;\n\t        case \"line\":\n\t            set(\"x1\", getW);\n\t            set(\"x2\", getW);\n\t            set(\"y1\", getH);\n\t            set(\"y2\", getH);\n\t        break;\n\t        case \"marker\":\n\t            set(\"refX\", getW);\n\t            set(\"markerWidth\", getW);\n\t            set(\"refY\", getH);\n\t            set(\"markerHeight\", getH);\n\t        break;\n\t        case \"radialGradient\":\n\t            set(\"fx\", getW);\n\t            set(\"fy\", getH);\n\t        break;\n\t        case \"tspan\":\n\t            set(\"dx\", getW);\n\t            set(\"dy\", getH);\n\t        break;\n\t        default:\n\t            set(name, getW);\n\t    }\n\t    svg.removeChild(mgr);\n\t    return out;\n\t}\n\t/*\\\n\t * Snap.select\n\t [ method ]\n\t **\n\t * Wraps a DOM element specified by CSS selector as @Element\n\t - query (string) CSS selector of the element\n\t = (Element) the current element\n\t\\*/\n\tSnap.select = function (query) {\n\t    query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n\t    return wrap(glob.doc.querySelector(query));\n\t};\n\t/*\\\n\t * Snap.selectAll\n\t [ method ]\n\t **\n\t * Wraps DOM elements specified by CSS selector as set or array of @Element\n\t - query (string) CSS selector of the element\n\t = (Element) the current element\n\t\\*/\n\tSnap.selectAll = function (query) {\n\t    var nodelist = glob.doc.querySelectorAll(query),\n\t        set = (Snap.set || Array)();\n\t    for (var i = 0; i < nodelist.length; i++) {\n\t        set.push(wrap(nodelist[i]));\n\t    }\n\t    return set;\n\t};\n\t\n\tfunction add2group(list) {\n\t    if (!is(list, \"array\")) {\n\t        list = Array.prototype.slice.call(arguments, 0);\n\t    }\n\t    var i = 0,\n\t        j = 0,\n\t        node = this.node;\n\t    while (this[i]) delete this[i++];\n\t    for (i = 0; i < list.length; i++) {\n\t        if (list[i].type == \"set\") {\n\t            list[i].forEach(function (el) {\n\t                node.appendChild(el.node);\n\t            });\n\t        } else {\n\t            node.appendChild(list[i].node);\n\t        }\n\t    }\n\t    var children = node.childNodes;\n\t    for (i = 0; i < children.length; i++) {\n\t        this[j++] = wrap(children[i]);\n\t    }\n\t    return this;\n\t}\n\t// Hub garbage collector every 10s\n\tsetInterval(function () {\n\t    for (var key in hub) if (hub[has](key)) {\n\t        var el = hub[key],\n\t            node = el.node;\n\t        if (el.type != \"svg\" && !node.ownerSVGElement || el.type == \"svg\" && (!node.parentNode || \"ownerSVGElement\" in node.parentNode && !node.ownerSVGElement)) {\n\t            delete hub[key];\n\t        }\n\t    }\n\t}, 1e4);\n\tfunction Element(el) {\n\t    if (el.snap in hub) {\n\t        return hub[el.snap];\n\t    }\n\t    var svg;\n\t    try {\n\t        svg = el.ownerSVGElement;\n\t    } catch(e) {}\n\t    /*\\\n\t     * Element.node\n\t     [ property (object) ]\n\t     **\n\t     * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n\t     > Usage\n\t     | // draw a circle at coordinate 10,10 with radius of 10\n\t     | var c = paper.circle(10, 10, 10);\n\t     | c.node.onclick = function () {\n\t     |     c.attr(\"fill\", \"red\");\n\t     | };\n\t    \\*/\n\t    this.node = el;\n\t    if (svg) {\n\t        this.paper = new Paper(svg);\n\t    }\n\t    /*\\\n\t     * Element.type\n\t     [ property (string) ]\n\t     **\n\t     * SVG tag name of the given element.\n\t    \\*/\n\t    this.type = el.tagName || el.nodeName;\n\t    var id = this.id = ID(this);\n\t    this.anims = {};\n\t    this._ = {\n\t        transform: []\n\t    };\n\t    el.snap = id;\n\t    hub[id] = this;\n\t    if (this.type == \"g\") {\n\t        this.add = add2group;\n\t    }\n\t    if (this.type in {g: 1, mask: 1, pattern: 1, symbol: 1}) {\n\t        for (var method in Paper.prototype) if (Paper.prototype[has](method)) {\n\t            this[method] = Paper.prototype[method];\n\t        }\n\t    }\n\t}\n\t   /*\\\n\t     * Element.attr\n\t     [ method ]\n\t     **\n\t     * Gets or sets given attributes of the element.\n\t     **\n\t     - params (object) contains key-value pairs of attributes you want to set\n\t     * or\n\t     - param (string) name of the attribute\n\t     = (Element) the current element\n\t     * or\n\t     = (string) value of attribute\n\t     > Usage\n\t     | el.attr({\n\t     |     fill: \"#fc0\",\n\t     |     stroke: \"#000\",\n\t     |     strokeWidth: 2, // CamelCase...\n\t     |     \"fill-opacity\": 0.5, // or dash-separated names\n\t     |     width: \"*=2\" // prefixed values\n\t     | });\n\t     | console.log(el.attr(\"fill\")); // #fc0\n\t     * Prefixed values in format `\"+=10\"` supported. All four operations\n\t     * (`+`, `-`, `*` and `/`) could be used. Optionally you can use units for `+`\n\t     * and `-`: `\"+=2em\"`.\n\t    \\*/\n\t    Element.prototype.attr = function (params, value) {\n\t        var el = this,\n\t            node = el.node;\n\t        if (!params) {\n\t            if (node.nodeType != 1) {\n\t                return {\n\t                    text: node.nodeValue\n\t                };\n\t            }\n\t            var attr = node.attributes,\n\t                out = {};\n\t            for (var i = 0, ii = attr.length; i < ii; i++) {\n\t                out[attr[i].nodeName] = attr[i].nodeValue;\n\t            }\n\t            return out;\n\t        }\n\t        if (is(params, \"string\")) {\n\t            if (arguments.length > 1) {\n\t                var json = {};\n\t                json[params] = value;\n\t                params = json;\n\t            } else {\n\t                return eve(\"snap.util.getattr.\" + params, el).firstDefined();\n\t            }\n\t        }\n\t        for (var att in params) {\n\t            if (params[has](att)) {\n\t                eve(\"snap.util.attr.\" + att, el, params[att]);\n\t            }\n\t        }\n\t        return el;\n\t    };\n\t/*\\\n\t * Snap.parse\n\t [ method ]\n\t **\n\t * Parses SVG fragment and converts it into a @Fragment\n\t **\n\t - svg (string) SVG string\n\t = (Fragment) the @Fragment\n\t\\*/\n\tSnap.parse = function (svg) {\n\t    var f = glob.doc.createDocumentFragment(),\n\t        full = true,\n\t        div = glob.doc.createElement(\"div\");\n\t    svg = Str(svg);\n\t    if (!svg.match(/^\\s*<\\s*svg(?:\\s|>)/)) {\n\t        svg = \"<svg>\" + svg + \"</svg>\";\n\t        full = false;\n\t    }\n\t    div.innerHTML = svg;\n\t    svg = div.getElementsByTagName(\"svg\")[0];\n\t    if (svg) {\n\t        if (full) {\n\t            f = svg;\n\t        } else {\n\t            while (svg.firstChild) {\n\t                f.appendChild(svg.firstChild);\n\t            }\n\t        }\n\t    }\n\t    return new Fragment(f);\n\t};\n\tfunction Fragment(frag) {\n\t    this.node = frag;\n\t}\n\t/*\\\n\t * Snap.fragment\n\t [ method ]\n\t **\n\t * Creates a DOM fragment from a given list of elements or strings\n\t **\n\t - varargs (…) SVG string\n\t = (Fragment) the @Fragment\n\t\\*/\n\tSnap.fragment = function () {\n\t    var args = Array.prototype.slice.call(arguments, 0),\n\t        f = glob.doc.createDocumentFragment();\n\t    for (var i = 0, ii = args.length; i < ii; i++) {\n\t        var item = args[i];\n\t        if (item.node && item.node.nodeType) {\n\t            f.appendChild(item.node);\n\t        }\n\t        if (item.nodeType) {\n\t            f.appendChild(item);\n\t        }\n\t        if (typeof item == \"string\") {\n\t            f.appendChild(Snap.parse(item).node);\n\t        }\n\t    }\n\t    return new Fragment(f);\n\t};\n\t\n\tfunction make(name, parent) {\n\t    var res = $(name);\n\t    parent.appendChild(res);\n\t    var el = wrap(res);\n\t    return el;\n\t}\n\tfunction Paper(w, h) {\n\t    var res,\n\t        desc,\n\t        defs,\n\t        proto = Paper.prototype;\n\t    if (w && w.tagName == \"svg\") {\n\t        if (w.snap in hub) {\n\t            return hub[w.snap];\n\t        }\n\t        var doc = w.ownerDocument;\n\t        res = new Element(w);\n\t        desc = w.getElementsByTagName(\"desc\")[0];\n\t        defs = w.getElementsByTagName(\"defs\")[0];\n\t        if (!desc) {\n\t            desc = $(\"desc\");\n\t            desc.appendChild(doc.createTextNode(\"Created with Snap\"));\n\t            res.node.appendChild(desc);\n\t        }\n\t        if (!defs) {\n\t            defs = $(\"defs\");\n\t            res.node.appendChild(defs);\n\t        }\n\t        res.defs = defs;\n\t        for (var key in proto) if (proto[has](key)) {\n\t            res[key] = proto[key];\n\t        }\n\t        res.paper = res.root = res;\n\t    } else {\n\t        res = make(\"svg\", glob.doc.body);\n\t        $(res.node, {\n\t            height: h,\n\t            version: 1.1,\n\t            width: w,\n\t            xmlns: xmlns\n\t        });\n\t    }\n\t    return res;\n\t}\n\tfunction wrap(dom) {\n\t    if (!dom) {\n\t        return dom;\n\t    }\n\t    if (dom instanceof Element || dom instanceof Fragment) {\n\t        return dom;\n\t    }\n\t    if (dom.tagName && dom.tagName.toLowerCase() == \"svg\") {\n\t        return new Paper(dom);\n\t    }\n\t    if (dom.tagName && dom.tagName.toLowerCase() == \"object\" && dom.type == \"image/svg+xml\") {\n\t        return new Paper(dom.contentDocument.getElementsByTagName(\"svg\")[0]);\n\t    }\n\t    return new Element(dom);\n\t}\n\t\n\tSnap._.make = make;\n\tSnap._.wrap = wrap;\n\t/*\\\n\t * Paper.el\n\t [ method ]\n\t **\n\t * Creates an element on paper with a given name and no attributes\n\t **\n\t - name (string) tag name\n\t - attr (object) attributes\n\t = (Element) the current element\n\t > Usage\n\t | var c = paper.circle(10, 10, 10); // is the same as...\n\t | var c = paper.el(\"circle\").attr({\n\t |     cx: 10,\n\t |     cy: 10,\n\t |     r: 10\n\t | });\n\t | // and the same as\n\t | var c = paper.el(\"circle\", {\n\t |     cx: 10,\n\t |     cy: 10,\n\t |     r: 10\n\t | });\n\t\\*/\n\tPaper.prototype.el = function (name, attr) {\n\t    var el = make(name, this.node);\n\t    attr && el.attr(attr);\n\t    return el;\n\t};\n\t/*\\\n\t * Element.children\n\t [ method ]\n\t **\n\t * Returns array of all the children of the element.\n\t = (array) array of Elements\n\t\\*/\n\tElement.prototype.children = function () {\n\t    var out = [],\n\t        ch = this.node.childNodes;\n\t    for (var i = 0, ii = ch.length; i < ii; i++) {\n\t        out[i] = Snap(ch[i]);\n\t    }\n\t    return out;\n\t};\n\tfunction jsonFiller(root, o) {\n\t    for (var i = 0, ii = root.length; i < ii; i++) {\n\t        var item = {\n\t                type: root[i].type,\n\t                attr: root[i].attr()\n\t            },\n\t            children = root[i].children();\n\t        o.push(item);\n\t        if (children.length) {\n\t            jsonFiller(children, item.childNodes = []);\n\t        }\n\t    }\n\t}\n\t/*\\\n\t * Element.toJSON\n\t [ method ]\n\t **\n\t * Returns object representation of the given element and all its children.\n\t = (object) in format\n\t o {\n\t o     type (string) this.type,\n\t o     attr (object) attributes map,\n\t o     childNodes (array) optional array of children in the same format\n\t o }\n\t\\*/\n\tElement.prototype.toJSON = function () {\n\t    var out = [];\n\t    jsonFiller([this], out);\n\t    return out[0];\n\t};\n\t// default\n\teve.on(\"snap.util.getattr\", function () {\n\t    var att = eve.nt();\n\t    att = att.substring(att.lastIndexOf(\".\") + 1);\n\t    var css = att.replace(/[A-Z]/g, function (letter) {\n\t        return \"-\" + letter.toLowerCase();\n\t    });\n\t    if (cssAttr[has](css)) {\n\t        return this.node.ownerDocument.defaultView.getComputedStyle(this.node, null).getPropertyValue(css);\n\t    } else {\n\t        return $(this.node, att);\n\t    }\n\t});\n\tvar cssAttr = {\n\t    \"alignment-baseline\": 0,\n\t    \"baseline-shift\": 0,\n\t    \"clip\": 0,\n\t    \"clip-path\": 0,\n\t    \"clip-rule\": 0,\n\t    \"color\": 0,\n\t    \"color-interpolation\": 0,\n\t    \"color-interpolation-filters\": 0,\n\t    \"color-profile\": 0,\n\t    \"color-rendering\": 0,\n\t    \"cursor\": 0,\n\t    \"direction\": 0,\n\t    \"display\": 0,\n\t    \"dominant-baseline\": 0,\n\t    \"enable-background\": 0,\n\t    \"fill\": 0,\n\t    \"fill-opacity\": 0,\n\t    \"fill-rule\": 0,\n\t    \"filter\": 0,\n\t    \"flood-color\": 0,\n\t    \"flood-opacity\": 0,\n\t    \"font\": 0,\n\t    \"font-family\": 0,\n\t    \"font-size\": 0,\n\t    \"font-size-adjust\": 0,\n\t    \"font-stretch\": 0,\n\t    \"font-style\": 0,\n\t    \"font-variant\": 0,\n\t    \"font-weight\": 0,\n\t    \"glyph-orientation-horizontal\": 0,\n\t    \"glyph-orientation-vertical\": 0,\n\t    \"image-rendering\": 0,\n\t    \"kerning\": 0,\n\t    \"letter-spacing\": 0,\n\t    \"lighting-color\": 0,\n\t    \"marker\": 0,\n\t    \"marker-end\": 0,\n\t    \"marker-mid\": 0,\n\t    \"marker-start\": 0,\n\t    \"mask\": 0,\n\t    \"opacity\": 0,\n\t    \"overflow\": 0,\n\t    \"pointer-events\": 0,\n\t    \"shape-rendering\": 0,\n\t    \"stop-color\": 0,\n\t    \"stop-opacity\": 0,\n\t    \"stroke\": 0,\n\t    \"stroke-dasharray\": 0,\n\t    \"stroke-dashoffset\": 0,\n\t    \"stroke-linecap\": 0,\n\t    \"stroke-linejoin\": 0,\n\t    \"stroke-miterlimit\": 0,\n\t    \"stroke-opacity\": 0,\n\t    \"stroke-width\": 0,\n\t    \"text-anchor\": 0,\n\t    \"text-decoration\": 0,\n\t    \"text-rendering\": 0,\n\t    \"unicode-bidi\": 0,\n\t    \"visibility\": 0,\n\t    \"word-spacing\": 0,\n\t    \"writing-mode\": 0\n\t};\n\t\n\teve.on(\"snap.util.attr\", function (value) {\n\t    var att = eve.nt(),\n\t        attr = {};\n\t    att = att.substring(att.lastIndexOf(\".\") + 1);\n\t    attr[att] = value;\n\t    var style = att.replace(/-(\\w)/gi, function (all, letter) {\n\t            return letter.toUpperCase();\n\t        }),\n\t        css = att.replace(/[A-Z]/g, function (letter) {\n\t            return \"-\" + letter.toLowerCase();\n\t        });\n\t    if (cssAttr[has](css)) {\n\t        this.node.style[style] = value == null ? E : value;\n\t    } else {\n\t        $(this.node, attr);\n\t    }\n\t});\n\t(function (proto) {}(Paper.prototype));\n\t\n\t// simple ajax\n\t/*\\\n\t * Snap.ajax\n\t [ method ]\n\t **\n\t * Simple implementation of Ajax\n\t **\n\t - url (string) URL\n\t - postData (object|string) data for post request\n\t - callback (function) callback\n\t - scope (object) #optional scope of callback\n\t * or\n\t - url (string) URL\n\t - callback (function) callback\n\t - scope (object) #optional scope of callback\n\t = (XMLHttpRequest) the XMLHttpRequest object, just in case\n\t\\*/\n\tSnap.ajax = function (url, postData, callback, scope){\n\t    var req = new XMLHttpRequest,\n\t        id = ID();\n\t    if (req) {\n\t        if (is(postData, \"function\")) {\n\t            scope = callback;\n\t            callback = postData;\n\t            postData = null;\n\t        } else if (is(postData, \"object\")) {\n\t            var pd = [];\n\t            for (var key in postData) if (postData.hasOwnProperty(key)) {\n\t                pd.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(postData[key]));\n\t            }\n\t            postData = pd.join(\"&\");\n\t        }\n\t        req.open((postData ? \"POST\" : \"GET\"), url, true);\n\t        if (postData) {\n\t            req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n\t            req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n\t        }\n\t        if (callback) {\n\t            eve.once(\"snap.ajax.\" + id + \".0\", callback);\n\t            eve.once(\"snap.ajax.\" + id + \".200\", callback);\n\t            eve.once(\"snap.ajax.\" + id + \".304\", callback);\n\t        }\n\t        req.onreadystatechange = function() {\n\t            if (req.readyState != 4) return;\n\t            eve(\"snap.ajax.\" + id + \".\" + req.status, scope, req);\n\t        };\n\t        if (req.readyState == 4) {\n\t            return req;\n\t        }\n\t        req.send(postData);\n\t        return req;\n\t    }\n\t};\n\t/*\\\n\t * Snap.load\n\t [ method ]\n\t **\n\t * Loads external SVG file as a @Fragment (see @Snap.ajax for more advanced AJAX)\n\t **\n\t - url (string) URL\n\t - callback (function) callback\n\t - scope (object) #optional scope of callback\n\t\\*/\n\tSnap.load = function (url, callback, scope) {\n\t    Snap.ajax(url, function (req) {\n\t        var f = Snap.parse(req.responseText);\n\t        scope ? callback.call(scope, f) : callback(f);\n\t    });\n\t};\n\tvar getOffset = function (elem) {\n\t    var box = elem.getBoundingClientRect(),\n\t        doc = elem.ownerDocument,\n\t        body = doc.body,\n\t        docElem = doc.documentElement,\n\t        clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n\t        top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n\t        left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n\t    return {\n\t        y: top,\n\t        x: left\n\t    };\n\t};\n\t/*\\\n\t * Snap.getElementByPoint\n\t [ method ]\n\t **\n\t * Returns you topmost element under given point.\n\t **\n\t = (object) Snap element object\n\t - x (number) x coordinate from the top left corner of the window\n\t - y (number) y coordinate from the top left corner of the window\n\t > Usage\n\t | Snap.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\t\\*/\n\tSnap.getElementByPoint = function (x, y) {\n\t    var paper = this,\n\t        svg = paper.canvas,\n\t        target = glob.doc.elementFromPoint(x, y);\n\t    if (glob.win.opera && target.tagName == \"svg\") {\n\t        var so = getOffset(target),\n\t            sr = target.createSVGRect();\n\t        sr.x = x - so.x;\n\t        sr.y = y - so.y;\n\t        sr.width = sr.height = 1;\n\t        var hits = target.getIntersectionList(sr, null);\n\t        if (hits.length) {\n\t            target = hits[hits.length - 1];\n\t        }\n\t    }\n\t    if (!target) {\n\t        return null;\n\t    }\n\t    return wrap(target);\n\t};\n\t/*\\\n\t * Snap.plugin\n\t [ method ]\n\t **\n\t * Let you write plugins. You pass in a function with five arguments, like this:\n\t | Snap.plugin(function (Snap, Element, Paper, global, Fragment) {\n\t |     Snap.newmethod = function () {};\n\t |     Element.prototype.newmethod = function () {};\n\t |     Paper.prototype.newmethod = function () {};\n\t | });\n\t * Inside the function you have access to all main objects (and their\n\t * prototypes). This allow you to extend anything you want.\n\t **\n\t - f (function) your plugin body\n\t\\*/\n\tSnap.plugin = function (f) {\n\t    f(Snap, Element, Paper, glob, Fragment);\n\t};\n\tglob.win.Snap = Snap;\n\treturn Snap;\n\t}(window || this));\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var elproto = Element.prototype,\n\t        is = Snap.is,\n\t        Str = String,\n\t        unit2px = Snap._unit2px,\n\t        $ = Snap._.$,\n\t        make = Snap._.make,\n\t        getSomeDefs = Snap._.getSomeDefs,\n\t        has = \"hasOwnProperty\",\n\t        wrap = Snap._.wrap;\n\t    /*\\\n\t     * Element.getBBox\n\t     [ method ]\n\t     **\n\t     * Returns the bounding box descriptor for the given element\n\t     **\n\t     = (object) bounding box descriptor:\n\t     o {\n\t     o     cx: (number) x of the center,\n\t     o     cy: (number) x of the center,\n\t     o     h: (number) height,\n\t     o     height: (number) height,\n\t     o     path: (string) path command for the box,\n\t     o     r0: (number) radius of a circle that fully encloses the box,\n\t     o     r1: (number) radius of the smallest circle that can be enclosed,\n\t     o     r2: (number) radius of the largest circle that can be enclosed,\n\t     o     vb: (string) box as a viewbox command,\n\t     o     w: (number) width,\n\t     o     width: (number) width,\n\t     o     x2: (number) x of the right side,\n\t     o     x: (number) x of the left side,\n\t     o     y2: (number) y of the bottom edge,\n\t     o     y: (number) y of the top edge\n\t     o }\n\t    \\*/\n\t    elproto.getBBox = function (isWithoutTransform) {\n\t        if (!Snap.Matrix || !Snap.path) {\n\t            return this.node.getBBox();\n\t        }\n\t        var el = this,\n\t            m = new Snap.Matrix;\n\t        if (el.removed) {\n\t            return Snap._.box();\n\t        }\n\t        while (el.type == \"use\") {\n\t            if (!isWithoutTransform) {\n\t                m = m.add(el.transform().localMatrix.translate(el.attr(\"x\") || 0, el.attr(\"y\") || 0));\n\t            }\n\t            if (el.original) {\n\t                el = el.original;\n\t            } else {\n\t                var href = el.attr(\"xlink:href\");\n\t                el = el.original = el.node.ownerDocument.getElementById(href.substring(href.indexOf(\"#\") + 1));\n\t            }\n\t        }\n\t        var _ = el._,\n\t            pathfinder = Snap.path.get[el.type] || Snap.path.get.deflt;\n\t        try {\n\t            if (isWithoutTransform) {\n\t                _.bboxwt = pathfinder ? Snap.path.getBBox(el.realPath = pathfinder(el)) : Snap._.box(el.node.getBBox());\n\t                return Snap._.box(_.bboxwt);\n\t            } else {\n\t                el.realPath = pathfinder(el);\n\t                el.matrix = el.transform().localMatrix;\n\t                _.bbox = Snap.path.getBBox(Snap.path.map(el.realPath, m.add(el.matrix)));\n\t                return Snap._.box(_.bbox);\n\t            }\n\t        } catch (e) {\n\t            // Firefox doesn’t give you bbox of hidden element\n\t            return Snap._.box();\n\t        }\n\t    };\n\t    var propString = function () {\n\t        return this.string;\n\t    };\n\t    function extractTransform(el, tstr) {\n\t        if (tstr == null) {\n\t            var doReturn = true;\n\t            if (el.type == \"linearGradient\" || el.type == \"radialGradient\") {\n\t                tstr = el.node.getAttribute(\"gradientTransform\");\n\t            } else if (el.type == \"pattern\") {\n\t                tstr = el.node.getAttribute(\"patternTransform\");\n\t            } else {\n\t                tstr = el.node.getAttribute(\"transform\");\n\t            }\n\t            if (!tstr) {\n\t                return new Snap.Matrix;\n\t            }\n\t            tstr = Snap._.svgTransform2string(tstr);\n\t        } else {\n\t            if (!Snap._.rgTransform.test(tstr)) {\n\t                tstr = Snap._.svgTransform2string(tstr);\n\t            } else {\n\t                tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || E);\n\t            }\n\t            if (is(tstr, \"array\")) {\n\t                tstr = Snap.path ? Snap.path.toString.call(tstr) : Str(tstr);\n\t            }\n\t            el._.transform = tstr;\n\t        }\n\t        var m = Snap._.transform2matrix(tstr, el.getBBox(1));\n\t        if (doReturn) {\n\t            return m;\n\t        } else {\n\t            el.matrix = m;\n\t        }\n\t    }\n\t    /*\\\n\t     * Element.transform\n\t     [ method ]\n\t     **\n\t     * Gets or sets transformation of the element\n\t     **\n\t     - tstr (string) transform string in Snap or SVG format\n\t     = (Element) the current element\n\t     * or\n\t     = (object) transformation descriptor:\n\t     o {\n\t     o     string (string) transform string,\n\t     o     globalMatrix (Matrix) matrix of all transformations applied to element or its parents,\n\t     o     localMatrix (Matrix) matrix of transformations applied only to the element,\n\t     o     diffMatrix (Matrix) matrix of difference between global and local transformations,\n\t     o     global (string) global transformation as string,\n\t     o     local (string) local transformation as string,\n\t     o     toString (function) returns `string` property\n\t     o }\n\t    \\*/\n\t    elproto.transform = function (tstr) {\n\t        var _ = this._;\n\t        if (tstr == null) {\n\t            var papa = this,\n\t                global = new Snap.Matrix(this.node.getCTM()),\n\t                local = extractTransform(this),\n\t                ms = [local],\n\t                m = new Snap.Matrix,\n\t                i,\n\t                localString = local.toTransformString(),\n\t                string = Str(local) == Str(this.matrix) ?\n\t                            Str(_.transform) : localString;\n\t            while (papa.type != \"svg\" && (papa = papa.parent())) {\n\t                ms.push(extractTransform(papa));\n\t            }\n\t            i = ms.length;\n\t            while (i--) {\n\t                m.add(ms[i]);\n\t            }\n\t            return {\n\t                string: string,\n\t                globalMatrix: global,\n\t                totalMatrix: m,\n\t                localMatrix: local,\n\t                diffMatrix: global.clone().add(local.invert()),\n\t                global: global.toTransformString(),\n\t                total: m.toTransformString(),\n\t                local: localString,\n\t                toString: propString\n\t            };\n\t        }\n\t        if (tstr instanceof Snap.Matrix) {\n\t            this.matrix = tstr;\n\t            this._.transform = tstr.toTransformString();\n\t        } else {\n\t            extractTransform(this, tstr);\n\t        }\n\t\n\t        if (this.node) {\n\t            if (this.type == \"linearGradient\" || this.type == \"radialGradient\") {\n\t                $(this.node, {gradientTransform: this.matrix});\n\t            } else if (this.type == \"pattern\") {\n\t                $(this.node, {patternTransform: this.matrix});\n\t            } else {\n\t                $(this.node, {transform: this.matrix});\n\t            }\n\t        }\n\t\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.parent\n\t     [ method ]\n\t     **\n\t     * Returns the element's parent\n\t     **\n\t     = (Element) the parent element\n\t    \\*/\n\t    elproto.parent = function () {\n\t        return wrap(this.node.parentNode);\n\t    };\n\t    /*\\\n\t     * Element.append\n\t     [ method ]\n\t     **\n\t     * Appends the given element to current one\n\t     **\n\t     - el (Element|Set) element to append\n\t     = (Element) the parent element\n\t    \\*/\n\t    /*\\\n\t     * Element.add\n\t     [ method ]\n\t     **\n\t     * See @Element.append\n\t    \\*/\n\t    elproto.append = elproto.add = function (el) {\n\t        if (el) {\n\t            if (el.type == \"set\") {\n\t                var it = this;\n\t                el.forEach(function (el) {\n\t                    it.add(el);\n\t                });\n\t                return this;\n\t            }\n\t            el = wrap(el);\n\t            this.node.appendChild(el.node);\n\t            el.paper = this.paper;\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.appendTo\n\t     [ method ]\n\t     **\n\t     * Appends the current element to the given one\n\t     **\n\t     - el (Element) parent element to append to\n\t     = (Element) the child element\n\t    \\*/\n\t    elproto.appendTo = function (el) {\n\t        if (el) {\n\t            el = wrap(el);\n\t            el.append(this);\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.prepend\n\t     [ method ]\n\t     **\n\t     * Prepends the given element to the current one\n\t     **\n\t     - el (Element) element to prepend\n\t     = (Element) the parent element\n\t    \\*/\n\t    elproto.prepend = function (el) {\n\t        if (el) {\n\t            if (el.type == \"set\") {\n\t                var it = this,\n\t                    first;\n\t                el.forEach(function (el) {\n\t                    if (first) {\n\t                        first.after(el);\n\t                    } else {\n\t                        it.prepend(el);\n\t                    }\n\t                    first = el;\n\t                });\n\t                return this;\n\t            }\n\t            el = wrap(el);\n\t            var parent = el.parent();\n\t            this.node.insertBefore(el.node, this.node.firstChild);\n\t            this.add && this.add();\n\t            el.paper = this.paper;\n\t            this.parent() && this.parent().add();\n\t            parent && parent.add();\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.prependTo\n\t     [ method ]\n\t     **\n\t     * Prepends the current element to the given one\n\t     **\n\t     - el (Element) parent element to prepend to\n\t     = (Element) the child element\n\t    \\*/\n\t    elproto.prependTo = function (el) {\n\t        el = wrap(el);\n\t        el.prepend(this);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.before\n\t     [ method ]\n\t     **\n\t     * Inserts given element before the current one\n\t     **\n\t     - el (Element) element to insert\n\t     = (Element) the parent element\n\t    \\*/\n\t    elproto.before = function (el) {\n\t        if (el.type == \"set\") {\n\t            var it = this;\n\t            el.forEach(function (el) {\n\t                var parent = el.parent();\n\t                it.node.parentNode.insertBefore(el.node, it.node);\n\t                parent && parent.add();\n\t            });\n\t            this.parent().add();\n\t            return this;\n\t        }\n\t        el = wrap(el);\n\t        var parent = el.parent();\n\t        this.node.parentNode.insertBefore(el.node, this.node);\n\t        this.parent() && this.parent().add();\n\t        parent && parent.add();\n\t        el.paper = this.paper;\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.after\n\t     [ method ]\n\t     **\n\t     * Inserts given element after the current one\n\t     **\n\t     - el (Element) element to insert\n\t     = (Element) the parent element\n\t    \\*/\n\t    elproto.after = function (el) {\n\t        el = wrap(el);\n\t        var parent = el.parent();\n\t        if (this.node.nextSibling) {\n\t            this.node.parentNode.insertBefore(el.node, this.node.nextSibling);\n\t        } else {\n\t            this.node.parentNode.appendChild(el.node);\n\t        }\n\t        this.parent() && this.parent().add();\n\t        parent && parent.add();\n\t        el.paper = this.paper;\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.insertBefore\n\t     [ method ]\n\t     **\n\t     * Inserts the element after the given one\n\t     **\n\t     - el (Element) element next to whom insert to\n\t     = (Element) the parent element\n\t    \\*/\n\t    elproto.insertBefore = function (el) {\n\t        el = wrap(el);\n\t        var parent = this.parent();\n\t        el.node.parentNode.insertBefore(this.node, el.node);\n\t        this.paper = el.paper;\n\t        parent && parent.add();\n\t        el.parent() && el.parent().add();\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.insertAfter\n\t     [ method ]\n\t     **\n\t     * Inserts the element after the given one\n\t     **\n\t     - el (Element) element next to whom insert to\n\t     = (Element) the parent element\n\t    \\*/\n\t    elproto.insertAfter = function (el) {\n\t        el = wrap(el);\n\t        var parent = this.parent();\n\t        el.node.parentNode.insertBefore(this.node, el.node.nextSibling);\n\t        this.paper = el.paper;\n\t        parent && parent.add();\n\t        el.parent() && el.parent().add();\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.remove\n\t     [ method ]\n\t     **\n\t     * Removes element from the DOM\n\t     = (Element) the detached element\n\t    \\*/\n\t    elproto.remove = function () {\n\t        var parent = this.parent();\n\t        this.node.parentNode && this.node.parentNode.removeChild(this.node);\n\t        delete this.paper;\n\t        this.removed = true;\n\t        parent && parent.add();\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.select\n\t     [ method ]\n\t     **\n\t     * Gathers the nested @Element matching the given set of CSS selectors\n\t     **\n\t     - query (string) CSS selector\n\t     = (Element) result of query selection\n\t    \\*/\n\t    elproto.select = function (query) {\n\t        query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n\t        return wrap(this.node.querySelector(query));\n\t    };\n\t    /*\\\n\t     * Element.selectAll\n\t     [ method ]\n\t     **\n\t     * Gathers nested @Element objects matching the given set of CSS selectors\n\t     **\n\t     - query (string) CSS selector\n\t     = (Set|array) result of query selection\n\t    \\*/\n\t    elproto.selectAll = function (query) {\n\t        var nodelist = this.node.querySelectorAll(query),\n\t            set = (Snap.set || Array)();\n\t        for (var i = 0; i < nodelist.length; i++) {\n\t            set.push(wrap(nodelist[i]));\n\t        }\n\t        return set;\n\t    };\n\t    /*\\\n\t     * Element.asPX\n\t     [ method ]\n\t     **\n\t     * Returns given attribute of the element as a `px` value (not %, em, etc.)\n\t     **\n\t     - attr (string) attribute name\n\t     - value (string) #optional attribute value\n\t     = (Element) result of query selection\n\t    \\*/\n\t    elproto.asPX = function (attr, value) {\n\t        if (value == null) {\n\t            value = this.attr(attr);\n\t        }\n\t        return +unit2px(this, attr, value);\n\t    };\n\t    // SIERRA Element.use(): I suggest adding a note about how to access the original element the returned <use> instantiates. It's a part of SVG with which ordinary web developers may be least familiar.\n\t    /*\\\n\t     * Element.use\n\t     [ method ]\n\t     **\n\t     * Creates a `<use>` element linked to the current element\n\t     **\n\t     = (Element) the `<use>` element\n\t    \\*/\n\t    elproto.use = function () {\n\t        var use,\n\t            id = this.node.id;\n\t        if (!id) {\n\t            id = this.id;\n\t            $(this.node, {\n\t                id: id\n\t            });\n\t        }\n\t        if (this.type == \"linearGradient\" || this.type == \"radialGradient\" ||\n\t            this.type == \"pattern\") {\n\t            use = make(this.type, this.node.parentNode);\n\t        } else {\n\t            use = make(\"use\", this.node.parentNode);\n\t        }\n\t        $(use.node, {\n\t            \"xlink:href\": \"#\" + id\n\t        });\n\t        use.original = this;\n\t        return use;\n\t    };\n\t    function fixids(el) {\n\t        var els = el.selectAll(\"*\"),\n\t            it,\n\t            url = /^\\s*url\\((\"|'|)(.*)\\1\\)\\s*$/,\n\t            ids = [],\n\t            uses = {};\n\t        function urltest(it, name) {\n\t            var val = $(it.node, name);\n\t            val = val && val.match(url);\n\t            val = val && val[2];\n\t            if (val && val.charAt() == \"#\") {\n\t                val = val.substring(1);\n\t            } else {\n\t                return;\n\t            }\n\t            if (val) {\n\t                uses[val] = (uses[val] || []).concat(function (id) {\n\t                    var attr = {};\n\t                    attr[name] = URL(id);\n\t                    $(it.node, attr);\n\t                });\n\t            }\n\t        }\n\t        function linktest(it) {\n\t            var val = $(it.node, \"xlink:href\");\n\t            if (val && val.charAt() == \"#\") {\n\t                val = val.substring(1);\n\t            } else {\n\t                return;\n\t            }\n\t            if (val) {\n\t                uses[val] = (uses[val] || []).concat(function (id) {\n\t                    it.attr(\"xlink:href\", \"#\" + id);\n\t                });\n\t            }\n\t        }\n\t        for (var i = 0, ii = els.length; i < ii; i++) {\n\t            it = els[i];\n\t            urltest(it, \"fill\");\n\t            urltest(it, \"stroke\");\n\t            urltest(it, \"filter\");\n\t            urltest(it, \"mask\");\n\t            urltest(it, \"clip-path\");\n\t            linktest(it);\n\t            var oldid = $(it.node, \"id\");\n\t            if (oldid) {\n\t                $(it.node, {id: it.id});\n\t                ids.push({\n\t                    old: oldid,\n\t                    id: it.id\n\t                });\n\t            }\n\t        }\n\t        for (i = 0, ii = ids.length; i < ii; i++) {\n\t            var fs = uses[ids[i].old];\n\t            if (fs) {\n\t                for (var j = 0, jj = fs.length; j < jj; j++) {\n\t                    fs[j](ids[i].id);\n\t                }\n\t            }\n\t        }\n\t    }\n\t    /*\\\n\t     * Element.clone\n\t     [ method ]\n\t     **\n\t     * Creates a clone of the element and inserts it after the element\n\t     **\n\t     = (Element) the clone\n\t    \\*/\n\t    elproto.clone = function () {\n\t        var clone = wrap(this.node.cloneNode(true));\n\t        if ($(clone.node, \"id\")) {\n\t            $(clone.node, {id: clone.id});\n\t        }\n\t        fixids(clone);\n\t        clone.insertAfter(this);\n\t        return clone;\n\t    };\n\t    /*\\\n\t     * Element.toDefs\n\t     [ method ]\n\t     **\n\t     * Moves element to the shared `<defs>` area\n\t     **\n\t     = (Element) the element\n\t    \\*/\n\t    elproto.toDefs = function () {\n\t        var defs = getSomeDefs(this);\n\t        defs.appendChild(this.node);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.toPattern\n\t     [ method ]\n\t     **\n\t     * Creates a `<pattern>` element from the current element\n\t     **\n\t     * To create a pattern you have to specify the pattern rect:\n\t     - x (string|number)\n\t     - y (string|number)\n\t     - width (string|number)\n\t     - height (string|number)\n\t     = (Element) the `<pattern>` element\n\t     * You can use pattern later on as an argument for `fill` attribute:\n\t     | var p = paper.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\n\t     |         fill: \"none\",\n\t     |         stroke: \"#bada55\",\n\t     |         strokeWidth: 5\n\t     |     }).pattern(0, 0, 10, 10),\n\t     |     c = paper.circle(200, 200, 100);\n\t     | c.attr({\n\t     |     fill: p\n\t     | });\n\t    \\*/\n\t    elproto.pattern = elproto.toPattern = function (x, y, width, height) {\n\t        var p = make(\"pattern\", getSomeDefs(this));\n\t        if (x == null) {\n\t            x = this.getBBox();\n\t        }\n\t        if (is(x, \"object\") && \"x\" in x) {\n\t            y = x.y;\n\t            width = x.width;\n\t            height = x.height;\n\t            x = x.x;\n\t        }\n\t        $(p.node, {\n\t            x: x,\n\t            y: y,\n\t            width: width,\n\t            height: height,\n\t            patternUnits: \"userSpaceOnUse\",\n\t            id: p.id,\n\t            viewBox: [x, y, width, height].join(\" \")\n\t        });\n\t        p.node.appendChild(this.node);\n\t        return p;\n\t    };\n\t// SIERRA Element.marker(): clarify what a reference point is. E.g., helps you offset the object from its edge such as when centering it over a path.\n\t// SIERRA Element.marker(): I suggest the method should accept default reference point values.  Perhaps centered with (refX = width/2) and (refY = height/2)? Also, couldn't it assume the element's current _width_ and _height_? And please specify what _x_ and _y_ mean: offsets? If so, from where?  Couldn't they also be assigned default values?\n\t    /*\\\n\t     * Element.marker\n\t     [ method ]\n\t     **\n\t     * Creates a `<marker>` element from the current element\n\t     **\n\t     * To create a marker you have to specify the bounding rect and reference point:\n\t     - x (number)\n\t     - y (number)\n\t     - width (number)\n\t     - height (number)\n\t     - refX (number)\n\t     - refY (number)\n\t     = (Element) the `<marker>` element\n\t     * You can specify the marker later as an argument for `marker-start`, `marker-end`, `marker-mid`, and `marker` attributes. The `marker` attribute places the marker at every point along the path, and `marker-mid` places them at every point except the start and end.\n\t    \\*/\n\t    // TODO add usage for markers\n\t    elproto.marker = function (x, y, width, height, refX, refY) {\n\t        var p = make(\"marker\", getSomeDefs(this));\n\t        if (x == null) {\n\t            x = this.getBBox();\n\t        }\n\t        if (is(x, \"object\") && \"x\" in x) {\n\t            y = x.y;\n\t            width = x.width;\n\t            height = x.height;\n\t            refX = x.refX || x.cx;\n\t            refY = x.refY || x.cy;\n\t            x = x.x;\n\t        }\n\t        $(p.node, {\n\t            viewBox: [x, y, width, height].join(\" \"),\n\t            markerWidth: width,\n\t            markerHeight: height,\n\t            orient: \"auto\",\n\t            refX: refX || 0,\n\t            refY: refY || 0,\n\t            id: p.id\n\t        });\n\t        p.node.appendChild(this.node);\n\t        return p;\n\t    };\n\t    // animation\n\t    function slice(from, to, f) {\n\t        return function (arr) {\n\t            var res = arr.slice(from, to);\n\t            if (res.length == 1) {\n\t                res = res[0];\n\t            }\n\t            return f ? f(res) : res;\n\t        };\n\t    }\n\t    var Animation = function (attr, ms, easing, callback) {\n\t        if (typeof easing == \"function\" && !easing.length) {\n\t            callback = easing;\n\t            easing = mina.linear;\n\t        }\n\t        this.attr = attr;\n\t        this.dur = ms;\n\t        easing && (this.easing = easing);\n\t        callback && (this.callback = callback);\n\t    };\n\t    Snap._.Animation = Animation;\n\t    /*\\\n\t     * Snap.animation\n\t     [ method ]\n\t     **\n\t     * Creates an animation object\n\t     **\n\t     - attr (object) attributes of final destination\n\t     - duration (number) duration of the animation, in milliseconds\n\t     - easing (function) #optional one of easing functions of @mina or custom one\n\t     - callback (function) #optional callback function that fires when animation ends\n\t     = (object) animation object\n\t    \\*/\n\t    Snap.animation = function (attr, ms, easing, callback) {\n\t        return new Animation(attr, ms, easing, callback);\n\t    };\n\t    /*\\\n\t     * Element.inAnim\n\t     [ method ]\n\t     **\n\t     * Returns a set of animations that may be able to manipulate the current element\n\t     **\n\t     = (object) in format:\n\t     o {\n\t     o     anim (object) animation object,\n\t     o     mina (object) @mina object,\n\t     o     curStatus (number) 0..1 — status of the animation: 0 — just started, 1 — just finished,\n\t     o     status (function) gets or sets the status of the animation,\n\t     o     stop (function) stops the animation\n\t     o }\n\t    \\*/\n\t    elproto.inAnim = function () {\n\t        var el = this,\n\t            res = [];\n\t        for (var id in el.anims) if (el.anims[has](id)) {\n\t            (function (a) {\n\t                res.push({\n\t                    anim: new Animation(a._attrs, a.dur, a.easing, a._callback),\n\t                    mina: a,\n\t                    curStatus: a.status(),\n\t                    status: function (val) {\n\t                        return a.status(val);\n\t                    },\n\t                    stop: function () {\n\t                        a.stop();\n\t                    }\n\t                });\n\t            }(el.anims[id]));\n\t        }\n\t        return res;\n\t    };\n\t    /*\\\n\t     * Snap.animate\n\t     [ method ]\n\t     **\n\t     * Runs generic animation of one number into another with a caring function\n\t     **\n\t     - from (number|array) number or array of numbers\n\t     - to (number|array) number or array of numbers\n\t     - setter (function) caring function that accepts one number argument\n\t     - duration (number) duration, in milliseconds\n\t     - easing (function) #optional easing function from @mina or custom\n\t     - callback (function) #optional callback function to execute when animation ends\n\t     = (object) animation object in @mina format\n\t     o {\n\t     o     id (string) animation id, consider it read-only,\n\t     o     duration (function) gets or sets the duration of the animation,\n\t     o     easing (function) easing,\n\t     o     speed (function) gets or sets the speed of the animation,\n\t     o     status (function) gets or sets the status of the animation,\n\t     o     stop (function) stops the animation\n\t     o }\n\t     | var rect = Snap().rect(0, 0, 10, 10);\n\t     | Snap.animate(0, 10, function (val) {\n\t     |     rect.attr({\n\t     |         x: val\n\t     |     });\n\t     | }, 1000);\n\t     | // in given context is equivalent to\n\t     | rect.animate({x: 10}, 1000);\n\t    \\*/\n\t    Snap.animate = function (from, to, setter, ms, easing, callback) {\n\t        if (typeof easing == \"function\" && !easing.length) {\n\t            callback = easing;\n\t            easing = mina.linear;\n\t        }\n\t        var now = mina.time(),\n\t            anim = mina(from, to, now, now + ms, mina.time, setter, easing);\n\t        callback && eve.once(\"mina.finish.\" + anim.id, callback);\n\t        return anim;\n\t    };\n\t    /*\\\n\t     * Element.stop\n\t     [ method ]\n\t     **\n\t     * Stops all the animations for the current element\n\t     **\n\t     = (Element) the current element\n\t    \\*/\n\t    elproto.stop = function () {\n\t        var anims = this.inAnim();\n\t        for (var i = 0, ii = anims.length; i < ii; i++) {\n\t            anims[i].stop();\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.animate\n\t     [ method ]\n\t     **\n\t     * Animates the given attributes of the element\n\t     **\n\t     - attrs (object) key-value pairs of destination attributes\n\t     - duration (number) duration of the animation in milliseconds\n\t     - easing (function) #optional easing function from @mina or custom\n\t     - callback (function) #optional callback function that executes when the animation ends\n\t     = (Element) the current element\n\t    \\*/\n\t    elproto.animate = function (attrs, ms, easing, callback) {\n\t        if (typeof easing == \"function\" && !easing.length) {\n\t            callback = easing;\n\t            easing = mina.linear;\n\t        }\n\t        if (attrs instanceof Animation) {\n\t            callback = attrs.callback;\n\t            easing = attrs.easing;\n\t            ms = easing.dur;\n\t            attrs = attrs.attr;\n\t        }\n\t        var fkeys = [], tkeys = [], keys = {}, from, to, f, eq,\n\t            el = this;\n\t        for (var key in attrs) if (attrs[has](key)) {\n\t            if (el.equal) {\n\t                eq = el.equal(key, Str(attrs[key]));\n\t                from = eq.from;\n\t                to = eq.to;\n\t                f = eq.f;\n\t            } else {\n\t                from = +el.attr(key);\n\t                to = +attrs[key];\n\t            }\n\t            var len = is(from, \"array\") ? from.length : 1;\n\t            keys[key] = slice(fkeys.length, fkeys.length + len, f);\n\t            fkeys = fkeys.concat(from);\n\t            tkeys = tkeys.concat(to);\n\t        }\n\t        var now = mina.time(),\n\t            anim = mina(fkeys, tkeys, now, now + ms, mina.time, function (val) {\n\t                var attr = {};\n\t                for (var key in keys) if (keys[has](key)) {\n\t                    attr[key] = keys[key](val);\n\t                }\n\t                el.attr(attr);\n\t            }, easing);\n\t        el.anims[anim.id] = anim;\n\t        anim._attrs = attrs;\n\t        anim._callback = callback;\n\t        eve(\"snap.animcreated.\" + el.id, anim);\n\t        eve.once(\"mina.finish.\" + anim.id, function () {\n\t            delete el.anims[anim.id];\n\t            callback && callback.call(el);\n\t        });\n\t        eve.once(\"mina.stop.\" + anim.id, function () {\n\t            delete el.anims[anim.id];\n\t        });\n\t        return el;\n\t    };\n\t    var eldata = {};\n\t    /*\\\n\t     * Element.data\n\t     [ method ]\n\t     **\n\t     * Adds or retrieves given value associated with given key. (Don’t confuse\n\t     * with `data-` attributes)\n\t     *\n\t     * See also @Element.removeData\n\t     - key (string) key to store data\n\t     - value (any) #optional value to store\n\t     = (object) @Element\n\t     * or, if value is not specified:\n\t     = (any) value\n\t     > Usage\n\t     | for (var i = 0, i < 5, i++) {\n\t     |     paper.circle(10 + 15 * i, 10, 10)\n\t     |          .attr({fill: \"#000\"})\n\t     |          .data(\"i\", i)\n\t     |          .click(function () {\n\t     |             alert(this.data(\"i\"));\n\t     |          });\n\t     | }\n\t    \\*/\n\t    elproto.data = function (key, value) {\n\t        var data = eldata[this.id] = eldata[this.id] || {};\n\t        if (arguments.length == 0){\n\t            eve(\"snap.data.get.\" + this.id, this, data, null);\n\t            return data;\n\t        }\n\t        if (arguments.length == 1) {\n\t            if (Snap.is(key, \"object\")) {\n\t                for (var i in key) if (key[has](i)) {\n\t                    this.data(i, key[i]);\n\t                }\n\t                return this;\n\t            }\n\t            eve(\"snap.data.get.\" + this.id, this, data[key], key);\n\t            return data[key];\n\t        }\n\t        data[key] = value;\n\t        eve(\"snap.data.set.\" + this.id, this, value, key);\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.removeData\n\t     [ method ]\n\t     **\n\t     * Removes value associated with an element by given key.\n\t     * If key is not provided, removes all the data of the element.\n\t     - key (string) #optional key\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.removeData = function (key) {\n\t        if (key == null) {\n\t            eldata[this.id] = {};\n\t        } else {\n\t            eldata[this.id] && delete eldata[this.id][key];\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.outerSVG\n\t     [ method ]\n\t     **\n\t     * Returns SVG code for the element, equivalent to HTML's `outerHTML`.\n\t     *\n\t     * See also @Element.innerSVG\n\t     = (string) SVG code for the element\n\t    \\*/\n\t    /*\\\n\t     * Element.toString\n\t     [ method ]\n\t     **\n\t     * See @Element.outerSVG\n\t    \\*/\n\t    elproto.outerSVG = elproto.toString = toString(1);\n\t    /*\\\n\t     * Element.innerSVG\n\t     [ method ]\n\t     **\n\t     * Returns SVG code for the element's contents, equivalent to HTML's `innerHTML`\n\t     = (string) SVG code for the element\n\t    \\*/\n\t    elproto.innerSVG = toString();\n\t    function toString(type) {\n\t        return function () {\n\t            var res = type ? \"<\" + this.type : \"\",\n\t                attr = this.node.attributes,\n\t                chld = this.node.childNodes;\n\t            if (type) {\n\t                for (var i = 0, ii = attr.length; i < ii; i++) {\n\t                    res += \" \" + attr[i].name + '=\"' +\n\t                            attr[i].value.replace(/\"/g, '\\\\\"') + '\"';\n\t                }\n\t            }\n\t            if (chld.length) {\n\t                type && (res += \">\");\n\t                for (i = 0, ii = chld.length; i < ii; i++) {\n\t                    if (chld[i].nodeType == 3) {\n\t                        res += chld[i].nodeValue;\n\t                    } else if (chld[i].nodeType == 1) {\n\t                        res += wrap(chld[i]).toString();\n\t                    }\n\t                }\n\t                type && (res += \"</\" + this.type + \">\");\n\t            } else {\n\t                type && (res += \"/>\");\n\t            }\n\t            return res;\n\t        };\n\t    }\n\t    elproto.toDataURL = function () {\n\t        if (window && window.btoa) {\n\t            var bb = this.getBBox(),\n\t                svg = Snap.format('<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"{width}\" height=\"{height}\" viewBox=\"{x} {y} {width} {height}\">{contents}</svg>', {\n\t                x: +bb.x.toFixed(3),\n\t                y: +bb.y.toFixed(3),\n\t                width: +bb.width.toFixed(3),\n\t                height: +bb.height.toFixed(3),\n\t                contents: this.outerSVG()\n\t            });\n\t            return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svg)));\n\t        }\n\t    };\n\t    /*\\\n\t     * Fragment.select\n\t     [ method ]\n\t     **\n\t     * See @Element.select\n\t    \\*/\n\t    Fragment.prototype.select = elproto.select;\n\t    /*\\\n\t     * Fragment.selectAll\n\t     [ method ]\n\t     **\n\t     * See @Element.selectAll\n\t    \\*/\n\t    Fragment.prototype.selectAll = elproto.selectAll;\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var objectToString = Object.prototype.toString,\n\t        Str = String,\n\t        math = Math,\n\t        E = \"\";\n\t    function Matrix(a, b, c, d, e, f) {\n\t        if (b == null && objectToString.call(a) == \"[object SVGMatrix]\") {\n\t            this.a = a.a;\n\t            this.b = a.b;\n\t            this.c = a.c;\n\t            this.d = a.d;\n\t            this.e = a.e;\n\t            this.f = a.f;\n\t            return;\n\t        }\n\t        if (a != null) {\n\t            this.a = +a;\n\t            this.b = +b;\n\t            this.c = +c;\n\t            this.d = +d;\n\t            this.e = +e;\n\t            this.f = +f;\n\t        } else {\n\t            this.a = 1;\n\t            this.b = 0;\n\t            this.c = 0;\n\t            this.d = 1;\n\t            this.e = 0;\n\t            this.f = 0;\n\t        }\n\t    }\n\t    (function (matrixproto) {\n\t        /*\\\n\t         * Matrix.add\n\t         [ method ]\n\t         **\n\t         * Adds the given matrix to existing one\n\t         - a (number)\n\t         - b (number)\n\t         - c (number)\n\t         - d (number)\n\t         - e (number)\n\t         - f (number)\n\t         * or\n\t         - matrix (object) @Matrix\n\t        \\*/\n\t        matrixproto.add = function (a, b, c, d, e, f) {\n\t            var out = [[], [], []],\n\t                m = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]],\n\t                matrix = [[a, c, e], [b, d, f], [0, 0, 1]],\n\t                x, y, z, res;\n\t\n\t            if (a && a instanceof Matrix) {\n\t                matrix = [[a.a, a.c, a.e], [a.b, a.d, a.f], [0, 0, 1]];\n\t            }\n\t\n\t            for (x = 0; x < 3; x++) {\n\t                for (y = 0; y < 3; y++) {\n\t                    res = 0;\n\t                    for (z = 0; z < 3; z++) {\n\t                        res += m[x][z] * matrix[z][y];\n\t                    }\n\t                    out[x][y] = res;\n\t                }\n\t            }\n\t            this.a = out[0][0];\n\t            this.b = out[1][0];\n\t            this.c = out[0][1];\n\t            this.d = out[1][1];\n\t            this.e = out[0][2];\n\t            this.f = out[1][2];\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Matrix.invert\n\t         [ method ]\n\t         **\n\t         * Returns an inverted version of the matrix\n\t         = (object) @Matrix\n\t        \\*/\n\t        matrixproto.invert = function () {\n\t            var me = this,\n\t                x = me.a * me.d - me.b * me.c;\n\t            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n\t        };\n\t        /*\\\n\t         * Matrix.clone\n\t         [ method ]\n\t         **\n\t         * Returns a copy of the matrix\n\t         = (object) @Matrix\n\t        \\*/\n\t        matrixproto.clone = function () {\n\t            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n\t        };\n\t        /*\\\n\t         * Matrix.translate\n\t         [ method ]\n\t         **\n\t         * Translate the matrix\n\t         - x (number) horizontal offset distance\n\t         - y (number) vertical offset distance\n\t        \\*/\n\t        matrixproto.translate = function (x, y) {\n\t            return this.add(1, 0, 0, 1, x, y);\n\t        };\n\t        /*\\\n\t         * Matrix.scale\n\t         [ method ]\n\t         **\n\t         * Scales the matrix\n\t         - x (number) amount to be scaled, with `1` resulting in no change\n\t         - y (number) #optional amount to scale along the vertical axis. (Otherwise `x` applies to both axes.)\n\t         - cx (number) #optional horizontal origin point from which to scale\n\t         - cy (number) #optional vertical origin point from which to scale\n\t         * Default cx, cy is the middle point of the element.\n\t        \\*/\n\t        matrixproto.scale = function (x, y, cx, cy) {\n\t            y == null && (y = x);\n\t            (cx || cy) && this.add(1, 0, 0, 1, cx, cy);\n\t            this.add(x, 0, 0, y, 0, 0);\n\t            (cx || cy) && this.add(1, 0, 0, 1, -cx, -cy);\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Matrix.rotate\n\t         [ method ]\n\t         **\n\t         * Rotates the matrix\n\t         - a (number) angle of rotation, in degrees\n\t         - x (number) horizontal origin point from which to rotate\n\t         - y (number) vertical origin point from which to rotate\n\t        \\*/\n\t        matrixproto.rotate = function (a, x, y) {\n\t            a = Snap.rad(a);\n\t            x = x || 0;\n\t            y = y || 0;\n\t            var cos = +math.cos(a).toFixed(9),\n\t                sin = +math.sin(a).toFixed(9);\n\t            this.add(cos, sin, -sin, cos, x, y);\n\t            return this.add(1, 0, 0, 1, -x, -y);\n\t        };\n\t        /*\\\n\t         * Matrix.x\n\t         [ method ]\n\t         **\n\t         * Returns x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n\t         - x (number)\n\t         - y (number)\n\t         = (number) x\n\t        \\*/\n\t        matrixproto.x = function (x, y) {\n\t            return x * this.a + y * this.c + this.e;\n\t        };\n\t        /*\\\n\t         * Matrix.y\n\t         [ method ]\n\t         **\n\t         * Returns y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n\t         - x (number)\n\t         - y (number)\n\t         = (number) y\n\t        \\*/\n\t        matrixproto.y = function (x, y) {\n\t            return x * this.b + y * this.d + this.f;\n\t        };\n\t        matrixproto.get = function (i) {\n\t            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n\t        };\n\t        matrixproto.toString = function () {\n\t            return \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\";\n\t        };\n\t        matrixproto.offset = function () {\n\t            return [this.e.toFixed(4), this.f.toFixed(4)];\n\t        };\n\t        function norm(a) {\n\t            return a[0] * a[0] + a[1] * a[1];\n\t        }\n\t        function normalize(a) {\n\t            var mag = math.sqrt(norm(a));\n\t            a[0] && (a[0] /= mag);\n\t            a[1] && (a[1] /= mag);\n\t        }\n\t        /*\\\n\t         * Matrix.determinant\n\t         [ method ]\n\t         **\n\t         * Finds determinant of the given matrix.\n\t         = (number) determinant\n\t        \\*/\n\t        matrixproto.determinant = function () {\n\t            return this.a * this.d - this.b * this.c;\n\t        };\n\t        /*\\\n\t         * Matrix.split\n\t         [ method ]\n\t         **\n\t         * Splits matrix into primitive transformations\n\t         = (object) in format:\n\t         o dx (number) translation by x\n\t         o dy (number) translation by y\n\t         o scalex (number) scale by x\n\t         o scaley (number) scale by y\n\t         o shear (number) shear\n\t         o rotate (number) rotation in deg\n\t         o isSimple (boolean) could it be represented via simple transformations\n\t        \\*/\n\t        matrixproto.split = function () {\n\t            var out = {};\n\t            // translation\n\t            out.dx = this.e;\n\t            out.dy = this.f;\n\t\n\t            // scale and shear\n\t            var row = [[this.a, this.c], [this.b, this.d]];\n\t            out.scalex = math.sqrt(norm(row[0]));\n\t            normalize(row[0]);\n\t\n\t            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n\t            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\t\n\t            out.scaley = math.sqrt(norm(row[1]));\n\t            normalize(row[1]);\n\t            out.shear /= out.scaley;\n\t\n\t            if (this.determinant() < 0) {\n\t                out.scalex = -out.scalex;\n\t            }\n\t\n\t            // rotation\n\t            var sin = -row[0][1],\n\t                cos = row[1][1];\n\t            if (cos < 0) {\n\t                out.rotate = Snap.deg(math.acos(cos));\n\t                if (sin < 0) {\n\t                    out.rotate = 360 - out.rotate;\n\t                }\n\t            } else {\n\t                out.rotate = Snap.deg(math.asin(sin));\n\t            }\n\t\n\t            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n\t            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n\t            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n\t            return out;\n\t        };\n\t        /*\\\n\t         * Matrix.toTransformString\n\t         [ method ]\n\t         **\n\t         * Returns transform string that represents given matrix\n\t         = (string) transform string\n\t        \\*/\n\t        matrixproto.toTransformString = function (shorter) {\n\t            var s = shorter || this.split();\n\t            if (!+s.shear.toFixed(9)) {\n\t                s.scalex = +s.scalex.toFixed(4);\n\t                s.scaley = +s.scaley.toFixed(4);\n\t                s.rotate = +s.rotate.toFixed(4);\n\t                return  (s.dx || s.dy ? \"t\" + [+s.dx.toFixed(4), +s.dy.toFixed(4)] : E) +\n\t                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E) +\n\t                        (s.rotate ? \"r\" + [+s.rotate.toFixed(4), 0, 0] : E);\n\t            } else {\n\t                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n\t            }\n\t        };\n\t    })(Matrix.prototype);\n\t    /*\\\n\t     * Snap.Matrix\n\t     [ method ]\n\t     **\n\t     * Matrix constructor, extend on your own risk.\n\t     * To create matrices use @Snap.matrix.\n\t    \\*/\n\t    Snap.Matrix = Matrix;\n\t    /*\\\n\t     * Snap.matrix\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns a matrix based on the given parameters\n\t     - a (number)\n\t     - b (number)\n\t     - c (number)\n\t     - d (number)\n\t     - e (number)\n\t     - f (number)\n\t     * or\n\t     - svgMatrix (SVGMatrix)\n\t     = (object) @Matrix\n\t    \\*/\n\t    Snap.matrix = function (a, b, c, d, e, f) {\n\t        return new Matrix(a, b, c, d, e, f);\n\t    };\n\t});\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var has = \"hasOwnProperty\",\n\t        make = Snap._.make,\n\t        wrap = Snap._.wrap,\n\t        is = Snap.is,\n\t        getSomeDefs = Snap._.getSomeDefs,\n\t        reURLValue = /^url\\(#?([^)]+)\\)$/,\n\t        $ = Snap._.$,\n\t        URL = Snap.url,\n\t        Str = String,\n\t        separator = Snap._.separator,\n\t        E = \"\";\n\t    // Attributes event handlers\n\t    eve.on(\"snap.util.attr.mask\", function (value) {\n\t        if (value instanceof Element || value instanceof Fragment) {\n\t            eve.stop();\n\t            if (value instanceof Fragment && value.node.childNodes.length == 1) {\n\t                value = value.node.firstChild;\n\t                getSomeDefs(this).appendChild(value);\n\t                value = wrap(value);\n\t            }\n\t            if (value.type == \"mask\") {\n\t                var mask = value;\n\t            } else {\n\t                mask = make(\"mask\", getSomeDefs(this));\n\t                mask.node.appendChild(value.node);\n\t            }\n\t            !mask.node.id && $(mask.node, {\n\t                id: mask.id\n\t            });\n\t            $(this.node, {\n\t                mask: URL(mask.id)\n\t            });\n\t        }\n\t    });\n\t    (function (clipIt) {\n\t        eve.on(\"snap.util.attr.clip\", clipIt);\n\t        eve.on(\"snap.util.attr.clip-path\", clipIt);\n\t        eve.on(\"snap.util.attr.clipPath\", clipIt);\n\t    }(function (value) {\n\t        if (value instanceof Element || value instanceof Fragment) {\n\t            eve.stop();\n\t            if (value.type == \"clipPath\") {\n\t                var clip = value;\n\t            } else {\n\t                clip = make(\"clipPath\", getSomeDefs(this));\n\t                clip.node.appendChild(value.node);\n\t                !clip.node.id && $(clip.node, {\n\t                    id: clip.id\n\t                });\n\t            }\n\t            $(this.node, {\n\t                \"clip-path\": URL(clip.node.id || clip.id)\n\t            });\n\t        }\n\t    }));\n\t    function fillStroke(name) {\n\t        return function (value) {\n\t            eve.stop();\n\t            if (value instanceof Fragment && value.node.childNodes.length == 1 &&\n\t                (value.node.firstChild.tagName == \"radialGradient\" ||\n\t                value.node.firstChild.tagName == \"linearGradient\" ||\n\t                value.node.firstChild.tagName == \"pattern\")) {\n\t                value = value.node.firstChild;\n\t                getSomeDefs(this).appendChild(value);\n\t                value = wrap(value);\n\t            }\n\t            if (value instanceof Element) {\n\t                if (value.type == \"radialGradient\" || value.type == \"linearGradient\"\n\t                   || value.type == \"pattern\") {\n\t                    if (!value.node.id) {\n\t                        $(value.node, {\n\t                            id: value.id\n\t                        });\n\t                    }\n\t                    var fill = URL(value.node.id);\n\t                } else {\n\t                    fill = value.attr(name);\n\t                }\n\t            } else {\n\t                fill = Snap.color(value);\n\t                if (fill.error) {\n\t                    var grad = Snap(getSomeDefs(this).ownerSVGElement).gradient(value);\n\t                    if (grad) {\n\t                        if (!grad.node.id) {\n\t                            $(grad.node, {\n\t                                id: grad.id\n\t                            });\n\t                        }\n\t                        fill = URL(grad.node.id);\n\t                    } else {\n\t                        fill = value;\n\t                    }\n\t                } else {\n\t                    fill = Str(fill);\n\t                }\n\t            }\n\t            var attrs = {};\n\t            attrs[name] = fill;\n\t            $(this.node, attrs);\n\t            this.node.style[name] = E;\n\t        };\n\t    }\n\t    eve.on(\"snap.util.attr.fill\", fillStroke(\"fill\"));\n\t    eve.on(\"snap.util.attr.stroke\", fillStroke(\"stroke\"));\n\t    var gradrg = /^([lr])(?:\\(([^)]*)\\))?(.*)$/i;\n\t    eve.on(\"snap.util.grad.parse\", function parseGrad(string) {\n\t        string = Str(string);\n\t        var tokens = string.match(gradrg);\n\t        if (!tokens) {\n\t            return null;\n\t        }\n\t        var type = tokens[1],\n\t            params = tokens[2],\n\t            stops = tokens[3];\n\t        params = params.split(/\\s*,\\s*/).map(function (el) {\n\t            return +el == el ? +el : el;\n\t        });\n\t        if (params.length == 1 && params[0] == 0) {\n\t            params = [];\n\t        }\n\t        stops = stops.split(\"-\");\n\t        stops = stops.map(function (el) {\n\t            el = el.split(\":\");\n\t            var out = {\n\t                color: el[0]\n\t            };\n\t            if (el[1]) {\n\t                out.offset = parseFloat(el[1]);\n\t            }\n\t            return out;\n\t        });\n\t        return {\n\t            type: type,\n\t            params: params,\n\t            stops: stops\n\t        };\n\t    });\n\t\n\t    eve.on(\"snap.util.attr.d\", function (value) {\n\t        eve.stop();\n\t        if (is(value, \"array\") && is(value[0], \"array\")) {\n\t            value = Snap.path.toString.call(value);\n\t        }\n\t        value = Str(value);\n\t        if (value.match(/[ruo]/i)) {\n\t            value = Snap.path.toAbsolute(value);\n\t        }\n\t        $(this.node, {d: value});\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.#text\", function (value) {\n\t        eve.stop();\n\t        value = Str(value);\n\t        var txt = glob.doc.createTextNode(value);\n\t        while (this.node.firstChild) {\n\t            this.node.removeChild(this.node.firstChild);\n\t        }\n\t        this.node.appendChild(txt);\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.path\", function (value) {\n\t        eve.stop();\n\t        this.attr({d: value});\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.class\", function (value) {\n\t        eve.stop();\n\t        this.node.className.baseVal = value;\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.viewBox\", function (value) {\n\t        var vb;\n\t        if (is(value, \"object\") && \"x\" in value) {\n\t            vb = [value.x, value.y, value.width, value.height].join(\" \");\n\t        } else if (is(value, \"array\")) {\n\t            vb = value.join(\" \");\n\t        } else {\n\t            vb = value;\n\t        }\n\t        $(this.node, {\n\t            viewBox: vb\n\t        });\n\t        eve.stop();\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.transform\", function (value) {\n\t        this.transform(value);\n\t        eve.stop();\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.r\", function (value) {\n\t        if (this.type == \"rect\") {\n\t            eve.stop();\n\t            $(this.node, {\n\t                rx: value,\n\t                ry: value\n\t            });\n\t        }\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.textpath\", function (value) {\n\t        eve.stop();\n\t        if (this.type == \"text\") {\n\t            var id, tp, node;\n\t            if (!value && this.textPath) {\n\t                tp = this.textPath;\n\t                while (tp.node.firstChild) {\n\t                    this.node.appendChild(tp.node.firstChild);\n\t                }\n\t                tp.remove();\n\t                delete this.textPath;\n\t                return;\n\t            }\n\t            if (is(value, \"string\")) {\n\t                var defs = getSomeDefs(this),\n\t                    path = wrap(defs.parentNode).path(value);\n\t                defs.appendChild(path.node);\n\t                id = path.id;\n\t                path.attr({id: id});\n\t            } else {\n\t                value = wrap(value);\n\t                if (value instanceof Element) {\n\t                    id = value.attr(\"id\");\n\t                    if (!id) {\n\t                        id = value.id;\n\t                        value.attr({id: id});\n\t                    }\n\t                }\n\t            }\n\t            if (id) {\n\t                tp = this.textPath;\n\t                node = this.node;\n\t                if (tp) {\n\t                    tp.attr({\"xlink:href\": \"#\" + id});\n\t                } else {\n\t                    tp = $(\"textPath\", {\n\t                        \"xlink:href\": \"#\" + id\n\t                    });\n\t                    while (node.firstChild) {\n\t                        tp.appendChild(node.firstChild);\n\t                    }\n\t                    node.appendChild(tp);\n\t                    this.textPath = wrap(tp);\n\t                }\n\t            }\n\t        }\n\t    })(-1);\n\t    eve.on(\"snap.util.attr.text\", function (value) {\n\t        if (this.type == \"text\") {\n\t            var i = 0,\n\t                node = this.node,\n\t                tuner = function (chunk) {\n\t                    var out = $(\"tspan\");\n\t                    if (is(chunk, \"array\")) {\n\t                        for (var i = 0; i < chunk.length; i++) {\n\t                            out.appendChild(tuner(chunk[i]));\n\t                        }\n\t                    } else {\n\t                        out.appendChild(glob.doc.createTextNode(chunk));\n\t                    }\n\t                    out.normalize && out.normalize();\n\t                    return out;\n\t                };\n\t            while (node.firstChild) {\n\t                node.removeChild(node.firstChild);\n\t            }\n\t            var tuned = tuner(value);\n\t            while (tuned.firstChild) {\n\t                node.appendChild(tuned.firstChild);\n\t            }\n\t        }\n\t        eve.stop();\n\t    })(-1);\n\t    function setFontSize(value) {\n\t        eve.stop();\n\t        if (value == +value) {\n\t            value += \"px\";\n\t        }\n\t        this.node.style.fontSize = value;\n\t    }\n\t    eve.on(\"snap.util.attr.fontSize\", setFontSize)(-1);\n\t    eve.on(\"snap.util.attr.font-size\", setFontSize)(-1);\n\t\n\t\n\t    eve.on(\"snap.util.getattr.transform\", function () {\n\t        eve.stop();\n\t        return this.transform();\n\t    })(-1);\n\t    eve.on(\"snap.util.getattr.textpath\", function () {\n\t        eve.stop();\n\t        return this.textPath;\n\t    })(-1);\n\t    // Markers\n\t    (function () {\n\t        function getter(end) {\n\t            return function () {\n\t                eve.stop();\n\t                var style = glob.doc.defaultView.getComputedStyle(this.node, null).getPropertyValue(\"marker-\" + end);\n\t                if (style == \"none\") {\n\t                    return style;\n\t                } else {\n\t                    return Snap(glob.doc.getElementById(style.match(reURLValue)[1]));\n\t                }\n\t            };\n\t        }\n\t        function setter(end) {\n\t            return function (value) {\n\t                eve.stop();\n\t                var name = \"marker\" + end.charAt(0).toUpperCase() + end.substring(1);\n\t                if (value == \"\" || !value) {\n\t                    this.node.style[name] = \"none\";\n\t                    return;\n\t                }\n\t                if (value.type == \"marker\") {\n\t                    var id = value.node.id;\n\t                    if (!id) {\n\t                        $(value.node, {id: value.id});\n\t                    }\n\t                    this.node.style[name] = URL(id);\n\t                    return;\n\t                }\n\t            };\n\t        }\n\t        eve.on(\"snap.util.getattr.marker-end\", getter(\"end\"))(-1);\n\t        eve.on(\"snap.util.getattr.markerEnd\", getter(\"end\"))(-1);\n\t        eve.on(\"snap.util.getattr.marker-start\", getter(\"start\"))(-1);\n\t        eve.on(\"snap.util.getattr.markerStart\", getter(\"start\"))(-1);\n\t        eve.on(\"snap.util.getattr.marker-mid\", getter(\"mid\"))(-1);\n\t        eve.on(\"snap.util.getattr.markerMid\", getter(\"mid\"))(-1);\n\t        eve.on(\"snap.util.attr.marker-end\", setter(\"end\"))(-1);\n\t        eve.on(\"snap.util.attr.markerEnd\", setter(\"end\"))(-1);\n\t        eve.on(\"snap.util.attr.marker-start\", setter(\"start\"))(-1);\n\t        eve.on(\"snap.util.attr.markerStart\", setter(\"start\"))(-1);\n\t        eve.on(\"snap.util.attr.marker-mid\", setter(\"mid\"))(-1);\n\t        eve.on(\"snap.util.attr.markerMid\", setter(\"mid\"))(-1);\n\t    }());\n\t    eve.on(\"snap.util.getattr.r\", function () {\n\t        if (this.type == \"rect\" && $(this.node, \"rx\") == $(this.node, \"ry\")) {\n\t            eve.stop();\n\t            return $(this.node, \"rx\");\n\t        }\n\t    })(-1);\n\t    function textExtract(node) {\n\t        var out = [];\n\t        var children = node.childNodes;\n\t        for (var i = 0, ii = children.length; i < ii; i++) {\n\t            var chi = children[i];\n\t            if (chi.nodeType == 3) {\n\t                out.push(chi.nodeValue);\n\t            }\n\t            if (chi.tagName == \"tspan\") {\n\t                if (chi.childNodes.length == 1 && chi.firstChild.nodeType == 3) {\n\t                    out.push(chi.firstChild.nodeValue);\n\t                } else {\n\t                    out.push(textExtract(chi));\n\t                }\n\t            }\n\t        }\n\t        return out;\n\t    }\n\t    eve.on(\"snap.util.getattr.text\", function () {\n\t        if (this.type == \"text\" || this.type == \"tspan\") {\n\t            eve.stop();\n\t            var out = textExtract(this.node);\n\t            return out.length == 1 ? out[0] : out;\n\t        }\n\t    })(-1);\n\t    eve.on(\"snap.util.getattr.#text\", function () {\n\t        return this.node.textContent;\n\t    })(-1);\n\t    eve.on(\"snap.util.getattr.viewBox\", function () {\n\t        eve.stop();\n\t        var vb = $(this.node, \"viewBox\");\n\t        if (vb) {\n\t            vb = vb.split(separator);\n\t            return Snap._.box(+vb[0], +vb[1], +vb[2], +vb[3]);\n\t        } else {\n\t            return;\n\t        }\n\t    })(-1);\n\t    eve.on(\"snap.util.getattr.points\", function () {\n\t        var p = $(this.node, \"points\");\n\t        eve.stop();\n\t        if (p) {\n\t            return p.split(separator);\n\t        } else {\n\t            return;\n\t        }\n\t    })(-1);\n\t    eve.on(\"snap.util.getattr.path\", function () {\n\t        var p = $(this.node, \"d\");\n\t        eve.stop();\n\t        return p;\n\t    })(-1);\n\t    eve.on(\"snap.util.getattr.class\", function () {\n\t        return this.node.className.baseVal;\n\t    })(-1);\n\t    function getFontSize() {\n\t        eve.stop();\n\t        return this.node.style.fontSize;\n\t    }\n\t    eve.on(\"snap.util.getattr.fontSize\", getFontSize)(-1);\n\t    eve.on(\"snap.util.getattr.font-size\", getFontSize)(-1);\n\t});\n\t\n\t// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var rgNotSpace = /\\S+/g,\n\t        rgBadSpace = /[\\t\\r\\n\\f]/g,\n\t        rgTrim = /(^\\s+|\\s+$)/g,\n\t        Str = String,\n\t        elproto = Element.prototype;\n\t    /*\\\n\t     * Element.addClass\n\t     [ method ]\n\t     **\n\t     * Adds given class name or list of class names to the element.\n\t     - value (string) class name or space separated list of class names\n\t     **\n\t     = (Element) original element.\n\t    \\*/\n\t    elproto.addClass = function (value) {\n\t        var classes = Str(value || \"\").match(rgNotSpace) || [],\n\t            elem = this.node,\n\t            className = elem.className.baseVal,\n\t            curClasses = className.match(rgNotSpace) || [],\n\t            j,\n\t            pos,\n\t            clazz,\n\t            finalValue;\n\t\n\t        if (classes.length) {\n\t            j = 0;\n\t            while ((clazz = classes[j++])) {\n\t                pos = curClasses.indexOf(clazz);\n\t                if (!~pos) {\n\t                    curClasses.push(clazz);\n\t                }\n\t            }\n\t\n\t            finalValue = curClasses.join(\" \");\n\t            if (className != finalValue) {\n\t                elem.className.baseVal = finalValue;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.removeClass\n\t     [ method ]\n\t     **\n\t     * Removes given class name or list of class names from the element.\n\t     - value (string) class name or space separated list of class names\n\t     **\n\t     = (Element) original element.\n\t    \\*/\n\t    elproto.removeClass = function (value) {\n\t        var classes = Str(value || \"\").match(rgNotSpace) || [],\n\t            elem = this.node,\n\t            className = elem.className.baseVal,\n\t            curClasses = className.match(rgNotSpace) || [],\n\t            j,\n\t            pos,\n\t            clazz,\n\t            finalValue;\n\t        if (curClasses.length) {\n\t            j = 0;\n\t            while ((clazz = classes[j++])) {\n\t                pos = curClasses.indexOf(clazz);\n\t                if (~pos) {\n\t                    curClasses.splice(pos, 1);\n\t                }\n\t            }\n\t\n\t            finalValue = curClasses.join(\" \");\n\t            if (className != finalValue) {\n\t                elem.className.baseVal = finalValue;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Element.hasClass\n\t     [ method ]\n\t     **\n\t     * Checks if the element has a given class name in the list of class names applied to it.\n\t     - value (string) class name\n\t     **\n\t     = (boolean) `true` if the element has given class\n\t    \\*/\n\t    elproto.hasClass = function (value) {\n\t        var elem = this.node,\n\t            className = elem.className.baseVal,\n\t            curClasses = className.match(rgNotSpace) || [];\n\t        return !!~curClasses.indexOf(value);\n\t    };\n\t    /*\\\n\t     * Element.toggleClass\n\t     [ method ]\n\t     **\n\t     * Add or remove one or more classes from the element, depending on either\n\t     * the class’s presence or the value of the `flag` argument.\n\t     - value (string) class name or space separated list of class names\n\t     - flag (boolean) value to determine whether the class should be added or removed\n\t     **\n\t     = (Element) original element.\n\t    \\*/\n\t    elproto.toggleClass = function (value, flag) {\n\t        if (flag != null) {\n\t            if (flag) {\n\t                return this.addClass(value);\n\t            } else {\n\t                return this.removeClass(value);\n\t            }\n\t        }\n\t        var classes = (value || \"\").match(rgNotSpace) || [],\n\t            elem = this.node,\n\t            className = elem.className.baseVal,\n\t            curClasses = className.match(rgNotSpace) || [],\n\t            j,\n\t            pos,\n\t            clazz,\n\t            finalValue;\n\t        j = 0;\n\t        while ((clazz = classes[j++])) {\n\t            pos = curClasses.indexOf(clazz);\n\t            if (~pos) {\n\t                curClasses.splice(pos, 1);\n\t            } else {\n\t                curClasses.push(clazz);\n\t            }\n\t        }\n\t\n\t        finalValue = curClasses.join(\" \");\n\t        if (className != finalValue) {\n\t            elem.className.baseVal = finalValue;\n\t        }\n\t        return this;\n\t    };\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var operators = {\n\t            \"+\": function (x, y) {\n\t                    return x + y;\n\t                },\n\t            \"-\": function (x, y) {\n\t                    return x - y;\n\t                },\n\t            \"/\": function (x, y) {\n\t                    return x / y;\n\t                },\n\t            \"*\": function (x, y) {\n\t                    return x * y;\n\t                }\n\t        },\n\t        Str = String,\n\t        reUnit = /[a-z]+$/i,\n\t        reAddon = /^\\s*([+\\-\\/*])\\s*=\\s*([\\d.eE+\\-]+)\\s*([^\\d\\s]+)?\\s*$/;\n\t    function getNumber(val) {\n\t        return val;\n\t    }\n\t    function getUnit(unit) {\n\t        return function (val) {\n\t            return +val.toFixed(3) + unit;\n\t        };\n\t    }\n\t    eve.on(\"snap.util.attr\", function (val) {\n\t        var plus = Str(val).match(reAddon);\n\t        if (plus) {\n\t            var evnt = eve.nt(),\n\t                name = evnt.substring(evnt.lastIndexOf(\".\") + 1),\n\t                a = this.attr(name),\n\t                atr = {};\n\t            eve.stop();\n\t            var unit = plus[3] || \"\",\n\t                aUnit = a.match(reUnit),\n\t                op = operators[plus[1]];\n\t            if (aUnit && aUnit == unit) {\n\t                val = op(parseFloat(a), +plus[2]);\n\t            } else {\n\t                a = this.asPX(name);\n\t                val = op(this.asPX(name), this.asPX(name, plus[2] + unit));\n\t            }\n\t            if (isNaN(a) || isNaN(val)) {\n\t                return;\n\t            }\n\t            atr[name] = val;\n\t            this.attr(atr);\n\t        }\n\t    })(-10);\n\t    eve.on(\"snap.util.equal\", function (name, b) {\n\t        var A, B, a = Str(this.attr(name) || \"\"),\n\t            el = this,\n\t            bplus = Str(b).match(reAddon);\n\t        if (bplus) {\n\t            eve.stop();\n\t            var unit = bplus[3] || \"\",\n\t                aUnit = a.match(reUnit),\n\t                op = operators[bplus[1]];\n\t            if (aUnit && aUnit == unit) {\n\t                return {\n\t                    from: parseFloat(a),\n\t                    to: op(parseFloat(a), +bplus[2]),\n\t                    f: getUnit(aUnit)\n\t                };\n\t            } else {\n\t                a = this.asPX(name);\n\t                return {\n\t                    from: a,\n\t                    to: op(a, this.asPX(name, bplus[2] + unit)),\n\t                    f: getNumber\n\t                };\n\t            }\n\t        }\n\t    })(-10);\n\t});\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var proto = Paper.prototype,\n\t        is = Snap.is;\n\t    /*\\\n\t     * Paper.rect\n\t     [ method ]\n\t     *\n\t     * Draws a rectangle\n\t     **\n\t     - x (number) x coordinate of the top left corner\n\t     - y (number) y coordinate of the top left corner\n\t     - width (number) width\n\t     - height (number) height\n\t     - rx (number) #optional horizontal radius for rounded corners, default is 0\n\t     - ry (number) #optional vertical radius for rounded corners, default is rx or 0\n\t     = (object) the `rect` element\n\t     **\n\t     > Usage\n\t     | // regular rectangle\n\t     | var c = paper.rect(10, 10, 50, 50);\n\t     | // rectangle with rounded corners\n\t     | var c = paper.rect(40, 40, 50, 50, 10);\n\t    \\*/\n\t    proto.rect = function (x, y, w, h, rx, ry) {\n\t        var attr;\n\t        if (ry == null) {\n\t            ry = rx;\n\t        }\n\t        if (is(x, \"object\") && x == \"[object Object]\") {\n\t            attr = x;\n\t        } else if (x != null) {\n\t            attr = {\n\t                x: x,\n\t                y: y,\n\t                width: w,\n\t                height: h\n\t            };\n\t            if (rx != null) {\n\t                attr.rx = rx;\n\t                attr.ry = ry;\n\t            }\n\t        }\n\t        return this.el(\"rect\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.circle\n\t     [ method ]\n\t     **\n\t     * Draws a circle\n\t     **\n\t     - x (number) x coordinate of the centre\n\t     - y (number) y coordinate of the centre\n\t     - r (number) radius\n\t     = (object) the `circle` element\n\t     **\n\t     > Usage\n\t     | var c = paper.circle(50, 50, 40);\n\t    \\*/\n\t    proto.circle = function (cx, cy, r) {\n\t        var attr;\n\t        if (is(cx, \"object\") && cx == \"[object Object]\") {\n\t            attr = cx;\n\t        } else if (cx != null) {\n\t            attr = {\n\t                cx: cx,\n\t                cy: cy,\n\t                r: r\n\t            };\n\t        }\n\t        return this.el(\"circle\", attr);\n\t    };\n\t\n\t    var preload = (function () {\n\t        function onerror() {\n\t            this.parentNode.removeChild(this);\n\t        }\n\t        return function (src, f) {\n\t            var img = glob.doc.createElement(\"img\"),\n\t                body = glob.doc.body;\n\t            img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n\t            img.onload = function () {\n\t                f.call(img);\n\t                img.onload = img.onerror = null;\n\t                body.removeChild(img);\n\t            };\n\t            img.onerror = onerror;\n\t            body.appendChild(img);\n\t            img.src = src;\n\t        };\n\t    }());\n\t\n\t    /*\\\n\t     * Paper.image\n\t     [ method ]\n\t     **\n\t     * Places an image on the surface\n\t     **\n\t     - src (string) URI of the source image\n\t     - x (number) x offset position\n\t     - y (number) y offset position\n\t     - width (number) width of the image\n\t     - height (number) height of the image\n\t     = (object) the `image` element\n\t     * or\n\t     = (object) Snap element object with type `image`\n\t     **\n\t     > Usage\n\t     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n\t    \\*/\n\t    proto.image = function (src, x, y, width, height) {\n\t        var el = this.el(\"image\");\n\t        if (is(src, \"object\") && \"src\" in src) {\n\t            el.attr(src);\n\t        } else if (src != null) {\n\t            var set = {\n\t                \"xlink:href\": src,\n\t                preserveAspectRatio: \"none\"\n\t            };\n\t            if (x != null && y != null) {\n\t                set.x = x;\n\t                set.y = y;\n\t            }\n\t            if (width != null && height != null) {\n\t                set.width = width;\n\t                set.height = height;\n\t            } else {\n\t                preload(src, function () {\n\t                    Snap._.$(el.node, {\n\t                        width: this.offsetWidth,\n\t                        height: this.offsetHeight\n\t                    });\n\t                });\n\t            }\n\t            Snap._.$(el.node, set);\n\t        }\n\t        return el;\n\t    };\n\t    /*\\\n\t     * Paper.ellipse\n\t     [ method ]\n\t     **\n\t     * Draws an ellipse\n\t     **\n\t     - x (number) x coordinate of the centre\n\t     - y (number) y coordinate of the centre\n\t     - rx (number) horizontal radius\n\t     - ry (number) vertical radius\n\t     = (object) the `ellipse` element\n\t     **\n\t     > Usage\n\t     | var c = paper.ellipse(50, 50, 40, 20);\n\t    \\*/\n\t    proto.ellipse = function (cx, cy, rx, ry) {\n\t        var attr;\n\t        if (is(cx, \"object\") && cx == \"[object Object]\") {\n\t            attr = cx;\n\t        } else if (cx != null) {\n\t            attr ={\n\t                cx: cx,\n\t                cy: cy,\n\t                rx: rx,\n\t                ry: ry\n\t            };\n\t        }\n\t        return this.el(\"ellipse\", attr);\n\t    };\n\t    // SIERRA Paper.path(): Unclear from the link what a Catmull-Rom curveto is, and why it would make life any easier.\n\t    /*\\\n\t     * Paper.path\n\t     [ method ]\n\t     **\n\t     * Creates a `<path>` element using the given string as the path's definition\n\t     - pathString (string) #optional path string in SVG format\n\t     * Path string consists of one-letter commands, followed by comma seprarated arguments in numerical form. Example:\n\t     | \"M10,20L30,40\"\n\t     * This example features two commands: `M`, with arguments `(10, 20)` and `L` with arguments `(30, 40)`. Uppercase letter commands express coordinates in absolute terms, while lowercase commands express them in relative terms from the most recently declared coordinates.\n\t     *\n\t     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a> or <a href=\"https://developer.mozilla.org/en/SVG/Tutorial/Paths\">article about path strings at MDN</a>.</p>\n\t     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n\t     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n\t     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n\t     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n\t     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n\t     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n\t     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n\t     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n\t     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n\t     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n\t     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n\t     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n\t     * * _Catmull-Rom curveto_ is a not standard SVG command and added to make life easier.\n\t     * Note: there is a special case when a path consists of only three commands: `M10,10R…z`. In this case the path connects back to its starting point.\n\t     > Usage\n\t     | var c = paper.path(\"M10 10L90 90\");\n\t     | // draw a diagonal line:\n\t     | // move to 10,10, line to 90,90\n\t    \\*/\n\t    proto.path = function (d) {\n\t        var attr;\n\t        if (is(d, \"object\") && !is(d, \"array\")) {\n\t            attr = d;\n\t        } else if (d) {\n\t            attr = {d: d};\n\t        }\n\t        return this.el(\"path\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.g\n\t     [ method ]\n\t     **\n\t     * Creates a group element\n\t     **\n\t     - varargs (…) #optional elements to nest within the group\n\t     = (object) the `g` element\n\t     **\n\t     > Usage\n\t     | var c1 = paper.circle(),\n\t     |     c2 = paper.rect(),\n\t     |     g = paper.g(c2, c1); // note that the order of elements is different\n\t     * or\n\t     | var c1 = paper.circle(),\n\t     |     c2 = paper.rect(),\n\t     |     g = paper.g();\n\t     | g.add(c2, c1);\n\t    \\*/\n\t    /*\\\n\t     * Paper.group\n\t     [ method ]\n\t     **\n\t     * See @Paper.g\n\t    \\*/\n\t    proto.group = proto.g = function (first) {\n\t        var attr,\n\t            el = this.el(\"g\");\n\t        if (arguments.length == 1 && first && !first.type) {\n\t            el.attr(first);\n\t        } else if (arguments.length) {\n\t            el.add(Array.prototype.slice.call(arguments, 0));\n\t        }\n\t        return el;\n\t    };\n\t    /*\\\n\t     * Paper.svg\n\t     [ method ]\n\t     **\n\t     * Creates a nested SVG element.\n\t     - x (number) @optional X of the element\n\t     - y (number) @optional Y of the element\n\t     - width (number) @optional width of the element\n\t     - height (number) @optional height of the element\n\t     - vbx (number) @optional viewbox X\n\t     - vby (number) @optional viewbox Y\n\t     - vbw (number) @optional viewbox width\n\t     - vbh (number) @optional viewbox height\n\t     **\n\t     = (object) the `svg` element\n\t     **\n\t    \\*/\n\t    proto.svg = function (x, y, width, height, vbx, vby, vbw, vbh) {\n\t        var attrs = {};\n\t        if (is(x, \"object\") && y == null) {\n\t            attrs = x;\n\t        } else {\n\t            if (x != null) {\n\t                attrs.x = x;\n\t            }\n\t            if (y != null) {\n\t                attrs.y = y;\n\t            }\n\t            if (width != null) {\n\t                attrs.width = width;\n\t            }\n\t            if (height != null) {\n\t                attrs.height = height;\n\t            }\n\t            if (vbx != null && vby != null && vbw != null && vbh != null) {\n\t                attrs.viewBox = [vbx, vby, vbw, vbh];\n\t            }\n\t        }\n\t        return this.el(\"svg\", attrs);\n\t    };\n\t    /*\\\n\t     * Paper.mask\n\t     [ method ]\n\t     **\n\t     * Equivalent in behaviour to @Paper.g, except it’s a mask.\n\t     **\n\t     = (object) the `mask` element\n\t     **\n\t    \\*/\n\t    proto.mask = function (first) {\n\t        var attr,\n\t            el = this.el(\"mask\");\n\t        if (arguments.length == 1 && first && !first.type) {\n\t            el.attr(first);\n\t        } else if (arguments.length) {\n\t            el.add(Array.prototype.slice.call(arguments, 0));\n\t        }\n\t        return el;\n\t    };\n\t    /*\\\n\t     * Paper.ptrn\n\t     [ method ]\n\t     **\n\t     * Equivalent in behaviour to @Paper.g, except it’s a pattern.\n\t     - x (number) @optional X of the element\n\t     - y (number) @optional Y of the element\n\t     - width (number) @optional width of the element\n\t     - height (number) @optional height of the element\n\t     - vbx (number) @optional viewbox X\n\t     - vby (number) @optional viewbox Y\n\t     - vbw (number) @optional viewbox width\n\t     - vbh (number) @optional viewbox height\n\t     **\n\t     = (object) the `pattern` element\n\t     **\n\t    \\*/\n\t    proto.ptrn = function (x, y, width, height, vx, vy, vw, vh) {\n\t        if (is(x, \"object\")) {\n\t            var attr = x;\n\t        } else {\n\t            attr = {patternUnits: \"userSpaceOnUse\"};\n\t            if (x) {\n\t                attr.x = x;\n\t            }\n\t            if (y) {\n\t                attr.y = y;\n\t            }\n\t            if (width != null) {\n\t                attr.width = width;\n\t            }\n\t            if (height != null) {\n\t                attr.height = height;\n\t            }\n\t            if (vx != null && vy != null && vw != null && vh != null) {\n\t                attr.viewBox = [vx, vy, vw, vh];\n\t            } else {\n\t                attr.viewBox = [x || 0, y || 0, width || 0, height || 0];\n\t            }\n\t        }\n\t        return this.el(\"pattern\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.use\n\t     [ method ]\n\t     **\n\t     * Creates a <use> element.\n\t     - id (string) @optional id of element to link\n\t     * or\n\t     - id (Element) @optional element to link\n\t     **\n\t     = (object) the `use` element\n\t     **\n\t    \\*/\n\t    proto.use = function (id) {\n\t        if (id != null) {\n\t            if (id instanceof Element) {\n\t                if (!id.attr(\"id\")) {\n\t                    id.attr({id: Snap._.id(id)});\n\t                }\n\t                id = id.attr(\"id\");\n\t            }\n\t            if (String(id).charAt() == \"#\") {\n\t                id = id.substring(1);\n\t            }\n\t            return this.el(\"use\", {\"xlink:href\": \"#\" + id});\n\t        } else {\n\t            return Element.prototype.use.call(this);\n\t        }\n\t    };\n\t    /*\\\n\t     * Paper.symbol\n\t     [ method ]\n\t     **\n\t     * Creates a <symbol> element.\n\t     - vbx (number) @optional viewbox X\n\t     - vby (number) @optional viewbox Y\n\t     - vbw (number) @optional viewbox width\n\t     - vbh (number) @optional viewbox height\n\t     = (object) the `symbol` element\n\t     **\n\t    \\*/\n\t    proto.symbol = function (vx, vy, vw, vh) {\n\t        var attr = {};\n\t        if (vx != null && vy != null && vw != null && vh != null) {\n\t            attr.viewBox = [vx, vy, vw, vh];\n\t        }\n\t\n\t        return this.el(\"symbol\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.text\n\t     [ method ]\n\t     **\n\t     * Draws a text string\n\t     **\n\t     - x (number) x coordinate position\n\t     - y (number) y coordinate position\n\t     - text (string|array) The text string to draw or array of strings to nest within separate `<tspan>` elements\n\t     = (object) the `text` element\n\t     **\n\t     > Usage\n\t     | var t1 = paper.text(50, 50, \"Snap\");\n\t     | var t2 = paper.text(50, 50, [\"S\",\"n\",\"a\",\"p\"]);\n\t     | // Text path usage\n\t     | t1.attr({textpath: \"M10,10L100,100\"});\n\t     | // or\n\t     | var pth = paper.path(\"M10,10L100,100\");\n\t     | t1.attr({textpath: pth});\n\t    \\*/\n\t    proto.text = function (x, y, text) {\n\t        var attr = {};\n\t        if (is(x, \"object\")) {\n\t            attr = x;\n\t        } else if (x != null) {\n\t            attr = {\n\t                x: x,\n\t                y: y,\n\t                text: text || \"\"\n\t            };\n\t        }\n\t        return this.el(\"text\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.line\n\t     [ method ]\n\t     **\n\t     * Draws a line\n\t     **\n\t     - x1 (number) x coordinate position of the start\n\t     - y1 (number) y coordinate position of the start\n\t     - x2 (number) x coordinate position of the end\n\t     - y2 (number) y coordinate position of the end\n\t     = (object) the `line` element\n\t     **\n\t     > Usage\n\t     | var t1 = paper.line(50, 50, 100, 100);\n\t    \\*/\n\t    proto.line = function (x1, y1, x2, y2) {\n\t        var attr = {};\n\t        if (is(x1, \"object\")) {\n\t            attr = x1;\n\t        } else if (x1 != null) {\n\t            attr = {\n\t                x1: x1,\n\t                x2: x2,\n\t                y1: y1,\n\t                y2: y2\n\t            };\n\t        }\n\t        return this.el(\"line\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.polyline\n\t     [ method ]\n\t     **\n\t     * Draws a polyline\n\t     **\n\t     - points (array) array of points\n\t     * or\n\t     - varargs (…) points\n\t     = (object) the `polyline` element\n\t     **\n\t     > Usage\n\t     | var p1 = paper.polyline([10, 10, 100, 100]);\n\t     | var p2 = paper.polyline(10, 10, 100, 100);\n\t    \\*/\n\t    proto.polyline = function (points) {\n\t        if (arguments.length > 1) {\n\t            points = Array.prototype.slice.call(arguments, 0);\n\t        }\n\t        var attr = {};\n\t        if (is(points, \"object\") && !is(points, \"array\")) {\n\t            attr = points;\n\t        } else if (points != null) {\n\t            attr = {points: points};\n\t        }\n\t        return this.el(\"polyline\", attr);\n\t    };\n\t    /*\\\n\t     * Paper.polygon\n\t     [ method ]\n\t     **\n\t     * Draws a polygon. See @Paper.polyline\n\t    \\*/\n\t    proto.polygon = function (points) {\n\t        if (arguments.length > 1) {\n\t            points = Array.prototype.slice.call(arguments, 0);\n\t        }\n\t        var attr = {};\n\t        if (is(points, \"object\") && !is(points, \"array\")) {\n\t            attr = points;\n\t        } else if (points != null) {\n\t            attr = {points: points};\n\t        }\n\t        return this.el(\"polygon\", attr);\n\t    };\n\t    // gradients\n\t    (function () {\n\t        var $ = Snap._.$;\n\t        // gradients' helpers\n\t        function Gstops() {\n\t            return this.selectAll(\"stop\");\n\t        }\n\t        function GaddStop(color, offset) {\n\t            var stop = $(\"stop\"),\n\t                attr = {\n\t                    offset: +offset + \"%\"\n\t                };\n\t            color = Snap.color(color);\n\t            attr[\"stop-color\"] = color.hex;\n\t            if (color.opacity < 1) {\n\t                attr[\"stop-opacity\"] = color.opacity;\n\t            }\n\t            $(stop, attr);\n\t            this.node.appendChild(stop);\n\t            return this;\n\t        }\n\t        function GgetBBox() {\n\t            if (this.type == \"linearGradient\") {\n\t                var x1 = $(this.node, \"x1\") || 0,\n\t                    x2 = $(this.node, \"x2\") || 1,\n\t                    y1 = $(this.node, \"y1\") || 0,\n\t                    y2 = $(this.node, \"y2\") || 0;\n\t                return Snap._.box(x1, y1, math.abs(x2 - x1), math.abs(y2 - y1));\n\t            } else {\n\t                var cx = this.node.cx || .5,\n\t                    cy = this.node.cy || .5,\n\t                    r = this.node.r || 0;\n\t                return Snap._.box(cx - r, cy - r, r * 2, r * 2);\n\t            }\n\t        }\n\t        function gradient(defs, str) {\n\t            var grad = eve(\"snap.util.grad.parse\", null, str).firstDefined(),\n\t                el;\n\t            if (!grad) {\n\t                return null;\n\t            }\n\t            grad.params.unshift(defs);\n\t            if (grad.type.toLowerCase() == \"l\") {\n\t                el = gradientLinear.apply(0, grad.params);\n\t            } else {\n\t                el = gradientRadial.apply(0, grad.params);\n\t            }\n\t            if (grad.type != grad.type.toLowerCase()) {\n\t                $(el.node, {\n\t                    gradientUnits: \"userSpaceOnUse\"\n\t                });\n\t            }\n\t            var stops = grad.stops,\n\t                len = stops.length,\n\t                start = 0,\n\t                j = 0;\n\t            function seed(i, end) {\n\t                var step = (end - start) / (i - j);\n\t                for (var k = j; k < i; k++) {\n\t                    stops[k].offset = +(+start + step * (k - j)).toFixed(2);\n\t                }\n\t                j = i;\n\t                start = end;\n\t            }\n\t            len--;\n\t            for (var i = 0; i < len; i++) if (\"offset\" in stops[i]) {\n\t                seed(i, stops[i].offset);\n\t            }\n\t            stops[len].offset = stops[len].offset || 100;\n\t            seed(len, stops[len].offset);\n\t            for (i = 0; i <= len; i++) {\n\t                var stop = stops[i];\n\t                el.addStop(stop.color, stop.offset);\n\t            }\n\t            return el;\n\t        }\n\t        function gradientLinear(defs, x1, y1, x2, y2) {\n\t            var el = Snap._.make(\"linearGradient\", defs);\n\t            el.stops = Gstops;\n\t            el.addStop = GaddStop;\n\t            el.getBBox = GgetBBox;\n\t            if (x1 != null) {\n\t                $(el.node, {\n\t                    x1: x1,\n\t                    y1: y1,\n\t                    x2: x2,\n\t                    y2: y2\n\t                });\n\t            }\n\t            return el;\n\t        }\n\t        function gradientRadial(defs, cx, cy, r, fx, fy) {\n\t            var el = Snap._.make(\"radialGradient\", defs);\n\t            el.stops = Gstops;\n\t            el.addStop = GaddStop;\n\t            el.getBBox = GgetBBox;\n\t            if (cx != null) {\n\t                $(el.node, {\n\t                    cx: cx,\n\t                    cy: cy,\n\t                    r: r\n\t                });\n\t            }\n\t            if (fx != null && fy != null) {\n\t                $(el.node, {\n\t                    fx: fx,\n\t                    fy: fy\n\t                });\n\t            }\n\t            return el;\n\t        }\n\t        /*\\\n\t         * Paper.gradient\n\t         [ method ]\n\t         **\n\t         * Creates a gradient element\n\t         **\n\t         - gradient (string) gradient descriptor\n\t         > Gradient Descriptor\n\t         * The gradient descriptor is an expression formatted as\n\t         * follows: `<type>(<coords>)<colors>`.  The `<type>` can be\n\t         * either linear or radial.  The uppercase `L` or `R` letters\n\t         * indicate absolute coordinates offset from the SVG surface.\n\t         * Lowercase `l` or `r` letters indicate coordinates\n\t         * calculated relative to the element to which the gradient is\n\t         * applied.  Coordinates specify a linear gradient vector as\n\t         * `x1`, `y1`, `x2`, `y2`, or a radial gradient as `cx`, `cy`,\n\t         * `r` and optional `fx`, `fy` specifying a focal point away\n\t         * from the center of the circle. Specify `<colors>` as a list\n\t         * of dash-separated CSS color values.  Each color may be\n\t         * followed by a custom offset value, separated with a colon\n\t         * character.\n\t         > Examples\n\t         * Linear gradient, relative from top-left corner to bottom-right\n\t         * corner, from black through red to white:\n\t         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n\t         * Linear gradient, absolute from (0, 0) to (100, 100), from black\n\t         * through red at 25% to white:\n\t         | var g = paper.gradient(\"L(0, 0, 100, 100)#000-#f00:25-#fff\");\n\t         * Radial gradient, relative from the center of the element with radius\n\t         * half the width, from black to white:\n\t         | var g = paper.gradient(\"r(0.5, 0.5, 0.5)#000-#fff\");\n\t         * To apply the gradient:\n\t         | paper.circle(50, 50, 40).attr({\n\t         |     fill: g\n\t         | });\n\t         = (object) the `gradient` element\n\t        \\*/\n\t        proto.gradient = function (str) {\n\t            return gradient(this.defs, str);\n\t        };\n\t        proto.gradientLinear = function (x1, y1, x2, y2) {\n\t            return gradientLinear(this.defs, x1, y1, x2, y2);\n\t        };\n\t        proto.gradientRadial = function (cx, cy, r, fx, fy) {\n\t            return gradientRadial(this.defs, cx, cy, r, fx, fy);\n\t        };\n\t        /*\\\n\t         * Paper.toString\n\t         [ method ]\n\t         **\n\t         * Returns SVG code for the @Paper\n\t         = (string) SVG code for the @Paper\n\t        \\*/\n\t        proto.toString = function () {\n\t            var doc = this.node.ownerDocument,\n\t                f = doc.createDocumentFragment(),\n\t                d = doc.createElement(\"div\"),\n\t                svg = this.node.cloneNode(true),\n\t                res;\n\t            f.appendChild(d);\n\t            d.appendChild(svg);\n\t            Snap._.$(svg, {xmlns: \"http://www.w3.org/2000/svg\"});\n\t            res = d.innerHTML;\n\t            f.removeChild(f.firstChild);\n\t            return res;\n\t        };\n\t        /*\\\n\t         * Paper.toDataURL\n\t         [ method ]\n\t         **\n\t         * Returns SVG code for the @Paper as Data URI string.\n\t         = (string) Data URI string\n\t        \\*/\n\t        proto.toDataURL = function () {\n\t            if (window && window.btoa) {\n\t                return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(this)));\n\t            }\n\t        };\n\t        /*\\\n\t         * Paper.clear\n\t         [ method ]\n\t         **\n\t         * Removes all child nodes of the paper, except <defs>.\n\t        \\*/\n\t        proto.clear = function () {\n\t            var node = this.node.firstChild,\n\t                next;\n\t            while (node) {\n\t                next = node.nextSibling;\n\t                if (node.tagName != \"defs\") {\n\t                    node.parentNode.removeChild(node);\n\t                } else {\n\t                    proto.clear.call({node: node});\n\t                }\n\t                node = next;\n\t            }\n\t        };\n\t    }());\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob) {\n\t    var elproto = Element.prototype,\n\t        is = Snap.is,\n\t        clone = Snap._.clone,\n\t        has = \"hasOwnProperty\",\n\t        p2s = /,?([a-z]),?/gi,\n\t        toFloat = parseFloat,\n\t        math = Math,\n\t        PI = math.PI,\n\t        mmin = math.min,\n\t        mmax = math.max,\n\t        pow = math.pow,\n\t        abs = math.abs;\n\t    function paths(ps) {\n\t        var p = paths.ps = paths.ps || {};\n\t        if (p[ps]) {\n\t            p[ps].sleep = 100;\n\t        } else {\n\t            p[ps] = {\n\t                sleep: 100\n\t            };\n\t        }\n\t        setTimeout(function () {\n\t            for (var key in p) if (p[has](key) && key != ps) {\n\t                p[key].sleep--;\n\t                !p[key].sleep && delete p[key];\n\t            }\n\t        });\n\t        return p[ps];\n\t    }\n\t    function box(x, y, width, height) {\n\t        if (x == null) {\n\t            x = y = width = height = 0;\n\t        }\n\t        if (y == null) {\n\t            y = x.y;\n\t            width = x.width;\n\t            height = x.height;\n\t            x = x.x;\n\t        }\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            width: width,\n\t            w: width,\n\t            height: height,\n\t            h: height,\n\t            x2: x + width,\n\t            y2: y + height,\n\t            cx: x + width / 2,\n\t            cy: y + height / 2,\n\t            r1: math.min(width, height) / 2,\n\t            r2: math.max(width, height) / 2,\n\t            r0: math.sqrt(width * width + height * height) / 2,\n\t            path: rectPath(x, y, width, height),\n\t            vb: [x, y, width, height].join(\" \")\n\t        };\n\t    }\n\t    function toString() {\n\t        return this.join(\",\").replace(p2s, \"$1\");\n\t    }\n\t    function pathClone(pathArray) {\n\t        var res = clone(pathArray);\n\t        res.toString = toString;\n\t        return res;\n\t    }\n\t    function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n\t        if (length == null) {\n\t            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n\t        } else {\n\t            return findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y,\n\t                getTotLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n\t        }\n\t    }\n\t    function getLengthFactory(istotal, subpath) {\n\t        function O(val) {\n\t            return +(+val).toFixed(3);\n\t        }\n\t        return Snap._.cacher(function (path, length, onlystart) {\n\t            if (path instanceof Element) {\n\t                path = path.attr(\"d\");\n\t            }\n\t            path = path2curve(path);\n\t            var x, y, p, l, sp = \"\", subpaths = {}, point,\n\t                len = 0;\n\t            for (var i = 0, ii = path.length; i < ii; i++) {\n\t                p = path[i];\n\t                if (p[0] == \"M\") {\n\t                    x = +p[1];\n\t                    y = +p[2];\n\t                } else {\n\t                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                    if (len + l > length) {\n\t                        if (subpath && !subpaths.start) {\n\t                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                            sp += [\n\t                                \"C\" + O(point.start.x),\n\t                                O(point.start.y),\n\t                                O(point.m.x),\n\t                                O(point.m.y),\n\t                                O(point.x),\n\t                                O(point.y)\n\t                            ];\n\t                            if (onlystart) {return sp;}\n\t                            subpaths.start = sp;\n\t                            sp = [\n\t                                \"M\" + O(point.x),\n\t                                O(point.y) + \"C\" + O(point.n.x),\n\t                                O(point.n.y),\n\t                                O(point.end.x),\n\t                                O(point.end.y),\n\t                                O(p[5]),\n\t                                O(p[6])\n\t                            ].join();\n\t                            len += l;\n\t                            x = +p[5];\n\t                            y = +p[6];\n\t                            continue;\n\t                        }\n\t                        if (!istotal && !subpath) {\n\t                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                            return point;\n\t                        }\n\t                    }\n\t                    len += l;\n\t                    x = +p[5];\n\t                    y = +p[6];\n\t                }\n\t                sp += p.shift() + p;\n\t            }\n\t            subpaths.end = sp;\n\t            point = istotal ? len : subpath ? subpaths : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n\t            return point;\n\t        }, null, Snap._.clone);\n\t    }\n\t    var getTotalLength = getLengthFactory(1),\n\t        getPointAtLength = getLengthFactory(),\n\t        getSubpathsAtLength = getLengthFactory(0, 1);\n\t    function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t        var t1 = 1 - t,\n\t            t13 = pow(t1, 3),\n\t            t12 = pow(t1, 2),\n\t            t2 = t * t,\n\t            t3 = t2 * t,\n\t            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n\t            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n\t            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n\t            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n\t            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n\t            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n\t            ax = t1 * p1x + t * c1x,\n\t            ay = t1 * p1y + t * c1y,\n\t            cx = t1 * c2x + t * p2x,\n\t            cy = t1 * c2y + t * p2y,\n\t            alpha = (90 - math.atan2(mx - nx, my - ny) * 180 / PI);\n\t        // (mx > nx || my < ny) && (alpha += 180);\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            m: {x: mx, y: my},\n\t            n: {x: nx, y: ny},\n\t            start: {x: ax, y: ay},\n\t            end: {x: cx, y: cy},\n\t            alpha: alpha\n\t        };\n\t    }\n\t    function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n\t        if (!Snap.is(p1x, \"array\")) {\n\t            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n\t        }\n\t        var bbox = curveDim.apply(null, p1x);\n\t        return box(\n\t            bbox.min.x,\n\t            bbox.min.y,\n\t            bbox.max.x - bbox.min.x,\n\t            bbox.max.y - bbox.min.y\n\t        );\n\t    }\n\t    function isPointInsideBBox(bbox, x, y) {\n\t        return  x >= bbox.x &&\n\t                x <= bbox.x + bbox.width &&\n\t                y >= bbox.y &&\n\t                y <= bbox.y + bbox.height;\n\t    }\n\t    function isBBoxIntersect(bbox1, bbox2) {\n\t        bbox1 = box(bbox1);\n\t        bbox2 = box(bbox2);\n\t        return isPointInsideBBox(bbox2, bbox1.x, bbox1.y)\n\t            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y)\n\t            || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2)\n\t            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2)\n\t            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y)\n\t            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y)\n\t            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2)\n\t            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2)\n\t            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x\n\t                || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n\t            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y\n\t                || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n\t    }\n\t    function base3(t, p1, p2, p3, p4) {\n\t        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n\t            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n\t        return t * t2 - 3 * p1 + 3 * p2;\n\t    }\n\t    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n\t        if (z == null) {\n\t            z = 1;\n\t        }\n\t        z = z > 1 ? 1 : z < 0 ? 0 : z;\n\t        var z2 = z / 2,\n\t            n = 12,\n\t            Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],\n\t            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n\t            sum = 0;\n\t        for (var i = 0; i < n; i++) {\n\t            var ct = z2 * Tvalues[i] + z2,\n\t                xbase = base3(ct, x1, x2, x3, x4),\n\t                ybase = base3(ct, y1, y2, y3, y4),\n\t                comb = xbase * xbase + ybase * ybase;\n\t            sum += Cvalues[i] * math.sqrt(comb);\n\t        }\n\t        return z2 * sum;\n\t    }\n\t    function getTotLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n\t        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n\t            return;\n\t        }\n\t        var t = 1,\n\t            step = t / 2,\n\t            t2 = t - step,\n\t            l,\n\t            e = .01;\n\t        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t        while (abs(l - ll) > e) {\n\t            step /= 2;\n\t            t2 += (l < ll ? 1 : -1) * step;\n\t            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t        }\n\t        return t2;\n\t    }\n\t    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n\t        if (\n\t            mmax(x1, x2) < mmin(x3, x4) ||\n\t            mmin(x1, x2) > mmax(x3, x4) ||\n\t            mmax(y1, y2) < mmin(y3, y4) ||\n\t            mmin(y1, y2) > mmax(y3, y4)\n\t        ) {\n\t            return;\n\t        }\n\t        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n\t            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n\t            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\t\n\t        if (!denominator) {\n\t            return;\n\t        }\n\t        var px = nx / denominator,\n\t            py = ny / denominator,\n\t            px2 = +px.toFixed(2),\n\t            py2 = +py.toFixed(2);\n\t        if (\n\t            px2 < +mmin(x1, x2).toFixed(2) ||\n\t            px2 > +mmax(x1, x2).toFixed(2) ||\n\t            px2 < +mmin(x3, x4).toFixed(2) ||\n\t            px2 > +mmax(x3, x4).toFixed(2) ||\n\t            py2 < +mmin(y1, y2).toFixed(2) ||\n\t            py2 > +mmax(y1, y2).toFixed(2) ||\n\t            py2 < +mmin(y3, y4).toFixed(2) ||\n\t            py2 > +mmax(y3, y4).toFixed(2)\n\t        ) {\n\t            return;\n\t        }\n\t        return {x: px, y: py};\n\t    }\n\t    function inter(bez1, bez2) {\n\t        return interHelper(bez1, bez2);\n\t    }\n\t    function interCount(bez1, bez2) {\n\t        return interHelper(bez1, bez2, 1);\n\t    }\n\t    function interHelper(bez1, bez2, justCount) {\n\t        var bbox1 = bezierBBox(bez1),\n\t            bbox2 = bezierBBox(bez2);\n\t        if (!isBBoxIntersect(bbox1, bbox2)) {\n\t            return justCount ? 0 : [];\n\t        }\n\t        var l1 = bezlen.apply(0, bez1),\n\t            l2 = bezlen.apply(0, bez2),\n\t            n1 = ~~(l1 / 8),\n\t            n2 = ~~(l2 / 8),\n\t            dots1 = [],\n\t            dots2 = [],\n\t            xy = {},\n\t            res = justCount ? 0 : [];\n\t        for (var i = 0; i < n1 + 1; i++) {\n\t            var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n\t            dots1.push({x: p.x, y: p.y, t: i / n1});\n\t        }\n\t        for (i = 0; i < n2 + 1; i++) {\n\t            p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n\t            dots2.push({x: p.x, y: p.y, t: i / n2});\n\t        }\n\t        for (i = 0; i < n1; i++) {\n\t            for (var j = 0; j < n2; j++) {\n\t                var di = dots1[i],\n\t                    di1 = dots1[i + 1],\n\t                    dj = dots2[j],\n\t                    dj1 = dots2[j + 1],\n\t                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n\t                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n\t                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n\t                if (is) {\n\t                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n\t                        continue;\n\t                    }\n\t                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n\t                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n\t                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n\t                    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n\t                        if (justCount) {\n\t                            res++;\n\t                        } else {\n\t                            res.push({\n\t                                x: is.x,\n\t                                y: is.y,\n\t                                t1: t1,\n\t                                t2: t2\n\t                            });\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    function pathIntersection(path1, path2) {\n\t        return interPathHelper(path1, path2);\n\t    }\n\t    function pathIntersectionNumber(path1, path2) {\n\t        return interPathHelper(path1, path2, 1);\n\t    }\n\t    function interPathHelper(path1, path2, justCount) {\n\t        path1 = path2curve(path1);\n\t        path2 = path2curve(path2);\n\t        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n\t            res = justCount ? 0 : [];\n\t        for (var i = 0, ii = path1.length; i < ii; i++) {\n\t            var pi = path1[i];\n\t            if (pi[0] == \"M\") {\n\t                x1 = x1m = pi[1];\n\t                y1 = y1m = pi[2];\n\t            } else {\n\t                if (pi[0] == \"C\") {\n\t                    bez1 = [x1, y1].concat(pi.slice(1));\n\t                    x1 = bez1[6];\n\t                    y1 = bez1[7];\n\t                } else {\n\t                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n\t                    x1 = x1m;\n\t                    y1 = y1m;\n\t                }\n\t                for (var j = 0, jj = path2.length; j < jj; j++) {\n\t                    var pj = path2[j];\n\t                    if (pj[0] == \"M\") {\n\t                        x2 = x2m = pj[1];\n\t                        y2 = y2m = pj[2];\n\t                    } else {\n\t                        if (pj[0] == \"C\") {\n\t                            bez2 = [x2, y2].concat(pj.slice(1));\n\t                            x2 = bez2[6];\n\t                            y2 = bez2[7];\n\t                        } else {\n\t                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n\t                            x2 = x2m;\n\t                            y2 = y2m;\n\t                        }\n\t                        var intr = interHelper(bez1, bez2, justCount);\n\t                        if (justCount) {\n\t                            res += intr;\n\t                        } else {\n\t                            for (var k = 0, kk = intr.length; k < kk; k++) {\n\t                                intr[k].segment1 = i;\n\t                                intr[k].segment2 = j;\n\t                                intr[k].bez1 = bez1;\n\t                                intr[k].bez2 = bez2;\n\t                            }\n\t                            res = res.concat(intr);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return res;\n\t    }\n\t    function isPointInsidePath(path, x, y) {\n\t        var bbox = pathBBox(path);\n\t        return isPointInsideBBox(bbox, x, y) &&\n\t               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n\t    }\n\t    function pathBBox(path) {\n\t        var pth = paths(path);\n\t        if (pth.bbox) {\n\t            return clone(pth.bbox);\n\t        }\n\t        if (!path) {\n\t            return box();\n\t        }\n\t        path = path2curve(path);\n\t        var x = 0,\n\t            y = 0,\n\t            X = [],\n\t            Y = [],\n\t            p;\n\t        for (var i = 0, ii = path.length; i < ii; i++) {\n\t            p = path[i];\n\t            if (p[0] == \"M\") {\n\t                x = p[1];\n\t                y = p[2];\n\t                X.push(x);\n\t                Y.push(y);\n\t            } else {\n\t                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                X = X.concat(dim.min.x, dim.max.x);\n\t                Y = Y.concat(dim.min.y, dim.max.y);\n\t                x = p[5];\n\t                y = p[6];\n\t            }\n\t        }\n\t        var xmin = mmin.apply(0, X),\n\t            ymin = mmin.apply(0, Y),\n\t            xmax = mmax.apply(0, X),\n\t            ymax = mmax.apply(0, Y),\n\t            bb = box(xmin, ymin, xmax - xmin, ymax - ymin);\n\t        pth.bbox = clone(bb);\n\t        return bb;\n\t    }\n\t    function rectPath(x, y, w, h, r) {\n\t        if (r) {\n\t            return [\n\t                [\"M\", +x + (+r), y],\n\t                [\"l\", w - r * 2, 0],\n\t                [\"a\", r, r, 0, 0, 1, r, r],\n\t                [\"l\", 0, h - r * 2],\n\t                [\"a\", r, r, 0, 0, 1, -r, r],\n\t                [\"l\", r * 2 - w, 0],\n\t                [\"a\", r, r, 0, 0, 1, -r, -r],\n\t                [\"l\", 0, r * 2 - h],\n\t                [\"a\", r, r, 0, 0, 1, r, -r],\n\t                [\"z\"]\n\t            ];\n\t        }\n\t        var res = [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n\t        res.toString = toString;\n\t        return res;\n\t    }\n\t    function ellipsePath(x, y, rx, ry, a) {\n\t        if (a == null && ry == null) {\n\t            ry = rx;\n\t        }\n\t        x = +x;\n\t        y = +y;\n\t        rx = +rx;\n\t        ry = +ry;\n\t        if (a != null) {\n\t            var rad = Math.PI / 180,\n\t                x1 = x + rx * Math.cos(-ry * rad),\n\t                x2 = x + rx * Math.cos(-a * rad),\n\t                y1 = y + rx * Math.sin(-ry * rad),\n\t                y2 = y + rx * Math.sin(-a * rad),\n\t                res = [[\"M\", x1, y1], [\"A\", rx, rx, 0, +(a - ry > 180), 0, x2, y2]];\n\t        } else {\n\t            res = [\n\t                [\"M\", x, y],\n\t                [\"m\", 0, -ry],\n\t                [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry],\n\t                [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry],\n\t                [\"z\"]\n\t            ];\n\t        }\n\t        res.toString = toString;\n\t        return res;\n\t    }\n\t    var unit2px = Snap._unit2px,\n\t        getPath = {\n\t        path: function (el) {\n\t            return el.attr(\"path\");\n\t        },\n\t        circle: function (el) {\n\t            var attr = unit2px(el);\n\t            return ellipsePath(attr.cx, attr.cy, attr.r);\n\t        },\n\t        ellipse: function (el) {\n\t            var attr = unit2px(el);\n\t            return ellipsePath(attr.cx || 0, attr.cy || 0, attr.rx, attr.ry);\n\t        },\n\t        rect: function (el) {\n\t            var attr = unit2px(el);\n\t            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height, attr.rx, attr.ry);\n\t        },\n\t        image: function (el) {\n\t            var attr = unit2px(el);\n\t            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height);\n\t        },\n\t        line: function (el) {\n\t            return \"M\" + [el.attr(\"x1\") || 0, el.attr(\"y1\") || 0, el.attr(\"x2\"), el.attr(\"y2\")];\n\t        },\n\t        polyline: function (el) {\n\t            return \"M\" + el.attr(\"points\");\n\t        },\n\t        polygon: function (el) {\n\t            return \"M\" + el.attr(\"points\") + \"z\";\n\t        },\n\t        deflt: function (el) {\n\t            var bbox = el.node.getBBox();\n\t            return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n\t        }\n\t    };\n\t    function pathToRelative(pathArray) {\n\t        var pth = paths(pathArray),\n\t            lowerCase = String.prototype.toLowerCase;\n\t        if (pth.rel) {\n\t            return pathClone(pth.rel);\n\t        }\n\t        if (!Snap.is(pathArray, \"array\") || !Snap.is(pathArray && pathArray[0], \"array\")) {\n\t            pathArray = Snap.parsePathString(pathArray);\n\t        }\n\t        var res = [],\n\t            x = 0,\n\t            y = 0,\n\t            mx = 0,\n\t            my = 0,\n\t            start = 0;\n\t        if (pathArray[0][0] == \"M\") {\n\t            x = pathArray[0][1];\n\t            y = pathArray[0][2];\n\t            mx = x;\n\t            my = y;\n\t            start++;\n\t            res.push([\"M\", x, y]);\n\t        }\n\t        for (var i = start, ii = pathArray.length; i < ii; i++) {\n\t            var r = res[i] = [],\n\t                pa = pathArray[i];\n\t            if (pa[0] != lowerCase.call(pa[0])) {\n\t                r[0] = lowerCase.call(pa[0]);\n\t                switch (r[0]) {\n\t                    case \"a\":\n\t                        r[1] = pa[1];\n\t                        r[2] = pa[2];\n\t                        r[3] = pa[3];\n\t                        r[4] = pa[4];\n\t                        r[5] = pa[5];\n\t                        r[6] = +(pa[6] - x).toFixed(3);\n\t                        r[7] = +(pa[7] - y).toFixed(3);\n\t                        break;\n\t                    case \"v\":\n\t                        r[1] = +(pa[1] - y).toFixed(3);\n\t                        break;\n\t                    case \"m\":\n\t                        mx = pa[1];\n\t                        my = pa[2];\n\t                    default:\n\t                        for (var j = 1, jj = pa.length; j < jj; j++) {\n\t                            r[j] = +(pa[j] - ((j % 2) ? x : y)).toFixed(3);\n\t                        }\n\t                }\n\t            } else {\n\t                r = res[i] = [];\n\t                if (pa[0] == \"m\") {\n\t                    mx = pa[1] + x;\n\t                    my = pa[2] + y;\n\t                }\n\t                for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                    res[i][k] = pa[k];\n\t                }\n\t            }\n\t            var len = res[i].length;\n\t            switch (res[i][0]) {\n\t                case \"z\":\n\t                    x = mx;\n\t                    y = my;\n\t                    break;\n\t                case \"h\":\n\t                    x += +res[i][len - 1];\n\t                    break;\n\t                case \"v\":\n\t                    y += +res[i][len - 1];\n\t                    break;\n\t                default:\n\t                    x += +res[i][len - 2];\n\t                    y += +res[i][len - 1];\n\t            }\n\t        }\n\t        res.toString = toString;\n\t        pth.rel = pathClone(res);\n\t        return res;\n\t    }\n\t    function pathToAbsolute(pathArray) {\n\t        var pth = paths(pathArray);\n\t        if (pth.abs) {\n\t            return pathClone(pth.abs);\n\t        }\n\t        if (!is(pathArray, \"array\") || !is(pathArray && pathArray[0], \"array\")) { // rough assumption\n\t            pathArray = Snap.parsePathString(pathArray);\n\t        }\n\t        if (!pathArray || !pathArray.length) {\n\t            return [[\"M\", 0, 0]];\n\t        }\n\t        var res = [],\n\t            x = 0,\n\t            y = 0,\n\t            mx = 0,\n\t            my = 0,\n\t            start = 0,\n\t            pa0;\n\t        if (pathArray[0][0] == \"M\") {\n\t            x = +pathArray[0][1];\n\t            y = +pathArray[0][2];\n\t            mx = x;\n\t            my = y;\n\t            start++;\n\t            res[0] = [\"M\", x, y];\n\t        }\n\t        var crz = pathArray.length == 3 &&\n\t            pathArray[0][0] == \"M\" &&\n\t            pathArray[1][0].toUpperCase() == \"R\" &&\n\t            pathArray[2][0].toUpperCase() == \"Z\";\n\t        for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n\t            res.push(r = []);\n\t            pa = pathArray[i];\n\t            pa0 = pa[0];\n\t            if (pa0 != pa0.toUpperCase()) {\n\t                r[0] = pa0.toUpperCase();\n\t                switch (r[0]) {\n\t                    case \"A\":\n\t                        r[1] = pa[1];\n\t                        r[2] = pa[2];\n\t                        r[3] = pa[3];\n\t                        r[4] = pa[4];\n\t                        r[5] = pa[5];\n\t                        r[6] = +pa[6] + x;\n\t                        r[7] = +pa[7] + y;\n\t                        break;\n\t                    case \"V\":\n\t                        r[1] = +pa[1] + y;\n\t                        break;\n\t                    case \"H\":\n\t                        r[1] = +pa[1] + x;\n\t                        break;\n\t                    case \"R\":\n\t                        var dots = [x, y].concat(pa.slice(1));\n\t                        for (var j = 2, jj = dots.length; j < jj; j++) {\n\t                            dots[j] = +dots[j] + x;\n\t                            dots[++j] = +dots[j] + y;\n\t                        }\n\t                        res.pop();\n\t                        res = res.concat(catmullRom2bezier(dots, crz));\n\t                        break;\n\t                    case \"O\":\n\t                        res.pop();\n\t                        dots = ellipsePath(x, y, pa[1], pa[2]);\n\t                        dots.push(dots[0]);\n\t                        res = res.concat(dots);\n\t                        break;\n\t                    case \"U\":\n\t                        res.pop();\n\t                        res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n\t                        r = [\"U\"].concat(res[res.length - 1].slice(-2));\n\t                        break;\n\t                    case \"M\":\n\t                        mx = +pa[1] + x;\n\t                        my = +pa[2] + y;\n\t                    default:\n\t                        for (j = 1, jj = pa.length; j < jj; j++) {\n\t                            r[j] = +pa[j] + ((j % 2) ? x : y);\n\t                        }\n\t                }\n\t            } else if (pa0 == \"R\") {\n\t                dots = [x, y].concat(pa.slice(1));\n\t                res.pop();\n\t                res = res.concat(catmullRom2bezier(dots, crz));\n\t                r = [\"R\"].concat(pa.slice(-2));\n\t            } else if (pa0 == \"O\") {\n\t                res.pop();\n\t                dots = ellipsePath(x, y, pa[1], pa[2]);\n\t                dots.push(dots[0]);\n\t                res = res.concat(dots);\n\t            } else if (pa0 == \"U\") {\n\t                res.pop();\n\t                res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n\t                r = [\"U\"].concat(res[res.length - 1].slice(-2));\n\t            } else {\n\t                for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                    r[k] = pa[k];\n\t                }\n\t            }\n\t            pa0 = pa0.toUpperCase();\n\t            if (pa0 != \"O\") {\n\t                switch (r[0]) {\n\t                    case \"Z\":\n\t                        x = +mx;\n\t                        y = +my;\n\t                        break;\n\t                    case \"H\":\n\t                        x = r[1];\n\t                        break;\n\t                    case \"V\":\n\t                        y = r[1];\n\t                        break;\n\t                    case \"M\":\n\t                        mx = r[r.length - 2];\n\t                        my = r[r.length - 1];\n\t                    default:\n\t                        x = r[r.length - 2];\n\t                        y = r[r.length - 1];\n\t                }\n\t            }\n\t        }\n\t        res.toString = toString;\n\t        pth.abs = pathClone(res);\n\t        return res;\n\t    }\n\t    function l2c(x1, y1, x2, y2) {\n\t        return [x1, y1, x2, y2, x2, y2];\n\t    }\n\t    function q2c(x1, y1, ax, ay, x2, y2) {\n\t        var _13 = 1 / 3,\n\t            _23 = 2 / 3;\n\t        return [\n\t                _13 * x1 + _23 * ax,\n\t                _13 * y1 + _23 * ay,\n\t                _13 * x2 + _23 * ax,\n\t                _13 * y2 + _23 * ay,\n\t                x2,\n\t                y2\n\t            ];\n\t    }\n\t    function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n\t        // for more information of where this math came from visit:\n\t        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n\t        var _120 = PI * 120 / 180,\n\t            rad = PI / 180 * (+angle || 0),\n\t            res = [],\n\t            xy,\n\t            rotate = Snap._.cacher(function (x, y, rad) {\n\t                var X = x * math.cos(rad) - y * math.sin(rad),\n\t                    Y = x * math.sin(rad) + y * math.cos(rad);\n\t                return {x: X, y: Y};\n\t            });\n\t        if (!recursive) {\n\t            xy = rotate(x1, y1, -rad);\n\t            x1 = xy.x;\n\t            y1 = xy.y;\n\t            xy = rotate(x2, y2, -rad);\n\t            x2 = xy.x;\n\t            y2 = xy.y;\n\t            var cos = math.cos(PI / 180 * angle),\n\t                sin = math.sin(PI / 180 * angle),\n\t                x = (x1 - x2) / 2,\n\t                y = (y1 - y2) / 2;\n\t            var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n\t            if (h > 1) {\n\t                h = math.sqrt(h);\n\t                rx = h * rx;\n\t                ry = h * ry;\n\t            }\n\t            var rx2 = rx * rx,\n\t                ry2 = ry * ry,\n\t                k = (large_arc_flag == sweep_flag ? -1 : 1) *\n\t                    math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n\t                cx = k * rx * y / ry + (x1 + x2) / 2,\n\t                cy = k * -ry * x / rx + (y1 + y2) / 2,\n\t                f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n\t                f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\t\n\t            f1 = x1 < cx ? PI - f1 : f1;\n\t            f2 = x2 < cx ? PI - f2 : f2;\n\t            f1 < 0 && (f1 = PI * 2 + f1);\n\t            f2 < 0 && (f2 = PI * 2 + f2);\n\t            if (sweep_flag && f1 > f2) {\n\t                f1 = f1 - PI * 2;\n\t            }\n\t            if (!sweep_flag && f2 > f1) {\n\t                f2 = f2 - PI * 2;\n\t            }\n\t        } else {\n\t            f1 = recursive[0];\n\t            f2 = recursive[1];\n\t            cx = recursive[2];\n\t            cy = recursive[3];\n\t        }\n\t        var df = f2 - f1;\n\t        if (abs(df) > _120) {\n\t            var f2old = f2,\n\t                x2old = x2,\n\t                y2old = y2;\n\t            f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n\t            x2 = cx + rx * math.cos(f2);\n\t            y2 = cy + ry * math.sin(f2);\n\t            res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n\t        }\n\t        df = f2 - f1;\n\t        var c1 = math.cos(f1),\n\t            s1 = math.sin(f1),\n\t            c2 = math.cos(f2),\n\t            s2 = math.sin(f2),\n\t            t = math.tan(df / 4),\n\t            hx = 4 / 3 * rx * t,\n\t            hy = 4 / 3 * ry * t,\n\t            m1 = [x1, y1],\n\t            m2 = [x1 + hx * s1, y1 - hy * c1],\n\t            m3 = [x2 + hx * s2, y2 - hy * c2],\n\t            m4 = [x2, y2];\n\t        m2[0] = 2 * m1[0] - m2[0];\n\t        m2[1] = 2 * m1[1] - m2[1];\n\t        if (recursive) {\n\t            return [m2, m3, m4].concat(res);\n\t        } else {\n\t            res = [m2, m3, m4].concat(res).join().split(\",\");\n\t            var newres = [];\n\t            for (var i = 0, ii = res.length; i < ii; i++) {\n\t                newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n\t            }\n\t            return newres;\n\t        }\n\t    }\n\t    function findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t        var t1 = 1 - t;\n\t        return {\n\t            x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n\t            y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n\t        };\n\t    }\n\t\n\t    // Returns bounding box of cubic bezier curve.\n\t    // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n\t    // Original version: NISHIO Hirokazu\n\t    // Modifications: https://github.com/timo22345\n\t    function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {\n\t        var tvalues = [],\n\t            bounds = [[], []],\n\t            a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n\t        for (var i = 0; i < 2; ++i) {\n\t            if (i == 0) {\n\t                b = 6 * x0 - 12 * x1 + 6 * x2;\n\t                a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n\t                c = 3 * x1 - 3 * x0;\n\t            } else {\n\t                b = 6 * y0 - 12 * y1 + 6 * y2;\n\t                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n\t                c = 3 * y1 - 3 * y0;\n\t            }\n\t            if (abs(a) < 1e-12) {\n\t                if (abs(b) < 1e-12) {\n\t                    continue;\n\t                }\n\t                t = -c / b;\n\t                if (0 < t && t < 1) {\n\t                    tvalues.push(t);\n\t                }\n\t                continue;\n\t            }\n\t            b2ac = b * b - 4 * c * a;\n\t            sqrtb2ac = math.sqrt(b2ac);\n\t            if (b2ac < 0) {\n\t                continue;\n\t            }\n\t            t1 = (-b + sqrtb2ac) / (2 * a);\n\t            if (0 < t1 && t1 < 1) {\n\t                tvalues.push(t1);\n\t            }\n\t            t2 = (-b - sqrtb2ac) / (2 * a);\n\t            if (0 < t2 && t2 < 1) {\n\t                tvalues.push(t2);\n\t            }\n\t        }\n\t\n\t        var x, y, j = tvalues.length,\n\t            jlen = j,\n\t            mt;\n\t        while (j--) {\n\t            t = tvalues[j];\n\t            mt = 1 - t;\n\t            bounds[0][j] = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);\n\t            bounds[1][j] = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);\n\t        }\n\t\n\t        bounds[0][jlen] = x0;\n\t        bounds[1][jlen] = y0;\n\t        bounds[0][jlen + 1] = x3;\n\t        bounds[1][jlen + 1] = y3;\n\t        bounds[0].length = bounds[1].length = jlen + 2;\n\t\n\t\n\t        return {\n\t          min: {x: mmin.apply(0, bounds[0]), y: mmin.apply(0, bounds[1])},\n\t          max: {x: mmax.apply(0, bounds[0]), y: mmax.apply(0, bounds[1])}\n\t        };\n\t    }\n\t\n\t    function path2curve(path, path2) {\n\t        var pth = !path2 && paths(path);\n\t        if (!path2 && pth.curve) {\n\t            return pathClone(pth.curve);\n\t        }\n\t        var p = pathToAbsolute(path),\n\t            p2 = path2 && pathToAbsolute(path2),\n\t            attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n\t            attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n\t            processPath = function (path, d, pcom) {\n\t                var nx, ny;\n\t                if (!path) {\n\t                    return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n\t                }\n\t                !(path[0] in {T: 1, Q: 1}) && (d.qx = d.qy = null);\n\t                switch (path[0]) {\n\t                    case \"M\":\n\t                        d.X = path[1];\n\t                        d.Y = path[2];\n\t                        break;\n\t                    case \"A\":\n\t                        path = [\"C\"].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n\t                        break;\n\t                    case \"S\":\n\t                        if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n\t                            nx = d.x * 2 - d.bx;          // And reflect the previous\n\t                            ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n\t                        }\n\t                        else {                            // or some else or nothing\n\t                            nx = d.x;\n\t                            ny = d.y;\n\t                        }\n\t                        path = [\"C\", nx, ny].concat(path.slice(1));\n\t                        break;\n\t                    case \"T\":\n\t                        if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n\t                            d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n\t                            d.qy = d.y * 2 - d.qy;        // to case \"S\".\n\t                        }\n\t                        else {                            // or something else or nothing\n\t                            d.qx = d.x;\n\t                            d.qy = d.y;\n\t                        }\n\t                        path = [\"C\"].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n\t                        break;\n\t                    case \"Q\":\n\t                        d.qx = path[1];\n\t                        d.qy = path[2];\n\t                        path = [\"C\"].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n\t                        break;\n\t                    case \"L\":\n\t                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], path[2]));\n\t                        break;\n\t                    case \"H\":\n\t                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], d.y));\n\t                        break;\n\t                    case \"V\":\n\t                        path = [\"C\"].concat(l2c(d.x, d.y, d.x, path[1]));\n\t                        break;\n\t                    case \"Z\":\n\t                        path = [\"C\"].concat(l2c(d.x, d.y, d.X, d.Y));\n\t                        break;\n\t                }\n\t                return path;\n\t            },\n\t            fixArc = function (pp, i) {\n\t                if (pp[i].length > 7) {\n\t                    pp[i].shift();\n\t                    var pi = pp[i];\n\t                    while (pi.length) {\n\t                        pcoms1[i] = \"A\"; // if created multiple C:s, their original seg is saved\n\t                        p2 && (pcoms2[i] = \"A\"); // the same as above\n\t                        pp.splice(i++, 0, [\"C\"].concat(pi.splice(0, 6)));\n\t                    }\n\t                    pp.splice(i, 1);\n\t                    ii = mmax(p.length, p2 && p2.length || 0);\n\t                }\n\t            },\n\t            fixM = function (path1, path2, a1, a2, i) {\n\t                if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n\t                    path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n\t                    a1.bx = 0;\n\t                    a1.by = 0;\n\t                    a1.x = path1[i][1];\n\t                    a1.y = path1[i][2];\n\t                    ii = mmax(p.length, p2 && p2.length || 0);\n\t                }\n\t            },\n\t            pcoms1 = [], // path commands of original path p\n\t            pcoms2 = [], // path commands of original path p2\n\t            pfirst = \"\", // temporary holder for original path command\n\t            pcom = \"\"; // holder for previous path command of original path\n\t        for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n\t            p[i] && (pfirst = p[i][0]); // save current path command\n\t\n\t            if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n\t            {\n\t                pcoms1[i] = pfirst; // Save current path command\n\t                i && ( pcom = pcoms1[i - 1]); // Get previous path command pcom\n\t            }\n\t            p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\t\n\t            if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n\t            // which may produce multiple C:s\n\t            // so we have to make sure that C is also C in original path\n\t\n\t            fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\t\n\t            if (p2) { // the same procedures is done to p2\n\t                p2[i] && (pfirst = p2[i][0]);\n\t                if (pfirst != \"C\") {\n\t                    pcoms2[i] = pfirst;\n\t                    i && (pcom = pcoms2[i - 1]);\n\t                }\n\t                p2[i] = processPath(p2[i], attrs2, pcom);\n\t\n\t                if (pcoms2[i] != \"A\" && pfirst == \"C\") {\n\t                    pcoms2[i] = \"C\";\n\t                }\n\t\n\t                fixArc(p2, i);\n\t            }\n\t            fixM(p, p2, attrs, attrs2, i);\n\t            fixM(p2, p, attrs2, attrs, i);\n\t            var seg = p[i],\n\t                seg2 = p2 && p2[i],\n\t                seglen = seg.length,\n\t                seg2len = p2 && seg2.length;\n\t            attrs.x = seg[seglen - 2];\n\t            attrs.y = seg[seglen - 1];\n\t            attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n\t            attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n\t            attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n\t            attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n\t            attrs2.x = p2 && seg2[seg2len - 2];\n\t            attrs2.y = p2 && seg2[seg2len - 1];\n\t        }\n\t        if (!p2) {\n\t            pth.curve = pathClone(p);\n\t        }\n\t        return p2 ? [p, p2] : p;\n\t    }\n\t    function mapPath(path, matrix) {\n\t        if (!matrix) {\n\t            return path;\n\t        }\n\t        var x, y, i, j, ii, jj, pathi;\n\t        path = path2curve(path);\n\t        for (i = 0, ii = path.length; i < ii; i++) {\n\t            pathi = path[i];\n\t            for (j = 1, jj = pathi.length; j < jj; j += 2) {\n\t                x = matrix.x(pathi[j], pathi[j + 1]);\n\t                y = matrix.y(pathi[j], pathi[j + 1]);\n\t                pathi[j] = x;\n\t                pathi[j + 1] = y;\n\t            }\n\t        }\n\t        return path;\n\t    }\n\t\n\t    // http://schepers.cc/getting-to-the-point\n\t    function catmullRom2bezier(crp, z) {\n\t        var d = [];\n\t        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n\t            var p = [\n\t                        {x: +crp[i - 2], y: +crp[i - 1]},\n\t                        {x: +crp[i],     y: +crp[i + 1]},\n\t                        {x: +crp[i + 2], y: +crp[i + 3]},\n\t                        {x: +crp[i + 4], y: +crp[i + 5]}\n\t                    ];\n\t            if (z) {\n\t                if (!i) {\n\t                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n\t                } else if (iLen - 4 == i) {\n\t                    p[3] = {x: +crp[0], y: +crp[1]};\n\t                } else if (iLen - 2 == i) {\n\t                    p[2] = {x: +crp[0], y: +crp[1]};\n\t                    p[3] = {x: +crp[2], y: +crp[3]};\n\t                }\n\t            } else {\n\t                if (iLen - 4 == i) {\n\t                    p[3] = p[2];\n\t                } else if (!i) {\n\t                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n\t                }\n\t            }\n\t            d.push([\"C\",\n\t                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n\t                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n\t                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n\t                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n\t                  p[2].x,\n\t                  p[2].y\n\t            ]);\n\t        }\n\t\n\t        return d;\n\t    }\n\t\n\t    // export\n\t    Snap.path = paths;\n\t\n\t    /*\\\n\t     * Snap.path.getTotalLength\n\t     [ method ]\n\t     **\n\t     * Returns the length of the given path in pixels\n\t     **\n\t     - path (string) SVG path string\n\t     **\n\t     = (number) length\n\t    \\*/\n\t    Snap.path.getTotalLength = getTotalLength;\n\t    /*\\\n\t     * Snap.path.getPointAtLength\n\t     [ method ]\n\t     **\n\t     * Returns the coordinates of the point located at the given length along the given path\n\t     **\n\t     - path (string) SVG path string\n\t     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n\t     **\n\t     = (object) representation of the point:\n\t     o {\n\t     o     x: (number) x coordinate,\n\t     o     y: (number) y coordinate,\n\t     o     alpha: (number) angle of derivative\n\t     o }\n\t    \\*/\n\t    Snap.path.getPointAtLength = getPointAtLength;\n\t    /*\\\n\t     * Snap.path.getSubpath\n\t     [ method ]\n\t     **\n\t     * Returns the subpath of a given path between given start and end lengths\n\t     **\n\t     - path (string) SVG path string\n\t     - from (number) length, in pixels, from the start of the path to the start of the segment\n\t     - to (number) length, in pixels, from the start of the path to the end of the segment\n\t     **\n\t     = (string) path string definition for the segment\n\t    \\*/\n\t    Snap.path.getSubpath = function (path, from, to) {\n\t        if (this.getTotalLength(path) - to < 1e-6) {\n\t            return getSubpathsAtLength(path, from).end;\n\t        }\n\t        var a = getSubpathsAtLength(path, to, 1);\n\t        return from ? getSubpathsAtLength(a, from).end : a;\n\t    };\n\t    /*\\\n\t     * Element.getTotalLength\n\t     [ method ]\n\t     **\n\t     * Returns the length of the path in pixels (only works for `path` elements)\n\t     = (number) length\n\t    \\*/\n\t    elproto.getTotalLength = function () {\n\t        if (this.node.getTotalLength) {\n\t            return this.node.getTotalLength();\n\t        }\n\t    };\n\t    // SIERRA Element.getPointAtLength()/Element.getTotalLength(): If a <path> is broken into different segments, is the jump distance to the new coordinates set by the _M_ or _m_ commands calculated as part of the path's total length?\n\t    /*\\\n\t     * Element.getPointAtLength\n\t     [ method ]\n\t     **\n\t     * Returns coordinates of the point located at the given length on the given path (only works for `path` elements)\n\t     **\n\t     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n\t     **\n\t     = (object) representation of the point:\n\t     o {\n\t     o     x: (number) x coordinate,\n\t     o     y: (number) y coordinate,\n\t     o     alpha: (number) angle of derivative\n\t     o }\n\t    \\*/\n\t    elproto.getPointAtLength = function (length) {\n\t        return getPointAtLength(this.attr(\"d\"), length);\n\t    };\n\t    // SIERRA Element.getSubpath(): Similar to the problem for Element.getPointAtLength(). Unclear how this would work for a segmented path. Overall, the concept of _subpath_ and what I'm calling a _segment_ (series of non-_M_ or _Z_ commands) is unclear.\n\t    /*\\\n\t     * Element.getSubpath\n\t     [ method ]\n\t     **\n\t     * Returns subpath of a given element from given start and end lengths (only works for `path` elements)\n\t     **\n\t     - from (number) length, in pixels, from the start of the path to the start of the segment\n\t     - to (number) length, in pixels, from the start of the path to the end of the segment\n\t     **\n\t     = (string) path string definition for the segment\n\t    \\*/\n\t    elproto.getSubpath = function (from, to) {\n\t        return Snap.path.getSubpath(this.attr(\"d\"), from, to);\n\t    };\n\t    Snap._.box = box;\n\t    /*\\\n\t     * Snap.path.findDotsAtSegment\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Finds dot coordinates on the given cubic beziér curve at the given t\n\t     - p1x (number) x of the first point of the curve\n\t     - p1y (number) y of the first point of the curve\n\t     - c1x (number) x of the first anchor of the curve\n\t     - c1y (number) y of the first anchor of the curve\n\t     - c2x (number) x of the second anchor of the curve\n\t     - c2y (number) y of the second anchor of the curve\n\t     - p2x (number) x of the second point of the curve\n\t     - p2y (number) y of the second point of the curve\n\t     - t (number) position on the curve (0..1)\n\t     = (object) point information in format:\n\t     o {\n\t     o     x: (number) x coordinate of the point,\n\t     o     y: (number) y coordinate of the point,\n\t     o     m: {\n\t     o         x: (number) x coordinate of the left anchor,\n\t     o         y: (number) y coordinate of the left anchor\n\t     o     },\n\t     o     n: {\n\t     o         x: (number) x coordinate of the right anchor,\n\t     o         y: (number) y coordinate of the right anchor\n\t     o     },\n\t     o     start: {\n\t     o         x: (number) x coordinate of the start of the curve,\n\t     o         y: (number) y coordinate of the start of the curve\n\t     o     },\n\t     o     end: {\n\t     o         x: (number) x coordinate of the end of the curve,\n\t     o         y: (number) y coordinate of the end of the curve\n\t     o     },\n\t     o     alpha: (number) angle of the curve derivative at the point\n\t     o }\n\t    \\*/\n\t    Snap.path.findDotsAtSegment = findDotsAtSegment;\n\t    /*\\\n\t     * Snap.path.bezierBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns the bounding box of a given cubic beziér curve\n\t     - p1x (number) x of the first point of the curve\n\t     - p1y (number) y of the first point of the curve\n\t     - c1x (number) x of the first anchor of the curve\n\t     - c1y (number) y of the first anchor of the curve\n\t     - c2x (number) x of the second anchor of the curve\n\t     - c2y (number) y of the second anchor of the curve\n\t     - p2x (number) x of the second point of the curve\n\t     - p2y (number) y of the second point of the curve\n\t     * or\n\t     - bez (array) array of six points for beziér curve\n\t     = (object) bounding box\n\t     o {\n\t     o     x: (number) x coordinate of the left top point of the box,\n\t     o     y: (number) y coordinate of the left top point of the box,\n\t     o     x2: (number) x coordinate of the right bottom point of the box,\n\t     o     y2: (number) y coordinate of the right bottom point of the box,\n\t     o     width: (number) width of the box,\n\t     o     height: (number) height of the box\n\t     o }\n\t    \\*/\n\t    Snap.path.bezierBBox = bezierBBox;\n\t    /*\\\n\t     * Snap.path.isPointInsideBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if given point is inside bounding box\n\t     - bbox (string) bounding box\n\t     - x (string) x coordinate of the point\n\t     - y (string) y coordinate of the point\n\t     = (boolean) `true` if point is inside\n\t    \\*/\n\t    Snap.path.isPointInsideBBox = isPointInsideBBox;\n\t    Snap.closest = function (x, y, X, Y) {\n\t        var r = 100,\n\t            b = box(x - r / 2, y - r / 2, r, r),\n\t            inside = [],\n\t            getter = X[0].hasOwnProperty(\"x\") ? function (i) {\n\t                return {\n\t                    x: X[i].x,\n\t                    y: X[i].y\n\t                };\n\t            } : function (i) {\n\t                return {\n\t                    x: X[i],\n\t                    y: Y[i]\n\t                };\n\t            },\n\t            found = 0;\n\t        while (r <= 1e6 && !found) {\n\t            for (var i = 0, ii = X.length; i < ii; i++) {\n\t                var xy = getter(i);\n\t                if (isPointInsideBBox(b, xy.x, xy.y)) {\n\t                    found++;\n\t                    inside.push(xy);\n\t                    break;\n\t                }\n\t            }\n\t            if (!found) {\n\t                r *= 2;\n\t                b = box(x - r / 2, y - r / 2, r, r)\n\t            }\n\t        }\n\t        if (r == 1e6) {\n\t            return;\n\t        }\n\t        var len = Infinity,\n\t            res;\n\t        for (i = 0, ii = inside.length; i < ii; i++) {\n\t            var l = Snap.len(x, y, inside[i].x, inside[i].y);\n\t            if (len > l) {\n\t                len = l;\n\t                inside[i].len = l;\n\t                res = inside[i];\n\t            }\n\t        }\n\t        return res;\n\t    };\n\t    /*\\\n\t     * Snap.path.isBBoxIntersect\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if two bounding boxes intersect\n\t     - bbox1 (string) first bounding box\n\t     - bbox2 (string) second bounding box\n\t     = (boolean) `true` if bounding boxes intersect\n\t    \\*/\n\t    Snap.path.isBBoxIntersect = isBBoxIntersect;\n\t    /*\\\n\t     * Snap.path.intersection\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Finds intersections of two paths\n\t     - path1 (string) path string\n\t     - path2 (string) path string\n\t     = (array) dots of intersection\n\t     o [\n\t     o     {\n\t     o         x: (number) x coordinate of the point,\n\t     o         y: (number) y coordinate of the point,\n\t     o         t1: (number) t value for segment of path1,\n\t     o         t2: (number) t value for segment of path2,\n\t     o         segment1: (number) order number for segment of path1,\n\t     o         segment2: (number) order number for segment of path2,\n\t     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1,\n\t     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n\t     o     }\n\t     o ]\n\t    \\*/\n\t    Snap.path.intersection = pathIntersection;\n\t    Snap.path.intersectionNumber = pathIntersectionNumber;\n\t    /*\\\n\t     * Snap.path.isPointInside\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns `true` if given point is inside a given closed path.\n\t     *\n\t     * Note: fill mode doesn’t affect the result of this method.\n\t     - path (string) path string\n\t     - x (number) x of the point\n\t     - y (number) y of the point\n\t     = (boolean) `true` if point is inside the path\n\t    \\*/\n\t    Snap.path.isPointInside = isPointInsidePath;\n\t    /*\\\n\t     * Snap.path.getBBox\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Returns the bounding box of a given path\n\t     - path (string) path string\n\t     = (object) bounding box\n\t     o {\n\t     o     x: (number) x coordinate of the left top point of the box,\n\t     o     y: (number) y coordinate of the left top point of the box,\n\t     o     x2: (number) x coordinate of the right bottom point of the box,\n\t     o     y2: (number) y coordinate of the right bottom point of the box,\n\t     o     width: (number) width of the box,\n\t     o     height: (number) height of the box\n\t     o }\n\t    \\*/\n\t    Snap.path.getBBox = pathBBox;\n\t    Snap.path.get = getPath;\n\t    /*\\\n\t     * Snap.path.toRelative\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path coordinates into relative values\n\t     - path (string) path string\n\t     = (array) path string\n\t    \\*/\n\t    Snap.path.toRelative = pathToRelative;\n\t    /*\\\n\t     * Snap.path.toAbsolute\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path coordinates into absolute values\n\t     - path (string) path string\n\t     = (array) path string\n\t    \\*/\n\t    Snap.path.toAbsolute = pathToAbsolute;\n\t    /*\\\n\t     * Snap.path.toCubic\n\t     [ method ]\n\t     **\n\t     * Utility method\n\t     **\n\t     * Converts path to a new path where all segments are cubic beziér curves\n\t     - pathString (string|array) path string or array of segments\n\t     = (array) array of segments\n\t    \\*/\n\t    Snap.path.toCubic = path2curve;\n\t    /*\\\n\t     * Snap.path.map\n\t     [ method ]\n\t     **\n\t     * Transform the path string with the given matrix\n\t     - path (string) path string\n\t     - matrix (object) see @Matrix\n\t     = (string) transformed path string\n\t    \\*/\n\t    Snap.path.map = mapPath;\n\t    Snap.path.toString = toString;\n\t    Snap.path.clone = pathClone;\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob) {\n\t    var mmax = Math.max,\n\t        mmin = Math.min;\n\t\n\t    // Set\n\t    var Set = function (items) {\n\t        this.items = [];\n\t\tthis.bindings = {};\n\t        this.length = 0;\n\t        this.type = \"set\";\n\t        if (items) {\n\t            for (var i = 0, ii = items.length; i < ii; i++) {\n\t                if (items[i]) {\n\t                    this[this.items.length] = this.items[this.items.length] = items[i];\n\t                    this.length++;\n\t                }\n\t            }\n\t        }\n\t    },\n\t    setproto = Set.prototype;\n\t    /*\\\n\t     * Set.push\n\t     [ method ]\n\t     **\n\t     * Adds each argument to the current set\n\t     = (object) original element\n\t    \\*/\n\t    setproto.push = function () {\n\t        var item,\n\t            len;\n\t        for (var i = 0, ii = arguments.length; i < ii; i++) {\n\t            item = arguments[i];\n\t            if (item) {\n\t                len = this.items.length;\n\t                this[len] = this.items[len] = item;\n\t                this.length++;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.pop\n\t     [ method ]\n\t     **\n\t     * Removes last element and returns it\n\t     = (object) element\n\t    \\*/\n\t    setproto.pop = function () {\n\t        this.length && delete this[this.length--];\n\t        return this.items.pop();\n\t    };\n\t    /*\\\n\t     * Set.forEach\n\t     [ method ]\n\t     **\n\t     * Executes given function for each element in the set\n\t     *\n\t     * If the function returns `false`, the loop stops running.\n\t     **\n\t     - callback (function) function to run\n\t     - thisArg (object) context object for the callback\n\t     = (object) Set object\n\t    \\*/\n\t    setproto.forEach = function (callback, thisArg) {\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            if (callback.call(thisArg, this.items[i], i) === false) {\n\t                return this;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.animate\n\t     [ method ]\n\t     **\n\t     * Animates each element in set in sync.\n\t     *\n\t     **\n\t     - attrs (object) key-value pairs of destination attributes\n\t     - duration (number) duration of the animation in milliseconds\n\t     - easing (function) #optional easing function from @mina or custom\n\t     - callback (function) #optional callback function that executes when the animation ends\n\t     * or\n\t     - animation (array) array of animation parameter for each element in set in format `[attrs, duration, easing, callback]`\n\t     > Usage\n\t     | // animate all elements in set to radius 10\n\t     | set.animate({r: 10}, 500, mina.easein);\n\t     | // or\n\t     | // animate first element to radius 10, but second to radius 20 and in different time\n\t     | set.animate([{r: 10}, 500, mina.easein], [{r: 20}, 1500, mina.easein]);\n\t     = (Element) the current element\n\t    \\*/\n\t    setproto.animate = function (attrs, ms, easing, callback) {\n\t        if (typeof easing == \"function\" && !easing.length) {\n\t            callback = easing;\n\t            easing = mina.linear;\n\t        }\n\t        if (attrs instanceof Snap._.Animation) {\n\t            callback = attrs.callback;\n\t            easing = attrs.easing;\n\t            ms = easing.dur;\n\t            attrs = attrs.attr;\n\t        }\n\t        var args = arguments;\n\t        if (Snap.is(attrs, \"array\") && Snap.is(args[args.length - 1], \"array\")) {\n\t            var each = true;\n\t        }\n\t        var begin,\n\t            handler = function () {\n\t                if (begin) {\n\t                    this.b = begin;\n\t                } else {\n\t                    begin = this.b;\n\t                }\n\t            },\n\t            cb = 0,\n\t            set = this,\n\t            callbacker = callback && function () {\n\t                if (++cb == set.length) {\n\t                    callback.call(this);\n\t                }\n\t            };\n\t        return this.forEach(function (el, i) {\n\t            eve.once(\"snap.animcreated.\" + el.id, handler);\n\t            if (each) {\n\t                args[i] && el.animate.apply(el, args[i]);\n\t            } else {\n\t                el.animate(attrs, ms, easing, callbacker);\n\t            }\n\t        });\n\t    };\n\t    setproto.remove = function () {\n\t        while (this.length) {\n\t            this.pop().remove();\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.bind\n\t     [ method ]\n\t     **\n\t     * Specifies how to handle a specific attribute when applied\n\t     * to a set.\n\t     *\n\t     **\n\t     - attr (string) attribute name\n\t     - callback (function) function to run\n\t     * or\n\t     - attr (string) attribute name\n\t     - element (Element) specific element in the set to apply the attribute to\n\t     * or\n\t     - attr (string) attribute name\n\t     - element (Element) specific element in the set to apply the attribute to\n\t     - eattr (string) attribute on the element to bind the attribute to\n\t     = (object) Set object\n\t    \\*/\n\t    setproto.bind = function (attr, a, b) {\n\t        var data = {};\n\t        if (typeof a == \"function\") {\n\t            this.bindings[attr] = a;\n\t        } else {\n\t            var aname = b || attr;\n\t            this.bindings[attr] = function (v) {\n\t                data[aname] = v;\n\t                a.attr(data);\n\t            };\n\t        }\n\t        return this;\n\t    };\n\t    setproto.attr = function (value) {\n\t        var unbound = {};\n\t        for (var k in value) {\n\t            if (this.bindings[k]) {\n\t                this.bindings[k](value[k]);\n\t            } else {\n\t                unbound[k] = value[k];\n\t            }\n\t        }\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            this.items[i].attr(unbound);\n\t        }\n\t        return this;\n\t    };\n\t    /*\\\n\t     * Set.clear\n\t     [ method ]\n\t     **\n\t     * Removes all elements from the set\n\t    \\*/\n\t    setproto.clear = function () {\n\t        while (this.length) {\n\t            this.pop();\n\t        }\n\t    };\n\t    /*\\\n\t     * Set.splice\n\t     [ method ]\n\t     **\n\t     * Removes range of elements from the set\n\t     **\n\t     - index (number) position of the deletion\n\t     - count (number) number of element to remove\n\t     - insertion… (object) #optional elements to insert\n\t     = (object) set elements that were deleted\n\t    \\*/\n\t    setproto.splice = function (index, count, insertion) {\n\t        index = index < 0 ? mmax(this.length + index, 0) : index;\n\t        count = mmax(0, mmin(this.length - index, count));\n\t        var tail = [],\n\t            todel = [],\n\t            args = [],\n\t            i;\n\t        for (i = 2; i < arguments.length; i++) {\n\t            args.push(arguments[i]);\n\t        }\n\t        for (i = 0; i < count; i++) {\n\t            todel.push(this[index + i]);\n\t        }\n\t        for (; i < this.length - index; i++) {\n\t            tail.push(this[index + i]);\n\t        }\n\t        var arglen = args.length;\n\t        for (i = 0; i < arglen + tail.length; i++) {\n\t            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n\t        }\n\t        i = this.items.length = this.length -= count - arglen;\n\t        while (this[i]) {\n\t            delete this[i++];\n\t        }\n\t        return new Set(todel);\n\t    };\n\t    /*\\\n\t     * Set.exclude\n\t     [ method ]\n\t     **\n\t     * Removes given element from the set\n\t     **\n\t     - element (object) element to remove\n\t     = (boolean) `true` if object was found and removed from the set\n\t    \\*/\n\t    setproto.exclude = function (el) {\n\t        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n\t            this.splice(i, 1);\n\t            return true;\n\t        }\n\t        return false;\n\t    };\n\t    setproto.insertAfter = function (el) {\n\t        var i = this.items.length;\n\t        while (i--) {\n\t            this.items[i].insertAfter(el);\n\t        }\n\t        return this;\n\t    };\n\t    setproto.getBBox = function () {\n\t        var x = [],\n\t            y = [],\n\t            x2 = [],\n\t            y2 = [];\n\t        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n\t            var box = this.items[i].getBBox();\n\t            x.push(box.x);\n\t            y.push(box.y);\n\t            x2.push(box.x + box.width);\n\t            y2.push(box.y + box.height);\n\t        }\n\t        x = mmin.apply(0, x);\n\t        y = mmin.apply(0, y);\n\t        x2 = mmax.apply(0, x2);\n\t        y2 = mmax.apply(0, y2);\n\t        return {\n\t            x: x,\n\t            y: y,\n\t            x2: x2,\n\t            y2: y2,\n\t            width: x2 - x,\n\t            height: y2 - y,\n\t            cx: x + (x2 - x) / 2,\n\t            cy: y + (y2 - y) / 2\n\t        };\n\t    };\n\t    setproto.clone = function (s) {\n\t        s = new Set;\n\t        for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t            s.push(this.items[i].clone());\n\t        }\n\t        return s;\n\t    };\n\t    setproto.toString = function () {\n\t        return \"Snap\\u2018s set\";\n\t    };\n\t    setproto.type = \"set\";\n\t    // export\n\t    Snap.Set = Set;\n\t    Snap.set = function () {\n\t        var set = new Set;\n\t        if (arguments.length) {\n\t            set.push.apply(set, Array.prototype.slice.call(arguments, 0));\n\t        }\n\t        return set;\n\t    };\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob) {\n\t    var names = {},\n\t        reUnit = /[a-z]+$/i,\n\t        Str = String;\n\t    names.stroke = names.fill = \"colour\";\n\t    function getEmpty(item) {\n\t        var l = item[0];\n\t        switch (l.toLowerCase()) {\n\t            case \"t\": return [l, 0, 0];\n\t            case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n\t            case \"r\": if (item.length == 4) {\n\t                return [l, 0, item[2], item[3]];\n\t            } else {\n\t                return [l, 0];\n\t            }\n\t            case \"s\": if (item.length == 5) {\n\t                return [l, 1, 1, item[3], item[4]];\n\t            } else if (item.length == 3) {\n\t                return [l, 1, 1];\n\t            } else {\n\t                return [l, 1];\n\t            }\n\t        }\n\t    }\n\t    function equaliseTransform(t1, t2, getBBox) {\n\t        t2 = Str(t2).replace(/\\.{3}|\\u2026/g, t1);\n\t        t1 = Snap.parseTransformString(t1) || [];\n\t        t2 = Snap.parseTransformString(t2) || [];\n\t        var maxlength = Math.max(t1.length, t2.length),\n\t            from = [],\n\t            to = [],\n\t            i = 0, j, jj,\n\t            tt1, tt2;\n\t        for (; i < maxlength; i++) {\n\t            tt1 = t1[i] || getEmpty(t2[i]);\n\t            tt2 = t2[i] || getEmpty(tt1);\n\t            if ((tt1[0] != tt2[0]) ||\n\t                (tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3])) ||\n\t                (tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4]))\n\t                ) {\n\t                    t1 = Snap._.transform2matrix(t1, getBBox());\n\t                    t2 = Snap._.transform2matrix(t2, getBBox());\n\t                    from = [[\"m\", t1.a, t1.b, t1.c, t1.d, t1.e, t1.f]];\n\t                    to = [[\"m\", t2.a, t2.b, t2.c, t2.d, t2.e, t2.f]];\n\t                    break;\n\t            }\n\t            from[i] = [];\n\t            to[i] = [];\n\t            for (j = 0, jj = Math.max(tt1.length, tt2.length); j < jj; j++) {\n\t                j in tt1 && (from[i][j] = tt1[j]);\n\t                j in tt2 && (to[i][j] = tt2[j]);\n\t            }\n\t        }\n\t        return {\n\t            from: path2array(from),\n\t            to: path2array(to),\n\t            f: getPath(from)\n\t        };\n\t    }\n\t    function getNumber(val) {\n\t        return val;\n\t    }\n\t    function getUnit(unit) {\n\t        return function (val) {\n\t            return +val.toFixed(3) + unit;\n\t        };\n\t    }\n\t    function getViewBox(val) {\n\t        return val.join(\" \");\n\t    }\n\t    function getColour(clr) {\n\t        return Snap.rgb(clr[0], clr[1], clr[2]);\n\t    }\n\t    function getPath(path) {\n\t        var k = 0, i, ii, j, jj, out, a, b = [];\n\t        for (i = 0, ii = path.length; i < ii; i++) {\n\t            out = \"[\";\n\t            a = ['\"' + path[i][0] + '\"'];\n\t            for (j = 1, jj = path[i].length; j < jj; j++) {\n\t                a[j] = \"val[\" + (k++) + \"]\";\n\t            }\n\t            out += a + \"]\";\n\t            b[i] = out;\n\t        }\n\t        return Function(\"val\", \"return Snap.path.toString.call([\" + b + \"])\");\n\t    }\n\t    function path2array(path) {\n\t        var out = [];\n\t        for (var i = 0, ii = path.length; i < ii; i++) {\n\t            for (var j = 1, jj = path[i].length; j < jj; j++) {\n\t                out.push(path[i][j]);\n\t            }\n\t        }\n\t        return out;\n\t    }\n\t    function isNumeric(obj) {\n\t        return isFinite(parseFloat(obj));\n\t    }\n\t    function arrayEqual(arr1, arr2) {\n\t        if (!Snap.is(arr1, \"array\") || !Snap.is(arr2, \"array\")) {\n\t            return false;\n\t        }\n\t        return arr1.toString() == arr2.toString();\n\t    }\n\t    Element.prototype.equal = function (name, b) {\n\t        return eve(\"snap.util.equal\", this, name, b).firstDefined();\n\t    };\n\t    eve.on(\"snap.util.equal\", function (name, b) {\n\t        var A, B, a = Str(this.attr(name) || \"\"),\n\t            el = this;\n\t        if (isNumeric(a) && isNumeric(b)) {\n\t            return {\n\t                from: parseFloat(a),\n\t                to: parseFloat(b),\n\t                f: getNumber\n\t            };\n\t        }\n\t        if (names[name] == \"colour\") {\n\t            A = Snap.color(a);\n\t            B = Snap.color(b);\n\t            return {\n\t                from: [A.r, A.g, A.b, A.opacity],\n\t                to: [B.r, B.g, B.b, B.opacity],\n\t                f: getColour\n\t            };\n\t        }\n\t        if (name == \"viewBox\") {\n\t            A = this.attr(name).vb.split(\" \").map(Number);\n\t            B = b.split(\" \").map(Number);\n\t            return {\n\t                from: A,\n\t                to: B,\n\t                f: getViewBox\n\t            };\n\t        }\n\t        if (name == \"transform\" || name == \"gradientTransform\" || name == \"patternTransform\") {\n\t            if (b instanceof Snap.Matrix) {\n\t                b = b.toTransformString();\n\t            }\n\t            if (!Snap._.rgTransform.test(b)) {\n\t                b = Snap._.svgTransform2string(b);\n\t            }\n\t            return equaliseTransform(a, b, function () {\n\t                return el.getBBox(1);\n\t            });\n\t        }\n\t        if (name == \"d\" || name == \"path\") {\n\t            A = Snap.path.toCubic(a, b);\n\t            return {\n\t                from: path2array(A[0]),\n\t                to: path2array(A[1]),\n\t                f: getPath(A[0])\n\t            };\n\t        }\n\t        if (name == \"points\") {\n\t            A = Str(a).split(Snap._.separator);\n\t            B = Str(b).split(Snap._.separator);\n\t            return {\n\t                from: A,\n\t                to: B,\n\t                f: function (val) { return val; }\n\t            };\n\t        }\n\t        var aUnit = a.match(reUnit),\n\t            bUnit = Str(b).match(reUnit);\n\t        if (aUnit && arrayEqual(aUnit, bUnit)) {\n\t            return {\n\t                from: parseFloat(a),\n\t                to: parseFloat(b),\n\t                f: getUnit(aUnit)\n\t            };\n\t        } else {\n\t            return {\n\t                from: this.asPX(name),\n\t                to: this.asPX(name, b),\n\t                f: getNumber\n\t            };\n\t        }\n\t    });\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob) {\n\t    var elproto = Element.prototype,\n\t    has = \"hasOwnProperty\",\n\t    supportsTouch = \"createTouch\" in glob.doc,\n\t    events = [\n\t        \"click\", \"dblclick\", \"mousedown\", \"mousemove\", \"mouseout\",\n\t        \"mouseover\", \"mouseup\", \"touchstart\", \"touchmove\", \"touchend\",\n\t        \"touchcancel\"\n\t    ],\n\t    touchMap = {\n\t        mousedown: \"touchstart\",\n\t        mousemove: \"touchmove\",\n\t        mouseup: \"touchend\"\n\t    },\n\t    getScroll = function (xy, el) {\n\t        var name = xy == \"y\" ? \"scrollTop\" : \"scrollLeft\",\n\t            doc = el && el.node ? el.node.ownerDocument : glob.doc;\n\t        return doc[name in doc.documentElement ? \"documentElement\" : \"body\"][name];\n\t    },\n\t    preventDefault = function () {\n\t        this.returnValue = false;\n\t    },\n\t    preventTouch = function () {\n\t        return this.originalEvent.preventDefault();\n\t    },\n\t    stopPropagation = function () {\n\t        this.cancelBubble = true;\n\t    },\n\t    stopTouch = function () {\n\t        return this.originalEvent.stopPropagation();\n\t    },\n\t    addEvent = function (obj, type, fn, element) {\n\t        var realName = supportsTouch && touchMap[type] ? touchMap[type] : type,\n\t            f = function (e) {\n\t                var scrollY = getScroll(\"y\", element),\n\t                    scrollX = getScroll(\"x\", element);\n\t                if (supportsTouch && touchMap[has](type)) {\n\t                    for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n\t                        if (e.targetTouches[i].target == obj || obj.contains(e.targetTouches[i].target)) {\n\t                            var olde = e;\n\t                            e = e.targetTouches[i];\n\t                            e.originalEvent = olde;\n\t                            e.preventDefault = preventTouch;\n\t                            e.stopPropagation = stopTouch;\n\t                            break;\n\t                        }\n\t                    }\n\t                }\n\t                var x = e.clientX + scrollX,\n\t                    y = e.clientY + scrollY;\n\t                return fn.call(element, e, x, y);\n\t            };\n\t\n\t        if (type !== realName) {\n\t            obj.addEventListener(type, f, false);\n\t        }\n\t\n\t        obj.addEventListener(realName, f, false);\n\t\n\t        return function () {\n\t            if (type !== realName) {\n\t                obj.removeEventListener(type, f, false);\n\t            }\n\t\n\t            obj.removeEventListener(realName, f, false);\n\t            return true;\n\t        };\n\t    },\n\t    drag = [],\n\t    dragMove = function (e) {\n\t        var x = e.clientX,\n\t            y = e.clientY,\n\t            scrollY = getScroll(\"y\"),\n\t            scrollX = getScroll(\"x\"),\n\t            dragi,\n\t            j = drag.length;\n\t        while (j--) {\n\t            dragi = drag[j];\n\t            if (supportsTouch) {\n\t                var i = e.touches && e.touches.length,\n\t                    touch;\n\t                while (i--) {\n\t                    touch = e.touches[i];\n\t                    if (touch.identifier == dragi.el._drag.id || dragi.el.node.contains(touch.target)) {\n\t                        x = touch.clientX;\n\t                        y = touch.clientY;\n\t                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n\t                        break;\n\t                    }\n\t                }\n\t            } else {\n\t                e.preventDefault();\n\t            }\n\t            var node = dragi.el.node,\n\t                o,\n\t                next = node.nextSibling,\n\t                parent = node.parentNode,\n\t                display = node.style.display;\n\t            // glob.win.opera && parent.removeChild(node);\n\t            // node.style.display = \"none\";\n\t            // o = dragi.el.paper.getElementByPoint(x, y);\n\t            // node.style.display = display;\n\t            // glob.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n\t            // o && eve(\"snap.drag.over.\" + dragi.el.id, dragi.el, o);\n\t            x += scrollX;\n\t            y += scrollY;\n\t            eve(\"snap.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n\t        }\n\t    },\n\t    dragUp = function (e) {\n\t        Snap.unmousemove(dragMove).unmouseup(dragUp);\n\t        var i = drag.length,\n\t            dragi;\n\t        while (i--) {\n\t            dragi = drag[i];\n\t            dragi.el._drag = {};\n\t            eve(\"snap.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n\t            eve.off(\"snap.drag.*.\" + dragi.el.id);\n\t        }\n\t        drag = [];\n\t    };\n\t    /*\\\n\t     * Element.click\n\t     [ method ]\n\t     **\n\t     * Adds a click event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unclick\n\t     [ method ]\n\t     **\n\t     * Removes a click event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t\n\t    /*\\\n\t     * Element.dblclick\n\t     [ method ]\n\t     **\n\t     * Adds a double click event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.undblclick\n\t     [ method ]\n\t     **\n\t     * Removes a double click event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t\n\t    /*\\\n\t     * Element.mousedown\n\t     [ method ]\n\t     **\n\t     * Adds a mousedown event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmousedown\n\t     [ method ]\n\t     **\n\t     * Removes a mousedown event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t\n\t    /*\\\n\t     * Element.mousemove\n\t     [ method ]\n\t     **\n\t     * Adds a mousemove event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmousemove\n\t     [ method ]\n\t     **\n\t     * Removes a mousemove event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t\n\t    /*\\\n\t     * Element.mouseout\n\t     [ method ]\n\t     **\n\t     * Adds a mouseout event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseout\n\t     [ method ]\n\t     **\n\t     * Removes a mouseout event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t\n\t    /*\\\n\t     * Element.mouseover\n\t     [ method ]\n\t     **\n\t     * Adds a mouseover event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseover\n\t     [ method ]\n\t     **\n\t     * Removes a mouseover event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t\n\t    /*\\\n\t     * Element.mouseup\n\t     [ method ]\n\t     **\n\t     * Adds a mouseup event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.unmouseup\n\t     [ method ]\n\t     **\n\t     * Removes a mouseup event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t\n\t    /*\\\n\t     * Element.touchstart\n\t     [ method ]\n\t     **\n\t     * Adds a touchstart event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchstart\n\t     [ method ]\n\t     **\n\t     * Removes a touchstart event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t\n\t    /*\\\n\t     * Element.touchmove\n\t     [ method ]\n\t     **\n\t     * Adds a touchmove event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchmove\n\t     [ method ]\n\t     **\n\t     * Removes a touchmove event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t\n\t    /*\\\n\t     * Element.touchend\n\t     [ method ]\n\t     **\n\t     * Adds a touchend event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchend\n\t     [ method ]\n\t     **\n\t     * Removes a touchend event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t\n\t    /*\\\n\t     * Element.touchcancel\n\t     [ method ]\n\t     **\n\t     * Adds a touchcancel event handler to the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    /*\\\n\t     * Element.untouchcancel\n\t     [ method ]\n\t     **\n\t     * Removes a touchcancel event handler from the element\n\t     - handler (function) handler for the event\n\t     = (object) @Element\n\t    \\*/\n\t    for (var i = events.length; i--;) {\n\t        (function (eventName) {\n\t            Snap[eventName] = elproto[eventName] = function (fn, scope) {\n\t                if (Snap.is(fn, \"function\")) {\n\t                    this.events = this.events || [];\n\t                    this.events.push({\n\t                        name: eventName,\n\t                        f: fn,\n\t                        unbind: addEvent(this.node || document, eventName, fn, scope || this)\n\t                    });\n\t                } else {\n\t                    for (var i = 0, ii = this.events.length; i < ii; i++) if (this.events[i].name == eventName) {\n\t                        try {\n\t                            this.events[i].f.call(this);\n\t                        } catch (e) {}\n\t                    }\n\t                }\n\t                return this;\n\t            };\n\t            Snap[\"un\" + eventName] =\n\t            elproto[\"un\" + eventName] = function (fn) {\n\t                var events = this.events || [],\n\t                    l = events.length;\n\t                while (l--) if (events[l].name == eventName &&\n\t                               (events[l].f == fn || !fn)) {\n\t                    events[l].unbind();\n\t                    events.splice(l, 1);\n\t                    !events.length && delete this.events;\n\t                    return this;\n\t                }\n\t                return this;\n\t            };\n\t        })(events[i]);\n\t    }\n\t    /*\\\n\t     * Element.hover\n\t     [ method ]\n\t     **\n\t     * Adds hover event handlers to the element\n\t     - f_in (function) handler for hover in\n\t     - f_out (function) handler for hover out\n\t     - icontext (object) #optional context for hover in handler\n\t     - ocontext (object) #optional context for hover out handler\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n\t        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n\t    };\n\t    /*\\\n\t     * Element.unhover\n\t     [ method ]\n\t     **\n\t     * Removes hover event handlers from the element\n\t     - f_in (function) handler for hover in\n\t     - f_out (function) handler for hover out\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.unhover = function (f_in, f_out) {\n\t        return this.unmouseover(f_in).unmouseout(f_out);\n\t    };\n\t    var draggable = [];\n\t    // SIERRA unclear what _context_ refers to for starting, ending, moving the drag gesture.\n\t    // SIERRA Element.drag(): _x position of the mouse_: Where are the x/y values offset from?\n\t    // SIERRA Element.drag(): much of this member's doc appears to be duplicated for some reason.\n\t    // SIERRA Unclear about this sentence: _Additionally following drag events will be triggered: drag.start.<id> on start, drag.end.<id> on end and drag.move.<id> on every move._ Is there a global _drag_ object to which you can assign handlers keyed by an element's ID?\n\t    /*\\\n\t     * Element.drag\n\t     [ method ]\n\t     **\n\t     * Adds event handlers for an element's drag gesture\n\t     **\n\t     - onmove (function) handler for moving\n\t     - onstart (function) handler for drag start\n\t     - onend (function) handler for drag end\n\t     - mcontext (object) #optional context for moving handler\n\t     - scontext (object) #optional context for drag start handler\n\t     - econtext (object) #optional context for drag end handler\n\t     * Additionaly following `drag` events are triggered: `drag.start.<id>` on start,\n\t     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element is dragged over another element\n\t     * `drag.over.<id>` fires as well.\n\t     *\n\t     * Start event and start handler are called in specified context or in context of the element with following parameters:\n\t     o x (number) x position of the mouse\n\t     o y (number) y position of the mouse\n\t     o event (object) DOM event object\n\t     * Move event and move handler are called in specified context or in context of the element with following parameters:\n\t     o dx (number) shift by x from the start point\n\t     o dy (number) shift by y from the start point\n\t     o x (number) x position of the mouse\n\t     o y (number) y position of the mouse\n\t     o event (object) DOM event object\n\t     * End event and end handler are called in specified context or in context of the element with following parameters:\n\t     o event (object) DOM event object\n\t     = (object) @Element\n\t    \\*/\n\t    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n\t        var el = this;\n\t        if (!arguments.length) {\n\t            var origTransform;\n\t            return el.drag(function (dx, dy) {\n\t                this.attr({\n\t                    transform: origTransform + (origTransform ? \"T\" : \"t\") + [dx, dy]\n\t                });\n\t            }, function () {\n\t                origTransform = this.transform().local;\n\t            });\n\t        }\n\t        function start(e, x, y) {\n\t            (e.originalEvent || e).preventDefault();\n\t            el._drag.x = x;\n\t            el._drag.y = y;\n\t            el._drag.id = e.identifier;\n\t            !drag.length && Snap.mousemove(dragMove).mouseup(dragUp);\n\t            drag.push({el: el, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n\t            onstart && eve.on(\"snap.drag.start.\" + el.id, onstart);\n\t            onmove && eve.on(\"snap.drag.move.\" + el.id, onmove);\n\t            onend && eve.on(\"snap.drag.end.\" + el.id, onend);\n\t            eve(\"snap.drag.start.\" + el.id, start_scope || move_scope || el, x, y, e);\n\t        }\n\t        function init(e, x, y) {\n\t            eve(\"snap.draginit.\" + el.id, el, e, x, y);\n\t        }\n\t        eve.on(\"snap.draginit.\" + el.id, start);\n\t        el._drag = {};\n\t        draggable.push({el: el, start: start, init: init});\n\t        el.mousedown(init);\n\t        return el;\n\t    };\n\t    /*\n\t     * Element.onDragOver\n\t     [ method ]\n\t     **\n\t     * Shortcut to assign event handler for `drag.over.<id>` event, where `id` is the element's `id` (see @Element.id)\n\t     - f (function) handler for event, first argument would be the element you are dragging over\n\t    \\*/\n\t    // elproto.onDragOver = function (f) {\n\t    //     f ? eve.on(\"snap.drag.over.\" + this.id, f) : eve.unbind(\"snap.drag.over.\" + this.id);\n\t    // };\n\t    /*\\\n\t     * Element.undrag\n\t     [ method ]\n\t     **\n\t     * Removes all drag event handlers from the given element\n\t    \\*/\n\t    elproto.undrag = function () {\n\t        var i = draggable.length;\n\t        while (i--) if (draggable[i].el == this) {\n\t            this.unmousedown(draggable[i].init);\n\t            draggable.splice(i, 1);\n\t            eve.unbind(\"snap.drag.*.\" + this.id);\n\t            eve.unbind(\"snap.draginit.\" + this.id);\n\t        }\n\t        !draggable.length && Snap.unmousemove(dragMove).unmouseup(dragUp);\n\t        return this;\n\t    };\n\t});\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob) {\n\t    var elproto = Element.prototype,\n\t        pproto = Paper.prototype,\n\t        rgurl = /^\\s*url\\((.+)\\)/,\n\t        Str = String,\n\t        $ = Snap._.$;\n\t    Snap.filter = {};\n\t    /*\\\n\t     * Paper.filter\n\t     [ method ]\n\t     **\n\t     * Creates a `<filter>` element\n\t     **\n\t     - filstr (string) SVG fragment of filter provided as a string\n\t     = (object) @Element\n\t     * Note: It is recommended to use filters embedded into the page inside an empty SVG element.\n\t     > Usage\n\t     | var f = paper.filter('<feGaussianBlur stdDeviation=\"2\"/>'),\n\t     |     c = paper.circle(10, 10, 10).attr({\n\t     |         filter: f\n\t     |     });\n\t    \\*/\n\t    pproto.filter = function (filstr) {\n\t        var paper = this;\n\t        if (paper.type != \"svg\") {\n\t            paper = paper.paper;\n\t        }\n\t        var f = Snap.parse(Str(filstr)),\n\t            id = Snap._.id(),\n\t            width = paper.node.offsetWidth,\n\t            height = paper.node.offsetHeight,\n\t            filter = $(\"filter\");\n\t        $(filter, {\n\t            id: id,\n\t            filterUnits: \"userSpaceOnUse\"\n\t        });\n\t        filter.appendChild(f.node);\n\t        paper.defs.appendChild(filter);\n\t        return new Element(filter);\n\t    };\n\t\n\t    eve.on(\"snap.util.getattr.filter\", function () {\n\t        eve.stop();\n\t        var p = $(this.node, \"filter\");\n\t        if (p) {\n\t            var match = Str(p).match(rgurl);\n\t            return match && Snap.select(match[1]);\n\t        }\n\t    });\n\t    eve.on(\"snap.util.attr.filter\", function (value) {\n\t        if (value instanceof Element && value.type == \"filter\") {\n\t            eve.stop();\n\t            var id = value.node.id;\n\t            if (!id) {\n\t                $(value.node, {id: value.id});\n\t                id = value.id;\n\t            }\n\t            $(this.node, {\n\t                filter: Snap.url(id)\n\t            });\n\t        }\n\t        if (!value || value == \"none\") {\n\t            eve.stop();\n\t            this.node.removeAttribute(\"filter\");\n\t        }\n\t    });\n\t    /*\\\n\t     * Snap.filter.blur\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the blur filter\n\t     **\n\t     - x (number) amount of horizontal blur, in pixels\n\t     - y (number) #optional amount of vertical blur, in pixels\n\t     = (string) filter representation\n\t     > Usage\n\t     | var f = paper.filter(Snap.filter.blur(5, 10)),\n\t     |     c = paper.circle(10, 10, 10).attr({\n\t     |         filter: f\n\t     |     });\n\t    \\*/\n\t    Snap.filter.blur = function (x, y) {\n\t        if (x == null) {\n\t            x = 2;\n\t        }\n\t        var def = y == null ? x : [x, y];\n\t        return Snap.format('\\<feGaussianBlur stdDeviation=\"{def}\"/>', {\n\t            def: def\n\t        });\n\t    };\n\t    Snap.filter.blur.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.shadow\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the shadow filter\n\t     **\n\t     - dx (number) #optional horizontal shift of the shadow, in pixels\n\t     - dy (number) #optional vertical shift of the shadow, in pixels\n\t     - blur (number) #optional amount of blur\n\t     - color (string) #optional color of the shadow\n\t     - opacity (number) #optional `0..1` opacity of the shadow\n\t     * or\n\t     - dx (number) #optional horizontal shift of the shadow, in pixels\n\t     - dy (number) #optional vertical shift of the shadow, in pixels\n\t     - color (string) #optional color of the shadow\n\t     - opacity (number) #optional `0..1` opacity of the shadow\n\t     * which makes blur default to `4`. Or\n\t     - dx (number) #optional horizontal shift of the shadow, in pixels\n\t     - dy (number) #optional vertical shift of the shadow, in pixels\n\t     - opacity (number) #optional `0..1` opacity of the shadow\n\t     = (string) filter representation\n\t     > Usage\n\t     | var f = paper.filter(Snap.filter.shadow(0, 2, 3)),\n\t     |     c = paper.circle(10, 10, 10).attr({\n\t     |         filter: f\n\t     |     });\n\t    \\*/\n\t    Snap.filter.shadow = function (dx, dy, blur, color, opacity) {\n\t        if (typeof blur == \"string\") {\n\t            color = blur;\n\t            opacity = color;\n\t            blur = 4;\n\t        }\n\t        if (typeof color != \"string\") {\n\t            opacity = color;\n\t            color = \"#000\";\n\t        }\n\t        color = color || \"#000\";\n\t        if (blur == null) {\n\t            blur = 4;\n\t        }\n\t        if (opacity == null) {\n\t            opacity = 1;\n\t        }\n\t        if (dx == null) {\n\t            dx = 0;\n\t            dy = 2;\n\t        }\n\t        if (dy == null) {\n\t            dy = dx;\n\t        }\n\t        color = Snap.color(color);\n\t        return Snap.format('<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"{blur}\"/><feOffset dx=\"{dx}\" dy=\"{dy}\" result=\"offsetblur\"/><feFlood flood-color=\"{color}\"/><feComposite in2=\"offsetblur\" operator=\"in\"/><feComponentTransfer><feFuncA type=\"linear\" slope=\"{opacity}\"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in=\"SourceGraphic\"/></feMerge>', {\n\t            color: color,\n\t            dx: dx,\n\t            dy: dy,\n\t            blur: blur,\n\t            opacity: opacity\n\t        });\n\t    };\n\t    Snap.filter.shadow.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.grayscale\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the grayscale filter\n\t     **\n\t     - amount (number) amount of filter (`0..1`)\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.grayscale = function (amount) {\n\t        if (amount == null) {\n\t            amount = 1;\n\t        }\n\t        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0\"/>', {\n\t            a: 0.2126 + 0.7874 * (1 - amount),\n\t            b: 0.7152 - 0.7152 * (1 - amount),\n\t            c: 0.0722 - 0.0722 * (1 - amount),\n\t            d: 0.2126 - 0.2126 * (1 - amount),\n\t            e: 0.7152 + 0.2848 * (1 - amount),\n\t            f: 0.0722 - 0.0722 * (1 - amount),\n\t            g: 0.2126 - 0.2126 * (1 - amount),\n\t            h: 0.0722 + 0.9278 * (1 - amount)\n\t        });\n\t    };\n\t    Snap.filter.grayscale.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.sepia\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the sepia filter\n\t     **\n\t     - amount (number) amount of filter (`0..1`)\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.sepia = function (amount) {\n\t        if (amount == null) {\n\t            amount = 1;\n\t        }\n\t        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0\"/>', {\n\t            a: 0.393 + 0.607 * (1 - amount),\n\t            b: 0.769 - 0.769 * (1 - amount),\n\t            c: 0.189 - 0.189 * (1 - amount),\n\t            d: 0.349 - 0.349 * (1 - amount),\n\t            e: 0.686 + 0.314 * (1 - amount),\n\t            f: 0.168 - 0.168 * (1 - amount),\n\t            g: 0.272 - 0.272 * (1 - amount),\n\t            h: 0.534 - 0.534 * (1 - amount),\n\t            i: 0.131 + 0.869 * (1 - amount)\n\t        });\n\t    };\n\t    Snap.filter.sepia.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.saturate\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the saturate filter\n\t     **\n\t     - amount (number) amount of filter (`0..1`)\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.saturate = function (amount) {\n\t        if (amount == null) {\n\t            amount = 1;\n\t        }\n\t        return Snap.format('<feColorMatrix type=\"saturate\" values=\"{amount}\"/>', {\n\t            amount: 1 - amount\n\t        });\n\t    };\n\t    Snap.filter.saturate.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.hueRotate\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the hue-rotate filter\n\t     **\n\t     - angle (number) angle of rotation\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.hueRotate = function (angle) {\n\t        angle = angle || 0;\n\t        return Snap.format('<feColorMatrix type=\"hueRotate\" values=\"{angle}\"/>', {\n\t            angle: angle\n\t        });\n\t    };\n\t    Snap.filter.hueRotate.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.invert\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the invert filter\n\t     **\n\t     - amount (number) amount of filter (`0..1`)\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.invert = function (amount) {\n\t        if (amount == null) {\n\t            amount = 1;\n\t        }\n\t//        <feColorMatrix type=\"matrix\" values=\"-1 0 0 0 1  0 -1 0 0 1  0 0 -1 0 1  0 0 0 1 0\" color-interpolation-filters=\"sRGB\"/>\n\t        return Snap.format('<feComponentTransfer><feFuncR type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncG type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncB type=\"table\" tableValues=\"{amount} {amount2}\"/></feComponentTransfer>', {\n\t            amount: amount,\n\t            amount2: 1 - amount\n\t        });\n\t    };\n\t    Snap.filter.invert.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.brightness\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the brightness filter\n\t     **\n\t     - amount (number) amount of filter (`0..1`)\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.brightness = function (amount) {\n\t        if (amount == null) {\n\t            amount = 1;\n\t        }\n\t        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\"/><feFuncG type=\"linear\" slope=\"{amount}\"/><feFuncB type=\"linear\" slope=\"{amount}\"/></feComponentTransfer>', {\n\t            amount: amount\n\t        });\n\t    };\n\t    Snap.filter.brightness.toString = function () {\n\t        return this();\n\t    };\n\t    /*\\\n\t     * Snap.filter.contrast\n\t     [ method ]\n\t     **\n\t     * Returns an SVG markup string for the contrast filter\n\t     **\n\t     - amount (number) amount of filter (`0..1`)\n\t     = (string) filter representation\n\t    \\*/\n\t    Snap.filter.contrast = function (amount) {\n\t        if (amount == null) {\n\t            amount = 1;\n\t        }\n\t        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncG type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncB type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/></feComponentTransfer>', {\n\t            amount: amount,\n\t            amount2: .5 - amount / 2\n\t        });\n\t    };\n\t    Snap.filter.contrast.toString = function () {\n\t        return this();\n\t    };\n\t});\n\t\n\t// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\tSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t    var box = Snap._.box,\n\t        is = Snap.is,\n\t        firstLetter = /^[^a-z]*([tbmlrc])/i,\n\t        toString = function () {\n\t            return \"T\" + this.dx + \",\" + this.dy;\n\t        };\n\t    /*\\\n\t     * Element.getAlign\n\t     [ method ]\n\t     **\n\t     * Returns shift needed to align the element relatively to given element.\n\t     * If no elements specified, parent `<svg>` container will be used.\n\t     - el (object) @optional alignment element\n\t     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n\t     = (object|string) Object in format `{dx: , dy: }` also has a string representation as a transformation string\n\t     > Usage\n\t     | el.transform(el.getAlign(el2, \"top\"));\n\t     * or\n\t     | var dy = el.getAlign(el2, \"top\").dy;\n\t    \\*/\n\t    Element.prototype.getAlign = function (el, way) {\n\t        if (way == null && is(el, \"string\")) {\n\t            way = el;\n\t            el = null;\n\t        }\n\t        el = el || this.paper;\n\t        var bx = el.getBBox ? el.getBBox() : box(el),\n\t            bb = this.getBBox(),\n\t            out = {};\n\t        way = way && way.match(firstLetter);\n\t        way = way ? way[1].toLowerCase() : \"c\";\n\t        switch (way) {\n\t            case \"t\":\n\t                out.dx = 0;\n\t                out.dy = bx.y - bb.y;\n\t            break;\n\t            case \"b\":\n\t                out.dx = 0;\n\t                out.dy = bx.y2 - bb.y2;\n\t            break;\n\t            case \"m\":\n\t                out.dx = 0;\n\t                out.dy = bx.cy - bb.cy;\n\t            break;\n\t            case \"l\":\n\t                out.dx = bx.x - bb.x;\n\t                out.dy = 0;\n\t            break;\n\t            case \"r\":\n\t                out.dx = bx.x2 - bb.x2;\n\t                out.dy = 0;\n\t            break;\n\t            default:\n\t                out.dx = bx.cx - bb.cx;\n\t                out.dy = 0;\n\t            break;\n\t        }\n\t        out.toString = toString;\n\t        return out;\n\t    };\n\t    /*\\\n\t     * Element.align\n\t     [ method ]\n\t     **\n\t     * Aligns the element relatively to given one via transformation.\n\t     * If no elements specified, parent `<svg>` container will be used.\n\t     - el (object) @optional alignment element\n\t     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n\t     = (object) this element\n\t     > Usage\n\t     | el.align(el2, \"top\");\n\t     * or\n\t     | el.align(\"middle\");\n\t    \\*/\n\t    Element.prototype.align = function (el, way) {\n\t        return this.transform(\"...\" + this.getAlign(el, way));\n\t    };\n\t});\n\t\n\tmodule.exports = Snap\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// d0f1c55809dfbbfeb7ad.worker.js"," \t// Copied from https://github.com/facebook/react/blob/bef45b0/src/shared/utils/canDefineProperty.js\r\n \tvar canDefineProperty = false;\r\n \ttry {\r\n \t\tObject.defineProperty({}, \"x\", {\r\n \t\t\tget: function() {}\r\n \t\t});\r\n \t\tcanDefineProperty = true;\r\n \t} catch(x) {\r\n \t\t// IE will fail on defineProperty\r\n \t}\r\n \t\r\n \tvar hotApplyOnUpdate = true;\r\n \tvar hotCurrentHash = \"d0f1c55809dfbbfeb7ad\"; // eslint-disable-line no-unused-vars\r\n \tvar hotCurrentModuleData = {};\r\n \tvar hotCurrentParents = []; // eslint-disable-line no-unused-vars\r\n \t\r\n \tfunction hotCreateRequire(moduleId) { // eslint-disable-line no-unused-vars\r\n \t\tvar me = installedModules[moduleId];\r\n \t\tif(!me) return __webpack_require__;\r\n \t\tvar fn = function(request) {\r\n \t\t\tif(me.hot.active) {\r\n \t\t\t\tif(installedModules[request]) {\r\n \t\t\t\t\tif(installedModules[request].parents.indexOf(moduleId) < 0)\r\n \t\t\t\t\t\tinstalledModules[request].parents.push(moduleId);\r\n \t\t\t\t\tif(me.children.indexOf(request) < 0)\r\n \t\t\t\t\t\tme.children.push(request);\r\n \t\t\t\t} else hotCurrentParents = [moduleId];\r\n \t\t\t} else {\r\n \t\t\t\tconsole.warn(\"[HMR] unexpected require(\" + request + \") from disposed module \" + moduleId);\r\n \t\t\t\thotCurrentParents = [];\r\n \t\t\t}\r\n \t\t\treturn __webpack_require__(request);\r\n \t\t};\r\n \t\tfor(var name in __webpack_require__) {\r\n \t\t\tif(Object.prototype.hasOwnProperty.call(__webpack_require__, name)) {\r\n \t\t\t\tif(canDefineProperty) {\r\n \t\t\t\t\tObject.defineProperty(fn, name, (function(name) {\r\n \t\t\t\t\t\treturn {\r\n \t\t\t\t\t\t\tconfigurable: true,\r\n \t\t\t\t\t\t\tenumerable: true,\r\n \t\t\t\t\t\t\tget: function() {\r\n \t\t\t\t\t\t\t\treturn __webpack_require__[name];\r\n \t\t\t\t\t\t\t},\r\n \t\t\t\t\t\t\tset: function(value) {\r\n \t\t\t\t\t\t\t\t__webpack_require__[name] = value;\r\n \t\t\t\t\t\t\t}\r\n \t\t\t\t\t\t};\r\n \t\t\t\t\t}(name)));\r\n \t\t\t\t} else {\r\n \t\t\t\t\tfn[name] = __webpack_require__[name];\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n \t\r\n \t\tfunction ensure(chunkId, callback) {\r\n \t\t\tif(hotStatus === \"ready\")\r\n \t\t\t\thotSetStatus(\"prepare\");\r\n \t\t\thotChunksLoading++;\r\n \t\t\t__webpack_require__.e(chunkId, function() {\r\n \t\t\t\ttry {\r\n \t\t\t\t\tcallback.call(null, fn);\r\n \t\t\t\t} finally {\r\n \t\t\t\t\tfinishChunkLoading();\r\n \t\t\t\t}\r\n \t\r\n \t\t\t\tfunction finishChunkLoading() {\r\n \t\t\t\t\thotChunksLoading--;\r\n \t\t\t\t\tif(hotStatus === \"prepare\") {\r\n \t\t\t\t\t\tif(!hotWaitingFilesMap[chunkId]) {\r\n \t\t\t\t\t\t\thotEnsureUpdateChunk(chunkId);\r\n \t\t\t\t\t\t}\r\n \t\t\t\t\t\tif(hotChunksLoading === 0 && hotWaitingFiles === 0) {\r\n \t\t\t\t\t\t\thotUpdateDownloaded();\r\n \t\t\t\t\t\t}\r\n \t\t\t\t\t}\r\n \t\t\t\t}\r\n \t\t\t});\r\n \t\t}\r\n \t\tif(canDefineProperty) {\r\n \t\t\tObject.defineProperty(fn, \"e\", {\r\n \t\t\t\tenumerable: true,\r\n \t\t\t\tvalue: ensure\r\n \t\t\t});\r\n \t\t} else {\r\n \t\t\tfn.e = ensure;\r\n \t\t}\r\n \t\treturn fn;\r\n \t}\r\n \t\r\n \tfunction hotCreateModule(moduleId) { // eslint-disable-line no-unused-vars\r\n \t\tvar hot = {\r\n \t\t\t// private stuff\r\n \t\t\t_acceptedDependencies: {},\r\n \t\t\t_declinedDependencies: {},\r\n \t\t\t_selfAccepted: false,\r\n \t\t\t_selfDeclined: false,\r\n \t\t\t_disposeHandlers: [],\r\n \t\r\n \t\t\t// Module API\r\n \t\t\tactive: true,\r\n \t\t\taccept: function(dep, callback) {\r\n \t\t\t\tif(typeof dep === \"undefined\")\r\n \t\t\t\t\thot._selfAccepted = true;\r\n \t\t\t\telse if(typeof dep === \"function\")\r\n \t\t\t\t\thot._selfAccepted = dep;\r\n \t\t\t\telse if(typeof dep === \"object\")\r\n \t\t\t\t\tfor(var i = 0; i < dep.length; i++)\r\n \t\t\t\t\t\thot._acceptedDependencies[dep[i]] = callback;\r\n \t\t\t\telse\r\n \t\t\t\t\thot._acceptedDependencies[dep] = callback;\r\n \t\t\t},\r\n \t\t\tdecline: function(dep) {\r\n \t\t\t\tif(typeof dep === \"undefined\")\r\n \t\t\t\t\thot._selfDeclined = true;\r\n \t\t\t\telse if(typeof dep === \"number\")\r\n \t\t\t\t\thot._declinedDependencies[dep] = true;\r\n \t\t\t\telse\r\n \t\t\t\t\tfor(var i = 0; i < dep.length; i++)\r\n \t\t\t\t\t\thot._declinedDependencies[dep[i]] = true;\r\n \t\t\t},\r\n \t\t\tdispose: function(callback) {\r\n \t\t\t\thot._disposeHandlers.push(callback);\r\n \t\t\t},\r\n \t\t\taddDisposeHandler: function(callback) {\r\n \t\t\t\thot._disposeHandlers.push(callback);\r\n \t\t\t},\r\n \t\t\tremoveDisposeHandler: function(callback) {\r\n \t\t\t\tvar idx = hot._disposeHandlers.indexOf(callback);\r\n \t\t\t\tif(idx >= 0) hot._disposeHandlers.splice(idx, 1);\r\n \t\t\t},\r\n \t\r\n \t\t\t// Management API\r\n \t\t\tcheck: hotCheck,\r\n \t\t\tapply: hotApply,\r\n \t\t\tstatus: function(l) {\r\n \t\t\t\tif(!l) return hotStatus;\r\n \t\t\t\thotStatusHandlers.push(l);\r\n \t\t\t},\r\n \t\t\taddStatusHandler: function(l) {\r\n \t\t\t\thotStatusHandlers.push(l);\r\n \t\t\t},\r\n \t\t\tremoveStatusHandler: function(l) {\r\n \t\t\t\tvar idx = hotStatusHandlers.indexOf(l);\r\n \t\t\t\tif(idx >= 0) hotStatusHandlers.splice(idx, 1);\r\n \t\t\t},\r\n \t\r\n \t\t\t//inherit from previous dispose call\r\n \t\t\tdata: hotCurrentModuleData[moduleId]\r\n \t\t};\r\n \t\treturn hot;\r\n \t}\r\n \t\r\n \tvar hotStatusHandlers = [];\r\n \tvar hotStatus = \"idle\";\r\n \t\r\n \tfunction hotSetStatus(newStatus) {\r\n \t\thotStatus = newStatus;\r\n \t\tfor(var i = 0; i < hotStatusHandlers.length; i++)\r\n \t\t\thotStatusHandlers[i].call(null, newStatus);\r\n \t}\r\n \t\r\n \t// while downloading\r\n \tvar hotWaitingFiles = 0;\r\n \tvar hotChunksLoading = 0;\r\n \tvar hotWaitingFilesMap = {};\r\n \tvar hotRequestedFilesMap = {};\r\n \tvar hotAvailibleFilesMap = {};\r\n \tvar hotCallback;\r\n \t\r\n \t// The update info\r\n \tvar hotUpdate, hotUpdateNewHash;\r\n \t\r\n \tfunction toModuleId(id) {\r\n \t\tvar isNumber = (+id) + \"\" === id;\r\n \t\treturn isNumber ? +id : id;\r\n \t}\r\n \t\r\n \tfunction hotCheck(apply, callback) {\r\n \t\tif(hotStatus !== \"idle\") throw new Error(\"check() is only allowed in idle status\");\r\n \t\tif(typeof apply === \"function\") {\r\n \t\t\thotApplyOnUpdate = false;\r\n \t\t\tcallback = apply;\r\n \t\t} else {\r\n \t\t\thotApplyOnUpdate = apply;\r\n \t\t\tcallback = callback || function(err) {\r\n \t\t\t\tif(err) throw err;\r\n \t\t\t};\r\n \t\t}\r\n \t\thotSetStatus(\"check\");\r\n \t\thotDownloadManifest(function(err, update) {\r\n \t\t\tif(err) return callback(err);\r\n \t\t\tif(!update) {\r\n \t\t\t\thotSetStatus(\"idle\");\r\n \t\t\t\tcallback(null, null);\r\n \t\t\t\treturn;\r\n \t\t\t}\r\n \t\r\n \t\t\thotRequestedFilesMap = {};\r\n \t\t\thotAvailibleFilesMap = {};\r\n \t\t\thotWaitingFilesMap = {};\r\n \t\t\tfor(var i = 0; i < update.c.length; i++)\r\n \t\t\t\thotAvailibleFilesMap[update.c[i]] = true;\r\n \t\t\thotUpdateNewHash = update.h;\r\n \t\r\n \t\t\thotSetStatus(\"prepare\");\r\n \t\t\thotCallback = callback;\r\n \t\t\thotUpdate = {};\r\n \t\t\tvar chunkId = 0;\r\n \t\t\t{ // eslint-disable-line no-lone-blocks\r\n \t\t\t\t/*globals chunkId */\r\n \t\t\t\thotEnsureUpdateChunk(chunkId);\r\n \t\t\t}\r\n \t\t\tif(hotStatus === \"prepare\" && hotChunksLoading === 0 && hotWaitingFiles === 0) {\r\n \t\t\t\thotUpdateDownloaded();\r\n \t\t\t}\r\n \t\t});\r\n \t}\r\n \t\r\n \tfunction hotAddUpdateChunk(chunkId, moreModules) { // eslint-disable-line no-unused-vars\r\n \t\tif(!hotAvailibleFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])\r\n \t\t\treturn;\r\n \t\thotRequestedFilesMap[chunkId] = false;\r\n \t\tfor(var moduleId in moreModules) {\r\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\r\n \t\t\t\thotUpdate[moduleId] = moreModules[moduleId];\r\n \t\t\t}\r\n \t\t}\r\n \t\tif(--hotWaitingFiles === 0 && hotChunksLoading === 0) {\r\n \t\t\thotUpdateDownloaded();\r\n \t\t}\r\n \t}\r\n \t\r\n \tfunction hotEnsureUpdateChunk(chunkId) {\r\n \t\tif(!hotAvailibleFilesMap[chunkId]) {\r\n \t\t\thotWaitingFilesMap[chunkId] = true;\r\n \t\t} else {\r\n \t\t\thotRequestedFilesMap[chunkId] = true;\r\n \t\t\thotWaitingFiles++;\r\n \t\t\thotDownloadUpdateChunk(chunkId);\r\n \t\t}\r\n \t}\r\n \t\r\n \tfunction hotUpdateDownloaded() {\r\n \t\thotSetStatus(\"ready\");\r\n \t\tvar callback = hotCallback;\r\n \t\thotCallback = null;\r\n \t\tif(!callback) return;\r\n \t\tif(hotApplyOnUpdate) {\r\n \t\t\thotApply(hotApplyOnUpdate, callback);\r\n \t\t} else {\r\n \t\t\tvar outdatedModules = [];\r\n \t\t\tfor(var id in hotUpdate) {\r\n \t\t\t\tif(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {\r\n \t\t\t\t\toutdatedModules.push(toModuleId(id));\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t\tcallback(null, outdatedModules);\r\n \t\t}\r\n \t}\r\n \t\r\n \tfunction hotApply(options, callback) {\r\n \t\tif(hotStatus !== \"ready\") throw new Error(\"apply() is only allowed in ready status\");\r\n \t\tif(typeof options === \"function\") {\r\n \t\t\tcallback = options;\r\n \t\t\toptions = {};\r\n \t\t} else if(options && typeof options === \"object\") {\r\n \t\t\tcallback = callback || function(err) {\r\n \t\t\t\tif(err) throw err;\r\n \t\t\t};\r\n \t\t} else {\r\n \t\t\toptions = {};\r\n \t\t\tcallback = callback || function(err) {\r\n \t\t\t\tif(err) throw err;\r\n \t\t\t};\r\n \t\t}\r\n \t\r\n \t\tfunction getAffectedStuff(module) {\r\n \t\t\tvar outdatedModules = [module];\r\n \t\t\tvar outdatedDependencies = {};\r\n \t\r\n \t\t\tvar queue = outdatedModules.slice();\r\n \t\t\twhile(queue.length > 0) {\r\n \t\t\t\tvar moduleId = queue.pop();\r\n \t\t\t\tvar module = installedModules[moduleId];\r\n \t\t\t\tif(!module || module.hot._selfAccepted)\r\n \t\t\t\t\tcontinue;\r\n \t\t\t\tif(module.hot._selfDeclined) {\r\n \t\t\t\t\treturn new Error(\"Aborted because of self decline: \" + moduleId);\r\n \t\t\t\t}\r\n \t\t\t\tif(moduleId === 0) {\r\n \t\t\t\t\treturn;\r\n \t\t\t\t}\r\n \t\t\t\tfor(var i = 0; i < module.parents.length; i++) {\r\n \t\t\t\t\tvar parentId = module.parents[i];\r\n \t\t\t\t\tvar parent = installedModules[parentId];\r\n \t\t\t\t\tif(parent.hot._declinedDependencies[moduleId]) {\r\n \t\t\t\t\t\treturn new Error(\"Aborted because of declined dependency: \" + moduleId + \" in \" + parentId);\r\n \t\t\t\t\t}\r\n \t\t\t\t\tif(outdatedModules.indexOf(parentId) >= 0) continue;\r\n \t\t\t\t\tif(parent.hot._acceptedDependencies[moduleId]) {\r\n \t\t\t\t\t\tif(!outdatedDependencies[parentId])\r\n \t\t\t\t\t\t\toutdatedDependencies[parentId] = [];\r\n \t\t\t\t\t\taddAllToSet(outdatedDependencies[parentId], [moduleId]);\r\n \t\t\t\t\t\tcontinue;\r\n \t\t\t\t\t}\r\n \t\t\t\t\tdelete outdatedDependencies[parentId];\r\n \t\t\t\t\toutdatedModules.push(parentId);\r\n \t\t\t\t\tqueue.push(parentId);\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\r\n \t\t\treturn [outdatedModules, outdatedDependencies];\r\n \t\t}\r\n \t\r\n \t\tfunction addAllToSet(a, b) {\r\n \t\t\tfor(var i = 0; i < b.length; i++) {\r\n \t\t\t\tvar item = b[i];\r\n \t\t\t\tif(a.indexOf(item) < 0)\r\n \t\t\t\t\ta.push(item);\r\n \t\t\t}\r\n \t\t}\r\n \t\r\n \t\t// at begin all updates modules are outdated\r\n \t\t// the \"outdated\" status can propagate to parents if they don't accept the children\r\n \t\tvar outdatedDependencies = {};\r\n \t\tvar outdatedModules = [];\r\n \t\tvar appliedUpdate = {};\r\n \t\tfor(var id in hotUpdate) {\r\n \t\t\tif(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {\r\n \t\t\t\tvar moduleId = toModuleId(id);\r\n \t\t\t\tvar result = getAffectedStuff(moduleId);\r\n \t\t\t\tif(!result) {\r\n \t\t\t\t\tif(options.ignoreUnaccepted)\r\n \t\t\t\t\t\tcontinue;\r\n \t\t\t\t\thotSetStatus(\"abort\");\r\n \t\t\t\t\treturn callback(new Error(\"Aborted because \" + moduleId + \" is not accepted\"));\r\n \t\t\t\t}\r\n \t\t\t\tif(result instanceof Error) {\r\n \t\t\t\t\thotSetStatus(\"abort\");\r\n \t\t\t\t\treturn callback(result);\r\n \t\t\t\t}\r\n \t\t\t\tappliedUpdate[moduleId] = hotUpdate[moduleId];\r\n \t\t\t\taddAllToSet(outdatedModules, result[0]);\r\n \t\t\t\tfor(var moduleId in result[1]) {\r\n \t\t\t\t\tif(Object.prototype.hasOwnProperty.call(result[1], moduleId)) {\r\n \t\t\t\t\t\tif(!outdatedDependencies[moduleId])\r\n \t\t\t\t\t\t\toutdatedDependencies[moduleId] = [];\r\n \t\t\t\t\t\taddAllToSet(outdatedDependencies[moduleId], result[1][moduleId]);\r\n \t\t\t\t\t}\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n \t\r\n \t\t// Store self accepted outdated modules to require them later by the module system\r\n \t\tvar outdatedSelfAcceptedModules = [];\r\n \t\tfor(var i = 0; i < outdatedModules.length; i++) {\r\n \t\t\tvar moduleId = outdatedModules[i];\r\n \t\t\tif(installedModules[moduleId] && installedModules[moduleId].hot._selfAccepted)\r\n \t\t\t\toutdatedSelfAcceptedModules.push({\r\n \t\t\t\t\tmodule: moduleId,\r\n \t\t\t\t\terrorHandler: installedModules[moduleId].hot._selfAccepted\r\n \t\t\t\t});\r\n \t\t}\r\n \t\r\n \t\t// Now in \"dispose\" phase\r\n \t\thotSetStatus(\"dispose\");\r\n \t\tvar queue = outdatedModules.slice();\r\n \t\twhile(queue.length > 0) {\r\n \t\t\tvar moduleId = queue.pop();\r\n \t\t\tvar module = installedModules[moduleId];\r\n \t\t\tif(!module) continue;\r\n \t\r\n \t\t\tvar data = {};\r\n \t\r\n \t\t\t// Call dispose handlers\r\n \t\t\tvar disposeHandlers = module.hot._disposeHandlers;\r\n \t\t\tfor(var j = 0; j < disposeHandlers.length; j++) {\r\n \t\t\t\tvar cb = disposeHandlers[j];\r\n \t\t\t\tcb(data);\r\n \t\t\t}\r\n \t\t\thotCurrentModuleData[moduleId] = data;\r\n \t\r\n \t\t\t// disable module (this disables requires from this module)\r\n \t\t\tmodule.hot.active = false;\r\n \t\r\n \t\t\t// remove module from cache\r\n \t\t\tdelete installedModules[moduleId];\r\n \t\r\n \t\t\t// remove \"parents\" references from all children\r\n \t\t\tfor(var j = 0; j < module.children.length; j++) {\r\n \t\t\t\tvar child = installedModules[module.children[j]];\r\n \t\t\t\tif(!child) continue;\r\n \t\t\t\tvar idx = child.parents.indexOf(moduleId);\r\n \t\t\t\tif(idx >= 0) {\r\n \t\t\t\t\tchild.parents.splice(idx, 1);\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n \t\r\n \t\t// remove outdated dependency from module children\r\n \t\tfor(var moduleId in outdatedDependencies) {\r\n \t\t\tif(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {\r\n \t\t\t\tvar module = installedModules[moduleId];\r\n \t\t\t\tvar moduleOutdatedDependencies = outdatedDependencies[moduleId];\r\n \t\t\t\tfor(var j = 0; j < moduleOutdatedDependencies.length; j++) {\r\n \t\t\t\t\tvar dependency = moduleOutdatedDependencies[j];\r\n \t\t\t\t\tvar idx = module.children.indexOf(dependency);\r\n \t\t\t\t\tif(idx >= 0) module.children.splice(idx, 1);\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n \t\r\n \t\t// Not in \"apply\" phase\r\n \t\thotSetStatus(\"apply\");\r\n \t\r\n \t\thotCurrentHash = hotUpdateNewHash;\r\n \t\r\n \t\t// insert new code\r\n \t\tfor(var moduleId in appliedUpdate) {\r\n \t\t\tif(Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {\r\n \t\t\t\tmodules[moduleId] = appliedUpdate[moduleId];\r\n \t\t\t}\r\n \t\t}\r\n \t\r\n \t\t// call accept handlers\r\n \t\tvar error = null;\r\n \t\tfor(var moduleId in outdatedDependencies) {\r\n \t\t\tif(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {\r\n \t\t\t\tvar module = installedModules[moduleId];\r\n \t\t\t\tvar moduleOutdatedDependencies = outdatedDependencies[moduleId];\r\n \t\t\t\tvar callbacks = [];\r\n \t\t\t\tfor(var i = 0; i < moduleOutdatedDependencies.length; i++) {\r\n \t\t\t\t\tvar dependency = moduleOutdatedDependencies[i];\r\n \t\t\t\t\tvar cb = module.hot._acceptedDependencies[dependency];\r\n \t\t\t\t\tif(callbacks.indexOf(cb) >= 0) continue;\r\n \t\t\t\t\tcallbacks.push(cb);\r\n \t\t\t\t}\r\n \t\t\t\tfor(var i = 0; i < callbacks.length; i++) {\r\n \t\t\t\t\tvar cb = callbacks[i];\r\n \t\t\t\t\ttry {\r\n \t\t\t\t\t\tcb(outdatedDependencies);\r\n \t\t\t\t\t} catch(err) {\r\n \t\t\t\t\t\tif(!error)\r\n \t\t\t\t\t\t\terror = err;\r\n \t\t\t\t\t}\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n \t\r\n \t\t// Load self accepted modules\r\n \t\tfor(var i = 0; i < outdatedSelfAcceptedModules.length; i++) {\r\n \t\t\tvar item = outdatedSelfAcceptedModules[i];\r\n \t\t\tvar moduleId = item.module;\r\n \t\t\thotCurrentParents = [moduleId];\r\n \t\t\ttry {\r\n \t\t\t\t__webpack_require__(moduleId);\r\n \t\t\t} catch(err) {\r\n \t\t\t\tif(typeof item.errorHandler === \"function\") {\r\n \t\t\t\t\ttry {\r\n \t\t\t\t\t\titem.errorHandler(err);\r\n \t\t\t\t\t} catch(err) {\r\n \t\t\t\t\t\tif(!error)\r\n \t\t\t\t\t\t\terror = err;\r\n \t\t\t\t\t}\r\n \t\t\t\t} else if(!error)\r\n \t\t\t\t\terror = err;\r\n \t\t\t}\r\n \t\t}\r\n \t\r\n \t\t// handle errors in accept handlers and self accepted module load\r\n \t\tif(error) {\r\n \t\t\thotSetStatus(\"fail\");\r\n \t\t\treturn callback(error);\r\n \t\t}\r\n \t\r\n \t\thotSetStatus(\"idle\");\r\n \t\tcallback(null, outdatedModules);\r\n \t}\r\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false,\n \t\t\thot: hotCreateModule(moduleId),\n \t\t\tparents: hotCurrentParents,\n \t\t\tchildren: []\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// __webpack_hash__\n \t__webpack_require__.h = function() { return hotCurrentHash; };\n\n \t// Load entry module and return exports\n \treturn hotCreateRequire(0)(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d0f1c55809dfbbfeb7ad","import { getLaserCutGcodeFromOp } from '../cam-gcode-laser-cut'\n\nonmessage = (event) => {\n\n    let {settings, opIndex, op, geometry = [], openGeometry = [], tabGeometry = []} = event.data\n\n    const errors = [];\n\n    const showAlert = (message, level) => {\n        errors.push({ message, level })\n    };\n    const progress = () => {\n        postMessage(JSON.stringify({ event: \"onProgress\", gcode, errors }))\n    };\n    const done = (gcode) => {\n        if (gcode === false && errors.length) {\n            postMessage(JSON.stringify({ event: \"onError\", errors }))\n        } else {\n            postMessage(JSON.stringify({ event: \"onDone\", gcode }))\n        }\n        self.close();\n    };\n\n    getLaserCutGcodeFromOp.apply(this, [settings, opIndex, op, geometry, openGeometry, tabGeometry, showAlert, done, progress])\n\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/workers/cam-lasercut.js","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\n/**\n * @class Common utilities\n * @name glMatrix\n */\nvar glMatrix = {};\n\n// Configuration Constants\nglMatrix.EPSILON = 0.000001;\nglMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nglMatrix.RANDOM = Math.random;\nglMatrix.ENABLE_SIMD = false;\n\n// Capability detection\nglMatrix.SIMD_AVAILABLE = (glMatrix.ARRAY_TYPE === Float32Array) && ('SIMD' in this);\nglMatrix.USE_SIMD = glMatrix.ENABLE_SIMD && glMatrix.SIMD_AVAILABLE;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nglMatrix.setMatrixArrayType = function(type) {\n    glMatrix.ARRAY_TYPE = type;\n}\n\nvar degree = Math.PI / 180;\n\n/**\n* Convert Degree To Radian\n*\n* @param {Number} Angle in Degrees\n*/\nglMatrix.toRadian = function(a){\n     return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less \n * than or equal to 1.0, and a relative tolerance is used for larger values)\n * \n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nglMatrix.equals = function(a, b) {\n\treturn Math.abs(a - b) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n\nmodule.exports = glMatrix;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/gl-matrix/src/gl-matrix/common.js\n// module id = 1\n// module chunks = 0","/*\n * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n * http://code.google.com/p/poly2tri/\n * \n * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n * https://github.com/r3mi/poly2tri.js\n * \n * All rights reserved.\n * \n * Distributed under the 3-clause BSD License, see LICENSE.txt\n */\n\n\"use strict\";\n\n/**\n * The following functions operate on \"Point\" or any \"Point like\" object with {x,y},\n * as defined by the {@link XY} type\n * ([duck typing]{@link http://en.wikipedia.org/wiki/Duck_typing}).\n * @module\n * @private\n */\n\n/**\n * poly2tri.js supports using custom point class instead of {@linkcode Point}.\n * Any \"Point like\" object with <code>{x, y}</code> attributes is supported\n * to initialize the SweepContext polylines and points\n * ([duck typing]{@link http://en.wikipedia.org/wiki/Duck_typing}).\n *\n * poly2tri.js might add extra fields to the point objects when computing the\n * triangulation : they are prefixed with <code>_p2t_</code> to avoid collisions\n * with fields in the custom class.\n *\n * @example\n *      var contour = [{x:100, y:100}, {x:100, y:300}, {x:300, y:300}, {x:300, y:100}];\n *      var swctx = new poly2tri.SweepContext(contour);\n *\n * @typedef {Object} XY\n * @property {number} x - x coordinate\n * @property {number} y - y coordinate\n */\n\n\n/**\n * Point pretty printing : prints x and y coordinates.\n * @example\n *      xy.toStringBase({x:5, y:42})\n *      // → \"(5;42)\"\n * @protected\n * @param {!XY} p - point object with {x,y}\n * @returns {string} <code>\"(x;y)\"</code>\n */\nfunction toStringBase(p) {\n    return (\"(\" + p.x + \";\" + p.y + \")\");\n}\n\n/**\n * Point pretty printing. Delegates to the point's custom \"toString()\" method if exists,\n * else simply prints x and y coordinates.\n * @example\n *      xy.toString({x:5, y:42})\n *      // → \"(5;42)\"\n * @example\n *      xy.toString({x:5,y:42,toString:function() {return this.x+\":\"+this.y;}})\n *      // → \"5:42\"\n * @param {!XY} p - point object with {x,y}\n * @returns {string} <code>\"(x;y)\"</code>\n */\nfunction toString(p) {\n    // Try a custom toString first, and fallback to own implementation if none\n    var s = p.toString();\n    return (s === '[object Object]' ? toStringBase(p) : s);\n}\n\n\n/**\n * Compare two points component-wise. Ordered by y axis first, then x axis.\n * @param {!XY} a - point object with {x,y}\n * @param {!XY} b - point object with {x,y}\n * @return {number} <code>&lt; 0</code> if <code>a &lt; b</code>,\n *         <code>&gt; 0</code> if <code>a &gt; b</code>, \n *         <code>0</code> otherwise.\n */\nfunction compare(a, b) {\n    if (a.y === b.y) {\n        return a.x - b.x;\n    } else {\n        return a.y - b.y;\n    }\n}\n\n/**\n * Test two Point objects for equality.\n * @param {!XY} a - point object with {x,y}\n * @param {!XY} b - point object with {x,y}\n * @return {boolean} <code>True</code> if <code>a == b</code>, <code>false</code> otherwise.\n */\nfunction equals(a, b) {\n    return a.x === b.x && a.y === b.y;\n}\n\n\nmodule.exports = {\n    toString: toString,\n    toStringBase: toStringBase,\n    compare: compare,\n    equals: equals\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/poly2tri/src/xy.js\n// module id = 2\n// module chunks = 0","// Copyright 2014-2016 Todd Fleming\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n// \n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n// \n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// TODO: pass React elements to alertFn\n\n\"use strict\";\n\nimport ClipperLib from 'clipper-lib';\nimport SweepContext from 'poly2tri/src/sweepcontext';\n\nexport const inchToClipperScale = 1270000000;\nexport const mmToClipperScale = inchToClipperScale / 25.4; // 50000000;\nexport const clipperToCppScale = 1 / 128; // Prevent overflow for coordinates up to ~1000 mm\nexport const cleanPolyDist = 100;\nexport const arcTolerance = 10000;\n\n// Linearize a cubic bezier. Returns ['L', x2, y2, x3, y3, ...]. The return value doesn't\n// include (p1x, p1y); it's part of the previous segment.\nfunction linearizeCubicBezier(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, minNumSegments, minSegmentLength) {\n    function bez(p0, p1, p2, p3, t) {\n        return (1 - t) * (1 - t) * (1 - t) * p0 + 3 * (1 - t) * (1 - t) * t * p1 + 3 * (1 - t) * t * t * p2 + t * t * t * p3;\n    }\n\n    if (p1x == c1x && p1y == c1y && p2x == c2x && p2y == c2y)\n        return ['L', p2x, p2y];\n\n    let numSegments = minNumSegments;\n    while (true) {\n        let x = p1x;\n        let y = p1y;\n        let result = ['L'];\n        for (let i = 1; i <= numSegments; ++i) {\n            let t = 1.0 * i / numSegments;\n            let nextX = bez(p1x, c1x, c2x, p2x, t);\n            let nextY = bez(p1y, c1y, c2y, p2y, t);\n            if ((nextX - x) * (nextX - x) + (nextY - y) * (nextY - y) > minSegmentLength * minSegmentLength) {\n                numSegments *= 2;\n                result = null;\n                break;\n            }\n            result.push(nextX, nextY);\n            x = nextX;\n            y = nextY;\n        }\n        if (result)\n            return result;\n    }\n}\n\n// Linearize a path. Both the input path and the returned path are in snap.svg's format.\n// Calls alertFn with an error message and returns null if there's a problem.\nfunction linearizeSnapPath(path, minNumSegments, minSegmentLength, alertFn) {\n    if (path.length < 2 || path[0].length != 3 || path[0][0] != 'M') {\n        alertFn('Path does not begin with M')\n        return null;\n    }\n    let x = path[0][1];\n    let y = path[0][2];\n    let result = [path[0]];\n    for (let i = 1; i < path.length; ++i) {\n        let subpath = path[i];\n        if (subpath[0] == 'C' && subpath.length == 7) {\n            result.push(linearizeCubicBezier(\n                x, y, subpath[1], subpath[2], subpath[3], subpath[4], subpath[5], subpath[6], minNumSegments, minSegmentLength));\n            x = subpath[5];\n            y = subpath[6];\n        } else if (subpath[0] == 'M' && subpath.length == 3) {\n            result.push(subpath);\n            x = subpath[1];\n            y = subpath[2];\n        } else {\n            alertFn('Subpath has an unknown prefix: ' + subpath[0]);\n            return null;\n        }\n    }\n    return result;\n};\n\n// Get linear paths (snap format) from an SVG element. Calls alertFn with an \n// error message and returns null if there's a problem.\nfunction elementToLinearSnapPaths(element, minNumSegments, minSegmentLength, alertFn) {\n    let path = null;\n    let Snap = require('snapsvg-cjs');\n    let snapElement = Snap(element);\n\n    if (snapElement.type == 'path')\n        path = snapElement.attr('d');\n    else if (snapElement.type == 'rect') {\n        let x = Number(snapElement.attr('x'));\n        let y = Number(snapElement.attr('y'));\n        let w = Number(snapElement.attr('width'));\n        let h = Number(snapElement.attr('height'));\n        path = 'm' + x + ',' + y + ' ' + w + ',' + 0 + ' ' + 0 + ',' + h + ' ' + (-w) + ',' + 0 + ' ' + 0 + ',' + (-h) + ' ';\n    }\n    else {\n        alertFn('<b>' + snapElement.type + \"</b> is not supported; try Inkscape's <strong>Object to Path</strong> command\");\n        return null;\n    }\n\n    if (snapElement.attr('clip-path') != '') {\n        alertFn('clip-path is not supported');\n        return null;\n    }\n\n    if (snapElement.attr('mask') != '') {\n        alertFn('mask is not supported');\n        return null;\n    }\n\n    if (path == null) {\n        alertFn('path is missing');\n        return;\n    }\n\n    path = Snap.path.map(path, snapElement.transform().globalMatrix);\n    path = Snap.parsePathString(path);\n    path = linearizeSnapPath(path, minNumSegments, minSegmentLength, alertFn);\n    return path;\n};\n\n// Convert a path in snap.svg format to [[x0, y0, x1, y1, ...], ...].\n// Result is in mm. Returns multiple paths. Only supports linear paths.\n// Calls alertFn with an error message and returns null if there's a problem.\nfunction snapPathToRawPaths(snapPath, pxPerInch, alertFn) {\n    let factor = 25.4 / pxPerInch;\n    if (snapPath.length < 2 || snapPath[0].length != 3 || snapPath[0][0] != 'M') {\n        alertFn('Path does not begin with M');\n        return null;\n    }\n    let currentPath = [snapPath[0][1] * factor, snapPath[0][2] * factor];\n    let result = [currentPath];\n    for (let i = 1; i < snapPath.length; ++i) {\n        let subpath = snapPath[i];\n        if (subpath[0] == 'M' && subpath.length == 3) {\n            currentPath = [subpath[1] * factor, subpath[2] * factor];\n            result.push(currentPath);\n        } else if (subpath[0] == 'L') {\n            for (let j = 0; j < (subpath.length - 1) / 2; ++j)\n                currentPath.push(subpath[1 + j * 2] * factor, subpath[2 + j * 2] * factor);\n        } else {\n            alertFn('Subpath has a non-linear prefix: ' + subpath[0]);\n            return null;\n        }\n    }\n    return result;\n};\n\n// Convert a path in an SVG element to [[x0, y0, x1, y1, ...], ...].\n// Result is in mm. Returns multiple paths. Converts curves.\n// Calls alertFn with an error message and returns null if there's a problem.\nexport function elementToRawPaths(element, pxPerInch, minNumSegments, minSegmentLength, alertFn) {\n    let path = elementToLinearSnapPaths(element, minNumSegments, minSegmentLength, alertFn);\n    if (path !== null)\n        return snapPathToRawPaths(path, pxPerInch, alertFn);\n    return null;\n}\n\n// [[[x0, y0, x1, y1, ...], ...], ...]\nexport function flipY(allRawPaths, deltaY) {\n    for (let rawPaths of allRawPaths)\n        for (let rawPath of rawPaths)\n            for (let i = 0; i < rawPath.length; i += 2)\n                rawPath[i + 1] = deltaY - rawPath[i + 1];\n}\n\nexport function hasClosedRawPaths(rawPaths) {\n    for (let path of rawPaths)\n        if (path.length >= 4 && path[0] == path[path.length - 2] && path[1] == path[path.length - 1])\n            return true;\n    return false;\n}\n\nexport function filterClosedRawPaths(rawPaths) {\n    let result = [];\n    for (let path of rawPaths)\n        if (path.length >= 4 && path[0] == path[path.length - 2] && path[1] == path[path.length - 1])\n            result.push(path);\n    return result;\n}\n\nexport function rawPathsToClipperPaths(rawPaths, scaleX, scaleY, translateX, translateY) {\n    let result = rawPaths.map(p => {\n        let result = [];\n        for (let i = 0; i < p.length; i += 2)\n            result.push({ X: (p[i] * scaleX + translateX) * mmToClipperScale, Y: (p[i + 1] * scaleY + translateY) * mmToClipperScale });\n        return result;\n    });\n    if (hasClosedRawPaths(rawPaths)) {\n        result = ClipperLib.Clipper.CleanPolygons(result, cleanPolyDist);\n        result = ClipperLib.Clipper.SimplifyPolygons(result, ClipperLib.PolyFillType.pftEvenOdd);\n    }\n    return result;\n}\n\nfunction clipperPathsToPolyTree(paths) {\n    let c = new ClipperLib.Clipper();\n    c.AddPaths(paths, ClipperLib.PolyType.ptSubject, true);\n    let polyTree = new ClipperLib.PolyTree();\n    c.Execute(ClipperLib.ClipType.ctUnion, polyTree, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);\n    return polyTree;\n}\n\nfunction triangulatePolyTree(polyTree) {\n    let result = [];\n    let pointToVertex = point => ({ x: point.X / mmToClipperScale, y: point.Y / mmToClipperScale });\n    let contourToVertexes = path => path.map(pointToVertex);\n    let nodesToVertexes = nodes => nodes.map(node => contourToVertexes(node.Contour()));\n    let processNode = node => {\n        let vertexes = contourToVertexes(node.Contour());\n        let holes = nodesToVertexes(node.Childs());\n        let context = new SweepContext(vertexes);\n        context.addHoles(holes);\n        context.triangulate();\n        let triangles = context.getTriangles();\n        for (let t of triangles) {\n            let p = t.getPoints();\n            result.push(\n                p[0].x, p[0].y,\n                p[1].x, p[1].y,\n                p[2].x, p[2].y);\n        }\n        for (let hole of node.Childs()) {\n            for (let next of hole.Childs()) {\n                processNode(next);\n            }\n        }\n    };\n    for (let node of polyTree.Childs()) {\n        processNode(node);\n    }\n    return result;\n}\n\nexport function triangulateRawPaths(rawPaths) {\n    return triangulatePolyTree(clipperPathsToPolyTree(rawPathsToClipperPaths(rawPaths, 1, 1, 0, 0)));\n}\n\n// Convert Clipper paths to C. Returns [double** cPaths, int cNumPaths, int* cPathSizes].\nexport function clipperPathsToCPaths(memoryBlocks, clipperPaths) {\n    let doubleSize = 8;\n\n    let cPaths = Module._malloc(clipperPaths.length * 4);\n    memoryBlocks.push(cPaths);\n    let cPathsBase = cPaths >> 2;\n\n    let cPathSizes = Module._malloc(clipperPaths.length * 4);\n    memoryBlocks.push(cPathSizes);\n    let cPathSizesBase = cPathSizes >> 2;\n\n    for (let i = 0; i < clipperPaths.length; ++i) {\n        let clipperPath = clipperPaths[i];\n\n        let cPath = Module._malloc(clipperPath.length * 2 * doubleSize + 4);\n        memoryBlocks.push(cPath);\n        if (cPath & 4)\n            cPath += 4;\n        //console.log(\"-> \" + cPath.toString(16));\n        let pathArray = new Float64Array(Module.HEAPU32.buffer, Module.HEAPU32.byteOffset + cPath);\n\n        for (let j = 0; j < clipperPath.length; ++j) {\n            let point = clipperPath[j];\n            pathArray[j * 2] = point.X * clipperToCppScale;\n            pathArray[j * 2 + 1] = point.Y * clipperToCppScale;\n        }\n\n        Module.HEAPU32[cPathsBase + i] = cPath;\n        Module.HEAPU32[cPathSizesBase + i] = clipperPath.length;\n    }\n\n    return [cPaths, clipperPaths.length, cPathSizes];\n}\n\n// Convert C paths to Clipper paths. double**& cPathsRef, int& cNumPathsRef, int*& cPathSizesRef\n// Each point has X, Y (stride = 2).\nexport function cPathsToClipperPaths(memoryBlocks, cPathsRef, cNumPathsRef, cPathSizesRef) {\n    let cPaths = Module.HEAPU32[cPathsRef >> 2];\n    memoryBlocks.push(cPaths);\n    let cPathsBase = cPaths >> 2;\n\n    let cNumPaths = Module.HEAPU32[cNumPathsRef >> 2];\n\n    let cPathSizes = Module.HEAPU32[cPathSizesRef >> 2];\n    memoryBlocks.push(cPathSizes);\n    let cPathSizesBase = cPathSizes >> 2;\n\n    let clipperPaths = [];\n    for (let i = 0; i < cNumPaths; ++i) {\n        let pathSize = Module.HEAPU32[cPathSizesBase + i];\n        let cPath = Module.HEAPU32[cPathsBase + i];\n        // cPath contains value to pass to Module._free(). The aligned version contains the actual data.\n        memoryBlocks.push(cPath);\n        if (cPath & 4)\n            cPath += 4;\n        let pathArray = new Float64Array(Module.HEAPU32.buffer, Module.HEAPU32.byteOffset + cPath);\n\n        let clipperPath = [];\n        clipperPaths.push(clipperPath);\n        for (let j = 0; j < pathSize; ++j)\n            clipperPath.push({\n                X: pathArray[j * 2] / clipperToCppScale,\n                Y: pathArray[j * 2 + 1] / clipperToCppScale,\n            });\n    }\n\n    return clipperPaths;\n}\n\n// Convert C paths to array of CamPath. double**& cPathsRef, int& cNumPathsRef, int*& cPathSizesRef\n// Each point has X, Y, Z (stride = 3).\nexport function cPathsToCamPaths(memoryBlocks, cPathsRef, cNumPathsRef, cPathSizesRef) {\n    let cPaths = Module.HEAPU32[cPathsRef >> 2];\n    memoryBlocks.push(cPaths);\n    let cPathsBase = cPaths >> 2;\n\n    let cNumPaths = Module.HEAPU32[cNumPathsRef >> 2];\n\n    let cPathSizes = Module.HEAPU32[cPathSizesRef >> 2];\n    memoryBlocks.push(cPathSizes);\n    let cPathSizesBase = cPathSizes >> 2;\n\n    let convertedPaths = [];\n    for (let i = 0; i < cNumPaths; ++i) {\n        let pathSize = Module.HEAPU32[cPathSizesBase + i];\n        let cPath = Module.HEAPU32[cPathsBase + i];\n        // cPath contains value to pass to Module._free(). The aligned version contains the actual data.\n        memoryBlocks.push(cPath);\n        if (cPath & 4)\n            cPath += 4;\n        let pathArray = new Float64Array(Module.HEAPU32.buffer, Module.HEAPU32.byteOffset + cPath);\n\n        let convertedPath = [];\n        convertedPaths.push({ path: convertedPath, safeToClose: false });\n        for (let j = 0; j < pathSize; ++j)\n            convertedPath.push({\n                X: pathArray[j * 3] / clipperToCppScale,\n                Y: pathArray[j * 3 + 1] / clipperToCppScale,\n                Z: pathArray[j * 3 + 2] / clipperToCppScale,\n            });\n\n        //console.log('got: path', i, ':', pathArray[0], pathArray[1], pathArray[2]);\n    }\n\n    return convertedPaths;\n}\n\nexport function clipperBounds(paths) {\n    let minX = Number.MAX_VALUE;\n    let minY = Number.MAX_VALUE;\n    let maxX = -Number.MAX_VALUE;\n    let maxY = -Number.MAX_VALUE;\n    for (let path of paths) {\n        for (let pt of path) {\n            minX = Math.min(minX, pt.X);\n            maxX = Math.max(maxX, pt.X);\n            minY = Math.min(minY, pt.Y);\n            maxY = Math.max(maxY, pt.Y);\n        }\n    }\n    return { minX, minY, maxX, maxY };\n}\n\n// Clip Clipper geometry. clipType is a ClipperLib.ClipType constant. Returns new geometry.\nexport function clip(paths1, paths2, clipType) {\n    var clipper = new ClipperLib.Clipper();\n    clipper.AddPaths(paths1, ClipperLib.PolyType.ptSubject, true);\n    clipper.AddPaths(paths2, ClipperLib.PolyType.ptClip, true);\n    var result = [];\n    clipper.Execute(clipType, result, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);\n    return result;\n}\n\n// Return union of two Clipper geometries. Returns new geometry.\nexport function union(paths1, paths2) {\n    return clip(paths1, paths2, ClipperLib.ClipType.ctUnion);\n}\n\n// Return difference between two Clipper geometries. Returns new geometry.\nexport function diff(paths1, paths2) {\n    return clip(paths1, paths2, ClipperLib.ClipType.ctDifference);\n}\n\n// Return xor of two Clipper geometries. Returns new geometry.\nexport function xor(paths1, paths2) {\n    return clip(paths1, paths2, ClipperLib.ClipType.ctXor);\n}\n\n// Offset Clipper geometries by amount (positive expands, negative shrinks). Returns new geometry.\nexport function offset(paths, amount, joinType, endType) {\n    if (joinType === undefined)\n        joinType = ClipperLib.JoinType.jtRound;\n    if (endType === undefined)\n        endType = ClipperLib.EndType.etClosedPolygon;\n\n    // bug workaround: join types are swapped in ClipperLib 6.1.3.2\n    if (joinType === ClipperLib.JoinType.jtSquare)\n        joinType = ClipperLib.JoinType.jtMiter;\n    else if (joinType === ClipperLib.JoinType.jtMiter)\n        joinType = ClipperLib.JoinType.jtSquare;\n\n    var co = new ClipperLib.ClipperOffset(2, arcTolerance);\n    co.AddPaths(paths, joinType, endType);\n    var offsetted = [];\n    co.Execute(offsetted, amount);\n    return offsetted;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/mesh.js","// rev 482\n/********************************************************************************\n *                                                                              *\n * Author    :  Angus Johnson                                                   *\n * Version   :  6.2.1                                                          *\n * Date      :  31 October 2014                                                 *\n * Website   :  http://www.angusj.com                                           *\n * Copyright :  Angus Johnson 2010-2014                                         *\n *                                                                              *\n * License:                                                                     *\n * Use, modification & distribution is subject to Boost Software License Ver 1. *\n * http://www.boost.org/LICENSE_1_0.txt                                         *\n *                                                                              *\n * Attributions:                                                                *\n * The code in this library is an extension of Bala Vatti's clipping algorithm: *\n * \"A generic solution to polygon clipping\"                                     *\n * Communications of the ACM, Vol 35, Issue 7 (July 1992) pp 56-63.             *\n * http://portal.acm.org/citation.cfm?id=129906                                 *\n *                                                                              *\n * Computer graphics and geometric modeling: implementation and algorithms      *\n * By Max K. Agoston                                                            *\n * Springer; 1 edition (January 4, 2005)                                        *\n * http://books.google.com/books?q=vatti+clipping+agoston                       *\n *                                                                              *\n * See also:                                                                    *\n * \"Polygon Offsetting by Computing Winding Numbers\"                            *\n * Paper no. DETC2005-85513 pp. 565-575                                         *\n * ASME 2005 International Design Engineering Technical Conferences             *\n * and Computers and Information in Engineering Conference (IDETC/CIE2005)      *\n * September 24-28, 2005 , Long Beach, California, USA                          *\n * http://www.me.berkeley.edu/~mcmains/pubs/DAC05OffsetPolygon.pdf              *\n *                                                                              *\n *******************************************************************************/\n/*******************************************************************************\n *                                                                              *\n * Author    :  Timo                                                            *\n * Version   :  6.2.1.0                                                         *\n * Date      :  17 June 2016                                                 *\n *                                                                              *\n * This is a translation of the C# Clipper library to Javascript.               *\n * Int128 struct of C# is implemented using JSBN of Tom Wu.                     *\n * Because Javascript lacks support for 64-bit integers, the space              *\n * is a little more restricted than in C# version.                              *\n *                                                                              *\n * C# version has support for coordinate space:                                 *\n * +-4611686018427387903 ( sqrt(2^127 -1)/2 )                                   *\n * while Javascript version has support for space:                              *\n * +-4503599627370495 ( sqrt(2^106 -1)/2 )                                      *\n *                                                                              *\n * Tom Wu's JSBN proved to be the fastest big integer library:                  *\n * http://jsperf.com/big-integer-library-test                                   *\n *                                                                              *\n * This class can be made simpler when (if ever) 64-bit integer support comes.  *\n *                                                                              *\n *******************************************************************************/\n/*******************************************************************************\n *                                                                              *\n * Basic JavaScript BN library - subset useful for RSA encryption.              *\n * http://www-cs-students.stanford.edu/~tjw/jsbn/                               *\n * Copyright (c) 2005  Tom Wu                                                   *\n * All Rights Reserved.                                                         *\n * See \"LICENSE\" for details:                                                   *\n * http://www-cs-students.stanford.edu/~tjw/jsbn/LICENSE                        *\n *                                                                              *\n *******************************************************************************/\n(function ()\n{\n  \"use strict\";\n  //use_int32: When enabled 32bit ints are used instead of 64bit ints. This\n  //improve performance but coordinate values are limited to the range +/- 46340\n  var use_int32 = false;\n  //use_xyz: adds a Z member to IntPoint. Adds a minor cost to performance.\n  var use_xyz = false;\n  //UseLines: Enables open path clipping. Adds a very minor cost to performance.\n  var use_lines = true;\n\n  var ClipperLib = {};\n  var isNode = false;\n  if (typeof module !== 'undefined' && module.exports)\n  {\n    module.exports = ClipperLib;\n    isNode = true;\n  }\n  else\n  {\n    if (typeof define === 'function' && define.amd) {\n      define(ClipperLib);\n    }\n    if (typeof (document) !== \"undefined\") window.ClipperLib = ClipperLib;\n    else self['ClipperLib'] = ClipperLib;\n  }\n  var navigator_appName;\n  if (!isNode)\n  {\n    var nav = navigator.userAgent.toString().toLowerCase();\n    navigator_appName = navigator.appName;\n  }\n  else\n  {\n    var nav = \"chrome\"; // Node.js uses Chrome's V8 engine\n    navigator_appName = \"Netscape\"; // Firefox, Chrome and Safari returns \"Netscape\", so Node.js should also\n  }\n  // Browser test to speedup performance critical functions\n  var browser = {};\n  if (nav.indexOf(\"chrome\") != -1 && nav.indexOf(\"chromium\") == -1) browser.chrome = 1;\n  else browser.chrome = 0;\n  if (nav.indexOf(\"chromium\") != -1) browser.chromium = 1;\n  else browser.chromium = 0;\n  if (nav.indexOf(\"safari\") != -1 && nav.indexOf(\"chrome\") == -1 && nav.indexOf(\"chromium\") == -1) browser.safari = 1;\n  else browser.safari = 0;\n  if (nav.indexOf(\"firefox\") != -1) browser.firefox = 1;\n  else browser.firefox = 0;\n  if (nav.indexOf(\"firefox/17\") != -1) browser.firefox17 = 1;\n  else browser.firefox17 = 0;\n  if (nav.indexOf(\"firefox/15\") != -1) browser.firefox15 = 1;\n  else browser.firefox15 = 0;\n  if (nav.indexOf(\"firefox/3\") != -1) browser.firefox3 = 1;\n  else browser.firefox3 = 0;\n  if (nav.indexOf(\"opera\") != -1) browser.opera = 1;\n  else browser.opera = 0;\n  if (nav.indexOf(\"msie 10\") != -1) browser.msie10 = 1;\n  else browser.msie10 = 0;\n  if (nav.indexOf(\"msie 9\") != -1) browser.msie9 = 1;\n  else browser.msie9 = 0;\n  if (nav.indexOf(\"msie 8\") != -1) browser.msie8 = 1;\n  else browser.msie8 = 0;\n  if (nav.indexOf(\"msie 7\") != -1) browser.msie7 = 1;\n  else browser.msie7 = 0;\n  if (nav.indexOf(\"msie \") != -1) browser.msie = 1;\n  else browser.msie = 0;\n  ClipperLib.biginteger_used = null;\n\n  // Copyright (c) 2005  Tom Wu\n  // All Rights Reserved.\n  // See \"LICENSE\" for details.\n  // Basic JavaScript BN library - subset useful for RSA encryption.\n  // Bits per digit\n  var dbits;\n  // JavaScript engine analysis\n  var canary = 0xdeadbeefcafe;\n  var j_lm = ((canary & 0xffffff) == 0xefcafe);\n  // (public) Constructor\n  function BigInteger(a, b, c)\n  {\n    // This test variable can be removed,\n    // but at least for performance tests it is useful piece of knowledge\n    // This is the only ClipperLib related variable in BigInteger library\n    ClipperLib.biginteger_used = 1;\n    if (a != null)\n      if (\"number\" == typeof a && \"undefined\" == typeof (b)) this.fromInt(a); // faster conversion\n      else if (\"number\" == typeof a) this.fromNumber(a, b, c);\n    else if (b == null && \"string\" != typeof a) this.fromString(a, 256);\n    else this.fromString(a, b);\n  }\n  // return new, unset BigInteger\n  function nbi()\n  {\n    return new BigInteger(null,undefined,undefined);\n  }\n  // am: Compute w_j += (x*this_i), propagate carries,\n  // c is initial carry, returns final carry.\n  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n  // We need to select the fastest one that works in this environment.\n  // am1: use a single mult and divide to get the high bits,\n  // max digit bits should be 26 because\n  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)\n  function am1(i, x, w, j, c, n)\n  {\n    while (--n >= 0)\n    {\n      var v = x * this[i++] + w[j] + c;\n      c = Math.floor(v / 0x4000000);\n      w[j++] = v & 0x3ffffff;\n    }\n    return c;\n  }\n  // am2 avoids a big mult-and-extract completely.\n  // Max digit bits should be <= 30 because we do bitwise ops\n  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\n  function am2(i, x, w, j, c, n)\n  {\n    var xl = x & 0x7fff,\n      xh = x >> 15;\n    while (--n >= 0)\n    {\n      var l = this[i] & 0x7fff;\n      var h = this[i++] >> 15;\n      var m = xh * l + h * xl;\n      l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n      c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n      w[j++] = l & 0x3fffffff;\n    }\n    return c;\n  }\n  // Alternately, set max digit bits to 28 since some\n  // browsers slow down when dealing with 32-bit numbers.\n  function am3(i, x, w, j, c, n)\n  {\n    var xl = x & 0x3fff,\n      xh = x >> 14;\n    while (--n >= 0)\n    {\n      var l = this[i] & 0x3fff;\n      var h = this[i++] >> 14;\n      var m = xh * l + h * xl;\n      l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n      c = (l >> 28) + (m >> 14) + xh * h;\n      w[j++] = l & 0xfffffff;\n    }\n    return c;\n  }\n  if (j_lm && (navigator_appName == \"Microsoft Internet Explorer\"))\n  {\n    BigInteger.prototype.am = am2;\n    dbits = 30;\n  }\n  else if (j_lm && (navigator_appName != \"Netscape\"))\n  {\n    BigInteger.prototype.am = am1;\n    dbits = 26;\n  }\n  else\n  { // Mozilla/Netscape seems to prefer am3\n    BigInteger.prototype.am = am3;\n    dbits = 28;\n  }\n  BigInteger.prototype.DB = dbits;\n  BigInteger.prototype.DM = ((1 << dbits) - 1);\n  BigInteger.prototype.DV = (1 << dbits);\n  var BI_FP = 52;\n  BigInteger.prototype.FV = Math.pow(2, BI_FP);\n  BigInteger.prototype.F1 = BI_FP - dbits;\n  BigInteger.prototype.F2 = 2 * dbits - BI_FP;\n  // Digit conversions\n  var BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n  var BI_RC = new Array();\n  var rr, vv;\n  rr = \"0\".charCodeAt(0);\n  for (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\n  rr = \"a\".charCodeAt(0);\n  for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n  rr = \"A\".charCodeAt(0);\n  for (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\n  function int2char(n)\n  {\n    return BI_RM.charAt(n);\n  }\n\n  function intAt(s, i)\n  {\n    var c = BI_RC[s.charCodeAt(i)];\n    return (c == null) ? -1 : c;\n  }\n  // (protected) copy this to r\n  function bnpCopyTo(r)\n  {\n    for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];\n    r.t = this.t;\n    r.s = this.s;\n  }\n  // (protected) set from integer value x, -DV <= x < DV\n  function bnpFromInt(x)\n  {\n    this.t = 1;\n    this.s = (x < 0) ? -1 : 0;\n    if (x > 0) this[0] = x;\n    else if (x < -1) this[0] = x + this.DV;\n    else this.t = 0;\n  }\n  // return bigint initialized to value\n  function nbv(i)\n  {\n    var r = nbi();\n    r.fromInt(i);\n    return r;\n  }\n  // (protected) set from string and radix\n  function bnpFromString(s, b)\n  {\n    var k;\n    if (b == 16) k = 4;\n    else if (b == 8) k = 3;\n    else if (b == 256) k = 8; // byte array\n    else if (b == 2) k = 1;\n    else if (b == 32) k = 5;\n    else if (b == 4) k = 2;\n    else\n    {\n      this.fromRadix(s, b);\n      return;\n    }\n    this.t = 0;\n    this.s = 0;\n    var i = s.length,\n      mi = false,\n      sh = 0;\n    while (--i >= 0)\n    {\n      var x = (k == 8) ? s[i] & 0xff : intAt(s, i);\n      if (x < 0)\n      {\n        if (s.charAt(i) == \"-\") mi = true;\n        continue;\n      }\n      mi = false;\n      if (sh == 0)\n        this[this.t++] = x;\n      else if (sh + k > this.DB)\n      {\n        this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;\n        this[this.t++] = (x >> (this.DB - sh));\n      }\n      else\n        this[this.t - 1] |= x << sh;\n      sh += k;\n      if (sh >= this.DB) sh -= this.DB;\n    }\n    if (k == 8 && (s[0] & 0x80) != 0)\n    {\n      this.s = -1;\n      if (sh > 0) this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;\n    }\n    this.clamp();\n    if (mi) BigInteger.ZERO.subTo(this, this);\n  }\n  // (protected) clamp off excess high words\n  function bnpClamp()\n  {\n    var c = this.s & this.DM;\n    while (this.t > 0 && this[this.t - 1] == c)--this.t;\n  }\n  // (public) return string representation in given radix\n  function bnToString(b)\n  {\n    if (this.s < 0) return \"-\" + this.negate().toString(b);\n    var k;\n    if (b == 16) k = 4;\n    else if (b == 8) k = 3;\n    else if (b == 2) k = 1;\n    else if (b == 32) k = 5;\n    else if (b == 4) k = 2;\n    else return this.toRadix(b);\n    var km = (1 << k) - 1,\n      d, m = false,\n      r = \"\",\n      i = this.t;\n    var p = this.DB - (i * this.DB) % k;\n    if (i-- > 0)\n    {\n      if (p < this.DB && (d = this[i] >> p) > 0)\n      {\n        m = true;\n        r = int2char(d);\n      }\n      while (i >= 0)\n      {\n        if (p < k)\n        {\n          d = (this[i] & ((1 << p) - 1)) << (k - p);\n          d |= this[--i] >> (p += this.DB - k);\n        }\n        else\n        {\n          d = (this[i] >> (p -= k)) & km;\n          if (p <= 0)\n          {\n            p += this.DB;\n            --i;\n          }\n        }\n        if (d > 0) m = true;\n        if (m) r += int2char(d);\n      }\n    }\n    return m ? r : \"0\";\n  }\n  // (public) -this\n  function bnNegate()\n  {\n    var r = nbi();\n    BigInteger.ZERO.subTo(this, r);\n    return r;\n  }\n  // (public) |this|\n  function bnAbs()\n  {\n    return (this.s < 0) ? this.negate() : this;\n  }\n  // (public) return + if this > a, - if this < a, 0 if equal\n  function bnCompareTo(a)\n  {\n    var r = this.s - a.s;\n    if (r != 0) return r;\n    var i = this.t;\n    r = i - a.t;\n    if (r != 0) return (this.s < 0) ? -r : r;\n    while (--i >= 0)\n      if ((r = this[i] - a[i]) != 0) return r;\n    return 0;\n  }\n  // returns bit length of the integer x\n  function nbits(x)\n  {\n    var r = 1,\n      t;\n    if ((t = x >>> 16) != 0)\n    {\n      x = t;\n      r += 16;\n    }\n    if ((t = x >> 8) != 0)\n    {\n      x = t;\n      r += 8;\n    }\n    if ((t = x >> 4) != 0)\n    {\n      x = t;\n      r += 4;\n    }\n    if ((t = x >> 2) != 0)\n    {\n      x = t;\n      r += 2;\n    }\n    if ((t = x >> 1) != 0)\n    {\n      x = t;\n      r += 1;\n    }\n    return r;\n  }\n  // (public) return the number of bits in \"this\"\n  function bnBitLength()\n  {\n    if (this.t <= 0) return 0;\n    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));\n  }\n  // (protected) r = this << n*DB\n  function bnpDLShiftTo(n, r)\n  {\n    var i;\n    for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];\n    for (i = n - 1; i >= 0; --i) r[i] = 0;\n    r.t = this.t + n;\n    r.s = this.s;\n  }\n  // (protected) r = this >> n*DB\n  function bnpDRShiftTo(n, r)\n  {\n    for (var i = n; i < this.t; ++i) r[i - n] = this[i];\n    r.t = Math.max(this.t - n, 0);\n    r.s = this.s;\n  }\n  // (protected) r = this << n\n  function bnpLShiftTo(n, r)\n  {\n    var bs = n % this.DB;\n    var cbs = this.DB - bs;\n    var bm = (1 << cbs) - 1;\n    var ds = Math.floor(n / this.DB),\n      c = (this.s << bs) & this.DM,\n      i;\n    for (i = this.t - 1; i >= 0; --i)\n    {\n      r[i + ds + 1] = (this[i] >> cbs) | c;\n      c = (this[i] & bm) << bs;\n    }\n    for (i = ds - 1; i >= 0; --i) r[i] = 0;\n    r[ds] = c;\n    r.t = this.t + ds + 1;\n    r.s = this.s;\n    r.clamp();\n  }\n  // (protected) r = this >> n\n  function bnpRShiftTo(n, r)\n  {\n    r.s = this.s;\n    var ds = Math.floor(n / this.DB);\n    if (ds >= this.t)\n    {\n      r.t = 0;\n      return;\n    }\n    var bs = n % this.DB;\n    var cbs = this.DB - bs;\n    var bm = (1 << bs) - 1;\n    r[0] = this[ds] >> bs;\n    for (var i = ds + 1; i < this.t; ++i)\n    {\n      r[i - ds - 1] |= (this[i] & bm) << cbs;\n      r[i - ds] = this[i] >> bs;\n    }\n    if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;\n    r.t = this.t - ds;\n    r.clamp();\n  }\n  // (protected) r = this - a\n  function bnpSubTo(a, r)\n  {\n    var i = 0,\n      c = 0,\n      m = Math.min(a.t, this.t);\n    while (i < m)\n    {\n      c += this[i] - a[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n    if (a.t < this.t)\n    {\n      c -= a.s;\n      while (i < this.t)\n      {\n        c += this[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n      }\n      c += this.s;\n    }\n    else\n    {\n      c += this.s;\n      while (i < a.t)\n      {\n        c -= a[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n      }\n      c -= a.s;\n    }\n    r.s = (c < 0) ? -1 : 0;\n    if (c < -1) r[i++] = this.DV + c;\n    else if (c > 0) r[i++] = c;\n    r.t = i;\n    r.clamp();\n  }\n  // (protected) r = this * a, r != this,a (HAC 14.12)\n  // \"this\" should be the larger one if appropriate.\n  function bnpMultiplyTo(a, r)\n  {\n    var x = this.abs(),\n      y = a.abs();\n    var i = x.t;\n    r.t = i + y.t;\n    while (--i >= 0) r[i] = 0;\n    for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n    r.s = 0;\n    r.clamp();\n    if (this.s != a.s) BigInteger.ZERO.subTo(r, r);\n  }\n  // (protected) r = this^2, r != this (HAC 14.16)\n  function bnpSquareTo(r)\n  {\n    var x = this.abs();\n    var i = r.t = 2 * x.t;\n    while (--i >= 0) r[i] = 0;\n    for (i = 0; i < x.t - 1; ++i)\n    {\n      var c = x.am(i, x[i], r, 2 * i, 0, 1);\n      if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV)\n      {\n        r[i + x.t] -= x.DV;\n        r[i + x.t + 1] = 1;\n      }\n    }\n    if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n    r.s = 0;\n    r.clamp();\n  }\n  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n  // r != q, this != m.  q or r may be null.\n  function bnpDivRemTo(m, q, r)\n  {\n    var pm = m.abs();\n    if (pm.t <= 0) return;\n    var pt = this.abs();\n    if (pt.t < pm.t)\n    {\n      if (q != null) q.fromInt(0);\n      if (r != null) this.copyTo(r);\n      return;\n    }\n    if (r == null) r = nbi();\n    var y = nbi(),\n      ts = this.s,\n      ms = m.s;\n    var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus\n    if (nsh > 0)\n    {\n      pm.lShiftTo(nsh, y);\n      pt.lShiftTo(nsh, r);\n    }\n    else\n    {\n      pm.copyTo(y);\n      pt.copyTo(r);\n    }\n    var ys = y.t;\n    var y0 = y[ys - 1];\n    if (y0 == 0) return;\n    var yt = y0 * (1 << this.F1) + ((ys > 1) ? y[ys - 2] >> this.F2 : 0);\n    var d1 = this.FV / yt,\n      d2 = (1 << this.F1) / yt,\n      e = 1 << this.F2;\n    var i = r.t,\n      j = i - ys,\n      t = (q == null) ? nbi() : q;\n    y.dlShiftTo(j, t);\n    if (r.compareTo(t) >= 0)\n    {\n      r[r.t++] = 1;\n      r.subTo(t, r);\n    }\n    BigInteger.ONE.dlShiftTo(ys, t);\n    t.subTo(y, y); // \"negative\" y so we can replace sub with am later\n    while (y.t < ys) y[y.t++] = 0;\n    while (--j >= 0)\n    {\n      // Estimate quotient digit\n      var qd = (r[--i] == y0) ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n      if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd)\n      { // Try it out\n        y.dlShiftTo(j, t);\n        r.subTo(t, r);\n        while (r[i] < --qd) r.subTo(t, r);\n      }\n    }\n    if (q != null)\n    {\n      r.drShiftTo(ys, q);\n      if (ts != ms) BigInteger.ZERO.subTo(q, q);\n    }\n    r.t = ys;\n    r.clamp();\n    if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder\n    if (ts < 0) BigInteger.ZERO.subTo(r, r);\n  }\n  // (public) this mod a\n  function bnMod(a)\n  {\n    var r = nbi();\n    this.abs().divRemTo(a, null, r);\n    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);\n    return r;\n  }\n  // Modular reduction using \"classic\" algorithm\n  function Classic(m)\n  {\n    this.m = m;\n  }\n\n  function cConvert(x)\n  {\n    if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\n    else return x;\n  }\n\n  function cRevert(x)\n  {\n    return x;\n  }\n\n  function cReduce(x)\n  {\n    x.divRemTo(this.m, null, x);\n  }\n\n  function cMulTo(x, y, r)\n  {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n  }\n\n  function cSqrTo(x, r)\n  {\n    x.squareTo(r);\n    this.reduce(r);\n  }\n  Classic.prototype.convert = cConvert;\n  Classic.prototype.revert = cRevert;\n  Classic.prototype.reduce = cReduce;\n  Classic.prototype.mulTo = cMulTo;\n  Classic.prototype.sqrTo = cSqrTo;\n  // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n  // justification:\n  //         xy == 1 (mod m)\n  //         xy =  1+km\n  //   xy(2-xy) = (1+km)(1-km)\n  // x[y(2-xy)] = 1-k^2m^2\n  // x[y(2-xy)] == 1 (mod m^2)\n  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n  // JS multiply \"overflows\" differently from C/C++, so care is needed here.\n  function bnpInvDigit()\n  {\n    if (this.t < 1) return 0;\n    var x = this[0];\n    if ((x & 1) == 0) return 0;\n    var y = x & 3; // y == 1/x mod 2^2\n    y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4\n    y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8\n    y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16\n    // last step - calculate inverse mod DV directly;\n    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n    y = (y * (2 - x * y % this.DV)) % this.DV; // y == 1/x mod 2^dbits\n    // we really want the negative inverse, and -DV < y < DV\n    return (y > 0) ? this.DV - y : -y;\n  }\n  // Montgomery reduction\n  function Montgomery(m)\n  {\n    this.m = m;\n    this.mp = m.invDigit();\n    this.mpl = this.mp & 0x7fff;\n    this.mph = this.mp >> 15;\n    this.um = (1 << (m.DB - 15)) - 1;\n    this.mt2 = 2 * m.t;\n  }\n  // xR mod m\n  function montConvert(x)\n  {\n    var r = nbi();\n    x.abs().dlShiftTo(this.m.t, r);\n    r.divRemTo(this.m, null, r);\n    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);\n    return r;\n  }\n  // x/R mod m\n  function montRevert(x)\n  {\n    var r = nbi();\n    x.copyTo(r);\n    this.reduce(r);\n    return r;\n  }\n  // x = x/R mod m (HAC 14.32)\n  function montReduce(x)\n  {\n    while (x.t <= this.mt2) // pad x so am has enough room later\n      x[x.t++] = 0;\n    for (var i = 0; i < this.m.t; ++i)\n    {\n      // faster way of calculating u0 = x[i]*mp mod DV\n      var j = x[i] & 0x7fff;\n      var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;\n      // use am to combine the multiply-shift-add into one call\n      j = i + this.m.t;\n      x[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n      // propagate carry\n      while (x[j] >= x.DV)\n      {\n        x[j] -= x.DV;\n        x[++j]++;\n      }\n    }\n    x.clamp();\n    x.drShiftTo(this.m.t, x);\n    if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n  }\n  // r = \"x^2/R mod m\"; x != r\n  function montSqrTo(x, r)\n  {\n    x.squareTo(r);\n    this.reduce(r);\n  }\n  // r = \"xy/R mod m\"; x,y != r\n  function montMulTo(x, y, r)\n  {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n  }\n  Montgomery.prototype.convert = montConvert;\n  Montgomery.prototype.revert = montRevert;\n  Montgomery.prototype.reduce = montReduce;\n  Montgomery.prototype.mulTo = montMulTo;\n  Montgomery.prototype.sqrTo = montSqrTo;\n  // (protected) true iff this is even\n  function bnpIsEven()\n  {\n    return ((this.t > 0) ? (this[0] & 1) : this.s) == 0;\n  }\n  // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n  function bnpExp(e, z)\n  {\n    if (e > 0xffffffff || e < 1) return BigInteger.ONE;\n    var r = nbi(),\n      r2 = nbi(),\n      g = z.convert(this),\n      i = nbits(e) - 1;\n    g.copyTo(r);\n    while (--i >= 0)\n    {\n      z.sqrTo(r, r2);\n      if ((e & (1 << i)) > 0) z.mulTo(r2, g, r);\n      else\n      {\n        var t = r;\n        r = r2;\n        r2 = t;\n      }\n    }\n    return z.revert(r);\n  }\n  // (public) this^e % m, 0 <= e < 2^32\n  function bnModPowInt(e, m)\n  {\n    var z;\n    if (e < 256 || m.isEven()) z = new Classic(m);\n    else z = new Montgomery(m);\n    return this.exp(e, z);\n  }\n  // protected\n  BigInteger.prototype.copyTo = bnpCopyTo;\n  BigInteger.prototype.fromInt = bnpFromInt;\n  BigInteger.prototype.fromString = bnpFromString;\n  BigInteger.prototype.clamp = bnpClamp;\n  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;\n  BigInteger.prototype.drShiftTo = bnpDRShiftTo;\n  BigInteger.prototype.lShiftTo = bnpLShiftTo;\n  BigInteger.prototype.rShiftTo = bnpRShiftTo;\n  BigInteger.prototype.subTo = bnpSubTo;\n  BigInteger.prototype.multiplyTo = bnpMultiplyTo;\n  BigInteger.prototype.squareTo = bnpSquareTo;\n  BigInteger.prototype.divRemTo = bnpDivRemTo;\n  BigInteger.prototype.invDigit = bnpInvDigit;\n  BigInteger.prototype.isEven = bnpIsEven;\n  BigInteger.prototype.exp = bnpExp;\n  // public\n  BigInteger.prototype.toString = bnToString;\n  BigInteger.prototype.negate = bnNegate;\n  BigInteger.prototype.abs = bnAbs;\n  BigInteger.prototype.compareTo = bnCompareTo;\n  BigInteger.prototype.bitLength = bnBitLength;\n  BigInteger.prototype.mod = bnMod;\n  BigInteger.prototype.modPowInt = bnModPowInt;\n  // \"constants\"\n  BigInteger.ZERO = nbv(0);\n  BigInteger.ONE = nbv(1);\n  // Copyright (c) 2005-2009  Tom Wu\n  // All Rights Reserved.\n  // See \"LICENSE\" for details.\n  // Extended JavaScript BN functions, required for RSA private ops.\n  // Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n  // Version 1.2: square() API, isProbablePrime fix\n  // (public)\n  function bnClone()\n  {\n    var r = nbi();\n    this.copyTo(r);\n    return r;\n  }\n  // (public) return value as integer\n  function bnIntValue()\n  {\n    if (this.s < 0)\n    {\n      if (this.t == 1) return this[0] - this.DV;\n      else if (this.t == 0) return -1;\n    }\n    else if (this.t == 1) return this[0];\n    else if (this.t == 0) return 0;\n    // assumes 16 < DB < 32\n    return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0];\n  }\n  // (public) return value as byte\n  function bnByteValue()\n  {\n    return (this.t == 0) ? this.s : (this[0] << 24) >> 24;\n  }\n  // (public) return value as short (assumes DB>=16)\n  function bnShortValue()\n  {\n    return (this.t == 0) ? this.s : (this[0] << 16) >> 16;\n  }\n  // (protected) return x s.t. r^x < DV\n  function bnpChunkSize(r)\n  {\n    return Math.floor(Math.LN2 * this.DB / Math.log(r));\n  }\n  // (public) 0 if this == 0, 1 if this > 0\n  function bnSigNum()\n  {\n    if (this.s < 0) return -1;\n    else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;\n    else return 1;\n  }\n  // (protected) convert to radix string\n  function bnpToRadix(b)\n  {\n    if (b == null) b = 10;\n    if (this.signum() == 0 || b < 2 || b > 36) return \"0\";\n    var cs = this.chunkSize(b);\n    var a = Math.pow(b, cs);\n    var d = nbv(a),\n      y = nbi(),\n      z = nbi(),\n      r = \"\";\n    this.divRemTo(d, y, z);\n    while (y.signum() > 0)\n    {\n      r = (a + z.intValue()).toString(b).substr(1) + r;\n      y.divRemTo(d, y, z);\n    }\n    return z.intValue().toString(b) + r;\n  }\n  // (protected) convert from radix string\n  function bnpFromRadix(s, b)\n  {\n    this.fromInt(0);\n    if (b == null) b = 10;\n    var cs = this.chunkSize(b);\n    var d = Math.pow(b, cs),\n      mi = false,\n      j = 0,\n      w = 0;\n    for (var i = 0; i < s.length; ++i)\n    {\n      var x = intAt(s, i);\n      if (x < 0)\n      {\n        if (s.charAt(i) == \"-\" && this.signum() == 0) mi = true;\n        continue;\n      }\n      w = b * w + x;\n      if (++j >= cs)\n      {\n        this.dMultiply(d);\n        this.dAddOffset(w, 0);\n        j = 0;\n        w = 0;\n      }\n    }\n    if (j > 0)\n    {\n      this.dMultiply(Math.pow(b, j));\n      this.dAddOffset(w, 0);\n    }\n    if (mi) BigInteger.ZERO.subTo(this, this);\n  }\n  // (protected) alternate constructor\n  function bnpFromNumber(a, b, c)\n  {\n    if (\"number\" == typeof b)\n    {\n      // new BigInteger(int,int,RNG)\n      if (a < 2) this.fromInt(1);\n      else\n      {\n        this.fromNumber(a, c);\n        if (!this.testBit(a - 1)) // force MSB set\n          this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n        if (this.isEven()) this.dAddOffset(1, 0); // force odd\n        while (!this.isProbablePrime(b))\n        {\n          this.dAddOffset(2, 0);\n          if (this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);\n        }\n      }\n    }\n    else\n    {\n      // new BigInteger(int,RNG)\n      var x = new Array(),\n        t = a & 7;\n      x.length = (a >> 3) + 1;\n      b.nextBytes(x);\n      if (t > 0) x[0] &= ((1 << t) - 1);\n      else x[0] = 0;\n      this.fromString(x, 256);\n    }\n  }\n  // (public) convert to bigendian byte array\n  function bnToByteArray()\n  {\n    var i = this.t,\n      r = new Array();\n    r[0] = this.s;\n    var p = this.DB - (i * this.DB) % 8,\n      d, k = 0;\n    if (i-- > 0)\n    {\n      if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p)\n        r[k++] = d | (this.s << (this.DB - p));\n      while (i >= 0)\n      {\n        if (p < 8)\n        {\n          d = (this[i] & ((1 << p) - 1)) << (8 - p);\n          d |= this[--i] >> (p += this.DB - 8);\n        }\n        else\n        {\n          d = (this[i] >> (p -= 8)) & 0xff;\n          if (p <= 0)\n          {\n            p += this.DB;\n            --i;\n          }\n        }\n        if ((d & 0x80) != 0) d |= -256;\n        if (k == 0 && (this.s & 0x80) != (d & 0x80))++k;\n        if (k > 0 || d != this.s) r[k++] = d;\n      }\n    }\n    return r;\n  }\n\n  function bnEquals(a)\n  {\n    return (this.compareTo(a) == 0);\n  }\n\n  function bnMin(a)\n  {\n    return (this.compareTo(a) < 0) ? this : a;\n  }\n\n  function bnMax(a)\n  {\n    return (this.compareTo(a) > 0) ? this : a;\n  }\n  // (protected) r = this op a (bitwise)\n  function bnpBitwiseTo(a, op, r)\n  {\n    var i, f, m = Math.min(a.t, this.t);\n    for (i = 0; i < m; ++i) r[i] = op(this[i], a[i]);\n    if (a.t < this.t)\n    {\n      f = a.s & this.DM;\n      for (i = m; i < this.t; ++i) r[i] = op(this[i], f);\n      r.t = this.t;\n    }\n    else\n    {\n      f = this.s & this.DM;\n      for (i = m; i < a.t; ++i) r[i] = op(f, a[i]);\n      r.t = a.t;\n    }\n    r.s = op(this.s, a.s);\n    r.clamp();\n  }\n  // (public) this & a\n  function op_and(x, y)\n  {\n    return x & y;\n  }\n\n  function bnAnd(a)\n  {\n    var r = nbi();\n    this.bitwiseTo(a, op_and, r);\n    return r;\n  }\n  // (public) this | a\n  function op_or(x, y)\n  {\n    return x | y;\n  }\n\n  function bnOr(a)\n  {\n    var r = nbi();\n    this.bitwiseTo(a, op_or, r);\n    return r;\n  }\n  // (public) this ^ a\n  function op_xor(x, y)\n  {\n    return x ^ y;\n  }\n\n  function bnXor(a)\n  {\n    var r = nbi();\n    this.bitwiseTo(a, op_xor, r);\n    return r;\n  }\n  // (public) this & ~a\n  function op_andnot(x, y)\n  {\n    return x & ~y;\n  }\n\n  function bnAndNot(a)\n  {\n    var r = nbi();\n    this.bitwiseTo(a, op_andnot, r);\n    return r;\n  }\n  // (public) ~this\n  function bnNot()\n  {\n    var r = nbi();\n    for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i];\n    r.t = this.t;\n    r.s = ~this.s;\n    return r;\n  }\n  // (public) this << n\n  function bnShiftLeft(n)\n  {\n    var r = nbi();\n    if (n < 0) this.rShiftTo(-n, r);\n    else this.lShiftTo(n, r);\n    return r;\n  }\n  // (public) this >> n\n  function bnShiftRight(n)\n  {\n    var r = nbi();\n    if (n < 0) this.lShiftTo(-n, r);\n    else this.rShiftTo(n, r);\n    return r;\n  }\n  // return index of lowest 1-bit in x, x < 2^31\n  function lbit(x)\n  {\n    if (x == 0) return -1;\n    var r = 0;\n    if ((x & 0xffff) == 0)\n    {\n      x >>= 16;\n      r += 16;\n    }\n    if ((x & 0xff) == 0)\n    {\n      x >>= 8;\n      r += 8;\n    }\n    if ((x & 0xf) == 0)\n    {\n      x >>= 4;\n      r += 4;\n    }\n    if ((x & 3) == 0)\n    {\n      x >>= 2;\n      r += 2;\n    }\n    if ((x & 1) == 0)++r;\n    return r;\n  }\n  // (public) returns index of lowest 1-bit (or -1 if none)\n  function bnGetLowestSetBit()\n  {\n    for (var i = 0; i < this.t; ++i)\n      if (this[i] != 0) return i * this.DB + lbit(this[i]);\n    if (this.s < 0) return this.t * this.DB;\n    return -1;\n  }\n  // return number of 1 bits in x\n  function cbit(x)\n  {\n    var r = 0;\n    while (x != 0)\n    {\n      x &= x - 1;\n      ++r;\n    }\n    return r;\n  }\n  // (public) return number of set bits\n  function bnBitCount()\n  {\n    var r = 0,\n      x = this.s & this.DM;\n    for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x);\n    return r;\n  }\n  // (public) true iff nth bit is set\n  function bnTestBit(n)\n  {\n    var j = Math.floor(n / this.DB);\n    if (j >= this.t) return (this.s != 0);\n    return ((this[j] & (1 << (n % this.DB))) != 0);\n  }\n  // (protected) this op (1<<n)\n  function bnpChangeBit(n, op)\n  {\n    var r = BigInteger.ONE.shiftLeft(n);\n    this.bitwiseTo(r, op, r);\n    return r;\n  }\n  // (public) this | (1<<n)\n  function bnSetBit(n)\n  {\n    return this.changeBit(n, op_or);\n  }\n  // (public) this & ~(1<<n)\n  function bnClearBit(n)\n  {\n    return this.changeBit(n, op_andnot);\n  }\n  // (public) this ^ (1<<n)\n  function bnFlipBit(n)\n  {\n    return this.changeBit(n, op_xor);\n  }\n  // (protected) r = this + a\n  function bnpAddTo(a, r)\n  {\n    var i = 0,\n      c = 0,\n      m = Math.min(a.t, this.t);\n    while (i < m)\n    {\n      c += this[i] + a[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n    if (a.t < this.t)\n    {\n      c += a.s;\n      while (i < this.t)\n      {\n        c += this[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n      }\n      c += this.s;\n    }\n    else\n    {\n      c += this.s;\n      while (i < a.t)\n      {\n        c += a[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n      }\n      c += a.s;\n    }\n    r.s = (c < 0) ? -1 : 0;\n    if (c > 0) r[i++] = c;\n    else if (c < -1) r[i++] = this.DV + c;\n    r.t = i;\n    r.clamp();\n  }\n  // (public) this + a\n  function bnAdd(a)\n  {\n    var r = nbi();\n    this.addTo(a, r);\n    return r;\n  }\n  // (public) this - a\n  function bnSubtract(a)\n  {\n    var r = nbi();\n    this.subTo(a, r);\n    return r;\n  }\n  // (public) this * a\n  function bnMultiply(a)\n  {\n    var r = nbi();\n    this.multiplyTo(a, r);\n    return r;\n  }\n  // (public) this^2\n  function bnSquare()\n  {\n    var r = nbi();\n    this.squareTo(r);\n    return r;\n  }\n  // (public) this / a\n  function bnDivide(a)\n  {\n    var r = nbi();\n    this.divRemTo(a, r, null);\n    return r;\n  }\n  // (public) this % a\n  function bnRemainder(a)\n  {\n    var r = nbi();\n    this.divRemTo(a, null, r);\n    return r;\n  }\n  // (public) [this/a,this%a]\n  function bnDivideAndRemainder(a)\n  {\n    var q = nbi(),\n      r = nbi();\n    this.divRemTo(a, q, r);\n    return new Array(q, r);\n  }\n  // (protected) this *= n, this >= 0, 1 < n < DV\n  function bnpDMultiply(n)\n  {\n    this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\n    ++this.t;\n    this.clamp();\n  }\n  // (protected) this += n << w words, this >= 0\n  function bnpDAddOffset(n, w)\n  {\n    if (n == 0) return;\n    while (this.t <= w) this[this.t++] = 0;\n    this[w] += n;\n    while (this[w] >= this.DV)\n    {\n      this[w] -= this.DV;\n      if (++w >= this.t) this[this.t++] = 0;\n      ++this[w];\n    }\n  }\n  // A \"null\" reducer\n  function NullExp()\n  {}\n\n  function nNop(x)\n  {\n    return x;\n  }\n\n  function nMulTo(x, y, r)\n  {\n    x.multiplyTo(y, r);\n  }\n\n  function nSqrTo(x, r)\n  {\n    x.squareTo(r);\n  }\n  NullExp.prototype.convert = nNop;\n  NullExp.prototype.revert = nNop;\n  NullExp.prototype.mulTo = nMulTo;\n  NullExp.prototype.sqrTo = nSqrTo;\n  // (public) this^e\n  function bnPow(e)\n  {\n    return this.exp(e, new NullExp());\n  }\n  // (protected) r = lower n words of \"this * a\", a.t <= n\n  // \"this\" should be the larger one if appropriate.\n  function bnpMultiplyLowerTo(a, n, r)\n  {\n    var i = Math.min(this.t + a.t, n);\n    r.s = 0; // assumes a,this >= 0\n    r.t = i;\n    while (i > 0) r[--i] = 0;\n    var j;\n    for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);\n    for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i);\n    r.clamp();\n  }\n  // (protected) r = \"this * a\" without lower n words, n > 0\n  // \"this\" should be the larger one if appropriate.\n  function bnpMultiplyUpperTo(a, n, r)\n  {\n    --n;\n    var i = r.t = this.t + a.t - n;\n    r.s = 0; // assumes a,this >= 0\n    while (--i >= 0) r[i] = 0;\n    for (i = Math.max(n - this.t, 0); i < a.t; ++i)\n      r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);\n    r.clamp();\n    r.drShiftTo(1, r);\n  }\n  // Barrett modular reduction\n  function Barrett(m)\n  {\n    // setup Barrett\n    this.r2 = nbi();\n    this.q3 = nbi();\n    BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\n    this.mu = this.r2.divide(m);\n    this.m = m;\n  }\n\n  function barrettConvert(x)\n  {\n    if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);\n    else if (x.compareTo(this.m) < 0) return x;\n    else\n    {\n      var r = nbi();\n      x.copyTo(r);\n      this.reduce(r);\n      return r;\n    }\n  }\n\n  function barrettRevert(x)\n  {\n    return x;\n  }\n  // x = x mod m (HAC 14.42)\n  function barrettReduce(x)\n  {\n    x.drShiftTo(this.m.t - 1, this.r2);\n    if (x.t > this.m.t + 1)\n    {\n      x.t = this.m.t + 1;\n      x.clamp();\n    }\n    this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\n    this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\n    while (x.compareTo(this.r2) < 0) x.dAddOffset(1, this.m.t + 1);\n    x.subTo(this.r2, x);\n    while (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n  }\n  // r = x^2 mod m; x != r\n  function barrettSqrTo(x, r)\n  {\n    x.squareTo(r);\n    this.reduce(r);\n  }\n  // r = x*y mod m; x,y != r\n  function barrettMulTo(x, y, r)\n  {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n  }\n  Barrett.prototype.convert = barrettConvert;\n  Barrett.prototype.revert = barrettRevert;\n  Barrett.prototype.reduce = barrettReduce;\n  Barrett.prototype.mulTo = barrettMulTo;\n  Barrett.prototype.sqrTo = barrettSqrTo;\n  // (public) this^e % m (HAC 14.85)\n  function bnModPow(e, m)\n  {\n    var i = e.bitLength(),\n      k, r = nbv(1),\n      z;\n    if (i <= 0) return r;\n    else if (i < 18) k = 1;\n    else if (i < 48) k = 3;\n    else if (i < 144) k = 4;\n    else if (i < 768) k = 5;\n    else k = 6;\n    if (i < 8)\n      z = new Classic(m);\n    else if (m.isEven())\n      z = new Barrett(m);\n    else\n      z = new Montgomery(m);\n    // precomputation\n    var g = new Array(),\n      n = 3,\n      k1 = k - 1,\n      km = (1 << k) - 1;\n    g[1] = z.convert(this);\n    if (k > 1)\n    {\n      var g2 = nbi();\n      z.sqrTo(g[1], g2);\n      while (n <= km)\n      {\n        g[n] = nbi();\n        z.mulTo(g2, g[n - 2], g[n]);\n        n += 2;\n      }\n    }\n    var j = e.t - 1,\n      w, is1 = true,\n      r2 = nbi(),\n      t;\n    i = nbits(e[j]) - 1;\n    while (j >= 0)\n    {\n      if (i >= k1) w = (e[j] >> (i - k1)) & km;\n      else\n      {\n        w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);\n        if (j > 0) w |= e[j - 1] >> (this.DB + i - k1);\n      }\n      n = k;\n      while ((w & 1) == 0)\n      {\n        w >>= 1;\n        --n;\n      }\n      if ((i -= n) < 0)\n      {\n        i += this.DB;\n        --j;\n      }\n      if (is1)\n      { // ret == 1, don't bother squaring or multiplying it\n        g[w].copyTo(r);\n        is1 = false;\n      }\n      else\n      {\n        while (n > 1)\n        {\n          z.sqrTo(r, r2);\n          z.sqrTo(r2, r);\n          n -= 2;\n        }\n        if (n > 0) z.sqrTo(r, r2);\n        else\n        {\n          t = r;\n          r = r2;\n          r2 = t;\n        }\n        z.mulTo(r2, g[w], r);\n      }\n      while (j >= 0 && (e[j] & (1 << i)) == 0)\n      {\n        z.sqrTo(r, r2);\n        t = r;\n        r = r2;\n        r2 = t;\n        if (--i < 0)\n        {\n          i = this.DB - 1;\n          --j;\n        }\n      }\n    }\n    return z.revert(r);\n  }\n  // (public) gcd(this,a) (HAC 14.54)\n  function bnGCD(a)\n  {\n    var x = (this.s < 0) ? this.negate() : this.clone();\n    var y = (a.s < 0) ? a.negate() : a.clone();\n    if (x.compareTo(y) < 0)\n    {\n      var t = x;\n      x = y;\n      y = t;\n    }\n    var i = x.getLowestSetBit(),\n      g = y.getLowestSetBit();\n    if (g < 0) return x;\n    if (i < g) g = i;\n    if (g > 0)\n    {\n      x.rShiftTo(g, x);\n      y.rShiftTo(g, y);\n    }\n    while (x.signum() > 0)\n    {\n      if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);\n      if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);\n      if (x.compareTo(y) >= 0)\n      {\n        x.subTo(y, x);\n        x.rShiftTo(1, x);\n      }\n      else\n      {\n        y.subTo(x, y);\n        y.rShiftTo(1, y);\n      }\n    }\n    if (g > 0) y.lShiftTo(g, y);\n    return y;\n  }\n  // (protected) this % n, n < 2^26\n  function bnpModInt(n)\n  {\n    if (n <= 0) return 0;\n    var d = this.DV % n,\n      r = (this.s < 0) ? n - 1 : 0;\n    if (this.t > 0)\n      if (d == 0) r = this[0] % n;\n      else\n        for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n;\n    return r;\n  }\n  // (public) 1/this % m (HAC 14.61)\n  function bnModInverse(m)\n  {\n    var ac = m.isEven();\n    if ((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;\n    var u = m.clone(),\n      v = this.clone();\n    var a = nbv(1),\n      b = nbv(0),\n      c = nbv(0),\n      d = nbv(1);\n    while (u.signum() != 0)\n    {\n      while (u.isEven())\n      {\n        u.rShiftTo(1, u);\n        if (ac)\n        {\n          if (!a.isEven() || !b.isEven())\n          {\n            a.addTo(this, a);\n            b.subTo(m, b);\n          }\n          a.rShiftTo(1, a);\n        }\n        else if (!b.isEven()) b.subTo(m, b);\n        b.rShiftTo(1, b);\n      }\n      while (v.isEven())\n      {\n        v.rShiftTo(1, v);\n        if (ac)\n        {\n          if (!c.isEven() || !d.isEven())\n          {\n            c.addTo(this, c);\n            d.subTo(m, d);\n          }\n          c.rShiftTo(1, c);\n        }\n        else if (!d.isEven()) d.subTo(m, d);\n        d.rShiftTo(1, d);\n      }\n      if (u.compareTo(v) >= 0)\n      {\n        u.subTo(v, u);\n        if (ac) a.subTo(c, a);\n        b.subTo(d, b);\n      }\n      else\n      {\n        v.subTo(u, v);\n        if (ac) c.subTo(a, c);\n        d.subTo(b, d);\n      }\n    }\n    if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n    if (d.compareTo(m) >= 0) return d.subtract(m);\n    if (d.signum() < 0) d.addTo(m, d);\n    else return d;\n    if (d.signum() < 0) return d.add(m);\n    else return d;\n  }\n  var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];\n  // (public) test primality with certainty >= 1-.5^t\n  function bnIsProbablePrime(t)\n  {\n    var i, x = this.abs();\n    if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1])\n    {\n      for (i = 0; i < lowprimes.length; ++i)\n        if (x[0] == lowprimes[i]) return true;\n      return false;\n    }\n    if (x.isEven()) return false;\n    i = 1;\n    while (i < lowprimes.length)\n    {\n      var m = lowprimes[i],\n        j = i + 1;\n      while (j < lowprimes.length && m < lplim) m *= lowprimes[j++];\n      m = x.modInt(m);\n      while (i < j)\n        if (m % lowprimes[i++] == 0) return false;\n    }\n    return x.millerRabin(t);\n  }\n  // (protected) true if probably prime (HAC 4.24, Miller-Rabin)\n  function bnpMillerRabin(t)\n  {\n    var n1 = this.subtract(BigInteger.ONE);\n    var k = n1.getLowestSetBit();\n    if (k <= 0) return false;\n    var r = n1.shiftRight(k);\n    t = (t + 1) >> 1;\n    if (t > lowprimes.length) t = lowprimes.length;\n    var a = nbi();\n    for (var i = 0; i < t; ++i)\n    {\n      //Pick bases at random, instead of starting at 2\n      a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);\n      var y = a.modPow(r, this);\n      if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0)\n      {\n        var j = 1;\n        while (j++ < k && y.compareTo(n1) != 0)\n        {\n          y = y.modPowInt(2, this);\n          if (y.compareTo(BigInteger.ONE) == 0) return false;\n        }\n        if (y.compareTo(n1) != 0) return false;\n      }\n    }\n    return true;\n  }\n  // protected\n  BigInteger.prototype.chunkSize = bnpChunkSize;\n  BigInteger.prototype.toRadix = bnpToRadix;\n  BigInteger.prototype.fromRadix = bnpFromRadix;\n  BigInteger.prototype.fromNumber = bnpFromNumber;\n  BigInteger.prototype.bitwiseTo = bnpBitwiseTo;\n  BigInteger.prototype.changeBit = bnpChangeBit;\n  BigInteger.prototype.addTo = bnpAddTo;\n  BigInteger.prototype.dMultiply = bnpDMultiply;\n  BigInteger.prototype.dAddOffset = bnpDAddOffset;\n  BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\n  BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\n  BigInteger.prototype.modInt = bnpModInt;\n  BigInteger.prototype.millerRabin = bnpMillerRabin;\n  // public\n  BigInteger.prototype.clone = bnClone;\n  BigInteger.prototype.intValue = bnIntValue;\n  BigInteger.prototype.byteValue = bnByteValue;\n  BigInteger.prototype.shortValue = bnShortValue;\n  BigInteger.prototype.signum = bnSigNum;\n  BigInteger.prototype.toByteArray = bnToByteArray;\n  BigInteger.prototype.equals = bnEquals;\n  BigInteger.prototype.min = bnMin;\n  BigInteger.prototype.max = bnMax;\n  BigInteger.prototype.and = bnAnd;\n  BigInteger.prototype.or = bnOr;\n  BigInteger.prototype.xor = bnXor;\n  BigInteger.prototype.andNot = bnAndNot;\n  BigInteger.prototype.not = bnNot;\n  BigInteger.prototype.shiftLeft = bnShiftLeft;\n  BigInteger.prototype.shiftRight = bnShiftRight;\n  BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\n  BigInteger.prototype.bitCount = bnBitCount;\n  BigInteger.prototype.testBit = bnTestBit;\n  BigInteger.prototype.setBit = bnSetBit;\n  BigInteger.prototype.clearBit = bnClearBit;\n  BigInteger.prototype.flipBit = bnFlipBit;\n  BigInteger.prototype.add = bnAdd;\n  BigInteger.prototype.subtract = bnSubtract;\n  BigInteger.prototype.multiply = bnMultiply;\n  BigInteger.prototype.divide = bnDivide;\n  BigInteger.prototype.remainder = bnRemainder;\n  BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\n  BigInteger.prototype.modPow = bnModPow;\n  BigInteger.prototype.modInverse = bnModInverse;\n  BigInteger.prototype.pow = bnPow;\n  BigInteger.prototype.gcd = bnGCD;\n  BigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n  // JSBN-specific extension\n  BigInteger.prototype.square = bnSquare;\n  var Int128 = BigInteger;\n  // BigInteger interfaces not implemented in jsbn:\n  // BigInteger(int signum, byte[] magnitude)\n  // double doubleValue()\n  // float floatValue()\n  // int hashCode()\n  // long longValue()\n  // static BigInteger valueOf(long val)\n  // Helper functions to make BigInteger functions callable with two parameters\n  // as in original C# Clipper\n  Int128.prototype.IsNegative = function ()\n  {\n    if (this.compareTo(Int128.ZERO) == -1) return true;\n    else return false;\n  };\n  Int128.op_Equality = function (val1, val2)\n  {\n    if (val1.compareTo(val2) == 0) return true;\n    else return false;\n  };\n  Int128.op_Inequality = function (val1, val2)\n  {\n    if (val1.compareTo(val2) != 0) return true;\n    else return false;\n  };\n  Int128.op_GreaterThan = function (val1, val2)\n  {\n    if (val1.compareTo(val2) > 0) return true;\n    else return false;\n  };\n  Int128.op_LessThan = function (val1, val2)\n  {\n    if (val1.compareTo(val2) < 0) return true;\n    else return false;\n  };\n  Int128.op_Addition = function (lhs, rhs)\n  {\n    return new Int128(lhs).add(new Int128(rhs));\n  };\n  Int128.op_Subtraction = function (lhs, rhs)\n  {\n    return new Int128(lhs).subtract(new Int128(rhs));\n  };\n  Int128.Int128Mul = function (lhs, rhs)\n  {\n    return new Int128(lhs).multiply(new Int128(rhs));\n  };\n  Int128.op_Division = function (lhs, rhs)\n  {\n    return lhs.divide(rhs);\n  };\n  Int128.prototype.ToDouble = function ()\n  {\n    return parseFloat(this.toString()); // This could be something faster\n  };\n  // end of Int128 section\n  /*\n  // Uncomment the following two lines if you want to use Int128 outside ClipperLib\n  if (typeof(document) !== \"undefined\") window.Int128 = Int128;\n  else self.Int128 = Int128;\n  */\n\n\n  // ---------------------------------------------\n  // Here starts the actual Clipper library:\n  // Helper function to support Inheritance in Javascript\n\tvar Inherit = function (ce, ce2)\n\t{\n\t\tvar p;\n\t\tif (typeof (Object.getOwnPropertyNames) == 'undefined')\n\t\t{\n\t\t\tfor (p in ce2.prototype)\n\t\t\t\tif (typeof (ce.prototype[p]) == 'undefined' || ce.prototype[p] == Object.prototype[p]) ce.prototype[p] = ce2.prototype[p];\n\t\t\tfor (p in ce2)\n\t\t\t\tif (typeof (ce[p]) == 'undefined') ce[p] = ce2[p];\n\t\t\tce.$baseCtor = ce2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar props = Object.getOwnPropertyNames(ce2.prototype);\n\t\t\tfor (var i = 0; i < props.length; i++)\n\t\t\t\tif (typeof (Object.getOwnPropertyDescriptor(ce.prototype, props[i])) == 'undefined') Object.defineProperty(ce.prototype, props[i], Object.getOwnPropertyDescriptor(ce2.prototype, props[i]));\n\t\t\tfor (p in ce2)\n\t\t\t\tif (typeof (ce[p]) == 'undefined') ce[p] = ce2[p];\n\t\t\tce.$baseCtor = ce2;\n\t\t}\n\t};\n  ClipperLib.Path = function ()\n  {\n    return [];\n  };\n  ClipperLib.Paths = function ()\n  {\n    return []; // Was previously [[]], but caused problems when pushed\n  };\n  // Preserves the calling way of original C# Clipper\n  // Is essential due to compatibility, because DoublePoint is public class in original C# version\n  ClipperLib.DoublePoint = function ()\n  {\n    var a = arguments;\n    this.X = 0;\n    this.Y = 0;\n    // public DoublePoint(DoublePoint dp)\n    // public DoublePoint(IntPoint ip)\n    if (a.length == 1)\n    {\n      this.X = a[0].X;\n      this.Y = a[0].Y;\n    }\n    else if (a.length == 2)\n    {\n      this.X = a[0];\n      this.Y = a[1];\n    }\n  }; // This is internal faster function when called without arguments\n  ClipperLib.DoublePoint0 = function ()\n  {\n    this.X = 0;\n    this.Y = 0;\n  };\n  // This is internal faster function when called with 1 argument (dp or ip)\n  ClipperLib.DoublePoint1 = function (dp)\n  {\n    this.X = dp.X;\n    this.Y = dp.Y;\n  };\n  // This is internal faster function when called with 2 arguments (x and y)\n  ClipperLib.DoublePoint2 = function (x, y)\n  {\n    this.X = x;\n    this.Y = y;\n  };\n  // PolyTree & PolyNode start\n  // -------------------------------\n  ClipperLib.PolyNode = function ()\n  {\n    this.m_Parent = null;\n    this.m_polygon = new ClipperLib.Path();\n    this.m_Index = 0;\n    this.m_jointype = 0;\n    this.m_endtype = 0;\n    this.m_Childs = [];\n    this.IsOpen = false;\n  };\n  ClipperLib.PolyNode.prototype.IsHoleNode = function ()\n  {\n    var result = true;\n    var node = this.m_Parent;\n    while (node !== null)\n    {\n      result = !result;\n      node = node.m_Parent;\n    }\n    return result;\n  };\n  ClipperLib.PolyNode.prototype.ChildCount = function ()\n  {\n    return this.m_Childs.length;\n  };\n  ClipperLib.PolyNode.prototype.Contour = function ()\n  {\n    return this.m_polygon;\n  };\n  ClipperLib.PolyNode.prototype.AddChild = function (Child)\n  {\n    var cnt = this.m_Childs.length;\n    this.m_Childs.push(Child);\n    Child.m_Parent = this;\n    Child.m_Index = cnt;\n  };\n  ClipperLib.PolyNode.prototype.GetNext = function ()\n  {\n    if (this.m_Childs.length > 0)\n      return this.m_Childs[0];\n    else\n      return this.GetNextSiblingUp();\n  };\n  ClipperLib.PolyNode.prototype.GetNextSiblingUp = function ()\n  {\n    if (this.m_Parent === null)\n      return null;\n    else if (this.m_Index == this.m_Parent.m_Childs.length - 1)\n      return this.m_Parent.GetNextSiblingUp();\n    else\n      return this.m_Parent.m_Childs[this.m_Index + 1];\n  };\n  ClipperLib.PolyNode.prototype.Childs = function ()\n  {\n    return this.m_Childs;\n  };\n  ClipperLib.PolyNode.prototype.Parent = function ()\n  {\n    return this.m_Parent;\n  };\n  ClipperLib.PolyNode.prototype.IsHole = function ()\n  {\n    return this.IsHoleNode();\n  };\n  // PolyTree : PolyNode\n  ClipperLib.PolyTree = function ()\n  {\n    this.m_AllPolys = [];\n    ClipperLib.PolyNode.call(this);\n  };\n  ClipperLib.PolyTree.prototype.Clear = function ()\n  {\n    for (var i = 0, ilen = this.m_AllPolys.length; i < ilen; i++)\n      this.m_AllPolys[i] = null;\n    this.m_AllPolys.length = 0;\n    this.m_Childs.length = 0;\n  };\n  ClipperLib.PolyTree.prototype.GetFirst = function ()\n  {\n    if (this.m_Childs.length > 0)\n      return this.m_Childs[0];\n    else\n      return null;\n  };\n  ClipperLib.PolyTree.prototype.Total = function ()\n  {\n\t\tvar result = this.m_AllPolys.length;\n\t\t//with negative offsets, ignore the hidden outer polygon ...\n\t\tif (result > 0 && this.m_Childs[0] != this.m_AllPolys[0]) result--;\n\t\treturn result;\n  };\n  Inherit(ClipperLib.PolyTree, ClipperLib.PolyNode);\n  // -------------------------------\n  // PolyTree & PolyNode end\n  ClipperLib.Math_Abs_Int64 = ClipperLib.Math_Abs_Int32 = ClipperLib.Math_Abs_Double = function (a)\n  {\n    return Math.abs(a);\n  };\n  ClipperLib.Math_Max_Int32_Int32 = function (a, b)\n  {\n    return Math.max(a, b);\n  };\n  /*\n  -----------------------------------\n  cast_32 speedtest: http://jsperf.com/truncate-float-to-integer/2\n  -----------------------------------\n  */\n  if (browser.msie || browser.opera || browser.safari) ClipperLib.Cast_Int32 = function (a)\n  {\n    return a | 0;\n  };\n  else ClipperLib.Cast_Int32 = function (a)\n  { // eg. browser.chrome || browser.chromium || browser.firefox\n    return~~ a;\n  };\n  /*\n  --------------------------\n  cast_64 speedtests: http://jsperf.com/truncate-float-to-integer\n  Chrome: bitwise_not_floor\n  Firefox17: toInteger (typeof test)\n  IE9: bitwise_or_floor\n  IE7 and IE8: to_parseint\n  Chromium: to_floor_or_ceil\n  Firefox3: to_floor_or_ceil\n  Firefox15: to_floor_or_ceil\n  Opera: to_floor_or_ceil\n  Safari: to_floor_or_ceil\n  --------------------------\n  */\n  if (browser.chrome) ClipperLib.Cast_Int64 = function (a)\n  {\n    if (a < -2147483648 || a > 2147483647)\n      return a < 0 ? Math.ceil(a) : Math.floor(a);\n    else return~~ a;\n  };\n  else if (browser.firefox && typeof (Number.toInteger) == \"function\") ClipperLib.Cast_Int64 = function (a)\n  {\n    return Number.toInteger(a);\n  };\n  else if (browser.msie7 || browser.msie8) ClipperLib.Cast_Int64 = function (a)\n  {\n    return parseInt(a, 10);\n  };\n  else if (browser.msie) ClipperLib.Cast_Int64 = function (a)\n  {\n    if (a < -2147483648 || a > 2147483647)\n      return a < 0 ? Math.ceil(a) : Math.floor(a);\n    return a | 0;\n  };\n  // eg. browser.chromium || browser.firefox || browser.opera || browser.safari\n  else ClipperLib.Cast_Int64 = function (a)\n  {\n    return a < 0 ? Math.ceil(a) : Math.floor(a);\n  };\n  ClipperLib.Clear = function (a)\n  {\n    a.length = 0;\n  };\n  //ClipperLib.MaxSteps = 64; // How many steps at maximum in arc in BuildArc() function\n  ClipperLib.PI = 3.141592653589793;\n  ClipperLib.PI2 = 2 * 3.141592653589793;\n  ClipperLib.IntPoint = function ()\n  {\n    var a = arguments,\n      alen = a.length;\n    this.X = 0;\n    this.Y = 0;\n    if (use_xyz)\n    {\n      this.Z = 0;\n      if (alen == 3) // public IntPoint(cInt x, cInt y, cInt z = 0)\n      {\n        this.X = a[0];\n        this.Y = a[1];\n        this.Z = a[2];\n      }\n      else if (alen == 2) // public IntPoint(cInt x, cInt y)\n      {\n        this.X = a[0];\n        this.Y = a[1];\n        this.Z = 0;\n      }\n      else if (alen == 1)\n      {\n        if (a[0] instanceof ClipperLib.DoublePoint) // public IntPoint(DoublePoint dp)\n        {\n          var dp = a[0];\n          this.X = ClipperLib.Clipper.Round(dp.X);\n          this.Y = ClipperLib.Clipper.Round(dp.Y);\n          this.Z = 0;\n        }\n        else // public IntPoint(IntPoint pt)\n        {\n          var pt = a[0];\n          if (typeof (pt.Z) == \"undefined\") pt.Z = 0;\n          this.X = pt.X;\n          this.Y = pt.Y;\n          this.Z = pt.Z;\n        }\n      }\n      else // public IntPoint()\n      {\n        this.X = 0;\n        this.Y = 0;\n        this.Z = 0;\n      }\n    }\n    else // if (!use_xyz)\n    {\n      if (alen == 2) // public IntPoint(cInt X, cInt Y)\n      {\n        this.X = a[0];\n        this.Y = a[1];\n      }\n      else if (alen == 1)\n      {\n        if (a[0] instanceof ClipperLib.DoublePoint) // public IntPoint(DoublePoint dp)\n        {\n          var dp = a[0];\n          this.X = ClipperLib.Clipper.Round(dp.X);\n          this.Y = ClipperLib.Clipper.Round(dp.Y);\n        }\n        else // public IntPoint(IntPoint pt)\n        {\n          var pt = a[0];\n          this.X = pt.X;\n          this.Y = pt.Y;\n        }\n      }\n      else // public IntPoint(IntPoint pt)\n      {\n        this.X = 0;\n        this.Y = 0;\n      }\n    }\n  };\n  ClipperLib.IntPoint.op_Equality = function (a, b)\n  {\n    //return a == b;\n    return a.X == b.X && a.Y == b.Y;\n  };\n  ClipperLib.IntPoint.op_Inequality = function (a, b)\n  {\n    //return a != b;\n    return a.X != b.X || a.Y != b.Y;\n  };\n  /*\n  ClipperLib.IntPoint.prototype.Equals = function (obj)\n  {\n    if (obj === null)\n        return false;\n    if (obj instanceof ClipperLib.IntPoint)\n    {\n        var a = Cast(obj, ClipperLib.IntPoint);\n        return (this.X == a.X) && (this.Y == a.Y);\n    }\n    else\n        return false;\n  };\n*/\n  if (use_xyz)\n  {\n    ClipperLib.IntPoint0 = function ()\n    {\n      this.X = 0;\n      this.Y = 0;\n      this.Z = 0;\n    };\n    ClipperLib.IntPoint1 = function (pt)\n    {\n      this.X = pt.X;\n      this.Y = pt.Y;\n      this.Z = pt.Z;\n    };\n    ClipperLib.IntPoint1dp = function (dp)\n    {\n      this.X = ClipperLib.Clipper.Round(dp.X);\n      this.Y = ClipperLib.Clipper.Round(dp.Y);\n      this.Z = 0;\n    };\n    ClipperLib.IntPoint2 = function (x, y)\n    {\n      this.X = x;\n      this.Y = y;\n      this.Z = 0;\n    };\n    ClipperLib.IntPoint3 = function (x, y, z)\n    {\n      this.X = x;\n      this.Y = y;\n      this.Z = z;\n    };\n  }\n  else // if (!use_xyz)\n  {\n    ClipperLib.IntPoint0 = function ()\n    {\n      this.X = 0;\n      this.Y = 0;\n    };\n    ClipperLib.IntPoint1 = function (pt)\n    {\n      this.X = pt.X;\n      this.Y = pt.Y;\n    };\n    ClipperLib.IntPoint1dp = function (dp)\n    {\n      this.X = ClipperLib.Clipper.Round(dp.X);\n      this.Y = ClipperLib.Clipper.Round(dp.Y);\n    };\n    ClipperLib.IntPoint2 = function (x, y)\n    {\n      this.X = x;\n      this.Y = y;\n    };\n  }\n  ClipperLib.IntRect = function ()\n  {\n    var a = arguments,\n      alen = a.length;\n    if (alen == 4) // function (l, t, r, b)\n    {\n      this.left = a[0];\n      this.top = a[1];\n      this.right = a[2];\n      this.bottom = a[3];\n    }\n    else if (alen == 1) // function (ir)\n    {\n      this.left = ir.left;\n      this.top = ir.top;\n      this.right = ir.right;\n      this.bottom = ir.bottom;\n    }\n    else // function ()\n    {\n      this.left = 0;\n      this.top = 0;\n      this.right = 0;\n      this.bottom = 0;\n    }\n  };\n  ClipperLib.IntRect0 = function ()\n  {\n    this.left = 0;\n    this.top = 0;\n    this.right = 0;\n    this.bottom = 0;\n  };\n  ClipperLib.IntRect1 = function (ir)\n  {\n    this.left = ir.left;\n    this.top = ir.top;\n    this.right = ir.right;\n    this.bottom = ir.bottom;\n  };\n  ClipperLib.IntRect4 = function (l, t, r, b)\n  {\n    this.left = l;\n    this.top = t;\n    this.right = r;\n    this.bottom = b;\n  };\n  ClipperLib.ClipType = {\n    ctIntersection: 0,\n    ctUnion: 1,\n    ctDifference: 2,\n    ctXor: 3\n  };\n  ClipperLib.PolyType = {\n    ptSubject: 0,\n    ptClip: 1\n  };\n  ClipperLib.PolyFillType = {\n    pftEvenOdd: 0,\n    pftNonZero: 1,\n    pftPositive: 2,\n    pftNegative: 3\n  };\n  ClipperLib.JoinType = {\n    jtSquare: 0,\n    jtRound: 1,\n    jtMiter: 2\n  };\n  ClipperLib.EndType = {\n    etOpenSquare: 0,\n    etOpenRound: 1,\n    etOpenButt: 2,\n    etClosedLine: 3,\n    etClosedPolygon: 4\n  };\n  ClipperLib.EdgeSide = {\n    esLeft: 0,\n    esRight: 1\n  };\n  ClipperLib.Direction = {\n    dRightToLeft: 0,\n    dLeftToRight: 1\n  };\n  ClipperLib.TEdge = function ()\n  {\n    this.Bot = new ClipperLib.IntPoint();\n    this.Curr = new ClipperLib.IntPoint();\n    this.Top = new ClipperLib.IntPoint();\n    this.Delta = new ClipperLib.IntPoint();\n    this.Dx = 0;\n    this.PolyTyp = ClipperLib.PolyType.ptSubject;\n    this.Side = ClipperLib.EdgeSide.esLeft;\n    this.WindDelta = 0;\n    this.WindCnt = 0;\n    this.WindCnt2 = 0;\n    this.OutIdx = 0;\n    this.Next = null;\n    this.Prev = null;\n    this.NextInLML = null;\n    this.NextInAEL = null;\n    this.PrevInAEL = null;\n    this.NextInSEL = null;\n    this.PrevInSEL = null;\n  };\n  ClipperLib.IntersectNode = function ()\n  {\n    this.Edge1 = null;\n    this.Edge2 = null;\n    this.Pt = new ClipperLib.IntPoint();\n  };\n  ClipperLib.MyIntersectNodeSort = function () {};\n  ClipperLib.MyIntersectNodeSort.Compare = function (node1, node2)\n  {\n    var i = node2.Pt.Y - node1.Pt.Y;\n    if (i > 0) return 1;\n    else if (i < 0) return -1;\n    else return 0;\n  };\n\n  ClipperLib.LocalMinima = function ()\n  {\n    this.Y = 0;\n    this.LeftBound = null;\n    this.RightBound = null;\n    this.Next = null;\n  };\n  ClipperLib.Scanbeam = function ()\n  {\n    this.Y = 0;\n    this.Next = null;\n  };\n  ClipperLib.OutRec = function ()\n  {\n    this.Idx = 0;\n    this.IsHole = false;\n    this.IsOpen = false;\n    this.FirstLeft = null;\n    this.Pts = null;\n    this.BottomPt = null;\n    this.PolyNode = null;\n  };\n  ClipperLib.OutPt = function ()\n  {\n    this.Idx = 0;\n    this.Pt = new ClipperLib.IntPoint();\n    this.Next = null;\n    this.Prev = null;\n  };\n  ClipperLib.Join = function ()\n  {\n    this.OutPt1 = null;\n    this.OutPt2 = null;\n    this.OffPt = new ClipperLib.IntPoint();\n  };\n  ClipperLib.ClipperBase = function ()\n  {\n    this.m_MinimaList = null;\n    this.m_CurrentLM = null;\n    this.m_edges = new Array();\n    this.m_UseFullRange = false;\n    this.m_HasOpenPaths = false;\n    this.PreserveCollinear = false;\n    this.m_MinimaList = null;\n    this.m_CurrentLM = null;\n    this.m_UseFullRange = false;\n    this.m_HasOpenPaths = false;\n  };\n  // Ranges are in original C# too high for Javascript (in current state 2013 september):\n  // protected const double horizontal = -3.4E+38;\n  // internal const cInt loRange = 0x3FFFFFFF; // = 1073741823 = sqrt(2^63 -1)/2\n  // internal const cInt hiRange = 0x3FFFFFFFFFFFFFFFL; // = 4611686018427387903 = sqrt(2^127 -1)/2\n  // So had to adjust them to more suitable for Javascript.\n  // If JS some day supports truly 64-bit integers, then these ranges can be as in C#\n  // and biginteger library can be more simpler (as then 128bit can be represented as two 64bit numbers)\n  ClipperLib.ClipperBase.horizontal = -9007199254740992; //-2^53\n  ClipperLib.ClipperBase.Skip = -2;\n  ClipperLib.ClipperBase.Unassigned = -1;\n  ClipperLib.ClipperBase.tolerance = 1E-20;\n  if (use_int32)\n  {\n    ClipperLib.ClipperBase.loRange = 0x7FFF;\n    ClipperLib.ClipperBase.hiRange = 0x7FFF;\n  }\n  else\n  {\n    ClipperLib.ClipperBase.loRange = 47453132; // sqrt(2^53 -1)/2\n    ClipperLib.ClipperBase.hiRange = 4503599627370495; // sqrt(2^106 -1)/2\n  }\n\n  ClipperLib.ClipperBase.near_zero = function (val)\n  {\n    return (val > -ClipperLib.ClipperBase.tolerance) && (val < ClipperLib.ClipperBase.tolerance);\n  };\n  ClipperLib.ClipperBase.IsHorizontal = function (e)\n  {\n    return e.Delta.Y === 0;\n  };\n  ClipperLib.ClipperBase.prototype.PointIsVertex = function (pt, pp)\n  {\n    var pp2 = pp;\n    do {\n      if (ClipperLib.IntPoint.op_Equality(pp2.Pt, pt))\n        return true;\n      pp2 = pp2.Next;\n    }\n    while (pp2 != pp)\n    return false;\n  };\n  ClipperLib.ClipperBase.prototype.PointOnLineSegment = function (pt, linePt1, linePt2, UseFullRange)\n  {\n    if (UseFullRange)\n      return ((pt.X == linePt1.X) && (pt.Y == linePt1.Y)) ||\n        ((pt.X == linePt2.X) && (pt.Y == linePt2.Y)) ||\n        (((pt.X > linePt1.X) == (pt.X < linePt2.X)) &&\n        ((pt.Y > linePt1.Y) == (pt.Y < linePt2.Y)) &&\n        (Int128.op_Equality(Int128.Int128Mul((pt.X - linePt1.X), (linePt2.Y - linePt1.Y)),\n          Int128.Int128Mul((linePt2.X - linePt1.X), (pt.Y - linePt1.Y)))));\n    else\n      return ((pt.X == linePt1.X) && (pt.Y == linePt1.Y)) || ((pt.X == linePt2.X) && (pt.Y == linePt2.Y)) || (((pt.X > linePt1.X) == (pt.X < linePt2.X)) && ((pt.Y > linePt1.Y) == (pt.Y < linePt2.Y)) && ((pt.X - linePt1.X) * (linePt2.Y - linePt1.Y) == (linePt2.X - linePt1.X) * (pt.Y - linePt1.Y)));\n  };\n  ClipperLib.ClipperBase.prototype.PointOnPolygon = function (pt, pp, UseFullRange)\n  {\n    var pp2 = pp;\n    while (true)\n    {\n      if (this.PointOnLineSegment(pt, pp2.Pt, pp2.Next.Pt, UseFullRange))\n        return true;\n      pp2 = pp2.Next;\n      if (pp2 == pp)\n        break;\n    }\n    return false;\n  };\n  ClipperLib.ClipperBase.prototype.SlopesEqual = ClipperLib.ClipperBase.SlopesEqual = function ()\n  {\n    var a = arguments,\n      alen = a.length;\n    var e1, e2, pt1, pt2, pt3, pt4, UseFullRange;\n    if (alen == 3) // function (e1, e2, UseFullRange)\n    {\n      e1 = a[0];\n      e2 = a[1];\n      UseFullRange = a[2];\n      if (UseFullRange)\n        return Int128.op_Equality(Int128.Int128Mul(e1.Delta.Y, e2.Delta.X), Int128.Int128Mul(e1.Delta.X, e2.Delta.Y));\n      else\n        return ClipperLib.Cast_Int64((e1.Delta.Y) * (e2.Delta.X)) == ClipperLib.Cast_Int64((e1.Delta.X) * (e2.Delta.Y));\n    }\n    else if (alen == 4) // function (pt1, pt2, pt3, UseFullRange)\n    {\n      pt1 = a[0];\n      pt2 = a[1];\n      pt3 = a[2];\n      UseFullRange = a[3];\n      if (UseFullRange)\n        return Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt2.X - pt3.X), Int128.Int128Mul(pt1.X - pt2.X, pt2.Y - pt3.Y));\n      else\n        return ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt2.X - pt3.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt2.Y - pt3.Y)) === 0;\n    }\n    else // function (pt1, pt2, pt3, pt4, UseFullRange)\n    {\n      pt1 = a[0];\n      pt2 = a[1];\n      pt3 = a[2];\n      pt4 = a[3];\n      UseFullRange = a[4];\n      if (UseFullRange)\n        return Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt3.X - pt4.X), Int128.Int128Mul(pt1.X - pt2.X, pt3.Y - pt4.Y));\n      else\n        return ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt3.X - pt4.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt3.Y - pt4.Y)) === 0;\n    }\n  };\n  ClipperLib.ClipperBase.SlopesEqual3 = function (e1, e2, UseFullRange)\n  {\n    if (UseFullRange)\n      return Int128.op_Equality(Int128.Int128Mul(e1.Delta.Y, e2.Delta.X), Int128.Int128Mul(e1.Delta.X, e2.Delta.Y));\n    else\n      return ClipperLib.Cast_Int64((e1.Delta.Y) * (e2.Delta.X)) == ClipperLib.Cast_Int64((e1.Delta.X) * (e2.Delta.Y));\n  };\n  ClipperLib.ClipperBase.SlopesEqual4 = function (pt1, pt2, pt3, UseFullRange)\n  {\n    if (UseFullRange)\n      return Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt2.X - pt3.X), Int128.Int128Mul(pt1.X - pt2.X, pt2.Y - pt3.Y));\n    else\n      return ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt2.X - pt3.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt2.Y - pt3.Y)) === 0;\n  };\n  ClipperLib.ClipperBase.SlopesEqual5 = function (pt1, pt2, pt3, pt4, UseFullRange)\n  {\n    if (UseFullRange)\n      return Int128.op_Equality(Int128.Int128Mul(pt1.Y - pt2.Y, pt3.X - pt4.X), Int128.Int128Mul(pt1.X - pt2.X, pt3.Y - pt4.Y));\n    else\n      return ClipperLib.Cast_Int64((pt1.Y - pt2.Y) * (pt3.X - pt4.X)) - ClipperLib.Cast_Int64((pt1.X - pt2.X) * (pt3.Y - pt4.Y)) === 0;\n  };\n  ClipperLib.ClipperBase.prototype.Clear = function ()\n  {\n    this.DisposeLocalMinimaList();\n    for (var i = 0, ilen = this.m_edges.length; i < ilen; ++i)\n    {\n      for (var j = 0, jlen = this.m_edges[i].length; j < jlen; ++j)\n        this.m_edges[i][j] = null;\n      ClipperLib.Clear(this.m_edges[i]);\n    }\n    ClipperLib.Clear(this.m_edges);\n    this.m_UseFullRange = false;\n    this.m_HasOpenPaths = false;\n  };\n  ClipperLib.ClipperBase.prototype.DisposeLocalMinimaList = function ()\n  {\n    while (this.m_MinimaList !== null)\n    {\n      var tmpLm = this.m_MinimaList.Next;\n      this.m_MinimaList = null;\n      this.m_MinimaList = tmpLm;\n    }\n    this.m_CurrentLM = null;\n  };\n  ClipperLib.ClipperBase.prototype.RangeTest = function (Pt, useFullRange)\n  {\n    if (useFullRange.Value)\n    {\n      if (Pt.X > ClipperLib.ClipperBase.hiRange || Pt.Y > ClipperLib.ClipperBase.hiRange || -Pt.X > ClipperLib.ClipperBase.hiRange || -Pt.Y > ClipperLib.ClipperBase.hiRange)\n        ClipperLib.Error(\"Coordinate outside allowed range in RangeTest().\");\n    }\n    else if (Pt.X > ClipperLib.ClipperBase.loRange || Pt.Y > ClipperLib.ClipperBase.loRange || -Pt.X > ClipperLib.ClipperBase.loRange || -Pt.Y > ClipperLib.ClipperBase.loRange)\n    {\n      useFullRange.Value = true;\n      this.RangeTest(Pt, useFullRange);\n    }\n  };\n  ClipperLib.ClipperBase.prototype.InitEdge = function (e, eNext, ePrev, pt)\n  {\n    e.Next = eNext;\n    e.Prev = ePrev;\n    //e.Curr = pt;\n    e.Curr.X = pt.X;\n    e.Curr.Y = pt.Y;\n    e.OutIdx = -1;\n  };\n  ClipperLib.ClipperBase.prototype.InitEdge2 = function (e, polyType)\n  {\n    if (e.Curr.Y >= e.Next.Curr.Y)\n    {\n      //e.Bot = e.Curr;\n      e.Bot.X = e.Curr.X;\n      e.Bot.Y = e.Curr.Y;\n      //e.Top = e.Next.Curr;\n      e.Top.X = e.Next.Curr.X;\n      e.Top.Y = e.Next.Curr.Y;\n    }\n    else\n    {\n      //e.Top = e.Curr;\n      e.Top.X = e.Curr.X;\n      e.Top.Y = e.Curr.Y;\n      //e.Bot = e.Next.Curr;\n      e.Bot.X = e.Next.Curr.X;\n      e.Bot.Y = e.Next.Curr.Y;\n    }\n    this.SetDx(e);\n    e.PolyTyp = polyType;\n  };\n  ClipperLib.ClipperBase.prototype.FindNextLocMin = function (E)\n  {\n    var E2;\n    for (;;)\n    {\n      while (ClipperLib.IntPoint.op_Inequality(E.Bot, E.Prev.Bot) || ClipperLib.IntPoint.op_Equality(E.Curr, E.Top))\n        E = E.Next;\n      if (E.Dx != ClipperLib.ClipperBase.horizontal && E.Prev.Dx != ClipperLib.ClipperBase.horizontal)\n        break;\n      while (E.Prev.Dx == ClipperLib.ClipperBase.horizontal)\n        E = E.Prev;\n      E2 = E;\n      while (E.Dx == ClipperLib.ClipperBase.horizontal)\n        E = E.Next;\n      if (E.Top.Y == E.Prev.Bot.Y)\n        continue;\n      //ie just an intermediate horz.\n      if (E2.Prev.Bot.X < E.Bot.X)\n        E = E2;\n      break;\n    }\n    return E;\n  };\n  ClipperLib.ClipperBase.prototype.ProcessBound = function (E, LeftBoundIsForward)\n  {\n    var EStart;\n    var Result = E;\n    var Horz;\n\n      if (Result.OutIdx == ClipperLib.ClipperBase.Skip)\n      {\n        //check if there are edges beyond the skip edge in the bound and if so\n        //create another LocMin and calling ProcessBound once more ...\n        E = Result;\n        if (LeftBoundIsForward)\n        {\n          while (E.Top.Y == E.Next.Bot.Y) E = E.Next;\n          while (E != Result && E.Dx == ClipperLib.ClipperBase.horizontal) E = E.Prev;\n        }\n        else\n        {\n          while (E.Top.Y == E.Prev.Bot.Y) E = E.Prev;\n          while (E != Result && E.Dx == ClipperLib.ClipperBase.horizontal) E = E.Next;\n        }\n        if (E == Result)\n        {\n          if (LeftBoundIsForward) Result = E.Next;\n          else Result = E.Prev;\n        }\n        else\n        {\n          //there are more edges in the bound beyond result starting with E\n          if (LeftBoundIsForward)\n            E = Result.Next;\n          else\n            E = Result.Prev;\n          var locMin = new ClipperLib.LocalMinima();\n          locMin.Next = null;\n          locMin.Y = E.Bot.Y;\n          locMin.LeftBound = null;\n          locMin.RightBound = E;\n          E.WindDelta = 0;\n          Result = this.ProcessBound(E, LeftBoundIsForward);\n          this.InsertLocalMinima(locMin);\n        }\n        return Result;\n      }\n\n      if (E.Dx == ClipperLib.ClipperBase.horizontal)\n      {\n        //We need to be careful with open paths because this may not be a\n        //true local minima (ie E may be following a skip edge).\n        //Also, consecutive horz. edges may start heading left before going right.\n        if (LeftBoundIsForward) EStart = E.Prev;\n        else EStart = E.Next;\n        if (EStart.OutIdx != ClipperLib.ClipperBase.Skip)\n        {\n          if (EStart.Dx == ClipperLib.ClipperBase.horizontal) //ie an adjoining horizontal skip edge\n          {\n            if (EStart.Bot.X != E.Bot.X && EStart.Top.X != E.Bot.X)\n              this.ReverseHorizontal(E);\n          }\n          else if (EStart.Bot.X != E.Bot.X)\n            this.ReverseHorizontal(E);\n        }\n      }\n\n      EStart = E;\n      if (LeftBoundIsForward)\n      {\n        while (Result.Top.Y == Result.Next.Bot.Y && Result.Next.OutIdx != ClipperLib.ClipperBase.Skip)\n          Result = Result.Next;\n        if (Result.Dx == ClipperLib.ClipperBase.horizontal && Result.Next.OutIdx != ClipperLib.ClipperBase.Skip)\n        {\n          //nb: at the top of a bound, horizontals are added to the bound\n          //only when the preceding edge attaches to the horizontal's left vertex\n          //unless a Skip edge is encountered when that becomes the top divide\n          Horz = Result;\n          while (Horz.Prev.Dx == ClipperLib.ClipperBase.horizontal)\n            Horz = Horz.Prev;\n          if (Horz.Prev.Top.X == Result.Next.Top.X)\n          {\n            if (!LeftBoundIsForward)\n              Result = Horz.Prev;\n          }\n          else if (Horz.Prev.Top.X > Result.Next.Top.X)\n            Result = Horz.Prev;\n        }\n        while (E != Result)\n        {\n          E.NextInLML = E.Next;\n          if (E.Dx == ClipperLib.ClipperBase.horizontal && E != EStart && E.Bot.X != E.Prev.Top.X)\n            this.ReverseHorizontal(E);\n          E = E.Next;\n        }\n        if (E.Dx == ClipperLib.ClipperBase.horizontal && E != EStart && E.Bot.X != E.Prev.Top.X)\n          this.ReverseHorizontal(E);\n        Result = Result.Next;\n        //move to the edge just beyond current bound\n      }\n      else\n      {\n        while (Result.Top.Y == Result.Prev.Bot.Y && Result.Prev.OutIdx != ClipperLib.ClipperBase.Skip)\n          Result = Result.Prev;\n        if (Result.Dx == ClipperLib.ClipperBase.horizontal && Result.Prev.OutIdx != ClipperLib.ClipperBase.Skip)\n        {\n          Horz = Result;\n          while (Horz.Next.Dx == ClipperLib.ClipperBase.horizontal)\n            Horz = Horz.Next;\n          if (Horz.Next.Top.X == Result.Prev.Top.X)\n          {\n            if (!LeftBoundIsForward)\n              Result = Horz.Next;\n          }\n          else if (Horz.Next.Top.X > Result.Prev.Top.X)\n            Result = Horz.Next;\n        }\n        while (E != Result)\n        {\n          E.NextInLML = E.Prev;\n          if (E.Dx == ClipperLib.ClipperBase.horizontal && E != EStart && E.Bot.X != E.Next.Top.X)\n            this.ReverseHorizontal(E);\n          E = E.Prev;\n        }\n        if (E.Dx == ClipperLib.ClipperBase.horizontal && E != EStart && E.Bot.X != E.Next.Top.X)\n          this.ReverseHorizontal(E);\n        Result = Result.Prev;\n        //move to the edge just beyond current bound\n      }\n\n    return Result;\n  };\n\n  ClipperLib.ClipperBase.prototype.AddPath = function (pg, polyType, Closed)\n  {\n    if (use_lines)\n    {\n      if (!Closed && polyType == ClipperLib.PolyType.ptClip)\n        ClipperLib.Error(\"AddPath: Open paths must be subject.\");\n    }\n    else\n    {\n      if (!Closed)\n        ClipperLib.Error(\"AddPath: Open paths have been disabled.\");\n    }\n    var highI = pg.length - 1;\n    if (Closed)\n      while (highI > 0 && (ClipperLib.IntPoint.op_Equality(pg[highI], pg[0])))\n    --highI;\n    while (highI > 0 && (ClipperLib.IntPoint.op_Equality(pg[highI], pg[highI - 1])))\n    --highI;\n    if ((Closed && highI < 2) || (!Closed && highI < 1))\n      return false;\n    //create a new edge array ...\n    var edges = new Array();\n    for (var i = 0; i <= highI; i++)\n      edges.push(new ClipperLib.TEdge());\n    var IsFlat = true;\n    //1. Basic (first) edge initialization ...\n\n    //edges[1].Curr = pg[1];\n    edges[1].Curr.X = pg[1].X;\n    edges[1].Curr.Y = pg[1].Y;\n\n    var $1 = {Value: this.m_UseFullRange};\n    this.RangeTest(pg[0], $1);\n    this.m_UseFullRange = $1.Value;\n\n    $1.Value = this.m_UseFullRange;\n    this.RangeTest(pg[highI], $1);\n    this.m_UseFullRange = $1.Value;\n\n    this.InitEdge(edges[0], edges[1], edges[highI], pg[0]);\n    this.InitEdge(edges[highI], edges[0], edges[highI - 1], pg[highI]);\n    for (var i = highI - 1; i >= 1; --i)\n    {\n      $1.Value = this.m_UseFullRange;\n      this.RangeTest(pg[i], $1);\n      this.m_UseFullRange = $1.Value;\n\n      this.InitEdge(edges[i], edges[i + 1], edges[i - 1], pg[i]);\n    }\n\n    var eStart = edges[0];\n    //2. Remove duplicate vertices, and (when closed) collinear edges ...\n    var E = eStart,\n      eLoopStop = eStart;\n    for (;;)\n    {\n    //console.log(E.Next, eStart);\n    \t//nb: allows matching start and end points when not Closed ...\n      if (E.Curr == E.Next.Curr && (Closed || E.Next != eStart))\n      {\n        if (E == E.Next)\n          break;\n        if (E == eStart)\n          eStart = E.Next;\n        E = this.RemoveEdge(E);\n        eLoopStop = E;\n        continue;\n      }\n      if (E.Prev == E.Next)\n        break;\n      else if (Closed && ClipperLib.ClipperBase.SlopesEqual(E.Prev.Curr, E.Curr, E.Next.Curr, this.m_UseFullRange) && (!this.PreserveCollinear || !this.Pt2IsBetweenPt1AndPt3(E.Prev.Curr, E.Curr, E.Next.Curr)))\n      {\n        //Collinear edges are allowed for open paths but in closed paths\n        //the default is to merge adjacent collinear edges into a single edge.\n        //However, if the PreserveCollinear property is enabled, only overlapping\n        //collinear edges (ie spikes) will be removed from closed paths.\n        if (E == eStart)\n          eStart = E.Next;\n        E = this.RemoveEdge(E);\n        E = E.Prev;\n        eLoopStop = E;\n        continue;\n      }\n      E = E.Next;\n      if ((E == eLoopStop) || (!Closed && E.Next == eStart)) break;\n    }\n    if ((!Closed && (E == E.Next)) || (Closed && (E.Prev == E.Next)))\n      return false;\n    if (!Closed)\n    {\n      this.m_HasOpenPaths = true;\n      eStart.Prev.OutIdx = ClipperLib.ClipperBase.Skip;\n    }\n    //3. Do second stage of edge initialization ...\n    E = eStart;\n    do {\n      this.InitEdge2(E, polyType);\n      E = E.Next;\n      if (IsFlat && E.Curr.Y != eStart.Curr.Y)\n        IsFlat = false;\n    }\n    while (E != eStart)\n    //4. Finally, add edge bounds to LocalMinima list ...\n    //Totally flat paths must be handled differently when adding them\n    //to LocalMinima list to avoid endless loops etc ...\n    if (IsFlat)\n    {\n      if (Closed)\n        return false;\n      E.Prev.OutIdx = ClipperLib.ClipperBase.Skip;\n      if (E.Prev.Bot.X < E.Prev.Top.X)\n        this.ReverseHorizontal(E.Prev);\n      var locMin = new ClipperLib.LocalMinima();\n      locMin.Next = null;\n      locMin.Y = E.Bot.Y;\n      locMin.LeftBound = null;\n      locMin.RightBound = E;\n      locMin.RightBound.Side = ClipperLib.EdgeSide.esRight;\n      locMin.RightBound.WindDelta = 0;\n      while (E.Next.OutIdx != ClipperLib.ClipperBase.Skip)\n      {\n        E.NextInLML = E.Next;\n        if (E.Bot.X != E.Prev.Top.X)\n          this.ReverseHorizontal(E);\n        E = E.Next;\n      }\n      this.InsertLocalMinima(locMin);\n      this.m_edges.push(edges);\n      return true;\n    }\n    this.m_edges.push(edges);\n    var leftBoundIsForward;\n    var EMin = null;\n\n\t\t//workaround to avoid an endless loop in the while loop below when\n    //open paths have matching start and end points ...\n    if(ClipperLib.IntPoint.op_Equality(E.Prev.Bot, E.Prev.Top))\n    \tE = E.Next;\n\n    for (;;)\n    {\n      E = this.FindNextLocMin(E);\n      if (E == EMin)\n        break;\n      else if (EMin == null)\n        EMin = E;\n      //E and E.Prev now share a local minima (left aligned if horizontal).\n      //Compare their slopes to find which starts which bound ...\n      var locMin = new ClipperLib.LocalMinima();\n      locMin.Next = null;\n      locMin.Y = E.Bot.Y;\n      if (E.Dx < E.Prev.Dx)\n      {\n        locMin.LeftBound = E.Prev;\n        locMin.RightBound = E;\n        leftBoundIsForward = false;\n        //Q.nextInLML = Q.prev\n      }\n      else\n      {\n        locMin.LeftBound = E;\n        locMin.RightBound = E.Prev;\n        leftBoundIsForward = true;\n        //Q.nextInLML = Q.next\n      }\n      locMin.LeftBound.Side = ClipperLib.EdgeSide.esLeft;\n      locMin.RightBound.Side = ClipperLib.EdgeSide.esRight;\n      if (!Closed)\n        locMin.LeftBound.WindDelta = 0;\n      else if (locMin.LeftBound.Next == locMin.RightBound)\n        locMin.LeftBound.WindDelta = -1;\n      else\n        locMin.LeftBound.WindDelta = 1;\n      locMin.RightBound.WindDelta = -locMin.LeftBound.WindDelta;\n      E = this.ProcessBound(locMin.LeftBound, leftBoundIsForward);\n      if (E.OutIdx == ClipperLib.ClipperBase.Skip)\n      \tE = this.ProcessBound(E, leftBoundIsForward);\n      var E2 = this.ProcessBound(locMin.RightBound, !leftBoundIsForward);\n      if (E2.OutIdx == ClipperLib.ClipperBase.Skip) E2 = this.ProcessBound(E2, !leftBoundIsForward);\n      if (locMin.LeftBound.OutIdx == ClipperLib.ClipperBase.Skip)\n        locMin.LeftBound = null;\n      else if (locMin.RightBound.OutIdx == ClipperLib.ClipperBase.Skip)\n        locMin.RightBound = null;\n      this.InsertLocalMinima(locMin);\n      if (!leftBoundIsForward)\n        E = E2;\n    }\n    return true;\n  };\n  ClipperLib.ClipperBase.prototype.AddPaths = function (ppg, polyType, closed)\n  {\n    //  console.log(\"-------------------------------------------\");\n    //  console.log(JSON.stringify(ppg));\n    var result = false;\n    for (var i = 0, ilen = ppg.length; i < ilen; ++i)\n      if (this.AddPath(ppg[i], polyType, closed))\n        result = true;\n    return result;\n  };\n  //------------------------------------------------------------------------------\n  ClipperLib.ClipperBase.prototype.Pt2IsBetweenPt1AndPt3 = function (pt1, pt2, pt3)\n  {\n    if ((ClipperLib.IntPoint.op_Equality(pt1, pt3)) || (ClipperLib.IntPoint.op_Equality(pt1, pt2)) ||       (ClipperLib.IntPoint.op_Equality(pt3, pt2)))\n\n   //if ((pt1 == pt3) || (pt1 == pt2) || (pt3 == pt2))\n   return false;\n\n    else if (pt1.X != pt3.X)\n      return (pt2.X > pt1.X) == (pt2.X < pt3.X);\n    else\n      return (pt2.Y > pt1.Y) == (pt2.Y < pt3.Y);\n  };\n  ClipperLib.ClipperBase.prototype.RemoveEdge = function (e)\n  {\n    //removes e from double_linked_list (but without removing from memory)\n    e.Prev.Next = e.Next;\n    e.Next.Prev = e.Prev;\n    var result = e.Next;\n    e.Prev = null; //flag as removed (see ClipperBase.Clear)\n    return result;\n  };\n  ClipperLib.ClipperBase.prototype.SetDx = function (e)\n  {\n    e.Delta.X = (e.Top.X - e.Bot.X);\n    e.Delta.Y = (e.Top.Y - e.Bot.Y);\n    if (e.Delta.Y === 0) e.Dx = ClipperLib.ClipperBase.horizontal;\n    else e.Dx = (e.Delta.X) / (e.Delta.Y);\n  };\n  ClipperLib.ClipperBase.prototype.InsertLocalMinima = function (newLm)\n  {\n    if (this.m_MinimaList === null)\n    {\n      this.m_MinimaList = newLm;\n    }\n    else if (newLm.Y >= this.m_MinimaList.Y)\n    {\n      newLm.Next = this.m_MinimaList;\n      this.m_MinimaList = newLm;\n    }\n    else\n    {\n      var tmpLm = this.m_MinimaList;\n      while (tmpLm.Next !== null && (newLm.Y < tmpLm.Next.Y))\n        tmpLm = tmpLm.Next;\n      newLm.Next = tmpLm.Next;\n      tmpLm.Next = newLm;\n    }\n  };\n  ClipperLib.ClipperBase.prototype.PopLocalMinima = function ()\n  {\n    if (this.m_CurrentLM === null)\n      return;\n    this.m_CurrentLM = this.m_CurrentLM.Next;\n  };\n  ClipperLib.ClipperBase.prototype.ReverseHorizontal = function (e)\n  {\n    //swap horizontal edges' top and bottom x's so they follow the natural\n    //progression of the bounds - ie so their xbots will align with the\n    //adjoining lower edge. [Helpful in the ProcessHorizontal() method.]\n    var tmp = e.Top.X;\n    e.Top.X = e.Bot.X;\n    e.Bot.X = tmp;\n    if (use_xyz)\n    {\n      tmp = e.Top.Z;\n      e.Top.Z = e.Bot.Z;\n      e.Bot.Z = tmp;\n    }\n  };\n  ClipperLib.ClipperBase.prototype.Reset = function ()\n  {\n    this.m_CurrentLM = this.m_MinimaList;\n    if (this.m_CurrentLM == null)\n      return;\n    //ie nothing to process\n    //reset all edges ...\n    var lm = this.m_MinimaList;\n    while (lm != null)\n    {\n      var e = lm.LeftBound;\n      if (e != null)\n      {\n        //e.Curr = e.Bot;\n        e.Curr.X = e.Bot.X;\n        e.Curr.Y = e.Bot.Y;\n        e.Side = ClipperLib.EdgeSide.esLeft;\n        e.OutIdx = ClipperLib.ClipperBase.Unassigned;\n      }\n      e = lm.RightBound;\n      if (e != null)\n      {\n        //e.Curr = e.Bot;\n        e.Curr.X = e.Bot.X;\n        e.Curr.Y = e.Bot.Y;\n        e.Side = ClipperLib.EdgeSide.esRight;\n        e.OutIdx = ClipperLib.ClipperBase.Unassigned;\n      }\n      lm = lm.Next;\n    }\n  };\n  ClipperLib.Clipper = function (InitOptions) // public Clipper(int InitOptions = 0)\n  {\n    if (typeof (InitOptions) == \"undefined\") InitOptions = 0;\n    this.m_PolyOuts = null;\n    this.m_ClipType = ClipperLib.ClipType.ctIntersection;\n    this.m_Scanbeam = null;\n    this.m_ActiveEdges = null;\n    this.m_SortedEdges = null;\n    this.m_IntersectList = null;\n    this.m_IntersectNodeComparer = null;\n    this.m_ExecuteLocked = false;\n    this.m_ClipFillType = ClipperLib.PolyFillType.pftEvenOdd;\n    this.m_SubjFillType = ClipperLib.PolyFillType.pftEvenOdd;\n    this.m_Joins = null;\n    this.m_GhostJoins = null;\n    this.m_UsingPolyTree = false;\n    this.ReverseSolution = false;\n    this.StrictlySimple = false;\n    ClipperLib.ClipperBase.call(this);\n    this.m_Scanbeam = null;\n    this.m_ActiveEdges = null;\n    this.m_SortedEdges = null;\n    this.m_IntersectList = new Array();\n    this.m_IntersectNodeComparer = ClipperLib.MyIntersectNodeSort.Compare;\n    this.m_ExecuteLocked = false;\n    this.m_UsingPolyTree = false;\n    this.m_PolyOuts = new Array();\n    this.m_Joins = new Array();\n    this.m_GhostJoins = new Array();\n    this.ReverseSolution = (1 & InitOptions) !== 0;\n    this.StrictlySimple = (2 & InitOptions) !== 0;\n    this.PreserveCollinear = (4 & InitOptions) !== 0;\n    if (use_xyz)\n    {\n      this.ZFillFunction = null; // function (IntPoint vert1, IntPoint vert2, ref IntPoint intersectPt);\n    }\n  };\n  ClipperLib.Clipper.ioReverseSolution = 1;\n  ClipperLib.Clipper.ioStrictlySimple = 2;\n  ClipperLib.Clipper.ioPreserveCollinear = 4;\n\n  ClipperLib.Clipper.prototype.Clear = function ()\n  {\n    if (this.m_edges.length === 0)\n      return;\n    //avoids problems with ClipperBase destructor\n    this.DisposeAllPolyPts();\n    ClipperLib.ClipperBase.prototype.Clear.call(this);\n  };\n\n  ClipperLib.Clipper.prototype.DisposeScanbeamList = function ()\n  {\n    while (this.m_Scanbeam !== null)\n    {\n      var sb2 = this.m_Scanbeam.Next;\n      this.m_Scanbeam = null;\n      this.m_Scanbeam = sb2;\n    }\n  };\n  ClipperLib.Clipper.prototype.Reset = function ()\n  {\n    ClipperLib.ClipperBase.prototype.Reset.call(this);\n    this.m_Scanbeam = null;\n    this.m_ActiveEdges = null;\n    this.m_SortedEdges = null;\n\n    var lm = this.m_MinimaList;\n    while (lm !== null)\n    {\n      this.InsertScanbeam(lm.Y);\n      lm = lm.Next;\n    }\n  };\n  ClipperLib.Clipper.prototype.InsertScanbeam = function (Y)\n  {\n    if (this.m_Scanbeam === null)\n    {\n      this.m_Scanbeam = new ClipperLib.Scanbeam();\n      this.m_Scanbeam.Next = null;\n      this.m_Scanbeam.Y = Y;\n    }\n    else if (Y > this.m_Scanbeam.Y)\n    {\n      var newSb = new ClipperLib.Scanbeam();\n      newSb.Y = Y;\n      newSb.Next = this.m_Scanbeam;\n      this.m_Scanbeam = newSb;\n    }\n    else\n    {\n      var sb2 = this.m_Scanbeam;\n      while (sb2.Next !== null && (Y <= sb2.Next.Y))\n        sb2 = sb2.Next;\n      if (Y == sb2.Y)\n        return;\n      //ie ignores duplicates\n      var newSb = new ClipperLib.Scanbeam();\n      newSb.Y = Y;\n      newSb.Next = sb2.Next;\n      sb2.Next = newSb;\n    }\n  };\n  // ************************************\n  ClipperLib.Clipper.prototype.Execute = function ()\n  {\n    var a = arguments,\n      alen = a.length,\n      ispolytree = a[1] instanceof ClipperLib.PolyTree;\n    if (alen == 4 && !ispolytree) // function (clipType, solution, subjFillType, clipFillType)\n    {\n      var clipType = a[0],\n        solution = a[1],\n        subjFillType = a[2],\n        clipFillType = a[3];\n      if (this.m_ExecuteLocked)\n        return false;\n      if (this.m_HasOpenPaths)\n        ClipperLib.Error(\"Error: PolyTree struct is need for open path clipping.\");\n      this.m_ExecuteLocked = true;\n      ClipperLib.Clear(solution);\n      this.m_SubjFillType = subjFillType;\n      this.m_ClipFillType = clipFillType;\n      this.m_ClipType = clipType;\n      this.m_UsingPolyTree = false;\n      try\n      {\n        var succeeded = this.ExecuteInternal();\n        //build the return polygons ...\n        if (succeeded) this.BuildResult(solution);\n      }\n      finally\n      {\n        this.DisposeAllPolyPts();\n        this.m_ExecuteLocked = false;\n      }\n      return succeeded;\n    }\n    else if (alen == 4 && ispolytree) // function (clipType, polytree, subjFillType, clipFillType)\n    {\n      var clipType = a[0],\n        polytree = a[1],\n        subjFillType = a[2],\n        clipFillType = a[3];\n      if (this.m_ExecuteLocked)\n        return false;\n      this.m_ExecuteLocked = true;\n      this.m_SubjFillType = subjFillType;\n      this.m_ClipFillType = clipFillType;\n      this.m_ClipType = clipType;\n      this.m_UsingPolyTree = true;\n      try\n      {\n        var succeeded = this.ExecuteInternal();\n        //build the return polygons ...\n        if (succeeded) this.BuildResult2(polytree);\n      }\n      finally\n      {\n        this.DisposeAllPolyPts();\n        this.m_ExecuteLocked = false;\n      }\n      return succeeded;\n    }\n    else if (alen == 2 && !ispolytree) // function (clipType, solution)\n    {\n      var clipType = a[0],\n        solution = a[1];\n      return this.Execute(clipType, solution, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);\n    }\n    else if (alen == 2 && ispolytree) // function (clipType, polytree)\n    {\n      var clipType = a[0],\n        polytree = a[1];\n      return this.Execute(clipType, polytree, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);\n    }\n  };\n  ClipperLib.Clipper.prototype.FixHoleLinkage = function (outRec)\n  {\n    //skip if an outermost polygon or\n    //already already points to the correct FirstLeft ...\n    if (outRec.FirstLeft === null || (outRec.IsHole != outRec.FirstLeft.IsHole && outRec.FirstLeft.Pts !== null))\n      return;\n    var orfl = outRec.FirstLeft;\n    while (orfl !== null && ((orfl.IsHole == outRec.IsHole) || orfl.Pts === null))\n      orfl = orfl.FirstLeft;\n    outRec.FirstLeft = orfl;\n  };\n  ClipperLib.Clipper.prototype.ExecuteInternal = function ()\n  {\n    try\n    {\n      this.Reset();\n      if (this.m_CurrentLM === null)\n        return false;\n      var botY = this.PopScanbeam();\n      do {\n        this.InsertLocalMinimaIntoAEL(botY);\n        ClipperLib.Clear(this.m_GhostJoins);\n        this.ProcessHorizontals(false);\n        if (this.m_Scanbeam === null)\n          break;\n        var topY = this.PopScanbeam();\n        if (!this.ProcessIntersections(topY)) return false;\n\n        this.ProcessEdgesAtTopOfScanbeam(topY);\n        botY = topY;\n      }\n      while (this.m_Scanbeam !== null || this.m_CurrentLM !== null)\n      //fix orientations ...\n      for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n      {\n        var outRec = this.m_PolyOuts[i];\n        if (outRec.Pts === null || outRec.IsOpen)\n          continue;\n        if ((outRec.IsHole ^ this.ReverseSolution) == (this.Area(outRec) > 0))\n          this.ReversePolyPtLinks(outRec.Pts);\n      }\n      this.JoinCommonEdges();\n      for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n      {\n        var outRec = this.m_PolyOuts[i];\n        if (outRec.Pts !== null && !outRec.IsOpen)\n          this.FixupOutPolygon(outRec);\n      }\n      if (this.StrictlySimple)\n        this.DoSimplePolygons();\n      return true;\n    }\n    finally\n    {\n      ClipperLib.Clear(this.m_Joins);\n      ClipperLib.Clear(this.m_GhostJoins);\n    }\n  };\n  ClipperLib.Clipper.prototype.PopScanbeam = function ()\n  {\n    var Y = this.m_Scanbeam.Y;\n    this.m_Scanbeam = this.m_Scanbeam.Next;\n    return Y;\n  };\n\n  ClipperLib.Clipper.prototype.DisposeAllPolyPts = function ()\n  {\n    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; ++i)\n      this.DisposeOutRec(i);\n    ClipperLib.Clear(this.m_PolyOuts);\n  };\n  ClipperLib.Clipper.prototype.DisposeOutRec = function (index)\n  {\n    var outRec = this.m_PolyOuts[index];\n    outRec.Pts = null;\n    outRec = null;\n    this.m_PolyOuts[index] = null;\n  };\n\n  ClipperLib.Clipper.prototype.AddJoin = function (Op1, Op2, OffPt)\n  {\n    var j = new ClipperLib.Join();\n    j.OutPt1 = Op1;\n    j.OutPt2 = Op2;\n    //j.OffPt = OffPt;\n    j.OffPt.X = OffPt.X;\n    j.OffPt.Y = OffPt.Y;\n    this.m_Joins.push(j);\n  };\n  ClipperLib.Clipper.prototype.AddGhostJoin = function (Op, OffPt)\n  {\n    var j = new ClipperLib.Join();\n    j.OutPt1 = Op;\n    //j.OffPt = OffPt;\n    j.OffPt.X = OffPt.X;\n    j.OffPt.Y = OffPt.Y;\n    this.m_GhostJoins.push(j);\n  };\n  if (use_xyz)\n  {\n    ClipperLib.Clipper.prototype.SetZ = function (pt, e1, e2)\n    {\n      if (this.ZFillFunction !== null)\n      {\n        if (pt.Z != 0 || this.ZFillFunction === null) return;\n        else if (ClipperLib.IntPoint.op_Equality(pt, e1.Bot)) pt.Z = e1.Bot.Z;\n        else if (ClipperLib.IntPoint.op_Equality(pt, e1.Top)) pt.Z = e1.Top.Z;\n        else if (ClipperLib.IntPoint.op_Equality(pt, e2.Bot)) pt.Z = e2.Bot.Z;\n        else if (ClipperLib.IntPoint.op_Equality(pt, e2.Top)) pt.Z = e2.Top.Z;\n        else ZFillFunction(e1.Bot, e1.Top, e2.Bot, e2.Top, pt);\n      }\n    };\n\n    //------------------------------------------------------------------------------\n  }\n\n  ClipperLib.Clipper.prototype.InsertLocalMinimaIntoAEL = function (botY)\n  {\n    while (this.m_CurrentLM !== null && (this.m_CurrentLM.Y == botY))\n    {\n      var lb = this.m_CurrentLM.LeftBound;\n      var rb = this.m_CurrentLM.RightBound;\n      this.PopLocalMinima();\n      var Op1 = null;\n      if (lb === null)\n      {\n        this.InsertEdgeIntoAEL(rb, null);\n        this.SetWindingCount(rb);\n        if (this.IsContributing(rb))\n          Op1 = this.AddOutPt(rb, rb.Bot);\n      }\n      else if (rb == null)\n      {\n        this.InsertEdgeIntoAEL(lb, null);\n        this.SetWindingCount(lb);\n        if (this.IsContributing(lb))\n          Op1 = this.AddOutPt(lb, lb.Bot);\n        this.InsertScanbeam(lb.Top.Y);\n      }\n      else\n      {\n        this.InsertEdgeIntoAEL(lb, null);\n        this.InsertEdgeIntoAEL(rb, lb);\n        this.SetWindingCount(lb);\n        rb.WindCnt = lb.WindCnt;\n        rb.WindCnt2 = lb.WindCnt2;\n        if (this.IsContributing(lb))\n          Op1 = this.AddLocalMinPoly(lb, rb, lb.Bot);\n        this.InsertScanbeam(lb.Top.Y);\n      }\n      if (rb != null)\n      {\n        if (ClipperLib.ClipperBase.IsHorizontal(rb))\n          this.AddEdgeToSEL(rb);\n        else\n          this.InsertScanbeam(rb.Top.Y);\n      }\n      if (lb == null || rb == null) continue;\n      //if output polygons share an Edge with a horizontal rb, they'll need joining later ...\n      if (Op1 !== null && ClipperLib.ClipperBase.IsHorizontal(rb) && this.m_GhostJoins.length > 0 && rb.WindDelta !== 0)\n      {\n        for (var i = 0, ilen = this.m_GhostJoins.length; i < ilen; i++)\n        {\n          //if the horizontal Rb and a 'ghost' horizontal overlap, then convert\n          //the 'ghost' join to a real join ready for later ...\n          var j = this.m_GhostJoins[i];\n\n\t\t\t\t\tif (this.HorzSegmentsOverlap(j.OutPt1.Pt.X, j.OffPt.X, rb.Bot.X, rb.Top.X))\n            this.AddJoin(j.OutPt1, Op1, j.OffPt);\n        }\n      }\n      if (lb.OutIdx >= 0 && lb.PrevInAEL !== null &&\n        lb.PrevInAEL.Curr.X == lb.Bot.X &&\n        lb.PrevInAEL.OutIdx >= 0 &&\n        ClipperLib.ClipperBase.SlopesEqual(lb.PrevInAEL, lb, this.m_UseFullRange) &&\n        lb.WindDelta !== 0 && lb.PrevInAEL.WindDelta !== 0)\n      {\n        var Op2 = this.AddOutPt(lb.PrevInAEL, lb.Bot);\n        this.AddJoin(Op1, Op2, lb.Top);\n      }\n      if (lb.NextInAEL != rb)\n      {\n        if (rb.OutIdx >= 0 && rb.PrevInAEL.OutIdx >= 0 &&\n          ClipperLib.ClipperBase.SlopesEqual(rb.PrevInAEL, rb, this.m_UseFullRange) &&\n          rb.WindDelta !== 0 && rb.PrevInAEL.WindDelta !== 0)\n        {\n          var Op2 = this.AddOutPt(rb.PrevInAEL, rb.Bot);\n          this.AddJoin(Op1, Op2, rb.Top);\n        }\n        var e = lb.NextInAEL;\n        if (e !== null)\n          while (e != rb)\n          {\n            //nb: For calculating winding counts etc, IntersectEdges() assumes\n            //that param1 will be to the right of param2 ABOVE the intersection ...\n            this.IntersectEdges(rb, e, lb.Curr, false);\n            //order important here\n            e = e.NextInAEL;\n          }\n      }\n    }\n  };\n  ClipperLib.Clipper.prototype.InsertEdgeIntoAEL = function (edge, startEdge)\n  {\n    if (this.m_ActiveEdges === null)\n    {\n      edge.PrevInAEL = null;\n      edge.NextInAEL = null;\n      this.m_ActiveEdges = edge;\n    }\n    else if (startEdge === null && this.E2InsertsBeforeE1(this.m_ActiveEdges, edge))\n    {\n      edge.PrevInAEL = null;\n      edge.NextInAEL = this.m_ActiveEdges;\n      this.m_ActiveEdges.PrevInAEL = edge;\n      this.m_ActiveEdges = edge;\n    }\n    else\n    {\n      if (startEdge === null)\n        startEdge = this.m_ActiveEdges;\n      while (startEdge.NextInAEL !== null && !this.E2InsertsBeforeE1(startEdge.NextInAEL, edge))\n        startEdge = startEdge.NextInAEL;\n      edge.NextInAEL = startEdge.NextInAEL;\n      if (startEdge.NextInAEL !== null)\n        startEdge.NextInAEL.PrevInAEL = edge;\n      edge.PrevInAEL = startEdge;\n      startEdge.NextInAEL = edge;\n    }\n  };\n  ClipperLib.Clipper.prototype.E2InsertsBeforeE1 = function (e1, e2)\n  {\n    if (e2.Curr.X == e1.Curr.X)\n    {\n      if (e2.Top.Y > e1.Top.Y)\n        return e2.Top.X < ClipperLib.Clipper.TopX(e1, e2.Top.Y);\n      else\n        return e1.Top.X > ClipperLib.Clipper.TopX(e2, e1.Top.Y);\n    }\n    else\n      return e2.Curr.X < e1.Curr.X;\n  };\n  ClipperLib.Clipper.prototype.IsEvenOddFillType = function (edge)\n  {\n    if (edge.PolyTyp == ClipperLib.PolyType.ptSubject)\n      return this.m_SubjFillType == ClipperLib.PolyFillType.pftEvenOdd;\n    else\n      return this.m_ClipFillType == ClipperLib.PolyFillType.pftEvenOdd;\n  };\n  ClipperLib.Clipper.prototype.IsEvenOddAltFillType = function (edge)\n  {\n    if (edge.PolyTyp == ClipperLib.PolyType.ptSubject)\n      return this.m_ClipFillType == ClipperLib.PolyFillType.pftEvenOdd;\n    else\n      return this.m_SubjFillType == ClipperLib.PolyFillType.pftEvenOdd;\n  };\n  ClipperLib.Clipper.prototype.IsContributing = function (edge)\n  {\n    var pft, pft2;\n    if (edge.PolyTyp == ClipperLib.PolyType.ptSubject)\n    {\n      pft = this.m_SubjFillType;\n      pft2 = this.m_ClipFillType;\n    }\n    else\n    {\n      pft = this.m_ClipFillType;\n      pft2 = this.m_SubjFillType;\n    }\n    switch (pft)\n    {\n    case ClipperLib.PolyFillType.pftEvenOdd:\n      if (edge.WindDelta === 0 && edge.WindCnt != 1)\n        return false;\n      break;\n    case ClipperLib.PolyFillType.pftNonZero:\n      if (Math.abs(edge.WindCnt) != 1)\n        return false;\n      break;\n    case ClipperLib.PolyFillType.pftPositive:\n      if (edge.WindCnt != 1)\n        return false;\n      break;\n    default:\n      if (edge.WindCnt != -1)\n        return false;\n      break;\n    }\n    switch (this.m_ClipType)\n    {\n    case ClipperLib.ClipType.ctIntersection:\n      switch (pft2)\n      {\n      case ClipperLib.PolyFillType.pftEvenOdd:\n      case ClipperLib.PolyFillType.pftNonZero:\n        return (edge.WindCnt2 !== 0);\n      case ClipperLib.PolyFillType.pftPositive:\n        return (edge.WindCnt2 > 0);\n      default:\n        return (edge.WindCnt2 < 0);\n      }\n    case ClipperLib.ClipType.ctUnion:\n      switch (pft2)\n      {\n      case ClipperLib.PolyFillType.pftEvenOdd:\n      case ClipperLib.PolyFillType.pftNonZero:\n        return (edge.WindCnt2 === 0);\n      case ClipperLib.PolyFillType.pftPositive:\n        return (edge.WindCnt2 <= 0);\n      default:\n        return (edge.WindCnt2 >= 0);\n      }\n    case ClipperLib.ClipType.ctDifference:\n      if (edge.PolyTyp == ClipperLib.PolyType.ptSubject)\n        switch (pft2)\n        {\n        case ClipperLib.PolyFillType.pftEvenOdd:\n        case ClipperLib.PolyFillType.pftNonZero:\n          return (edge.WindCnt2 === 0);\n        case ClipperLib.PolyFillType.pftPositive:\n          return (edge.WindCnt2 <= 0);\n        default:\n          return (edge.WindCnt2 >= 0);\n        }\n      else\n        switch (pft2)\n        {\n        case ClipperLib.PolyFillType.pftEvenOdd:\n        case ClipperLib.PolyFillType.pftNonZero:\n          return (edge.WindCnt2 !== 0);\n        case ClipperLib.PolyFillType.pftPositive:\n          return (edge.WindCnt2 > 0);\n        default:\n          return (edge.WindCnt2 < 0);\n        }\n    case ClipperLib.ClipType.ctXor:\n      if (edge.WindDelta === 0)\n        switch (pft2)\n        {\n        case ClipperLib.PolyFillType.pftEvenOdd:\n        case ClipperLib.PolyFillType.pftNonZero:\n          return (edge.WindCnt2 === 0);\n        case ClipperLib.PolyFillType.pftPositive:\n          return (edge.WindCnt2 <= 0);\n        default:\n          return (edge.WindCnt2 >= 0);\n        }\n      else\n        return true;\n    }\n    return true;\n  };\n  ClipperLib.Clipper.prototype.SetWindingCount = function (edge)\n  {\n    var e = edge.PrevInAEL;\n    //find the edge of the same polytype that immediately preceeds 'edge' in AEL\n    while (e !== null && ((e.PolyTyp != edge.PolyTyp) || (e.WindDelta === 0)))\n      e = e.PrevInAEL;\n    if (e === null)\n    {\n      edge.WindCnt = (edge.WindDelta === 0 ? 1 : edge.WindDelta);\n      edge.WindCnt2 = 0;\n      e = this.m_ActiveEdges;\n      //ie get ready to calc WindCnt2\n    }\n    else if (edge.WindDelta === 0 && this.m_ClipType != ClipperLib.ClipType.ctUnion)\n    {\n      edge.WindCnt = 1;\n      edge.WindCnt2 = e.WindCnt2;\n      e = e.NextInAEL;\n      //ie get ready to calc WindCnt2\n    }\n    else if (this.IsEvenOddFillType(edge))\n    {\n      //EvenOdd filling ...\n      if (edge.WindDelta === 0)\n      {\n        //are we inside a subj polygon ...\n        var Inside = true;\n        var e2 = e.PrevInAEL;\n        while (e2 !== null)\n        {\n          if (e2.PolyTyp == e.PolyTyp && e2.WindDelta !== 0)\n            Inside = !Inside;\n          e2 = e2.PrevInAEL;\n        }\n        edge.WindCnt = (Inside ? 0 : 1);\n      }\n      else\n      {\n        edge.WindCnt = edge.WindDelta;\n      }\n      edge.WindCnt2 = e.WindCnt2;\n      e = e.NextInAEL;\n      //ie get ready to calc WindCnt2\n    }\n    else\n    {\n      //nonZero, Positive or Negative filling ...\n      if (e.WindCnt * e.WindDelta < 0)\n      {\n        //prev edge is 'decreasing' WindCount (WC) toward zero\n        //so we're outside the previous polygon ...\n        if (Math.abs(e.WindCnt) > 1)\n        {\n          //outside prev poly but still inside another.\n          //when reversing direction of prev poly use the same WC\n          if (e.WindDelta * edge.WindDelta < 0)\n            edge.WindCnt = e.WindCnt;\n          else\n            edge.WindCnt = e.WindCnt + edge.WindDelta;\n        }\n        else\n          edge.WindCnt = (edge.WindDelta === 0 ? 1 : edge.WindDelta);\n      }\n      else\n      {\n        //prev edge is 'increasing' WindCount (WC) away from zero\n        //so we're inside the previous polygon ...\n        if (edge.WindDelta === 0)\n          edge.WindCnt = (e.WindCnt < 0 ? e.WindCnt - 1 : e.WindCnt + 1);\n        else if (e.WindDelta * edge.WindDelta < 0)\n          edge.WindCnt = e.WindCnt;\n        else\n          edge.WindCnt = e.WindCnt + edge.WindDelta;\n      }\n      edge.WindCnt2 = e.WindCnt2;\n      e = e.NextInAEL;\n      //ie get ready to calc WindCnt2\n    }\n    //update WindCnt2 ...\n    if (this.IsEvenOddAltFillType(edge))\n    {\n      //EvenOdd filling ...\n      while (e != edge)\n      {\n        if (e.WindDelta !== 0)\n          edge.WindCnt2 = (edge.WindCnt2 === 0 ? 1 : 0);\n        e = e.NextInAEL;\n      }\n    }\n    else\n    {\n      //nonZero, Positive or Negative filling ...\n      while (e != edge)\n      {\n        edge.WindCnt2 += e.WindDelta;\n        e = e.NextInAEL;\n      }\n    }\n  };\n  ClipperLib.Clipper.prototype.AddEdgeToSEL = function (edge)\n  {\n    //SEL pointers in PEdge are reused to build a list of horizontal edges.\n    //However, we don't need to worry about order with horizontal edge processing.\n    if (this.m_SortedEdges === null)\n    {\n      this.m_SortedEdges = edge;\n      edge.PrevInSEL = null;\n      edge.NextInSEL = null;\n    }\n    else\n    {\n      edge.NextInSEL = this.m_SortedEdges;\n      edge.PrevInSEL = null;\n      this.m_SortedEdges.PrevInSEL = edge;\n      this.m_SortedEdges = edge;\n    }\n  };\n  ClipperLib.Clipper.prototype.CopyAELToSEL = function ()\n  {\n    var e = this.m_ActiveEdges;\n    this.m_SortedEdges = e;\n    while (e !== null)\n    {\n      e.PrevInSEL = e.PrevInAEL;\n      e.NextInSEL = e.NextInAEL;\n      e = e.NextInAEL;\n    }\n  };\n  ClipperLib.Clipper.prototype.SwapPositionsInAEL = function (edge1, edge2)\n  {\n    //check that one or other edge hasn't already been removed from AEL ...\n    if (edge1.NextInAEL == edge1.PrevInAEL || edge2.NextInAEL == edge2.PrevInAEL)\n      return;\n    if (edge1.NextInAEL == edge2)\n    {\n      var next = edge2.NextInAEL;\n      if (next !== null)\n        next.PrevInAEL = edge1;\n      var prev = edge1.PrevInAEL;\n      if (prev !== null)\n        prev.NextInAEL = edge2;\n      edge2.PrevInAEL = prev;\n      edge2.NextInAEL = edge1;\n      edge1.PrevInAEL = edge2;\n      edge1.NextInAEL = next;\n    }\n    else if (edge2.NextInAEL == edge1)\n    {\n      var next = edge1.NextInAEL;\n      if (next !== null)\n        next.PrevInAEL = edge2;\n      var prev = edge2.PrevInAEL;\n      if (prev !== null)\n        prev.NextInAEL = edge1;\n      edge1.PrevInAEL = prev;\n      edge1.NextInAEL = edge2;\n      edge2.PrevInAEL = edge1;\n      edge2.NextInAEL = next;\n    }\n    else\n    {\n      var next = edge1.NextInAEL;\n      var prev = edge1.PrevInAEL;\n      edge1.NextInAEL = edge2.NextInAEL;\n      if (edge1.NextInAEL !== null)\n        edge1.NextInAEL.PrevInAEL = edge1;\n      edge1.PrevInAEL = edge2.PrevInAEL;\n      if (edge1.PrevInAEL !== null)\n        edge1.PrevInAEL.NextInAEL = edge1;\n      edge2.NextInAEL = next;\n      if (edge2.NextInAEL !== null)\n        edge2.NextInAEL.PrevInAEL = edge2;\n      edge2.PrevInAEL = prev;\n      if (edge2.PrevInAEL !== null)\n        edge2.PrevInAEL.NextInAEL = edge2;\n    }\n    if (edge1.PrevInAEL === null)\n      this.m_ActiveEdges = edge1;\n    else if (edge2.PrevInAEL === null)\n      this.m_ActiveEdges = edge2;\n  };\n  ClipperLib.Clipper.prototype.SwapPositionsInSEL = function (edge1, edge2)\n  {\n    if (edge1.NextInSEL === null && edge1.PrevInSEL === null)\n      return;\n    if (edge2.NextInSEL === null && edge2.PrevInSEL === null)\n      return;\n    if (edge1.NextInSEL == edge2)\n    {\n      var next = edge2.NextInSEL;\n      if (next !== null)\n        next.PrevInSEL = edge1;\n      var prev = edge1.PrevInSEL;\n      if (prev !== null)\n        prev.NextInSEL = edge2;\n      edge2.PrevInSEL = prev;\n      edge2.NextInSEL = edge1;\n      edge1.PrevInSEL = edge2;\n      edge1.NextInSEL = next;\n    }\n    else if (edge2.NextInSEL == edge1)\n    {\n      var next = edge1.NextInSEL;\n      if (next !== null)\n        next.PrevInSEL = edge2;\n      var prev = edge2.PrevInSEL;\n      if (prev !== null)\n        prev.NextInSEL = edge1;\n      edge1.PrevInSEL = prev;\n      edge1.NextInSEL = edge2;\n      edge2.PrevInSEL = edge1;\n      edge2.NextInSEL = next;\n    }\n    else\n    {\n      var next = edge1.NextInSEL;\n      var prev = edge1.PrevInSEL;\n      edge1.NextInSEL = edge2.NextInSEL;\n      if (edge1.NextInSEL !== null)\n        edge1.NextInSEL.PrevInSEL = edge1;\n      edge1.PrevInSEL = edge2.PrevInSEL;\n      if (edge1.PrevInSEL !== null)\n        edge1.PrevInSEL.NextInSEL = edge1;\n      edge2.NextInSEL = next;\n      if (edge2.NextInSEL !== null)\n        edge2.NextInSEL.PrevInSEL = edge2;\n      edge2.PrevInSEL = prev;\n      if (edge2.PrevInSEL !== null)\n        edge2.PrevInSEL.NextInSEL = edge2;\n    }\n    if (edge1.PrevInSEL === null)\n      this.m_SortedEdges = edge1;\n    else if (edge2.PrevInSEL === null)\n      this.m_SortedEdges = edge2;\n  };\n  ClipperLib.Clipper.prototype.AddLocalMaxPoly = function (e1, e2, pt)\n  {\n    this.AddOutPt(e1, pt);\n    if (e2.WindDelta == 0) this.AddOutPt(e2, pt);\n    if (e1.OutIdx == e2.OutIdx)\n    {\n      e1.OutIdx = -1;\n      e2.OutIdx = -1;\n    }\n    else if (e1.OutIdx < e2.OutIdx)\n      this.AppendPolygon(e1, e2);\n    else\n      this.AppendPolygon(e2, e1);\n  };\n  ClipperLib.Clipper.prototype.AddLocalMinPoly = function (e1, e2, pt)\n  {\n    var result;\n    var e, prevE;\n    if (ClipperLib.ClipperBase.IsHorizontal(e2) || (e1.Dx > e2.Dx))\n    {\n      result = this.AddOutPt(e1, pt);\n      e2.OutIdx = e1.OutIdx;\n      e1.Side = ClipperLib.EdgeSide.esLeft;\n      e2.Side = ClipperLib.EdgeSide.esRight;\n      e = e1;\n      if (e.PrevInAEL == e2)\n        prevE = e2.PrevInAEL;\n      else\n        prevE = e.PrevInAEL;\n    }\n    else\n    {\n      result = this.AddOutPt(e2, pt);\n      e1.OutIdx = e2.OutIdx;\n      e1.Side = ClipperLib.EdgeSide.esRight;\n      e2.Side = ClipperLib.EdgeSide.esLeft;\n      e = e2;\n      if (e.PrevInAEL == e1)\n        prevE = e1.PrevInAEL;\n      else\n        prevE = e.PrevInAEL;\n    }\n    if (prevE !== null && prevE.OutIdx >= 0 && (ClipperLib.Clipper.TopX(prevE, pt.Y) == ClipperLib.Clipper.TopX(e, pt.Y)) && ClipperLib.ClipperBase.SlopesEqual(e, prevE, this.m_UseFullRange) && (e.WindDelta !== 0) && (prevE.WindDelta !== 0))\n    {\n      var outPt = this.AddOutPt(prevE, pt);\n      this.AddJoin(result, outPt, e.Top);\n    }\n    return result;\n  };\n  ClipperLib.Clipper.prototype.CreateOutRec = function ()\n  {\n    var result = new ClipperLib.OutRec();\n    result.Idx = -1;\n    result.IsHole = false;\n    result.IsOpen = false;\n    result.FirstLeft = null;\n    result.Pts = null;\n    result.BottomPt = null;\n    result.PolyNode = null;\n    this.m_PolyOuts.push(result);\n    result.Idx = this.m_PolyOuts.length - 1;\n    return result;\n  };\n  ClipperLib.Clipper.prototype.AddOutPt = function (e, pt)\n  {\n    var ToFront = (e.Side == ClipperLib.EdgeSide.esLeft);\n    if (e.OutIdx < 0)\n    {\n      var outRec = this.CreateOutRec();\n      outRec.IsOpen = (e.WindDelta === 0);\n      var newOp = new ClipperLib.OutPt();\n      outRec.Pts = newOp;\n      newOp.Idx = outRec.Idx;\n      //newOp.Pt = pt;\n      newOp.Pt.X = pt.X;\n      newOp.Pt.Y = pt.Y;\n      newOp.Next = newOp;\n      newOp.Prev = newOp;\n      if (!outRec.IsOpen)\n        this.SetHoleState(e, outRec);\n      e.OutIdx = outRec.Idx;\n      //nb: do this after SetZ !\n      return newOp;\n    }\n    else\n    {\n      var outRec = this.m_PolyOuts[e.OutIdx];\n      //OutRec.Pts is the 'Left-most' point & OutRec.Pts.Prev is the 'Right-most'\n      var op = outRec.Pts;\n      if (ToFront && ClipperLib.IntPoint.op_Equality(pt, op.Pt))\n        return op;\n      else if (!ToFront && ClipperLib.IntPoint.op_Equality(pt, op.Prev.Pt))\n        return op.Prev;\n      var newOp = new ClipperLib.OutPt();\n      newOp.Idx = outRec.Idx;\n      //newOp.Pt = pt;\n      newOp.Pt.X = pt.X;\n      newOp.Pt.Y = pt.Y;\n      newOp.Next = op;\n      newOp.Prev = op.Prev;\n      newOp.Prev.Next = newOp;\n      op.Prev = newOp;\n      if (ToFront)\n        outRec.Pts = newOp;\n      return newOp;\n    }\n  };\n  ClipperLib.Clipper.prototype.SwapPoints = function (pt1, pt2)\n  {\n    var tmp = new ClipperLib.IntPoint(pt1.Value);\n    //pt1.Value = pt2.Value;\n    pt1.Value.X = pt2.Value.X;\n    pt1.Value.Y = pt2.Value.Y;\n    //pt2.Value = tmp;\n    pt2.Value.X = tmp.X;\n    pt2.Value.Y = tmp.Y;\n  };\n  ClipperLib.Clipper.prototype.HorzSegmentsOverlap = function (seg1a, seg1b, seg2a, seg2b)\n\t{\n\t\tvar tmp;\n\t\tif (seg1a > seg1b)\n\t\t{\n\t\t\ttmp = seg1a;\n\t\t\tseg1a = seg1b;\n\t\t\tseg1b = tmp;\n\t\t}\n\t\tif (seg2a > seg2b)\n\t\t{\n\t\t\ttmp = seg2a;\n\t\t\tseg2a = seg2b;\n\t\t\tseg2b = tmp;\n\t\t}\n\t\treturn (seg1a < seg2b) && (seg2a < seg1b);\n\t}\n\n  ClipperLib.Clipper.prototype.SetHoleState = function (e, outRec)\n  {\n    var isHole = false;\n    var e2 = e.PrevInAEL;\n    while (e2 !== null)\n    {\n      if (e2.OutIdx >= 0 && e2.WindDelta != 0)\n      {\n        isHole = !isHole;\n        if (outRec.FirstLeft === null)\n          outRec.FirstLeft = this.m_PolyOuts[e2.OutIdx];\n      }\n      e2 = e2.PrevInAEL;\n    }\n    if (isHole)\n      outRec.IsHole = true;\n  };\n  ClipperLib.Clipper.prototype.GetDx = function (pt1, pt2)\n  {\n    if (pt1.Y == pt2.Y)\n      return ClipperLib.ClipperBase.horizontal;\n    else\n      return (pt2.X - pt1.X) / (pt2.Y - pt1.Y);\n  };\n  ClipperLib.Clipper.prototype.FirstIsBottomPt = function (btmPt1, btmPt2)\n  {\n    var p = btmPt1.Prev;\n    while ((ClipperLib.IntPoint.op_Equality(p.Pt, btmPt1.Pt)) && (p != btmPt1))\n      p = p.Prev;\n    var dx1p = Math.abs(this.GetDx(btmPt1.Pt, p.Pt));\n    p = btmPt1.Next;\n    while ((ClipperLib.IntPoint.op_Equality(p.Pt, btmPt1.Pt)) && (p != btmPt1))\n      p = p.Next;\n    var dx1n = Math.abs(this.GetDx(btmPt1.Pt, p.Pt));\n    p = btmPt2.Prev;\n    while ((ClipperLib.IntPoint.op_Equality(p.Pt, btmPt2.Pt)) && (p != btmPt2))\n      p = p.Prev;\n    var dx2p = Math.abs(this.GetDx(btmPt2.Pt, p.Pt));\n    p = btmPt2.Next;\n    while ((ClipperLib.IntPoint.op_Equality(p.Pt, btmPt2.Pt)) && (p != btmPt2))\n      p = p.Next;\n    var dx2n = Math.abs(this.GetDx(btmPt2.Pt, p.Pt));\n    return (dx1p >= dx2p && dx1p >= dx2n) || (dx1n >= dx2p && dx1n >= dx2n);\n  };\n  ClipperLib.Clipper.prototype.GetBottomPt = function (pp)\n  {\n    var dups = null;\n    var p = pp.Next;\n    while (p != pp)\n    {\n      if (p.Pt.Y > pp.Pt.Y)\n      {\n        pp = p;\n        dups = null;\n      }\n      else if (p.Pt.Y == pp.Pt.Y && p.Pt.X <= pp.Pt.X)\n      {\n        if (p.Pt.X < pp.Pt.X)\n        {\n          dups = null;\n          pp = p;\n        }\n        else\n        {\n          if (p.Next != pp && p.Prev != pp)\n            dups = p;\n        }\n      }\n      p = p.Next;\n    }\n    if (dups !== null)\n    {\n      //there appears to be at least 2 vertices at bottomPt so ...\n      while (dups != p)\n      {\n        if (!this.FirstIsBottomPt(p, dups))\n          pp = dups;\n        dups = dups.Next;\n        while (ClipperLib.IntPoint.op_Inequality(dups.Pt, pp.Pt))\n          dups = dups.Next;\n      }\n    }\n    return pp;\n  };\n  ClipperLib.Clipper.prototype.GetLowermostRec = function (outRec1, outRec2)\n  {\n    //work out which polygon fragment has the correct hole state ...\n    if (outRec1.BottomPt === null)\n      outRec1.BottomPt = this.GetBottomPt(outRec1.Pts);\n    if (outRec2.BottomPt === null)\n      outRec2.BottomPt = this.GetBottomPt(outRec2.Pts);\n    var bPt1 = outRec1.BottomPt;\n    var bPt2 = outRec2.BottomPt;\n    if (bPt1.Pt.Y > bPt2.Pt.Y)\n      return outRec1;\n    else if (bPt1.Pt.Y < bPt2.Pt.Y)\n      return outRec2;\n    else if (bPt1.Pt.X < bPt2.Pt.X)\n      return outRec1;\n    else if (bPt1.Pt.X > bPt2.Pt.X)\n      return outRec2;\n    else if (bPt1.Next == bPt1)\n      return outRec2;\n    else if (bPt2.Next == bPt2)\n      return outRec1;\n    else if (this.FirstIsBottomPt(bPt1, bPt2))\n      return outRec1;\n    else\n      return outRec2;\n  };\n  ClipperLib.Clipper.prototype.Param1RightOfParam2 = function (outRec1, outRec2)\n  {\n    do {\n      outRec1 = outRec1.FirstLeft;\n      if (outRec1 == outRec2)\n        return true;\n    }\n    while (outRec1 !== null)\n    return false;\n  };\n  ClipperLib.Clipper.prototype.GetOutRec = function (idx)\n  {\n    var outrec = this.m_PolyOuts[idx];\n    while (outrec != this.m_PolyOuts[outrec.Idx])\n      outrec = this.m_PolyOuts[outrec.Idx];\n    return outrec;\n  };\n  ClipperLib.Clipper.prototype.AppendPolygon = function (e1, e2)\n  {\n    //get the start and ends of both output polygons ...\n    var outRec1 = this.m_PolyOuts[e1.OutIdx];\n    var outRec2 = this.m_PolyOuts[e2.OutIdx];\n    var holeStateRec;\n    if (this.Param1RightOfParam2(outRec1, outRec2))\n      holeStateRec = outRec2;\n    else if (this.Param1RightOfParam2(outRec2, outRec1))\n      holeStateRec = outRec1;\n    else\n      holeStateRec = this.GetLowermostRec(outRec1, outRec2);\n    var p1_lft = outRec1.Pts;\n    var p1_rt = p1_lft.Prev;\n    var p2_lft = outRec2.Pts;\n    var p2_rt = p2_lft.Prev;\n    var side;\n    //join e2 poly onto e1 poly and delete pointers to e2 ...\n    if (e1.Side == ClipperLib.EdgeSide.esLeft)\n    {\n      if (e2.Side == ClipperLib.EdgeSide.esLeft)\n      {\n        //z y x a b c\n        this.ReversePolyPtLinks(p2_lft);\n        p2_lft.Next = p1_lft;\n        p1_lft.Prev = p2_lft;\n        p1_rt.Next = p2_rt;\n        p2_rt.Prev = p1_rt;\n        outRec1.Pts = p2_rt;\n      }\n      else\n      {\n        //x y z a b c\n        p2_rt.Next = p1_lft;\n        p1_lft.Prev = p2_rt;\n        p2_lft.Prev = p1_rt;\n        p1_rt.Next = p2_lft;\n        outRec1.Pts = p2_lft;\n      }\n      side = ClipperLib.EdgeSide.esLeft;\n    }\n    else\n    {\n      if (e2.Side == ClipperLib.EdgeSide.esRight)\n      {\n        //a b c z y x\n        this.ReversePolyPtLinks(p2_lft);\n        p1_rt.Next = p2_rt;\n        p2_rt.Prev = p1_rt;\n        p2_lft.Next = p1_lft;\n        p1_lft.Prev = p2_lft;\n      }\n      else\n      {\n        //a b c x y z\n        p1_rt.Next = p2_lft;\n        p2_lft.Prev = p1_rt;\n        p1_lft.Prev = p2_rt;\n        p2_rt.Next = p1_lft;\n      }\n      side = ClipperLib.EdgeSide.esRight;\n    }\n    outRec1.BottomPt = null;\n    if (holeStateRec == outRec2)\n    {\n      if (outRec2.FirstLeft != outRec1)\n        outRec1.FirstLeft = outRec2.FirstLeft;\n      outRec1.IsHole = outRec2.IsHole;\n    }\n    outRec2.Pts = null;\n    outRec2.BottomPt = null;\n    outRec2.FirstLeft = outRec1;\n    var OKIdx = e1.OutIdx;\n    var ObsoleteIdx = e2.OutIdx;\n    e1.OutIdx = -1;\n    //nb: safe because we only get here via AddLocalMaxPoly\n    e2.OutIdx = -1;\n    var e = this.m_ActiveEdges;\n    while (e !== null)\n    {\n      if (e.OutIdx == ObsoleteIdx)\n      {\n        e.OutIdx = OKIdx;\n        e.Side = side;\n        break;\n      }\n      e = e.NextInAEL;\n    }\n    outRec2.Idx = outRec1.Idx;\n  };\n  ClipperLib.Clipper.prototype.ReversePolyPtLinks = function (pp)\n  {\n    if (pp === null)\n      return;\n    var pp1;\n    var pp2;\n    pp1 = pp;\n    do {\n      pp2 = pp1.Next;\n      pp1.Next = pp1.Prev;\n      pp1.Prev = pp2;\n      pp1 = pp2;\n    }\n    while (pp1 != pp)\n  };\n  ClipperLib.Clipper.SwapSides = function (edge1, edge2)\n  {\n    var side = edge1.Side;\n    edge1.Side = edge2.Side;\n    edge2.Side = side;\n  };\n  ClipperLib.Clipper.SwapPolyIndexes = function (edge1, edge2)\n  {\n    var outIdx = edge1.OutIdx;\n    edge1.OutIdx = edge2.OutIdx;\n    edge2.OutIdx = outIdx;\n  };\n  ClipperLib.Clipper.prototype.IntersectEdges = function (e1, e2, pt)\n  {\n    //e1 will be to the left of e2 BELOW the intersection. Therefore e1 is before\n    //e2 in AEL except when e1 is being inserted at the intersection point ...\n    var e1Contributing = (e1.OutIdx >= 0);\n    var e2Contributing = (e2.OutIdx >= 0);\n\n    if (use_xyz)\n    \tthis.SetZ(pt, e1, e2);\n\n    if (use_lines)\n    {\n      //if either edge is on an OPEN path ...\n      if (e1.WindDelta === 0 || e2.WindDelta === 0)\n      {\n        //ignore subject-subject open path intersections UNLESS they\n        //are both open paths, AND they are both 'contributing maximas' ...\n\t\t\t\tif (e1.WindDelta == 0 && e2.WindDelta == 0) return;\n        //if intersecting a subj line with a subj poly ...\n        else if (e1.PolyTyp == e2.PolyTyp &&\n          e1.WindDelta != e2.WindDelta && this.m_ClipType == ClipperLib.ClipType.ctUnion)\n        {\n          if (e1.WindDelta === 0)\n          {\n            if (e2Contributing)\n            {\n              this.AddOutPt(e1, pt);\n              if (e1Contributing)\n                e1.OutIdx = -1;\n            }\n          }\n          else\n          {\n            if (e1Contributing)\n            {\n              this.AddOutPt(e2, pt);\n              if (e2Contributing)\n                e2.OutIdx = -1;\n            }\n          }\n        }\n        else if (e1.PolyTyp != e2.PolyTyp)\n        {\n          if ((e1.WindDelta === 0) && Math.abs(e2.WindCnt) == 1 &&\n            (this.m_ClipType != ClipperLib.ClipType.ctUnion || e2.WindCnt2 === 0))\n          {\n            this.AddOutPt(e1, pt);\n            if (e1Contributing)\n              e1.OutIdx = -1;\n          }\n          else if ((e2.WindDelta === 0) && (Math.abs(e1.WindCnt) == 1) &&\n            (this.m_ClipType != ClipperLib.ClipType.ctUnion || e1.WindCnt2 === 0))\n          {\n            this.AddOutPt(e2, pt);\n            if (e2Contributing)\n              e2.OutIdx = -1;\n          }\n        }\n        return;\n      }\n    }\n    //update winding counts...\n    //assumes that e1 will be to the Right of e2 ABOVE the intersection\n    if (e1.PolyTyp == e2.PolyTyp)\n    {\n      if (this.IsEvenOddFillType(e1))\n      {\n        var oldE1WindCnt = e1.WindCnt;\n        e1.WindCnt = e2.WindCnt;\n        e2.WindCnt = oldE1WindCnt;\n      }\n      else\n      {\n        if (e1.WindCnt + e2.WindDelta === 0)\n          e1.WindCnt = -e1.WindCnt;\n        else\n          e1.WindCnt += e2.WindDelta;\n        if (e2.WindCnt - e1.WindDelta === 0)\n          e2.WindCnt = -e2.WindCnt;\n        else\n          e2.WindCnt -= e1.WindDelta;\n      }\n    }\n    else\n    {\n      if (!this.IsEvenOddFillType(e2))\n        e1.WindCnt2 += e2.WindDelta;\n      else\n        e1.WindCnt2 = (e1.WindCnt2 === 0) ? 1 : 0;\n      if (!this.IsEvenOddFillType(e1))\n        e2.WindCnt2 -= e1.WindDelta;\n      else\n        e2.WindCnt2 = (e2.WindCnt2 === 0) ? 1 : 0;\n    }\n    var e1FillType, e2FillType, e1FillType2, e2FillType2;\n    if (e1.PolyTyp == ClipperLib.PolyType.ptSubject)\n    {\n      e1FillType = this.m_SubjFillType;\n      e1FillType2 = this.m_ClipFillType;\n    }\n    else\n    {\n      e1FillType = this.m_ClipFillType;\n      e1FillType2 = this.m_SubjFillType;\n    }\n    if (e2.PolyTyp == ClipperLib.PolyType.ptSubject)\n    {\n      e2FillType = this.m_SubjFillType;\n      e2FillType2 = this.m_ClipFillType;\n    }\n    else\n    {\n      e2FillType = this.m_ClipFillType;\n      e2FillType2 = this.m_SubjFillType;\n    }\n    var e1Wc, e2Wc;\n    switch (e1FillType)\n    {\n    case ClipperLib.PolyFillType.pftPositive:\n      e1Wc = e1.WindCnt;\n      break;\n    case ClipperLib.PolyFillType.pftNegative:\n      e1Wc = -e1.WindCnt;\n      break;\n    default:\n      e1Wc = Math.abs(e1.WindCnt);\n      break;\n    }\n    switch (e2FillType)\n    {\n    case ClipperLib.PolyFillType.pftPositive:\n      e2Wc = e2.WindCnt;\n      break;\n    case ClipperLib.PolyFillType.pftNegative:\n      e2Wc = -e2.WindCnt;\n      break;\n    default:\n      e2Wc = Math.abs(e2.WindCnt);\n      break;\n    }\n    if (e1Contributing && e2Contributing)\n    {\n\t\t\tif ((e1Wc != 0 && e1Wc != 1) || (e2Wc != 0 && e2Wc != 1) ||\n\t\t\t(e1.PolyTyp != e2.PolyTyp && this.m_ClipType != ClipperLib.ClipType.ctXor))\n\t\t\t{\n\t\t\t\tthis.AddLocalMaxPoly(e1, e2, pt);\n\t\t\t}\n      else\n      {\n        this.AddOutPt(e1, pt);\n        this.AddOutPt(e2, pt);\n        ClipperLib.Clipper.SwapSides(e1, e2);\n        ClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n      }\n    }\n    else if (e1Contributing)\n    {\n      if (e2Wc === 0 || e2Wc == 1)\n      {\n        this.AddOutPt(e1, pt);\n        ClipperLib.Clipper.SwapSides(e1, e2);\n        ClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n      }\n    }\n    else if (e2Contributing)\n    {\n      if (e1Wc === 0 || e1Wc == 1)\n      {\n        this.AddOutPt(e2, pt);\n        ClipperLib.Clipper.SwapSides(e1, e2);\n        ClipperLib.Clipper.SwapPolyIndexes(e1, e2);\n      }\n    }\n\t\telse if ( (e1Wc == 0 || e1Wc == 1) && (e2Wc == 0 || e2Wc == 1))\n    {\n      //neither edge is currently contributing ...\n      var e1Wc2, e2Wc2;\n      switch (e1FillType2)\n      {\n      case ClipperLib.PolyFillType.pftPositive:\n        e1Wc2 = e1.WindCnt2;\n        break;\n      case ClipperLib.PolyFillType.pftNegative:\n        e1Wc2 = -e1.WindCnt2;\n        break;\n      default:\n        e1Wc2 = Math.abs(e1.WindCnt2);\n        break;\n      }\n      switch (e2FillType2)\n      {\n      case ClipperLib.PolyFillType.pftPositive:\n        e2Wc2 = e2.WindCnt2;\n        break;\n      case ClipperLib.PolyFillType.pftNegative:\n        e2Wc2 = -e2.WindCnt2;\n        break;\n      default:\n        e2Wc2 = Math.abs(e2.WindCnt2);\n        break;\n      }\n      if (e1.PolyTyp != e2.PolyTyp)\n      {\n        this.AddLocalMinPoly(e1, e2, pt);\n      }\n      else if (e1Wc == 1 && e2Wc == 1)\n        switch (this.m_ClipType)\n        {\n        case ClipperLib.ClipType.ctIntersection:\n          if (e1Wc2 > 0 && e2Wc2 > 0)\n            this.AddLocalMinPoly(e1, e2, pt);\n          break;\n        case ClipperLib.ClipType.ctUnion:\n          if (e1Wc2 <= 0 && e2Wc2 <= 0)\n            this.AddLocalMinPoly(e1, e2, pt);\n          break;\n        case ClipperLib.ClipType.ctDifference:\n          if (((e1.PolyTyp == ClipperLib.PolyType.ptClip) && (e1Wc2 > 0) && (e2Wc2 > 0)) ||\n            ((e1.PolyTyp == ClipperLib.PolyType.ptSubject) && (e1Wc2 <= 0) && (e2Wc2 <= 0)))\n            this.AddLocalMinPoly(e1, e2, pt);\n          break;\n        case ClipperLib.ClipType.ctXor:\n          this.AddLocalMinPoly(e1, e2, pt);\n          break;\n        }\n      else\n        ClipperLib.Clipper.SwapSides(e1, e2);\n    }\n  };\n  ClipperLib.Clipper.prototype.DeleteFromAEL = function (e)\n  {\n    var AelPrev = e.PrevInAEL;\n    var AelNext = e.NextInAEL;\n    if (AelPrev === null && AelNext === null && (e != this.m_ActiveEdges))\n      return;\n    //already deleted\n    if (AelPrev !== null)\n      AelPrev.NextInAEL = AelNext;\n    else\n      this.m_ActiveEdges = AelNext;\n    if (AelNext !== null)\n      AelNext.PrevInAEL = AelPrev;\n    e.NextInAEL = null;\n    e.PrevInAEL = null;\n  };\n  ClipperLib.Clipper.prototype.DeleteFromSEL = function (e)\n  {\n    var SelPrev = e.PrevInSEL;\n    var SelNext = e.NextInSEL;\n    if (SelPrev === null && SelNext === null && (e != this.m_SortedEdges))\n      return;\n    //already deleted\n    if (SelPrev !== null)\n      SelPrev.NextInSEL = SelNext;\n    else\n      this.m_SortedEdges = SelNext;\n    if (SelNext !== null)\n      SelNext.PrevInSEL = SelPrev;\n    e.NextInSEL = null;\n    e.PrevInSEL = null;\n  };\n  ClipperLib.Clipper.prototype.UpdateEdgeIntoAEL = function (e)\n  {\n    if (e.NextInLML === null)\n      ClipperLib.Error(\"UpdateEdgeIntoAEL: invalid call\");\n    var AelPrev = e.PrevInAEL;\n    var AelNext = e.NextInAEL;\n    e.NextInLML.OutIdx = e.OutIdx;\n    if (AelPrev !== null)\n      AelPrev.NextInAEL = e.NextInLML;\n    else\n      this.m_ActiveEdges = e.NextInLML;\n    if (AelNext !== null)\n      AelNext.PrevInAEL = e.NextInLML;\n    e.NextInLML.Side = e.Side;\n    e.NextInLML.WindDelta = e.WindDelta;\n    e.NextInLML.WindCnt = e.WindCnt;\n    e.NextInLML.WindCnt2 = e.WindCnt2;\n    e = e.NextInLML;\n    //    e.Curr = e.Bot;\n    e.Curr.X = e.Bot.X;\n    e.Curr.Y = e.Bot.Y;\n    e.PrevInAEL = AelPrev;\n    e.NextInAEL = AelNext;\n    if (!ClipperLib.ClipperBase.IsHorizontal(e))\n      this.InsertScanbeam(e.Top.Y);\n    return e;\n  };\n  ClipperLib.Clipper.prototype.ProcessHorizontals = function (isTopOfScanbeam)\n  {\n    var horzEdge = this.m_SortedEdges;\n    while (horzEdge !== null)\n    {\n      this.DeleteFromSEL(horzEdge);\n      this.ProcessHorizontal(horzEdge, isTopOfScanbeam);\n      horzEdge = this.m_SortedEdges;\n    }\n  };\n  ClipperLib.Clipper.prototype.GetHorzDirection = function (HorzEdge, $var)\n  {\n    if (HorzEdge.Bot.X < HorzEdge.Top.X)\n    {\n        $var.Left = HorzEdge.Bot.X;\n        $var.Right = HorzEdge.Top.X;\n        $var.Dir = ClipperLib.Direction.dLeftToRight;\n    }\n    else\n    {\n        $var.Left = HorzEdge.Top.X;\n        $var.Right = HorzEdge.Bot.X;\n        $var.Dir = ClipperLib.Direction.dRightToLeft;\n    }\n  };\n  ClipperLib.Clipper.prototype.ProcessHorizontal = function (horzEdge, isTopOfScanbeam)\n  {\n    var $var = {Dir: null, Left: null, Right: null};\n    this.GetHorzDirection(horzEdge, $var);\n    var dir = $var.Dir;\n    var horzLeft = $var.Left;\n    var horzRight = $var.Right;\n\n    var eLastHorz = horzEdge,\n      eMaxPair = null;\n    while (eLastHorz.NextInLML !== null && ClipperLib.ClipperBase.IsHorizontal(eLastHorz.NextInLML))\n      eLastHorz = eLastHorz.NextInLML;\n    if (eLastHorz.NextInLML === null)\n      eMaxPair = this.GetMaximaPair(eLastHorz);\n    for (;;)\n    {\n      var IsLastHorz = (horzEdge == eLastHorz);\n      var e = this.GetNextInAEL(horzEdge, dir);\n      while (e !== null)\n      {\n        //Break if we've got to the end of an intermediate horizontal edge ...\n        //nb: Smaller Dx's are to the right of larger Dx's ABOVE the horizontal.\n        if (e.Curr.X == horzEdge.Top.X && horzEdge.NextInLML !== null && e.Dx < horzEdge.NextInLML.Dx)\n          break;\n        var eNext = this.GetNextInAEL(e, dir);\n        //saves eNext for later\n        if ((dir == ClipperLib.Direction.dLeftToRight && e.Curr.X <= horzRight) || (dir == ClipperLib.Direction.dRightToLeft && e.Curr.X >= horzLeft))\n        {\n          //so far we're still in range of the horizontal Edge  but make sure\n          //we're at the last of consec. horizontals when matching with eMaxPair\n          if (e == eMaxPair && IsLastHorz)\n          {\n\t\t\t\t\t\tif (horzEdge.OutIdx >= 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar op1 = this.AddOutPt(horzEdge, horzEdge.Top);\n\t\t\t\t\t\t\tvar eNextHorz = this.m_SortedEdges;\n\t\t\t\t\t\t\twhile (eNextHorz !== null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (eNextHorz.OutIdx >= 0 &&\n\t\t\t\t\t\t\t\t\tthis.HorzSegmentsOverlap(horzEdge.Bot.X,\n\t\t\t\t\t\t\t\t\thorzEdge.Top.X, eNextHorz.Bot.X, eNextHorz.Top.X))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar op2 = this.AddOutPt(eNextHorz, eNextHorz.Bot);\n\t\t\t\t\t\t\t\t\tthis.AddJoin(op2, op1, eNextHorz.Top);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\teNextHorz = eNextHorz.NextInSEL;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.AddGhostJoin(op1, horzEdge.Bot);\n\t\t\t\t\t\t\tthis.AddLocalMaxPoly(horzEdge, eMaxPair, horzEdge.Top);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.DeleteFromAEL(horzEdge);\n\t\t\t\t\t\tthis.DeleteFromAEL(eMaxPair);\n            return;\n          }\n          else if (dir == ClipperLib.Direction.dLeftToRight)\n          {\n            var Pt = new ClipperLib.IntPoint(e.Curr.X, horzEdge.Curr.Y);\n            this.IntersectEdges(horzEdge, e, Pt);\n          }\n          else\n          {\n            var Pt = new ClipperLib.IntPoint(e.Curr.X, horzEdge.Curr.Y);\n            this.IntersectEdges(e, horzEdge, Pt);\n          }\n          this.SwapPositionsInAEL(horzEdge, e);\n        }\n        else if ((dir == ClipperLib.Direction.dLeftToRight && e.Curr.X >= horzRight) || (dir == ClipperLib.Direction.dRightToLeft && e.Curr.X <= horzLeft))\n          break;\n        e = eNext;\n      }\n      //end while\n      if (horzEdge.NextInLML !== null && ClipperLib.ClipperBase.IsHorizontal(horzEdge.NextInLML))\n      {\n        horzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n        if (horzEdge.OutIdx >= 0)\n          this.AddOutPt(horzEdge, horzEdge.Bot);\n\n          var $var = {Dir: dir, Left: horzLeft, Right: horzRight};\n          this.GetHorzDirection(horzEdge, $var);\n          dir = $var.Dir;\n          horzLeft = $var.Left;\n          horzRight = $var.Right;\n      }\n      else\n        break;\n    }\n    //end for (;;)\n    if (horzEdge.NextInLML !== null)\n    {\n      if (horzEdge.OutIdx >= 0)\n      {\n        var op1 = this.AddOutPt(horzEdge, horzEdge.Top);\n\t\t\t\tif (isTopOfScanbeam) this.AddGhostJoin(op1, horzEdge.Bot);\n        horzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n        if (horzEdge.WindDelta === 0)\n          return;\n        //nb: HorzEdge is no longer horizontal here\n        var ePrev = horzEdge.PrevInAEL;\n        var eNext = horzEdge.NextInAEL;\n        if (ePrev !== null && ePrev.Curr.X == horzEdge.Bot.X &&\n          ePrev.Curr.Y == horzEdge.Bot.Y && ePrev.WindDelta !== 0 &&\n          (ePrev.OutIdx >= 0 && ePrev.Curr.Y > ePrev.Top.Y &&\n            ClipperLib.ClipperBase.SlopesEqual(horzEdge, ePrev, this.m_UseFullRange)))\n        {\n          var op2 = this.AddOutPt(ePrev, horzEdge.Bot);\n          this.AddJoin(op1, op2, horzEdge.Top);\n        }\n        else if (eNext !== null && eNext.Curr.X == horzEdge.Bot.X &&\n          eNext.Curr.Y == horzEdge.Bot.Y && eNext.WindDelta !== 0 &&\n          eNext.OutIdx >= 0 && eNext.Curr.Y > eNext.Top.Y &&\n          ClipperLib.ClipperBase.SlopesEqual(horzEdge, eNext, this.m_UseFullRange))\n        {\n          var op2 = this.AddOutPt(eNext, horzEdge.Bot);\n          this.AddJoin(op1, op2, horzEdge.Top);\n        }\n      }\n      else horzEdge = this.UpdateEdgeIntoAEL(horzEdge);\n    }\n  \telse\n    {\n      if (horzEdge.OutIdx >= 0)\n        this.AddOutPt(horzEdge, horzEdge.Top);\n      this.DeleteFromAEL(horzEdge);\n    }\n  };\n  ClipperLib.Clipper.prototype.GetNextInAEL = function (e, Direction)\n  {\n    return Direction == ClipperLib.Direction.dLeftToRight ? e.NextInAEL : e.PrevInAEL;\n  };\n  ClipperLib.Clipper.prototype.IsMinima = function (e)\n  {\n    return e !== null && (e.Prev.NextInLML != e) && (e.Next.NextInLML != e);\n  };\n  ClipperLib.Clipper.prototype.IsMaxima = function (e, Y)\n  {\n    return (e !== null && e.Top.Y == Y && e.NextInLML === null);\n  };\n  ClipperLib.Clipper.prototype.IsIntermediate = function (e, Y)\n  {\n    return (e.Top.Y == Y && e.NextInLML !== null);\n  };\n  ClipperLib.Clipper.prototype.GetMaximaPair = function (e)\n  {\n    var result = null;\n    if ((ClipperLib.IntPoint.op_Equality(e.Next.Top, e.Top)) && e.Next.NextInLML === null)\n      result = e.Next;\n    else if ((ClipperLib.IntPoint.op_Equality(e.Prev.Top, e.Top)) && e.Prev.NextInLML === null)\n      result = e.Prev;\n    if (result !== null && (result.OutIdx == -2 || (result.NextInAEL == result.PrevInAEL && !ClipperLib.ClipperBase.IsHorizontal(result))))\n      return null;\n    return result;\n  };\n\n  ClipperLib.Clipper.prototype.ProcessIntersections = function (topY)\n  {\n    if (this.m_ActiveEdges == null)\n      return true;\n    try\n    {\n      this.BuildIntersectList(topY);\n      if (this.m_IntersectList.length == 0)\n        return true;\n      if (this.m_IntersectList.length == 1 || this.FixupIntersectionOrder())\n        this.ProcessIntersectList();\n      else\n        return false;\n    }\n    catch ($$e2)\n    {\n      this.m_SortedEdges = null;\n      this.m_IntersectList.length = 0;\n      ClipperLib.Error(\"ProcessIntersections error\");\n    }\n    this.m_SortedEdges = null;\n    return true;\n  };\n  ClipperLib.Clipper.prototype.BuildIntersectList = function (topY)\n  {\n    if (this.m_ActiveEdges === null)\n      return;\n    //prepare for sorting ...\n    var e = this.m_ActiveEdges;\n    //console.log(JSON.stringify(JSON.decycle( e )));\n    this.m_SortedEdges = e;\n    while (e !== null)\n    {\n      e.PrevInSEL = e.PrevInAEL;\n      e.NextInSEL = e.NextInAEL;\n      e.Curr.X = ClipperLib.Clipper.TopX(e, topY);\n      e = e.NextInAEL;\n    }\n    //bubblesort ...\n    var isModified = true;\n    while (isModified && this.m_SortedEdges !== null)\n    {\n      isModified = false;\n      e = this.m_SortedEdges;\n      while (e.NextInSEL !== null)\n      {\n        var eNext = e.NextInSEL;\n        var pt = new ClipperLib.IntPoint();\n        //console.log(\"e.Curr.X: \" + e.Curr.X + \" eNext.Curr.X\" + eNext.Curr.X);\n        if (e.Curr.X > eNext.Curr.X)\n        {\n\t\t\t\t\tthis.IntersectPoint(e, eNext, pt);\n          var newNode = new ClipperLib.IntersectNode();\n          newNode.Edge1 = e;\n          newNode.Edge2 = eNext;\n          //newNode.Pt = pt;\n          newNode.Pt.X = pt.X;\n          newNode.Pt.Y = pt.Y;\n          this.m_IntersectList.push(newNode);\n          this.SwapPositionsInSEL(e, eNext);\n          isModified = true;\n        }\n        else\n          e = eNext;\n      }\n      if (e.PrevInSEL !== null)\n        e.PrevInSEL.NextInSEL = null;\n      else\n        break;\n    }\n    this.m_SortedEdges = null;\n  };\n  ClipperLib.Clipper.prototype.EdgesAdjacent = function (inode)\n  {\n    return (inode.Edge1.NextInSEL == inode.Edge2) || (inode.Edge1.PrevInSEL == inode.Edge2);\n  };\n  ClipperLib.Clipper.IntersectNodeSort = function (node1, node2)\n  {\n    //the following typecast is safe because the differences in Pt.Y will\n    //be limited to the height of the scanbeam.\n    return (node2.Pt.Y - node1.Pt.Y);\n  };\n  ClipperLib.Clipper.prototype.FixupIntersectionOrder = function ()\n  {\n    //pre-condition: intersections are sorted bottom-most first.\n    //Now it's crucial that intersections are made only between adjacent edges,\n    //so to ensure this the order of intersections may need adjusting ...\n    this.m_IntersectList.sort(this.m_IntersectNodeComparer);\n    this.CopyAELToSEL();\n    var cnt = this.m_IntersectList.length;\n    for (var i = 0; i < cnt; i++)\n    {\n      if (!this.EdgesAdjacent(this.m_IntersectList[i]))\n      {\n        var j = i + 1;\n        while (j < cnt && !this.EdgesAdjacent(this.m_IntersectList[j]))\n          j++;\n        if (j == cnt)\n          return false;\n        var tmp = this.m_IntersectList[i];\n        this.m_IntersectList[i] = this.m_IntersectList[j];\n        this.m_IntersectList[j] = tmp;\n      }\n      this.SwapPositionsInSEL(this.m_IntersectList[i].Edge1, this.m_IntersectList[i].Edge2);\n    }\n    return true;\n  };\n  ClipperLib.Clipper.prototype.ProcessIntersectList = function ()\n  {\n    for (var i = 0, ilen = this.m_IntersectList.length; i < ilen; i++)\n    {\n      var iNode = this.m_IntersectList[i];\n      this.IntersectEdges(iNode.Edge1, iNode.Edge2, iNode.Pt);\n      this.SwapPositionsInAEL(iNode.Edge1, iNode.Edge2);\n    }\n    this.m_IntersectList.length = 0;\n  };\n  /*\n  --------------------------------\n  Round speedtest: http://jsperf.com/fastest-round\n  --------------------------------\n  */\n  var R1 = function (a)\n  {\n    return a < 0 ? Math.ceil(a - 0.5) : Math.round(a)\n  };\n  var R2 = function (a)\n  {\n    return a < 0 ? Math.ceil(a - 0.5) : Math.floor(a + 0.5)\n  };\n  var R3 = function (a)\n  {\n    return a < 0 ? -Math.round(Math.abs(a)) : Math.round(a)\n  };\n  var R4 = function (a)\n  {\n    if (a < 0)\n    {\n      a -= 0.5;\n      return a < -2147483648 ? Math.ceil(a) : a | 0;\n    }\n    else\n    {\n      a += 0.5;\n      return a > 2147483647 ? Math.floor(a) : a | 0;\n    }\n  };\n  if (browser.msie) ClipperLib.Clipper.Round = R1;\n  else if (browser.chromium) ClipperLib.Clipper.Round = R3;\n  else if (browser.safari) ClipperLib.Clipper.Round = R4;\n  else ClipperLib.Clipper.Round = R2; // eg. browser.chrome || browser.firefox || browser.opera\n  ClipperLib.Clipper.TopX = function (edge, currentY)\n  {\n    //if (edge.Bot == edge.Curr) alert (\"edge.Bot = edge.Curr\");\n    //if (edge.Bot == edge.Top) alert (\"edge.Bot = edge.Top\");\n    if (currentY == edge.Top.Y)\n      return edge.Top.X;\n    return edge.Bot.X + ClipperLib.Clipper.Round(edge.Dx * (currentY - edge.Bot.Y));\n  };\n  ClipperLib.Clipper.prototype.IntersectPoint = function (edge1, edge2, ip)\n  {\n    ip.X = 0;\n    ip.Y = 0;\n    var b1, b2;\n    //nb: with very large coordinate values, it's possible for SlopesEqual() to\n    //return false but for the edge.Dx value be equal due to double precision rounding.\n    if (edge1.Dx == edge2.Dx)\n\t\t{\n\t\t\tip.Y = edge1.Curr.Y;\n\t\t\tip.X = ClipperLib.Clipper.TopX(edge1, ip.Y);\n\t\t\treturn;\n    }\n    if (edge1.Delta.X === 0)\n    {\n      ip.X = edge1.Bot.X;\n      if (ClipperLib.ClipperBase.IsHorizontal(edge2))\n      {\n        ip.Y = edge2.Bot.Y;\n      }\n      else\n      {\n        b2 = edge2.Bot.Y - (edge2.Bot.X / edge2.Dx);\n        ip.Y = ClipperLib.Clipper.Round(ip.X / edge2.Dx + b2);\n      }\n    }\n    else if (edge2.Delta.X === 0)\n    {\n      ip.X = edge2.Bot.X;\n      if (ClipperLib.ClipperBase.IsHorizontal(edge1))\n      {\n        ip.Y = edge1.Bot.Y;\n      }\n      else\n      {\n        b1 = edge1.Bot.Y - (edge1.Bot.X / edge1.Dx);\n        ip.Y = ClipperLib.Clipper.Round(ip.X / edge1.Dx + b1);\n      }\n    }\n    else\n    {\n      b1 = edge1.Bot.X - edge1.Bot.Y * edge1.Dx;\n      b2 = edge2.Bot.X - edge2.Bot.Y * edge2.Dx;\n      var q = (b2 - b1) / (edge1.Dx - edge2.Dx);\n      ip.Y = ClipperLib.Clipper.Round(q);\n      if (Math.abs(edge1.Dx) < Math.abs(edge2.Dx))\n        ip.X = ClipperLib.Clipper.Round(edge1.Dx * q + b1);\n      else\n        ip.X = ClipperLib.Clipper.Round(edge2.Dx * q + b2);\n    }\n    if (ip.Y < edge1.Top.Y || ip.Y < edge2.Top.Y)\n    {\n      if (edge1.Top.Y > edge2.Top.Y)\n      {\n        ip.Y = edge1.Top.Y;\n        ip.X = ClipperLib.Clipper.TopX(edge2, edge1.Top.Y);\n        return ip.X < edge1.Top.X;\n      }\n      else\n        ip.Y = edge2.Top.Y;\n      if (Math.abs(edge1.Dx) < Math.abs(edge2.Dx))\n        ip.X = ClipperLib.Clipper.TopX(edge1, ip.Y);\n      else\n        ip.X = ClipperLib.Clipper.TopX(edge2, ip.Y);\n    }\n\t\t//finally, don't allow 'ip' to be BELOW curr.Y (ie bottom of scanbeam) ...\n\t\tif (ip.Y > edge1.Curr.Y)\n\t\t{\n\t\t\tip.Y = edge1.Curr.Y;\n\t\t\t//better to use the more vertical edge to derive X ...\n\t\t\tif (Math.abs(edge1.Dx) > Math.abs(edge2.Dx))\n\t\t\t\tip.X = ClipperLib.Clipper.TopX(edge2, ip.Y);\n\t\t\telse\n\t\t\t\tip.X = ClipperLib.Clipper.TopX(edge1, ip.Y);\n\t\t}\n  };\n\n  ClipperLib.Clipper.prototype.ProcessEdgesAtTopOfScanbeam = function (topY)\n  {\n    var e = this.m_ActiveEdges;\n    while (e !== null)\n    {\n      //1. process maxima, treating them as if they're 'bent' horizontal edges,\n      //   but exclude maxima with horizontal edges. nb: e can't be a horizontal.\n      var IsMaximaEdge = this.IsMaxima(e, topY);\n      if (IsMaximaEdge)\n      {\n        var eMaxPair = this.GetMaximaPair(e);\n        IsMaximaEdge = (eMaxPair === null || !ClipperLib.ClipperBase.IsHorizontal(eMaxPair));\n      }\n      if (IsMaximaEdge)\n      {\n        var ePrev = e.PrevInAEL;\n        this.DoMaxima(e);\n        if (ePrev === null)\n          e = this.m_ActiveEdges;\n        else\n          e = ePrev.NextInAEL;\n      }\n      else\n      {\n        //2. promote horizontal edges, otherwise update Curr.X and Curr.Y ...\n        if (this.IsIntermediate(e, topY) && ClipperLib.ClipperBase.IsHorizontal(e.NextInLML))\n        {\n          e = this.UpdateEdgeIntoAEL(e);\n          if (e.OutIdx >= 0)\n            this.AddOutPt(e, e.Bot);\n          this.AddEdgeToSEL(e);\n        }\n        else\n        {\n          e.Curr.X = ClipperLib.Clipper.TopX(e, topY);\n          e.Curr.Y = topY;\n        }\n        if (this.StrictlySimple)\n        {\n          var ePrev = e.PrevInAEL;\n          if ((e.OutIdx >= 0) && (e.WindDelta !== 0) && ePrev !== null &&\n            (ePrev.OutIdx >= 0) && (ePrev.Curr.X == e.Curr.X) &&\n            (ePrev.WindDelta !== 0))\n          {\n           \tvar ip = new ClipperLib.IntPoint(e.Curr);\n\n\t\t\t\t\t\tif(use_xyz)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.SetZ(ip, ePrev, e);\n\t\t\t\t\t\t}\n\n            var op = this.AddOutPt(ePrev, ip);\n            var op2 = this.AddOutPt(e, ip);\n            this.AddJoin(op, op2, ip);\n            //StrictlySimple (type-3) join\n          }\n        }\n        e = e.NextInAEL;\n      }\n    }\n    //3. Process horizontals at the Top of the scanbeam ...\n    this.ProcessHorizontals(true);\n    //4. Promote intermediate vertices ...\n    e = this.m_ActiveEdges;\n    while (e !== null)\n    {\n      if (this.IsIntermediate(e, topY))\n      {\n        var op = null;\n        if (e.OutIdx >= 0)\n          op = this.AddOutPt(e, e.Top);\n        e = this.UpdateEdgeIntoAEL(e);\n        //if output polygons share an edge, they'll need joining later ...\n        var ePrev = e.PrevInAEL;\n        var eNext = e.NextInAEL;\n        if (ePrev !== null && ePrev.Curr.X == e.Bot.X &&\n          ePrev.Curr.Y == e.Bot.Y && op !== null &&\n          ePrev.OutIdx >= 0 && ePrev.Curr.Y > ePrev.Top.Y &&\n          ClipperLib.ClipperBase.SlopesEqual(e, ePrev, this.m_UseFullRange) &&\n          (e.WindDelta !== 0) && (ePrev.WindDelta !== 0))\n        {\n          var op2 = this.AddOutPt(ePrev, e.Bot);\n          this.AddJoin(op, op2, e.Top);\n        }\n        else if (eNext !== null && eNext.Curr.X == e.Bot.X &&\n          eNext.Curr.Y == e.Bot.Y && op !== null &&\n          eNext.OutIdx >= 0 && eNext.Curr.Y > eNext.Top.Y &&\n          ClipperLib.ClipperBase.SlopesEqual(e, eNext, this.m_UseFullRange) &&\n          (e.WindDelta !== 0) && (eNext.WindDelta !== 0))\n        {\n          var op2 = this.AddOutPt(eNext, e.Bot);\n          this.AddJoin(op, op2, e.Top);\n        }\n      }\n      e = e.NextInAEL;\n    }\n  };\n  ClipperLib.Clipper.prototype.DoMaxima = function (e)\n  {\n    var eMaxPair = this.GetMaximaPair(e);\n    if (eMaxPair === null)\n    {\n      if (e.OutIdx >= 0)\n        this.AddOutPt(e, e.Top);\n      this.DeleteFromAEL(e);\n      return;\n    }\n    var eNext = e.NextInAEL;\n    var use_lines = true;\n    while (eNext !== null && eNext != eMaxPair)\n    {\n      this.IntersectEdges(e, eNext, e.Top);\n      this.SwapPositionsInAEL(e, eNext);\n      eNext = e.NextInAEL;\n    }\n    if (e.OutIdx == -1 && eMaxPair.OutIdx == -1)\n    {\n      this.DeleteFromAEL(e);\n      this.DeleteFromAEL(eMaxPair);\n    }\n    else if (e.OutIdx >= 0 && eMaxPair.OutIdx >= 0)\n    {\n    \tif (e.OutIdx >= 0) this.AddLocalMaxPoly(e, eMaxPair, e.Top);\n      this.DeleteFromAEL(e);\n      this.DeleteFromAEL(eMaxPair);\n    }\n    else if (use_lines && e.WindDelta === 0)\n    {\n      if (e.OutIdx >= 0)\n      {\n        this.AddOutPt(e, e.Top);\n        e.OutIdx = -1;\n      }\n      this.DeleteFromAEL(e);\n      if (eMaxPair.OutIdx >= 0)\n      {\n        this.AddOutPt(eMaxPair, e.Top);\n        eMaxPair.OutIdx = -1;\n      }\n      this.DeleteFromAEL(eMaxPair);\n    }\n    else\n      ClipperLib.Error(\"DoMaxima error\");\n  };\n  ClipperLib.Clipper.ReversePaths = function (polys)\n  {\n    for (var i = 0, len = polys.length; i < len; i++)\n      polys[i].reverse();\n  };\n  ClipperLib.Clipper.Orientation = function (poly)\n  {\n    return ClipperLib.Clipper.Area(poly) >= 0;\n  };\n  ClipperLib.Clipper.prototype.PointCount = function (pts)\n  {\n    if (pts === null)\n      return 0;\n    var result = 0;\n    var p = pts;\n    do {\n      result++;\n      p = p.Next;\n    }\n    while (p != pts)\n    return result;\n  };\n  ClipperLib.Clipper.prototype.BuildResult = function (polyg)\n  {\n    ClipperLib.Clear(polyg);\n    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n    {\n      var outRec = this.m_PolyOuts[i];\n      if (outRec.Pts === null)\n        continue;\n      var p = outRec.Pts.Prev;\n      var cnt = this.PointCount(p);\n      if (cnt < 2)\n        continue;\n      var pg = new Array(cnt);\n      for (var j = 0; j < cnt; j++)\n      {\n        pg[j] = p.Pt;\n        p = p.Prev;\n      }\n      polyg.push(pg);\n    }\n  };\n  ClipperLib.Clipper.prototype.BuildResult2 = function (polytree)\n  {\n    polytree.Clear();\n    //add each output polygon/contour to polytree ...\n    //polytree.m_AllPolys.set_Capacity(this.m_PolyOuts.length);\n    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n    {\n      var outRec = this.m_PolyOuts[i];\n      var cnt = this.PointCount(outRec.Pts);\n      if ((outRec.IsOpen && cnt < 2) || (!outRec.IsOpen && cnt < 3))\n        continue;\n      this.FixHoleLinkage(outRec);\n      var pn = new ClipperLib.PolyNode();\n      polytree.m_AllPolys.push(pn);\n      outRec.PolyNode = pn;\n      pn.m_polygon.length = cnt;\n      var op = outRec.Pts.Prev;\n      for (var j = 0; j < cnt; j++)\n      {\n        pn.m_polygon[j] = op.Pt;\n        op = op.Prev;\n      }\n    }\n    //fixup PolyNode links etc ...\n    //polytree.m_Childs.set_Capacity(this.m_PolyOuts.length);\n    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n    {\n      var outRec = this.m_PolyOuts[i];\n      if (outRec.PolyNode === null)\n        continue;\n      else if (outRec.IsOpen)\n      {\n        outRec.PolyNode.IsOpen = true;\n        polytree.AddChild(outRec.PolyNode);\n      }\n      else if (outRec.FirstLeft !== null && outRec.FirstLeft.PolyNode != null)\n        outRec.FirstLeft.PolyNode.AddChild(outRec.PolyNode);\n      else\n        polytree.AddChild(outRec.PolyNode);\n    }\n  };\n  ClipperLib.Clipper.prototype.FixupOutPolygon = function (outRec)\n  {\n    //FixupOutPolygon() - removes duplicate points and simplifies consecutive\n    //parallel edges by removing the middle vertex.\n    var lastOK = null;\n    outRec.BottomPt = null;\n    var pp = outRec.Pts;\n    for (;;)\n    {\n      if (pp.Prev == pp || pp.Prev == pp.Next)\n      {\n        outRec.Pts = null;\n        return;\n      }\n      //test for duplicate points and collinear edges ...\n      if ((ClipperLib.IntPoint.op_Equality(pp.Pt, pp.Next.Pt)) || (ClipperLib.IntPoint.op_Equality(pp.Pt, pp.Prev.Pt)) ||\n        (ClipperLib.ClipperBase.SlopesEqual(pp.Prev.Pt, pp.Pt, pp.Next.Pt, this.m_UseFullRange) &&\n          (!this.PreserveCollinear || !this.Pt2IsBetweenPt1AndPt3(pp.Prev.Pt, pp.Pt, pp.Next.Pt))))\n      {\n        lastOK = null;\n        pp.Prev.Next = pp.Next;\n        pp.Next.Prev = pp.Prev;\n        pp = pp.Prev;\n      }\n      else if (pp == lastOK)\n        break;\n      else\n      {\n        if (lastOK === null)\n          lastOK = pp;\n        pp = pp.Next;\n      }\n    }\n    outRec.Pts = pp;\n  };\n  ClipperLib.Clipper.prototype.DupOutPt = function (outPt, InsertAfter)\n  {\n    var result = new ClipperLib.OutPt();\n    //result.Pt = outPt.Pt;\n    result.Pt.X = outPt.Pt.X;\n    result.Pt.Y = outPt.Pt.Y;\n    result.Idx = outPt.Idx;\n    if (InsertAfter)\n    {\n      result.Next = outPt.Next;\n      result.Prev = outPt;\n      outPt.Next.Prev = result;\n      outPt.Next = result;\n    }\n    else\n    {\n      result.Prev = outPt.Prev;\n      result.Next = outPt;\n      outPt.Prev.Next = result;\n      outPt.Prev = result;\n    }\n    return result;\n  };\n  ClipperLib.Clipper.prototype.GetOverlap = function (a1, a2, b1, b2, $val)\n  {\n    if (a1 < a2)\n    {\n      if (b1 < b2)\n      {\n        $val.Left = Math.max(a1, b1);\n        $val.Right = Math.min(a2, b2);\n      }\n      else\n      {\n        $val.Left = Math.max(a1, b2);\n        $val.Right = Math.min(a2, b1);\n      }\n    }\n    else\n    {\n      if (b1 < b2)\n      {\n        $val.Left = Math.max(a2, b1);\n        $val.Right = Math.min(a1, b2);\n      }\n      else\n      {\n        $val.Left = Math.max(a2, b2);\n        $val.Right = Math.min(a1, b1);\n      }\n    }\n    return $val.Left < $val.Right;\n  };\n  ClipperLib.Clipper.prototype.JoinHorz = function (op1, op1b, op2, op2b, Pt, DiscardLeft)\n  {\n    var Dir1 = (op1.Pt.X > op1b.Pt.X ? ClipperLib.Direction.dRightToLeft : ClipperLib.Direction.dLeftToRight);\n    var Dir2 = (op2.Pt.X > op2b.Pt.X ? ClipperLib.Direction.dRightToLeft : ClipperLib.Direction.dLeftToRight);\n    if (Dir1 == Dir2)\n      return false;\n    //When DiscardLeft, we want Op1b to be on the Left of Op1, otherwise we\n    //want Op1b to be on the Right. (And likewise with Op2 and Op2b.)\n    //So, to facilitate this while inserting Op1b and Op2b ...\n    //when DiscardLeft, make sure we're AT or RIGHT of Pt before adding Op1b,\n    //otherwise make sure we're AT or LEFT of Pt. (Likewise with Op2b.)\n    if (Dir1 == ClipperLib.Direction.dLeftToRight)\n    {\n      while (op1.Next.Pt.X <= Pt.X &&\n        op1.Next.Pt.X >= op1.Pt.X && op1.Next.Pt.Y == Pt.Y)\n        op1 = op1.Next;\n      if (DiscardLeft && (op1.Pt.X != Pt.X))\n        op1 = op1.Next;\n      op1b = this.DupOutPt(op1, !DiscardLeft);\n      if (ClipperLib.IntPoint.op_Inequality(op1b.Pt, Pt))\n      {\n        op1 = op1b;\n        //op1.Pt = Pt;\n        op1.Pt.X = Pt.X;\n        op1.Pt.Y = Pt.Y;\n        op1b = this.DupOutPt(op1, !DiscardLeft);\n      }\n    }\n    else\n    {\n      while (op1.Next.Pt.X >= Pt.X &&\n        op1.Next.Pt.X <= op1.Pt.X && op1.Next.Pt.Y == Pt.Y)\n        op1 = op1.Next;\n      if (!DiscardLeft && (op1.Pt.X != Pt.X))\n        op1 = op1.Next;\n      op1b = this.DupOutPt(op1, DiscardLeft);\n      if (ClipperLib.IntPoint.op_Inequality(op1b.Pt, Pt))\n      {\n        op1 = op1b;\n        //op1.Pt = Pt;\n        op1.Pt.X = Pt.X;\n        op1.Pt.Y = Pt.Y;\n        op1b = this.DupOutPt(op1, DiscardLeft);\n      }\n    }\n    if (Dir2 == ClipperLib.Direction.dLeftToRight)\n    {\n      while (op2.Next.Pt.X <= Pt.X &&\n        op2.Next.Pt.X >= op2.Pt.X && op2.Next.Pt.Y == Pt.Y)\n        op2 = op2.Next;\n      if (DiscardLeft && (op2.Pt.X != Pt.X))\n        op2 = op2.Next;\n      op2b = this.DupOutPt(op2, !DiscardLeft);\n      if (ClipperLib.IntPoint.op_Inequality(op2b.Pt, Pt))\n      {\n        op2 = op2b;\n        //op2.Pt = Pt;\n        op2.Pt.X = Pt.X;\n        op2.Pt.Y = Pt.Y;\n        op2b = this.DupOutPt(op2, !DiscardLeft);\n      }\n    }\n    else\n    {\n      while (op2.Next.Pt.X >= Pt.X &&\n        op2.Next.Pt.X <= op2.Pt.X && op2.Next.Pt.Y == Pt.Y)\n        op2 = op2.Next;\n      if (!DiscardLeft && (op2.Pt.X != Pt.X))\n        op2 = op2.Next;\n      op2b = this.DupOutPt(op2, DiscardLeft);\n      if (ClipperLib.IntPoint.op_Inequality(op2b.Pt, Pt))\n      {\n        op2 = op2b;\n        //op2.Pt = Pt;\n        op2.Pt.X = Pt.X;\n        op2.Pt.Y = Pt.Y;\n        op2b = this.DupOutPt(op2, DiscardLeft);\n      }\n    }\n    if ((Dir1 == ClipperLib.Direction.dLeftToRight) == DiscardLeft)\n    {\n      op1.Prev = op2;\n      op2.Next = op1;\n      op1b.Next = op2b;\n      op2b.Prev = op1b;\n    }\n    else\n    {\n      op1.Next = op2;\n      op2.Prev = op1;\n      op1b.Prev = op2b;\n      op2b.Next = op1b;\n    }\n    return true;\n  };\n  ClipperLib.Clipper.prototype.JoinPoints = function (j, outRec1, outRec2)\n  {\n    var op1 = j.OutPt1,\n      op1b = new ClipperLib.OutPt();\n    var op2 = j.OutPt2,\n      op2b = new ClipperLib.OutPt();\n    //There are 3 kinds of joins for output polygons ...\n    //1. Horizontal joins where Join.OutPt1 & Join.OutPt2 are a vertices anywhere\n    //along (horizontal) collinear edges (& Join.OffPt is on the same horizontal).\n    //2. Non-horizontal joins where Join.OutPt1 & Join.OutPt2 are at the same\n    //location at the Bottom of the overlapping segment (& Join.OffPt is above).\n    //3. StrictlySimple joins where edges touch but are not collinear and where\n    //Join.OutPt1, Join.OutPt2 & Join.OffPt all share the same point.\n    var isHorizontal = (j.OutPt1.Pt.Y == j.OffPt.Y);\n    if (isHorizontal && (ClipperLib.IntPoint.op_Equality(j.OffPt, j.OutPt1.Pt)) && (ClipperLib.IntPoint.op_Equality(j.OffPt, j.OutPt2.Pt)))\n    {\n      //Strictly Simple join ...\n\t\t\tif (outRec1 != outRec2) return false;\n\n      op1b = j.OutPt1.Next;\n      while (op1b != op1 && (ClipperLib.IntPoint.op_Equality(op1b.Pt, j.OffPt)))\n        op1b = op1b.Next;\n      var reverse1 = (op1b.Pt.Y > j.OffPt.Y);\n      op2b = j.OutPt2.Next;\n      while (op2b != op2 && (ClipperLib.IntPoint.op_Equality(op2b.Pt, j.OffPt)))\n        op2b = op2b.Next;\n      var reverse2 = (op2b.Pt.Y > j.OffPt.Y);\n      if (reverse1 == reverse2)\n        return false;\n      if (reverse1)\n      {\n        op1b = this.DupOutPt(op1, false);\n        op2b = this.DupOutPt(op2, true);\n        op1.Prev = op2;\n        op2.Next = op1;\n        op1b.Next = op2b;\n        op2b.Prev = op1b;\n        j.OutPt1 = op1;\n        j.OutPt2 = op1b;\n        return true;\n      }\n      else\n      {\n        op1b = this.DupOutPt(op1, true);\n        op2b = this.DupOutPt(op2, false);\n        op1.Next = op2;\n        op2.Prev = op1;\n        op1b.Prev = op2b;\n        op2b.Next = op1b;\n        j.OutPt1 = op1;\n        j.OutPt2 = op1b;\n        return true;\n      }\n    }\n    else if (isHorizontal)\n    {\n      //treat horizontal joins differently to non-horizontal joins since with\n      //them we're not yet sure where the overlapping is. OutPt1.Pt & OutPt2.Pt\n      //may be anywhere along the horizontal edge.\n      op1b = op1;\n      while (op1.Prev.Pt.Y == op1.Pt.Y && op1.Prev != op1b && op1.Prev != op2)\n        op1 = op1.Prev;\n      while (op1b.Next.Pt.Y == op1b.Pt.Y && op1b.Next != op1 && op1b.Next != op2)\n        op1b = op1b.Next;\n      if (op1b.Next == op1 || op1b.Next == op2)\n        return false;\n      //a flat 'polygon'\n      op2b = op2;\n      while (op2.Prev.Pt.Y == op2.Pt.Y && op2.Prev != op2b && op2.Prev != op1b)\n        op2 = op2.Prev;\n      while (op2b.Next.Pt.Y == op2b.Pt.Y && op2b.Next != op2 && op2b.Next != op1)\n        op2b = op2b.Next;\n      if (op2b.Next == op2 || op2b.Next == op1)\n        return false;\n      //a flat 'polygon'\n      //Op1 -. Op1b & Op2 -. Op2b are the extremites of the horizontal edges\n\n      var $val = {Left: null, Right: null};\n      if (!this.GetOverlap(op1.Pt.X, op1b.Pt.X, op2.Pt.X, op2b.Pt.X, $val))\n        return false;\n      var Left = $val.Left;\n      var Right = $val.Right;\n\n      //DiscardLeftSide: when overlapping edges are joined, a spike will created\n      //which needs to be cleaned up. However, we don't want Op1 or Op2 caught up\n      //on the discard Side as either may still be needed for other joins ...\n      var Pt = new ClipperLib.IntPoint();\n      var DiscardLeftSide;\n      if (op1.Pt.X >= Left && op1.Pt.X <= Right)\n      {\n        //Pt = op1.Pt;\n        Pt.X = op1.Pt.X;\n        Pt.Y = op1.Pt.Y;\n        DiscardLeftSide = (op1.Pt.X > op1b.Pt.X);\n      }\n      else if (op2.Pt.X >= Left && op2.Pt.X <= Right)\n      {\n        //Pt = op2.Pt;\n        Pt.X = op2.Pt.X;\n        Pt.Y = op2.Pt.Y;\n        DiscardLeftSide = (op2.Pt.X > op2b.Pt.X);\n      }\n      else if (op1b.Pt.X >= Left && op1b.Pt.X <= Right)\n      {\n        //Pt = op1b.Pt;\n        Pt.X = op1b.Pt.X;\n        Pt.Y = op1b.Pt.Y;\n        DiscardLeftSide = op1b.Pt.X > op1.Pt.X;\n      }\n      else\n      {\n        //Pt = op2b.Pt;\n        Pt.X = op2b.Pt.X;\n        Pt.Y = op2b.Pt.Y;\n        DiscardLeftSide = (op2b.Pt.X > op2.Pt.X);\n      }\n      j.OutPt1 = op1;\n      j.OutPt2 = op2;\n      return this.JoinHorz(op1, op1b, op2, op2b, Pt, DiscardLeftSide);\n    }\n    else\n    {\n      //nb: For non-horizontal joins ...\n      //    1. Jr.OutPt1.Pt.Y == Jr.OutPt2.Pt.Y\n      //    2. Jr.OutPt1.Pt > Jr.OffPt.Y\n      //make sure the polygons are correctly oriented ...\n      op1b = op1.Next;\n      while ((ClipperLib.IntPoint.op_Equality(op1b.Pt, op1.Pt)) && (op1b != op1))\n        op1b = op1b.Next;\n      var Reverse1 = ((op1b.Pt.Y > op1.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual(op1.Pt, op1b.Pt, j.OffPt, this.m_UseFullRange));\n      if (Reverse1)\n      {\n        op1b = op1.Prev;\n        while ((ClipperLib.IntPoint.op_Equality(op1b.Pt, op1.Pt)) && (op1b != op1))\n          op1b = op1b.Prev;\n        if ((op1b.Pt.Y > op1.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual(op1.Pt, op1b.Pt, j.OffPt, this.m_UseFullRange))\n          return false;\n      }\n      op2b = op2.Next;\n      while ((ClipperLib.IntPoint.op_Equality(op2b.Pt, op2.Pt)) && (op2b != op2))\n        op2b = op2b.Next;\n      var Reverse2 = ((op2b.Pt.Y > op2.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual(op2.Pt, op2b.Pt, j.OffPt, this.m_UseFullRange));\n      if (Reverse2)\n      {\n        op2b = op2.Prev;\n        while ((ClipperLib.IntPoint.op_Equality(op2b.Pt, op2.Pt)) && (op2b != op2))\n          op2b = op2b.Prev;\n        if ((op2b.Pt.Y > op2.Pt.Y) || !ClipperLib.ClipperBase.SlopesEqual(op2.Pt, op2b.Pt, j.OffPt, this.m_UseFullRange))\n          return false;\n      }\n      if ((op1b == op1) || (op2b == op2) || (op1b == op2b) ||\n        ((outRec1 == outRec2) && (Reverse1 == Reverse2)))\n        return false;\n      if (Reverse1)\n      {\n        op1b = this.DupOutPt(op1, false);\n        op2b = this.DupOutPt(op2, true);\n        op1.Prev = op2;\n        op2.Next = op1;\n        op1b.Next = op2b;\n        op2b.Prev = op1b;\n        j.OutPt1 = op1;\n        j.OutPt2 = op1b;\n        return true;\n      }\n      else\n      {\n        op1b = this.DupOutPt(op1, true);\n        op2b = this.DupOutPt(op2, false);\n        op1.Next = op2;\n        op2.Prev = op1;\n        op1b.Prev = op2b;\n        op2b.Next = op1b;\n        j.OutPt1 = op1;\n        j.OutPt2 = op1b;\n        return true;\n      }\n    }\n  };\n  ClipperLib.Clipper.GetBounds = function (paths)\n  {\n    var i = 0,\n      cnt = paths.length;\n    while (i < cnt && paths[i].length == 0) i++;\n    if (i == cnt) return new ClipperLib.IntRect(0, 0, 0, 0);\n    var result = new ClipperLib.IntRect();\n    result.left = paths[i][0].X;\n    result.right = result.left;\n    result.top = paths[i][0].Y;\n    result.bottom = result.top;\n    for (; i < cnt; i++)\n      for (var j = 0, jlen = paths[i].length; j < jlen; j++)\n      {\n        if (paths[i][j].X < result.left) result.left = paths[i][j].X;\n        else if (paths[i][j].X > result.right) result.right = paths[i][j].X;\n        if (paths[i][j].Y < result.top) result.top = paths[i][j].Y;\n        else if (paths[i][j].Y > result.bottom) result.bottom = paths[i][j].Y;\n      }\n    return result;\n  }\n  ClipperLib.Clipper.prototype.GetBounds2 = function (ops)\n  {\n    var opStart = ops;\n    var result = new ClipperLib.IntRect();\n    result.left = ops.Pt.X;\n    result.right = ops.Pt.X;\n    result.top = ops.Pt.Y;\n    result.bottom = ops.Pt.Y;\n    ops = ops.Next;\n    while (ops != opStart)\n    {\n      if (ops.Pt.X < result.left)\n        result.left = ops.Pt.X;\n      if (ops.Pt.X > result.right)\n        result.right = ops.Pt.X;\n      if (ops.Pt.Y < result.top)\n        result.top = ops.Pt.Y;\n      if (ops.Pt.Y > result.bottom)\n        result.bottom = ops.Pt.Y;\n      ops = ops.Next;\n    }\n    return result;\n  };\n\n  ClipperLib.Clipper.PointInPolygon = function (pt, path)\n  {\n    //returns 0 if false, +1 if true, -1 if pt ON polygon boundary\n\t\t//See \"The Point in Polygon Problem for Arbitrary Polygons\" by Hormann & Agathos\n    //http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.88.5498&rep=rep1&type=pdf\n    var result = 0,\n      cnt = path.length;\n    if (cnt < 3)\n      return 0;\n    var ip = path[0];\n    for (var i = 1; i <= cnt; ++i)\n    {\n      var ipNext = (i == cnt ? path[0] : path[i]);\n      if (ipNext.Y == pt.Y)\n      {\n        if ((ipNext.X == pt.X) || (ip.Y == pt.Y && ((ipNext.X > pt.X) == (ip.X < pt.X))))\n          return -1;\n      }\n      if ((ip.Y < pt.Y) != (ipNext.Y < pt.Y))\n      {\n        if (ip.X >= pt.X)\n        {\n          if (ipNext.X > pt.X)\n            result = 1 - result;\n          else\n          {\n            var d = (ip.X - pt.X) * (ipNext.Y - pt.Y) - (ipNext.X - pt.X) * (ip.Y - pt.Y);\n            if (d == 0)\n              return -1;\n            else if ((d > 0) == (ipNext.Y > ip.Y))\n              result = 1 - result;\n          }\n        }\n        else\n        {\n          if (ipNext.X > pt.X)\n          {\n            var d = (ip.X - pt.X) * (ipNext.Y - pt.Y) - (ipNext.X - pt.X) * (ip.Y - pt.Y);\n            if (d == 0)\n              return -1;\n            else if ((d > 0) == (ipNext.Y > ip.Y))\n              result = 1 - result;\n          }\n        }\n      }\n      ip = ipNext;\n    }\n    return result;\n  };\n\n  ClipperLib.Clipper.prototype.PointInPolygon = function (pt, op)\n  {\n    //returns 0 if false, +1 if true, -1 if pt ON polygon boundary\n\t\t//See \"The Point in Polygon Problem for Arbitrary Polygons\" by Hormann & Agathos\n    //http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.88.5498&rep=rep1&type=pdf\n    var result = 0;\n    var startOp = op;\n\t\tvar ptx = pt.X, pty = pt.Y;\n    var poly0x = op.Pt.X, poly0y = op.Pt.Y;\n    do\n    {\n\t\t\top = op.Next;\n\t\t\tvar poly1x = op.Pt.X, poly1y = op.Pt.Y;\n      if (poly1y == pty)\n      {\n        if ((poly1x == ptx) || (poly0y == pty && ((poly1x > ptx) == (poly0x < ptx))))\n          return -1;\n      }\n      if ((poly0y < pty) != (poly1y < pty))\n      {\n        if (poly0x >= ptx)\n        {\n          if (poly1x > ptx)\n            result = 1 - result;\n          else\n          {\n            var d = (poly0x - ptx) * (poly1y - pty) - (poly1x - ptx) * (poly0y - pty);\n            if (d == 0)\n              return -1;\n            if ((d > 0) == (poly1y > poly0y))\n              result = 1 - result;\n          }\n        }\n        else\n        {\n          if (poly1x > ptx)\n          {\n            var d = (poly0x - ptx) * (poly1y - pty) - (poly1x - ptx) * (poly0y - pty);\n            if (d == 0)\n              return -1;\n            if ((d > 0) == (poly1y > poly0y))\n              result = 1 - result;\n          }\n        }\n      }\n      poly0x = poly1x;\n      poly0y = poly1y;\n    } while (startOp != op);\n\n    return result;\n  };\n\n  ClipperLib.Clipper.prototype.Poly2ContainsPoly1 = function (outPt1, outPt2)\n  {\n    var op = outPt1;\n    do\n    {\n\t\t\t//nb: PointInPolygon returns 0 if false, +1 if true, -1 if pt on polygon\n      var res = this.PointInPolygon(op.Pt, outPt2);\n      if (res >= 0)\n        return res > 0;\n      op = op.Next;\n    }\n    while (op != outPt1)\n    return true;\n  };\n  ClipperLib.Clipper.prototype.FixupFirstLefts1 = function (OldOutRec, NewOutRec)\n  {\n    for (var i = 0, ilen = this.m_PolyOuts.length; i < ilen; i++)\n    {\n\t\t\tvar outRec = this.m_PolyOuts[i];\n\t\t\tif (outRec.Pts == null || outRec.FirstLeft == null)\n\t\t\t\tcontinue;\n\t\t\tvar firstLeft = this.ParseFirstLeft(outRec.FirstLeft);\n\t\t\tif (firstLeft == OldOutRec)\n\t\t\t{\n        if (this.Poly2ContainsPoly1(outRec.Pts, NewOutRec.Pts))\n          outRec.FirstLeft = NewOutRec;\n      }\n    }\n  };\n  ClipperLib.Clipper.prototype.FixupFirstLefts2 = function (OldOutRec, NewOutRec)\n  {\n    for (var $i2 = 0, $t2 = this.m_PolyOuts, $l2 = $t2.length, outRec = $t2[$i2]; $i2 < $l2; $i2++, outRec = $t2[$i2])\n      if (outRec.FirstLeft == OldOutRec)\n        outRec.FirstLeft = NewOutRec;\n  };\n  ClipperLib.Clipper.ParseFirstLeft = function (FirstLeft)\n  {\n    while (FirstLeft != null && FirstLeft.Pts == null)\n      FirstLeft = FirstLeft.FirstLeft;\n    return FirstLeft;\n  };\n  ClipperLib.Clipper.prototype.JoinCommonEdges = function ()\n  {\n    for (var i = 0, ilen = this.m_Joins.length; i < ilen; i++)\n    {\n      var join = this.m_Joins[i];\n      var outRec1 = this.GetOutRec(join.OutPt1.Idx);\n      var outRec2 = this.GetOutRec(join.OutPt2.Idx);\n      if (outRec1.Pts == null || outRec2.Pts == null)\n        continue;\n      //get the polygon fragment with the correct hole state (FirstLeft)\n      //before calling JoinPoints() ...\n      var holeStateRec;\n      if (outRec1 == outRec2)\n        holeStateRec = outRec1;\n      else if (this.Param1RightOfParam2(outRec1, outRec2))\n        holeStateRec = outRec2;\n      else if (this.Param1RightOfParam2(outRec2, outRec1))\n        holeStateRec = outRec1;\n      else\n        holeStateRec = this.GetLowermostRec(outRec1, outRec2);\n\n      if (!this.JoinPoints(join, outRec1, outRec2)) continue;\n\n      if (outRec1 == outRec2)\n      {\n        //instead of joining two polygons, we've just created a new one by\n        //splitting one polygon into two.\n        outRec1.Pts = join.OutPt1;\n        outRec1.BottomPt = null;\n        outRec2 = this.CreateOutRec();\n        outRec2.Pts = join.OutPt2;\n        //update all OutRec2.Pts Idx's ...\n        this.UpdateOutPtIdxs(outRec2);\n        //We now need to check every OutRec.FirstLeft pointer. If it points\n        //to OutRec1 it may need to point to OutRec2 instead ...\n        if (this.m_UsingPolyTree)\n          for (var j = 0, jlen = this.m_PolyOuts.length; j < jlen - 1; j++)\n          {\n            var oRec = this.m_PolyOuts[j];\n            if (oRec.Pts == null || ClipperLib.Clipper.ParseFirstLeft(oRec.FirstLeft) != outRec1 || oRec.IsHole == outRec1.IsHole)\n              continue;\n            if (this.Poly2ContainsPoly1(oRec.Pts, join.OutPt2))\n              oRec.FirstLeft = outRec2;\n          }\n        if (this.Poly2ContainsPoly1(outRec2.Pts, outRec1.Pts))\n        {\n          //outRec2 is contained by outRec1 ...\n          outRec2.IsHole = !outRec1.IsHole;\n          outRec2.FirstLeft = outRec1;\n          //fixup FirstLeft pointers that may need reassigning to OutRec1\n          if (this.m_UsingPolyTree)\n            this.FixupFirstLefts2(outRec2, outRec1);\n          if ((outRec2.IsHole ^ this.ReverseSolution) == (this.Area(outRec2) > 0))\n            this.ReversePolyPtLinks(outRec2.Pts);\n        }\n        else if (this.Poly2ContainsPoly1(outRec1.Pts, outRec2.Pts))\n        {\n          //outRec1 is contained by outRec2 ...\n          outRec2.IsHole = outRec1.IsHole;\n          outRec1.IsHole = !outRec2.IsHole;\n          outRec2.FirstLeft = outRec1.FirstLeft;\n          outRec1.FirstLeft = outRec2;\n          //fixup FirstLeft pointers that may need reassigning to OutRec1\n          if (this.m_UsingPolyTree)\n            this.FixupFirstLefts2(outRec1, outRec2);\n          if ((outRec1.IsHole ^ this.ReverseSolution) == (this.Area(outRec1) > 0))\n            this.ReversePolyPtLinks(outRec1.Pts);\n        }\n        else\n        {\n          //the 2 polygons are completely separate ...\n          outRec2.IsHole = outRec1.IsHole;\n          outRec2.FirstLeft = outRec1.FirstLeft;\n          //fixup FirstLeft pointers that may need reassigning to OutRec2\n          if (this.m_UsingPolyTree)\n            this.FixupFirstLefts1(outRec1, outRec2);\n        }\n      }\n      else\n      {\n        //joined 2 polygons together ...\n        outRec2.Pts = null;\n        outRec2.BottomPt = null;\n        outRec2.Idx = outRec1.Idx;\n        outRec1.IsHole = holeStateRec.IsHole;\n        if (holeStateRec == outRec2)\n          outRec1.FirstLeft = outRec2.FirstLeft;\n        outRec2.FirstLeft = outRec1;\n        //fixup FirstLeft pointers that may need reassigning to OutRec1\n        if (this.m_UsingPolyTree)\n          this.FixupFirstLefts2(outRec2, outRec1);\n      }\n    }\n  };\n  ClipperLib.Clipper.prototype.UpdateOutPtIdxs = function (outrec)\n  {\n    var op = outrec.Pts;\n    do {\n      op.Idx = outrec.Idx;\n      op = op.Prev;\n    }\n    while (op != outrec.Pts)\n  };\n  ClipperLib.Clipper.prototype.DoSimplePolygons = function ()\n  {\n    var i = 0;\n    while (i < this.m_PolyOuts.length)\n    {\n      var outrec = this.m_PolyOuts[i++];\n      var op = outrec.Pts;\n\t\t\tif (op == null || outrec.IsOpen)\n\t\t\t\tcontinue;\n      do //for each Pt in Polygon until duplicate found do ...\n      {\n        var op2 = op.Next;\n        while (op2 != outrec.Pts)\n        {\n          if ((ClipperLib.IntPoint.op_Equality(op.Pt, op2.Pt)) && op2.Next != op && op2.Prev != op)\n          {\n            //split the polygon into two ...\n            var op3 = op.Prev;\n            var op4 = op2.Prev;\n            op.Prev = op4;\n            op4.Next = op;\n            op2.Prev = op3;\n            op3.Next = op2;\n            outrec.Pts = op;\n            var outrec2 = this.CreateOutRec();\n            outrec2.Pts = op2;\n            this.UpdateOutPtIdxs(outrec2);\n            if (this.Poly2ContainsPoly1(outrec2.Pts, outrec.Pts))\n            {\n              //OutRec2 is contained by OutRec1 ...\n              outrec2.IsHole = !outrec.IsHole;\n              outrec2.FirstLeft = outrec;\n\t\t\t\t\t\t\tif (this.m_UsingPolyTree) this.FixupFirstLefts2(outrec2, outrec);\n\n            }\n            else if (this.Poly2ContainsPoly1(outrec.Pts, outrec2.Pts))\n            {\n              //OutRec1 is contained by OutRec2 ...\n              outrec2.IsHole = outrec.IsHole;\n              outrec.IsHole = !outrec2.IsHole;\n              outrec2.FirstLeft = outrec.FirstLeft;\n              outrec.FirstLeft = outrec2;\n              if (this.m_UsingPolyTree) this.FixupFirstLefts2(outrec, outrec2);\n            }\n            else\n            {\n              //the 2 polygons are separate ...\n              outrec2.IsHole = outrec.IsHole;\n              outrec2.FirstLeft = outrec.FirstLeft;\n\t\t\t\t\t\t\tif (this.m_UsingPolyTree) this.FixupFirstLefts1(outrec, outrec2);\n            }\n            op2 = op;\n            //ie get ready for the next iteration\n          }\n          op2 = op2.Next;\n        }\n        op = op.Next;\n      }\n      while (op != outrec.Pts)\n    }\n  };\n  ClipperLib.Clipper.Area = function (poly)\n  {\n    var cnt = poly.length;\n    if (cnt < 3)\n      return 0;\n    var a = 0;\n    for (var i = 0, j = cnt - 1; i < cnt; ++i)\n    {\n      a += (poly[j].X + poly[i].X) * (poly[j].Y - poly[i].Y);\n      j = i;\n    }\n    return -a * 0.5;\n  };\n  ClipperLib.Clipper.prototype.Area = function (outRec)\n  {\n    var op = outRec.Pts;\n    if (op == null)\n      return 0;\n    var a = 0;\n    do {\n      a = a + (op.Prev.Pt.X + op.Pt.X) * (op.Prev.Pt.Y - op.Pt.Y);\n      op = op.Next;\n    }\n    while (op != outRec.Pts)\n    return a * 0.5;\n  };\n  ClipperLib.Clipper.SimplifyPolygon = function (poly, fillType)\n  {\n    var result = new Array();\n    var c = new ClipperLib.Clipper(0);\n    c.StrictlySimple = true;\n    c.AddPath(poly, ClipperLib.PolyType.ptSubject, true);\n    c.Execute(ClipperLib.ClipType.ctUnion, result, fillType, fillType);\n    return result;\n  };\n  ClipperLib.Clipper.SimplifyPolygons = function (polys, fillType)\n  {\n    if (typeof (fillType) == \"undefined\") fillType = ClipperLib.PolyFillType.pftEvenOdd;\n    var result = new Array();\n    var c = new ClipperLib.Clipper(0);\n    c.StrictlySimple = true;\n    c.AddPaths(polys, ClipperLib.PolyType.ptSubject, true);\n    c.Execute(ClipperLib.ClipType.ctUnion, result, fillType, fillType);\n    return result;\n  };\n  ClipperLib.Clipper.DistanceSqrd = function (pt1, pt2)\n  {\n    var dx = (pt1.X - pt2.X);\n    var dy = (pt1.Y - pt2.Y);\n    return (dx * dx + dy * dy);\n  };\n  ClipperLib.Clipper.DistanceFromLineSqrd = function (pt, ln1, ln2)\n  {\n    //The equation of a line in general form (Ax + By + C = 0)\n    //given 2 points (x¹,y¹) & (x²,y²) is ...\n    //(y¹ - y²)x + (x² - x¹)y + (y² - y¹)x¹ - (x² - x¹)y¹ = 0\n    //A = (y¹ - y²); B = (x² - x¹); C = (y² - y¹)x¹ - (x² - x¹)y¹\n    //perpendicular distance of point (x³,y³) = (Ax³ + By³ + C)/Sqrt(A² + B²)\n    //see http://en.wikipedia.org/wiki/Perpendicular_distance\n    var A = ln1.Y - ln2.Y;\n    var B = ln2.X - ln1.X;\n    var C = A * ln1.X + B * ln1.Y;\n    C = A * pt.X + B * pt.Y - C;\n    return (C * C) / (A * A + B * B);\n  };\n\n\tClipperLib.Clipper.SlopesNearCollinear = function(pt1, pt2, pt3, distSqrd)\n\t{\n\t\t//this function is more accurate when the point that's GEOMETRICALLY\n\t\t//between the other 2 points is the one that's tested for distance.\n\t\t//nb: with 'spikes', either pt1 or pt3 is geometrically between the other pts\n\t\tif (Math.abs(pt1.X - pt2.X) > Math.abs(pt1.Y - pt2.Y))\n\t\t{\n\t\tif ((pt1.X > pt2.X) == (pt1.X < pt3.X))\n\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt1, pt2, pt3) < distSqrd;\n\t\telse if ((pt2.X > pt1.X) == (pt2.X < pt3.X))\n\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt2, pt1, pt3) < distSqrd;\n\t\t\t\telse\n\t\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt3, pt1, pt2) < distSqrd;\n\t\t}\n\t\telse\n\t\t{\n\t\tif ((pt1.Y > pt2.Y) == (pt1.Y < pt3.Y))\n\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt1, pt2, pt3) < distSqrd;\n\t\telse if ((pt2.Y > pt1.Y) == (pt2.Y < pt3.Y))\n\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt2, pt1, pt3) < distSqrd;\n\t\t\t\telse\n\t\t\treturn ClipperLib.Clipper.DistanceFromLineSqrd(pt3, pt1, pt2) < distSqrd;\n\t\t}\n\t}\n\n  ClipperLib.Clipper.PointsAreClose = function (pt1, pt2, distSqrd)\n  {\n    var dx = pt1.X - pt2.X;\n    var dy = pt1.Y - pt2.Y;\n    return ((dx * dx) + (dy * dy) <= distSqrd);\n  };\n  //------------------------------------------------------------------------------\n  ClipperLib.Clipper.ExcludeOp = function (op)\n  {\n    var result = op.Prev;\n    result.Next = op.Next;\n    op.Next.Prev = result;\n    result.Idx = 0;\n    return result;\n  };\n  ClipperLib.Clipper.CleanPolygon = function (path, distance)\n  {\n    if (typeof (distance) == \"undefined\") distance = 1.415;\n    //distance = proximity in units/pixels below which vertices will be stripped.\n    //Default ~= sqrt(2) so when adjacent vertices or semi-adjacent vertices have\n    //both x & y coords within 1 unit, then the second vertex will be stripped.\n    var cnt = path.length;\n    if (cnt == 0)\n      return new Array();\n    var outPts = new Array(cnt);\n    for (var i = 0; i < cnt; ++i)\n      outPts[i] = new ClipperLib.OutPt();\n    for (var i = 0; i < cnt; ++i)\n    {\n      outPts[i].Pt = path[i];\n      outPts[i].Next = outPts[(i + 1) % cnt];\n      outPts[i].Next.Prev = outPts[i];\n      outPts[i].Idx = 0;\n    }\n    var distSqrd = distance * distance;\n    var op = outPts[0];\n    while (op.Idx == 0 && op.Next != op.Prev)\n    {\n      if (ClipperLib.Clipper.PointsAreClose(op.Pt, op.Prev.Pt, distSqrd))\n      {\n        op = ClipperLib.Clipper.ExcludeOp(op);\n        cnt--;\n      }\n      else if (ClipperLib.Clipper.PointsAreClose(op.Prev.Pt, op.Next.Pt, distSqrd))\n      {\n        ClipperLib.Clipper.ExcludeOp(op.Next);\n        op = ClipperLib.Clipper.ExcludeOp(op);\n        cnt -= 2;\n      }\n      else if (ClipperLib.Clipper.SlopesNearCollinear(op.Prev.Pt, op.Pt, op.Next.Pt, distSqrd))\n      {\n        op = ClipperLib.Clipper.ExcludeOp(op);\n        cnt--;\n      }\n      else\n      {\n        op.Idx = 1;\n        op = op.Next;\n      }\n    }\n    if (cnt < 3)\n      cnt = 0;\n    var result = new Array(cnt);\n    for (var i = 0; i < cnt; ++i)\n    {\n      result[i] = new ClipperLib.IntPoint(op.Pt);\n      op = op.Next;\n    }\n    outPts = null;\n    return result;\n  };\n  ClipperLib.Clipper.CleanPolygons = function (polys, distance)\n  {\n    var result = new Array(polys.length);\n    for (var i = 0, ilen = polys.length; i < ilen; i++)\n      result[i] = ClipperLib.Clipper.CleanPolygon(polys[i], distance);\n    return result;\n  };\n  ClipperLib.Clipper.Minkowski = function (pattern, path, IsSum, IsClosed)\n  {\n    var delta = (IsClosed ? 1 : 0);\n    var polyCnt = pattern.length;\n    var pathCnt = path.length;\n    var result = new Array();\n    if (IsSum)\n      for (var i = 0; i < pathCnt; i++)\n      {\n        var p = new Array(polyCnt);\n        for (var j = 0, jlen = pattern.length, ip = pattern[j]; j < jlen; j++, ip = pattern[j])\n          p[j] = new ClipperLib.IntPoint(path[i].X + ip.X, path[i].Y + ip.Y);\n        result.push(p);\n      }\n    else\n      for (var i = 0; i < pathCnt; i++)\n      {\n        var p = new Array(polyCnt);\n        for (var j = 0, jlen = pattern.length, ip = pattern[j]; j < jlen; j++, ip = pattern[j])\n          p[j] = new ClipperLib.IntPoint(path[i].X - ip.X, path[i].Y - ip.Y);\n        result.push(p);\n      }\n    var quads = new Array();\n    for (var i = 0; i < pathCnt - 1 + delta; i++)\n      for (var j = 0; j < polyCnt; j++)\n      {\n        var quad = new Array();\n        quad.push(result[i % pathCnt][j % polyCnt]);\n        quad.push(result[(i + 1) % pathCnt][j % polyCnt]);\n        quad.push(result[(i + 1) % pathCnt][(j + 1) % polyCnt]);\n        quad.push(result[i % pathCnt][(j + 1) % polyCnt]);\n        if (!ClipperLib.Clipper.Orientation(quad))\n          quad.reverse();\n        quads.push(quad);\n      }\n\t\t\treturn quads;\n  };\n\n\tClipperLib.Clipper.MinkowskiSum = function(pattern, path_or_paths, pathIsClosed)\n\t{\n\t\tif(!(path_or_paths[0] instanceof Array))\n\t\t{\n\t\t\tvar path = path_or_paths;\n\t\t\tvar paths = ClipperLib.Clipper.Minkowski(pattern, path, true, pathIsClosed);\n\t\t\tvar c = new ClipperLib.Clipper();\n\t\t\tc.AddPaths(paths, ClipperLib.PolyType.ptSubject, true);\n\t\t\tc.Execute(ClipperLib.ClipType.ctUnion, paths, ClipperLib.PolyFillType.pftNonZero, ClipperLib.PolyFillType.pftNonZero);\n\t\t\treturn paths;\n\t\t}\n\t\telse\n\t\t{\n \t\t\tvar paths = path_or_paths;\n\t\t\tvar solution = new ClipperLib.Paths();\n\t\t\tvar c = new ClipperLib.Clipper();\n\t\t\tfor (var i = 0; i < paths.length; ++i)\n\t\t\t{\n\t\t\t\tvar tmp = ClipperLib.Clipper.Minkowski(pattern, paths[i], true, pathIsClosed);\n\t\t\t\tc.AddPaths(tmp, ClipperLib.PolyType.ptSubject, true);\n\t\t\t\tif (pathIsClosed)\n\t\t\t\t{\n\t\t\t\t\tvar path = ClipperLib.Clipper.TranslatePath(paths[i], pattern[0]);\n\t\t\t\t\tc.AddPath(path, ClipperLib.PolyType.ptClip, true);\n\t\t\t\t}\n\t\t\t}\n\t\t\tc.Execute(ClipperLib.ClipType.ctUnion, solution,\n\t\t\t\tClipperLib.PolyFillType.pftNonZero, ClipperLib.PolyFillType.pftNonZero);\n\t\t\treturn solution;\n\t\t}\n\t}\n\t//------------------------------------------------------------------------------\n\n\tClipperLib.Clipper.TranslatePath = function (path, delta)\n\t{\n\t\tvar outPath = new ClipperLib.Path();\n\t\tfor (var i = 0; i < path.length; i++)\n\t\t\toutPath.push(new ClipperLib.IntPoint(path[i].X + delta.X, path[i].Y + delta.Y));\n\t\treturn outPath;\n\t}\n\t//------------------------------------------------------------------------------\n\n\tClipperLib.Clipper.MinkowskiDiff = function (poly1, poly2)\n\t{\n\t\tvar paths = ClipperLib.Clipper.Minkowski(poly1, poly2, false, true);\n\t\tvar c = new ClipperLib.Clipper();\n\t\tc.AddPaths(paths, ClipperLib.PolyType.ptSubject, true);\n\t\tc.Execute(ClipperLib.ClipType.ctUnion, paths, ClipperLib.PolyFillType.pftNonZero, ClipperLib.PolyFillType.pftNonZero);\n\t\treturn paths;\n\t}\n\n  ClipperLib.Clipper.PolyTreeToPaths = function (polytree)\n  {\n    var result = new Array();\n    //result.set_Capacity(polytree.get_Total());\n    ClipperLib.Clipper.AddPolyNodeToPaths(polytree, ClipperLib.Clipper.NodeType.ntAny, result);\n    return result;\n  };\n  ClipperLib.Clipper.AddPolyNodeToPaths = function (polynode, nt, paths)\n  {\n    var match = true;\n    switch (nt)\n    {\n    case ClipperLib.Clipper.NodeType.ntOpen:\n      return;\n    case ClipperLib.Clipper.NodeType.ntClosed:\n      match = !polynode.IsOpen;\n      break;\n    default:\n      break;\n    }\n    if (polynode.m_polygon.length > 0 && match)\n      paths.push(polynode.m_polygon);\n    for (var $i3 = 0, $t3 = polynode.Childs(), $l3 = $t3.length, pn = $t3[$i3]; $i3 < $l3; $i3++, pn = $t3[$i3])\n      ClipperLib.Clipper.AddPolyNodeToPaths(pn, nt, paths);\n  };\n  ClipperLib.Clipper.OpenPathsFromPolyTree = function (polytree)\n  {\n    var result = new ClipperLib.Paths();\n    //result.set_Capacity(polytree.ChildCount());\n    for (var i = 0, ilen = polytree.ChildCount(); i < ilen; i++)\n      if (polytree.Childs()[i].IsOpen)\n        result.push(polytree.Childs()[i].m_polygon);\n    return result;\n  };\n  ClipperLib.Clipper.ClosedPathsFromPolyTree = function (polytree)\n  {\n    var result = new ClipperLib.Paths();\n    //result.set_Capacity(polytree.Total());\n    ClipperLib.Clipper.AddPolyNodeToPaths(polytree, ClipperLib.Clipper.NodeType.ntClosed, result);\n    return result;\n  };\n  Inherit(ClipperLib.Clipper, ClipperLib.ClipperBase);\n  ClipperLib.Clipper.NodeType = {\n    ntAny: 0,\n    ntOpen: 1,\n    ntClosed: 2\n  };\n  ClipperLib.ClipperOffset = function (miterLimit, arcTolerance)\n  {\n    if (typeof (miterLimit) == \"undefined\") miterLimit = 2;\n    if (typeof (arcTolerance) == \"undefined\") arcTolerance = ClipperLib.ClipperOffset.def_arc_tolerance;\n    this.m_destPolys = new ClipperLib.Paths();\n    this.m_srcPoly = new ClipperLib.Path();\n    this.m_destPoly = new ClipperLib.Path();\n    this.m_normals = new Array();\n    this.m_delta = 0;\n    this.m_sinA = 0;\n    this.m_sin = 0;\n    this.m_cos = 0;\n    this.m_miterLim = 0;\n    this.m_StepsPerRad = 0;\n    this.m_lowest = new ClipperLib.IntPoint();\n    this.m_polyNodes = new ClipperLib.PolyNode();\n    this.MiterLimit = miterLimit;\n    this.ArcTolerance = arcTolerance;\n    this.m_lowest.X = -1;\n  };\n  ClipperLib.ClipperOffset.two_pi = 6.28318530717959;\n  ClipperLib.ClipperOffset.def_arc_tolerance = 0.25;\n  ClipperLib.ClipperOffset.prototype.Clear = function ()\n  {\n    ClipperLib.Clear(this.m_polyNodes.Childs());\n    this.m_lowest.X = -1;\n  };\n  ClipperLib.ClipperOffset.Round = ClipperLib.Clipper.Round;\n  ClipperLib.ClipperOffset.prototype.AddPath = function (path, joinType, endType)\n  {\n    var highI = path.length - 1;\n    if (highI < 0)\n      return;\n    var newNode = new ClipperLib.PolyNode();\n    newNode.m_jointype = joinType;\n    newNode.m_endtype = endType;\n    //strip duplicate points from path and also get index to the lowest point ...\n    if (endType == ClipperLib.EndType.etClosedLine || endType == ClipperLib.EndType.etClosedPolygon)\n      while (highI > 0 && ClipperLib.IntPoint.op_Equality(path[0], path[highI]))\n        highI--;\n    //newNode.m_polygon.set_Capacity(highI + 1);\n    newNode.m_polygon.push(path[0]);\n    var j = 0,\n      k = 0;\n    for (var i = 1; i <= highI; i++)\n      if (ClipperLib.IntPoint.op_Inequality(newNode.m_polygon[j], path[i]))\n      {\n        j++;\n        newNode.m_polygon.push(path[i]);\n        if (path[i].Y > newNode.m_polygon[k].Y || (path[i].Y == newNode.m_polygon[k].Y && path[i].X < newNode.m_polygon[k].X))\n          k = j;\n      }\n    if (endType == ClipperLib.EndType.etClosedPolygon && j < 2) return;\n\n    this.m_polyNodes.AddChild(newNode);\n    //if this path's lowest pt is lower than all the others then update m_lowest\n    if (endType != ClipperLib.EndType.etClosedPolygon)\n      return;\n    if (this.m_lowest.X < 0)\n      this.m_lowest = new ClipperLib.IntPoint(this.m_polyNodes.ChildCount() - 1, k);\n    else\n    {\n      var ip = this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon[this.m_lowest.Y];\n      if (newNode.m_polygon[k].Y > ip.Y || (newNode.m_polygon[k].Y == ip.Y && newNode.m_polygon[k].X < ip.X))\n        this.m_lowest = new ClipperLib.IntPoint(this.m_polyNodes.ChildCount() - 1, k);\n    }\n  };\n  ClipperLib.ClipperOffset.prototype.AddPaths = function (paths, joinType, endType)\n  {\n    for (var i = 0, ilen = paths.length; i < ilen; i++)\n      this.AddPath(paths[i], joinType, endType);\n  };\n  ClipperLib.ClipperOffset.prototype.FixOrientations = function ()\n  {\n    //fixup orientations of all closed paths if the orientation of the\n    //closed path with the lowermost vertex is wrong ...\n    if (this.m_lowest.X >= 0 && !ClipperLib.Clipper.Orientation(this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon))\n    {\n      for (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n      {\n        var node = this.m_polyNodes.Childs()[i];\n        if (node.m_endtype == ClipperLib.EndType.etClosedPolygon || (node.m_endtype == ClipperLib.EndType.etClosedLine && ClipperLib.Clipper.Orientation(node.m_polygon)))\n          node.m_polygon.reverse();\n      }\n    }\n    else\n    {\n      for (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n      {\n        var node = this.m_polyNodes.Childs()[i];\n        if (node.m_endtype == ClipperLib.EndType.etClosedLine && !ClipperLib.Clipper.Orientation(node.m_polygon))\n          node.m_polygon.reverse();\n      }\n    }\n  };\n  ClipperLib.ClipperOffset.GetUnitNormal = function (pt1, pt2)\n  {\n    var dx = (pt2.X - pt1.X);\n    var dy = (pt2.Y - pt1.Y);\n    if ((dx == 0) && (dy == 0))\n      return new ClipperLib.DoublePoint(0, 0);\n    var f = 1 / Math.sqrt(dx * dx + dy * dy);\n    dx *= f;\n    dy *= f;\n    return new ClipperLib.DoublePoint(dy, -dx);\n  };\n  ClipperLib.ClipperOffset.prototype.DoOffset = function (delta)\n  {\n    this.m_destPolys = new Array();\n    this.m_delta = delta;\n    //if Zero offset, just copy any CLOSED polygons to m_p and return ...\n    if (ClipperLib.ClipperBase.near_zero(delta))\n    {\n      //this.m_destPolys.set_Capacity(this.m_polyNodes.ChildCount);\n      for (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n      {\n        var node = this.m_polyNodes.Childs()[i];\n        if (node.m_endtype == ClipperLib.EndType.etClosedPolygon)\n          this.m_destPolys.push(node.m_polygon);\n      }\n      return;\n    }\n    //see offset_triginometry3.svg in the documentation folder ...\n    if (this.MiterLimit > 2)\n      this.m_miterLim = 2 / (this.MiterLimit * this.MiterLimit);\n    else\n      this.m_miterLim = 0.5;\n    var y;\n    if (this.ArcTolerance <= 0)\n      y = ClipperLib.ClipperOffset.def_arc_tolerance;\n    else if (this.ArcTolerance > Math.abs(delta) * ClipperLib.ClipperOffset.def_arc_tolerance)\n      y = Math.abs(delta) * ClipperLib.ClipperOffset.def_arc_tolerance;\n    else\n      y = this.ArcTolerance;\n    //see offset_triginometry2.svg in the documentation folder ...\n    var steps = 3.14159265358979 / Math.acos(1 - y / Math.abs(delta));\n    this.m_sin = Math.sin(ClipperLib.ClipperOffset.two_pi / steps);\n    this.m_cos = Math.cos(ClipperLib.ClipperOffset.two_pi / steps);\n    this.m_StepsPerRad = steps / ClipperLib.ClipperOffset.two_pi;\n    if (delta < 0)\n      this.m_sin = -this.m_sin;\n    //this.m_destPolys.set_Capacity(this.m_polyNodes.ChildCount * 2);\n    for (var i = 0; i < this.m_polyNodes.ChildCount(); i++)\n    {\n      var node = this.m_polyNodes.Childs()[i];\n      this.m_srcPoly = node.m_polygon;\n      var len = this.m_srcPoly.length;\n      if (len == 0 || (delta <= 0 && (len < 3 || node.m_endtype != ClipperLib.EndType.etClosedPolygon)))\n        continue;\n      this.m_destPoly = new Array();\n      if (len == 1)\n      {\n        if (node.m_jointype == ClipperLib.JoinType.jtRound)\n        {\n          var X = 1,\n            Y = 0;\n          for (var j = 1; j <= steps; j++)\n          {\n            this.m_destPoly.push(new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X + X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y + Y * delta)));\n            var X2 = X;\n            X = X * this.m_cos - this.m_sin * Y;\n            Y = X2 * this.m_sin + Y * this.m_cos;\n          }\n        }\n        else\n        {\n          var X = -1,\n            Y = -1;\n          for (var j = 0; j < 4; ++j)\n          {\n            this.m_destPoly.push(new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X + X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y + Y * delta)));\n            if (X < 0)\n              X = 1;\n            else if (Y < 0)\n              Y = 1;\n            else\n              X = -1;\n          }\n        }\n        this.m_destPolys.push(this.m_destPoly);\n        continue;\n      }\n      //build m_normals ...\n      this.m_normals.length = 0;\n      //this.m_normals.set_Capacity(len);\n      for (var j = 0; j < len - 1; j++)\n        this.m_normals.push(ClipperLib.ClipperOffset.GetUnitNormal(this.m_srcPoly[j], this.m_srcPoly[j + 1]));\n      if (node.m_endtype == ClipperLib.EndType.etClosedLine || node.m_endtype == ClipperLib.EndType.etClosedPolygon)\n        this.m_normals.push(ClipperLib.ClipperOffset.GetUnitNormal(this.m_srcPoly[len - 1], this.m_srcPoly[0]));\n      else\n        this.m_normals.push(new ClipperLib.DoublePoint(this.m_normals[len - 2]));\n      if (node.m_endtype == ClipperLib.EndType.etClosedPolygon)\n      {\n        var k = len - 1;\n        for (var j = 0; j < len; j++)\n          k = this.OffsetPoint(j, k, node.m_jointype);\n        this.m_destPolys.push(this.m_destPoly);\n      }\n      else if (node.m_endtype == ClipperLib.EndType.etClosedLine)\n      {\n        var k = len - 1;\n        for (var j = 0; j < len; j++)\n          k = this.OffsetPoint(j, k, node.m_jointype);\n        this.m_destPolys.push(this.m_destPoly);\n        this.m_destPoly = new Array();\n        //re-build m_normals ...\n        var n = this.m_normals[len - 1];\n        for (var j = len - 1; j > 0; j--)\n          this.m_normals[j] = new ClipperLib.DoublePoint(-this.m_normals[j - 1].X, -this.m_normals[j - 1].Y);\n        this.m_normals[0] = new ClipperLib.DoublePoint(-n.X, -n.Y);\n        k = 0;\n        for (var j = len - 1; j >= 0; j--)\n          k = this.OffsetPoint(j, k, node.m_jointype);\n        this.m_destPolys.push(this.m_destPoly);\n      }\n      else\n      {\n        var k = 0;\n        for (var j = 1; j < len - 1; ++j)\n          k = this.OffsetPoint(j, k, node.m_jointype);\n        var pt1;\n        if (node.m_endtype == ClipperLib.EndType.etOpenButt)\n        {\n          var j = len - 1;\n          pt1 = new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[j].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[j].Y * delta));\n          this.m_destPoly.push(pt1);\n          pt1 = new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X - this.m_normals[j].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y - this.m_normals[j].Y * delta));\n          this.m_destPoly.push(pt1);\n        }\n        else\n        {\n          var j = len - 1;\n          k = len - 2;\n          this.m_sinA = 0;\n          this.m_normals[j] = new ClipperLib.DoublePoint(-this.m_normals[j].X, -this.m_normals[j].Y);\n          if (node.m_endtype == ClipperLib.EndType.etOpenSquare)\n            this.DoSquare(j, k);\n          else\n            this.DoRound(j, k);\n        }\n        //re-build m_normals ...\n        for (var j = len - 1; j > 0; j--)\n          this.m_normals[j] = new ClipperLib.DoublePoint(-this.m_normals[j - 1].X, -this.m_normals[j - 1].Y);\n        this.m_normals[0] = new ClipperLib.DoublePoint(-this.m_normals[1].X, -this.m_normals[1].Y);\n        k = len - 1;\n        for (var j = k - 1; j > 0; --j)\n          k = this.OffsetPoint(j, k, node.m_jointype);\n        if (node.m_endtype == ClipperLib.EndType.etOpenButt)\n        {\n          pt1 = new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X - this.m_normals[0].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y - this.m_normals[0].Y * delta));\n          this.m_destPoly.push(pt1);\n          pt1 = new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].X + this.m_normals[0].X * delta), ClipperLib.ClipperOffset.Round(this.m_srcPoly[0].Y + this.m_normals[0].Y * delta));\n          this.m_destPoly.push(pt1);\n        }\n        else\n        {\n          k = 1;\n          this.m_sinA = 0;\n          if (node.m_endtype == ClipperLib.EndType.etOpenSquare)\n            this.DoSquare(0, 1);\n          else\n            this.DoRound(0, 1);\n        }\n        this.m_destPolys.push(this.m_destPoly);\n      }\n    }\n  };\n  ClipperLib.ClipperOffset.prototype.Execute = function ()\n  {\n    var a = arguments,\n      ispolytree = a[0] instanceof ClipperLib.PolyTree;\n    if (!ispolytree) // function (solution, delta)\n    {\n      var solution = a[0],\n        delta = a[1];\n      ClipperLib.Clear(solution);\n      this.FixOrientations();\n      this.DoOffset(delta);\n      //now clean up 'corners' ...\n      var clpr = new ClipperLib.Clipper(0);\n      clpr.AddPaths(this.m_destPolys, ClipperLib.PolyType.ptSubject, true);\n      if (delta > 0)\n      {\n        clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftPositive, ClipperLib.PolyFillType.pftPositive);\n      }\n      else\n      {\n        var r = ClipperLib.Clipper.GetBounds(this.m_destPolys);\n        var outer = new ClipperLib.Path();\n        outer.push(new ClipperLib.IntPoint(r.left - 10, r.bottom + 10));\n        outer.push(new ClipperLib.IntPoint(r.right + 10, r.bottom + 10));\n        outer.push(new ClipperLib.IntPoint(r.right + 10, r.top - 10));\n        outer.push(new ClipperLib.IntPoint(r.left - 10, r.top - 10));\n        clpr.AddPath(outer, ClipperLib.PolyType.ptSubject, true);\n        clpr.ReverseSolution = true;\n        clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftNegative, ClipperLib.PolyFillType.pftNegative);\n        if (solution.length > 0)\n          solution.splice(0, 1);\n      }\n      //console.log(JSON.stringify(solution));\n    }\n    else // function (polytree, delta)\n    {\n      var solution = a[0],\n        delta = a[1];\n      solution.Clear();\n      this.FixOrientations();\n      this.DoOffset(delta);\n      //now clean up 'corners' ...\n      var clpr = new ClipperLib.Clipper(0);\n      clpr.AddPaths(this.m_destPolys, ClipperLib.PolyType.ptSubject, true);\n      if (delta > 0)\n      {\n        clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftPositive, ClipperLib.PolyFillType.pftPositive);\n      }\n      else\n      {\n        var r = ClipperLib.Clipper.GetBounds(this.m_destPolys);\n        var outer = new ClipperLib.Path();\n        outer.push(new ClipperLib.IntPoint(r.left - 10, r.bottom + 10));\n        outer.push(new ClipperLib.IntPoint(r.right + 10, r.bottom + 10));\n        outer.push(new ClipperLib.IntPoint(r.right + 10, r.top - 10));\n        outer.push(new ClipperLib.IntPoint(r.left - 10, r.top - 10));\n        clpr.AddPath(outer, ClipperLib.PolyType.ptSubject, true);\n        clpr.ReverseSolution = true;\n        clpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftNegative, ClipperLib.PolyFillType.pftNegative);\n        //remove the outer PolyNode rectangle ...\n        if (solution.ChildCount() == 1 && solution.Childs()[0].ChildCount() > 0)\n        {\n          var outerNode = solution.Childs()[0];\n          //solution.Childs.set_Capacity(outerNode.ChildCount);\n          solution.Childs()[0] = outerNode.Childs()[0];\n          solution.Childs()[0].m_Parent = solution;\n          for (var i = 1; i < outerNode.ChildCount(); i++)\n            solution.AddChild(outerNode.Childs()[i]);\n        }\n        else\n          solution.Clear();\n      }\n    }\n  };\n  ClipperLib.ClipperOffset.prototype.OffsetPoint = function (j, k, jointype)\n  {\n\t\t//cross product ...\n\t\tthis.m_sinA = (this.m_normals[k].X * this.m_normals[j].Y - this.m_normals[j].X * this.m_normals[k].Y);\n\n\t\tif (Math.abs(this.m_sinA * this.m_delta) < 1.0)\n\t\t{\n\t\t\t//dot product ...\n\t\t\tvar cosA = (this.m_normals[k].X * this.m_normals[j].X + this.m_normals[j].Y * this.m_normals[k].Y);\n\t\t\tif (cosA > 0) // angle ==> 0 degrees\n\t\t\t{\n\t\t\t\tthis.m_destPoly.push(new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[k].X * this.m_delta),\n\t\t\t\t\tClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[k].Y * this.m_delta)));\n\t\t\t\treturn k;\n\t\t\t}\n\t\t\t//else angle ==> 180 degrees\n\t\t}\n    else if (this.m_sinA > 1)\n      this.m_sinA = 1.0;\n    else if (this.m_sinA < -1)\n      this.m_sinA = -1.0;\n    if (this.m_sinA * this.m_delta < 0)\n    {\n      this.m_destPoly.push(new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[k].X * this.m_delta),\n        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[k].Y * this.m_delta)));\n      this.m_destPoly.push(new ClipperLib.IntPoint(this.m_srcPoly[j]));\n      this.m_destPoly.push(new ClipperLib.IntPoint(ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[j].X * this.m_delta),\n        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[j].Y * this.m_delta)));\n    }\n    else\n      switch (jointype)\n      {\n      case ClipperLib.JoinType.jtMiter:\n        {\n          var r = 1 + (this.m_normals[j].X * this.m_normals[k].X + this.m_normals[j].Y * this.m_normals[k].Y);\n          if (r >= this.m_miterLim)\n            this.DoMiter(j, k, r);\n          else\n            this.DoSquare(j, k);\n          break;\n        }\n      case ClipperLib.JoinType.jtSquare:\n        this.DoSquare(j, k);\n        break;\n      case ClipperLib.JoinType.jtRound:\n        this.DoRound(j, k);\n        break;\n      }\n    k = j;\n    return k;\n  };\n  ClipperLib.ClipperOffset.prototype.DoSquare = function (j, k)\n  {\n    var dx = Math.tan(Math.atan2(this.m_sinA,\n      this.m_normals[k].X * this.m_normals[j].X + this.m_normals[k].Y * this.m_normals[j].Y) / 4);\n    this.m_destPoly.push(new ClipperLib.IntPoint(\n      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_delta * (this.m_normals[k].X - this.m_normals[k].Y * dx)),\n      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_delta * (this.m_normals[k].Y + this.m_normals[k].X * dx))));\n    this.m_destPoly.push(new ClipperLib.IntPoint(\n      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_delta * (this.m_normals[j].X + this.m_normals[j].Y * dx)),\n      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_delta * (this.m_normals[j].Y - this.m_normals[j].X * dx))));\n  };\n  ClipperLib.ClipperOffset.prototype.DoMiter = function (j, k, r)\n  {\n    var q = this.m_delta / r;\n    this.m_destPoly.push(new ClipperLib.IntPoint(\n      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + (this.m_normals[k].X + this.m_normals[j].X) * q),\n      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + (this.m_normals[k].Y + this.m_normals[j].Y) * q)));\n  };\n  ClipperLib.ClipperOffset.prototype.DoRound = function (j, k)\n  {\n    var a = Math.atan2(this.m_sinA,\n      this.m_normals[k].X * this.m_normals[j].X + this.m_normals[k].Y * this.m_normals[j].Y);\n\n    \tvar steps = Math.max(ClipperLib.Cast_Int32(ClipperLib.ClipperOffset.Round(this.m_StepsPerRad * Math.abs(a))), 1);\n\n    var X = this.m_normals[k].X,\n      Y = this.m_normals[k].Y,\n      X2;\n    for (var i = 0; i < steps; ++i)\n    {\n      this.m_destPoly.push(new ClipperLib.IntPoint(\n        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + X * this.m_delta),\n        ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + Y * this.m_delta)));\n      X2 = X;\n      X = X * this.m_cos - this.m_sin * Y;\n      Y = X2 * this.m_sin + Y * this.m_cos;\n    }\n    this.m_destPoly.push(new ClipperLib.IntPoint(\n      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].X + this.m_normals[j].X * this.m_delta),\n      ClipperLib.ClipperOffset.Round(this.m_srcPoly[j].Y + this.m_normals[j].Y * this.m_delta)));\n  };\n  ClipperLib.Error = function (message)\n  {\n    try\n    {\n      throw new Error(message);\n    }\n    catch (err)\n    {\n      alert(err.message);\n    }\n  };\n  // ---------------------------------\n  // JS extension by Timo 2013\n  ClipperLib.JS = {};\n  ClipperLib.JS.AreaOfPolygon = function (poly, scale)\n  {\n    if (!scale) scale = 1;\n    return ClipperLib.Clipper.Area(poly) / (scale * scale);\n  };\n  ClipperLib.JS.AreaOfPolygons = function (poly, scale)\n  {\n    if (!scale) scale = 1;\n    var area = 0;\n    for (var i = 0; i < poly.length; i++)\n    {\n      area += ClipperLib.Clipper.Area(poly[i]);\n    }\n    return area / (scale * scale);\n  };\n  ClipperLib.JS.BoundsOfPath = function (path, scale)\n  {\n    return ClipperLib.JS.BoundsOfPaths([path], scale);\n  };\n  ClipperLib.JS.BoundsOfPaths = function (paths, scale)\n  {\n    if (!scale) scale = 1;\n    var bounds = ClipperLib.Clipper.GetBounds(paths);\n    bounds.left /= scale;\n    bounds.bottom /= scale;\n    bounds.right /= scale;\n    bounds.top /= scale;\n    return bounds;\n  };\n  // Clean() joins vertices that are too near each other\n  // and causes distortion to offsetted polygons without cleaning\n  ClipperLib.JS.Clean = function (polygon, delta)\n  {\n    if (!(polygon instanceof Array)) return [];\n    var isPolygons = polygon[0] instanceof Array;\n    var polygon = ClipperLib.JS.Clone(polygon);\n    if (typeof delta != \"number\" || delta === null)\n    {\n      ClipperLib.Error(\"Delta is not a number in Clean().\");\n      return polygon;\n    }\n    if (polygon.length === 0 || (polygon.length == 1 && polygon[0].length === 0) || delta < 0) return polygon;\n    if (!isPolygons) polygon = [polygon];\n    var k_length = polygon.length;\n    var len, poly, result, d, p, j, i;\n    var results = [];\n    for (var k = 0; k < k_length; k++)\n    {\n      poly = polygon[k];\n      len = poly.length;\n      if (len === 0) continue;\n      else if (len < 3)\n      {\n        result = poly;\n        results.push(result);\n        continue;\n      }\n      result = poly;\n      d = delta * delta;\n      //d = Math.floor(c_delta * c_delta);\n      p = poly[0];\n      j = 1;\n      for (i = 1; i < len; i++)\n      {\n        if ((poly[i].X - p.X) * (poly[i].X - p.X) +\n          (poly[i].Y - p.Y) * (poly[i].Y - p.Y) <= d)\n          continue;\n        result[j] = poly[i];\n        p = poly[i];\n        j++;\n      }\n      p = poly[j - 1];\n      if ((poly[0].X - p.X) * (poly[0].X - p.X) +\n        (poly[0].Y - p.Y) * (poly[0].Y - p.Y) <= d)\n        j--;\n      if (j < len)\n        result.splice(j, len - j);\n      if (result.length) results.push(result);\n    }\n    if (!isPolygons && results.length) results = results[0];\n    else if (!isPolygons && results.length === 0) results = [];\n    else if (isPolygons && results.length === 0) results = [\n      []\n    ];\n    return results;\n  }\n  // Make deep copy of Polygons or Polygon\n  // so that also IntPoint objects are cloned and not only referenced\n  // This should be the fastest way\n  ClipperLib.JS.Clone = function (polygon)\n  {\n    if (!(polygon instanceof Array)) return [];\n    if (polygon.length === 0) return [];\n    else if (polygon.length == 1 && polygon[0].length === 0) return [[]];\n    var isPolygons = polygon[0] instanceof Array;\n    if (!isPolygons) polygon = [polygon];\n    var len = polygon.length,\n      plen, i, j, result;\n    var results = new Array(len);\n    for (i = 0; i < len; i++)\n    {\n      plen = polygon[i].length;\n      result = new Array(plen);\n      for (j = 0; j < plen; j++)\n      {\n        result[j] = {\n          X: polygon[i][j].X,\n          Y: polygon[i][j].Y\n        };\n      }\n      results[i] = result;\n    }\n    if (!isPolygons) results = results[0];\n    return results;\n  };\n  // Removes points that doesn't affect much to the visual appearance.\n  // If middle point is at or under certain distance (tolerance) of the line segment between\n  // start and end point, the middle point is removed.\n  ClipperLib.JS.Lighten = function (polygon, tolerance)\n  {\n    if (!(polygon instanceof Array)) return [];\n    if (typeof tolerance != \"number\" || tolerance === null)\n    {\n      ClipperLib.Error(\"Tolerance is not a number in Lighten().\")\n      return ClipperLib.JS.Clone(polygon);\n    }\n    if (polygon.length === 0 || (polygon.length == 1 && polygon[0].length === 0) || tolerance < 0)\n    {\n      return ClipperLib.JS.Clone(polygon);\n    }\n    if (!(polygon[0] instanceof Array)) polygon = [polygon];\n    var i, j, poly, k, poly2, plen, A, B, P, d, rem, addlast;\n    var bxax, byay, l, ax, ay;\n    var len = polygon.length;\n    var toleranceSq = tolerance * tolerance;\n    var results = [];\n    for (i = 0; i < len; i++)\n    {\n      poly = polygon[i];\n      plen = poly.length;\n      if (plen == 0) continue;\n      for (k = 0; k < 1000000; k++) // could be forever loop, but wiser to restrict max repeat count\n      {\n        poly2 = [];\n        plen = poly.length;\n        // the first have to added to the end, if first and last are not the same\n        // this way we ensure that also the actual last point can be removed if needed\n        if (poly[plen - 1].X != poly[0].X || poly[plen - 1].Y != poly[0].Y)\n        {\n          addlast = 1;\n          poly.push(\n          {\n            X: poly[0].X,\n            Y: poly[0].Y\n          });\n          plen = poly.length;\n        }\n        else addlast = 0;\n        rem = []; // Indexes of removed points\n        for (j = 0; j < plen - 2; j++)\n        {\n          A = poly[j]; // Start point of line segment\n          P = poly[j + 1]; // Middle point. This is the one to be removed.\n          B = poly[j + 2]; // End point of line segment\n          ax = A.X;\n          ay = A.Y;\n          bxax = B.X - ax;\n          byay = B.Y - ay;\n          if (bxax !== 0 || byay !== 0) // To avoid Nan, when A==P && P==B. And to avoid peaks (A==B && A!=P), which have lenght, but not area.\n          {\n            l = ((P.X - ax) * bxax + (P.Y - ay) * byay) / (bxax * bxax + byay * byay);\n            if (l > 1)\n            {\n              ax = B.X;\n              ay = B.Y;\n            }\n            else if (l > 0)\n            {\n              ax += bxax * l;\n              ay += byay * l;\n            }\n          }\n          bxax = P.X - ax;\n          byay = P.Y - ay;\n          d = bxax * bxax + byay * byay;\n          if (d <= toleranceSq)\n          {\n            rem[j + 1] = 1;\n            j++; // when removed, transfer the pointer to the next one\n          }\n        }\n        // add all unremoved points to poly2\n        poly2.push(\n        {\n          X: poly[0].X,\n          Y: poly[0].Y\n        });\n        for (j = 1; j < plen - 1; j++)\n          if (!rem[j]) poly2.push(\n          {\n            X: poly[j].X,\n            Y: poly[j].Y\n          });\n        poly2.push(\n        {\n          X: poly[plen - 1].X,\n          Y: poly[plen - 1].Y\n        });\n        // if the first point was added to the end, remove it\n        if (addlast) poly.pop();\n        // break, if there was not anymore removed points\n        if (!rem.length) break;\n        // else continue looping using poly2, to check if there are points to remove\n        else poly = poly2;\n      }\n      plen = poly2.length;\n      // remove duplicate from end, if needed\n      if (poly2[plen - 1].X == poly2[0].X && poly2[plen - 1].Y == poly2[0].Y)\n      {\n        poly2.pop();\n      }\n      if (poly2.length > 2) // to avoid two-point-polygons\n        results.push(poly2);\n    }\n    if (!(polygon[0] instanceof Array)) results = results[0];\n    if (typeof (results) == \"undefined\") results = [\n      []\n    ];\n    return results;\n  }\n  ClipperLib.JS.PerimeterOfPath = function (path, closed, scale)\n  {\n    if (typeof (path) == \"undefined\") return 0;\n    var sqrt = Math.sqrt;\n    var perimeter = 0.0;\n    var p1, p2, p1x = 0.0,\n      p1y = 0.0,\n      p2x = 0.0,\n      p2y = 0.0;\n    var j = path.length;\n    if (j < 2) return 0;\n    if (closed)\n    {\n      path[j] = path[0];\n      j++;\n    }\n    while (--j)\n    {\n      p1 = path[j];\n      p1x = p1.X;\n      p1y = p1.Y;\n      p2 = path[j - 1];\n      p2x = p2.X;\n      p2y = p2.Y;\n      perimeter += sqrt((p1x - p2x) * (p1x - p2x) + (p1y - p2y) * (p1y - p2y));\n    }\n    if (closed) path.pop();\n    return perimeter / scale;\n  };\n  ClipperLib.JS.PerimeterOfPaths = function (paths, closed, scale)\n  {\n    if (!scale) scale = 1;\n    var perimeter = 0;\n    for (var i = 0; i < paths.length; i++)\n    {\n      perimeter += ClipperLib.JS.PerimeterOfPath(paths[i], closed, scale);\n    }\n    return perimeter;\n  };\n  ClipperLib.JS.ScaleDownPath = function (path, scale)\n  {\n    var i, p;\n    if (!scale) scale = 1;\n    i = path.length;\n    while (i--)\n    {\n      p = path[i];\n      p.X = p.X / scale;\n      p.Y = p.Y / scale;\n    }\n  };\n  ClipperLib.JS.ScaleDownPaths = function (paths, scale)\n  {\n    var i, j, p;\n    if (!scale) scale = 1;\n    i = paths.length;\n    while (i--)\n    {\n      j = paths[i].length;\n      while (j--)\n      {\n        p = paths[i][j];\n        p.X = p.X / scale;\n        p.Y = p.Y / scale;\n      }\n    }\n  };\n  ClipperLib.JS.ScaleUpPath = function (path, scale)\n  {\n    var i, p, round = Math.round;\n    if (!scale) scale = 1;\n    i = path.length;\n    while (i--)\n    {\n      p = path[i];\n      p.X = round(p.X * scale);\n      p.Y = round(p.Y * scale);\n    }\n  };\n  ClipperLib.JS.ScaleUpPaths = function (paths, scale)\n  {\n    var i, j, p, round = Math.round;\n    if (!scale) scale = 1;\n    i = paths.length;\n    while (i--)\n    {\n      j = paths[i].length;\n      while (j--)\n      {\n        p = paths[i][j];\n        p.X = round(p.X * scale);\n        p.Y = round(p.Y * scale);\n      }\n    }\n  };\n  ClipperLib.ExPolygons = function ()\n  {\n    return [];\n  }\n  ClipperLib.ExPolygon = function ()\n  {\n    this.outer = null;\n    this.holes = null;\n  };\n  ClipperLib.JS.AddOuterPolyNodeToExPolygons = function (polynode, expolygons)\n  {\n    var ep = new ClipperLib.ExPolygon();\n    ep.outer = polynode.Contour();\n    var childs = polynode.Childs();\n    var ilen = childs.length;\n    ep.holes = new Array(ilen);\n    var node, n, i, j, childs2, jlen;\n    for (i = 0; i < ilen; i++)\n    {\n      node = childs[i];\n      ep.holes[i] = node.Contour();\n      //Add outer polygons contained by (nested within) holes ...\n      for (j = 0, childs2 = node.Childs(), jlen = childs2.length; j < jlen; j++)\n      {\n        n = childs2[j];\n        ClipperLib.JS.AddOuterPolyNodeToExPolygons(n, expolygons);\n      }\n    }\n    expolygons.push(ep);\n  };\n  ClipperLib.JS.ExPolygonsToPaths = function (expolygons)\n  {\n    var a, i, alen, ilen;\n    var paths = new ClipperLib.Paths();\n    for (a = 0, alen = expolygons.length; a < alen; a++)\n    {\n      paths.push(expolygons[a].outer);\n      for (i = 0, ilen = expolygons[a].holes.length; i < ilen; i++)\n      {\n        paths.push(expolygons[a].holes[i]);\n      }\n    }\n    return paths;\n  }\n  ClipperLib.JS.PolyTreeToExPolygons = function (polytree)\n  {\n    var expolygons = new ClipperLib.ExPolygons();\n    var node, i, childs, ilen;\n    for (i = 0, childs = polytree.Childs(), ilen = childs.length; i < ilen; i++)\n    {\n      node = childs[i];\n      ClipperLib.JS.AddOuterPolyNodeToExPolygons(node, expolygons);\n    }\n    return expolygons;\n  };\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/clipper-lib/clipper.js\n// module id = 4\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 3x3 Matrix\n * @name mat3\n */\nvar mat3 = {};\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nmat3.fromMat4 = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n};\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nmat3.fromValues = function(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n};\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nmat3.set = function(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n};\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nmat3.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b01 = a22 * a11 - a12 * a21,\n        b11 = -a22 * a10 + a12 * a20,\n        b21 = a21 * a10 - a11 * a20,\n\n        // Calculate the determinant\n        det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    out[0] = (a11 * a22 - a12 * a21);\n    out[1] = (a02 * a21 - a01 * a22);\n    out[2] = (a01 * a12 - a02 * a11);\n    out[3] = (a12 * a20 - a10 * a22);\n    out[4] = (a00 * a22 - a02 * a20);\n    out[5] = (a02 * a10 - a00 * a12);\n    out[6] = (a10 * a21 - a11 * a20);\n    out[7] = (a01 * a20 - a00 * a21);\n    out[8] = (a00 * a11 - a01 * a10);\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nmat3.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n};\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b00 = b[0], b01 = b[1], b02 = b[2],\n        b10 = b[3], b11 = b[4], b12 = b[5],\n        b20 = b[6], b21 = b[7], b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n};\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nmat3.mul = mat3.multiply;\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nmat3.translate = function(out, a, v) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n        x = v[0], y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n};\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.rotate = function (out, a, rad) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nmat3.scale = function(out, a, v) {\n    var x = v[0], y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nmat3.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = v[0];\n    out[7] = v[1];\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.fromRotation = function(out, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad);\n\n    out[0] = c;\n    out[1] = s;\n    out[2] = 0;\n\n    out[3] = -s;\n    out[4] = c;\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nmat3.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n\n    out[3] = 0;\n    out[4] = v[1];\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nmat3.fromMat2d = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = 0;\n\n    out[3] = a[2];\n    out[4] = a[3];\n    out[5] = 0;\n\n    out[6] = a[4];\n    out[7] = a[5];\n    out[8] = 1;\n    return out;\n};\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nmat3.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n};\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nmat3.normalFromMat4 = function (out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat3.str = function (a) {\n    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + \n                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat3.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n};\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n};\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nmat3.sub = mat3.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nmat3.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n};\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nmat3.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    out[6] = a[6] + (b[6] * scale);\n    out[7] = a[7] + (b[7] * scale);\n    out[8] = a[8] + (b[8] * scale);\n    return out;\n};\n\n/*\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat3.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && \n           a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n           a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat3.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = a[6], b7 = b[7], b8 = b[8];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n};\n\n\nmodule.exports = mat3;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/gl-matrix/src/gl-matrix/mat3.js\n// module id = 5\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 3 Dimensional Vector\n * @name vec3\n */\nvar vec3 = {};\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nvec3.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nvec3.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nvec3.fromValues = function(x, y, z) {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nvec3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nvec3.set = function(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nvec3.sub = vec3.subtract;\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nvec3.mul = vec3.multiply;\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nvec3.div = vec3.divide;\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nvec3.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nvec3.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nvec3.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    return out;\n};\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nvec3.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n};\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nvec3.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nvec3.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nvec3.dist = vec3.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec3.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nvec3.sqrDist = vec3.squaredDistance;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec3.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nvec3.len = vec3.length;\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec3.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nvec3.sqrLen = vec3.squaredLength;\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nvec3.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nvec3.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n};\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nvec3.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    var len = x*x + y*y + z*z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n        out[2] = a[2] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec3.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n};\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.cross = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2],\n        bx = b[0], by = b[1], bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n};\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.hermite = function (out, a, b, c, d, t) {\n  var factorTimes2 = t * t,\n      factor1 = factorTimes2 * (2 * t - 3) + 1,\n      factor2 = factorTimes2 * (t - 2) + t,\n      factor3 = factorTimes2 * (t - 1),\n      factor4 = factorTimes2 * (3 - 2 * t);\n  \n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  \n  return out;\n};\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.bezier = function (out, a, b, c, d, t) {\n  var inverseFactor = 1 - t,\n      inverseFactorTimesTwo = inverseFactor * inverseFactor,\n      factorTimes2 = t * t,\n      factor1 = inverseFactorTimesTwo * inverseFactor,\n      factor2 = 3 * t * inverseFactorTimesTwo,\n      factor3 = 3 * factorTimes2 * inverseFactor,\n      factor4 = factorTimes2 * t;\n  \n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  \n  return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nvec3.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    var z = (glMatrix.RANDOM() * 2.0) - 1.0;\n    var zScale = Math.sqrt(1.0-z*z) * scale;\n\n    out[0] = Math.cos(r) * zScale;\n    out[1] = Math.sin(r) * zScale;\n    out[2] = z * scale;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2],\n        w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat3 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n};\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nvec3.transformQuat = function(out, a, q) {\n    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return out;\n};\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateX = function(out, a, b, c){\n   var p = [], r=[];\n\t  //Translate point to the origin\n\t  p[0] = a[0] - b[0];\n\t  p[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n\n\t  //perform rotation\n\t  r[0] = p[0];\n\t  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n\t  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n\t  //translate to correct position\n\t  out[0] = r[0] + b[0];\n\t  out[1] = r[1] + b[1];\n\t  out[2] = r[2] + b[2];\n\n  \treturn out;\n};\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateY = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  \tr[1] = p[1];\n  \tr[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateZ = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  \tr[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  \tr[2] = p[2];\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec3.forEach = (function() {\n    var vec = vec3.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 3;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nvec3.angle = function(a, b) {\n   \n    var tempA = vec3.fromValues(a[0], a[1], a[2]);\n    var tempB = vec3.fromValues(b[0], b[1], b[2]);\n \n    vec3.normalize(tempA, tempA);\n    vec3.normalize(tempB, tempB);\n \n    var cosine = vec3.dot(tempA, tempB);\n\n    if(cosine > 1.0){\n        return 0;\n    } else {\n        return Math.acos(cosine);\n    }     \n};\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec3.str = function (a) {\n    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n};\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec3.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec3.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2];\n    var b0 = b[0], b1 = b[1], b2 = b[2];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n};\n\nmodule.exports = vec3;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/gl-matrix/src/gl-matrix/vec3.js\n// module id = 6\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 4 Dimensional Vector\n * @name vec4\n */\nvar vec4 = {};\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nvec4.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nvec4.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nvec4.fromValues = function(x, y, z, w) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nvec4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nvec4.set = function(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nvec4.sub = vec4.subtract;\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    out[3] = a[3] * b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nvec4.mul = vec4.multiply;\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    out[3] = a[3] / b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nvec4.div = vec4.divide;\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nvec4.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    out[3] = Math.ceil(a[3]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nvec4.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    out[3] = Math.floor(a[3]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    out[3] = Math.min(a[3], b[3]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    out[3] = Math.max(a[3], b[3]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nvec4.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    out[3] = Math.round(a[3]);\n    return out;\n};\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nvec4.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n};\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nvec4.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nvec4.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nvec4.dist = vec4.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec4.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nvec4.sqrDist = vec4.squaredDistance;\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec4.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nvec4.len = vec4.length;\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec4.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nvec4.sqrLen = vec4.squaredLength;\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nvec4.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = -a[3];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nvec4.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n};\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nvec4.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    var len = x*x + y*y + z*z + w*w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n        out[0] = x * len;\n        out[1] = y * len;\n        out[2] = z * len;\n        out[3] = w * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec4.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n};\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nvec4.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nvec4.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    //TODO: This is a pretty awful way of doing this. Find something better.\n    out[0] = glMatrix.RANDOM();\n    out[1] = glMatrix.RANDOM();\n    out[2] = glMatrix.RANDOM();\n    out[3] = glMatrix.RANDOM();\n    vec4.normalize(out, out);\n    vec4.scale(out, out, scale);\n    return out;\n};\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nvec4.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2], w = a[3];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return out;\n};\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nvec4.transformQuat = function(out, a, q) {\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec4.forEach = (function() {\n    var vec = vec4.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 4;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec4.str = function (a) {\n    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec4.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec4.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n};\n\nmodule.exports = vec4;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/gl-matrix/src/gl-matrix/vec4.js\n// module id = 7\n// module chunks = 0","/*\n * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n * http://code.google.com/p/poly2tri/\n * \n * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n * https://github.com/r3mi/poly2tri.js\n * \n * All rights reserved.\n * \n * Distributed under the 3-clause BSD License, see LICENSE.txt\n */\n\n/* jshint maxcomplexity:11 */\n\n\"use strict\";\n\n\n/*\n * Note\n * ====\n * the structure of this JavaScript version of poly2tri intentionally follows\n * as closely as possible the structure of the reference C++ version, to make it \n * easier to keep the 2 versions in sync.\n */\n\n\n// -------------------------------------------------------------------------Node\n\n/**\n * Advancing front node\n * @constructor\n * @private\n * @struct\n * @param {!XY} p - Point\n * @param {Triangle=} t triangle (optional)\n */\nvar Node = function(p, t) {\n    /** @type {XY} */\n    this.point = p;\n\n    /** @type {Triangle|null} */\n    this.triangle = t || null;\n\n    /** @type {Node|null} */\n    this.next = null;\n    /** @type {Node|null} */\n    this.prev = null;\n\n    /** @type {number} */\n    this.value = p.x;\n};\n\n// ---------------------------------------------------------------AdvancingFront\n/**\n * @constructor\n * @private\n * @struct\n * @param {Node} head\n * @param {Node} tail\n */\nvar AdvancingFront = function(head, tail) {\n    /** @type {Node} */\n    this.head_ = head;\n    /** @type {Node} */\n    this.tail_ = tail;\n    /** @type {Node} */\n    this.search_node_ = head;\n};\n\n/** @return {Node} */\nAdvancingFront.prototype.head = function() {\n    return this.head_;\n};\n\n/** @param {Node} node */\nAdvancingFront.prototype.setHead = function(node) {\n    this.head_ = node;\n};\n\n/** @return {Node} */\nAdvancingFront.prototype.tail = function() {\n    return this.tail_;\n};\n\n/** @param {Node} node */\nAdvancingFront.prototype.setTail = function(node) {\n    this.tail_ = node;\n};\n\n/** @return {Node} */\nAdvancingFront.prototype.search = function() {\n    return this.search_node_;\n};\n\n/** @param {Node} node */\nAdvancingFront.prototype.setSearch = function(node) {\n    this.search_node_ = node;\n};\n\n/** @return {Node} */\nAdvancingFront.prototype.findSearchNode = function(/*x*/) {\n    // TODO: implement BST index\n    return this.search_node_;\n};\n\n/**\n * @param {number} x value\n * @return {Node}\n */\nAdvancingFront.prototype.locateNode = function(x) {\n    var node = this.search_node_;\n\n    /* jshint boss:true */\n    if (x < node.value) {\n        while (node = node.prev) {\n            if (x >= node.value) {\n                this.search_node_ = node;\n                return node;\n            }\n        }\n    } else {\n        while (node = node.next) {\n            if (x < node.value) {\n                this.search_node_ = node.prev;\n                return node.prev;\n            }\n        }\n    }\n    return null;\n};\n\n/**\n * @param {!XY} point - Point\n * @return {Node}\n */\nAdvancingFront.prototype.locatePoint = function(point) {\n    var px = point.x;\n    var node = this.findSearchNode(px);\n    var nx = node.point.x;\n\n    if (px === nx) {\n        // Here we are comparing point references, not values\n        if (point !== node.point) {\n            // We might have two nodes with same x value for a short time\n            if (point === node.prev.point) {\n                node = node.prev;\n            } else if (point === node.next.point) {\n                node = node.next;\n            } else {\n                throw new Error('poly2tri Invalid AdvancingFront.locatePoint() call');\n            }\n        }\n    } else if (px < nx) {\n        /* jshint boss:true */\n        while (node = node.prev) {\n            if (point === node.point) {\n                break;\n            }\n        }\n    } else {\n        while (node = node.next) {\n            if (point === node.point) {\n                break;\n            }\n        }\n    }\n\n    if (node) {\n        this.search_node_ = node;\n    }\n    return node;\n};\n\n\n// ----------------------------------------------------------------------Exports\n\nmodule.exports = AdvancingFront;\nmodule.exports.Node = Node;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/poly2tri/src/advancingfront.js\n// module id = 8\n// module chunks = 0","/*\n * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n * http://code.google.com/p/poly2tri/\n * \n * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n * https://github.com/r3mi/poly2tri.js\n * \n * All rights reserved.\n * \n * Distributed under the 3-clause BSD License, see LICENSE.txt\n */\n\n\"use strict\";\n\n/*\n * Class added in the JavaScript version (was not present in the c++ version)\n */\n\nvar xy = require('./xy');\n\n/**\n * Custom exception class to indicate invalid Point values\n * @constructor\n * @public\n * @extends Error\n * @struct\n * @param {string=} message - error message\n * @param {Array.<XY>=} points - invalid points\n */\nvar PointError = function(message, points) {\n    this.name = \"PointError\";\n    /**\n     * Invalid points\n     * @public\n     * @type {Array.<XY>}\n     */\n    this.points = points = points || [];\n    /**\n     * Error message\n     * @public\n     * @type {string}\n     */\n    this.message = message || \"Invalid Points!\";\n    for (var i = 0; i < points.length; i++) {\n        this.message += \" \" + xy.toString(points[i]);\n    }\n};\nPointError.prototype = new Error();\nPointError.prototype.constructor = PointError;\n\n\nmodule.exports = PointError;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/poly2tri/src/pointerror.js\n// module id = 9\n// module chunks = 0","/*\n * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n * http://code.google.com/p/poly2tri/\n * \n * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n * https://github.com/r3mi/poly2tri.js\n *\n * All rights reserved.\n * \n * Distributed under the 3-clause BSD License, see LICENSE.txt\n */\n\n/* jshint maxcomplexity:10 */\n\n\"use strict\";\n\n\n/*\n * Note\n * ====\n * the structure of this JavaScript version of poly2tri intentionally follows\n * as closely as possible the structure of the reference C++ version, to make it \n * easier to keep the 2 versions in sync.\n */\n\nvar xy = require(\"./xy\");\n\n\n// ---------------------------------------------------------------------Triangle\n/**\n * Triangle class.<br>\n * Triangle-based data structures are known to have better performance than\n * quad-edge structures.\n * See: J. Shewchuk, \"Triangle: Engineering a 2D Quality Mesh Generator and\n * Delaunay Triangulator\", \"Triangulations in CGAL\"\n *\n * @constructor\n * @struct\n * @param {!XY} pa  point object with {x,y}\n * @param {!XY} pb  point object with {x,y}\n * @param {!XY} pc  point object with {x,y}\n */\nvar Triangle = function(a, b, c) {\n    /**\n     * Triangle points\n     * @private\n     * @type {Array.<XY>}\n     */\n    this.points_ = [a, b, c];\n\n    /**\n     * Neighbor list\n     * @private\n     * @type {Array.<Triangle>}\n     */\n    this.neighbors_ = [null, null, null];\n\n    /**\n     * Has this triangle been marked as an interior triangle?\n     * @private\n     * @type {boolean}\n     */\n    this.interior_ = false;\n\n    /**\n     * Flags to determine if an edge is a Constrained edge\n     * @private\n     * @type {Array.<boolean>}\n     */\n    this.constrained_edge = [false, false, false];\n\n    /**\n     * Flags to determine if an edge is a Delauney edge\n     * @private\n     * @type {Array.<boolean>}\n     */\n    this.delaunay_edge = [false, false, false];\n};\n\nvar p2s = xy.toString;\n/**\n * For pretty printing ex. <code>\"[(5;42)(10;20)(21;30)]\"</code>.\n * @public\n * @return {string}\n */\nTriangle.prototype.toString = function() {\n    return (\"[\" + p2s(this.points_[0]) + p2s(this.points_[1]) + p2s(this.points_[2]) + \"]\");\n};\n\n/**\n * Get one vertice of the triangle.\n * The output triangles of a triangulation have vertices which are references\n * to the initial input points (not copies): any custom fields in the\n * initial points can be retrieved in the output triangles.\n * @example\n *      var contour = [{x:100, y:100, id:1}, {x:100, y:300, id:2}, {x:300, y:300, id:3}];\n *      var swctx = new poly2tri.SweepContext(contour);\n *      swctx.triangulate();\n *      var triangles = swctx.getTriangles();\n *      typeof triangles[0].getPoint(0).id\n *      // → \"number\"\n * @param {number} index - vertice index: 0, 1 or 2\n * @public\n * @returns {XY}\n */\nTriangle.prototype.getPoint = function(index) {\n    return this.points_[index];\n};\n\n/**\n * For backward compatibility\n * @function\n * @deprecated use {@linkcode Triangle#getPoint} instead\n */\nTriangle.prototype.GetPoint = Triangle.prototype.getPoint;\n\n/**\n * Get all 3 vertices of the triangle as an array\n * @public\n * @return {Array.<XY>}\n */\n// Method added in the JavaScript version (was not present in the c++ version)\nTriangle.prototype.getPoints = function() {\n    return this.points_;\n};\n\n/**\n * @private\n * @param {number} index\n * @returns {?Triangle}\n */\nTriangle.prototype.getNeighbor = function(index) {\n    return this.neighbors_[index];\n};\n\n/**\n * Test if this Triangle contains the Point object given as parameter as one of its vertices.\n * Only point references are compared, not values.\n * @public\n * @param {XY} point - point object with {x,y}\n * @return {boolean} <code>True</code> if the Point object is of the Triangle's vertices,\n *         <code>false</code> otherwise.\n */\nTriangle.prototype.containsPoint = function(point) {\n    var points = this.points_;\n    // Here we are comparing point references, not values\n    return (point === points[0] || point === points[1] || point === points[2]);\n};\n\n/**\n * Test if this Triangle contains the Edge object given as parameter as its\n * bounding edges. Only point references are compared, not values.\n * @private\n * @param {Edge} edge\n * @return {boolean} <code>True</code> if the Edge object is of the Triangle's bounding\n *         edges, <code>false</code> otherwise.\n */\nTriangle.prototype.containsEdge = function(edge) {\n    return this.containsPoint(edge.p) && this.containsPoint(edge.q);\n};\n\n/**\n * Test if this Triangle contains the two Point objects given as parameters among its vertices.\n * Only point references are compared, not values.\n * @param {XY} p1 - point object with {x,y}\n * @param {XY} p2 - point object with {x,y}\n * @return {boolean}\n */\nTriangle.prototype.containsPoints = function(p1, p2) {\n    return this.containsPoint(p1) && this.containsPoint(p2);\n};\n\n/**\n * Has this triangle been marked as an interior triangle?\n * @returns {boolean}\n */\nTriangle.prototype.isInterior = function() {\n    return this.interior_;\n};\n\n/**\n * Mark this triangle as an interior triangle\n * @private\n * @param {boolean} interior\n * @returns {Triangle} this\n */\nTriangle.prototype.setInterior = function(interior) {\n    this.interior_ = interior;\n    return this;\n};\n\n/**\n * Update neighbor pointers.\n * @private\n * @param {XY} p1 - point object with {x,y}\n * @param {XY} p2 - point object with {x,y}\n * @param {Triangle} t Triangle object.\n * @throws {Error} if can't find objects\n */\nTriangle.prototype.markNeighborPointers = function(p1, p2, t) {\n    var points = this.points_;\n    // Here we are comparing point references, not values\n    if ((p1 === points[2] && p2 === points[1]) || (p1 === points[1] && p2 === points[2])) {\n        this.neighbors_[0] = t;\n    } else if ((p1 === points[0] && p2 === points[2]) || (p1 === points[2] && p2 === points[0])) {\n        this.neighbors_[1] = t;\n    } else if ((p1 === points[0] && p2 === points[1]) || (p1 === points[1] && p2 === points[0])) {\n        this.neighbors_[2] = t;\n    } else {\n        throw new Error('poly2tri Invalid Triangle.markNeighborPointers() call');\n    }\n};\n\n/**\n * Exhaustive search to update neighbor pointers\n * @private\n * @param {!Triangle} t\n */\nTriangle.prototype.markNeighbor = function(t) {\n    var points = this.points_;\n    if (t.containsPoints(points[1], points[2])) {\n        this.neighbors_[0] = t;\n        t.markNeighborPointers(points[1], points[2], this);\n    } else if (t.containsPoints(points[0], points[2])) {\n        this.neighbors_[1] = t;\n        t.markNeighborPointers(points[0], points[2], this);\n    } else if (t.containsPoints(points[0], points[1])) {\n        this.neighbors_[2] = t;\n        t.markNeighborPointers(points[0], points[1], this);\n    }\n};\n\n\nTriangle.prototype.clearNeighbors = function() {\n    this.neighbors_[0] = null;\n    this.neighbors_[1] = null;\n    this.neighbors_[2] = null;\n};\n\nTriangle.prototype.clearDelaunayEdges = function() {\n    this.delaunay_edge[0] = false;\n    this.delaunay_edge[1] = false;\n    this.delaunay_edge[2] = false;\n};\n\n/**\n * Returns the point clockwise to the given point.\n * @private\n * @param {XY} p - point object with {x,y}\n */\nTriangle.prototype.pointCW = function(p) {\n    var points = this.points_;\n    // Here we are comparing point references, not values\n    if (p === points[0]) {\n        return points[2];\n    } else if (p === points[1]) {\n        return points[0];\n    } else if (p === points[2]) {\n        return points[1];\n    } else {\n        return null;\n    }\n};\n\n/**\n * Returns the point counter-clockwise to the given point.\n * @private\n * @param {XY} p - point object with {x,y}\n */\nTriangle.prototype.pointCCW = function(p) {\n    var points = this.points_;\n    // Here we are comparing point references, not values\n    if (p === points[0]) {\n        return points[1];\n    } else if (p === points[1]) {\n        return points[2];\n    } else if (p === points[2]) {\n        return points[0];\n    } else {\n        return null;\n    }\n};\n\n/**\n * Returns the neighbor clockwise to given point.\n * @private\n * @param {XY} p - point object with {x,y}\n */\nTriangle.prototype.neighborCW = function(p) {\n    // Here we are comparing point references, not values\n    if (p === this.points_[0]) {\n        return this.neighbors_[1];\n    } else if (p === this.points_[1]) {\n        return this.neighbors_[2];\n    } else {\n        return this.neighbors_[0];\n    }\n};\n\n/**\n * Returns the neighbor counter-clockwise to given point.\n * @private\n * @param {XY} p - point object with {x,y}\n */\nTriangle.prototype.neighborCCW = function(p) {\n    // Here we are comparing point references, not values\n    if (p === this.points_[0]) {\n        return this.neighbors_[2];\n    } else if (p === this.points_[1]) {\n        return this.neighbors_[0];\n    } else {\n        return this.neighbors_[1];\n    }\n};\n\nTriangle.prototype.getConstrainedEdgeCW = function(p) {\n    // Here we are comparing point references, not values\n    if (p === this.points_[0]) {\n        return this.constrained_edge[1];\n    } else if (p === this.points_[1]) {\n        return this.constrained_edge[2];\n    } else {\n        return this.constrained_edge[0];\n    }\n};\n\nTriangle.prototype.getConstrainedEdgeCCW = function(p) {\n    // Here we are comparing point references, not values\n    if (p === this.points_[0]) {\n        return this.constrained_edge[2];\n    } else if (p === this.points_[1]) {\n        return this.constrained_edge[0];\n    } else {\n        return this.constrained_edge[1];\n    }\n};\n\n// Additional check from Java version (see issue #88)\nTriangle.prototype.getConstrainedEdgeAcross = function(p) {\n    // Here we are comparing point references, not values\n    if (p === this.points_[0]) {\n        return this.constrained_edge[0];\n    } else if (p === this.points_[1]) {\n        return this.constrained_edge[1];\n    } else {\n        return this.constrained_edge[2];\n    }\n};\n\nTriangle.prototype.setConstrainedEdgeCW = function(p, ce) {\n    // Here we are comparing point references, not values\n    if (p === this.points_[0]) {\n        this.constrained_edge[1] = ce;\n    } else if (p === this.points_[1]) {\n        this.constrained_edge[2] = ce;\n    } else {\n        this.constrained_edge[0] = ce;\n    }\n};\n\nTriangle.prototype.setConstrainedEdgeCCW = function(p, ce) {\n    // Here we are comparing point references, not values\n    if (p === this.points_[0]) {\n        this.constrained_edge[2] = ce;\n    } else if (p === this.points_[1]) {\n        this.constrained_edge[0] = ce;\n    } else {\n        this.constrained_edge[1] = ce;\n    }\n};\n\nTriangle.prototype.getDelaunayEdgeCW = function(p) {\n    // Here we are comparing point references, not values\n    if (p === this.points_[0]) {\n        return this.delaunay_edge[1];\n    } else if (p === this.points_[1]) {\n        return this.delaunay_edge[2];\n    } else {\n        return this.delaunay_edge[0];\n    }\n};\n\nTriangle.prototype.getDelaunayEdgeCCW = function(p) {\n    // Here we are comparing point references, not values\n    if (p === this.points_[0]) {\n        return this.delaunay_edge[2];\n    } else if (p === this.points_[1]) {\n        return this.delaunay_edge[0];\n    } else {\n        return this.delaunay_edge[1];\n    }\n};\n\nTriangle.prototype.setDelaunayEdgeCW = function(p, e) {\n    // Here we are comparing point references, not values\n    if (p === this.points_[0]) {\n        this.delaunay_edge[1] = e;\n    } else if (p === this.points_[1]) {\n        this.delaunay_edge[2] = e;\n    } else {\n        this.delaunay_edge[0] = e;\n    }\n};\n\nTriangle.prototype.setDelaunayEdgeCCW = function(p, e) {\n    // Here we are comparing point references, not values\n    if (p === this.points_[0]) {\n        this.delaunay_edge[2] = e;\n    } else if (p === this.points_[1]) {\n        this.delaunay_edge[0] = e;\n    } else {\n        this.delaunay_edge[1] = e;\n    }\n};\n\n/**\n * The neighbor across to given point.\n * @private\n * @param {XY} p - point object with {x,y}\n * @returns {Triangle}\n */\nTriangle.prototype.neighborAcross = function(p) {\n    // Here we are comparing point references, not values\n    if (p === this.points_[0]) {\n        return this.neighbors_[0];\n    } else if (p === this.points_[1]) {\n        return this.neighbors_[1];\n    } else {\n        return this.neighbors_[2];\n    }\n};\n\n/**\n * @private\n * @param {!Triangle} t Triangle object.\n * @param {XY} p - point object with {x,y}\n */\nTriangle.prototype.oppositePoint = function(t, p) {\n    var cw = t.pointCW(p);\n    return this.pointCW(cw);\n};\n\n/**\n * Legalize triangle by rotating clockwise around oPoint\n * @private\n * @param {XY} opoint - point object with {x,y}\n * @param {XY} npoint - point object with {x,y}\n * @throws {Error} if oPoint can not be found\n */\nTriangle.prototype.legalize = function(opoint, npoint) {\n    var points = this.points_;\n    // Here we are comparing point references, not values\n    if (opoint === points[0]) {\n        points[1] = points[0];\n        points[0] = points[2];\n        points[2] = npoint;\n    } else if (opoint === points[1]) {\n        points[2] = points[1];\n        points[1] = points[0];\n        points[0] = npoint;\n    } else if (opoint === points[2]) {\n        points[0] = points[2];\n        points[2] = points[1];\n        points[1] = npoint;\n    } else {\n        throw new Error('poly2tri Invalid Triangle.legalize() call');\n    }\n};\n\n/**\n * Returns the index of a point in the triangle. \n * The point *must* be a reference to one of the triangle's vertices.\n * @private\n * @param {XY} p - point object with {x,y}\n * @returns {number} index 0, 1 or 2\n * @throws {Error} if p can not be found\n */\nTriangle.prototype.index = function(p) {\n    var points = this.points_;\n    // Here we are comparing point references, not values\n    if (p === points[0]) {\n        return 0;\n    } else if (p === points[1]) {\n        return 1;\n    } else if (p === points[2]) {\n        return 2;\n    } else {\n        throw new Error('poly2tri Invalid Triangle.index() call');\n    }\n};\n\n/**\n * @private\n * @param {XY} p1 - point object with {x,y}\n * @param {XY} p2 - point object with {x,y}\n * @return {number} index 0, 1 or 2, or -1 if errror\n */\nTriangle.prototype.edgeIndex = function(p1, p2) {\n    var points = this.points_;\n    // Here we are comparing point references, not values\n    if (p1 === points[0]) {\n        if (p2 === points[1]) {\n            return 2;\n        } else if (p2 === points[2]) {\n            return 1;\n        }\n    } else if (p1 === points[1]) {\n        if (p2 === points[2]) {\n            return 0;\n        } else if (p2 === points[0]) {\n            return 2;\n        }\n    } else if (p1 === points[2]) {\n        if (p2 === points[0]) {\n            return 1;\n        } else if (p2 === points[1]) {\n            return 0;\n        }\n    }\n    return -1;\n};\n\n/**\n * Mark an edge of this triangle as constrained.\n * @private\n * @param {number} index - edge index\n */\nTriangle.prototype.markConstrainedEdgeByIndex = function(index) {\n    this.constrained_edge[index] = true;\n};\n/**\n * Mark an edge of this triangle as constrained.\n * @private\n * @param {Edge} edge instance\n */\nTriangle.prototype.markConstrainedEdgeByEdge = function(edge) {\n    this.markConstrainedEdgeByPoints(edge.p, edge.q);\n};\n/**\n * Mark an edge of this triangle as constrained.\n * This method takes two Point instances defining the edge of the triangle.\n * @private\n * @param {XY} p - point object with {x,y}\n * @param {XY} q - point object with {x,y}\n */\nTriangle.prototype.markConstrainedEdgeByPoints = function(p, q) {\n    var points = this.points_;\n    // Here we are comparing point references, not values        \n    if ((q === points[0] && p === points[1]) || (q === points[1] && p === points[0])) {\n        this.constrained_edge[2] = true;\n    } else if ((q === points[0] && p === points[2]) || (q === points[2] && p === points[0])) {\n        this.constrained_edge[1] = true;\n    } else if ((q === points[1] && p === points[2]) || (q === points[2] && p === points[1])) {\n        this.constrained_edge[0] = true;\n    }\n};\n\n\n// ---------------------------------------------------------Exports (public API)\n\nmodule.exports = Triangle;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/poly2tri/src/triangle.js\n// module id = 10\n// module chunks = 0","// Copyright 2016 Todd Fleming\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n// \n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n// \n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n'use strict';\n\nimport { dist, cut, fillPath, insideOutside, pocket, reduceCamPaths, separateTabs, vCarve } from './cam';\nimport { mmToClipperScale, offset, rawPathsToClipperPaths, union } from './mesh';\n\n// Convert laser cut paths to gcode.\n//      paths:          Array of CamPath\n//      scale:          Factor to convert Clipper units to gcode units\n//      offsetX:        Offset X (gcode units)\n//      offsetY:        Offset Y (gcode units)\n//      decimal:        Number of decimal places to keep in gcode\n//      cutFeed:        Feedrate for horizontal cuts (gcode units)\n//      laserPower:     [0, 100]\n//      passes:         Number of passes\n//      tabGeometry:    Tab geometry\n//      gcodeToolOn:   Laser on (may be empty)\n//      gcodeToolOff:  Laser off (may be empty)\n//      gcodeSMaxValue: Max S value\nexport function getLaserCutGcode(props) {\n    let { paths, scale, offsetX, offsetY, decimal, cutFeed, laserPower, passes,\n        useA, aAxisStepsPerTurn, aAxisDiameter,\n        tabGeometry, gcodeToolOn, gcodeToolOff, gcodeSMaxValue,\n        useZ, useBlower,\n        hookPassStart, hookPassEnd\n    } = props;\n\n    if (gcodeToolOn)\n        gcodeToolOn += '\\r\\n';\n    if (gcodeToolOff)\n        gcodeToolOff += '\\r\\n';\n    let laserOnS = 'S' + (gcodeSMaxValue * laserPower / 100).toFixed(decimal);\n\n    let lastX = 0, lastY = 0;\n    function convertPoint(p, rapid) {\n        let x = p.X * scale + offsetX;\n        let y = p.Y * scale + offsetY;\n        if (useA) {\n            let roundedX = Number(x.toFixed(decimal)), roundedY = Number(y.toFixed(decimal));\n            if (rapid) {\n                lastX = roundedX;\n                lastY = roundedY;\n                return 'G0 X' + x.toFixed(decimal) + ' A' + y.toFixed(decimal);\n            } else {\n                let dx = roundedX - lastX, dy = roundedY - lastY;\n                let travelTime = Math.sqrt(dx * dx + dy * dy) / cutFeed;\n                let f = 0;\n                if (dx)\n                    f = Math.abs(dx) / travelTime;\n                else if (dy)\n                    f = Math.abs(dy) / travelTime;\n                else\n                    return '';\n                lastX = roundedX;\n                lastY = roundedY;\n                return 'G1 X' + x.toFixed(decimal) + ' A' + y.toFixed(decimal) + ' F' + f.toFixed(decimal);\n            }\n        } else {\n            if (rapid)\n                return 'G0 X' + x.toFixed(decimal) + ' Y' + y.toFixed(decimal);\n            else\n                return 'G1 X' + x.toFixed(decimal) + ' Y' + y.toFixed(decimal);\n        }\n    }\n\n    let gcode = '';\n    if (useA)\n        gcode += 'M92 A' + (aAxisStepsPerTurn / Math.PI / aAxisDiameter).toFixed(decimal) + '; ' + aAxisStepsPerTurn + ' steps per turn, ' + aAxisDiameter + 'mm diameter';\n    \n    for (let pass = 0; pass < passes; ++pass) {\n\n        if (hookPassStart) gcode += hookPassStart;\n\n        gcode += '\\n\\n; Pass ' + pass + '\\r\\n';\n\n        if (useBlower) {\n            if (useBlower.blowerOn) {\n                gcode += `\\r\\n ${useBlower.blowerOn}; Enable Air assist\\r\\n`;\n            }\n        }\n        \n        let usedZposition=false;\n        for (let pathIndex = 0; pathIndex < paths.length; ++pathIndex) {\n            let path = paths[pathIndex].path;\n            if (path.length === 0)\n                continue;\n            gcode += '\\r\\n; Pass ' + pass + ' Path ' + pathIndex + '\\r\\n';\n\n            let separatedPaths = separateTabs(path, tabGeometry);\n            for (let selectedIndex = 0; selectedIndex < separatedPaths.length; ++selectedIndex) {\n                let selectedPath = separatedPaths[selectedIndex];\n                if (selectedPath.length === 0)\n                    continue;\n                if (selectedIndex & 1) {\n                    gcode += '; Skip tab\\r\\n';\n                    continue;\n                }\n                gcode += convertPoint(selectedPath[0], true) + '\\r\\n';\n\n                if (useZ && !usedZposition) {\n                    usedZposition = true;\n                    let zHeight = useZ.startZ + useZ.offsetZ - (useZ.passDepth * pass);\n                    gcode += `; Pass Z Height ${zHeight}mm (Offset: ${useZ.offsetZ}mm)\\r\\n`;\n                    gcode += 'G0 Z' + zHeight.toFixed(decimal) + '\\r\\n\\r\\n';\n                }\n\n                gcode += gcodeToolOn;\n                for (let i = 1; i < selectedPath.length; ++i) {\n                    gcode += convertPoint(selectedPath[i], false);\n                    if (i == 1)\n                        gcode += ' ' + laserOnS;\n                    if (i == 1 && !useA)\n                        gcode += ' F' + cutFeed;\n                    gcode += '\\r\\n';\n                }\n                gcode += gcodeToolOff;\n            }\n        }\n\n        if (useBlower) {\n            if (useBlower.blowerOff) {\n                gcode += `\\r\\n ${useBlower.blowerOff}; Disable Air assist\\r\\n`;\n            }\n        }\n\n        if (hookPassEnd) gcode += hookPassEnd;\n\n    }\n\n    return gcode;\n}; // getLaserCutGcode\n\nexport function getLaserCutGcodeFromOp(settings, opIndex, op, geometry, openGeometry, tabGeometry, showAlert, done, progress) {\n    let ok = true;\n\n    if (settings.gcodeSMaxValue <= 0) {\n        showAlert(\"PWM Max S Value (in Settings) must be greater than 0\", \"danger\");\n        ok = false;\n    }\n    if (op.type !== 'Laser Cut' && op.type !== 'Laser Fill Path') {\n        if (op.laserDiameter <= 0) {\n            showAlert(\"Laser Diameter must be greater than 0\", \"danger\");\n            ok = false;\n        }\n    }\n    if (op.type === 'Laser Fill Path') {\n        if (op.lineDistance <= 0) {\n            showAlert(\"Line Distance must be greater than 0\", \"danger\");\n            ok = false;\n        }\n    }\n    if (op.laserPower < 0 || op.laserPower > 100) {\n        showAlert(\"Laser Power must be in range [0, 100]\", \"danger\");\n        ok = false;\n    }\n    if (op.passes <= 0 || (op.passes | 0) !== +op.passes) {\n        showAlert(\"Passes must be integer > 0\", \"danger\");\n        ok = false;\n    }\n    if (op.cutRate <= 0) {\n        showAlert(\"Cut Rate must be greater than 0\", \"danger\");\n        ok = false;\n    }\n    if (op.useA) {\n        if (op.aAxisStepsPerTurn <= 0) {\n            showAlert(\"A axis resolution must be greater than 0\", \"danger\");\n            ok = false;\n        }\n        if (op.aAxisDiameter <= 0) {\n            showAlert(\"A axis diameter must be greater than 0\", \"danger\");\n            ok = false;\n        }\n    }\n\n    if (settings.machineZEnabled) {\n        if (op.startHeight === \"\" || isNaN(op.startHeight)) {\n            showAlert(\"Start Height must be a valid number\", \"danger\");\n            ok = false;\n        }\n    }\n\n    if (!ok) {\n        done(false);\n    }\n\n    let camPaths = [];\n    if (op.type === 'Laser Cut') {\n        camPaths = cut(geometry, openGeometry, false);\n    } else if (op.type === 'Laser Cut Inside') {\n        if (op.margin)\n            geometry = offset(geometry, -op.margin * mmToClipperScale);\n        camPaths = insideOutside(geometry, op.laserDiameter * mmToClipperScale, true, op.cutWidth * mmToClipperScale, op.stepOver, op.direction === 'Climb', false);\n    } else if (op.type === 'Laser Cut Outside') {\n        if (op.margin)\n            geometry = offset(geometry, op.margin * mmToClipperScale);\n        camPaths = insideOutside(geometry, op.laserDiameter * mmToClipperScale, false, op.cutWidth * mmToClipperScale, op.stepOver, op.direction === 'Climb', false);\n    } else if (op.type === 'Laser Fill Path') {\n        if (op.margin)\n            geometry = offset(geometry, -op.margin * mmToClipperScale);\n        camPaths = fillPath(geometry, op.lineDistance * mmToClipperScale, op.lineAngle);\n    }\n\n    reduceCamPaths(camPaths, op.segmentLength * mmToClipperScale);\n\n    let feedScale = 1;\n    if (settings.toolFeedUnits === 'mm/s')\n        feedScale = 60;\n\n    let gcode =\n        \"\\r\\n;\" +\n        \"\\r\\n; Operation:    \" + opIndex +\n        \"\\r\\n; Type:         \" + op.type +\n        \"\\r\\n; Paths:        \" + camPaths.length +\n        \"\\r\\n; Passes:       \" + op.passes +\n        \"\\r\\n; Cut rate:     \" + op.cutRate + ' ' + settings.toolFeedUnits +\n        \"\\r\\n;\\r\\n\";\n\n    if (op.hookOperationStart.length) gcode+=op.hookOperationStart;\n\n    gcode += getLaserCutGcode({\n        paths: camPaths,\n        scale: 1 / mmToClipperScale,\n        offsetX: 0,\n        offsetY: 0,\n        decimal: 2,\n        cutFeed: op.cutRate * feedScale,\n        laserPower: op.laserPower,\n        passes: op.passes,\n        useA: op.useA,\n        useZ: settings.machineZEnabled ? {\n            startZ: Number(op.startHeight),\n            offsetZ: settings.machineZToolOffset,\n            passDepth: op.passDepth,\n        } : false,\n        useBlower: op.useBlower ? {\n            blowerOn: settings.machineBlowerGcodeOn,\n            blowerOff: settings.machineBlowerGcodeOff,\n        } : false,\n        aAxisStepsPerTurn: op.aAxisStepsPerTurn,\n        aAxisDiameter: op.aAxisDiameter,\n        tabGeometry: tabGeometry,\n        gcodeToolOn: settings.gcodeToolOn,\n        gcodeToolOff: settings.gcodeToolOff,\n        gcodeSMaxValue: settings.gcodeSMaxValue,\n\n        hookPassStart: op.hookPassStart,\n        hookPassEnd: op.hookPassEnd,\n    });\n\n    if (op.hookOperationEnd.length) gcode+=op.hookOperationEnd;\n\n    done(gcode)\n\n} // getLaserCutGcodeFromOp\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cam-gcode-laser-cut.js","// Copyright 2014, 2016 Todd Fleming\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n'use strict';\n\nimport ClipperLib from 'clipper-lib';\nimport { mat3, vec2 } from 'gl-matrix';\n\nimport { diff, offset, cPathsToClipperPaths, cPathsToCamPaths, clipperBounds, clipperPathsToCPaths, clipperToCppScale } from './mesh';\n\nrequire('script!web-cam-cpp');\n\nexport function dist(x1, y1, x2, y2) {\n    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n}\n\n// Does the line from p1 to p2 cross outside of bounds?\nfunction crosses(bounds, p1, p2) {\n    if (bounds === null)\n        return true;\n    if (p1.X === p2.X && p1.Y === p2.Y)\n        return false;\n    let clipper = new ClipperLib.Clipper();\n    clipper.AddPath([p1, p2], ClipperLib.PolyType.ptSubject, false);\n    clipper.AddPaths(bounds, ClipperLib.PolyType.ptClip, true);\n    let result = new ClipperLib.PolyTree();\n    clipper.Execute(ClipperLib.ClipType.ctIntersection, result, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);\n    if (result.ChildCount() === 1) {\n        let child = result.Childs()[0];\n        let points = child.Contour();\n        if (points.length === 2) {\n            if (points[0].X === p1.X && points[1].X === p2.X && points[0].Y === p1.Y && points[1].Y === p2.Y)\n                return false;\n            if (points[0].X === p2.X && points[1].X === p1.X && points[0].Y === p2.Y && points[1].Y === p1.Y)\n                return false;\n        }\n    }\n    return true;\n}\n\nfunction pathIsClosed(clipperPath) {\n    return (\n        clipperPath.length >= 2 &&\n        clipperPath[0].X === clipperPath[clipperPath.length - 1].X &&\n        clipperPath[0].Y === clipperPath[clipperPath.length - 1].Y);\n}\n\n// Close all paths\nfunction closeClipperPaths(paths) {\n    for (let path of paths)\n        path.push(path[0]);\n}\n\n// CamPath has this format: {\n//      path:               Clipper path\n//      safeToClose:        Is it safe to close the path without retracting?\n// }\n\n// Try to merge paths. A merged path doesn't cross outside of bounds. Returns array of CamPath.\n// If paths contains both open and closed paths, then the closed paths must be before the open\n// paths within the array.\nfunction mergePaths(bounds, paths) {\n    if (paths.length === 0)\n        return [];\n\n    let currentPath = paths[0];\n    if (pathIsClosed(currentPath))\n        currentPath.push(currentPath[0]);\n    let currentPoint = currentPath[currentPath.length - 1];\n    paths[0] = [];\n\n    let mergedPaths = [];\n    let numLeft = paths.length - 1;\n    while (numLeft > 0) {\n        let closestPathIndex = null;\n        let closestPointIndex = null;\n        let closestPointDist = null;\n        let closestReverse = false;\n        for (let pathIndex = 0; pathIndex < paths.length; ++pathIndex) {\n            let path = paths[pathIndex];\n            function check(pointIndex) {\n                let point = path[pointIndex];\n                let dist = (currentPoint.X - point.X) * (currentPoint.X - point.X) + (currentPoint.Y - point.Y) * (currentPoint.Y - point.Y);\n                if (closestPointDist === null || dist < closestPointDist) {\n                    closestPathIndex = pathIndex;\n                    closestPointIndex = pointIndex;\n                    closestPointDist = dist;\n                    closestReverse = false;\n                    return true;\n                }\n                else\n                    return false;\n            }\n            if (pathIsClosed(path)) {\n                for (let pointIndex = 0; pointIndex < path.length; ++pointIndex)\n                    check(pointIndex);\n            } else if (path.length) {\n                check(0);\n                if (check(path.length - 1))\n                    closestReverse = true;\n            }\n        }\n\n        let path = paths[closestPathIndex];\n        paths[closestPathIndex] = [];\n        numLeft -= 1;\n        let needNew;\n        if (pathIsClosed(path)) {\n            needNew = crosses(bounds, currentPoint, path[closestPointIndex]);\n            path = path.slice(closestPointIndex, path.length).concat(path.slice(1, closestPointIndex));\n            path.push(path[0]);\n        } else {\n            needNew = true;\n            if (closestReverse) {\n                path = path.slice();\n                path.reverse();\n            }\n        }\n        if (needNew) {\n            mergedPaths.push(currentPath);\n            currentPath = path;\n            currentPoint = currentPath[currentPath.length - 1];\n        }\n        else {\n            currentPath = currentPath.concat(path);\n            currentPoint = currentPath[currentPath.length - 1];\n        }\n    }\n    mergedPaths.push(currentPath);\n\n    let camPaths = [];\n    for (let i = 0; i < mergedPaths.length; ++i) {\n        let path = mergedPaths[i];\n        camPaths.push({\n            path: path,\n            safeToClose: !crosses(bounds, path[0], path[path.length - 1])\n        });\n    }\n\n    return camPaths;\n}\n\n// Compute paths for pocket operation on Clipper geometry. Returns array\n// of CamPath. cutterDia is in Clipper units. stepover is in the range (0, 100).\nexport function pocket(geometry, cutterDia, stepover, climb) {\n    stepover = stepover / 100;\n    let current = offset(geometry, -cutterDia / 2);\n    let bounds = current.slice(0);\n    let allPaths = [];\n    while (current.length !== 0) {\n        if (!climb)\n            for (let i = 0; i < current.length; ++i)\n                current[i].reverse();\n        allPaths = current.concat(allPaths);\n        current = offset(current, -cutterDia * stepover);\n    }\n    closeClipperPaths(allPaths);\n    return mergePaths(bounds, allPaths);\n};\n\n// Compute paths for inside/outside operation on Clipper geometry. Returns array\n// of CamPath. cutterDia and width are in Clipper units. stepover is in the\n// range (0, 100].\nexport function insideOutside(geometry, cutterDia, isInside, width, stepover, climb, allowRecutInBounds) {\n\n    stepover = stepover / 100;\n    width = Math.max(width, cutterDia);\n\n    let currentWidth = cutterDia;\n    let allPaths = [];\n    let eachWidth = cutterDia * stepover;\n\n    let current;\n    let bounds = null;\n    let eachOffset;\n    let needReverse;\n\n    if (isInside) {\n        current = offset(geometry, -cutterDia / 2);\n        if (allowRecutInBounds)\n            bounds = diff(current, offset(geometry, -(width - cutterDia / 2)));\n        eachOffset = -eachWidth;\n        needReverse = !climb;\n    } else {\n        current = offset(geometry, cutterDia / 2);\n        if (allowRecutInBounds)\n            bounds = diff(offset(geometry, width - cutterDia / 2), current);\n        eachOffset = eachWidth;\n        needReverse = climb;\n    }\n\n    while (currentWidth <= width) {\n        if (needReverse)\n            for (let i = 0; i < current.length; ++i)\n                current[i].reverse();\n        allPaths = current.concat(allPaths);\n        let nextWidth = currentWidth + eachWidth;\n        if (nextWidth > width && width - currentWidth > 0) {\n            current = offset(current, width - currentWidth);\n            if (needReverse)\n                for (let i = 0; i < current.length; ++i)\n                    current[i].reverse();\n            allPaths = current.concat(allPaths);\n            break;\n        }\n        currentWidth = nextWidth;\n        if (currentWidth <= width)\n            current = offset(current, eachOffset);\n    }\n    closeClipperPaths(allPaths);\n    return mergePaths(bounds, allPaths);\n};\n\n// Compute paths for cut operation on Clipper geometry. Returns array\n// of CamPath.\nexport function cut(geometry, openGeometry, climb) {\n    let allPaths = [];\n    for (let i = 0; i < geometry.length; ++i) {\n        let path = geometry[i].slice(0);\n        if (climb)\n            path.reverse();\n        path.push(path[0]);\n        allPaths.push(path);\n    }\n    for (let path of openGeometry)\n        allPaths.push(path.slice());\n    let result = mergePaths(null, allPaths);\n    for (let i = 0; i < result.length; ++i)\n        result[i].safeToClose = pathIsClosed(result[i].path);\n    return result;\n};\n\nexport function fillPath(geometry, lineDistance, angle) {\n    if (!geometry.length || !geometry[0].length)\n        return [];\n    let bounds = clipperBounds(geometry);\n    let cx = (bounds.minX + bounds.maxX) / 2;\n    let cy = (bounds.minY + bounds.maxY) / 2;\n    let r = dist(cx, cy, bounds.minX, bounds.minY) + lineDistance;\n\n    let m = mat3.fromTranslation([], [cx, cy]);\n    m = mat3.rotate([], m, angle * Math.PI / 180);\n    m = mat3.translate([], m, [-cx, -cy]);\n    let makePoint = (x, y) => {\n        let p = vec2.transformMat3([], [x, y], m);\n        return { X: p[0], Y: p[1] };\n    }\n\n    let scan = [];\n    for (let y = cy - r; y < cy + r; y += lineDistance * 2) {\n        scan.push(\n            makePoint(cx - r, y),\n            makePoint(cx + r, y),\n            makePoint(cx + r, y + lineDistance),\n            makePoint(cx - r, y + lineDistance),\n        );\n    }\n\n    let allPaths = [];\n    let separated = separateTabs(scan, geometry);\n    for (let i = 1; i < separated.length; i += 2)\n        allPaths.push(separated[i]);\n    return mergePaths(null, allPaths);\n};\n\nexport function vCarve(geometry, cutterAngle, passDepth) {\n    if (cutterAngle <= 0 || cutterAngle >= 180)\n        return [];\n\n    let memoryBlocks = [];\n    let cGeometry = clipperPathsToCPaths(memoryBlocks, geometry);\n    let resultPathsRef = Module._malloc(4);\n    let resultNumPathsRef = Module._malloc(4);\n    let resultPathSizesRef = Module._malloc(4);\n    memoryBlocks.push(resultPathsRef);\n    memoryBlocks.push(resultNumPathsRef);\n    memoryBlocks.push(resultPathSizesRef);\n\n    let debugArg0 = 0, debugArg1 = 0;\n\n    //extern \"C\" void vCarve(\n    //    int debugArg0, int debugArg1,\n    //    double** paths, int numPaths, int* pathSizes,\n    //    double cutterAngle, double passDepth,\n    //    double**& resultPaths, int& resultNumPaths, int*& resultPathSizes)\n    Module.ccall(\n        'vCarve',\n        'void', ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number'],\n        [\n            debugArg0, debugArg1, cGeometry[0], cGeometry[1], cGeometry[2],\n            cutterAngle, passDepth * clipperToCppScale,\n            resultPathsRef, resultNumPathsRef, resultPathSizesRef\n        ]);\n\n    let result = cPathsToCamPaths(memoryBlocks, resultPathsRef, resultNumPathsRef, resultPathSizesRef);\n\n    for (let i = 0; i < memoryBlocks.length; ++i)\n        Module._free(memoryBlocks[i]);\n\n    return result;\n};\n\nexport function reduceCamPaths(camPaths, minDist) {\n    let minDistSqr = minDist * minDist;\n    let distSqr = (p1, p2) => (p1.X - p2.X) * (p1.X - p2.X) + (p1.Y - p2.Y) * (p1.Y - p2.Y);\n    for (let camPath of camPaths) {\n        let path = camPath.path;\n        let newPath = [path[0]];\n        for (let i = 1; i < path.length - 1; ++i) {\n            let sq = distSqr(path[i], newPath[newPath.length - 1]);\n            if (sq > 0 && sq >= minDistSqr)\n                newPath.push(path[i]);\n        }\n        newPath.push(path[path.length - 1]);\n        camPath.path = newPath;\n    }\n}\n\n// Convert array of CamPath to array of Clipper path\nexport function getClipperPathsFromCamPaths(paths) {\n    let result = [];\n    if (paths !== null)\n        for (let i = 0; i < paths.length; ++i)\n            result.push(paths[i].path);\n    return result;\n}\n\nlet displayedCppTabError1 = false;\nlet displayedCppTabError2 = false;\n\nexport function separateTabs(cutterPath, tabGeometry) {\n    if (tabGeometry.length === 0)\n        return [cutterPath];\n    if (typeof Module === 'undefined') {\n        if (!displayedCppTabError1) {\n            showAlert(\"Failed to load cam-cpp.js; tabs will be missing. This message will not repeat.\", \"danger\", false);\n            displayedCppTabError1 = true;\n        }\n        return cutterPath;\n    }\n\n    let memoryBlocks = [];\n\n    let cCutterPath = clipperPathsToCPaths(memoryBlocks, [cutterPath]);\n    let cTabGeometry = clipperPathsToCPaths(memoryBlocks, tabGeometry);\n\n    let errorRef = Module._malloc(4);\n    let resultPathsRef = Module._malloc(4);\n    let resultNumPathsRef = Module._malloc(4);\n    let resultPathSizesRef = Module._malloc(4);\n    memoryBlocks.push(errorRef);\n    memoryBlocks.push(resultPathsRef);\n    memoryBlocks.push(resultNumPathsRef);\n    memoryBlocks.push(resultPathSizesRef);\n\n    //extern \"C\" void separateTabs(\n    //    double** pathPolygons, int numPaths, int* pathSizes,\n    //    double** tabPolygons, int numTabPolygons, int* tabPolygonSizes,\n    //    bool& error,\n    //    double**& resultPaths, int& resultNumPaths, int*& resultPathSizes)\n    Module.ccall(\n        'separateTabs',\n        'void', ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number'],\n        [cCutterPath[0], cCutterPath[1], cCutterPath[2], cTabGeometry[0], cTabGeometry[1], cTabGeometry[2], errorRef, resultPathsRef, resultNumPathsRef, resultPathSizesRef]);\n\n    if (Module.HEAPU32[errorRef >> 2] && !displayedCppTabError2) {\n        showAlert(\"Internal error processing tabs; tabs will be missing. This message will not repeat.\", \"danger\", false);\n        displayedCppTabError2 = true;\n    }\n\n    let result = cPathsToClipperPaths(memoryBlocks, resultPathsRef, resultNumPathsRef, resultPathSizesRef);\n\n    for (let i = 0; i < memoryBlocks.length; ++i)\n        Module._free(memoryBlocks[i]);\n\n    return result;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cam.js","// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// ┌────────────────────────────────────────────────────────────┐ \\\\\n// │ Eve 0.4.2 - JavaScript Events Library                      │ \\\\\n// ├────────────────────────────────────────────────────────────┤ \\\\\n// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n// └────────────────────────────────────────────────────────────┘ \\\\\n\n(function (glob) {\n    var version = \"0.4.2\",\n        has = \"hasOwnProperty\",\n        separator = /[\\.\\/]/,\n        comaseparator = /\\s*,\\s*/,\n        wildcard = \"*\",\n        fun = function () {},\n        numsort = function (a, b) {\n            return a - b;\n        },\n        current_event,\n        stop,\n        events = {n: {}},\n        firstDefined = function () {\n            for (var i = 0, ii = this.length; i < ii; i++) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n        lastDefined = function () {\n            var i = this.length;\n            while (--i) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n    /*\\\n     * eve\n     [ method ]\n\n     * Fires event with given `name`, given scope and other parameters.\n\n     > Arguments\n\n     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n     - scope (object) context for the event handlers\n     - varargs (...) the rest of arguments will be sent to event handlers\n\n     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n    \\*/\n        eve = function (name, scope) {\n            name = String(name);\n            var e = events,\n                oldstop = stop,\n                args = Array.prototype.slice.call(arguments, 2),\n                listeners = eve.listeners(name),\n                z = 0,\n                f = false,\n                l,\n                indexed = [],\n                queue = {},\n                out = [],\n                ce = current_event,\n                errors = [];\n            out.firstDefined = firstDefined;\n            out.lastDefined = lastDefined;\n            current_event = name;\n            stop = 0;\n            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n                indexed.push(listeners[i].zIndex);\n                if (listeners[i].zIndex < 0) {\n                    queue[listeners[i].zIndex] = listeners[i];\n                }\n            }\n            indexed.sort(numsort);\n            while (indexed[z] < 0) {\n                l = queue[indexed[z++]];\n                out.push(l.apply(scope, args));\n                if (stop) {\n                    stop = oldstop;\n                    return out;\n                }\n            }\n            for (i = 0; i < ii; i++) {\n                l = listeners[i];\n                if (\"zIndex\" in l) {\n                    if (l.zIndex == indexed[z]) {\n                        out.push(l.apply(scope, args));\n                        if (stop) {\n                            break;\n                        }\n                        do {\n                            z++;\n                            l = queue[indexed[z]];\n                            l && out.push(l.apply(scope, args));\n                            if (stop) {\n                                break;\n                            }\n                        } while (l)\n                    } else {\n                        queue[l.zIndex] = l;\n                    }\n                } else {\n                    out.push(l.apply(scope, args));\n                    if (stop) {\n                        break;\n                    }\n                }\n            }\n            stop = oldstop;\n            current_event = ce;\n            return out;\n        };\n        // Undocumented. Debug only.\n        eve._events = events;\n    /*\\\n     * eve.listeners\n     [ method ]\n\n     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\n     > Arguments\n\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\n     = (array) array of event handlers\n    \\*/\n    eve.listeners = function (name) {\n        var names = name.split(separator),\n            e = events,\n            item,\n            items,\n            k,\n            i,\n            ii,\n            j,\n            jj,\n            nes,\n            es = [e],\n            out = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            nes = [];\n            for (j = 0, jj = es.length; j < jj; j++) {\n                e = es[j].n;\n                items = [e[names[i]], e[wildcard]];\n                k = 2;\n                while (k--) {\n                    item = items[k];\n                    if (item) {\n                        nes.push(item);\n                        out = out.concat(item.f || []);\n                    }\n                }\n            }\n            es = nes;\n        }\n        return out;\n    };\n    \n    /*\\\n     * eve.on\n     [ method ]\n     **\n     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n     | eve.on(\"*.under.*\", f);\n     | eve(\"mouse.under.floor\"); // triggers f\n     * Use @eve to trigger the listener.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n     > Example:\n     | eve.on(\"mouse\", eatIt)(2);\n     | eve.on(\"mouse\", scream);\n     | eve.on(\"mouse\", catchIt)(1);\n     * This will ensure that `catchIt` function will be called before `eatIt`.\n     *\n     * If you want to put your handler before non-indexed handlers, specify a negative value.\n     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n    \\*/\n    eve.on = function (name, f) {\n        name = String(name);\n        if (typeof f != \"function\") {\n            return function () {};\n        }\n        var names = name.split(comaseparator);\n        for (var i = 0, ii = names.length; i < ii; i++) {\n            (function (name) {\n                var names = name.split(separator),\n                    e = events,\n                    exist;\n                for (var i = 0, ii = names.length; i < ii; i++) {\n                    e = e.n;\n                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n                }\n                e.f = e.f || [];\n                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n                    exist = true;\n                    break;\n                }\n                !exist && e.f.push(f);\n            }(names[i]));\n        }\n        return function (zIndex) {\n            if (+zIndex == +zIndex) {\n                f.zIndex = +zIndex;\n            }\n        };\n    };\n    /*\\\n     * eve.f\n     [ method ]\n     **\n     * Returns function that will fire given event with optional arguments.\n     * Arguments that will be passed to the result function will be also\n     * concated to the list of final arguments.\n     | el.onclick = eve.f(\"click\", 1, 2);\n     | eve.on(\"click\", function (a, b, c) {\n     |     console.log(a, b, c); // 1, 2, [event object]\n     | });\n     > Arguments\n     - event (string) event name\n     - varargs (…) and any other arguments\n     = (function) possible event handler function\n    \\*/\n    eve.f = function (event) {\n        var attrs = [].slice.call(arguments, 1);\n        return function () {\n            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n        };\n    };\n    /*\\\n     * eve.stop\n     [ method ]\n     **\n     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n    \\*/\n    eve.stop = function () {\n        stop = 1;\n    };\n    /*\\\n     * eve.nt\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     > Arguments\n     **\n     - subname (string) #optional subname of the event\n     **\n     = (string) name of the event, if `subname` is not specified\n     * or\n     = (boolean) `true`, if current event’s name contains `subname`\n    \\*/\n    eve.nt = function (subname) {\n        if (subname) {\n            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(current_event);\n        }\n        return current_event;\n    };\n    /*\\\n     * eve.nts\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     **\n     = (array) names of the event\n    \\*/\n    eve.nts = function () {\n        return current_event.split(separator);\n    };\n    /*\\\n     * eve.off\n     [ method ]\n     **\n     * Removes given function from the list of event listeners assigned to given name.\n     * If no arguments specified all the events will be cleared.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n    \\*/\n    /*\\\n     * eve.unbind\n     [ method ]\n     **\n     * See @eve.off\n    \\*/\n    eve.off = eve.unbind = function (name, f) {\n        if (!name) {\n            eve._events = events = {n: {}};\n            return;\n        }\n        var names = name.split(comaseparator);\n        if (names.length > 1) {\n            for (var i = 0, ii = names.length; i < ii; i++) {\n                eve.off(names[i], f);\n            }\n            return;\n        }\n        names = name.split(separator);\n        var e,\n            key,\n            splice,\n            i, ii, j, jj,\n            cur = [events];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            for (j = 0; j < cur.length; j += splice.length - 2) {\n                splice = [j, 1];\n                e = cur[j].n;\n                if (names[i] != wildcard) {\n                    if (e[names[i]]) {\n                        splice.push(e[names[i]]);\n                    }\n                } else {\n                    for (key in e) if (e[has](key)) {\n                        splice.push(e[key]);\n                    }\n                }\n                cur.splice.apply(cur, splice);\n            }\n        }\n        for (i = 0, ii = cur.length; i < ii; i++) {\n            e = cur[i];\n            while (e.n) {\n                if (f) {\n                    if (e.f) {\n                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n                            e.f.splice(j, 1);\n                            break;\n                        }\n                        !e.f.length && delete e.f;\n                    }\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        var funcs = e.n[key].f;\n                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n                            funcs.splice(j, 1);\n                            break;\n                        }\n                        !funcs.length && delete e.n[key].f;\n                    }\n                } else {\n                    delete e.f;\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        delete e.n[key].f;\n                    }\n                }\n                e = e.n;\n            }\n        }\n    };\n    /*\\\n     * eve.once\n     [ method ]\n     **\n     * Binds given event handler with a given name to only run once then unbind itself.\n     | eve.once(\"login\", f);\n     | eve(\"login\"); // triggers f\n     | eve(\"login\"); // no listeners\n     * Use @eve to trigger the listener.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     = (function) same return function as @eve.on\n    \\*/\n    eve.once = function (name, f) {\n        var f2 = function () {\n            eve.unbind(name, f2);\n            return f.apply(this, arguments);\n        };\n        return eve.on(name, f2);\n    };\n    /*\\\n     * eve.version\n     [ property (string) ]\n     **\n     * Current version of the library.\n    \\*/\n    eve.version = version;\n    eve.toString = function () {\n        return \"You are running Eve \" + version;\n    };\n    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : (typeof define === \"function\" && define.amd ? (define(\"eve\", [], function() { return eve; })) : (glob.eve = eve));\n})(this);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/eve/eve.js\n// module id = 13\n// module chunks = 0","/**\n * @fileoverview gl-matrix - High performance matrix and vector operations\n * @author Brandon Jones\n * @author Colin MacKenzie IV\n * @version 2.3.2\n */\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n// END HEADER\n\nexports.glMatrix = require(\"./gl-matrix/common.js\");\nexports.mat2 = require(\"./gl-matrix/mat2.js\");\nexports.mat2d = require(\"./gl-matrix/mat2d.js\");\nexports.mat3 = require(\"./gl-matrix/mat3.js\");\nexports.mat4 = require(\"./gl-matrix/mat4.js\");\nexports.quat = require(\"./gl-matrix/quat.js\");\nexports.vec2 = require(\"./gl-matrix/vec2.js\");\nexports.vec3 = require(\"./gl-matrix/vec3.js\");\nexports.vec4 = require(\"./gl-matrix/vec4.js\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/gl-matrix/src/gl-matrix.js\n// module id = 14\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 2x2 Matrix\n * @name mat2\n */\nvar mat2 = {};\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {mat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\nmat2.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\nmat2.fromValues = function(m00, m01, m10, m11) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m10;\n    out[3] = m11;\n    return out;\n};\n\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\nmat2.set = function(out, m00, m01, m10, m11) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m10;\n    out[3] = m11;\n    return out;\n};\n\n\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a1 = a[1];\n        out[1] = a[2];\n        out[2] = a1;\n    } else {\n        out[0] = a[0];\n        out[1] = a[2];\n        out[2] = a[1];\n        out[3] = a[3];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n\n        // Calculate the determinant\n        det = a0 * a3 - a2 * a1;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    \n    out[0] =  a3 * det;\n    out[1] = -a1 * det;\n    out[2] = -a2 * det;\n    out[3] =  a0 * det;\n\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.adjoint = function(out, a) {\n    // Caching this value is nessecary if out == a\n    var a0 = a[0];\n    out[0] =  a[3];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] =  a0;\n\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2\n *\n * @param {mat2} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2.determinant = function (a) {\n    return a[0] * a[3] - a[2] * a[1];\n};\n\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    return out;\n};\n\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\nmat2.mul = mat2.multiply;\n\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nmat2.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    return out;\n};\n\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\nmat2.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    return out;\n};\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nmat2.fromRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2} out\n */\nmat2.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    return out;\n}\n\n/**\n * Returns a string representation of a mat2\n *\n * @param {mat2} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2.str = function (a) {\n    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {mat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\n};\n\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {mat2} L the lower triangular matrix \n * @param {mat2} D the diagonal matrix \n * @param {mat2} U the upper triangular matrix \n * @param {mat2} a the input matrix to factorize\n */\n\nmat2.LDU = function (L, D, U, a) { \n    L[2] = a[2]/a[0]; \n    U[0] = a[0]; \n    U[1] = a[1]; \n    U[3] = a[3] - L[2] * U[1]; \n    return [L, D, U];       \n}; \n\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n};\n\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\nmat2.sub = mat2.subtract;\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n};\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\nmat2.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n};\n\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\nmat2.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    return out;\n};\n\nmodule.exports = mat2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/gl-matrix/src/gl-matrix/mat2.js\n// module id = 15\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 2x3 Matrix\n * @name mat2d\n * \n * @description \n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\nvar mat2d = {};\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\nmat2d.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\nmat2d.fromValues = function(a, b, c, d, tx, ty) {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = a;\n    out[1] = b;\n    out[2] = c;\n    out[3] = d;\n    out[4] = tx;\n    out[5] = ty;\n    return out;\n};\n\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\nmat2d.set = function(out, a, b, c, d, tx, ty) {\n    out[0] = a;\n    out[1] = b;\n    out[2] = c;\n    out[3] = d;\n    out[4] = tx;\n    out[5] = ty;\n    return out;\n};\n\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.invert = function(out, a) {\n    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],\n        atx = a[4], aty = a[5];\n\n    var det = aa * ad - ab * ac;\n    if(!det){\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = ad * det;\n    out[1] = -ab * det;\n    out[2] = -ac * det;\n    out[3] = aa * det;\n    out[4] = (ac * aty - ad * atx) * det;\n    out[5] = (ab * atx - aa * aty) * det;\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2d.determinant = function (a) {\n    return a[0] * a[3] - a[1] * a[2];\n};\n\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    out[4] = a0 * b4 + a2 * b5 + a4;\n    out[5] = a1 * b4 + a3 * b5 + a5;\n    return out;\n};\n\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\nmat2d.mul = mat2d.multiply;\n\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nmat2d.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\nmat2d.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\nmat2d.translate = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = a0 * v0 + a2 * v1 + a4;\n    out[5] = a1 * v0 + a3 * v1 + a5;\n    return out;\n};\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nmat2d.fromRotation = function(out, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2d} out\n */\nmat2d.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat2d} out\n */\nmat2d.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = v[0];\n    out[5] = v[1];\n    return out;\n}\n\n/**\n * Returns a string representation of a mat2d\n *\n * @param {mat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2d.str = function (a) {\n    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2d.frob = function (a) { \n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n}; \n\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    return out;\n};\n\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\nmat2d.sub = mat2d.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\nmat2d.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    return out;\n};\n\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\nmat2d.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    return out;\n};\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2d.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2d.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));\n};\n\nmodule.exports = mat2d;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/gl-matrix/src/gl-matrix/mat2d.js\n// module id = 16\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 4x4 Matrix\n * @name mat4\n */\nvar mat4 = {\n  scalar: {},\n  SIMD: {},\n};\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nmat4.fromValues = function(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n};\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nmat4.set = function(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n};\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nmat4.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a03 = a[3],\n            a12 = a[6], a13 = a[7],\n            a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n\n    return out;\n};\n\n/**\n * Transpose the values of a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.transpose = function(out, a) {\n    var a0, a1, a2, a3,\n        tmp01, tmp23,\n        out0, out1, out2, out3;\n\n    a0 = SIMD.Float32x4.load(a, 0);\n    a1 = SIMD.Float32x4.load(a, 4);\n    a2 = SIMD.Float32x4.load(a, 8);\n    a3 = SIMD.Float32x4.load(a, 12);\n\n    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n    out0  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);\n    out1  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);\n    SIMD.Float32x4.store(out, 0,  out0);\n    SIMD.Float32x4.store(out, 4,  out1);\n\n    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n    out2  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);\n    out3  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);\n    SIMD.Float32x4.store(out, 8,  out2);\n    SIMD.Float32x4.store(out, 12, out3);\n\n    return out;\n};\n\n/**\n * Transpse a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.transpose = glMatrix.USE_SIMD ? mat4.SIMD.transpose : mat4.scalar.transpose;\n\n/**\n * Inverts a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n};\n\n/**\n * Inverts a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.invert = function(out, a) {\n  var row0, row1, row2, row3,\n      tmp1,\n      minor0, minor1, minor2, minor3,\n      det,\n      a0 = SIMD.Float32x4.load(a, 0),\n      a1 = SIMD.Float32x4.load(a, 4),\n      a2 = SIMD.Float32x4.load(a, 8),\n      a3 = SIMD.Float32x4.load(a, 12);\n\n  // Compute matrix adjugate\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);\n  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);\n  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);\n\n  tmp1   = SIMD.Float32x4.mul(row2, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.mul(row1, tmp1);\n  minor1 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);\n  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);\n  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row1, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);\n  minor3 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);\n  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);\n  minor2 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);\n  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row0, row1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);\n  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);\n\n  // Compute matrix determinant\n  det   = SIMD.Float32x4.mul(row0, minor0);\n  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 2, 3, 0, 1), det);\n  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 1, 0, 3, 2), det);\n  tmp1  = SIMD.Float32x4.reciprocalApproximation(det);\n  det   = SIMD.Float32x4.sub(\n               SIMD.Float32x4.add(tmp1, tmp1),\n               SIMD.Float32x4.mul(det, SIMD.Float32x4.mul(tmp1, tmp1)));\n  det   = SIMD.Float32x4.swizzle(det, 0, 0, 0, 0);\n  if (!det) {\n      return null;\n  }\n\n  // Compute matrix inverse\n  SIMD.Float32x4.store(out, 0,  SIMD.Float32x4.mul(det, minor0));\n  SIMD.Float32x4.store(out, 4,  SIMD.Float32x4.mul(det, minor1));\n  SIMD.Float32x4.store(out, 8,  SIMD.Float32x4.mul(det, minor2));\n  SIMD.Float32x4.store(out, 12, SIMD.Float32x4.mul(det, minor3));\n  return out;\n}\n\n/**\n * Inverts a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.invert = glMatrix.USE_SIMD ? mat4.SIMD.invert : mat4.scalar.invert;\n\n/**\n * Calculates the adjugate of a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.adjoint = function(out, a) {\n  var a0, a1, a2, a3;\n  var row0, row1, row2, row3;\n  var tmp1;\n  var minor0, minor1, minor2, minor3;\n\n  var a0 = SIMD.Float32x4.load(a, 0);\n  var a1 = SIMD.Float32x4.load(a, 4);\n  var a2 = SIMD.Float32x4.load(a, 8);\n  var a3 = SIMD.Float32x4.load(a, 12);\n\n  // Transpose the source matrix.  Sort of.  Not a true transpose operation\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);\n  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);\n\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);\n  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);\n\n  tmp1   = SIMD.Float32x4.mul(row2, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.mul(row1, tmp1);\n  minor1 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);\n  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);\n  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row1, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);\n  minor3 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);\n  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);\n  minor2 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);\n  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row0, row1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);\n  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);\n\n  SIMD.Float32x4.store(out, 0,  minor0);\n  SIMD.Float32x4.store(out, 4,  minor1);\n  SIMD.Float32x4.store(out, 8,  minor2);\n  SIMD.Float32x4.store(out, 12, minor3);\n  return out;\n};\n\n/**\n * Calculates the adjugate of a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\n mat4.adjoint = glMatrix.USE_SIMD ? mat4.SIMD.adjoint : mat4.scalar.adjoint;\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nmat4.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n};\n\n/**\n * Multiplies two mat4's explicitly using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand, must be a Float32Array\n * @param {mat4} b the second operand, must be a Float32Array\n * @returns {mat4} out\n */\nmat4.SIMD.multiply = function (out, a, b) {\n    var a0 = SIMD.Float32x4.load(a, 0);\n    var a1 = SIMD.Float32x4.load(a, 4);\n    var a2 = SIMD.Float32x4.load(a, 8);\n    var a3 = SIMD.Float32x4.load(a, 12);\n\n    var b0 = SIMD.Float32x4.load(b, 0);\n    var out0 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 2, 2, 2, 2), a2),\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 0, out0);\n\n    var b1 = SIMD.Float32x4.load(b, 4);\n    var out1 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 2, 2, 2, 2), a2),\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 4, out1);\n\n    var b2 = SIMD.Float32x4.load(b, 8);\n    var out2 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 2, 2, 2, 2), a2),\n                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 8, out2);\n\n    var b3 = SIMD.Float32x4.load(b, 12);\n    var out3 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 1, 1, 1, 1), a1),\n                        SIMD.Float32x4.add(\n                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 2, 2, 2, 2), a2),\n                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 12, out3);\n\n    return out;\n};\n\n/**\n * Multiplies two mat4's explicitly not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.scalar.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n    return out;\n};\n\n/**\n * Multiplies two mat4's using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.multiply = glMatrix.USE_SIMD ? mat4.SIMD.multiply : mat4.scalar.multiply;\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nmat4.mul = mat4.multiply;\n\n/**\n * Translate a mat4 by the given vector not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.scalar.translate = function (out, a, v) {\n    var x = v[0], y = v[1], z = v[2],\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n};\n\n/**\n * Translates a mat4 by the given vector using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.SIMD.translate = function (out, a, v) {\n    var a0 = SIMD.Float32x4.load(a, 0),\n        a1 = SIMD.Float32x4.load(a, 4),\n        a2 = SIMD.Float32x4.load(a, 8),\n        a3 = SIMD.Float32x4.load(a, 12),\n        vec = SIMD.Float32x4(v[0], v[1], v[2] , 0);\n\n    if (a !== out) {\n        out[0] = a[0]; out[1] = a[1]; out[2] = a[2]; out[3] = a[3];\n        out[4] = a[4]; out[5] = a[5]; out[6] = a[6]; out[7] = a[7];\n        out[8] = a[8]; out[9] = a[9]; out[10] = a[10]; out[11] = a[11];\n    }\n\n    a0 = SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0));\n    a1 = SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1));\n    a2 = SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2));\n\n    var t0 = SIMD.Float32x4.add(a0, SIMD.Float32x4.add(a1, SIMD.Float32x4.add(a2, a3)));\n    SIMD.Float32x4.store(out, 12, t0);\n\n    return out;\n};\n\n/**\n * Translates a mat4 by the given vector using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.translate = glMatrix.USE_SIMD ? mat4.SIMD.translate : mat4.scalar.translate;\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.scalar.scale = function(out, a, v) {\n    var x = v[0], y = v[1], z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.SIMD.scale = function(out, a, v) {\n    var a0, a1, a2;\n    var vec = SIMD.Float32x4(v[0], v[1], v[2], 0);\n\n    a0 = SIMD.Float32x4.load(a, 0);\n    SIMD.Float32x4.store(\n        out, 0, SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0)));\n\n    a1 = SIMD.Float32x4.load(a, 4);\n    SIMD.Float32x4.store(\n        out, 4, SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1)));\n\n    a2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(\n        out, 8, SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2)));\n\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n */\nmat4.scale = glMatrix.USE_SIMD ? mat4.SIMD.scale : mat4.scalar.scale;\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.rotate = function (out, a, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t,\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23,\n        b00, b01, b02,\n        b10, b11, b12,\n        b20, b21, b22;\n\n    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateX = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[0]  = a[0];\n        out[1]  = a[1];\n        out[2]  = a[2];\n        out[3]  = a[3];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[4] = a10 * c + a20 * s;\n    out[5] = a11 * c + a21 * s;\n    out[6] = a12 * c + a22 * s;\n    out[7] = a13 * c + a23 * s;\n    out[8] = a20 * c - a10 * s;\n    out[9] = a21 * c - a11 * s;\n    out[10] = a22 * c - a12 * s;\n    out[11] = a23 * c - a13 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateX = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n      out[0]  = a[0];\n      out[1]  = a[1];\n      out[2]  = a[2];\n      out[3]  = a[3];\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_1 = SIMD.Float32x4.load(a, 4);\n    var a_2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(out, 4,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_2, s)));\n    SIMD.Float32x4.store(out, 8,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_2, c), SIMD.Float32x4.mul(a_1, s)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis using SIMD if availabe and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateX = glMatrix.USE_SIMD ? mat4.SIMD.rotateX : mat4.scalar.rotateX;\n\n/**\n * Rotates a matrix by the given angle around the Y axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateY = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c - a20 * s;\n    out[1] = a01 * c - a21 * s;\n    out[2] = a02 * c - a22 * s;\n    out[3] = a03 * c - a23 * s;\n    out[8] = a00 * s + a20 * c;\n    out[9] = a01 * s + a21 * c;\n    out[10] = a02 * s + a22 * c;\n    out[11] = a03 * s + a23 * c;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateY = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_0 = SIMD.Float32x4.load(a, 0);\n    var a_2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(out, 0,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_2, s)));\n    SIMD.Float32x4.store(out, 8,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, s), SIMD.Float32x4.mul(a_2, c)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis if SIMD available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n mat4.rotateY = glMatrix.USE_SIMD ? mat4.SIMD.rotateY : mat4.scalar.rotateY;\n\n/**\n * Rotates a matrix by the given angle around the Z axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateZ = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c + a10 * s;\n    out[1] = a01 * c + a11 * s;\n    out[2] = a02 * c + a12 * s;\n    out[3] = a03 * c + a13 * s;\n    out[4] = a10 * c - a00 * s;\n    out[5] = a11 * c - a01 * s;\n    out[6] = a12 * c - a02 * s;\n    out[7] = a13 * c - a03 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateZ = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_0 = SIMD.Float32x4.load(a, 0);\n    var a_1 = SIMD.Float32x4.load(a, 4);\n    SIMD.Float32x4.store(out, 0,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_1, s)));\n    SIMD.Float32x4.store(out, 4,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_0, s)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis if SIMD available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n mat4.rotateZ = glMatrix.USE_SIMD ? mat4.SIMD.rotateZ : mat4.scalar.rotateZ;\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nmat4.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = v[1];\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = v[2];\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.fromRotation = function(out, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t;\n\n    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = x * x * t + c;\n    out[1] = y * x * t + z * s;\n    out[2] = z * x * t - y * s;\n    out[3] = 0;\n    out[4] = x * y * t - z * s;\n    out[5] = y * y * t + c;\n    out[6] = z * y * t + x * s;\n    out[7] = 0;\n    out[8] = x * z * t + y * s;\n    out[9] = y * z * t - x * s;\n    out[10] = z * z * t + c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromXRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = 1;\n    out[1]  = 0;\n    out[2]  = 0;\n    out[3]  = 0;\n    out[4] = 0;\n    out[5] = c;\n    out[6] = s;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = -s;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromYRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = c;\n    out[1]  = 0;\n    out[2]  = -s;\n    out[3]  = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = s;\n    out[9] = 0;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromZRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = c;\n    out[1]  = s;\n    out[2]  = 0;\n    out[3]  = 0;\n    out[4] = -s;\n    out[5] = c;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslation = function (out, q, v) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - (yy + zz);\n    out[1] = xy + wz;\n    out[2] = xz - wy;\n    out[3] = 0;\n    out[4] = xy - wz;\n    out[5] = 1 - (xx + zz);\n    out[6] = yz + wx;\n    out[7] = 0;\n    out[8] = xz + wy;\n    out[9] = yz - wx;\n    out[10] = 1 - (xx + yy);\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nmat4.getTranslation = function (out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n};\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nmat4.getRotation = function (out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) { \n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S; \n    out[2] = (mat[1] - mat[4]) / S; \n  } else if ((mat[0] > mat[5])&(mat[0] > mat[10])) { \n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S; \n    out[2] = (mat[8] + mat[2]) / S; \n  } else if (mat[5] > mat[10]) { \n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S; \n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S; \n  } else { \n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslationScale = function (out, q, v, s) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2,\n        sx = s[0],\n        sy = s[1],\n        sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nmat4.fromRotationTranslationScaleOrigin = function (out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0], y = q[1], z = q[2], w = q[3],\n      x2 = x + x,\n      y2 = y + y,\n      z2 = z + z,\n\n      xx = x * x2,\n      xy = x * y2,\n      xz = x * z2,\n      yy = y * y2,\n      yz = y * z2,\n      zz = z * z2,\n      wx = w * x2,\n      wy = w * y2,\n      wz = w * z2,\n\n      sx = s[0],\n      sy = s[1],\n      sz = s[2],\n\n      ox = o[0],\n      oy = o[1],\n      oz = o[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);\n  out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);\n  out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);\n  out[15] = 1;\n\n  return out;\n};\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nmat4.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.frustum = function (out, left, right, bottom, top, near, far) {\n    var rl = 1 / (right - left),\n        tb = 1 / (top - bottom),\n        nf = 1 / (near - far);\n    out[0] = (near * 2) * rl;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = (near * 2) * tb;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = (right + left) * rl;\n    out[9] = (top + bottom) * tb;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (far * near * 2) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspective = function (out, fovy, aspect, near, far) {\n    var f = 1.0 / Math.tan(fovy / 2),\n        nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (2 * far * near) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspectiveFromFieldOfView = function (out, fov, near, far) {\n    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),\n        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),\n        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),\n        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),\n        xScale = 2.0 / (leftTan + rightTan),\n        yScale = 2.0 / (upTan + downTan);\n\n    out[0] = xScale;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    out[3] = 0.0;\n    out[4] = 0.0;\n    out[5] = yScale;\n    out[6] = 0.0;\n    out[7] = 0.0;\n    out[8] = -((leftTan - rightTan) * xScale * 0.5);\n    out[9] = ((upTan - downTan) * yScale * 0.5);\n    out[10] = far / (near - far);\n    out[11] = -1.0;\n    out[12] = 0.0;\n    out[13] = 0.0;\n    out[14] = (far * near) / (near - far);\n    out[15] = 0.0;\n    return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.ortho = function (out, left, right, bottom, top, near, far) {\n    var lr = 1 / (left - right),\n        bt = 1 / (bottom - top),\n        nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nmat4.lookAt = function (out, eye, center, up) {\n    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,\n        eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2],\n        centerx = center[0],\n        centery = center[1],\n        centerz = center[2];\n\n    if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n        Math.abs(eyey - centery) < glMatrix.EPSILON &&\n        Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n        return mat4.identity(out);\n    }\n\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz;\n\n    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n    if (!len) {\n        x0 = 0;\n        x1 = 0;\n        x2 = 0;\n    } else {\n        len = 1 / len;\n        x0 *= len;\n        x1 *= len;\n        x2 *= len;\n    }\n\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n    if (!len) {\n        y0 = 0;\n        y1 = 0;\n        y2 = 0;\n    } else {\n        len = 1 / len;\n        y0 *= len;\n        y1 *= len;\n        y2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat4.str = function (a) {\n    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat4.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n};\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n};\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nmat4.sub = mat4.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nmat4.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n};\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nmat4.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    out[6] = a[6] + (b[6] * scale);\n    out[7] = a[7] + (b[7] * scale);\n    out[8] = a[8] + (b[8] * scale);\n    out[9] = a[9] + (b[9] * scale);\n    out[10] = a[10] + (b[10] * scale);\n    out[11] = a[11] + (b[11] * scale);\n    out[12] = a[12] + (b[12] * scale);\n    out[13] = a[13] + (b[13] * scale);\n    out[14] = a[14] + (b[14] * scale);\n    out[15] = a[15] + (b[15] * scale);\n    return out;\n};\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat4.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && \n           a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && \n           a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n           a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat4.equals = function (a, b) {\n    var a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3],\n        a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7], \n        a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11], \n        a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n    var b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3],\n        b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7], \n        b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11], \n        b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n            Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n            Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n            Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n            Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n            Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n            Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n            Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n};\n\n\n\nmodule.exports = mat4;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/gl-matrix/src/gl-matrix/mat4.js\n// module id = 17\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\nvar mat3 = require(\"./mat3.js\");\nvar vec3 = require(\"./vec3.js\");\nvar vec4 = require(\"./vec4.js\");\n\n/**\n * @class Quaternion\n * @name quat\n */\nvar quat = {};\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nquat.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nquat.rotationTo = (function() {\n    var tmpvec3 = vec3.create();\n    var xUnitVec3 = vec3.fromValues(1,0,0);\n    var yUnitVec3 = vec3.fromValues(0,1,0);\n\n    return function(out, a, b) {\n        var dot = vec3.dot(a, b);\n        if (dot < -0.999999) {\n            vec3.cross(tmpvec3, xUnitVec3, a);\n            if (vec3.length(tmpvec3) < 0.000001)\n                vec3.cross(tmpvec3, yUnitVec3, a);\n            vec3.normalize(tmpvec3, tmpvec3);\n            quat.setAxisAngle(out, tmpvec3, Math.PI);\n            return out;\n        } else if (dot > 0.999999) {\n            out[0] = 0;\n            out[1] = 0;\n            out[2] = 0;\n            out[3] = 1;\n            return out;\n        } else {\n            vec3.cross(tmpvec3, a, b);\n            out[0] = tmpvec3[0];\n            out[1] = tmpvec3[1];\n            out[2] = tmpvec3[2];\n            out[3] = 1 + dot;\n            return quat.normalize(out, out);\n        }\n    };\n})();\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nquat.setAxes = (function() {\n    var matr = mat3.create();\n\n    return function(out, view, right, up) {\n        matr[0] = right[0];\n        matr[3] = right[1];\n        matr[6] = right[2];\n\n        matr[1] = up[0];\n        matr[4] = up[1];\n        matr[7] = up[2];\n\n        matr[2] = -view[0];\n        matr[5] = -view[1];\n        matr[8] = -view[2];\n\n        return quat.normalize(out, quat.fromMat3(out, matr));\n    };\n})();\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nquat.clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nquat.fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nquat.copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nquat.set = vec4.set;\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nquat.identity = function(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nquat.setAxisAngle = function(out, axis, rad) {\n    rad = rad * 0.5;\n    var s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n};\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nquat.getAxisAngle = function(out_axis, q) {\n    var rad = Math.acos(q[3]) * 2.0;\n    var s = Math.sin(rad / 2.0);\n    if (s != 0.0) {\n        out_axis[0] = q[0] / s;\n        out_axis[1] = q[1] / s;\n        out_axis[2] = q[2] / s;\n    } else {\n        // If s is zero, return any axis (no rotation - axis does not matter)\n        out_axis[0] = 1;\n        out_axis[1] = 0;\n        out_axis[2] = 0;\n    }\n    return rad;\n};\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nquat.add = vec4.add;\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nquat.multiply = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n};\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nquat.mul = quat.multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nquat.scale = vec4.scale;\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateX = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateY = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        by = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateZ = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bz = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n};\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nquat.calculateW = function (out, a) {\n    var x = a[0], y = a[1], z = a[2];\n\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n    return out;\n};\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nquat.dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nquat.lerp = vec4.lerp;\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nquat.slerp = function (out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    var        omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if ( cosom < 0.0 ) {\n        cosom = -cosom;\n        bx = - bx;\n        by = - by;\n        bz = - bz;\n        bw = - bw;\n    }\n    // calculate coefficients\n    if ( (1.0 - cosom) > 0.000001 ) {\n        // standard case (slerp)\n        omega  = Math.acos(cosom);\n        sinom  = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {        \n        // \"from\" and \"to\" quaternions are very close \n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n    \n    return out;\n};\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount\n * @returns {quat} out\n */\nquat.sqlerp = (function () {\n  var temp1 = quat.create();\n  var temp2 = quat.create();\n  \n  return function (out, a, b, c, d, t) {\n    quat.slerp(temp1, a, d, t);\n    quat.slerp(temp2, b, c, t);\n    quat.slerp(out, temp1, temp2, 2 * t * (1 - t));\n    \n    return out;\n  };\n}());\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nquat.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,\n        invDot = dot ? 1.0/dot : 0;\n    \n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0*invDot;\n    out[1] = -a1*invDot;\n    out[2] = -a2*invDot;\n    out[3] = a3*invDot;\n    return out;\n};\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nquat.conjugate = function (out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n * @function\n */\nquat.length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nquat.len = quat.length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nquat.squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nquat.sqrLen = quat.squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nquat.normalize = vec4.normalize;\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nquat.fromMat3 = function(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    var fTrace = m[0] + m[4] + m[8];\n    var fRoot;\n\n    if ( fTrace > 0.0 ) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5/fRoot;  // 1/(4w)\n        out[0] = (m[5]-m[7])*fRoot;\n        out[1] = (m[6]-m[2])*fRoot;\n        out[2] = (m[1]-m[3])*fRoot;\n    } else {\n        // |w| <= 1/2\n        var i = 0;\n        if ( m[4] > m[0] )\n          i = 1;\n        if ( m[8] > m[i*3+i] )\n          i = 2;\n        var j = (i+1)%3;\n        var k = (i+2)%3;\n        \n        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n    }\n    \n    return out;\n};\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nquat.str = function (a) {\n    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nquat.exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nquat.equals = vec4.equals;\n\nmodule.exports = quat;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/gl-matrix/src/gl-matrix/quat.js\n// module id = 18\n// module chunks = 0","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 2 Dimensional Vector\n * @name vec2\n */\nvar vec2 = {};\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nvec2.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = 0;\n    out[1] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nvec2.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nvec2.fromValues = function(x, y) {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nvec2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nvec2.set = function(out, x, y) {\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nvec2.sub = vec2.subtract;\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nvec2.mul = vec2.multiply;\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nvec2.div = vec2.divide;\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nvec2.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nvec2.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nvec2.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    return out;\n};\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nvec2.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n};\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nvec2.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nvec2.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nvec2.dist = vec2.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec2.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nvec2.sqrDist = vec2.squaredDistance;\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec2.length = function (a) {\n    var x = a[0],\n        y = a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nvec2.len = vec2.length;\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec2.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nvec2.sqrLen = vec2.squaredLength;\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nvec2.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nvec2.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n};\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nvec2.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1];\n    var len = x*x + y*y;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec2.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n};\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nvec2.cross = function(out, a, b) {\n    var z = a[0] * b[1] - a[1] * b[0];\n    out[0] = out[1] = 0;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\nvec2.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nvec2.random = function (out, scale) {\n    scale = scale || 1.0;\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    out[0] = Math.cos(r) * scale;\n    out[1] = Math.sin(r) * scale;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y;\n    out[1] = m[1] * x + m[3] * y;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2d = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat3 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat4 = function(out, a, m) {\n    var x = a[0], \n        y = a[1];\n    out[0] = m[0] * x + m[4] * y + m[12];\n    out[1] = m[1] * x + m[5] * y + m[13];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec2.forEach = (function() {\n    var vec = vec2.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 2;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec2.str = function (a) {\n    return 'vec2(' + a[0] + ', ' + a[1] + ')';\n};\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec2.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec2.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1];\n    var b0 = b[0], b1 = b[1];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n};\n\nmodule.exports = vec2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/gl-matrix/src/gl-matrix/vec2.js\n// module id = 19\n// module chunks = 0","/*\n * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n * http://code.google.com/p/poly2tri/\n *\n * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n * https://github.com/r3mi/poly2tri.js\n *\n * All rights reserved.\n *\n * Distributed under the 3-clause BSD License, see LICENSE.txt\n */\n\n\"use strict\";\n\n/*\n * Function added in the JavaScript version (was not present in the c++ version)\n */\n\n/**\n * assert and throw an exception.\n *\n * @private\n * @param {boolean} condition   the condition which is asserted\n * @param {string} message      the message which is display is condition is falsy\n */\nfunction assert(condition, message) {\n    if (!condition) {\n        throw new Error(message || \"Assert Failed\");\n    }\n}\nmodule.exports = assert;\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/poly2tri/src/assert.js\n// module id = 20\n// module chunks = 0","/*\n * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n * http://code.google.com/p/poly2tri/\n * \n * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n * https://github.com/r3mi/poly2tri.js\n * \n * All rights reserved.\n * \n * Distributed under the 3-clause BSD License, see LICENSE.txt\n */\n\n\"use strict\";\n\n\n/*\n * Note\n * ====\n * the structure of this JavaScript version of poly2tri intentionally follows\n * as closely as possible the structure of the reference C++ version, to make it \n * easier to keep the 2 versions in sync.\n */\n\nvar xy = require('./xy');\n\n// ------------------------------------------------------------------------Point\n/**\n * Construct a point\n * @example\n *      var point = new poly2tri.Point(150, 150);\n * @public\n * @constructor\n * @struct\n * @param {number=} x    coordinate (0 if undefined)\n * @param {number=} y    coordinate (0 if undefined)\n */\nvar Point = function(x, y) {\n    /**\n     * @type {number}\n     * @expose\n     */\n    this.x = +x || 0;\n    /**\n     * @type {number}\n     * @expose\n     */\n    this.y = +y || 0;\n\n    // All extra fields added to Point are prefixed with _p2t_\n    // to avoid collisions if custom Point class is used.\n\n    /**\n     * The edges this point constitutes an upper ending point\n     * @private\n     * @type {Array.<Edge>}\n     */\n    this._p2t_edge_list = null;\n};\n\n/**\n * For pretty printing\n * @example\n *      \"p=\" + new poly2tri.Point(5,42)\n *      // → \"p=(5;42)\"\n * @returns {string} <code>\"(x;y)\"</code>\n */\nPoint.prototype.toString = function() {\n    return xy.toStringBase(this);\n};\n\n/**\n * JSON output, only coordinates\n * @example\n *      JSON.stringify(new poly2tri.Point(1,2))\n *      // → '{\"x\":1,\"y\":2}'\n */\nPoint.prototype.toJSON = function() {\n    return { x: this.x, y: this.y };\n};\n\n/**\n * Creates a copy of this Point object.\n * @return {Point} new cloned point\n */\nPoint.prototype.clone = function() {\n    return new Point(this.x, this.y);\n};\n\n/**\n * Set this Point instance to the origo. <code>(0; 0)</code>\n * @return {Point} this (for chaining)\n */\nPoint.prototype.set_zero = function() {\n    this.x = 0.0;\n    this.y = 0.0;\n    return this; // for chaining\n};\n\n/**\n * Set the coordinates of this instance.\n * @param {number} x   coordinate\n * @param {number} y   coordinate\n * @return {Point} this (for chaining)\n */\nPoint.prototype.set = function(x, y) {\n    this.x = +x || 0;\n    this.y = +y || 0;\n    return this; // for chaining\n};\n\n/**\n * Negate this Point instance. (component-wise)\n * @return {Point} this (for chaining)\n */\nPoint.prototype.negate = function() {\n    this.x = -this.x;\n    this.y = -this.y;\n    return this; // for chaining\n};\n\n/**\n * Add another Point object to this instance. (component-wise)\n * @param {!Point} n - Point object.\n * @return {Point} this (for chaining)\n */\nPoint.prototype.add = function(n) {\n    this.x += n.x;\n    this.y += n.y;\n    return this; // for chaining\n};\n\n/**\n * Subtract this Point instance with another point given. (component-wise)\n * @param {!Point} n - Point object.\n * @return {Point} this (for chaining)\n */\nPoint.prototype.sub = function(n) {\n    this.x -= n.x;\n    this.y -= n.y;\n    return this; // for chaining\n};\n\n/**\n * Multiply this Point instance by a scalar. (component-wise)\n * @param {number} s   scalar.\n * @return {Point} this (for chaining)\n */\nPoint.prototype.mul = function(s) {\n    this.x *= s;\n    this.y *= s;\n    return this; // for chaining\n};\n\n/**\n * Return the distance of this Point instance from the origo.\n * @return {number} distance\n */\nPoint.prototype.length = function() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n};\n\n/**\n * Normalize this Point instance (as a vector).\n * @return {number} The original distance of this instance from the origo.\n */\nPoint.prototype.normalize = function() {\n    var len = this.length();\n    this.x /= len;\n    this.y /= len;\n    return len;\n};\n\n/**\n * Test this Point object with another for equality.\n * @param {!XY} p - any \"Point like\" object with {x,y}\n * @return {boolean} <code>true</code> if same x and y coordinates, <code>false</code> otherwise.\n */\nPoint.prototype.equals = function(p) {\n    return this.x === p.x && this.y === p.y;\n};\n\n\n// -----------------------------------------------------Point (\"static\" methods)\n\n/**\n * Negate a point component-wise and return the result as a new Point object.\n * @param {!XY} p - any \"Point like\" object with {x,y}\n * @return {Point} the resulting Point object.\n */\nPoint.negate = function(p) {\n    return new Point(-p.x, -p.y);\n};\n\n/**\n * Add two points component-wise and return the result as a new Point object.\n * @param {!XY} a - any \"Point like\" object with {x,y}\n * @param {!XY} b - any \"Point like\" object with {x,y}\n * @return {Point} the resulting Point object.\n */\nPoint.add = function(a, b) {\n    return new Point(a.x + b.x, a.y + b.y);\n};\n\n/**\n * Subtract two points component-wise and return the result as a new Point object.\n * @param {!XY} a - any \"Point like\" object with {x,y}\n * @param {!XY} b - any \"Point like\" object with {x,y}\n * @return {Point} the resulting Point object.\n */\nPoint.sub = function(a, b) {\n    return new Point(a.x - b.x, a.y - b.y);\n};\n\n/**\n * Multiply a point by a scalar and return the result as a new Point object.\n * @param {number} s - the scalar\n * @param {!XY} p - any \"Point like\" object with {x,y}\n * @return {Point} the resulting Point object.\n */\nPoint.mul = function(s, p) {\n    return new Point(s * p.x, s * p.y);\n};\n\n/**\n * Perform the cross product on either two points (this produces a scalar)\n * or a point and a scalar (this produces a point).\n * This function requires two parameters, either may be a Point object or a\n * number.\n * @param  {XY|number} a - Point object or scalar.\n * @param  {XY|number} b - Point object or scalar.\n * @return {Point|number} a Point object or a number, depending on the parameters.\n */\nPoint.cross = function(a, b) {\n    if (typeof(a) === 'number') {\n        if (typeof(b) === 'number') {\n            return a * b;\n        } else {\n            return new Point(-a * b.y, a * b.x);\n        }\n    } else {\n        if (typeof(b) === 'number') {\n            return new Point(b * a.y, -b * a.x);\n        } else {\n            return a.x * b.y - a.y * b.x;\n        }\n    }\n};\n\n\n// -----------------------------------------------------------------\"Point-Like\"\n/*\n * The following functions operate on \"Point\" or any \"Point like\" object \n * with {x,y} (duck typing).\n */\n\nPoint.toString = xy.toString;\nPoint.compare = xy.compare;\nPoint.cmp = xy.compare; // backward compatibility\nPoint.equals = xy.equals;\n\n/**\n * Peform the dot product on two vectors.\n * @public\n * @param {!XY} a - any \"Point like\" object with {x,y}\n * @param {!XY} b - any \"Point like\" object with {x,y}\n * @return {number} The dot product\n */\nPoint.dot = function(a, b) {\n    return a.x * b.x + a.y * b.y;\n};\n\n\n// ---------------------------------------------------------Exports (public API)\n\nmodule.exports = Point;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/poly2tri/src/point.js\n// module id = 21\n// module chunks = 0","/*\n * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n * http://code.google.com/p/poly2tri/\n * \n * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n * https://github.com/r3mi/poly2tri.js\n * \n * All rights reserved.\n * \n * Distributed under the 3-clause BSD License, see LICENSE.txt\n */\n\n/* jshint latedef:nofunc, maxcomplexity:9 */\n\n\"use strict\";\n\n/**\n * This 'Sweep' module is present in order to keep this JavaScript version\n * as close as possible to the reference C++ version, even though almost all\n * functions could be declared as methods on the {@linkcode module:sweepcontext~SweepContext} object.\n * @module\n * @private\n */\n\n/*\n * Note\n * ====\n * the structure of this JavaScript version of poly2tri intentionally follows\n * as closely as possible the structure of the reference C++ version, to make it \n * easier to keep the 2 versions in sync.\n */\n\nvar assert = require('./assert');\nvar PointError = require('./pointerror');\nvar Triangle = require('./triangle');\nvar Node = require('./advancingfront').Node;\n\n\n// ------------------------------------------------------------------------utils\n\nvar utils = require('./utils');\n\n/** @const */\nvar EPSILON = utils.EPSILON;\n\n/** @const */\nvar Orientation = utils.Orientation;\n/** @const */\nvar orient2d = utils.orient2d;\n/** @const */\nvar inScanArea = utils.inScanArea;\n/** @const */\nvar isAngleObtuse = utils.isAngleObtuse;\n\n\n// ------------------------------------------------------------------------Sweep\n\n/**\n * Triangulate the polygon with holes and Steiner points.\n * Do this AFTER you've added the polyline, holes, and Steiner points\n * @private\n * @param {!SweepContext} tcx - SweepContext object\n */\nfunction triangulate(tcx) {\n    tcx.initTriangulation();\n    tcx.createAdvancingFront();\n    // Sweep points; build mesh\n    sweepPoints(tcx);\n    // Clean up\n    finalizationPolygon(tcx);\n}\n\n/**\n * Start sweeping the Y-sorted point set from bottom to top\n * @param {!SweepContext} tcx - SweepContext object\n */\nfunction sweepPoints(tcx) {\n    var i, len = tcx.pointCount();\n    for (i = 1; i < len; ++i) {\n        var point = tcx.getPoint(i);\n        var node = pointEvent(tcx, point);\n        var edges = point._p2t_edge_list;\n        for (var j = 0; edges && j < edges.length; ++j) {\n            edgeEventByEdge(tcx, edges[j], node);\n        }\n    }\n}\n\n/**\n * @param {!SweepContext} tcx - SweepContext object\n */\nfunction finalizationPolygon(tcx) {\n    // Get an Internal triangle to start with\n    var t = tcx.front().head().next.triangle;\n    var p = tcx.front().head().next.point;\n    while (!t.getConstrainedEdgeCW(p)) {\n        t = t.neighborCCW(p);\n    }\n\n    // Collect interior triangles constrained by edges\n    tcx.meshClean(t);\n}\n\n/**\n * Find closes node to the left of the new point and\n * create a new triangle. If needed new holes and basins\n * will be filled to.\n * @param {!SweepContext} tcx - SweepContext object\n * @param {!XY} point   Point\n */\nfunction pointEvent(tcx, point) {\n    var node = tcx.locateNode(point);\n    var new_node = newFrontTriangle(tcx, point, node);\n\n    // Only need to check +epsilon since point never have smaller\n    // x value than node due to how we fetch nodes from the front\n    if (point.x <= node.point.x + (EPSILON)) {\n        fill(tcx, node);\n    }\n\n    //tcx.AddNode(new_node);\n\n    fillAdvancingFront(tcx, new_node);\n    return new_node;\n}\n\nfunction edgeEventByEdge(tcx, edge, node) {\n    tcx.edge_event.constrained_edge = edge;\n    tcx.edge_event.right = (edge.p.x > edge.q.x);\n\n    if (isEdgeSideOfTriangle(node.triangle, edge.p, edge.q)) {\n        return;\n    }\n\n    // For now we will do all needed filling\n    // TODO: integrate with flip process might give some better performance\n    //       but for now this avoid the issue with cases that needs both flips and fills\n    fillEdgeEvent(tcx, edge, node);\n    edgeEventByPoints(tcx, edge.p, edge.q, node.triangle, edge.q);\n}\n\nfunction edgeEventByPoints(tcx, ep, eq, triangle, point) {\n    if (isEdgeSideOfTriangle(triangle, ep, eq)) {\n        return;\n    }\n\n    var p1 = triangle.pointCCW(point);\n    var o1 = orient2d(eq, p1, ep);\n    if (o1 === Orientation.COLLINEAR) {\n        // TODO integrate here changes from C++ version\n        // (C++ repo revision 09880a869095 dated March 8, 2011)\n        throw new PointError('poly2tri EdgeEvent: Collinear not supported!', [eq, p1, ep]);\n    }\n\n    var p2 = triangle.pointCW(point);\n    var o2 = orient2d(eq, p2, ep);\n    if (o2 === Orientation.COLLINEAR) {\n        // TODO integrate here changes from C++ version\n        // (C++ repo revision 09880a869095 dated March 8, 2011)\n        throw new PointError('poly2tri EdgeEvent: Collinear not supported!', [eq, p2, ep]);\n    }\n\n    if (o1 === o2) {\n        // Need to decide if we are rotating CW or CCW to get to a triangle\n        // that will cross edge\n        if (o1 === Orientation.CW) {\n            triangle = triangle.neighborCCW(point);\n        } else {\n            triangle = triangle.neighborCW(point);\n        }\n        edgeEventByPoints(tcx, ep, eq, triangle, point);\n    } else {\n        // This triangle crosses constraint so lets flippin start!\n        flipEdgeEvent(tcx, ep, eq, triangle, point);\n    }\n}\n\nfunction isEdgeSideOfTriangle(triangle, ep, eq) {\n    var index = triangle.edgeIndex(ep, eq);\n    if (index !== -1) {\n        triangle.markConstrainedEdgeByIndex(index);\n        var t = triangle.getNeighbor(index);\n        if (t) {\n            t.markConstrainedEdgeByPoints(ep, eq);\n        }\n        return true;\n    }\n    return false;\n}\n\n/**\n * Creates a new front triangle and legalize it\n * @param {!SweepContext} tcx - SweepContext object\n */\nfunction newFrontTriangle(tcx, point, node) {\n    var triangle = new Triangle(point, node.point, node.next.point);\n\n    triangle.markNeighbor(node.triangle);\n    tcx.addToMap(triangle);\n\n    var new_node = new Node(point);\n    new_node.next = node.next;\n    new_node.prev = node;\n    node.next.prev = new_node;\n    node.next = new_node;\n\n    if (!legalize(tcx, triangle)) {\n        tcx.mapTriangleToNodes(triangle);\n    }\n\n    return new_node;\n}\n\n/**\n * Adds a triangle to the advancing front to fill a hole.\n * @param {!SweepContext} tcx - SweepContext object\n * @param node - middle node, that is the bottom of the hole\n */\nfunction fill(tcx, node) {\n    var triangle = new Triangle(node.prev.point, node.point, node.next.point);\n\n    // TODO: should copy the constrained_edge value from neighbor triangles\n    //       for now constrained_edge values are copied during the legalize\n    triangle.markNeighbor(node.prev.triangle);\n    triangle.markNeighbor(node.triangle);\n\n    tcx.addToMap(triangle);\n\n    // Update the advancing front\n    node.prev.next = node.next;\n    node.next.prev = node.prev;\n\n\n    // If it was legalized the triangle has already been mapped\n    if (!legalize(tcx, triangle)) {\n        tcx.mapTriangleToNodes(triangle);\n    }\n\n    //tcx.removeNode(node);\n}\n\n/**\n * Fills holes in the Advancing Front\n * @param {!SweepContext} tcx - SweepContext object\n */\nfunction fillAdvancingFront(tcx, n) {\n    // Fill right holes\n    var node = n.next;\n    while (node.next) {\n        // TODO integrate here changes from C++ version\n        // (C++ repo revision acf81f1f1764 dated April 7, 2012)\n        if (isAngleObtuse(node.point, node.next.point, node.prev.point)) {\n            break;\n        }\n        fill(tcx, node);\n        node = node.next;\n    }\n\n    // Fill left holes\n    node = n.prev;\n    while (node.prev) {\n        // TODO integrate here changes from C++ version\n        // (C++ repo revision acf81f1f1764 dated April 7, 2012)\n        if (isAngleObtuse(node.point, node.next.point, node.prev.point)) {\n            break;\n        }\n        fill(tcx, node);\n        node = node.prev;\n    }\n\n    // Fill right basins\n    if (n.next && n.next.next) {\n        if (isBasinAngleRight(n)) {\n            fillBasin(tcx, n);\n        }\n    }\n}\n\n/**\n * The basin angle is decided against the horizontal line [1,0].\n * @param {Node} node\n * @return {boolean} true if angle < 3*π/4\n */\nfunction isBasinAngleRight(node) {\n    var ax = node.point.x - node.next.next.point.x;\n    var ay = node.point.y - node.next.next.point.y;\n    assert(ay >= 0, \"unordered y\");\n    return (ax >= 0 || Math.abs(ax) < ay);\n}\n\n/**\n * Returns true if triangle was legalized\n * @param {!SweepContext} tcx - SweepContext object\n * @return {boolean}\n */\nfunction legalize(tcx, t) {\n    // To legalize a triangle we start by finding if any of the three edges\n    // violate the Delaunay condition\n    for (var i = 0; i < 3; ++i) {\n        if (t.delaunay_edge[i]) {\n            continue;\n        }\n        var ot = t.getNeighbor(i);\n        if (ot) {\n            var p = t.getPoint(i);\n            var op = ot.oppositePoint(t, p);\n            var oi = ot.index(op);\n\n            // If this is a Constrained Edge or a Delaunay Edge(only during recursive legalization)\n            // then we should not try to legalize\n            if (ot.constrained_edge[oi] || ot.delaunay_edge[oi]) {\n                t.constrained_edge[i] = ot.constrained_edge[oi];\n                continue;\n            }\n\n            var inside = inCircle(p, t.pointCCW(p), t.pointCW(p), op);\n            if (inside) {\n                // Lets mark this shared edge as Delaunay\n                t.delaunay_edge[i] = true;\n                ot.delaunay_edge[oi] = true;\n\n                // Lets rotate shared edge one vertex CW to legalize it\n                rotateTrianglePair(t, p, ot, op);\n\n                // We now got one valid Delaunay Edge shared by two triangles\n                // This gives us 4 new edges to check for Delaunay\n\n                // Make sure that triangle to node mapping is done only one time for a specific triangle\n                var not_legalized = !legalize(tcx, t);\n                if (not_legalized) {\n                    tcx.mapTriangleToNodes(t);\n                }\n\n                not_legalized = !legalize(tcx, ot);\n                if (not_legalized) {\n                    tcx.mapTriangleToNodes(ot);\n                }\n                // Reset the Delaunay edges, since they only are valid Delaunay edges\n                // until we add a new triangle or point.\n                // XXX: need to think about this. Can these edges be tried after we\n                //      return to previous recursive level?\n                t.delaunay_edge[i] = false;\n                ot.delaunay_edge[oi] = false;\n\n                // If triangle have been legalized no need to check the other edges since\n                // the recursive legalization will handles those so we can end here.\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n/**\n * <b>Requirement</b>:<br>\n * 1. a,b and c form a triangle.<br>\n * 2. a and d is know to be on opposite side of bc<br>\n * <pre>\n *                a\n *                +\n *               / \\\n *              /   \\\n *            b/     \\c\n *            +-------+\n *           /    d    \\\n *          /           \\\n * </pre>\n * <b>Fact</b>: d has to be in area B to have a chance to be inside the circle formed by\n *  a,b and c<br>\n *  d is outside B if orient2d(a,b,d) or orient2d(c,a,d) is CW<br>\n *  This preknowledge gives us a way to optimize the incircle test\n * @param pa - triangle point, opposite d\n * @param pb - triangle point\n * @param pc - triangle point\n * @param pd - point opposite a\n * @return {boolean} true if d is inside circle, false if on circle edge\n */\nfunction inCircle(pa, pb, pc, pd) {\n    var adx = pa.x - pd.x;\n    var ady = pa.y - pd.y;\n    var bdx = pb.x - pd.x;\n    var bdy = pb.y - pd.y;\n\n    var adxbdy = adx * bdy;\n    var bdxady = bdx * ady;\n    var oabd = adxbdy - bdxady;\n    if (oabd <= 0) {\n        return false;\n    }\n\n    var cdx = pc.x - pd.x;\n    var cdy = pc.y - pd.y;\n\n    var cdxady = cdx * ady;\n    var adxcdy = adx * cdy;\n    var ocad = cdxady - adxcdy;\n    if (ocad <= 0) {\n        return false;\n    }\n\n    var bdxcdy = bdx * cdy;\n    var cdxbdy = cdx * bdy;\n\n    var alift = adx * adx + ady * ady;\n    var blift = bdx * bdx + bdy * bdy;\n    var clift = cdx * cdx + cdy * cdy;\n\n    var det = alift * (bdxcdy - cdxbdy) + blift * ocad + clift * oabd;\n    return det > 0;\n}\n\n/**\n * Rotates a triangle pair one vertex CW\n *<pre>\n *       n2                    n2\n *  P +-----+             P +-----+\n *    | t  /|               |\\  t |\n *    |   / |               | \\   |\n *  n1|  /  |n3           n1|  \\  |n3\n *    | /   |    after CW   |   \\ |\n *    |/ oT |               | oT \\|\n *    +-----+ oP            +-----+\n *       n4                    n4\n * </pre>\n */\nfunction rotateTrianglePair(t, p, ot, op) {\n    var n1, n2, n3, n4;\n    n1 = t.neighborCCW(p);\n    n2 = t.neighborCW(p);\n    n3 = ot.neighborCCW(op);\n    n4 = ot.neighborCW(op);\n\n    var ce1, ce2, ce3, ce4;\n    ce1 = t.getConstrainedEdgeCCW(p);\n    ce2 = t.getConstrainedEdgeCW(p);\n    ce3 = ot.getConstrainedEdgeCCW(op);\n    ce4 = ot.getConstrainedEdgeCW(op);\n\n    var de1, de2, de3, de4;\n    de1 = t.getDelaunayEdgeCCW(p);\n    de2 = t.getDelaunayEdgeCW(p);\n    de3 = ot.getDelaunayEdgeCCW(op);\n    de4 = ot.getDelaunayEdgeCW(op);\n\n    t.legalize(p, op);\n    ot.legalize(op, p);\n\n    // Remap delaunay_edge\n    ot.setDelaunayEdgeCCW(p, de1);\n    t.setDelaunayEdgeCW(p, de2);\n    t.setDelaunayEdgeCCW(op, de3);\n    ot.setDelaunayEdgeCW(op, de4);\n\n    // Remap constrained_edge\n    ot.setConstrainedEdgeCCW(p, ce1);\n    t.setConstrainedEdgeCW(p, ce2);\n    t.setConstrainedEdgeCCW(op, ce3);\n    ot.setConstrainedEdgeCW(op, ce4);\n\n    // Remap neighbors\n    // XXX: might optimize the markNeighbor by keeping track of\n    //      what side should be assigned to what neighbor after the\n    //      rotation. Now mark neighbor does lots of testing to find\n    //      the right side.\n    t.clearNeighbors();\n    ot.clearNeighbors();\n    if (n1) {\n        ot.markNeighbor(n1);\n    }\n    if (n2) {\n        t.markNeighbor(n2);\n    }\n    if (n3) {\n        t.markNeighbor(n3);\n    }\n    if (n4) {\n        ot.markNeighbor(n4);\n    }\n    t.markNeighbor(ot);\n}\n\n/**\n * Fills a basin that has formed on the Advancing Front to the right\n * of given node.<br>\n * First we decide a left,bottom and right node that forms the\n * boundaries of the basin. Then we do a reqursive fill.\n *\n * @param {!SweepContext} tcx - SweepContext object\n * @param node - starting node, this or next node will be left node\n */\nfunction fillBasin(tcx, node) {\n    if (orient2d(node.point, node.next.point, node.next.next.point) === Orientation.CCW) {\n        tcx.basin.left_node = node.next.next;\n    } else {\n        tcx.basin.left_node = node.next;\n    }\n\n    // Find the bottom and right node\n    tcx.basin.bottom_node = tcx.basin.left_node;\n    while (tcx.basin.bottom_node.next && tcx.basin.bottom_node.point.y >= tcx.basin.bottom_node.next.point.y) {\n        tcx.basin.bottom_node = tcx.basin.bottom_node.next;\n    }\n    if (tcx.basin.bottom_node === tcx.basin.left_node) {\n        // No valid basin\n        return;\n    }\n\n    tcx.basin.right_node = tcx.basin.bottom_node;\n    while (tcx.basin.right_node.next && tcx.basin.right_node.point.y < tcx.basin.right_node.next.point.y) {\n        tcx.basin.right_node = tcx.basin.right_node.next;\n    }\n    if (tcx.basin.right_node === tcx.basin.bottom_node) {\n        // No valid basins\n        return;\n    }\n\n    tcx.basin.width = tcx.basin.right_node.point.x - tcx.basin.left_node.point.x;\n    tcx.basin.left_highest = tcx.basin.left_node.point.y > tcx.basin.right_node.point.y;\n\n    fillBasinReq(tcx, tcx.basin.bottom_node);\n}\n\n/**\n * Recursive algorithm to fill a Basin with triangles\n *\n * @param {!SweepContext} tcx - SweepContext object\n * @param node - bottom_node\n */\nfunction fillBasinReq(tcx, node) {\n    // if shallow stop filling\n    if (isShallow(tcx, node)) {\n        return;\n    }\n\n    fill(tcx, node);\n\n    var o;\n    if (node.prev === tcx.basin.left_node && node.next === tcx.basin.right_node) {\n        return;\n    } else if (node.prev === tcx.basin.left_node) {\n        o = orient2d(node.point, node.next.point, node.next.next.point);\n        if (o === Orientation.CW) {\n            return;\n        }\n        node = node.next;\n    } else if (node.next === tcx.basin.right_node) {\n        o = orient2d(node.point, node.prev.point, node.prev.prev.point);\n        if (o === Orientation.CCW) {\n            return;\n        }\n        node = node.prev;\n    } else {\n        // Continue with the neighbor node with lowest Y value\n        if (node.prev.point.y < node.next.point.y) {\n            node = node.prev;\n        } else {\n            node = node.next;\n        }\n    }\n\n    fillBasinReq(tcx, node);\n}\n\nfunction isShallow(tcx, node) {\n    var height;\n    if (tcx.basin.left_highest) {\n        height = tcx.basin.left_node.point.y - node.point.y;\n    } else {\n        height = tcx.basin.right_node.point.y - node.point.y;\n    }\n\n    // if shallow stop filling\n    if (tcx.basin.width > height) {\n        return true;\n    }\n    return false;\n}\n\nfunction fillEdgeEvent(tcx, edge, node) {\n    if (tcx.edge_event.right) {\n        fillRightAboveEdgeEvent(tcx, edge, node);\n    } else {\n        fillLeftAboveEdgeEvent(tcx, edge, node);\n    }\n}\n\nfunction fillRightAboveEdgeEvent(tcx, edge, node) {\n    while (node.next.point.x < edge.p.x) {\n        // Check if next node is below the edge\n        if (orient2d(edge.q, node.next.point, edge.p) === Orientation.CCW) {\n            fillRightBelowEdgeEvent(tcx, edge, node);\n        } else {\n            node = node.next;\n        }\n    }\n}\n\nfunction fillRightBelowEdgeEvent(tcx, edge, node) {\n    if (node.point.x < edge.p.x) {\n        if (orient2d(node.point, node.next.point, node.next.next.point) === Orientation.CCW) {\n            // Concave\n            fillRightConcaveEdgeEvent(tcx, edge, node);\n        } else {\n            // Convex\n            fillRightConvexEdgeEvent(tcx, edge, node);\n            // Retry this one\n            fillRightBelowEdgeEvent(tcx, edge, node);\n        }\n    }\n}\n\nfunction fillRightConcaveEdgeEvent(tcx, edge, node) {\n    fill(tcx, node.next);\n    if (node.next.point !== edge.p) {\n        // Next above or below edge?\n        if (orient2d(edge.q, node.next.point, edge.p) === Orientation.CCW) {\n            // Below\n            if (orient2d(node.point, node.next.point, node.next.next.point) === Orientation.CCW) {\n                // Next is concave\n                fillRightConcaveEdgeEvent(tcx, edge, node);\n            } else {\n                // Next is convex\n                /* jshint noempty:false */\n            }\n        }\n    }\n}\n\nfunction fillRightConvexEdgeEvent(tcx, edge, node) {\n    // Next concave or convex?\n    if (orient2d(node.next.point, node.next.next.point, node.next.next.next.point) === Orientation.CCW) {\n        // Concave\n        fillRightConcaveEdgeEvent(tcx, edge, node.next);\n    } else {\n        // Convex\n        // Next above or below edge?\n        if (orient2d(edge.q, node.next.next.point, edge.p) === Orientation.CCW) {\n            // Below\n            fillRightConvexEdgeEvent(tcx, edge, node.next);\n        } else {\n            // Above\n            /* jshint noempty:false */\n        }\n    }\n}\n\nfunction fillLeftAboveEdgeEvent(tcx, edge, node) {\n    while (node.prev.point.x > edge.p.x) {\n        // Check if next node is below the edge\n        if (orient2d(edge.q, node.prev.point, edge.p) === Orientation.CW) {\n            fillLeftBelowEdgeEvent(tcx, edge, node);\n        } else {\n            node = node.prev;\n        }\n    }\n}\n\nfunction fillLeftBelowEdgeEvent(tcx, edge, node) {\n    if (node.point.x > edge.p.x) {\n        if (orient2d(node.point, node.prev.point, node.prev.prev.point) === Orientation.CW) {\n            // Concave\n            fillLeftConcaveEdgeEvent(tcx, edge, node);\n        } else {\n            // Convex\n            fillLeftConvexEdgeEvent(tcx, edge, node);\n            // Retry this one\n            fillLeftBelowEdgeEvent(tcx, edge, node);\n        }\n    }\n}\n\nfunction fillLeftConvexEdgeEvent(tcx, edge, node) {\n    // Next concave or convex?\n    if (orient2d(node.prev.point, node.prev.prev.point, node.prev.prev.prev.point) === Orientation.CW) {\n        // Concave\n        fillLeftConcaveEdgeEvent(tcx, edge, node.prev);\n    } else {\n        // Convex\n        // Next above or below edge?\n        if (orient2d(edge.q, node.prev.prev.point, edge.p) === Orientation.CW) {\n            // Below\n            fillLeftConvexEdgeEvent(tcx, edge, node.prev);\n        } else {\n            // Above\n            /* jshint noempty:false */\n        }\n    }\n}\n\nfunction fillLeftConcaveEdgeEvent(tcx, edge, node) {\n    fill(tcx, node.prev);\n    if (node.prev.point !== edge.p) {\n        // Next above or below edge?\n        if (orient2d(edge.q, node.prev.point, edge.p) === Orientation.CW) {\n            // Below\n            if (orient2d(node.point, node.prev.point, node.prev.prev.point) === Orientation.CW) {\n                // Next is concave\n                fillLeftConcaveEdgeEvent(tcx, edge, node);\n            } else {\n                // Next is convex\n                /* jshint noempty:false */\n            }\n        }\n    }\n}\n\nfunction flipEdgeEvent(tcx, ep, eq, t, p) {\n    var ot = t.neighborAcross(p);\n    assert(ot, \"FLIP failed due to missing triangle!\");\n\n    var op = ot.oppositePoint(t, p);\n\n    // Additional check from Java version (see issue #88)\n    if (t.getConstrainedEdgeAcross(p)) {\n        var index = t.index(p);\n        throw new PointError(\"poly2tri Intersecting Constraints\",\n                [p, op, t.getPoint((index + 1) % 3), t.getPoint((index + 2) % 3)]);\n    }\n\n    if (inScanArea(p, t.pointCCW(p), t.pointCW(p), op)) {\n        // Lets rotate shared edge one vertex CW\n        rotateTrianglePair(t, p, ot, op);\n        tcx.mapTriangleToNodes(t);\n        tcx.mapTriangleToNodes(ot);\n\n        // XXX: in the original C++ code for the next 2 lines, we are\n        // comparing point values (and not pointers). In this JavaScript\n        // code, we are comparing point references (pointers). This works\n        // because we can't have 2 different points with the same values.\n        // But to be really equivalent, we should use \"Point.equals\" here.\n        if (p === eq && op === ep) {\n            if (eq === tcx.edge_event.constrained_edge.q && ep === tcx.edge_event.constrained_edge.p) {\n                t.markConstrainedEdgeByPoints(ep, eq);\n                ot.markConstrainedEdgeByPoints(ep, eq);\n                legalize(tcx, t);\n                legalize(tcx, ot);\n            } else {\n                // XXX: I think one of the triangles should be legalized here?\n                /* jshint noempty:false */\n            }\n        } else {\n            var o = orient2d(eq, op, ep);\n            t = nextFlipTriangle(tcx, o, t, ot, p, op);\n            flipEdgeEvent(tcx, ep, eq, t, p);\n        }\n    } else {\n        var newP = nextFlipPoint(ep, eq, ot, op);\n        flipScanEdgeEvent(tcx, ep, eq, t, ot, newP);\n        edgeEventByPoints(tcx, ep, eq, t, p);\n    }\n}\n\n/**\n * After a flip we have two triangles and know that only one will still be\n * intersecting the edge. So decide which to contiune with and legalize the other\n *\n * @param {!SweepContext} tcx - SweepContext object\n * @param o - should be the result of an orient2d( eq, op, ep )\n * @param t - triangle 1\n * @param ot - triangle 2\n * @param p - a point shared by both triangles\n * @param op - another point shared by both triangles\n * @return returns the triangle still intersecting the edge\n */\nfunction nextFlipTriangle(tcx, o, t, ot, p, op) {\n    var edge_index;\n    if (o === Orientation.CCW) {\n        // ot is not crossing edge after flip\n        edge_index = ot.edgeIndex(p, op);\n        ot.delaunay_edge[edge_index] = true;\n        legalize(tcx, ot);\n        ot.clearDelaunayEdges();\n        return t;\n    }\n\n    // t is not crossing edge after flip\n    edge_index = t.edgeIndex(p, op);\n\n    t.delaunay_edge[edge_index] = true;\n    legalize(tcx, t);\n    t.clearDelaunayEdges();\n    return ot;\n}\n\n/**\n * When we need to traverse from one triangle to the next we need\n * the point in current triangle that is the opposite point to the next\n * triangle.\n */\nfunction nextFlipPoint(ep, eq, ot, op) {\n    var o2d = orient2d(eq, op, ep);\n    if (o2d === Orientation.CW) {\n        // Right\n        return ot.pointCCW(op);\n    } else if (o2d === Orientation.CCW) {\n        // Left\n        return ot.pointCW(op);\n    } else {\n        throw new PointError(\"poly2tri [Unsupported] nextFlipPoint: opposing point on constrained edge!\", [eq, op, ep]);\n    }\n}\n\n/**\n * Scan part of the FlipScan algorithm<br>\n * When a triangle pair isn't flippable we will scan for the next\n * point that is inside the flip triangle scan area. When found\n * we generate a new flipEdgeEvent\n *\n * @param {!SweepContext} tcx - SweepContext object\n * @param ep - last point on the edge we are traversing\n * @param eq - first point on the edge we are traversing\n * @param {!Triangle} flip_triangle - the current triangle sharing the point eq with edge\n * @param t\n * @param p\n */\nfunction flipScanEdgeEvent(tcx, ep, eq, flip_triangle, t, p) {\n    var ot = t.neighborAcross(p);\n    assert(ot, \"FLIP failed due to missing triangle\");\n\n    var op = ot.oppositePoint(t, p);\n\n    if (inScanArea(eq, flip_triangle.pointCCW(eq), flip_triangle.pointCW(eq), op)) {\n        // flip with new edge op.eq\n        flipEdgeEvent(tcx, eq, op, ot, op);\n    } else {\n        var newP = nextFlipPoint(ep, eq, ot, op);\n        flipScanEdgeEvent(tcx, ep, eq, flip_triangle, ot, newP);\n    }\n}\n\n\n// ----------------------------------------------------------------------Exports\n\nexports.triangulate = triangulate;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/poly2tri/src/sweep.js\n// module id = 22\n// module chunks = 0","/*\n * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n * http://code.google.com/p/poly2tri/\n * \n * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n * https://github.com/r3mi/poly2tri.js\n * \n * All rights reserved.\n * \n * Distributed under the 3-clause BSD License, see LICENSE.txt\n */\n\n/* jshint maxcomplexity:6 */\n\n\"use strict\";\n\n\n/*\n * Note\n * ====\n * the structure of this JavaScript version of poly2tri intentionally follows\n * as closely as possible the structure of the reference C++ version, to make it \n * easier to keep the 2 versions in sync.\n */\n\nvar PointError = require('./pointerror');\nvar Point = require('./point');\nvar Triangle = require('./triangle');\nvar sweep = require('./sweep');\nvar AdvancingFront = require('./advancingfront');\nvar Node = AdvancingFront.Node;\n\n\n// ------------------------------------------------------------------------utils\n\n/**\n * Initial triangle factor, seed triangle will extend 30% of\n * PointSet width to both left and right.\n * @private\n * @const\n */\nvar kAlpha = 0.3;\n\n\n// -------------------------------------------------------------------------Edge\n/**\n * Represents a simple polygon's edge\n * @constructor\n * @struct\n * @private\n * @param {Point} p1\n * @param {Point} p2\n * @throw {PointError} if p1 is same as p2\n */\nvar Edge = function(p1, p2) {\n    this.p = p1;\n    this.q = p2;\n\n    if (p1.y > p2.y) {\n        this.q = p1;\n        this.p = p2;\n    } else if (p1.y === p2.y) {\n        if (p1.x > p2.x) {\n            this.q = p1;\n            this.p = p2;\n        } else if (p1.x === p2.x) {\n            throw new PointError('poly2tri Invalid Edge constructor: repeated points!', [p1]);\n        }\n    }\n\n    if (!this.q._p2t_edge_list) {\n        this.q._p2t_edge_list = [];\n    }\n    this.q._p2t_edge_list.push(this);\n};\n\n\n// ------------------------------------------------------------------------Basin\n/**\n * @constructor\n * @struct\n * @private\n */\nvar Basin = function() {\n    /** @type {Node} */\n    this.left_node = null;\n    /** @type {Node} */\n    this.bottom_node = null;\n    /** @type {Node} */\n    this.right_node = null;\n    /** @type {number} */\n    this.width = 0.0;\n    /** @type {boolean} */\n    this.left_highest = false;\n};\n\nBasin.prototype.clear = function() {\n    this.left_node = null;\n    this.bottom_node = null;\n    this.right_node = null;\n    this.width = 0.0;\n    this.left_highest = false;\n};\n\n// --------------------------------------------------------------------EdgeEvent\n/**\n * @constructor\n * @struct\n * @private\n */\nvar EdgeEvent = function() {\n    /** @type {Edge} */\n    this.constrained_edge = null;\n    /** @type {boolean} */\n    this.right = false;\n};\n\n// ----------------------------------------------------SweepContext (public API)\n/**\n * SweepContext constructor option\n * @typedef {Object} SweepContextOptions\n * @property {boolean=} cloneArrays - if <code>true</code>, do a shallow copy of the Array parameters\n *                  (contour, holes). Points inside arrays are never copied.\n *                  Default is <code>false</code> : keep a reference to the array arguments,\n *                  who will be modified in place.\n */\n/**\n * Constructor for the triangulation context.\n * It accepts a simple polyline (with non repeating points), \n * which defines the constrained edges.\n *\n * @example\n *          var contour = [\n *              new poly2tri.Point(100, 100),\n *              new poly2tri.Point(100, 300),\n *              new poly2tri.Point(300, 300),\n *              new poly2tri.Point(300, 100)\n *          ];\n *          var swctx = new poly2tri.SweepContext(contour, {cloneArrays: true});\n * @example\n *          var contour = [{x:100, y:100}, {x:100, y:300}, {x:300, y:300}, {x:300, y:100}];\n *          var swctx = new poly2tri.SweepContext(contour, {cloneArrays: true});\n * @constructor\n * @public\n * @struct\n * @param {Array.<XY>} contour - array of point objects. The points can be either {@linkcode Point} instances,\n *          or any \"Point like\" custom class with <code>{x, y}</code> attributes.\n * @param {SweepContextOptions=} options - constructor options\n */\nvar SweepContext = function(contour, options) {\n    options = options || {};\n    this.triangles_ = [];\n    this.map_ = [];\n    this.points_ = (options.cloneArrays ? contour.slice(0) : contour);\n    this.edge_list = [];\n\n    // Bounding box of all points. Computed at the start of the triangulation, \n    // it is stored in case it is needed by the caller.\n    this.pmin_ = this.pmax_ = null;\n\n    /**\n     * Advancing front\n     * @private\n     * @type {AdvancingFront}\n     */\n    this.front_ = null;\n\n    /**\n     * head point used with advancing front\n     * @private\n     * @type {Point}\n     */\n    this.head_ = null;\n\n    /**\n     * tail point used with advancing front\n     * @private\n     * @type {Point}\n     */\n    this.tail_ = null;\n\n    /**\n     * @private\n     * @type {Node}\n     */\n    this.af_head_ = null;\n    /**\n     * @private\n     * @type {Node}\n     */\n    this.af_middle_ = null;\n    /**\n     * @private\n     * @type {Node}\n     */\n    this.af_tail_ = null;\n\n    this.basin = new Basin();\n    this.edge_event = new EdgeEvent();\n\n    this.initEdges(this.points_);\n};\n\n\n/**\n * Add a hole to the constraints\n * @example\n *      var swctx = new poly2tri.SweepContext(contour);\n *      var hole = [\n *          new poly2tri.Point(200, 200),\n *          new poly2tri.Point(200, 250),\n *          new poly2tri.Point(250, 250)\n *      ];\n *      swctx.addHole(hole);\n * @example\n *      var swctx = new poly2tri.SweepContext(contour);\n *      swctx.addHole([{x:200, y:200}, {x:200, y:250}, {x:250, y:250}]);\n * @public\n * @param {Array.<XY>} polyline - array of \"Point like\" objects with {x,y}\n */\nSweepContext.prototype.addHole = function(polyline) {\n    this.initEdges(polyline);\n    var i, len = polyline.length;\n    for (i = 0; i < len; i++) {\n        this.points_.push(polyline[i]);\n    }\n    return this; // for chaining\n};\n\n/**\n * For backward compatibility\n * @function\n * @deprecated use {@linkcode SweepContext#addHole} instead\n */\nSweepContext.prototype.AddHole = SweepContext.prototype.addHole;\n\n\n/**\n * Add several holes to the constraints\n * @example\n *      var swctx = new poly2tri.SweepContext(contour);\n *      var holes = [\n *          [ new poly2tri.Point(200, 200), new poly2tri.Point(200, 250), new poly2tri.Point(250, 250) ],\n *          [ new poly2tri.Point(300, 300), new poly2tri.Point(300, 350), new poly2tri.Point(350, 350) ]\n *      ];\n *      swctx.addHoles(holes);\n * @example\n *      var swctx = new poly2tri.SweepContext(contour);\n *      var holes = [\n *          [{x:200, y:200}, {x:200, y:250}, {x:250, y:250}],\n *          [{x:300, y:300}, {x:300, y:350}, {x:350, y:350}]\n *      ];\n *      swctx.addHoles(holes);\n * @public\n * @param {Array.<Array.<XY>>} holes - array of array of \"Point like\" objects with {x,y}\n */\n// Method added in the JavaScript version (was not present in the c++ version)\nSweepContext.prototype.addHoles = function(holes) {\n    var i, len = holes.length;\n    for (i = 0; i < len; i++) {\n        this.initEdges(holes[i]);\n    }\n    this.points_ = this.points_.concat.apply(this.points_, holes);\n    return this; // for chaining\n};\n\n\n/**\n * Add a Steiner point to the constraints\n * @example\n *      var swctx = new poly2tri.SweepContext(contour);\n *      var point = new poly2tri.Point(150, 150);\n *      swctx.addPoint(point);\n * @example\n *      var swctx = new poly2tri.SweepContext(contour);\n *      swctx.addPoint({x:150, y:150});\n * @public\n * @param {XY} point - any \"Point like\" object with {x,y}\n */\nSweepContext.prototype.addPoint = function(point) {\n    this.points_.push(point);\n    return this; // for chaining\n};\n\n/**\n * For backward compatibility\n * @function\n * @deprecated use {@linkcode SweepContext#addPoint} instead\n */\nSweepContext.prototype.AddPoint = SweepContext.prototype.addPoint;\n\n\n/**\n * Add several Steiner points to the constraints\n * @example\n *      var swctx = new poly2tri.SweepContext(contour);\n *      var points = [\n *          new poly2tri.Point(150, 150),\n *          new poly2tri.Point(200, 250),\n *          new poly2tri.Point(250, 250)\n *      ];\n *      swctx.addPoints(points);\n * @example\n *      var swctx = new poly2tri.SweepContext(contour);\n *      swctx.addPoints([{x:150, y:150}, {x:200, y:250}, {x:250, y:250}]);\n * @public\n * @param {Array.<XY>} points - array of \"Point like\" object with {x,y}\n */\n// Method added in the JavaScript version (was not present in the c++ version)\nSweepContext.prototype.addPoints = function(points) {\n    this.points_ = this.points_.concat(points);\n    return this; // for chaining\n};\n\n\n/**\n * Triangulate the polygon with holes and Steiner points.\n * Do this AFTER you've added the polyline, holes, and Steiner points\n * @example\n *      var swctx = new poly2tri.SweepContext(contour);\n *      swctx.triangulate();\n *      var triangles = swctx.getTriangles();\n * @public\n */\n// Shortcut method for sweep.triangulate(SweepContext).\n// Method added in the JavaScript version (was not present in the c++ version)\nSweepContext.prototype.triangulate = function() {\n    sweep.triangulate(this);\n    return this; // for chaining\n};\n\n\n/**\n * Get the bounding box of the provided constraints (contour, holes and \n * Steinter points). Warning : these values are not available if the triangulation \n * has not been done yet.\n * @public\n * @returns {{min:Point,max:Point}} object with 'min' and 'max' Point\n */\n// Method added in the JavaScript version (was not present in the c++ version)\nSweepContext.prototype.getBoundingBox = function() {\n    return {min: this.pmin_, max: this.pmax_};\n};\n\n/**\n * Get result of triangulation.\n * The output triangles have vertices which are references\n * to the initial input points (not copies): any custom fields in the\n * initial points can be retrieved in the output triangles.\n * @example\n *      var swctx = new poly2tri.SweepContext(contour);\n *      swctx.triangulate();\n *      var triangles = swctx.getTriangles();\n * @example\n *      var contour = [{x:100, y:100, id:1}, {x:100, y:300, id:2}, {x:300, y:300, id:3}];\n *      var swctx = new poly2tri.SweepContext(contour);\n *      swctx.triangulate();\n *      var triangles = swctx.getTriangles();\n *      typeof triangles[0].getPoint(0).id\n *      // → \"number\"\n * @public\n * @returns {array<Triangle>}   array of triangles\n */\nSweepContext.prototype.getTriangles = function() {\n    return this.triangles_;\n};\n\n/**\n * For backward compatibility\n * @function\n * @deprecated use {@linkcode SweepContext#getTriangles} instead\n */\nSweepContext.prototype.GetTriangles = SweepContext.prototype.getTriangles;\n\n\n// ---------------------------------------------------SweepContext (private API)\n\n/** @private */\nSweepContext.prototype.front = function() {\n    return this.front_;\n};\n\n/** @private */\nSweepContext.prototype.pointCount = function() {\n    return this.points_.length;\n};\n\n/** @private */\nSweepContext.prototype.head = function() {\n    return this.head_;\n};\n\n/** @private */\nSweepContext.prototype.setHead = function(p1) {\n    this.head_ = p1;\n};\n\n/** @private */\nSweepContext.prototype.tail = function() {\n    return this.tail_;\n};\n\n/** @private */\nSweepContext.prototype.setTail = function(p1) {\n    this.tail_ = p1;\n};\n\n/** @private */\nSweepContext.prototype.getMap = function() {\n    return this.map_;\n};\n\n/** @private */\nSweepContext.prototype.initTriangulation = function() {\n    var xmax = this.points_[0].x;\n    var xmin = this.points_[0].x;\n    var ymax = this.points_[0].y;\n    var ymin = this.points_[0].y;\n\n    // Calculate bounds\n    var i, len = this.points_.length;\n    for (i = 1; i < len; i++) {\n        var p = this.points_[i];\n        /* jshint expr:true */\n        (p.x > xmax) && (xmax = p.x);\n        (p.x < xmin) && (xmin = p.x);\n        (p.y > ymax) && (ymax = p.y);\n        (p.y < ymin) && (ymin = p.y);\n    }\n    this.pmin_ = new Point(xmin, ymin);\n    this.pmax_ = new Point(xmax, ymax);\n\n    var dx = kAlpha * (xmax - xmin);\n    var dy = kAlpha * (ymax - ymin);\n    this.head_ = new Point(xmax + dx, ymin - dy);\n    this.tail_ = new Point(xmin - dx, ymin - dy);\n\n    // Sort points along y-axis\n    this.points_.sort(Point.compare);\n};\n\n/** @private */\nSweepContext.prototype.initEdges = function(polyline) {\n    var i, len = polyline.length;\n    for (i = 0; i < len; ++i) {\n        this.edge_list.push(new Edge(polyline[i], polyline[(i + 1) % len]));\n    }\n};\n\n/** @private */\nSweepContext.prototype.getPoint = function(index) {\n    return this.points_[index];\n};\n\n/** @private */\nSweepContext.prototype.addToMap = function(triangle) {\n    this.map_.push(triangle);\n};\n\n/** @private */\nSweepContext.prototype.locateNode = function(point) {\n    return this.front_.locateNode(point.x);\n};\n\n/** @private */\nSweepContext.prototype.createAdvancingFront = function() {\n    var head;\n    var middle;\n    var tail;\n    // Initial triangle\n    var triangle = new Triangle(this.points_[0], this.tail_, this.head_);\n\n    this.map_.push(triangle);\n\n    head = new Node(triangle.getPoint(1), triangle);\n    middle = new Node(triangle.getPoint(0), triangle);\n    tail = new Node(triangle.getPoint(2));\n\n    this.front_ = new AdvancingFront(head, tail);\n\n    head.next = middle;\n    middle.next = tail;\n    middle.prev = head;\n    tail.prev = middle;\n};\n\n/** @private */\nSweepContext.prototype.removeNode = function(node) {\n    // do nothing\n    /* jshint unused:false */\n};\n\n/** @private */\nSweepContext.prototype.mapTriangleToNodes = function(t) {\n    for (var i = 0; i < 3; ++i) {\n        if (!t.getNeighbor(i)) {\n            var n = this.front_.locatePoint(t.pointCW(t.getPoint(i)));\n            if (n) {\n                n.triangle = t;\n            }\n        }\n    }\n};\n\n/** @private */\nSweepContext.prototype.removeFromMap = function(triangle) {\n    var i, map = this.map_, len = map.length;\n    for (i = 0; i < len; i++) {\n        if (map[i] === triangle) {\n            map.splice(i, 1);\n            break;\n        }\n    }\n};\n\n/**\n * Do a depth first traversal to collect triangles\n * @private\n * @param {Triangle} triangle start\n */\nSweepContext.prototype.meshClean = function(triangle) {\n    // New implementation avoids recursive calls and use a loop instead.\n    // Cf. issues # 57, 65 and 69.\n    var triangles = [triangle], t, i;\n    /* jshint boss:true */\n    while (t = triangles.pop()) {\n        if (!t.isInterior()) {\n            t.setInterior(true);\n            this.triangles_.push(t);\n            for (i = 0; i < 3; i++) {\n                if (!t.constrained_edge[i]) {\n                    triangles.push(t.getNeighbor(i));\n                }\n            }\n        }\n    }\n};\n\n// ----------------------------------------------------------------------Exports\n\nmodule.exports = SweepContext;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/poly2tri/src/sweepcontext.js\n// module id = 23\n// module chunks = 0","/*\n * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\n * http://code.google.com/p/poly2tri/\n * \n * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\n * https://github.com/r3mi/poly2tri.js\n * \n * All rights reserved.\n * \n * Distributed under the 3-clause BSD License, see LICENSE.txt\n */\n\n\"use strict\";\n\n/**\n * Precision to detect repeated or collinear points\n * @private\n * @const {number}\n * @default\n */\nvar EPSILON = 1e-12;\nexports.EPSILON = EPSILON;\n\n/**\n * @private\n * @enum {number}\n * @readonly\n */\nvar Orientation = {\n    \"CW\": 1,\n    \"CCW\": -1,\n    \"COLLINEAR\": 0\n};\nexports.Orientation = Orientation;\n\n\n/**\n * Formula to calculate signed area<br>\n * Positive if CCW<br>\n * Negative if CW<br>\n * 0 if collinear<br>\n * <pre>\n * A[P1,P2,P3]  =  (x1*y2 - y1*x2) + (x2*y3 - y2*x3) + (x3*y1 - y3*x1)\n *              =  (x1-x3)*(y2-y3) - (y1-y3)*(x2-x3)\n * </pre>\n *\n * @private\n * @param {!XY} pa  point object with {x,y}\n * @param {!XY} pb  point object with {x,y}\n * @param {!XY} pc  point object with {x,y}\n * @return {Orientation}\n */\nfunction orient2d(pa, pb, pc) {\n    var detleft = (pa.x - pc.x) * (pb.y - pc.y);\n    var detright = (pa.y - pc.y) * (pb.x - pc.x);\n    var val = detleft - detright;\n    if (val > -(EPSILON) && val < (EPSILON)) {\n        return Orientation.COLLINEAR;\n    } else if (val > 0) {\n        return Orientation.CCW;\n    } else {\n        return Orientation.CW;\n    }\n}\nexports.orient2d = orient2d;\n\n\n/**\n *\n * @private\n * @param {!XY} pa  point object with {x,y}\n * @param {!XY} pb  point object with {x,y}\n * @param {!XY} pc  point object with {x,y}\n * @param {!XY} pd  point object with {x,y}\n * @return {boolean}\n */\nfunction inScanArea(pa, pb, pc, pd) {\n    var oadb = (pa.x - pb.x) * (pd.y - pb.y) - (pd.x - pb.x) * (pa.y - pb.y);\n    if (oadb >= -EPSILON) {\n        return false;\n    }\n\n    var oadc = (pa.x - pc.x) * (pd.y - pc.y) - (pd.x - pc.x) * (pa.y - pc.y);\n    if (oadc <= EPSILON) {\n        return false;\n    }\n    return true;\n}\nexports.inScanArea = inScanArea;\n\n\n/**\n * Check if the angle between (pa,pb) and (pa,pc) is obtuse i.e. (angle > π/2 || angle < -π/2)\n *\n * @private\n * @param {!XY} pa  point object with {x,y}\n * @param {!XY} pb  point object with {x,y}\n * @param {!XY} pc  point object with {x,y}\n * @return {boolean} true if angle is obtuse\n */\nfunction isAngleObtuse(pa, pb, pc) {\n    var ax = pb.x - pa.x;\n    var ay = pb.y - pa.y;\n    var bx = pc.x - pa.x;\n    var by = pc.y - pa.y;\n    return (ax * bx + ay * by) < 0;\n}\nexports.isAngleObtuse = isAngleObtuse;\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/poly2tri/src/utils.js\n// module id = 24\n// module chunks = 0","module.exports = \"var Module;if(!Module)Module=(typeof Module!==\\\"undefined\\\"?Module:null)||{};var moduleOverrides={};for(var key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}var ENVIRONMENT_IS_WEB=typeof window===\\\"object\\\";var ENVIRONMENT_IS_WORKER=typeof importScripts===\\\"function\\\";var ENVIRONMENT_IS_NODE=typeof process===\\\"object\\\"&&typeof require===\\\"function\\\"&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;var ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;if(ENVIRONMENT_IS_NODE){if(!Module[\\\"print\\\"])Module[\\\"print\\\"]=function print(x){process[\\\"stdout\\\"].write(x+\\\"\\\\n\\\")};if(!Module[\\\"printErr\\\"])Module[\\\"printErr\\\"]=function printErr(x){process[\\\"stderr\\\"].write(x+\\\"\\\\n\\\")};var nodeFS=require(\\\"fs\\\");var nodePath=require(\\\"path\\\");Module[\\\"read\\\"]=function read(filename,binary){filename=nodePath[\\\"normalize\\\"](filename);var ret=nodeFS[\\\"readFileSync\\\"](filename);if(!ret&&filename!=nodePath[\\\"resolve\\\"](filename)){filename=path.join(__dirname,\\\"..\\\",\\\"src\\\",filename);ret=nodeFS[\\\"readFileSync\\\"](filename)}if(ret&&!binary)ret=ret.toString();return ret};Module[\\\"readBinary\\\"]=function readBinary(filename){var ret=Module[\\\"read\\\"](filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};Module[\\\"load\\\"]=function load(f){globalEval(read(f))};if(!Module[\\\"thisProgram\\\"]){if(process[\\\"argv\\\"].length>1){Module[\\\"thisProgram\\\"]=process[\\\"argv\\\"][1].replace(/\\\\\\\\/g,\\\"/\\\")}else{Module[\\\"thisProgram\\\"]=\\\"unknown-program\\\"}}Module[\\\"arguments\\\"]=process[\\\"argv\\\"].slice(2);if(typeof module!==\\\"undefined\\\"){module[\\\"exports\\\"]=Module}process[\\\"on\\\"](\\\"uncaughtException\\\",(function(ex){if(!(ex instanceof ExitStatus)){throw ex}}));Module[\\\"inspect\\\"]=(function(){return\\\"[Emscripten Module object]\\\"})}else if(ENVIRONMENT_IS_SHELL){if(!Module[\\\"print\\\"])Module[\\\"print\\\"]=print;if(typeof printErr!=\\\"undefined\\\")Module[\\\"printErr\\\"]=printErr;if(typeof read!=\\\"undefined\\\"){Module[\\\"read\\\"]=read}else{Module[\\\"read\\\"]=function read(){throw\\\"no read() available (jsc?)\\\"}}Module[\\\"readBinary\\\"]=function readBinary(f){if(typeof readbuffer===\\\"function\\\"){return new Uint8Array(readbuffer(f))}var data=read(f,\\\"binary\\\");assert(typeof data===\\\"object\\\");return data};if(typeof scriptArgs!=\\\"undefined\\\"){Module[\\\"arguments\\\"]=scriptArgs}else if(typeof arguments!=\\\"undefined\\\"){Module[\\\"arguments\\\"]=arguments}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){Module[\\\"read\\\"]=function read(url){var xhr=new XMLHttpRequest;xhr.open(\\\"GET\\\",url,false);xhr.send(null);return xhr.responseText};if(typeof arguments!=\\\"undefined\\\"){Module[\\\"arguments\\\"]=arguments}if(typeof console!==\\\"undefined\\\"){if(!Module[\\\"print\\\"])Module[\\\"print\\\"]=function print(x){console.log(x)};if(!Module[\\\"printErr\\\"])Module[\\\"printErr\\\"]=function printErr(x){console.log(x)}}else{var TRY_USE_DUMP=false;if(!Module[\\\"print\\\"])Module[\\\"print\\\"]=TRY_USE_DUMP&&typeof dump!==\\\"undefined\\\"?(function(x){dump(x)}):(function(x){})}if(ENVIRONMENT_IS_WORKER){Module[\\\"load\\\"]=importScripts}if(typeof Module[\\\"setWindowTitle\\\"]===\\\"undefined\\\"){Module[\\\"setWindowTitle\\\"]=(function(title){document.title=title})}}else{throw\\\"Unknown runtime environment. Where are we?\\\"}function globalEval(x){eval.call(null,x)}if(!Module[\\\"load\\\"]&&Module[\\\"read\\\"]){Module[\\\"load\\\"]=function load(f){globalEval(Module[\\\"read\\\"](f))}}if(!Module[\\\"print\\\"]){Module[\\\"print\\\"]=(function(){})}if(!Module[\\\"printErr\\\"]){Module[\\\"printErr\\\"]=Module[\\\"print\\\"]}if(!Module[\\\"arguments\\\"]){Module[\\\"arguments\\\"]=[]}if(!Module[\\\"thisProgram\\\"]){Module[\\\"thisProgram\\\"]=\\\"./this.program\\\"}Module.print=Module[\\\"print\\\"];Module.printErr=Module[\\\"printErr\\\"];Module[\\\"preRun\\\"]=[];Module[\\\"postRun\\\"]=[];for(var key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}var Runtime={setTempRet0:(function(value){tempRet0=value}),getTempRet0:(function(){return tempRet0}),stackSave:(function(){return STACKTOP}),stackRestore:(function(stackTop){STACKTOP=stackTop}),getNativeTypeSize:(function(type){switch(type){case\\\"i1\\\":case\\\"i8\\\":return 1;case\\\"i16\\\":return 2;case\\\"i32\\\":return 4;case\\\"i64\\\":return 8;case\\\"float\\\":return 4;case\\\"double\\\":return 8;default:{if(type[type.length-1]===\\\"*\\\"){return Runtime.QUANTUM_SIZE}else if(type[0]===\\\"i\\\"){var bits=parseInt(type.substr(1));assert(bits%8===0);return bits/8}else{return 0}}}}),getNativeFieldSize:(function(type){return Math.max(Runtime.getNativeTypeSize(type),Runtime.QUANTUM_SIZE)}),STACK_ALIGN:16,prepVararg:(function(ptr,type){if(type===\\\"double\\\"||type===\\\"i64\\\"){if(ptr&7){assert((ptr&7)===4);ptr+=4}}else{assert((ptr&3)===0)}return ptr}),getAlignSize:(function(type,size,vararg){if(!vararg&&(type==\\\"i64\\\"||type==\\\"double\\\"))return 8;if(!type)return Math.min(size,8);return Math.min(size||(type?Runtime.getNativeFieldSize(type):0),Runtime.QUANTUM_SIZE)}),dynCall:(function(sig,ptr,args){if(args&&args.length){if(!args.splice)args=Array.prototype.slice.call(args);args.splice(0,0,ptr);return Module[\\\"dynCall_\\\"+sig].apply(null,args)}else{return Module[\\\"dynCall_\\\"+sig].call(null,ptr)}}),functionPointers:[],addFunction:(function(func){for(var i=0;i<Runtime.functionPointers.length;i++){if(!Runtime.functionPointers[i]){Runtime.functionPointers[i]=func;return 2*(1+i)}}throw\\\"Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.\\\"}),removeFunction:(function(index){Runtime.functionPointers[(index-2)/2]=null}),warnOnce:(function(text){if(!Runtime.warnOnce.shown)Runtime.warnOnce.shown={};if(!Runtime.warnOnce.shown[text]){Runtime.warnOnce.shown[text]=1;Module.printErr(text)}}),funcWrappers:{},getFuncWrapper:(function(func,sig){assert(sig);if(!Runtime.funcWrappers[sig]){Runtime.funcWrappers[sig]={}}var sigCache=Runtime.funcWrappers[sig];if(!sigCache[func]){sigCache[func]=function dynCall_wrapper(){return Runtime.dynCall(sig,func,arguments)}}return sigCache[func]}),getCompilerSetting:(function(name){throw\\\"You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work\\\"}),stackAlloc:(function(size){var ret=STACKTOP;STACKTOP=STACKTOP+size|0;STACKTOP=STACKTOP+15&-16;return ret}),staticAlloc:(function(size){var ret=STATICTOP;STATICTOP=STATICTOP+size|0;STATICTOP=STATICTOP+15&-16;return ret}),dynamicAlloc:(function(size){var ret=DYNAMICTOP;DYNAMICTOP=DYNAMICTOP+size|0;DYNAMICTOP=DYNAMICTOP+15&-16;if(DYNAMICTOP>=TOTAL_MEMORY){var success=enlargeMemory();if(!success){DYNAMICTOP=ret;return 0}}return ret}),alignMemory:(function(size,quantum){var ret=size=Math.ceil(size/(quantum?quantum:16))*(quantum?quantum:16);return ret}),makeBigInt:(function(low,high,unsigned){var ret=unsigned?+(low>>>0)+ +(high>>>0)*+4294967296:+(low>>>0)+ +(high|0)*+4294967296;return ret}),GLOBAL_BASE:8,QUANTUM_SIZE:4,__dummy__:0};Module[\\\"Runtime\\\"]=Runtime;var __THREW__=0;var ABORT=false;var EXITSTATUS=0;var undef=0;var tempValue,tempInt,tempBigInt,tempInt2,tempBigInt2,tempPair,tempBigIntI,tempBigIntR,tempBigIntS,tempBigIntP,tempBigIntD,tempDouble,tempFloat;var tempI64,tempI64b;var tempRet0,tempRet1,tempRet2,tempRet3,tempRet4,tempRet5,tempRet6,tempRet7,tempRet8,tempRet9;function assert(condition,text){if(!condition){abort(\\\"Assertion failed: \\\"+text)}}var globalScope=this;function getCFunc(ident){var func=Module[\\\"_\\\"+ident];if(!func){try{func=eval(\\\"_\\\"+ident)}catch(e){}}assert(func,\\\"Cannot call unknown function \\\"+ident+\\\" (perhaps LLVM optimizations or closure removed it?)\\\");return func}var cwrap,ccall;((function(){var JSfuncs={\\\"stackSave\\\":(function(){Runtime.stackSave()}),\\\"stackRestore\\\":(function(){Runtime.stackRestore()}),\\\"arrayToC\\\":(function(arr){var ret=Runtime.stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}),\\\"stringToC\\\":(function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){ret=Runtime.stackAlloc((str.length<<2)+1);writeStringToMemory(str,ret)}return ret})};var toC={\\\"string\\\":JSfuncs[\\\"stringToC\\\"],\\\"array\\\":JSfuncs[\\\"arrayToC\\\"]};ccall=function ccallFunc(ident,returnType,argTypes,args,opts){var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=Runtime.stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);if(returnType===\\\"string\\\")ret=Pointer_stringify(ret);if(stack!==0){if(opts&&opts.async){EmterpreterAsync.asyncFinalizers.push((function(){Runtime.stackRestore(stack)}));return}Runtime.stackRestore(stack)}return ret};var sourceRegex=/^function\\\\s*\\\\(([^)]*)\\\\)\\\\s*{\\\\s*([^*]*?)[\\\\s;]*(?:return\\\\s*(.*?)[;\\\\s]*)?}$/;function parseJSFunc(jsfunc){var parsed=jsfunc.toString().match(sourceRegex).slice(1);return{arguments:parsed[0],body:parsed[1],returnValue:parsed[2]}}var JSsource={};for(var fun in JSfuncs){if(JSfuncs.hasOwnProperty(fun)){JSsource[fun]=parseJSFunc(JSfuncs[fun])}}cwrap=function cwrap(ident,returnType,argTypes){argTypes=argTypes||[];var cfunc=getCFunc(ident);var numericArgs=argTypes.every((function(type){return type===\\\"number\\\"}));var numericRet=returnType!==\\\"string\\\";if(numericRet&&numericArgs){return cfunc}var argNames=argTypes.map((function(x,i){return\\\"$\\\"+i}));var funcstr=\\\"(function(\\\"+argNames.join(\\\",\\\")+\\\") {\\\";var nargs=argTypes.length;if(!numericArgs){funcstr+=\\\"var stack = \\\"+JSsource[\\\"stackSave\\\"].body+\\\";\\\";for(var i=0;i<nargs;i++){var arg=argNames[i],type=argTypes[i];if(type===\\\"number\\\")continue;var convertCode=JSsource[type+\\\"ToC\\\"];funcstr+=\\\"var \\\"+convertCode.arguments+\\\" = \\\"+arg+\\\";\\\";funcstr+=convertCode.body+\\\";\\\";funcstr+=arg+\\\"=\\\"+convertCode.returnValue+\\\";\\\"}}var cfuncname=parseJSFunc((function(){return cfunc})).returnValue;funcstr+=\\\"var ret = \\\"+cfuncname+\\\"(\\\"+argNames.join(\\\",\\\")+\\\");\\\";if(!numericRet){var strgfy=parseJSFunc((function(){return Pointer_stringify})).returnValue;funcstr+=\\\"ret = \\\"+strgfy+\\\"(ret);\\\"}if(!numericArgs){funcstr+=JSsource[\\\"stackRestore\\\"].body.replace(\\\"()\\\",\\\"(stack)\\\")+\\\";\\\"}funcstr+=\\\"return ret})\\\";return eval(funcstr)}}))();Module[\\\"ccall\\\"]=ccall;Module[\\\"cwrap\\\"]=cwrap;function setValue(ptr,value,type,noSafe){type=type||\\\"i8\\\";if(type.charAt(type.length-1)===\\\"*\\\")type=\\\"i32\\\";switch(type){case\\\"i1\\\":HEAP8[ptr>>0]=value;break;case\\\"i8\\\":HEAP8[ptr>>0]=value;break;case\\\"i16\\\":HEAP16[ptr>>1]=value;break;case\\\"i32\\\":HEAP32[ptr>>2]=value;break;case\\\"i64\\\":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=+1?tempDouble>+0?(Math_min(+Math_floor(tempDouble/+4294967296),+4294967295)|0)>>>0:~~+Math_ceil((tempDouble- +(~~tempDouble>>>0))/+4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case\\\"float\\\":HEAPF32[ptr>>2]=value;break;case\\\"double\\\":HEAPF64[ptr>>3]=value;break;default:abort(\\\"invalid type for setValue: \\\"+type)}}Module[\\\"setValue\\\"]=setValue;function getValue(ptr,type,noSafe){type=type||\\\"i8\\\";if(type.charAt(type.length-1)===\\\"*\\\")type=\\\"i32\\\";switch(type){case\\\"i1\\\":return HEAP8[ptr>>0];case\\\"i8\\\":return HEAP8[ptr>>0];case\\\"i16\\\":return HEAP16[ptr>>1];case\\\"i32\\\":return HEAP32[ptr>>2];case\\\"i64\\\":return HEAP32[ptr>>2];case\\\"float\\\":return HEAPF32[ptr>>2];case\\\"double\\\":return HEAPF64[ptr>>3];default:abort(\\\"invalid type for setValue: \\\"+type)}return null}Module[\\\"getValue\\\"]=getValue;var ALLOC_NORMAL=0;var ALLOC_STACK=1;var ALLOC_STATIC=2;var ALLOC_DYNAMIC=3;var ALLOC_NONE=4;Module[\\\"ALLOC_NORMAL\\\"]=ALLOC_NORMAL;Module[\\\"ALLOC_STACK\\\"]=ALLOC_STACK;Module[\\\"ALLOC_STATIC\\\"]=ALLOC_STATIC;Module[\\\"ALLOC_DYNAMIC\\\"]=ALLOC_DYNAMIC;Module[\\\"ALLOC_NONE\\\"]=ALLOC_NONE;function allocate(slab,types,allocator,ptr){var zeroinit,size;if(typeof slab===\\\"number\\\"){zeroinit=true;size=slab}else{zeroinit=false;size=slab.length}var singleType=typeof types===\\\"string\\\"?types:null;var ret;if(allocator==ALLOC_NONE){ret=ptr}else{ret=[_malloc,Runtime.stackAlloc,Runtime.staticAlloc,Runtime.dynamicAlloc][allocator===undefined?ALLOC_STATIC:allocator](Math.max(size,singleType?1:types.length))}if(zeroinit){var ptr=ret,stop;assert((ret&3)==0);stop=ret+(size&~3);for(;ptr<stop;ptr+=4){HEAP32[ptr>>2]=0}stop=ret+size;while(ptr<stop){HEAP8[ptr++>>0]=0}return ret}if(singleType===\\\"i8\\\"){if(slab.subarray||slab.slice){HEAPU8.set(slab,ret)}else{HEAPU8.set(new Uint8Array(slab),ret)}return ret}var i=0,type,typeSize,previousType;while(i<size){var curr=slab[i];if(typeof curr===\\\"function\\\"){curr=Runtime.getFunctionIndex(curr)}type=singleType||types[i];if(type===0){i++;continue}if(type==\\\"i64\\\")type=\\\"i32\\\";setValue(ret+i,curr,type);if(previousType!==type){typeSize=Runtime.getNativeTypeSize(type);previousType=type}i+=typeSize}return ret}Module[\\\"allocate\\\"]=allocate;function getMemory(size){if(!staticSealed)return Runtime.staticAlloc(size);if(typeof _sbrk!==\\\"undefined\\\"&&!_sbrk.called||!runtimeInitialized)return Runtime.dynamicAlloc(size);return _malloc(size)}Module[\\\"getMemory\\\"]=getMemory;function Pointer_stringify(ptr,length){if(length===0||!ptr)return\\\"\\\";var hasUtf=0;var t;var i=0;while(1){t=HEAPU8[ptr+i>>0];hasUtf|=t;if(t==0&&!length)break;i++;if(length&&i==length)break}if(!length)length=i;var ret=\\\"\\\";if(hasUtf<128){var MAX_CHUNK=1024;var curr;while(length>0){curr=String.fromCharCode.apply(String,HEAPU8.subarray(ptr,ptr+Math.min(length,MAX_CHUNK)));ret=ret?ret+curr:curr;ptr+=MAX_CHUNK;length-=MAX_CHUNK}return ret}return Module[\\\"UTF8ToString\\\"](ptr)}Module[\\\"Pointer_stringify\\\"]=Pointer_stringify;function AsciiToString(ptr){var str=\\\"\\\";while(1){var ch=HEAP8[ptr++>>0];if(!ch)return str;str+=String.fromCharCode(ch)}}Module[\\\"AsciiToString\\\"]=AsciiToString;function stringToAscii(str,outPtr){return writeAsciiToMemory(str,outPtr,false)}Module[\\\"stringToAscii\\\"]=stringToAscii;function UTF8ArrayToString(u8Array,idx){var u0,u1,u2,u3,u4,u5;var str=\\\"\\\";while(1){u0=u8Array[idx++];if(!u0)return str;if(!(u0&128)){str+=String.fromCharCode(u0);continue}u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u3=u8Array[idx++]&63;if((u0&248)==240){u0=(u0&7)<<18|u1<<12|u2<<6|u3}else{u4=u8Array[idx++]&63;if((u0&252)==248){u0=(u0&3)<<24|u1<<18|u2<<12|u3<<6|u4}else{u5=u8Array[idx++]&63;u0=(u0&1)<<30|u1<<24|u2<<18|u3<<12|u4<<6|u5}}}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}Module[\\\"UTF8ArrayToString\\\"]=UTF8ArrayToString;function UTF8ToString(ptr){return UTF8ArrayToString(HEAPU8,ptr)}Module[\\\"UTF8ToString\\\"]=UTF8ToString;function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=2097151){if(outIdx+3>=endIdx)break;outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else if(u<=67108863){if(outIdx+4>=endIdx)break;outU8Array[outIdx++]=248|u>>24;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else{if(outIdx+5>=endIdx)break;outU8Array[outIdx++]=252|u>>30;outU8Array[outIdx++]=128|u>>24&63;outU8Array[outIdx++]=128|u>>18&63;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}}outU8Array[outIdx]=0;return outIdx-startIdx}Module[\\\"stringToUTF8Array\\\"]=stringToUTF8Array;function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}Module[\\\"stringToUTF8\\\"]=stringToUTF8;function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127){++len}else if(u<=2047){len+=2}else if(u<=65535){len+=3}else if(u<=2097151){len+=4}else if(u<=67108863){len+=5}else{len+=6}}return len}Module[\\\"lengthBytesUTF8\\\"]=lengthBytesUTF8;function UTF16ToString(ptr){var i=0;var str=\\\"\\\";while(1){var codeUnit=HEAP16[ptr+i*2>>1];if(codeUnit==0)return str;++i;str+=String.fromCharCode(codeUnit)}}Module[\\\"UTF16ToString\\\"]=UTF16ToString;function stringToUTF16(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<2)return 0;maxBytesToWrite-=2;var startPtr=outPtr;var numCharsToWrite=maxBytesToWrite<str.length*2?maxBytesToWrite/2:str.length;for(var i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>1]=codeUnit;outPtr+=2}HEAP16[outPtr>>1]=0;return outPtr-startPtr}Module[\\\"stringToUTF16\\\"]=stringToUTF16;function lengthBytesUTF16(str){return str.length*2}Module[\\\"lengthBytesUTF16\\\"]=lengthBytesUTF16;function UTF32ToString(ptr){var i=0;var str=\\\"\\\";while(1){var utf32=HEAP32[ptr+i*4>>2];if(utf32==0)return str;++i;if(utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}else{str+=String.fromCharCode(utf32)}}}Module[\\\"UTF32ToString\\\"]=UTF32ToString;function stringToUTF32(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<4)return 0;var startPtr=outPtr;var endPtr=startPtr+maxBytesToWrite-4;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343){var trailSurrogate=str.charCodeAt(++i);codeUnit=65536+((codeUnit&1023)<<10)|trailSurrogate&1023}HEAP32[outPtr>>2]=codeUnit;outPtr+=4;if(outPtr+4>endPtr)break}HEAP32[outPtr>>2]=0;return outPtr-startPtr}Module[\\\"stringToUTF32\\\"]=stringToUTF32;function lengthBytesUTF32(str){var len=0;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343)++i;len+=4}return len}Module[\\\"lengthBytesUTF32\\\"]=lengthBytesUTF32;function demangle(func){var hasLibcxxabi=!!Module[\\\"___cxa_demangle\\\"];if(hasLibcxxabi){try{var buf=_malloc(func.length);writeStringToMemory(func.substr(1),buf);var status=_malloc(4);var ret=Module[\\\"___cxa_demangle\\\"](buf,0,0,status);if(getValue(status,\\\"i32\\\")===0&&ret){return Pointer_stringify(ret)}}catch(e){}finally{if(buf)_free(buf);if(status)_free(status);if(ret)_free(ret)}}var i=3;var basicTypes={\\\"v\\\":\\\"void\\\",\\\"b\\\":\\\"bool\\\",\\\"c\\\":\\\"char\\\",\\\"s\\\":\\\"short\\\",\\\"i\\\":\\\"int\\\",\\\"l\\\":\\\"long\\\",\\\"f\\\":\\\"float\\\",\\\"d\\\":\\\"double\\\",\\\"w\\\":\\\"wchar_t\\\",\\\"a\\\":\\\"signed char\\\",\\\"h\\\":\\\"unsigned char\\\",\\\"t\\\":\\\"unsigned short\\\",\\\"j\\\":\\\"unsigned int\\\",\\\"m\\\":\\\"unsigned long\\\",\\\"x\\\":\\\"long long\\\",\\\"y\\\":\\\"unsigned long long\\\",\\\"z\\\":\\\"...\\\"};var subs=[];var first=true;function dump(x){if(x)Module.print(x);Module.print(func);var pre=\\\"\\\";for(var a=0;a<i;a++)pre+=\\\" \\\";Module.print(pre+\\\"^\\\")}function parseNested(){i++;if(func[i]===\\\"K\\\")i++;var parts=[];while(func[i]!==\\\"E\\\"){if(func[i]===\\\"S\\\"){i++;var next=func.indexOf(\\\"_\\\",i);var num=func.substring(i,next)||0;parts.push(subs[num]||\\\"?\\\");i=next+1;continue}if(func[i]===\\\"C\\\"){parts.push(parts[parts.length-1]);i+=2;continue}var size=parseInt(func.substr(i));var pre=size.toString().length;if(!size||!pre){i--;break}var curr=func.substr(i+pre,size);parts.push(curr);subs.push(curr);i+=pre+size}i++;return parts}function parse(rawList,limit,allowVoid){limit=limit||Infinity;var ret=\\\"\\\",list=[];function flushList(){return\\\"(\\\"+list.join(\\\", \\\")+\\\")\\\"}var name;if(func[i]===\\\"N\\\"){name=parseNested().join(\\\"::\\\");limit--;if(limit===0)return rawList?[name]:name}else{if(func[i]===\\\"K\\\"||first&&func[i]===\\\"L\\\")i++;var size=parseInt(func.substr(i));if(size){var pre=size.toString().length;name=func.substr(i+pre,size);i+=pre+size}}first=false;if(func[i]===\\\"I\\\"){i++;var iList=parse(true);var iRet=parse(true,1,true);ret+=iRet[0]+\\\" \\\"+name+\\\"<\\\"+iList.join(\\\", \\\")+\\\">\\\"}else{ret=name}paramLoop:while(i<func.length&&limit-->0){var c=func[i++];if(c in basicTypes){list.push(basicTypes[c])}else{switch(c){case\\\"P\\\":list.push(parse(true,1,true)[0]+\\\"*\\\");break;case\\\"R\\\":list.push(parse(true,1,true)[0]+\\\"&\\\");break;case\\\"L\\\":{i++;var end=func.indexOf(\\\"E\\\",i);var size=end-i;list.push(func.substr(i,size));i+=size+2;break};case\\\"A\\\":{var size=parseInt(func.substr(i));i+=size.toString().length;if(func[i]!==\\\"_\\\")throw\\\"?\\\";i++;list.push(parse(true,1,true)[0]+\\\" [\\\"+size+\\\"]\\\");break};case\\\"E\\\":break paramLoop;default:ret+=\\\"?\\\"+c;break paramLoop}}}if(!allowVoid&&list.length===1&&list[0]===\\\"void\\\")list=[];if(rawList){if(ret){list.push(ret+\\\"?\\\")}return list}else{return ret+flushList()}}var parsed=func;try{if(func==\\\"Object._main\\\"||func==\\\"_main\\\"){return\\\"main()\\\"}if(typeof func===\\\"number\\\")func=Pointer_stringify(func);if(func[0]!==\\\"_\\\")return func;if(func[1]!==\\\"_\\\")return func;if(func[2]!==\\\"Z\\\")return func;switch(func[3]){case\\\"n\\\":return\\\"operator new()\\\";case\\\"d\\\":return\\\"operator delete()\\\"}parsed=parse()}catch(e){parsed+=\\\"?\\\"}if(parsed.indexOf(\\\"?\\\")>=0&&!hasLibcxxabi){Runtime.warnOnce(\\\"warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling\\\")}return parsed}function demangleAll(text){return text.replace(/__Z[\\\\w\\\\d_]+/g,(function(x){var y=demangle(x);return x===y?x:x+\\\" [\\\"+y+\\\"]\\\"}))}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error(0)}catch(e){err=e}if(!err.stack){return\\\"(no stack trace available)\\\"}}return err.stack.toString()}function stackTrace(){return demangleAll(jsStackTrace())}Module[\\\"stackTrace\\\"]=stackTrace;var PAGE_SIZE=4096;function alignMemoryPage(x){if(x%4096>0){x+=4096-x%4096}return x}var HEAP;var HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;var STATIC_BASE=0,STATICTOP=0,staticSealed=false;var STACK_BASE=0,STACKTOP=0,STACK_MAX=0;var DYNAMIC_BASE=0,DYNAMICTOP=0;function enlargeMemory(){var OLD_TOTAL_MEMORY=TOTAL_MEMORY;var LIMIT=Math.pow(2,31);if(DYNAMICTOP>=LIMIT)return false;while(TOTAL_MEMORY<=DYNAMICTOP){if(TOTAL_MEMORY<LIMIT/2){TOTAL_MEMORY=alignMemoryPage(2*TOTAL_MEMORY)}else{var last=TOTAL_MEMORY;TOTAL_MEMORY=alignMemoryPage((3*TOTAL_MEMORY+LIMIT)/4);if(TOTAL_MEMORY<=last)return false}}TOTAL_MEMORY=Math.max(TOTAL_MEMORY,16*1024*1024);if(TOTAL_MEMORY>=LIMIT)return false;try{if(ArrayBuffer.transfer){buffer=ArrayBuffer.transfer(buffer,TOTAL_MEMORY)}else{var oldHEAP8=HEAP8;buffer=new ArrayBuffer(TOTAL_MEMORY)}}catch(e){return false}var success=_emscripten_replace_memory(buffer);if(!success)return false;Module[\\\"buffer\\\"]=buffer;Module[\\\"HEAP8\\\"]=HEAP8=new Int8Array(buffer);Module[\\\"HEAP16\\\"]=HEAP16=new Int16Array(buffer);Module[\\\"HEAP32\\\"]=HEAP32=new Int32Array(buffer);Module[\\\"HEAPU8\\\"]=HEAPU8=new Uint8Array(buffer);Module[\\\"HEAPU16\\\"]=HEAPU16=new Uint16Array(buffer);Module[\\\"HEAPU32\\\"]=HEAPU32=new Uint32Array(buffer);Module[\\\"HEAPF32\\\"]=HEAPF32=new Float32Array(buffer);Module[\\\"HEAPF64\\\"]=HEAPF64=new Float64Array(buffer);if(!ArrayBuffer.transfer){HEAP8.set(oldHEAP8)}return true}var byteLength;try{byteLength=Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype,\\\"byteLength\\\").get);byteLength(new ArrayBuffer(4))}catch(e){byteLength=(function(buffer){return buffer.byteLength})}var TOTAL_STACK=Module[\\\"TOTAL_STACK\\\"]||5242880;var TOTAL_MEMORY=Module[\\\"TOTAL_MEMORY\\\"]||16777216;var totalMemory=64*1024;while(totalMemory<TOTAL_MEMORY||totalMemory<2*TOTAL_STACK){if(totalMemory<16*1024*1024){totalMemory*=2}else{totalMemory+=16*1024*1024}}totalMemory=Math.max(totalMemory,16*1024*1024);if(totalMemory!==TOTAL_MEMORY){TOTAL_MEMORY=totalMemory}assert(typeof Int32Array!==\\\"undefined\\\"&&typeof Float64Array!==\\\"undefined\\\"&&!!(new Int32Array(1))[\\\"subarray\\\"]&&!!(new Int32Array(1))[\\\"set\\\"],\\\"JS engine does not provide full typed array support\\\");var buffer;buffer=new ArrayBuffer(TOTAL_MEMORY);HEAP8=new Int8Array(buffer);HEAP16=new Int16Array(buffer);HEAP32=new Int32Array(buffer);HEAPU8=new Uint8Array(buffer);HEAPU16=new Uint16Array(buffer);HEAPU32=new Uint32Array(buffer);HEAPF32=new Float32Array(buffer);HEAPF64=new Float64Array(buffer);HEAP32[0]=255;assert(HEAPU8[0]===255&&HEAPU8[3]===0,\\\"Typed arrays 2 must be run on a little-endian system\\\");Module[\\\"HEAP\\\"]=HEAP;Module[\\\"buffer\\\"]=buffer;Module[\\\"HEAP8\\\"]=HEAP8;Module[\\\"HEAP16\\\"]=HEAP16;Module[\\\"HEAP32\\\"]=HEAP32;Module[\\\"HEAPU8\\\"]=HEAPU8;Module[\\\"HEAPU16\\\"]=HEAPU16;Module[\\\"HEAPU32\\\"]=HEAPU32;Module[\\\"HEAPF32\\\"]=HEAPF32;Module[\\\"HEAPF64\\\"]=HEAPF64;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\\\"function\\\"){callback();continue}var func=callback.func;if(typeof func===\\\"number\\\"){if(callback.arg===undefined){Runtime.dynCall(\\\"v\\\",func)}else{Runtime.dynCall(\\\"vi\\\",func,[callback.arg])}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module[\\\"preRun\\\"]){if(typeof Module[\\\"preRun\\\"]==\\\"function\\\")Module[\\\"preRun\\\"]=[Module[\\\"preRun\\\"]];while(Module[\\\"preRun\\\"].length){addOnPreRun(Module[\\\"preRun\\\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function ensureInitRuntime(){if(runtimeInitialized)return;runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){callRuntimeCallbacks(__ATEXIT__);runtimeExited=true}function postRun(){if(Module[\\\"postRun\\\"]){if(typeof Module[\\\"postRun\\\"]==\\\"function\\\")Module[\\\"postRun\\\"]=[Module[\\\"postRun\\\"]];while(Module[\\\"postRun\\\"].length){addOnPostRun(Module[\\\"postRun\\\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}Module[\\\"addOnPreRun\\\"]=addOnPreRun;function addOnInit(cb){__ATINIT__.unshift(cb)}Module[\\\"addOnInit\\\"]=addOnInit;function addOnPreMain(cb){__ATMAIN__.unshift(cb)}Module[\\\"addOnPreMain\\\"]=addOnPreMain;function addOnExit(cb){__ATEXIT__.unshift(cb)}Module[\\\"addOnExit\\\"]=addOnExit;function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}Module[\\\"addOnPostRun\\\"]=addOnPostRun;function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}Module[\\\"intArrayFromString\\\"]=intArrayFromString;function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){chr&=255}ret.push(String.fromCharCode(chr))}return ret.join(\\\"\\\")}Module[\\\"intArrayToString\\\"]=intArrayToString;function writeStringToMemory(string,buffer,dontAddNull){var array=intArrayFromString(string,dontAddNull);var i=0;while(i<array.length){var chr=array[i];HEAP8[buffer+i>>0]=chr;i=i+1}}Module[\\\"writeStringToMemory\\\"]=writeStringToMemory;function writeArrayToMemory(array,buffer){for(var i=0;i<array.length;i++){HEAP8[buffer++>>0]=array[i]}}Module[\\\"writeArrayToMemory\\\"]=writeArrayToMemory;function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}Module[\\\"writeAsciiToMemory\\\"]=writeAsciiToMemory;function unSign(value,bits,ignore){if(value>=0){return value}return bits<=32?2*Math.abs(1<<bits-1)+value:Math.pow(2,bits)+value}function reSign(value,bits,ignore){if(value<=0){return value}var half=bits<=32?Math.abs(1<<bits-1):Math.pow(2,bits-1);if(value>=half&&(bits<=32||value>half)){value=-2*half+value}return value}if(!Math[\\\"imul\\\"]||Math[\\\"imul\\\"](4294967295,5)!==-5)Math[\\\"imul\\\"]=function imul(a,b){var ah=a>>>16;var al=a&65535;var bh=b>>>16;var bl=b&65535;return al*bl+(ah*bl+al*bh<<16)|0};Math.imul=Math[\\\"imul\\\"];if(!Math[\\\"clz32\\\"])Math[\\\"clz32\\\"]=(function(x){x=x>>>0;for(var i=0;i<32;i++){if(x&1<<31-i)return i}return 32});Math.clz32=Math[\\\"clz32\\\"];var Math_abs=Math.abs;var Math_cos=Math.cos;var Math_sin=Math.sin;var Math_tan=Math.tan;var Math_acos=Math.acos;var Math_asin=Math.asin;var Math_atan=Math.atan;var Math_atan2=Math.atan2;var Math_exp=Math.exp;var Math_log=Math.log;var Math_sqrt=Math.sqrt;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_pow=Math.pow;var Math_imul=Math.imul;var Math_fround=Math.fround;var Math_min=Math.min;var Math_clz32=Math.clz32;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function getUniqueRunDependency(id){return id}function addRunDependency(id){runDependencies++;if(Module[\\\"monitorRunDependencies\\\"]){Module[\\\"monitorRunDependencies\\\"](runDependencies)}}Module[\\\"addRunDependency\\\"]=addRunDependency;function removeRunDependency(id){runDependencies--;if(Module[\\\"monitorRunDependencies\\\"]){Module[\\\"monitorRunDependencies\\\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\\\"removeRunDependency\\\"]=removeRunDependency;Module[\\\"preloadedImages\\\"]={};Module[\\\"preloadedAudios\\\"]={};var memoryInitializer=null;var ASM_CONSTS=[];STATIC_BASE=8;STATICTOP=STATIC_BASE+4928;__ATINIT__.push();allocate([192,0,0,0,103,4,0,0,24,0,0,0,0,0,0,0,152,0,0,0,116,4,0,0,152,0,0,0,129,4,0,0,192,0,0,0,142,4,0,0,32,0,0,0,0,0,0,0,192,0,0,0,175,4,0,0,40,0,0,0,0,0,0,0,192,0,0,0,245,4,0,0,40,0,0,0,0,0,0,0,192,0,0,0,209,4,0,0,72,0,0,0,0,0,0,0,192,0,0,0,23,5,0,0,56,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,56,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,104,0,0,0,3,0,0,0,7,0,0,0,5,0,0,0,6,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,46,13,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,97,58,32,37,100,45,62,37,100,10,0,109,98,58,32,37,100,45,62,37,100,10,0,109,32,100,111,110,101,0,97,32,99,117,116,116,101,114,65,110,103,108,101,61,37,102,32,112,97,115,115,68,101,112,116,104,61,37,102,32,109,97,120,68,101,112,116,104,61,37,102,10,0,105,0,106,58,32,101,100,103,101,73,110,100,101,120,101,115,58,32,37,100,10,0,107,0,110,117,109,80,114,111,99,101,115,115,101,100,58,32,37,100,47,37,100,10,0,100,105,118,101,0,114,101,116,114,97,99,116,0,122,32,45,32,100,111,110,101,0,98,0,99,0,100,0,101,0,102,58,32,37,100,32,118,111,114,111,110,111,105,32,101,100,103,101,115,10,0,103,49,58,32,37,100,32,102,105,108,116,101,114,69,100,103,101,115,10,0,103,50,58,32,37,100,32,102,105,108,116,101,114,69,100,103,101,115,10,0,103,51,58,32,37,100,32,102,105,108,116,101,114,69,100,103,101,115,10,0,103,52,0,103,53,58,32,37,100,32,101,100,103,101,115,10,0,83,116,57,98,97,100,95,97,108,108,111,99,0,83,116,57,101,120,99,101,112,116,105,111,110,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,33,34,118,101,99,116,111,114,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,67,58,92,80,114,111,103,114,97,109,32,70,105,108,101,115,92,69,109,115,99,114,105,112,116,101,110,92,101,109,115,99,114,105,112,116,101,110,92,49,46,51,53,46,48,92,115,121,115,116,101,109,92,105,110,99,108,117,100,101,92,108,105,98,99,120,120,92,118,101,99,116,111,114,0,95,95,116,104,114,111,119,95,108,101,110,103,116,104,95,101,114,114,111,114,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0],\\\"i8\\\",ALLOC_NONE,Runtime.GLOBAL_BASE);var tempDoublePtr=Runtime.alignMemory(allocate(12,\\\"i8\\\",ALLOC_STATIC),8);assert(tempDoublePtr%8==0);function copyTempFloat(ptr){HEAP8[tempDoublePtr]=HEAP8[ptr];HEAP8[tempDoublePtr+1]=HEAP8[ptr+1];HEAP8[tempDoublePtr+2]=HEAP8[ptr+2];HEAP8[tempDoublePtr+3]=HEAP8[ptr+3]}function copyTempDouble(ptr){HEAP8[tempDoublePtr]=HEAP8[ptr];HEAP8[tempDoublePtr+1]=HEAP8[ptr+1];HEAP8[tempDoublePtr+2]=HEAP8[ptr+2];HEAP8[tempDoublePtr+3]=HEAP8[ptr+3];HEAP8[tempDoublePtr+4]=HEAP8[ptr+4];HEAP8[tempDoublePtr+5]=HEAP8[ptr+5];HEAP8[tempDoublePtr+6]=HEAP8[ptr+6];HEAP8[tempDoublePtr+7]=HEAP8[ptr+7]}var _BDtoIHigh=true;Module[\\\"_i64Subtract\\\"]=_i64Subtract;function ___setErrNo(value){if(Module[\\\"___errno_location\\\"])HEAP32[Module[\\\"___errno_location\\\"]()>>2]=value;return value}var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name){switch(name){case 30:return PAGE_SIZE;case 85:return totalMemory/PAGE_SIZE;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 80:case 81:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;case 79:return 0;case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1e3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:{if(typeof navigator===\\\"object\\\")return navigator[\\\"hardwareConcurrency\\\"]||1;return 1}}___setErrNo(ERRNO_CODES.EINVAL);return-1}var _SItoD=true;function _pthread_cleanup_push(routine,arg){__ATEXIT__.push((function(){Runtime.dynCall(\\\"vi\\\",routine,[arg])}));_pthread_cleanup_push.level=__ATEXIT__.length}function __ZSt18uncaught_exceptionv(){return!!__ZSt18uncaught_exceptionv.uncaught_exception}var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:(function(adjusted){if(!adjusted||EXCEPTIONS.infos[adjusted])return adjusted;for(var ptr in EXCEPTIONS.infos){var info=EXCEPTIONS.infos[ptr];if(info.adjusted===adjusted){return ptr}}return adjusted}),addRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount++}),decRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];assert(info.refcount>0);info.refcount--;if(info.refcount===0){if(info.destructor){Runtime.dynCall(\\\"vi\\\",info.destructor,[ptr])}delete EXCEPTIONS.infos[ptr];___cxa_free_exception(ptr)}}),clearRef:(function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount=0})};function ___resumeException(ptr){if(!EXCEPTIONS.last){EXCEPTIONS.last=ptr}EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr));throw ptr+\\\" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.\\\"}function ___cxa_find_matching_catch(){var thrown=EXCEPTIONS.last;if(!thrown){return(asm[\\\"setTempRet0\\\"](0),0)|0}var info=EXCEPTIONS.infos[thrown];var throwntype=info.type;if(!throwntype){return(asm[\\\"setTempRet0\\\"](0),thrown)|0}var typeArray=Array.prototype.slice.call(arguments);var pointer=Module[\\\"___cxa_is_pointer_type\\\"](throwntype);if(!___cxa_find_matching_catch.buffer)___cxa_find_matching_catch.buffer=_malloc(4);HEAP32[___cxa_find_matching_catch.buffer>>2]=thrown;thrown=___cxa_find_matching_catch.buffer;for(var i=0;i<typeArray.length;i++){if(typeArray[i]&&Module[\\\"___cxa_can_catch\\\"](typeArray[i],throwntype,thrown)){thrown=HEAP32[thrown>>2];info.adjusted=thrown;return(asm[\\\"setTempRet0\\\"](typeArray[i]),thrown)|0}}thrown=HEAP32[thrown>>2];return(asm[\\\"setTempRet0\\\"](throwntype),thrown)|0}function ___cxa_throw(ptr,type,destructor){EXCEPTIONS.infos[ptr]={ptr:ptr,adjusted:ptr,type:type,destructor:destructor,refcount:0};EXCEPTIONS.last=ptr;if(!(\\\"uncaught_exception\\\"in __ZSt18uncaught_exceptionv)){__ZSt18uncaught_exceptionv.uncaught_exception=1}else{__ZSt18uncaught_exceptionv.uncaught_exception++}throw ptr+\\\" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.\\\"}Module[\\\"_memset\\\"]=_memset;var _BDtoILow=true;Module[\\\"_bitshift64Lshr\\\"]=_bitshift64Lshr;Module[\\\"_bitshift64Shl\\\"]=_bitshift64Shl;function _pthread_cleanup_pop(){assert(_pthread_cleanup_push.level==__ATEXIT__.length,\\\"cannot pop if something else added meanwhile!\\\");__ATEXIT__.pop();_pthread_cleanup_push.level=__ATEXIT__.length}function _abort(){Module[\\\"abort\\\"]()}function ___assert_fail(condition,filename,line,func){ABORT=true;throw\\\"Assertion failed: \\\"+Pointer_stringify(condition)+\\\", at: \\\"+[filename?Pointer_stringify(filename):\\\"unknown filename\\\",line,func?Pointer_stringify(func):\\\"unknown function\\\"]+\\\" at \\\"+stackTrace()}var _tan=Math_tan;function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest);return dest}Module[\\\"_memcpy\\\"]=_memcpy;var SYSCALLS={varargs:0,get:(function(varargs){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret}),getStr:(function(){var ret=Pointer_stringify(SYSCALLS.get());return ret}),get64:(function(){var low=SYSCALLS.get(),high=SYSCALLS.get();if(low>=0)assert(high===0);else assert(high===-1);return low}),getZero:(function(){assert(SYSCALLS.get()===0)})};function ___syscall6(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD();FS.close(stream);return 0}catch(e){if(typeof FS===\\\"undefined\\\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module[\\\"_i64Add\\\"]=_i64Add;function _sbrk(bytes){var self=_sbrk;if(!self.called){DYNAMICTOP=alignMemoryPage(DYNAMICTOP);self.called=true;assert(Runtime.dynamicAlloc);self.alloc=Runtime.dynamicAlloc;Runtime.dynamicAlloc=(function(){abort(\\\"cannot dynamically allocate, sbrk now has control\\\")})}var ret=DYNAMICTOP;if(bytes!=0){var success=self.alloc(bytes);if(!success)return-1>>>0}return ret}Module[\\\"_memmove\\\"]=_memmove;function ___syscall146(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.get(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();var ret=0;if(!___syscall146.buffer)___syscall146.buffer=[];var buffer=___syscall146.buffer;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){var curr=HEAPU8[ptr+j];if(curr===0||curr===10){Module[\\\"print\\\"](UTF8ArrayToString(buffer,0));buffer.length=0}else{buffer.push(curr)}}ret+=len}return ret}catch(e){if(typeof FS===\\\"undefined\\\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}var _BItoD=true;var _sqrt=Math_sqrt;function ___syscall140(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),offset_high=SYSCALLS.get(),offset_low=SYSCALLS.get(),result=SYSCALLS.get(),whence=SYSCALLS.get();var offset=offset_low;assert(offset_high===0);FS.llseek(stream,offset,whence);HEAP32[result>>2]=stream.position;if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS===\\\"undefined\\\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}var PATH=undefined;function _emscripten_set_main_loop_timing(mode,value){Browser.mainLoop.timingMode=mode;Browser.mainLoop.timingValue=value;if(!Browser.mainLoop.func){return 1}if(mode==0){Browser.mainLoop.scheduler=function Browser_mainLoop_scheduler_setTimeout(){setTimeout(Browser.mainLoop.runner,value)};Browser.mainLoop.method=\\\"timeout\\\"}else if(mode==1){Browser.mainLoop.scheduler=function Browser_mainLoop_scheduler_rAF(){Browser.requestAnimationFrame(Browser.mainLoop.runner)};Browser.mainLoop.method=\\\"rAF\\\"}else if(mode==2){if(!window[\\\"setImmediate\\\"]){var setImmediates=[];var emscriptenMainLoopMessageId=\\\"__emcc\\\";function Browser_setImmediate_messageHandler(event){if(event.source===window&&event.data===emscriptenMainLoopMessageId){event.stopPropagation();setImmediates.shift()()}}window.addEventListener(\\\"message\\\",Browser_setImmediate_messageHandler,true);window[\\\"setImmediate\\\"]=function Browser_emulated_setImmediate(func){setImmediates.push(func);window.postMessage(emscriptenMainLoopMessageId,\\\"*\\\")}}Browser.mainLoop.scheduler=function Browser_mainLoop_scheduler_setImmediate(){window[\\\"setImmediate\\\"](Browser.mainLoop.runner)};Browser.mainLoop.method=\\\"immediate\\\"}return 0}function _emscripten_set_main_loop(func,fps,simulateInfiniteLoop,arg,noSetTiming){Module[\\\"noExitRuntime\\\"]=true;assert(!Browser.mainLoop.func,\\\"emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.\\\");Browser.mainLoop.func=func;Browser.mainLoop.arg=arg;var thisMainLoopId=Browser.mainLoop.currentlyRunningMainloop;Browser.mainLoop.runner=function Browser_mainLoop_runner(){if(ABORT)return;if(Browser.mainLoop.queue.length>0){var start=Date.now();var blocker=Browser.mainLoop.queue.shift();blocker.func(blocker.arg);if(Browser.mainLoop.remainingBlockers){var remaining=Browser.mainLoop.remainingBlockers;var next=remaining%1==0?remaining-1:Math.floor(remaining);if(blocker.counted){Browser.mainLoop.remainingBlockers=next}else{next=next+.5;Browser.mainLoop.remainingBlockers=(8*remaining+next)/9}}console.log('main loop blocker \\\"'+blocker.name+'\\\" took '+(Date.now()-start)+\\\" ms\\\");Browser.mainLoop.updateStatus();setTimeout(Browser.mainLoop.runner,0);return}if(thisMainLoopId<Browser.mainLoop.currentlyRunningMainloop)return;Browser.mainLoop.currentFrameNumber=Browser.mainLoop.currentFrameNumber+1|0;if(Browser.mainLoop.timingMode==1&&Browser.mainLoop.timingValue>1&&Browser.mainLoop.currentFrameNumber%Browser.mainLoop.timingValue!=0){Browser.mainLoop.scheduler();return}if(Browser.mainLoop.method===\\\"timeout\\\"&&Module.ctx){Module.printErr(\\\"Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!\\\");Browser.mainLoop.method=\\\"\\\"}Browser.mainLoop.runIter((function(){if(typeof arg!==\\\"undefined\\\"){Runtime.dynCall(\\\"vi\\\",func,[arg])}else{Runtime.dynCall(\\\"v\\\",func)}}));if(thisMainLoopId<Browser.mainLoop.currentlyRunningMainloop)return;if(typeof SDL===\\\"object\\\"&&SDL.audio&&SDL.audio.queueNewAudioData)SDL.audio.queueNewAudioData();Browser.mainLoop.scheduler()};if(!noSetTiming){if(fps&&fps>0)_emscripten_set_main_loop_timing(0,1e3/fps);else _emscripten_set_main_loop_timing(1,1);Browser.mainLoop.scheduler()}if(simulateInfiniteLoop){throw\\\"SimulateInfiniteLoop\\\"}}var Browser={mainLoop:{scheduler:null,method:\\\"\\\",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:(function(){Browser.mainLoop.scheduler=null;Browser.mainLoop.currentlyRunningMainloop++}),resume:(function(){Browser.mainLoop.currentlyRunningMainloop++;var timingMode=Browser.mainLoop.timingMode;var timingValue=Browser.mainLoop.timingValue;var func=Browser.mainLoop.func;Browser.mainLoop.func=null;_emscripten_set_main_loop(func,0,false,Browser.mainLoop.arg,true);_emscripten_set_main_loop_timing(timingMode,timingValue);Browser.mainLoop.scheduler()}),updateStatus:(function(){if(Module[\\\"setStatus\\\"]){var message=Module[\\\"statusMessage\\\"]||\\\"Please wait...\\\";var remaining=Browser.mainLoop.remainingBlockers;var expected=Browser.mainLoop.expectedBlockers;if(remaining){if(remaining<expected){Module[\\\"setStatus\\\"](message+\\\" (\\\"+(expected-remaining)+\\\"/\\\"+expected+\\\")\\\")}else{Module[\\\"setStatus\\\"](message)}}else{Module[\\\"setStatus\\\"](\\\"\\\")}}}),runIter:(function(func){if(ABORT)return;if(Module[\\\"preMainLoop\\\"]){var preRet=Module[\\\"preMainLoop\\\"]();if(preRet===false){return}}try{func()}catch(e){if(e instanceof ExitStatus){return}else{if(e&&typeof e===\\\"object\\\"&&e.stack)Module.printErr(\\\"exception thrown: \\\"+[e,e.stack]);throw e}}if(Module[\\\"postMainLoop\\\"])Module[\\\"postMainLoop\\\"]()})},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:(function(){if(!Module[\\\"preloadPlugins\\\"])Module[\\\"preloadPlugins\\\"]=[];if(Browser.initted)return;Browser.initted=true;try{new Blob;Browser.hasBlobConstructor=true}catch(e){Browser.hasBlobConstructor=false;console.log(\\\"warning: no blob constructor, cannot create blobs with mimetypes\\\")}Browser.BlobBuilder=typeof MozBlobBuilder!=\\\"undefined\\\"?MozBlobBuilder:typeof WebKitBlobBuilder!=\\\"undefined\\\"?WebKitBlobBuilder:!Browser.hasBlobConstructor?console.log(\\\"warning: no BlobBuilder\\\"):null;Browser.URLObject=typeof window!=\\\"undefined\\\"?window.URL?window.URL:window.webkitURL:undefined;if(!Module.noImageDecoding&&typeof Browser.URLObject===\\\"undefined\\\"){console.log(\\\"warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.\\\");Module.noImageDecoding=true}var imagePlugin={};imagePlugin[\\\"canHandle\\\"]=function imagePlugin_canHandle(name){return!Module.noImageDecoding&&/\\\\.(jpg|jpeg|png|bmp)$/i.test(name)};imagePlugin[\\\"handle\\\"]=function imagePlugin_handle(byteArray,name,onload,onerror){var b=null;if(Browser.hasBlobConstructor){try{b=new Blob([byteArray],{type:Browser.getMimetype(name)});if(b.size!==byteArray.length){b=new Blob([(new Uint8Array(byteArray)).buffer],{type:Browser.getMimetype(name)})}}catch(e){Runtime.warnOnce(\\\"Blob constructor present but fails: \\\"+e+\\\"; falling back to blob builder\\\")}}if(!b){var bb=new Browser.BlobBuilder;bb.append((new Uint8Array(byteArray)).buffer);b=bb.getBlob()}var url=Browser.URLObject.createObjectURL(b);var img=new Image;img.onload=function img_onload(){assert(img.complete,\\\"Image \\\"+name+\\\" could not be decoded\\\");var canvas=document.createElement(\\\"canvas\\\");canvas.width=img.width;canvas.height=img.height;var ctx=canvas.getContext(\\\"2d\\\");ctx.drawImage(img,0,0);Module[\\\"preloadedImages\\\"][name]=canvas;Browser.URLObject.revokeObjectURL(url);if(onload)onload(byteArray)};img.onerror=function img_onerror(event){console.log(\\\"Image \\\"+url+\\\" could not be decoded\\\");if(onerror)onerror()};img.src=url};Module[\\\"preloadPlugins\\\"].push(imagePlugin);var audioPlugin={};audioPlugin[\\\"canHandle\\\"]=function audioPlugin_canHandle(name){return!Module.noAudioDecoding&&name.substr(-4)in{\\\".ogg\\\":1,\\\".wav\\\":1,\\\".mp3\\\":1}};audioPlugin[\\\"handle\\\"]=function audioPlugin_handle(byteArray,name,onload,onerror){var done=false;function finish(audio){if(done)return;done=true;Module[\\\"preloadedAudios\\\"][name]=audio;if(onload)onload(byteArray)}function fail(){if(done)return;done=true;Module[\\\"preloadedAudios\\\"][name]=new Audio;if(onerror)onerror()}if(Browser.hasBlobConstructor){try{var b=new Blob([byteArray],{type:Browser.getMimetype(name)})}catch(e){return fail()}var url=Browser.URLObject.createObjectURL(b);var audio=new Audio;audio.addEventListener(\\\"canplaythrough\\\",(function(){finish(audio)}),false);audio.onerror=function audio_onerror(event){if(done)return;console.log(\\\"warning: browser could not fully decode audio \\\"+name+\\\", trying slower base64 approach\\\");function encode64(data){var BASE=\\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";var PAD=\\\"=\\\";var ret=\\\"\\\";var leftchar=0;var leftbits=0;for(var i=0;i<data.length;i++){leftchar=leftchar<<8|data[i];leftbits+=8;while(leftbits>=6){var curr=leftchar>>leftbits-6&63;leftbits-=6;ret+=BASE[curr]}}if(leftbits==2){ret+=BASE[(leftchar&3)<<4];ret+=PAD+PAD}else if(leftbits==4){ret+=BASE[(leftchar&15)<<2];ret+=PAD}return ret}audio.src=\\\"data:audio/x-\\\"+name.substr(-3)+\\\";base64,\\\"+encode64(byteArray);finish(audio)};audio.src=url;Browser.safeSetTimeout((function(){finish(audio)}),1e4)}else{return fail()}};Module[\\\"preloadPlugins\\\"].push(audioPlugin);var canvas=Module[\\\"canvas\\\"];function pointerLockChange(){Browser.pointerLock=document[\\\"pointerLockElement\\\"]===canvas||document[\\\"mozPointerLockElement\\\"]===canvas||document[\\\"webkitPointerLockElement\\\"]===canvas||document[\\\"msPointerLockElement\\\"]===canvas}if(canvas){canvas.requestPointerLock=canvas[\\\"requestPointerLock\\\"]||canvas[\\\"mozRequestPointerLock\\\"]||canvas[\\\"webkitRequestPointerLock\\\"]||canvas[\\\"msRequestPointerLock\\\"]||(function(){});canvas.exitPointerLock=document[\\\"exitPointerLock\\\"]||document[\\\"mozExitPointerLock\\\"]||document[\\\"webkitExitPointerLock\\\"]||document[\\\"msExitPointerLock\\\"]||(function(){});canvas.exitPointerLock=canvas.exitPointerLock.bind(document);document.addEventListener(\\\"pointerlockchange\\\",pointerLockChange,false);document.addEventListener(\\\"mozpointerlockchange\\\",pointerLockChange,false);document.addEventListener(\\\"webkitpointerlockchange\\\",pointerLockChange,false);document.addEventListener(\\\"mspointerlockchange\\\",pointerLockChange,false);if(Module[\\\"elementPointerLock\\\"]){canvas.addEventListener(\\\"click\\\",(function(ev){if(!Browser.pointerLock&&canvas.requestPointerLock){canvas.requestPointerLock();ev.preventDefault()}}),false)}}}),createContext:(function(canvas,useWebGL,setInModule,webGLContextAttributes){if(useWebGL&&Module.ctx&&canvas==Module.canvas)return Module.ctx;var ctx;var contextHandle;if(useWebGL){var contextAttributes={antialias:false,alpha:false};if(webGLContextAttributes){for(var attribute in webGLContextAttributes){contextAttributes[attribute]=webGLContextAttributes[attribute]}}contextHandle=GL.createContext(canvas,contextAttributes);if(contextHandle){ctx=GL.getContext(contextHandle).GLctx}canvas.style.backgroundColor=\\\"black\\\"}else{ctx=canvas.getContext(\\\"2d\\\")}if(!ctx)return null;if(setInModule){if(!useWebGL)assert(typeof GLctx===\\\"undefined\\\",\\\"cannot set in module if GLctx is used, but we are a non-GL context that would replace it\\\");Module.ctx=ctx;if(useWebGL)GL.makeContextCurrent(contextHandle);Module.useWebGL=useWebGL;Browser.moduleContextCreatedCallbacks.forEach((function(callback){callback()}));Browser.init()}return ctx}),destroyContext:(function(canvas,useWebGL,setInModule){}),fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:(function(lockPointer,resizeCanvas,vrDevice){Browser.lockPointer=lockPointer;Browser.resizeCanvas=resizeCanvas;Browser.vrDevice=vrDevice;if(typeof Browser.lockPointer===\\\"undefined\\\")Browser.lockPointer=true;if(typeof Browser.resizeCanvas===\\\"undefined\\\")Browser.resizeCanvas=false;if(typeof Browser.vrDevice===\\\"undefined\\\")Browser.vrDevice=null;var canvas=Module[\\\"canvas\\\"];function fullScreenChange(){Browser.isFullScreen=false;var canvasContainer=canvas.parentNode;if((document[\\\"webkitFullScreenElement\\\"]||document[\\\"webkitFullscreenElement\\\"]||document[\\\"mozFullScreenElement\\\"]||document[\\\"mozFullscreenElement\\\"]||document[\\\"fullScreenElement\\\"]||document[\\\"fullscreenElement\\\"]||document[\\\"msFullScreenElement\\\"]||document[\\\"msFullscreenElement\\\"]||document[\\\"webkitCurrentFullScreenElement\\\"])===canvasContainer){canvas.cancelFullScreen=document[\\\"cancelFullScreen\\\"]||document[\\\"mozCancelFullScreen\\\"]||document[\\\"webkitCancelFullScreen\\\"]||document[\\\"msExitFullscreen\\\"]||document[\\\"exitFullscreen\\\"]||(function(){});canvas.cancelFullScreen=canvas.cancelFullScreen.bind(document);if(Browser.lockPointer)canvas.requestPointerLock();Browser.isFullScreen=true;if(Browser.resizeCanvas)Browser.setFullScreenCanvasSize()}else{canvasContainer.parentNode.insertBefore(canvas,canvasContainer);canvasContainer.parentNode.removeChild(canvasContainer);if(Browser.resizeCanvas)Browser.setWindowedCanvasSize()}if(Module[\\\"onFullScreen\\\"])Module[\\\"onFullScreen\\\"](Browser.isFullScreen);Browser.updateCanvasDimensions(canvas)}if(!Browser.fullScreenHandlersInstalled){Browser.fullScreenHandlersInstalled=true;document.addEventListener(\\\"fullscreenchange\\\",fullScreenChange,false);document.addEventListener(\\\"mozfullscreenchange\\\",fullScreenChange,false);document.addEventListener(\\\"webkitfullscreenchange\\\",fullScreenChange,false);document.addEventListener(\\\"MSFullscreenChange\\\",fullScreenChange,false)}var canvasContainer=document.createElement(\\\"div\\\");canvas.parentNode.insertBefore(canvasContainer,canvas);canvasContainer.appendChild(canvas);canvasContainer.requestFullScreen=canvasContainer[\\\"requestFullScreen\\\"]||canvasContainer[\\\"mozRequestFullScreen\\\"]||canvasContainer[\\\"msRequestFullscreen\\\"]||(canvasContainer[\\\"webkitRequestFullScreen\\\"]?(function(){canvasContainer[\\\"webkitRequestFullScreen\\\"](Element[\\\"ALLOW_KEYBOARD_INPUT\\\"])}):null);if(vrDevice){canvasContainer.requestFullScreen({vrDisplay:vrDevice})}else{canvasContainer.requestFullScreen()}}),nextRAF:0,fakeRequestAnimationFrame:(function(func){var now=Date.now();if(Browser.nextRAF===0){Browser.nextRAF=now+1e3/60}else{while(now+2>=Browser.nextRAF){Browser.nextRAF+=1e3/60}}var delay=Math.max(Browser.nextRAF-now,0);setTimeout(func,delay)}),requestAnimationFrame:function requestAnimationFrame(func){if(typeof window===\\\"undefined\\\"){Browser.fakeRequestAnimationFrame(func)}else{if(!window.requestAnimationFrame){window.requestAnimationFrame=window[\\\"requestAnimationFrame\\\"]||window[\\\"mozRequestAnimationFrame\\\"]||window[\\\"webkitRequestAnimationFrame\\\"]||window[\\\"msRequestAnimationFrame\\\"]||window[\\\"oRequestAnimationFrame\\\"]||Browser.fakeRequestAnimationFrame}window.requestAnimationFrame(func)}},safeCallback:(function(func){return(function(){if(!ABORT)return func.apply(null,arguments)})}),allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:(function(){Browser.allowAsyncCallbacks=false}),resumeAsyncCallbacks:(function(){Browser.allowAsyncCallbacks=true;if(Browser.queuedAsyncCallbacks.length>0){var callbacks=Browser.queuedAsyncCallbacks;Browser.queuedAsyncCallbacks=[];callbacks.forEach((function(func){func()}))}}),safeRequestAnimationFrame:(function(func){return Browser.requestAnimationFrame((function(){if(ABORT)return;if(Browser.allowAsyncCallbacks){func()}else{Browser.queuedAsyncCallbacks.push(func)}}))}),safeSetTimeout:(function(func,timeout){Module[\\\"noExitRuntime\\\"]=true;return setTimeout((function(){if(ABORT)return;if(Browser.allowAsyncCallbacks){func()}else{Browser.queuedAsyncCallbacks.push(func)}}),timeout)}),safeSetInterval:(function(func,timeout){Module[\\\"noExitRuntime\\\"]=true;return setInterval((function(){if(ABORT)return;if(Browser.allowAsyncCallbacks){func()}}),timeout)}),getMimetype:(function(name){return{\\\"jpg\\\":\\\"image/jpeg\\\",\\\"jpeg\\\":\\\"image/jpeg\\\",\\\"png\\\":\\\"image/png\\\",\\\"bmp\\\":\\\"image/bmp\\\",\\\"ogg\\\":\\\"audio/ogg\\\",\\\"wav\\\":\\\"audio/wav\\\",\\\"mp3\\\":\\\"audio/mpeg\\\"}[name.substr(name.lastIndexOf(\\\".\\\")+1)]}),getUserMedia:(function(func){if(!window.getUserMedia){window.getUserMedia=navigator[\\\"getUserMedia\\\"]||navigator[\\\"mozGetUserMedia\\\"]}window.getUserMedia(func)}),getMovementX:(function(event){return event[\\\"movementX\\\"]||event[\\\"mozMovementX\\\"]||event[\\\"webkitMovementX\\\"]||0}),getMovementY:(function(event){return event[\\\"movementY\\\"]||event[\\\"mozMovementY\\\"]||event[\\\"webkitMovementY\\\"]||0}),getMouseWheelDelta:(function(event){var delta=0;switch(event.type){case\\\"DOMMouseScroll\\\":delta=event.detail;break;case\\\"mousewheel\\\":delta=event.wheelDelta;break;case\\\"wheel\\\":delta=event[\\\"deltaY\\\"];break;default:throw\\\"unrecognized mouse wheel event: \\\"+event.type}return delta}),mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:(function(event){if(Browser.pointerLock){if(event.type!=\\\"mousemove\\\"&&\\\"mozMovementX\\\"in event){Browser.mouseMovementX=Browser.mouseMovementY=0}else{Browser.mouseMovementX=Browser.getMovementX(event);Browser.mouseMovementY=Browser.getMovementY(event)}if(typeof SDL!=\\\"undefined\\\"){Browser.mouseX=SDL.mouseX+Browser.mouseMovementX;Browser.mouseY=SDL.mouseY+Browser.mouseMovementY}else{Browser.mouseX+=Browser.mouseMovementX;Browser.mouseY+=Browser.mouseMovementY}}else{var rect=Module[\\\"canvas\\\"].getBoundingClientRect();var cw=Module[\\\"canvas\\\"].width;var ch=Module[\\\"canvas\\\"].height;var scrollX=typeof window.scrollX!==\\\"undefined\\\"?window.scrollX:window.pageXOffset;var scrollY=typeof window.scrollY!==\\\"undefined\\\"?window.scrollY:window.pageYOffset;if(event.type===\\\"touchstart\\\"||event.type===\\\"touchend\\\"||event.type===\\\"touchmove\\\"){var touch=event.touch;if(touch===undefined){return}var adjustedX=touch.pageX-(scrollX+rect.left);var adjustedY=touch.pageY-(scrollY+rect.top);adjustedX=adjustedX*(cw/rect.width);adjustedY=adjustedY*(ch/rect.height);var coords={x:adjustedX,y:adjustedY};if(event.type===\\\"touchstart\\\"){Browser.lastTouches[touch.identifier]=coords;Browser.touches[touch.identifier]=coords}else if(event.type===\\\"touchend\\\"||event.type===\\\"touchmove\\\"){var last=Browser.touches[touch.identifier];if(!last)last=coords;Browser.lastTouches[touch.identifier]=last;Browser.touches[touch.identifier]=coords}return}var x=event.pageX-(scrollX+rect.left);var y=event.pageY-(scrollY+rect.top);x=x*(cw/rect.width);y=y*(ch/rect.height);Browser.mouseMovementX=x-Browser.mouseX;Browser.mouseMovementY=y-Browser.mouseY;Browser.mouseX=x;Browser.mouseY=y}}),xhrLoad:(function(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\\\"GET\\\",url,true);xhr.responseType=\\\"arraybuffer\\\";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response)}else{onerror()}};xhr.onerror=onerror;xhr.send(null)}),asyncLoad:(function(url,onload,onerror,noRunDep){Browser.xhrLoad(url,(function(arrayBuffer){assert(arrayBuffer,'Loading data file \\\"'+url+'\\\" failed (no arrayBuffer).');onload(new Uint8Array(arrayBuffer));if(!noRunDep)removeRunDependency(\\\"al \\\"+url)}),(function(event){if(onerror){onerror()}else{throw'Loading data file \\\"'+url+'\\\" failed.'}}));if(!noRunDep)addRunDependency(\\\"al \\\"+url)}),resizeListeners:[],updateResizeListeners:(function(){var canvas=Module[\\\"canvas\\\"];Browser.resizeListeners.forEach((function(listener){listener(canvas.width,canvas.height)}))}),setCanvasSize:(function(width,height,noUpdates){var canvas=Module[\\\"canvas\\\"];Browser.updateCanvasDimensions(canvas,width,height);if(!noUpdates)Browser.updateResizeListeners()}),windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:(function(){if(typeof SDL!=\\\"undefined\\\"){var flags=HEAPU32[SDL.screen+Runtime.QUANTUM_SIZE*0>>2];flags=flags|8388608;HEAP32[SDL.screen+Runtime.QUANTUM_SIZE*0>>2]=flags}Browser.updateResizeListeners()}),setWindowedCanvasSize:(function(){if(typeof SDL!=\\\"undefined\\\"){var flags=HEAPU32[SDL.screen+Runtime.QUANTUM_SIZE*0>>2];flags=flags&~8388608;HEAP32[SDL.screen+Runtime.QUANTUM_SIZE*0>>2]=flags}Browser.updateResizeListeners()}),updateCanvasDimensions:(function(canvas,wNative,hNative){if(wNative&&hNative){canvas.widthNative=wNative;canvas.heightNative=hNative}else{wNative=canvas.widthNative;hNative=canvas.heightNative}var w=wNative;var h=hNative;if(Module[\\\"forcedAspectRatio\\\"]&&Module[\\\"forcedAspectRatio\\\"]>0){if(w/h<Module[\\\"forcedAspectRatio\\\"]){w=Math.round(h*Module[\\\"forcedAspectRatio\\\"])}else{h=Math.round(w/Module[\\\"forcedAspectRatio\\\"])}}if((document[\\\"webkitFullScreenElement\\\"]||document[\\\"webkitFullscreenElement\\\"]||document[\\\"mozFullScreenElement\\\"]||document[\\\"mozFullscreenElement\\\"]||document[\\\"fullScreenElement\\\"]||document[\\\"fullscreenElement\\\"]||document[\\\"msFullScreenElement\\\"]||document[\\\"msFullscreenElement\\\"]||document[\\\"webkitCurrentFullScreenElement\\\"])===canvas.parentNode&&typeof screen!=\\\"undefined\\\"){var factor=Math.min(screen.width/w,screen.height/h);w=Math.round(w*factor);h=Math.round(h*factor)}if(Browser.resizeCanvas){if(canvas.width!=w)canvas.width=w;if(canvas.height!=h)canvas.height=h;if(typeof canvas.style!=\\\"undefined\\\"){canvas.style.removeProperty(\\\"width\\\");canvas.style.removeProperty(\\\"height\\\")}}else{if(canvas.width!=wNative)canvas.width=wNative;if(canvas.height!=hNative)canvas.height=hNative;if(typeof canvas.style!=\\\"undefined\\\"){if(w!=wNative||h!=hNative){canvas.style.setProperty(\\\"width\\\",w+\\\"px\\\",\\\"important\\\");canvas.style.setProperty(\\\"height\\\",h+\\\"px\\\",\\\"important\\\")}else{canvas.style.removeProperty(\\\"width\\\");canvas.style.removeProperty(\\\"height\\\")}}}}),wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:(function(){var handle=Browser.nextWgetRequestHandle;Browser.nextWgetRequestHandle++;return handle})};function _time(ptr){var ret=Date.now()/1e3|0;if(ptr){HEAP32[ptr>>2]=ret}return ret}function _pthread_self(){return 0}var _UItoD=true;function _malloc(bytes){var ptr=Runtime.dynamicAlloc(bytes+8);return ptr+8&4294967288}Module[\\\"_malloc\\\"]=_malloc;function ___cxa_allocate_exception(size){return _malloc(size)}function ___syscall54(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS===\\\"undefined\\\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}Module[\\\"requestFullScreen\\\"]=function Module_requestFullScreen(lockPointer,resizeCanvas,vrDevice){Browser.requestFullScreen(lockPointer,resizeCanvas,vrDevice)};Module[\\\"requestAnimationFrame\\\"]=function Module_requestAnimationFrame(func){Browser.requestAnimationFrame(func)};Module[\\\"setCanvasSize\\\"]=function Module_setCanvasSize(width,height,noUpdates){Browser.setCanvasSize(width,height,noUpdates)};Module[\\\"pauseMainLoop\\\"]=function Module_pauseMainLoop(){Browser.mainLoop.pause()};Module[\\\"resumeMainLoop\\\"]=function Module_resumeMainLoop(){Browser.mainLoop.resume()};Module[\\\"getUserMedia\\\"]=function Module_getUserMedia(){Browser.getUserMedia()};Module[\\\"createContext\\\"]=function Module_createContext(canvas,useWebGL,setInModule,webGLContextAttributes){return Browser.createContext(canvas,useWebGL,setInModule,webGLContextAttributes)};STACK_BASE=STACKTOP=Runtime.alignMemory(STATICTOP);staticSealed=true;STACK_MAX=STACK_BASE+TOTAL_STACK;DYNAMIC_BASE=DYNAMICTOP=Runtime.alignMemory(STACK_MAX);assert(DYNAMIC_BASE<TOTAL_MEMORY,\\\"TOTAL_MEMORY not big enough for stack\\\");var cttz_i8=allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0],\\\"i8\\\",ALLOC_DYNAMIC);function invoke_iiii(index,a1,a2,a3){try{return Module[\\\"dynCall_iiii\\\"](index,a1,a2,a3)}catch(e){if(typeof e!==\\\"number\\\"&&e!==\\\"longjmp\\\")throw e;asm[\\\"setThrew\\\"](1,0)}}function invoke_viiiii(index,a1,a2,a3,a4,a5){try{Module[\\\"dynCall_viiiii\\\"](index,a1,a2,a3,a4,a5)}catch(e){if(typeof e!==\\\"number\\\"&&e!==\\\"longjmp\\\")throw e;asm[\\\"setThrew\\\"](1,0)}}function invoke_vi(index,a1){try{Module[\\\"dynCall_vi\\\"](index,a1)}catch(e){if(typeof e!==\\\"number\\\"&&e!==\\\"longjmp\\\")throw e;asm[\\\"setThrew\\\"](1,0)}}function invoke_ii(index,a1){try{return Module[\\\"dynCall_ii\\\"](index,a1)}catch(e){if(typeof e!==\\\"number\\\"&&e!==\\\"longjmp\\\")throw e;asm[\\\"setThrew\\\"](1,0)}}function invoke_v(index){try{Module[\\\"dynCall_v\\\"](index)}catch(e){if(typeof e!==\\\"number\\\"&&e!==\\\"longjmp\\\")throw e;asm[\\\"setThrew\\\"](1,0)}}function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6){try{Module[\\\"dynCall_viiiiii\\\"](index,a1,a2,a3,a4,a5,a6)}catch(e){if(typeof e!==\\\"number\\\"&&e!==\\\"longjmp\\\")throw e;asm[\\\"setThrew\\\"](1,0)}}function invoke_iii(index,a1,a2){try{return Module[\\\"dynCall_iii\\\"](index,a1,a2)}catch(e){if(typeof e!==\\\"number\\\"&&e!==\\\"longjmp\\\")throw e;asm[\\\"setThrew\\\"](1,0)}}function invoke_viiii(index,a1,a2,a3,a4){try{Module[\\\"dynCall_viiii\\\"](index,a1,a2,a3,a4)}catch(e){if(typeof e!==\\\"number\\\"&&e!==\\\"longjmp\\\")throw e;asm[\\\"setThrew\\\"](1,0)}}Module.asmGlobalArg={\\\"Math\\\":Math,\\\"Int8Array\\\":Int8Array,\\\"Int16Array\\\":Int16Array,\\\"Int32Array\\\":Int32Array,\\\"Uint8Array\\\":Uint8Array,\\\"Uint16Array\\\":Uint16Array,\\\"Uint32Array\\\":Uint32Array,\\\"Float32Array\\\":Float32Array,\\\"Float64Array\\\":Float64Array,\\\"NaN\\\":NaN,\\\"Infinity\\\":Infinity,\\\"byteLength\\\":byteLength};Module.asmLibraryArg={\\\"abort\\\":abort,\\\"assert\\\":assert,\\\"invoke_iiii\\\":invoke_iiii,\\\"invoke_viiiii\\\":invoke_viiiii,\\\"invoke_vi\\\":invoke_vi,\\\"invoke_ii\\\":invoke_ii,\\\"invoke_v\\\":invoke_v,\\\"invoke_viiiiii\\\":invoke_viiiiii,\\\"invoke_iii\\\":invoke_iii,\\\"invoke_viiii\\\":invoke_viiii,\\\"_pthread_cleanup_pop\\\":_pthread_cleanup_pop,\\\"___syscall6\\\":___syscall6,\\\"___setErrNo\\\":___setErrNo,\\\"___assert_fail\\\":___assert_fail,\\\"___cxa_allocate_exception\\\":___cxa_allocate_exception,\\\"___cxa_find_matching_catch\\\":___cxa_find_matching_catch,\\\"_emscripten_set_main_loop_timing\\\":_emscripten_set_main_loop_timing,\\\"_sbrk\\\":_sbrk,\\\"_emscripten_memcpy_big\\\":_emscripten_memcpy_big,\\\"___resumeException\\\":___resumeException,\\\"__ZSt18uncaught_exceptionv\\\":__ZSt18uncaught_exceptionv,\\\"_sysconf\\\":_sysconf,\\\"_pthread_self\\\":_pthread_self,\\\"___syscall140\\\":___syscall140,\\\"___syscall54\\\":___syscall54,\\\"_emscripten_set_main_loop\\\":_emscripten_set_main_loop,\\\"_tan\\\":_tan,\\\"___cxa_throw\\\":___cxa_throw,\\\"_abort\\\":_abort,\\\"_pthread_cleanup_push\\\":_pthread_cleanup_push,\\\"_time\\\":_time,\\\"_sqrt\\\":_sqrt,\\\"___syscall146\\\":___syscall146,\\\"STACKTOP\\\":STACKTOP,\\\"STACK_MAX\\\":STACK_MAX,\\\"tempDoublePtr\\\":tempDoublePtr,\\\"ABORT\\\":ABORT,\\\"cttz_i8\\\":cttz_i8};// EMSCRIPTEN_START_ASM\\nvar asm=(function(global,env,buffer) {\\n\\\"use asm\\\";var a=global.Int8Array;var b=global.Int16Array;var c=global.Int32Array;var d=global.Uint8Array;var e=global.Uint16Array;var f=global.Uint32Array;var g=global.Float32Array;var h=global.Float64Array;var i=new a(buffer);var j=new b(buffer);var k=new c(buffer);var l=new d(buffer);var m=new e(buffer);var n=new f(buffer);var o=new g(buffer);var p=new h(buffer);var q=global.byteLength;var r=env.STACKTOP|0;var s=env.STACK_MAX|0;var t=env.tempDoublePtr|0;var u=env.ABORT|0;var v=env.cttz_i8|0;var w=0;var x=0;var y=0;var z=0;var A=global.NaN,B=global.Infinity;var C=0,D=0,E=0,F=0,G=0.0,H=0,I=0,J=0,K=0.0;var L=0;var M=0;var N=0;var O=0;var P=0;var Q=0;var R=0;var S=0;var T=0;var U=0;var V=global.Math.floor;var W=global.Math.abs;var X=global.Math.sqrt;var Y=global.Math.pow;var Z=global.Math.cos;var _=global.Math.sin;var $=global.Math.tan;var aa=global.Math.acos;var ba=global.Math.asin;var ca=global.Math.atan;var da=global.Math.atan2;var ea=global.Math.exp;var fa=global.Math.log;var ga=global.Math.ceil;var ha=global.Math.imul;var ia=global.Math.min;var ja=global.Math.clz32;var ka=env.abort;var la=env.assert;var ma=env.invoke_iiii;var na=env.invoke_viiiii;var oa=env.invoke_vi;var pa=env.invoke_ii;var qa=env.invoke_v;var ra=env.invoke_viiiiii;var sa=env.invoke_iii;var ta=env.invoke_viiii;var ua=env._pthread_cleanup_pop;var va=env.___syscall6;var wa=env.___setErrNo;var xa=env.___assert_fail;var ya=env.___cxa_allocate_exception;var za=env.___cxa_find_matching_catch;var Aa=env._emscripten_set_main_loop_timing;var Ba=env._sbrk;var Ca=env._emscripten_memcpy_big;var Da=env.___resumeException;var Ea=env.__ZSt18uncaught_exceptionv;var Fa=env._sysconf;var Ga=env._pthread_self;var Ha=env.___syscall140;var Ia=env.___syscall54;var Ja=env._emscripten_set_main_loop;var Ka=env._tan;var La=env.___cxa_throw;var Ma=env._abort;var Na=env._pthread_cleanup_push;var Oa=env._time;var Pa=env._sqrt;var Qa=env.___syscall146;var Ra=0.0;function Sa(newBuffer){if(q(newBuffer)&16777215||q(newBuffer)<=16777215||q(newBuffer)>2147483648)return false;i=new a(newBuffer);j=new b(newBuffer);k=new c(newBuffer);l=new d(newBuffer);m=new e(newBuffer);n=new f(newBuffer);o=new g(newBuffer);p=new h(newBuffer);buffer=newBuffer;return true}\\n// EMSCRIPTEN_START_FUNCS\\nfunction mc(a,b,c){a=a|0;b=b|0;c=+c;var d=0,e=0,f=0,g=0,h=0.0,l=0.0,m=0.0,n=0,o=0,q=0,s=0.0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0,R=0.0,S=0,T=0,U=0,V=0,W=0,Y=0,Z=0,_=0,aa=0.0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,za=0,Aa=0;Aa=r;r=r+2992|0;oa=Aa+192|0;ua=Aa+184|0;ma=Aa+168|0;la=Aa+160|0;ea=Aa+136|0;ja=Aa+120|0;fa=Aa+64|0;_=Aa+32|0;Q=Aa;wa=Aa+2964|0;va=Aa+2920|0;ra=Aa+220|0;ha=Aa+2960|0;sa=Aa+2976|0;k[wa>>2]=0;za=wa+4|0;k[za>>2]=0;k[wa+8>>2]=0;d=k[b>>2]|0;ba=b+4|0;w=k[ba>>2]|0;if((d|0)!=(w|0)){x=wa+8|0;do{v=d+4|0;f=k[d>>2]|0;e=(k[v>>2]|0)-f>>3;if(e){q=0;do{u=q;q=q+1|0;o=f+(u<<3)|0;do if(q>>>0<e>>>0){e=f+(q<<3)|0;n=k[za>>2]|0;if(n>>>0<(k[x>>2]|0)>>>0){k[n>>2]=0;k[n+4>>2]=0;k[n+8>>2]=0;k[n+12>>2]=0;k[n>>2]=k[o>>2];k[n+4>>2]=k[f+(u<<3)+4>>2];k[n+8>>2]=k[e>>2];k[n+12>>2]=k[f+(q<<3)+4>>2];k[za>>2]=n+16;break}else{yc(wa,o,e);break}}else{e=k[za>>2]|0;if(e>>>0<(k[x>>2]|0)>>>0){k[e>>2]=0;k[e+4>>2]=0;k[e+8>>2]=0;k[e+12>>2]=0;k[e>>2]=k[o>>2];k[e+4>>2]=k[f+(u<<3)+4>>2];k[e+8>>2]=k[f>>2];k[e+12>>2]=k[f+4>>2];k[za>>2]=e+16;break}else{yc(wa,o,f);break}}while(0);f=k[d>>2]|0;e=(k[v>>2]|0)-f>>3}while(q>>>0<e>>>0)}d=d+12|0}while((d|0)!=(w|0))}n=(k[87]|0)>-1;a:do if(!1){d=1021;na=16}else{e=1021;d=1021;while(1){if(!(i[e>>0]|0))break a;e=e+1|0;d=e;if(!(d&3)){d=e;na=16;break}}}while(0);if((na|0)==16){while(1){e=k[d>>2]|0;if(!((e&-2139062144^-2139062144)&e+-16843009))d=d+4|0;else break}if((e&255)<<24>>24)do d=d+1|0;while((i[d>>0]|0)!=0)}f=d-1021|0;d=k[72]|0;e=(d|0)==0;b:do if(n){do if(e){d=i[346]|0;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;d=e+(k[80]|0)|0;k[72]=d;break}else{k[68]=d|32;d=0;na=38;break b}}else e=k[73]|0;while(0);if((d-e|0)>>>0<f>>>0){d=Ta[k[308>>2]&7](272,1021,f)|0;na=38;break}else{fe(e|0,1021,f|0)|0;k[73]=(k[73]|0)+f;na=40;break}}else{do if(e){d=i[346]|0;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;d=e+(k[80]|0)|0;k[72]=d;break}else{k[68]=d|32;d=0;na=38;break b}}else e=k[73]|0;while(0);if((d-e|0)>>>0<f>>>0){d=Ta[k[308>>2]&7](272,1021,f)|0;na=38;break}else{fe(e|0,1021,f|0)|0;k[73]=(k[73]|0)+f;na=40;break}}while(0);if((na|0)==38)if(!((d|0)!=(f|0)?((d>>>0)/(f>>>0)|0|0)<1:0))na=40;do if((na|0)==40){f=i[347]|0;if(f<<24>>24!=10){d=k[73]|0;e=k[72]|0;if(d>>>0<e>>>0){k[73]=d+1;i[d>>0]=10;break}}else e=k[72]|0;i[oa>>0]=10;do if(!e){f=j[173]|0;d=(f&65535)<<24>>24;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;n=k[79]|0;k[75]=n;k[73]=n;e=n+(k[80]|0)|0;k[72]=e;d=(f&65535)>>>8&255;na=49;break}else{k[68]=d|32;break}}else{n=k[73]|0;d=f;na=49}while(0);do if((na|0)==49)if(n>>>0>=e>>>0|d<<24>>24==10){Ta[k[308>>2]&7](272,oa,1)|0;break}else{k[73]=n+1;i[n>>0]=10;break}while(0)}while(0);o=va;q=o+36|0;do{k[o>>2]=0;o=o+4|0}while((o|0)<(q|0));S=ra+4|0;k[S>>2]=0;U=ra+8|0;k[U>>2]=0;k[ra+12>>2]=0;V=ra+20|0;k[V>>2]=0;k[V+4>>2]=0;k[V+8>>2]=0;i[V+12>>0]=0;V=ra+36|0;k[V>>2]=0;k[V+4>>2]=0;k[V+8>>2]=0;j[V+12>>1]=0;V=ra+52|0;k[V>>2]=V;k[ra+56>>2]=V;V=ra+60|0;k[V>>2]=0;W=ra+64|0;i[oa>>0]=0;i[oa+1>>0]=0;i[oa+2>>0]=0;T=ra+68|0;k[T>>2]=0;Y=ra+72|0;k[Y>>2]=0;Z=ra+76|0;i[Z>>0]=i[oa>>0]|0;i[Z+1>>0]=i[oa+1>>0]|0;i[Z+2>>0]=i[oa+2>>0]|0;Z=ra+68|0;k[W>>2]=Z;v=ra+2696|0;k[v>>2]=0;d=k[wa>>2]|0;w=k[za>>2]|0;c:do if((d|0)!=(w|0)){x=ra+4|0;y=oa+8|0;z=oa+16|0;A=oa+24|0;B=ra+12|0;C=fa+8|0;D=fa+16|0;E=fa+24|0;F=_+8|0;G=_+16|0;H=_+24|0;I=Q+8|0;J=Q+16|0;K=Q+24|0;e=0;f=0;while(1){n=k[d>>2]|0;o=k[d+4>>2]|0;q=k[d+8>>2]|0;u=k[d+12>>2]|0;na=oa;k[na>>2]=n;k[na+4>>2]=o;na=y;k[na>>2]=n;k[na+4>>2]=o;k[z>>2]=0;k[A>>2]=0;if(e>>>0<f>>>0){k[e>>2]=k[oa>>2];k[e+4>>2]=k[oa+4>>2];k[e+8>>2]=k[oa+8>>2];k[e+12>>2]=k[oa+12>>2];k[e+16>>2]=k[oa+16>>2];k[e+20>>2]=k[oa+20>>2];k[e+24>>2]=k[oa+24>>2];e=(k[U>>2]|0)+28|0;k[U>>2]=e}else{pd(x,oa);e=k[U>>2]|0}k[e+-8>>2]=k[v>>2];na=e+-4|0;k[na>>2]=k[na>>2]|1;na=fa;k[na>>2]=q;k[na+4>>2]=u;na=C;k[na>>2]=q;k[na+4>>2]=u;k[D>>2]=0;k[E>>2]=0;if(e>>>0<(k[B>>2]|0)>>>0){k[e>>2]=k[fa>>2];k[e+4>>2]=k[fa+4>>2];k[e+8>>2]=k[fa+8>>2];k[e+12>>2]=k[fa+12>>2];k[e+16>>2]=k[fa+16>>2];k[e+20>>2]=k[fa+20>>2];k[e+24>>2]=k[fa+24>>2];e=(k[U>>2]|0)+28|0;k[U>>2]=e}else{pd(x,fa);e=k[U>>2]|0}k[e+-8>>2]=k[v>>2];na=e+-4|0;k[na>>2]=k[na>>2]|2;if((n|0)==(q|0))if((o|0)<(u|0))na=64;else na=68;else if((n|0)<(q|0))na=64;else na=68;if((na|0)==64){na=0;f=_;k[f>>2]=n;k[f+4>>2]=o;o=F;k[o>>2]=q;k[o+4>>2]=u;k[G>>2]=0;k[H>>2]=0;if(e>>>0<(k[B>>2]|0)>>>0){k[e>>2]=k[_>>2];k[e+4>>2]=k[_+4>>2];k[e+8>>2]=k[_+8>>2];k[e+12>>2]=k[_+12>>2];k[e+16>>2]=k[_+16>>2];k[e+20>>2]=k[_+20>>2];k[e+24>>2]=k[_+24>>2];e=(k[U>>2]|0)+28|0;k[U>>2]=e}else{pd(x,_);e=k[U>>2]|0}u=e+-4|0;k[u>>2]=k[u>>2]|8}else if((na|0)==68){na=0;f=Q;k[f>>2]=q;k[f+4>>2]=u;u=I;k[u>>2]=n;k[u+4>>2]=o;k[J>>2]=0;k[K>>2]=0;if(e>>>0<(k[B>>2]|0)>>>0){k[e>>2]=k[Q>>2];k[e+4>>2]=k[Q+4>>2];k[e+8>>2]=k[Q+8>>2];k[e+12>>2]=k[Q+12>>2];k[e+16>>2]=k[Q+16>>2];k[e+20>>2]=k[Q+20>>2];k[e+24>>2]=k[Q+24>>2];e=(k[U>>2]|0)+28|0;k[U>>2]=e}else{pd(x,Q);e=k[U>>2]|0}u=e+-4|0;k[u>>2]=k[u>>2]|9}u=k[v>>2]|0;k[e+-8>>2]=u;k[v>>2]=u+1;d=d+16|0;if((d|0)==(w|0))break c;f=k[B>>2]|0}}while(0);n=(k[87]|0)>-1;d:do if(!3){d=1023;na=77}else{e=1023;d=1023;while(1){if(!(i[e>>0]|0))break d;e=e+1|0;d=e;if(!(d&3)){d=e;na=77;break}}}while(0);if((na|0)==77){while(1){e=k[d>>2]|0;if(!((e&-2139062144^-2139062144)&e+-16843009))d=d+4|0;else break}if((e&255)<<24>>24)do d=d+1|0;while((i[d>>0]|0)!=0)}f=d-1023|0;d=k[72]|0;e=(d|0)==0;e:do if(n){do if(e){d=i[346]|0;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;d=e+(k[80]|0)|0;k[72]=d;break}else{k[68]=d|32;d=0;na=99;break e}}else e=k[73]|0;while(0);if((d-e|0)>>>0<f>>>0){d=Ta[k[308>>2]&7](272,1023,f)|0;na=99;break}else{fe(e|0,1023,f|0)|0;k[73]=(k[73]|0)+f;na=101;break}}else{do if(e){d=i[346]|0;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;d=e+(k[80]|0)|0;k[72]=d;break}else{k[68]=d|32;d=0;na=99;break e}}else e=k[73]|0;while(0);if((d-e|0)>>>0<f>>>0){d=Ta[k[308>>2]&7](272,1023,f)|0;na=99;break}else{fe(e|0,1023,f|0)|0;k[73]=(k[73]|0)+f;na=101;break}}while(0);if((na|0)==99)if(!((d|0)!=(f|0)?((d>>>0)/(f>>>0)|0|0)<1:0))na=101;do if((na|0)==101){f=i[347]|0;if(f<<24>>24!=10){d=k[73]|0;e=k[72]|0;if(d>>>0<e>>>0){k[73]=d+1;i[d>>0]=10;break}}else e=k[72]|0;i[oa>>0]=10;do if(!e){f=j[173]|0;d=(f&65535)<<24>>24;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;n=k[79]|0;k[75]=n;k[73]=n;e=n+(k[80]|0)|0;k[72]=e;d=(f&65535)>>>8&255;na=110;break}else{k[68]=d|32;break}}else{n=k[73]|0;d=f;na=110}while(0);do if((na|0)==110)if(n>>>0>=e>>>0|d<<24>>24==10){Ta[k[308>>2]&7](272,oa,1)|0;break}else{k[73]=n+1;i[n>>0]=10;break}while(0)}while(0);x=k[U>>2]|0;y=k[S>>2]|0;z=(x-y|0)/28|0;A=va+8|0;o=k[va>>2]|0;d=o;if((((k[A>>2]|0)-d|0)/12|0)>>>0<z>>>0){q=va+4|0;f=(k[q>>2]|0)-d|0;n=(f|0)/12|0;if((x|0)==(y|0))d=0;else{e=z*12|0;d=_d(e)|0;f:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(e)|0;if(d)break f}Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}while(0)}Q=d+((((f|0)/-12|0)+n|0)*12|0)|0;fe(Q|0,o|0,f|0)|0;k[va>>2]=Q;k[q>>2]=d+(n*12|0);k[A>>2]=d+(z*12|0);if(o)$d(o)}o=va+12|0;q=z<<1;u=va+20|0;v=k[o>>2]|0;d=v;if((((k[u>>2]|0)-d|0)/24|0)>>>0<q>>>0){w=va+16|0;f=(k[w>>2]|0)-d|0;n=(f|0)/24|0;if((x|0)==(y|0))d=0;else{e=z*48|0;e=(e|0)==0?1:e;d=_d(e)|0;g:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(e)|0;if(d)break g}Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}while(0)}Q=d+((((f|0)/-24|0)+n|0)*24|0)|0;fe(Q|0,v|0,f|0)|0;k[o>>2]=Q;k[w>>2]=d+(n*24|0);k[u>>2]=d+(q*24|0);if(v)$d(v)}o=va+24|0;q=z*6|0;u=va+32|0;v=k[o>>2]|0;d=v;if((((k[u>>2]|0)-d|0)/24|0)>>>0<q>>>0){w=va+28|0;f=(k[w>>2]|0)-d|0;n=(f|0)/24|0;if((x|0)==(y|0))d=0;else{e=z*144|0;e=(e|0)==0?1:e;d=_d(e)|0;h:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(e)|0;if(d)break h}Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}while(0)}Q=d+((((f|0)/-24|0)+n|0)*24|0)|0;fe(Q|0,v|0,f|0)|0;k[o>>2]=Q;k[w>>2]=d+(n*24|0);k[u>>2]=d+(q*24|0);if(v)$d(v)}kd(k[S>>2]|0,k[U>>2]|0);n=k[S>>2]|0;d=k[U>>2]|0;i:do if((n|0)!=(d|0)){e=n+28|0;if((e|0)!=(d|0)){f=n;while(1){if((((k[f>>2]|0)==(k[f+28>>2]|0)?(k[f+4>>2]|0)==(k[f+32>>2]|0):0)?(k[f+8>>2]|0)==(k[f+36>>2]|0):0)?(k[f+12>>2]|0)==(k[f+40>>2]|0):0){na=148;break i}f=e+28|0;if((f|0)==(d|0))break;else{Q=e;e=f;f=Q}}}}else{f=n;na=148}while(0);if((na|0)==148)if((f|0)!=(d|0)){e=f+56|0;if((e|0)==(d|0))e=n;else{n=f;f=f+28|0;while(1){if((((k[n>>2]|0)==(k[e>>2]|0)?(k[n+4>>2]|0)==(k[f+32>>2]|0):0)?(k[n+8>>2]|0)==(k[f+36>>2]|0):0)?(k[n+12>>2]|0)==(k[f+40>>2]|0):0)f=n;else{f=n+28|0;k[f>>2]=k[e>>2];k[f+4>>2]=k[e+4>>2];k[f+8>>2]=k[e+8>>2];k[f+12>>2]=k[e+12>>2];k[f+16>>2]=k[e+16>>2];k[f+20>>2]=k[e+20>>2];k[f+24>>2]=k[e+24>>2]}n=e+28|0;if((n|0)==(d|0))break;else{Q=e;e=n;n=f;f=Q}}d=k[U>>2]|0;e=k[S>>2]|0}n=f+28|0;o=n;if((n|0)!=(d|0)){e=e+((((d-o|0)/28|0)+((o-e|0)/28|0)|0)*28|0)|0;d=d-e|0;he(n|0,e|0,d|0)|0;d=f+((((d|0)/28|0)+1|0)*28|0)|0;e=k[U>>2]|0;if((e|0)!=(d|0)){d=e+(~(((e+-28-d|0)>>>0)/28|0)*28|0)|0;k[U>>2]=d}}}o=k[S>>2]|0;e=o;if((d|0)!=(o|0)){f=(d-e|0)/28|0;n=0;do{k[o+(n*28|0)+16>>2]=n;n=n+1|0}while(n>>>0<f>>>0)}k[ra+16>>2]=e;do if((o|0)==(d|0)){u=ra+16|0;d=o}else{if((d-e|0)==28){d=k[o+24>>2]&31;k[oa>>2]=k[o+20>>2];k[oa+4>>2]=0;k[oa+8>>2]=d;d=va+4|0;e=k[d>>2]|0;if(e>>>0<(k[A>>2]|0)>>>0){k[e>>2]=k[oa>>2];k[e+4>>2]=k[oa+4>>2];k[e+8>>2]=k[oa+8>>2];k[d>>2]=(k[d>>2]|0)+12}else gd(va,oa);u=ra+16|0;d=(k[u>>2]|0)+28|0;k[u>>2]=d;break}x=ra+16|0;if((o|0)!=(d|0)){f=k[o>>2]|0;n=o;e=0;do{if((k[n>>2]|0)!=(f|0)){d=n;break}if((f|0)!=(k[n+8>>2]|0)){d=n;break}n=n+28|0;k[x>>2]=n;e=e+1|0}while((n|0)!=(d|0));if((e|0)==1){k[fa>>2]=Z;k[oa>>2]=k[fa>>2];dd(ra,o,o,o+28|0,oa,va)|0;d=(k[x>>2]|0)+28|0;k[x>>2]=d;u=x;break}else e=d}else e=d;d=o+28|0;j:do if((d|0)==(e|0))d=e;else{w=fa+28|0;v=o;k:while(1){k[fa>>2]=k[v>>2];k[fa+4>>2]=k[v+4>>2];k[fa+8>>2]=k[v+8>>2];k[fa+12>>2]=k[v+12>>2];k[fa+16>>2]=k[v+16>>2];k[fa+20>>2]=k[v+20>>2];k[fa+24>>2]=k[v+24>>2];k[w>>2]=k[d>>2];k[w+4>>2]=k[d+4>>2];k[w+8>>2]=k[d+8>>2];k[w+12>>2]=k[d+12>>2];k[w+16>>2]=k[d+16>>2];k[w+20>>2]=k[d+20>>2];k[w+24>>2]=k[d+24>>2];ed(_,va,v,d);u=k[_>>2]|0;e=_d(80)|0;if(!e)do{e=k[35]|0;k[35]=e+0;if(!e)break k;Xa[e&0]();e=_d(80)|0}while((e|0)==0);f=e+16|0;o=f;n=fa;q=o+56|0;do{k[o>>2]=k[n>>2];o=o+4|0;n=n+4|0}while((o|0)<(q|0));n=e+72|0;k[n>>2]=0;k[n+4>>2]=u;n=fd(W,Z,oa,f)|0;f=k[n>>2]|0;do if(!f){f=k[oa>>2]|0;k[e>>2]=0;k[e+4>>2]=0;k[e+8>>2]=f;k[n>>2]=e;f=k[k[W>>2]>>2]|0;if(f){k[W>>2]=f;e=k[n>>2]|0}Nb(k[T>>2]|0,e);k[Y>>2]=(k[Y>>2]|0)+1}else{if((f|0)==(e|0))break;$d(e)}while(0);d=d+28|0;if((d|0)==(k[x>>2]|0))break j;else v=v+28|0}Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}while(0);u=x}while(0);o=ra+36|0;q=ra+40|0;n=k[o>>2]|0;e=k[q>>2]|0;l:while(1){f=(d|0)==(k[U>>2]|0);do if((n|0)!=(e|0)){if(f){Kc(ra,va);break}I=(k[n>>2]|0)+24|0;K=k[I>>2]|0;I=k[I+4>>2]|0;p[t>>3]=+(k[d>>2]|0);J=k[t>>2]|0;H=k[t+4>>2]|0;S=(H|0)>-1|(H|0)==-1&J>>>0>4294967295;Q=be(0,-2147483648,J|0,H|0)|0;J=S?Q:J;H=S?L:H;S=(I|0)>-1|(I|0)==-1&K>>>0>4294967295;Q=be(0,-2147483648,K|0,I|0)|0;K=S?Q:K;I=S?L:I;S=be(J|0,H|0,K|0,I|0)|0;Q=L;_=be(K|0,I|0,J|0,H|0)|0;T=L;if(((H>>>0>I>>>0|(H|0)==(I|0)&J>>>0>K>>>0?(Q>>>0>0|(Q|0)==0&S>>>0>64)<<31>>31:(T>>>0>0|(T|0)==0&_>>>0>64)&1)|0)==-1){Jc(ra,va);break}else{Kc(ra,va);break}}else{if(f)break l;Jc(ra,va)}while(0);d=k[o>>2]|0;e=k[q>>2]|0;m:do if((d|0)==(e|0))e=d;else while(1){n=k[d>>2]|0;if(i[n+32>>0]|0)break m;f=e-d|0;if((f|0)>4){_=e+-4|0;k[d>>2]=k[_>>2];k[_>>2]=n;Lc(d,(f>>2)+-1|0,d);d=k[q>>2]|0}else d=e;k[q>>2]=d+-4;d=n+4|0;e=k[n>>2]|0;k[e+4>>2]=k[d>>2];k[k[d>>2]>>2]=e;k[V>>2]=(k[V>>2]|0)+-1;$d(n);d=k[o>>2]|0;e=k[q>>2]|0;if((d|0)==(e|0)){e=d;break}}while(0);n=d;d=k[u>>2]|0}Cc(k[Z>>2]|0);k[Y>>2]=0;k[W>>2]=Z;k[Z>>2]=0;Y=va+24|0;e=k[Y>>2]|0;f=e;Z=va+28|0;d=k[Z>>2]|0;if((e|0)==(d|0)){n=f;d=e;f=e}else{n=f;v=f;while(1){f=k[e+4>>2]|0;u=k[e+8>>2]|0;o=k[u+4>>2]|0;q=f;if(((f|0)!=0&(o|0)!=0?(K=f,S=k[K>>2]|0,K=k[K+4>>2]|0,Q=o,T=k[Q>>2]|0,Q=k[Q+4>>2]|0,V=(K|0)>-1|(K|0)==-1&S>>>0>4294967295,U=be(0,-2147483648,S|0,K|0)|0,S=V?U:S,K=V?L:K,V=(Q|0)>-1|(Q|0)==-1&T>>>0>4294967295,U=be(0,-2147483648,T|0,Q|0)|0,T=V?U:T,Q=V?L:Q,V=be(S|0,K|0,T|0,Q|0)|0,U=L,_=be(T|0,Q|0,S|0,K|0)|0,W=L,((K>>>0>Q>>>0|(K|0)==(Q|0)&S>>>0>T>>>0?(U>>>0>0|(U|0)==0&V>>>0>128)<<31>>31:(W>>>0>0|(W|0)==0&_>>>0>128)&1)|0)==0):0)?(K=f+8|0,S=k[K>>2]|0,K=k[K+4>>2]|0,Q=o+8|0,T=k[Q>>2]|0,Q=k[Q+4>>2]|0,V=(K|0)>-1|(K|0)==-1&S>>>0>4294967295,U=be(0,-2147483648,S|0,K|0)|0,S=V?U:S,K=V?L:K,V=(Q|0)>-1|(Q|0)==-1&T>>>0>4294967295,U=be(0,-2147483648,T|0,Q|0)|0,T=V?U:T,Q=V?L:Q,V=be(S|0,K|0,T|0,Q|0)|0,U=L,_=be(T|0,Q|0,S|0,K|0)|0,W=L,((K>>>0>Q>>>0|(K|0)==(Q|0)&S>>>0>T>>>0?(U>>>0>0|(U|0)==0&V>>>0>128)<<31>>31:(W>>>0>0|(W|0)==0&_>>>0>128)&1)|0)==0):0){f=k[(k[u+16>>2]|0)+8>>2]|0;if((f|0)==(u|0))f=u;else{o=f;do{k[o+4>>2]=q;o=k[(k[o+16>>2]|0)+8>>2]|0}while((o|0)!=(u|0))}W=k[u+12>>2]|0;_=k[(k[u+8>>2]|0)+12>>2]|0;V=k[(k[(k[e+16>>2]|0)+8>>2]|0)+8>>2]|0;k[V+12>>2]=_;k[_+16>>2]=V;_=k[f+8>>2]|0;k[W+16>>2]=_;k[_+12>>2]=W}else{o=n;do if((e|0)!=(o|0)){f=n;d=v;k[f>>2]=k[d>>2];k[f+4>>2]=k[d+4>>2];k[f+8>>2]=k[d+8>>2];k[f+12>>2]=k[d+12>>2];k[f+16>>2]=k[d+16>>2];k[f+20>>2]=k[d+20>>2];f=o+24|0;d=e+24|0;k[f>>2]=k[d>>2];k[f+4>>2]=k[d+4>>2];k[f+8>>2]=k[d+8>>2];k[f+12>>2]=k[d+12>>2];k[f+16>>2]=k[d+16>>2];k[f+20>>2]=k[d+20>>2];k[o+8>>2]=f;k[o+32>>2]=o;d=k[o+16>>2]|0;if(d){k[d+12>>2]=o;k[(k[o+36>>2]|0)+16>>2]=f}d=o+40|0;if(!(k[d>>2]|0))break;k[(k[o+12>>2]|0)+16>>2]=o;k[(k[d>>2]|0)+12>>2]=f}while(0);n=o+48|0;d=k[Z>>2]|0}f=v+48|0;if((f|0)==(d|0))break;else{e=f;v=f}}f=k[Y>>2]|0}e=n;if((e|0)!=(d|0)){_=f+((((d-n|0)/24|0)+((n-f|0)/24|0)|0)*24|0)|0;d=d-_|0;he(n|0,_|0,d|0)|0;d=e+(((d|0)/24|0)*24|0)|0;e=k[Z>>2]|0;if((e|0)!=(d|0)){d=e+(~(((e+-24-d|0)>>>0)/24|0)*24|0)|0;k[Z>>2]=d}}e=k[Y>>2]|0;if((e|0)!=(d|0))do{k[(k[e>>2]|0)+4>>2]=e;f=k[e+4>>2]|0;if(f)k[f+16>>2]=e;e=e+24|0}while((e|0)!=(d|0));V=va+12|0;f=k[V>>2]|0;e=f;W=va+16|0;d=k[W>>2]|0;if((f|0)==(d|0)){d=f;n=f}else{n=f;do{if(k[n+16>>2]|0){f=e;if((n|0)!=(f|0)){d=e;k[d>>2]=k[n>>2];k[d+4>>2]=k[n+4>>2];k[d+8>>2]=k[n+8>>2];k[d+12>>2]=k[n+12>>2];k[d+16>>2]=k[n+16>>2];k[d+20>>2]=k[n+20>>2];d=k[f+16>>2]|0;e=d;do{k[e+4>>2]=f;e=k[(k[e+16>>2]|0)+8>>2]|0}while((e|0)!=(d|0))}e=f+24|0;d=k[W>>2]|0}n=n+24|0}while((n|0)!=(d|0));n=k[V>>2]|0}f=e;if((f|0)!=(d|0)){_=n+((((d-e|0)/24|0)+((e-n|0)/24|0)|0)*24|0)|0;d=d-_|0;he(e|0,_|0,d|0)|0;d=f+(((d|0)/24|0)*24|0)|0;e=k[W>>2]|0;if((e|0)!=(d|0)){d=e+(~(((e+-24-d|0)>>>0)/24|0)*24|0)|0;k[W>>2]=d}}if((k[V>>2]|0)==(d|0)){w=k[Y>>2]|0;e=w;q=k[Z>>2]|0;if((w|0)!=(q|0)){k[w+12>>2]=w;k[w+16>>2]=w;d=w+24|0;n=w+48|0;f=w+36|0;if((n|0)==(q|0))e=w;else{u=(((q+-96-e|0)>>>0)/48|0)<<1;v=u+3|0;o=w+(v*24|0)+12|0;e=w;while(1){k[f>>2]=n;k[e+40>>2]=n;k[e+60>>2]=d;k[e+64>>2]=d;d=n+48|0;if((d|0)==(q|0))break;else{_=n;n=d;f=e+84|0;d=e+72|0;e=_}}f=o;e=w+((u+2|0)*24|0)|0;d=w+(v*24|0)|0}k[f>>2]=d;k[e+40>>2]=d}}else{d=k[va>>2]|0;q=k[va+4>>2]|0;if((d|0)!=(q|0))do{n=k[d+4>>2]|0;do if(n){e=n;while(1){f=e;e=k[e+16>>2]|0;if(!e)break;if((e|0)==(n|0)){na=251;break}}if((na|0)==251){na=0;if(!(k[n+16>>2]|0))f=n;else break}while(1){e=n+12|0;o=k[e>>2]|0;if(!o)break;else n=o}k[f+16>>2]=n;k[e>>2]=f}while(0);d=d+12|0}while((d|0)!=(q|0))}k[ha>>2]=0;n=(k[87]|0)>-1;n:do if(!1){d=1025;na=259}else{e=1025;d=1025;while(1){if(!(i[e>>0]|0))break n;e=e+1|0;d=e;if(!(d&3)){d=e;na=259;break}}}while(0);if((na|0)==259){while(1){e=k[d>>2]|0;if(!((e&-2139062144^-2139062144)&e+-16843009))d=d+4|0;else break}if((e&255)<<24>>24)do d=d+1|0;while((i[d>>0]|0)!=0)}f=d-1025|0;d=k[72]|0;e=(d|0)==0;o:do if(n){do if(e){d=i[346]|0;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;d=e+(k[80]|0)|0;k[72]=d;break}else{k[68]=d|32;d=0;na=281;break o}}else e=k[73]|0;while(0);if((d-e|0)>>>0<f>>>0){d=Ta[k[308>>2]&7](272,1025,f)|0;na=281;break}else{fe(e|0,1025,f|0)|0;k[73]=(k[73]|0)+f;na=283;break}}else{do if(e){d=i[346]|0;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;d=e+(k[80]|0)|0;k[72]=d;break}else{k[68]=d|32;d=0;na=281;break o}}else e=k[73]|0;while(0);if((d-e|0)>>>0<f>>>0){d=Ta[k[308>>2]&7](272,1025,f)|0;na=281;break}else{fe(e|0,1025,f|0)|0;k[73]=(k[73]|0)+f;na=283;break}}while(0);do if((na|0)==281){if((d|0)==(f|0)){na=283;break}if(((d>>>0)/(f>>>0)|0|0)>=1)na=283}while(0);p:do if((na|0)==283){f=i[347]|0;do if(f<<24>>24==10)e=k[72]|0;else{d=k[73]|0;e=k[72]|0;if(d>>>0>=e>>>0)break;k[73]=d+1;i[d>>0]=10;break p}while(0);i[oa>>0]=10;do if(!e){f=j[173]|0;d=(f&65535)<<24>>24;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;n=k[79]|0;k[75]=n;k[73]=n;e=n+(k[80]|0)|0;k[72]=e;d=(f&65535)>>>8&255;na=292;break}else{k[68]=d|32;break}}else{n=k[73]|0;d=f;na=292}while(0);do if((na|0)==292)if(n>>>0>=e>>>0|d<<24>>24==10){Ta[k[308>>2]&7](272,oa,1)|0;break}else{k[73]=n+1;i[n>>0]=10;break}while(0)}while(0);d=k[b>>2]|0;G=k[ba>>2]|0;q:do if(d>>>0<G>>>0){f=0;e=0;r:while(1){F=k[d>>2]|0;E=F;F=(k[d+4>>2]|0)-F>>3;if(F){D=0;do{q=D;D=D+1|0;C=D>>>0<F>>>0;v=C?E+(D<<3)|0:E;o=k[E+(q<<3)>>2]|0;q=k[E+(q<<3)+4>>2]|0;n=k[v>>2]|0;v=k[v+4>>2]|0;do if((o|0)!=(n|0)|(q|0)!=(v|0)){do if((o|0)<=(n|0)){if((o|0)!=(n|0)){u=o;w=q;o=v;v=1;na=302;break}if((q|0)<=(v|0)){u=o;n=o;o=v;v=1;na=303}else{u=n;w=v;n=o;o=q;v=-1;na=302}}else{u=n;w=v;n=o;o=q;v=-1;na=302}while(0);if((na|0)==302){na=0;if((u|0)==(n|0)){q=w;na=303}else{q=w;B=o}}if((na|0)==303){na=0;B=o;v=0-v|0}o=e;w=k[ha>>2]|0;if(o>>>0<w>>>0){i[o>>0]=0;i[o+1>>0]=0;i[o+2>>0]=0;k[o+4>>2]=0;k[o+8>>2]=0;k[o+12>>2]=0;k[o+16>>2]=u;k[o+20>>2]=q;k[o+24>>2]=0;k[o+28>>2]=n;k[o+32>>2]=B;k[o+36>>2]=0;k[o+40>>2]=v;e=o+44|0;break}A=f;z=e-f|0;y=(z|0)/44|0;x=y+1|0;if(x>>>0>97612893){na=308;break r}e=(w-f|0)/44|0;if(e>>>0<48806446){e=e<<1;e=e>>>0<x>>>0?x:e;if(!e){w=0;o=0}else na=311}else{e=97612893;na=311}if((na|0)==311){na=0;w=e*44|0;w=(w|0)==0?1:w;o=_d(w)|0;if(!o)do{o=k[35]|0;k[35]=o+0;if(!o){na=314;break r}Xa[o&0]();o=_d(w)|0}while((o|0)==0);w=e}e=o+(y*44|0)|0;i[e>>0]=0;i[e+1>>0]=0;i[e+2>>0]=0;k[e+4>>2]=0;k[e+8>>2]=0;k[e+12>>2]=0;k[e+16>>2]=u;k[e+20>>2]=q;k[e+24>>2]=0;k[e+28>>2]=n;k[e+32>>2]=B;k[e+36>>2]=0;k[e+40>>2]=v;e=o+(x*44|0)|0;ba=o+((((z|0)/-44|0)+y|0)*44|0)|0;n=ba;fe(ba|0,A|0,z|0)|0;k[ha>>2]=o+(w*44|0);if(!f){f=n;break}$d(A);f=n}while(0)}while(C)}d=d+12|0;if(d>>>0>=G>>>0){g=f;ca=e;break q}}if((na|0)==308)xa(1340,1363,303,1438);else if((na|0)==314){Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}}else{g=0;ca=0}while(0);n=(k[87]|0)>-1;s:do if(!3){d=1027;na=322}else{e=1027;d=1027;while(1){if(!(i[e>>0]|0))break s;e=e+1|0;d=e;if(!(d&3)){d=e;na=322;break}}}while(0);if((na|0)==322){while(1){e=k[d>>2]|0;if(!((e&-2139062144^-2139062144)&e+-16843009))d=d+4|0;else break}if((e&255)<<24>>24)do d=d+1|0;while((i[d>>0]|0)!=0)}f=d-1027|0;d=k[72]|0;e=(d|0)==0;t:do if(n){do if(e){d=i[346]|0;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;d=e+(k[80]|0)|0;k[72]=d;break}else{k[68]=d|32;d=0;na=344;break t}}else e=k[73]|0;while(0);if((d-e|0)>>>0<f>>>0){d=Ta[k[308>>2]&7](272,1027,f)|0;na=344;break}else{fe(e|0,1027,f|0)|0;k[73]=(k[73]|0)+f;na=346;break}}else{do if(e){d=i[346]|0;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;d=e+(k[80]|0)|0;k[72]=d;break}else{k[68]=d|32;d=0;na=344;break t}}else e=k[73]|0;while(0);if((d-e|0)>>>0<f>>>0){d=Ta[k[308>>2]&7](272,1027,f)|0;na=344;break}else{fe(e|0,1027,f|0)|0;k[73]=(k[73]|0)+f;na=346;break}}while(0);do if((na|0)==344){if((d|0)==(f|0)){na=346;break}if(((d>>>0)/(f>>>0)|0|0)>=1)na=346}while(0);u:do if((na|0)==346){f=i[347]|0;do if(f<<24>>24==10)e=k[72]|0;else{d=k[73]|0;e=k[72]|0;if(d>>>0>=e>>>0)break;k[73]=d+1;i[d>>0]=10;break u}while(0);i[oa>>0]=10;do if(!e){f=j[173]|0;d=(f&65535)<<24>>24;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;n=k[79]|0;k[75]=n;k[73]=n;e=n+(k[80]|0)|0;k[72]=e;d=(f&65535)>>>8&255;na=355;break}else{k[68]=d|32;break}}else{n=k[73]|0;d=f;na=355}while(0);do if((na|0)==355)if(n>>>0>=e>>>0|d<<24>>24==10){Ta[k[308>>2]&7](272,oa,1)|0;break}else{k[73]=n+1;i[n>>0]=10;break}while(0)}while(0);d=g;if((ca|0)!=(d|0)){e=(ca-g|0)/44|0;f=0;do{i[d+(f*44|0)>>0]=1;f=f+1|0}while(f>>>0<e>>>0)}d=k[Y>>2]|0;e=k[Z>>2]|0;if((d|0)!=(e|0)){f=d;do{ba=f+20|0;k[ba>>2]=k[ba>>2]&31;f=f+24|0}while((f|0)!=(e|0))}k[ja>>2]=(e-d|0)/24|0;Nd(1029,ja);e=k[Z>>2]|0;d=k[Y>>2]|0;v:do if((e|0)!=(d|0)){f=ca;D=0;w:while(1){n=d+(D*24|0)+20|0;o=k[n>>2]|0;do if(o&2){u=k[d+(D*24|0)+4>>2]|0;if(!u)break;q=k[d+(D*24|0)+8>>2]|0;v=k[q+4>>2]|0;if(!((v|0)!=0&(o&32|0)==0))break;k[n>>2]=o&31|32;d=q+20|0;k[d>>2]=k[d>>2]&31|32;h=+p[u>>3];p[t>>3]=h;d=k[t+4>>2]|0;e=de(k[t>>2]|0,d|0,52)|0;e=e&2047;do if(e>>>0<=1074){d=(d|0)<0;m=d?-h:h;if(e>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=d?-h:h}while(0);C=~~h;h=+p[u+8>>3];p[t>>3]=h;d=k[t+4>>2]|0;e=de(k[t>>2]|0,d|0,52)|0;e=e&2047;do if(e>>>0<=1074){d=(d|0)<0;m=d?-h:h;if(e>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=d?-h:h}while(0);B=~~h;h=+p[v>>3];p[t>>3]=h;d=k[t+4>>2]|0;e=de(k[t>>2]|0,d|0,52)|0;e=e&2047;do if(e>>>0<=1074){d=(d|0)<0;m=d?-h:h;if(e>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=d?-h:h}while(0);e=~~h;h=+p[v+8>>3];p[t>>3]=h;d=k[t+4>>2]|0;n=de(k[t>>2]|0,d|0,52)|0;n=n&2047;do if(n>>>0<=1074){d=(d|0)<0;m=d?-h:h;if(n>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=d?-h:h}while(0);y=~~h;u=f;d=k[ha>>2]|0;do if(u>>>0<d>>>0){i[u>>0]=0;i[u+1>>0]=0;i[u+2>>0]=0;k[u+4>>2]=0;k[u+8>>2]=0;k[u+12>>2]=0;d=u+16|0;f=u+16|0;k[f>>2]=C;k[u+20>>2]=B;k[u+24>>2]=0;n=u+28|0;o=u+28|0;k[o>>2]=e;k[u+32>>2]=y;k[u+36>>2]=0;q=u+40|0;k[q>>2]=1;do if((C|0)<=(e|0)){if((C|0)!=(e|0)){f=C;d=1;na=406;break}if((B|0)<=(y|0)){d=1;na=407}else na=405}else na=405;while(0);if((na|0)==405){k[oa>>2]=k[d>>2];k[oa+4>>2]=k[d+4>>2];k[oa+8>>2]=k[d+8>>2];k[d>>2]=k[n>>2];k[d+4>>2]=k[n+4>>2];k[d+8>>2]=k[n+8>>2];k[n>>2]=k[oa>>2];k[n+4>>2]=k[oa+4>>2];k[n+8>>2]=k[oa+8>>2];k[q>>2]=-1;f=k[f>>2]|0;e=k[o>>2]|0;d=-1;na=406}if((na|0)==406?(na=0,(f|0)==(e|0)):0)na=407;if((na|0)==407){na=0;k[q>>2]=0-d}f=u+44|0}else{A=g;z=f-g|0;x=(z|0)/44|0;w=x+1|0;if(w>>>0>97612893){na=410;break w}d=(d-g|0)/44|0;if(d>>>0<48806446){n=d<<1;n=n>>>0<w>>>0?w:n}else n=97612893;f=n*44|0;f=(f|0)==0?1:f;d=_d(f)|0;if(!d)while(1){d=k[35]|0;k[35]=d+0;if(!d){na=416;break w}Xa[d&0]();d=_d(f)|0;if(d){u=d;break}}else u=d;v=u+(n*44|0)|0;i[u+(x*44|0)>>0]=0;i[u+(x*44|0)+1>>0]=0;i[u+(x*44|0)+2>>0]=0;k[u+(x*44|0)+4>>2]=0;k[u+(x*44|0)+8>>2]=0;k[u+(x*44|0)+12>>2]=0;d=u+(x*44|0)+16|0;f=u+(x*44|0)+16|0;k[f>>2]=C;k[u+(x*44|0)+20>>2]=B;k[u+(x*44|0)+24>>2]=0;n=u+(x*44|0)+28|0;o=u+(x*44|0)+28|0;k[o>>2]=e;k[u+(x*44|0)+32>>2]=y;k[u+(x*44|0)+36>>2]=0;q=u+(x*44|0)+40|0;k[q>>2]=1;do if((C|0)<=(e|0)){if((C|0)!=(e|0)){f=C;d=1;na=421;break}if((B|0)<=(y|0)){d=1;na=422}else na=420}else na=420;while(0);if((na|0)==420){k[oa>>2]=k[d>>2];k[oa+4>>2]=k[d+4>>2];k[oa+8>>2]=k[d+8>>2];k[d>>2]=k[n>>2];k[d+4>>2]=k[n+4>>2];k[d+8>>2]=k[n+8>>2];k[n>>2]=k[oa>>2];k[n+4>>2]=k[oa+4>>2];k[n+8>>2]=k[oa+8>>2];k[q>>2]=-1;f=k[f>>2]|0;e=k[o>>2]|0;d=-1;na=421}if((na|0)==421?(na=0,(f|0)==(e|0)):0)na=422;if((na|0)==422){na=0;k[q>>2]=0-d}f=u+(w*44|0)|0;ca=u+((((z|0)/-44|0)+x|0)*44|0)|0;d=ca;fe(ca|0,A|0,z|0)|0;k[ha>>2]=v;if(!g){g=d;break}$d(A);g=d}while(0);k[f+-32>>2]=D;e=k[Z>>2]|0;d=k[Y>>2]|0}while(0);D=D+1|0;if(D>>>0>=((e-d|0)/24|0)>>>0){ga=g;da=f;break v}}if((na|0)==410)xa(1340,1363,303,1438);else if((na|0)==416){Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}}else{ga=g;da=ca}while(0);f=da;F=ga;z=(da-ga|0)/44|0;k[ea>>2]=z;Nd(1050,ea);k[oa>>2]=0;G=oa+4|0;k[G>>2]=0;k[oa+8>>2]=0;x=oa+8|0;y=(f|0)!=(F|0);if(y){e=z*24|0;d=_d(e)|0;x:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(e)|0;if(d)break x}Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}while(0);da=d;g=d+(z*24|0)|0;k[oa>>2]=da;k[G>>2]=da;k[x>>2]=g}else{g=0;d=0}y:do if((f|0)!=(F|0)){n=ea+4|0;o=ea+8|0;q=ea+12|0;u=ea+16|0;v=ea+16|0;w=ea+20|0;e=0;while(1){f=k[F+(e*44|0)+16>>2]|0;b=k[F+(e*44|0)+20>>2]|0;ba=k[F+(e*44|0)+28>>2]|0;da=k[F+(e*44|0)+32>>2]|0;ca=k[F+(e*44|0)+40>>2]|0;k[ea>>2]=f;k[n>>2]=b;k[o>>2]=ba;k[q>>2]=da;da=u;k[da>>2]=e;k[da+4>>2]=ca;if(d>>>0<g>>>0){k[d>>2]=f;k[d+4>>2]=k[n>>2];k[d+8>>2]=k[o>>2];k[d+12>>2]=k[q>>2];k[d+16>>2]=k[v>>2];k[d+20>>2]=k[w>>2];k[G>>2]=d+24}else Db(oa,ea);e=e+1|0;if(e>>>0>=z>>>0)break y;d=k[G>>2]|0;g=k[x>>2]|0}}while(0);k[ja>>2]=0;E=ja+4|0;k[E>>2]=0;k[ja+8>>2]=0;f=ja+8|0;if(y){e=z*24|0;d=_d(e)|0;z:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(e)|0;if(d)break z}Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}while(0);ea=d;k[ja>>2]=ea;k[E>>2]=ea;k[f>>2]=d+(z*24|0)}Eb(ja,k[oa>>2]|0,k[G>>2]|0);D=k[E>>2]|0;o=k[ja>>2]|0;f=(D-o|0)/24|0;n=(D|0)==(o|0);A:do if(!n){e=f*44|0;e=(e|0)==0?1:e;d=_d(e)|0;do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d){na=451;break}Xa[d&0]();d=_d(e)|0;if(d){na=452;break}}if((na|0)==451){Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}else if((na|0)==452){g=d;f=d+(f*44|0)|0;e=f;if(n){ta=g;ia=e;ka=g;break A}else break}}else{f=d+(f*44|0)|0;e=f;g=d}while(0);n=g;B:while(1){w=F+((k[o+16>>2]|0)*44|0)|0;k[fa>>2]=k[w>>2];k[fa+4>>2]=k[w+4>>2];k[fa+8>>2]=k[w+8>>2];k[fa+12>>2]=k[w+12>>2];v=k[w+24>>2]|0;w=k[w+36>>2]|0;x=k[o>>2]|0;y=k[o+4>>2]|0;z=k[o+8>>2]|0;A=k[o+12>>2]|0;B=k[o+20>>2]|0;do if((d|0)==(f|0)){C=n;u=g-n|0;q=(u|0)/44|0;g=q+1|0;if(g>>>0>97612893){na=457;break B}d=(e-n|0)/44|0;if(d>>>0<48806446){d=d<<1;d=d>>>0<g>>>0?g:d;if(!d){d=0;f=0}else na=460}else{d=97612893;na=460}if((na|0)==460){na=0;f=d*44|0;f=(f|0)==0?1:f;e=_d(f)|0;if(!e)do{e=k[35]|0;k[35]=e+0;if(!e){na=463;break B}Xa[e&0]();e=_d(f)|0}while((e|0)==0);f=e}e=f+(d*44|0)|0;ea=f+(q*44|0)|0;k[ea>>2]=k[fa>>2];k[ea+4>>2]=k[fa+4>>2];k[ea+8>>2]=k[fa+8>>2];k[ea+12>>2]=k[fa+12>>2];k[ea+16>>2]=x;k[ea+20>>2]=y;k[ea+24>>2]=v;k[ea+28>>2]=z;k[ea+32>>2]=A;k[ea+36>>2]=w;k[ea+40>>2]=B;g=f+(g*44|0)|0;ea=f+((((u|0)/-44|0)+q|0)*44|0)|0;d=ea;fe(ea|0,C|0,u|0)|0;if(!n){n=d;break}$d(C);n=d}else{k[d>>2]=k[fa>>2];k[d+4>>2]=k[fa+4>>2];k[d+8>>2]=k[fa+8>>2];k[d+12>>2]=k[fa+12>>2];k[d+16>>2]=x;k[d+20>>2]=y;k[d+24>>2]=v;k[d+28>>2]=z;k[d+32>>2]=A;k[d+36>>2]=w;k[d+40>>2]=B;g=d+44|0}while(0);d=o+24|0;if((d|0)==(D|0)){ta=n;ia=e;ka=g;break A}o=d;d=g;f=e}if((na|0)==457)xa(1340,1363,303,1438);else if((na|0)==463){Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}}else{ta=0;ia=0;ka=0}while(0);if(ga){$d(F);k[ha>>2]=0}k[ha>>2]=ia;d=k[ja>>2]|0;e=d;if(d){f=k[E>>2]|0;if((f|0)!=(d|0))k[E>>2]=f+(~(((f+-24-e|0)>>>0)/24|0)*24|0);$d(d)}d=k[oa>>2]|0;e=d;if(d){f=k[G>>2]|0;if((f|0)!=(d|0))k[G>>2]=f+(~(((f+-24-e|0)>>>0)/24|0)*24|0);$d(d)}T=ka;U=ta;J=(ka-ta|0)/44|0;k[la>>2]=J;Nd(1070,la);k[oa>>2]=3;Ac(U,T,oa);k[ma>>2]=J;Nd(1090,ma);J=(U|0)==(T|0);do if(!J){I=ma+4|0;d=ta;z=0;y=0;g=U;q=0;o=0;e=k[U+16>>2]|0;f=0;n=0;u=0;C:while(1){D:do if((g|0)==(T|0))if((q|0)==(o|0)){na=575;break C}else H=u;else{w=g;v=f;g=u;while(1){if((k[w+16>>2]|0)!=(e|0)){f=v;H=g;break D};k[I>>2]=0;k[I+4>>2]=0;i[I+8>>0]=0;i[la>>0]=0;d=n;do if((d|0)==(g|0)){u=n-v|0;n=u>>5;o=n+1|0;if(o>>>0>134217727){na=487;break C}if(n>>>0<67108863){g=u>>4;g=g>>>0<o>>>0?o:g}else g=134217727;f=g<<5;f=(f|0)==0?1:f;d=_d(f)|0;if(!d)do{d=k[35]|0;k[35]=d+0;if(!d){na=493;break C}Xa[d&0]();d=_d(f)|0}while((d|0)==0);q=d+(g<<5)|0;k[d+(n<<5)>>2]=0;k[d+(n<<5)+4>>2]=0;k[d+(n<<5)+8>>2]=w;f=d+(n<<5)+12|0;k[f>>2]=k[ma>>2];k[f+4>>2]=k[ma+4>>2];k[f+8>>2]=k[ma+8>>2];i[f+12>>0]=i[ma+12>>0]|0;i[d+(n<<5)+25>>0]=1;n=d+(n<<5)+26|0;j[n>>1]=j[la>>1]|0;j[n+2>>1]=j[la+2>>1]|0;j[n+4>>1]=j[la+4>>1]|0;n=d+(o<<5)|0;f=d;g=v;fe(d|0,g|0,u|0)|0;if(!v){g=q;break}$d(g);g=q}else{k[d>>2]=0;k[d+4>>2]=0;k[d+8>>2]=w;f=d+12|0;k[f>>2]=k[ma>>2];k[f+4>>2]=k[ma+4>>2];k[f+8>>2]=k[ma+8>>2];i[f+12>>0]=i[ma+12>>0]|0;i[d+25>>0]=1;f=d+26|0;j[f>>1]=j[la>>1]|0;j[f+2>>1]=j[la+2>>1]|0;j[f+4>>1]=j[la+4>>1]|0;f=v;n=d+32|0}while(0);w=w+44|0;d=w;if((w|0)==(T|0)){H=g;break}else v=f}}while(0);G=f;F=n;w=(G|0)==(F|0);E:do if(w){k[oa>>2]=4;Ec(G,F,oa);u=z;q=y;o=G}else{s=+(e|0);x=G;do{g=k[x+8>>2]|0;o=k[g+20>>2]|0;v=g+28|0;q=k[v>>2]|0;u=k[g+32>>2]|0;do if((o|0)==(u|0)){h=+(o|0);g=g+16|0}else{g=g+16|0;m=+(k[g>>2]|0);h=+(o|0);l=s-m;if(l==0.0)break;h=h+(+(u|0)-h)*l/(+(q|0)-m)}while(0);p[x+16>>3]=h;if((e|0)==(k[g>>2]|0))g=1;else g=(e|0)==(k[v>>2]|0);i[x+24>>0]=g&1;x=x+32|0}while((x|0)!=(F|0));k[oa>>2]=4;Ec(G,F,oa);if(w){u=z;q=y;o=G;break}else{x=z;E=G;g=f}while(1){q=E+32|0;o=q;F:do if(!((i[E+24>>0]|0)==0|(q|0)==(F|0))){v=E+16|0;u=E;while(1){if(!(i[u+56>>0]|0))break F;if(!(+p[u+48>>3]==+p[v>>3]))break F;u=q+32|0;o=u;if((u|0)==(F|0))break;else{ka=q;q=u;u=ka}}}while(0);q=g;D=q>>>0<o>>>0;if(D){u=q;do{w=k[u+8>>2]|0;v=k[w+16>>2]|0;w=w+28|0;if((v|0)!=(k[w>>2]|0)){i[u+25>>0]=(e|0)==(v|0)&1;i[u+26>>0]=(e|0)==(k[w>>2]|0)&1}u=u+32|0}while(u>>>0<o>>>0)}G:do if((q|0)==(o|0))w=x;else{C=o+25|0;u=q;w=x;v=y;while(1){x=u;H:do if((u|0)==(o|0)){u=x;na=521}else while(1){y=k[u+8>>2]|0;z=i[u+25>>0]|0;if((k[y+16>>2]|0)==(k[y+28>>2]|0))break H;x=z<<24>>24==0;if(!x)k[u>>2]=w;do if(i[y>>0]|0){if(x)v=v+(k[y+40>>2]|0)|0;if(i[u+26>>0]|0)break;w=w+(k[y+40>>2]|0)|0}while(0);if(!x)k[u+4>>2]=w;u=u+32|0;x=u;if((u|0)==(o|0)){u=x;na=521;break}}while(0);if((na|0)==521){na=0;x=u;z=i[C>>0]|0;u=o}B=(x|0)==(o|0);I:do if(!B){A=x;do{y=k[A+8>>2]|0;if((k[y+16>>2]|0)!=(k[y+28>>2]|0))break;if((i[A+25>>0]|0)!=z<<24>>24)break;k[A>>2]=v;if(i[y>>0]|0)v=v+(k[y+40>>2]|0)|0;k[A+4>>2]=v;A=A+32|0}while((A|0)!=(o|0));if(B)break;else y=x;do{x=k[y+8>>2]|0;if((k[x+16>>2]|0)!=(k[x+28>>2]|0))break I;if((i[y+25>>0]|0)!=z<<24>>24)break I;if(i[x>>0]|0)v=v-(k[x+40>>2]|0)|0;y=y+32|0}while((y|0)!=(o|0))}while(0);if((u|0)==(o|0)){y=v;break G}while(1){ka=k[u+8>>2]|0;if((k[ka+16>>2]|0)!=(k[ka+28>>2]|0))break;if((i[u+25>>0]|0)!=z<<24>>24)break;u=u+32|0;if((u|0)==(o|0)){y=v;break G}}if((u|0)==(o|0)){y=v;break}}}while(0);if((E|0)!=(o|0)){u=E;do{if(!(k[u>>2]|0))v=0;else v=(k[u+4>>2]|0)!=0;i[(k[u+8>>2]|0)+1>>0]=v&1;u=u+32|0}while((u|0)!=(o|0))}J:do if(D)while(1){ka=k[q+8>>2]|0;if((k[ka+16>>2]|0)==(k[ka+28>>2]|0)?(i[q+26>>0]|0)==0:0){u=g;break J}q=q+32|0;g=q;if(q>>>0>=o>>>0){u=g;break}}else u=g;while(0);E=u;if(E>>>0<o>>>0){g=E;do{p[g+16>>3]=+(k[(k[g+8>>2]|0)+32>>2]|0);i[g+25>>0]=0;i[g+26>>0]=1;g=g+32|0}while(g>>>0<o>>>0)}if((E|0)==(F|0)){e=G;break}else{x=w;g=u}}while(1){if(i[e+26>>0]|0)break;e=e+32|0;if((e|0)==(F|0)){u=w;q=y;o=F;break E}}if((e|0)==(F|0)){u=w;q=y;o=F;break}g=e+32|0;if((g|0)!=(F|0)){o=e;q=e;while(1){if(!(i[o+58>>0]|0)){k[q>>2]=k[g>>2];k[q+4>>2]=k[g+4>>2];k[q+8>>2]=k[g+8>>2];k[q+12>>2]=k[g+12>>2];k[q+16>>2]=k[g+16>>2];k[q+20>>2]=k[g+20>>2];j[q+24>>1]=j[g+24>>1]|0;i[q+26>>0]=i[g+26>>0]|0;q=e+32|0;e=q}o=g+32|0;if((o|0)==(F|0))break;else{ka=g;g=o;o=ka}}}g=e;if((e|0)==(F|0)){u=w;q=y;o=F;break}ja=G+((g-f>>5)+(u-g>>5)<<5)|0;ka=u-ja|0;he(e|0,ja|0,ka|0)|0;e=e+(ka>>5<<5)|0;if((F|0)==(e|0)){u=w;q=y;o=F;break}n=F+(~((F+-32-e|0)>>>5)<<5)|0;u=w;q=y;o=n}while(0);if((G|0)==(o|0))e=2147483647;else{g=G;e=2147483647;do{ka=k[(k[g+8>>2]|0)+28>>2]|0;e=(ka|0)<(e|0)?ka:e;g=g+32|0}while((g|0)!=(o|0))}g=d;if((g|0)==(T|0)){z=u;y=q;q=G;u=H;continue}ka=k[g+16>>2]|0;z=u;y=q;q=G;e=(ka|0)<(e|0)?ka:e;u=H}if((na|0)==487)xa(1340,1363,303,1438);else if((na|0)==493){Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}else if((na|0)==575){if(!o)break;$d(o);break}}while(0);g=(k[87]|0)>-1;K:do if(!2){d=1110;na=580}else{e=1110;d=1110;while(1){if(!(i[e>>0]|0))break K;e=e+1|0;d=e;if(!(d&3)){d=e;na=580;break}}}while(0);if((na|0)==580){while(1){e=k[d>>2]|0;if(!((e&-2139062144^-2139062144)&e+-16843009))d=d+4|0;else break}if((e&255)<<24>>24)do d=d+1|0;while((i[d>>0]|0)!=0)}f=d-1110|0;d=k[72]|0;e=(d|0)==0;L:do if(g){do if(e){d=i[346]|0;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;d=e+(k[80]|0)|0;k[72]=d;break}else{k[68]=d|32;d=0;na=602;break L}}else e=k[73]|0;while(0);if((d-e|0)>>>0<f>>>0){d=Ta[k[308>>2]&7](272,1110,f)|0;na=602;break}else{fe(e|0,1110,f|0)|0;k[73]=(k[73]|0)+f;na=604;break}}else{do if(e){d=i[346]|0;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;d=e+(k[80]|0)|0;k[72]=d;break}else{k[68]=d|32;d=0;na=602;break L}}else e=k[73]|0;while(0);if((d-e|0)>>>0<f>>>0){d=Ta[k[308>>2]&7](272,1110,f)|0;na=602;break}else{fe(e|0,1110,f|0)|0;k[73]=(k[73]|0)+f;na=604;break}}while(0);do if((na|0)==602){if((d|0)==(f|0)){na=604;break}if(((d>>>0)/(f>>>0)|0|0)>=1)na=604}while(0);M:do if((na|0)==604){f=i[347]|0;do if(f<<24>>24==10)e=k[72]|0;else{d=k[73]|0;e=k[72]|0;if(d>>>0>=e>>>0)break;k[73]=d+1;i[d>>0]=10;break M}while(0);i[oa>>0]=10;do if(!e){f=j[173]|0;d=(f&65535)<<24>>24;i[346]=d+255|d;d=k[68]|0;if(!(d&8)){k[70]=0;k[69]=0;g=k[79]|0;k[75]=g;k[73]=g;e=g+(k[80]|0)|0;k[72]=e;d=(f&65535)>>>8&255;na=613;break}else{k[68]=d|32;break}}else{g=k[73]|0;d=f;na=613}while(0);do if((na|0)==613)if(g>>>0>=e>>>0|d<<24>>24==10){Ta[k[308>>2]&7](272,oa,1)|0;break}else{k[73]=g+1;i[g>>0]=10;break}while(0)}while(0);k[a>>2]=0;S=a+4|0;k[S>>2]=0;k[a+8>>2]=0;do if(!J){aa=c*.5;K=a+8|0;Q=U;N:while(1){O:do if(!(i[Q>>0]|0)){if(!(i[Q+1>>0]|0))break;n=k[Q+12>>2]|0;o=k[Y>>2]|0;A=k[o+(n*24|0)>>2]|0;g=k[o+(n*24|0)+8>>2]|0;z=k[g>>2]|0;f=k[o+(n*24|0)+4>>2]|0;h=+p[f>>3];p[t>>3]=h;d=k[t+4>>2]|0;e=de(k[t>>2]|0,d|0,52)|0;e=e&2047;do if(e>>>0<=1074){d=(d|0)<0;m=d?-h:h;if(e>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=d?-h:h}while(0);C=~~h;h=+p[f+8>>3];p[t>>3]=h;d=k[t+4>>2]|0;e=de(k[t>>2]|0,d|0,52)|0;e=e&2047;do if(e>>>0<=1074){d=(d|0)<0;m=d?-h:h;if(e>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=d?-h:h}while(0);B=~~h;f=k[g+4>>2]|0;h=+p[f>>3];p[t>>3]=h;d=k[t+4>>2]|0;e=de(k[t>>2]|0,d|0,52)|0;e=e&2047;do if(e>>>0<=1074){d=(d|0)<0;m=d?-h:h;if(e>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=d?-h:h}while(0);J=~~h;h=+p[f+8>>3];p[t>>3]=h;d=k[t+4>>2]|0;e=de(k[t>>2]|0,d|0,52)|0;e=e&2047;do if(e>>>0<=1074){d=(d|0)<0;m=d?-h:h;if(e>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=d?-h:h}while(0);I=~~h;if(!(k[o+(n*24|0)+20>>2]&1)){d=k[A+8>>2]|0;f=k[A>>2]|0;if(!(d&24)){ma=(d&31|0)==1;d=k[wa>>2]|0;g=k[z>>2]|0;o=d+(g<<4)+12|0;q=d+(g<<4)+8|0;n=d+(g<<4)+4|0;g=d+(g<<4)|0;e=ma?d+(f<<4)+4|0:d+(f<<4)+12|0;d=ma?d+(f<<4)|0:d+(f<<4)+8|0}else{la=(k[z+8>>2]&31|0)==1;d=k[z>>2]|0;ma=k[wa>>2]|0;o=ma+(f<<4)+12|0;q=ma+(f<<4)+8|0;n=ma+(f<<4)+4|0;g=ma+(f<<4)|0;e=la?ma+(d<<4)+4|0:ma+(d<<4)+12|0;d=la?ma+(d<<4)|0:ma+(d<<4)+8|0}H=k[d>>2]|0;G=k[e>>2]|0;F=k[g>>2]|0;E=k[n>>2]|0;n=(k[q>>2]|0)-F|0;e=(k[o>>2]|0)-E|0;ma=C-F|0;ka=B-E|0;D=((n|0)<0)<<31>>31;ma=ne(ma|0,((ma|0)<0)<<31>>31|0,n|0,D|0)|0;la=L;d=((e|0)<0)<<31>>31;ka=ne(ka|0,((ka|0)<0)<<31>>31|0,e|0,d|0)|0;la=ge(ka|0,L|0,ma|0,la|0)|0;M=+(n|0);N=+(e|0);P=M*M+N*N;O=(+(la>>>0)+4294967296.0*+(L|0))/P;la=J-F|0;ma=I-E|0;D=ne(la|0,((la|0)<0)<<31>>31|0,n|0,D|0)|0;n=L;d=ne(ma|0,((ma|0)<0)<<31>>31|0,e|0,d|0)|0;n=ge(d|0,L|0,D|0,n|0)|0;P=(+(n>>>0)+4294967296.0*+(L|0))/P-O;R=+$(+aa);n=C;D=B;d=0;e=0;while(1){u=e;while(1){s=O+P*+(d>>>0)/20.0;h=M*s;p[t>>3]=h;e=k[t+4>>2]|0;f=de(k[t>>2]|0,e|0,52)|0;f=f&2047;do if(f>>>0<=1074){e=(e|0)<0;m=e?-h:h;if(f>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=e?-h:h}while(0);g=~~h+F|0;h=N*s;p[t>>3]=h;e=k[t+4>>2]|0;f=de(k[t>>2]|0,e|0,52)|0;f=f&2047;do if(f>>>0<=1074){e=(e|0)<0;m=e?-h:h;if(f>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=e?-h:h}while(0);o=~~h+E|0;h=+(H-g|0);c=+(G-o|0);s=h*h+c*c;c=(N*h-M*c)*2.0;h=N*s/c;p[t>>3]=h;e=k[t+4>>2]|0;f=de(k[t>>2]|0,e|0,52)|0;f=f&2047;do if(f>>>0<=1074){e=(e|0)<0;m=e?-h:h;if(f>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=e?-h:h}while(0);g=~~h+g|0;h=M*s/c;p[t>>3]=h;e=k[t+4>>2]|0;f=de(k[t>>2]|0,e|0,52)|0;f=f&2047;do if(f>>>0<=1074){e=(e|0)<0;m=e?-h:h;if(f>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=e?-h:h}while(0);B=(d|0)==20;C=B?J:g;B=B?I:o-~~h|0;c=+(C-H|0);h=+(B-G|0);h=+X(+(c*c+h*h))/R;p[t>>3]=h;e=k[t+4>>2]|0;f=de(k[t>>2]|0,e|0,52)|0;f=f&2047;do if(f>>>0<=1074){e=(e|0)<0;m=e?-h:h;if(f>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=e?-h:h}while(0);e=0-~~h|0;if(!d){d=1;u=e}else break}v=k[S>>2]|0;f=k[K>>2]|0;do if(v>>>0<f>>>0){i[v>>0]=0;i[v+1>>0]=0;i[v+2>>0]=0;k[v+4>>2]=0;k[v+8>>2]=0;k[v+12>>2]=0;g=v+16|0;o=v+16|0;k[o>>2]=n;k[v+20>>2]=D;k[v+24>>2]=u;f=v+28|0;q=v+28|0;k[q>>2]=C;k[v+32>>2]=B;k[v+36>>2]=e;u=v+40|0;k[u>>2]=1;do if((n|0)<=(C|0)){if((n|0)!=(C|0)){g=C;f=1;na=805;break}if((D|0)<=(B|0)){f=1;na=806}else na=804}else na=804;while(0);if((na|0)==804){k[oa>>2]=k[g>>2];k[oa+4>>2]=k[g+4>>2];k[oa+8>>2]=k[g+8>>2];k[g>>2]=k[f>>2];k[g+4>>2]=k[f+4>>2];k[g+8>>2]=k[f+8>>2];k[f>>2]=k[oa>>2];k[f+4>>2]=k[oa+4>>2];k[f+8>>2]=k[oa+8>>2];k[u>>2]=-1;n=k[o>>2]|0;g=k[q>>2]|0;f=-1;na=805}if((na|0)==805?(na=0,(n|0)==(g|0)):0)na=806;if((na|0)==806){na=0;k[u>>2]=0-f}k[S>>2]=v+44}else{A=k[a>>2]|0;g=A;x=v-g|0;y=(x|0)/44|0;z=y+1|0;if(z>>>0>97612893){na=809;break N}f=(f-g|0)/44|0;if(f>>>0<48806446){f=f<<1;f=f>>>0<z>>>0?z:f;if(!f){f=0;g=0}else na=812}else{f=97612893;na=812}if((na|0)==812){o=f*44|0;o=(o|0)==0?1:o;g=_d(o)|0;if(!g)do{g=k[35]|0;k[35]=g+0;if(!g){na=815;break N}Xa[g&0]();g=_d(o)|0}while((g|0)==0)}w=g+(f*44|0)|0;i[g+(y*44|0)>>0]=0;i[g+(y*44|0)+1>>0]=0;i[g+(y*44|0)+2>>0]=0;k[g+(y*44|0)+4>>2]=0;k[g+(y*44|0)+8>>2]=0;k[g+(y*44|0)+12>>2]=0;q=g+(y*44|0)+16|0;k[q>>2]=n;k[g+(y*44|0)+20>>2]=D;k[g+(y*44|0)+24>>2]=u;f=g+(y*44|0)+28|0;k[f>>2]=C;k[g+(y*44|0)+32>>2]=B;k[g+(y*44|0)+36>>2]=e;v=g+(y*44|0)+40|0;k[v>>2]=1;o=g+(y*44|0)+16|0;u=g+(y*44|0)+28|0;do if((n|0)<=(C|0)){if((n|0)!=(C|0)){o=C;f=1;na=821;break}if((D|0)<=(B|0)){f=1;na=822}else na=820}else na=820;while(0);if((na|0)==820){k[oa>>2]=k[q>>2];k[oa+4>>2]=k[q+4>>2];k[oa+8>>2]=k[q+8>>2];k[q>>2]=k[f>>2];k[q+4>>2]=k[f+4>>2];k[q+8>>2]=k[f+8>>2];k[f>>2]=k[oa>>2];k[f+4>>2]=k[oa+4>>2];k[f+8>>2]=k[oa+8>>2];k[v>>2]=-1;n=k[o>>2]|0;o=k[u>>2]|0;f=-1;na=821}if((na|0)==821?(na=0,(n|0)==(o|0)):0)na=822;if((na|0)==822){na=0;k[v>>2]=0-f}ma=g+((((x|0)/-44|0)+y|0)*44|0)|0;fe(ma|0,A|0,x|0)|0;k[a>>2]=ma;k[S>>2]=g+(z*44|0);k[K>>2]=w;if(!A)break;$d(A)}while(0);d=d+1|0;if((d|0)==21)break O;else{n=C;D=B}}}y=k[A>>2]|0;ma=k[wa>>2]|0;n=ma+(y<<4)|0;o=k[n>>2]|0;x=ma+(y<<4)+4|0;q=k[x>>2]|0;u=ma+(y<<4)+8|0;v=k[u>>2]|0;y=ma+(y<<4)+12|0;w=k[y>>2]|0;g=k[z>>2]|0;d=k[ma+(g<<4)>>2]|0;e=k[ma+(g<<4)+4>>2]|0;f=k[ma+(g<<4)+8>>2]|0;g=k[ma+(g<<4)+12>>2]|0;i[sa>>0]=1;do if((d|0)==(o|0)&(e|0)==(q|0)){ia=v-o|0;fa=w-q|0;ma=f-o|0;ja=g-q|0;ha=((ia|0)<0)<<31>>31;la=((ma|0)<0)<<31>>31;da=ne(ma|0,la|0,ia|0,ha|0)|0;ea=L;ga=((fa|0)<0)<<31>>31;ka=((ja|0)<0)<<31>>31;ca=ne(ja|0,ka|0,fa|0,ga|0)|0;ea=ge(ca|0,L|0,da|0,ea|0)|0;R=+(ea>>>0)+4294967296.0*+(L|0);ea=(ia|0)<0;da=be(0,0,ia|0,ha|0)|0;ia=ea?da:ia;ha=ea?L:ha;ea=(fa|0)<0;da=be(0,0,fa|0,ga|0)|0;fa=ea?da:fa;ga=ea?L:ga;ha=ne(ia|0,ha|0,ia|0,ha|0)|0;ia=L;ga=ne(fa|0,ga|0,fa|0,ga|0)|0;ia=ge(ga|0,L|0,ha|0,ia|0)|0;R=R/+X(+(+(ia>>>0)+4294967296.0*+(L|0)));ia=(ma|0)<0;ha=be(0,0,ma|0,la|0)|0;ma=ia?ha:ma;la=ia?L:la;ia=(ja|0)<0;ha=be(0,0,ja|0,ka|0)|0;ja=ia?ha:ja;ka=ia?L:ka;la=ne(ma|0,la|0,ma|0,la|0)|0;ma=L;ka=ne(ja|0,ka|0,ja|0,ka|0)|0;ma=ge(ka|0,L|0,la|0,ma|0)|0;if(!(R/+X(+(+(ma>>>0)+4294967296.0*+(L|0)))<=-.733459594406401))break;i[sa>>0]=0;break O}else{if((f|0)==(o|0)&(g|0)==(q|0)){ia=v-o|0;fa=w-q|0;ma=d-o|0;ja=e-q|0;ha=((ia|0)<0)<<31>>31;la=((ma|0)<0)<<31>>31;da=ne(ma|0,la|0,ia|0,ha|0)|0;ea=L;ga=((fa|0)<0)<<31>>31;ka=((ja|0)<0)<<31>>31;ca=ne(ja|0,ka|0,fa|0,ga|0)|0;ea=ge(ca|0,L|0,da|0,ea|0)|0;R=+(ea>>>0)+4294967296.0*+(L|0);ea=(ia|0)<0;da=be(0,0,ia|0,ha|0)|0;ia=ea?da:ia;ha=ea?L:ha;ea=(fa|0)<0;da=be(0,0,fa|0,ga|0)|0;fa=ea?da:fa;ga=ea?L:ga;ha=ne(ia|0,ha|0,ia|0,ha|0)|0;ia=L;ga=ne(fa|0,ga|0,fa|0,ga|0)|0;ia=ge(ga|0,L|0,ha|0,ia|0)|0;R=R/+X(+(+(ia>>>0)+4294967296.0*+(L|0)));ia=(ma|0)<0;ha=be(0,0,ma|0,la|0)|0;ma=ia?ha:ma;la=ia?L:la;ia=(ja|0)<0;ha=be(0,0,ja|0,ka|0)|0;ja=ia?ha:ja;ka=ia?L:ka;la=ne(ma|0,la|0,ma|0,la|0)|0;ma=L;ka=ne(ja|0,ka|0,ja|0,ka|0)|0;ma=ge(ka|0,L|0,la|0,ma|0)|0;if(!(R/+X(+(+(ma>>>0)+4294967296.0*+(L|0)))<=-.733459594406401))break;i[sa>>0]=0;break O}if((d|0)==(v|0)&(e|0)==(w|0)){ia=o-v|0;fa=q-w|0;ma=f-v|0;ja=g-w|0;ha=((ia|0)<0)<<31>>31;la=((ma|0)<0)<<31>>31;da=ne(ma|0,la|0,ia|0,ha|0)|0;ea=L;ga=((fa|0)<0)<<31>>31;ka=((ja|0)<0)<<31>>31;ca=ne(ja|0,ka|0,fa|0,ga|0)|0;ea=ge(ca|0,L|0,da|0,ea|0)|0;R=+(ea>>>0)+4294967296.0*+(L|0);ea=(ia|0)<0;da=be(0,0,ia|0,ha|0)|0;ia=ea?da:ia;ha=ea?L:ha;ea=(fa|0)<0;da=be(0,0,fa|0,ga|0)|0;fa=ea?da:fa;ga=ea?L:ga;ha=ne(ia|0,ha|0,ia|0,ha|0)|0;ia=L;ga=ne(fa|0,ga|0,fa|0,ga|0)|0;ia=ge(ga|0,L|0,ha|0,ia|0)|0;R=R/+X(+(+(ia>>>0)+4294967296.0*+(L|0)));ia=(ma|0)<0;ha=be(0,0,ma|0,la|0)|0;ma=ia?ha:ma;la=ia?L:la;ia=(ja|0)<0;ha=be(0,0,ja|0,ka|0)|0;ja=ia?ha:ja;ka=ia?L:ka;la=ne(ma|0,la|0,ma|0,la|0)|0;ma=L;ka=ne(ja|0,ka|0,ja|0,ka|0)|0;ma=ge(ka|0,L|0,la|0,ma|0)|0;if(!(R/+X(+(+(ma>>>0)+4294967296.0*+(L|0)))<=-.733459594406401))break;i[sa>>0]=0;break O}if(!((f|0)==(v|0)&(g|0)==(w|0)))break;ia=o-v|0;fa=q-w|0;ma=d-v|0;ja=e-w|0;ha=((ia|0)<0)<<31>>31;la=((ma|0)<0)<<31>>31;da=ne(ma|0,la|0,ia|0,ha|0)|0;ea=L;ga=((fa|0)<0)<<31>>31;ka=((ja|0)<0)<<31>>31;ca=ne(ja|0,ka|0,fa|0,ga|0)|0;ea=ge(ca|0,L|0,da|0,ea|0)|0;R=+(ea>>>0)+4294967296.0*+(L|0);ea=(ia|0)<0;da=be(0,0,ia|0,ha|0)|0;ia=ea?da:ia;ha=ea?L:ha;ea=(fa|0)<0;da=be(0,0,fa|0,ga|0)|0;fa=ea?da:fa;ga=ea?L:ga;ha=ne(ia|0,ha|0,ia|0,ha|0)|0;ia=L;ga=ne(fa|0,ga|0,fa|0,ga|0)|0;ia=ge(ga|0,L|0,ha|0,ia|0)|0;R=R/+X(+(+(ia>>>0)+4294967296.0*+(L|0)));ia=(ma|0)<0;ha=be(0,0,ma|0,la|0)|0;ma=ia?ha:ma;la=ia?L:la;ia=(ja|0)<0;ha=be(0,0,ja|0,ka|0)|0;ja=ia?ha:ja;ka=ia?L:ka;la=ne(ma|0,la|0,ma|0,la|0)|0;ma=L;ka=ne(ja|0,ka|0,ja|0,ka|0)|0;ma=ge(ka|0,L|0,la|0,ma|0)|0;if(!(R/+X(+(+(ma>>>0)+4294967296.0*+(L|0)))<=-.733459594406401))break;i[sa>>0]=0;break O}while(0);if(!(i[sa>>0]|0))break;d=k[A+8>>2]&31;if((d+-1|0)>>>0>=2){c=+(v-o|0);R=+(w-q|0);P=+X(+(c*c+R*R));c=c/P;P=R/P;R=+(o-C|0);N=+(q-B|0);h=R*c+N*P;R=R-c*h;h=N-P*h;N=+(o-J|0);O=+(q-I|0);s=N*c+O*P;c=N-c*s;s=O-P*s;s=+X(+(c*c+s*s));c=+$(+aa);h=+X(+(R*R+h*h))/c;p[t>>3]=h;d=k[t+4>>2]|0;e=de(k[t>>2]|0,d|0,52)|0;e=e&2047;do if(e>>>0<=1074){d=(d|0)<0;m=d?-h:h;if(e>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=d?-h:h}while(0);g=0-~~h|0;h=s/c;p[t>>3]=h;d=k[t+4>>2]|0;e=de(k[t>>2]|0,d|0,52)|0;e=e&2047;do if(e>>>0<=1074){d=(d|0)<0;m=d?-h:h;if(e>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=d?-h:h}while(0);f=0-~~h|0;do if((J|0)>=(C|0)){if((J|0)!=(C|0)){e=J;n=I;u=f;d=1;q=C;o=B;na=739;break}if((I|0)>=(B|0)){e=C;n=I;q=C;o=B;d=1;na=740}else{e=C;n=B;u=g;d=-1;q=J;o=I;g=f;na=739}}else{e=C;n=B;u=g;d=-1;q=J;o=I;g=f;na=739}while(0);if((na|0)==739){na=0;if((q|0)==(e|0)){f=u;na=740}else{A=e;z=n;f=u;x=g}}if((na|0)==740){na=0;A=e;z=n;d=0-d|0;x=g}e=k[S>>2]|0;g=k[K>>2]|0;if(e>>>0<g>>>0){i[e>>0]=0;i[e+1>>0]=0;i[e+2>>0]=0;k[e+4>>2]=0;k[e+8>>2]=0;k[e+12>>2]=0;k[e+16>>2]=q;k[e+20>>2]=o;k[e+24>>2]=x;k[e+28>>2]=A;k[e+32>>2]=z;k[e+36>>2]=f;k[e+40>>2]=d;k[S>>2]=e+44;break}y=k[a>>2]|0;n=y;u=e-n|0;v=(u|0)/44|0;w=v+1|0;if(w>>>0>97612893){na=744;break N}e=(g-n|0)/44|0;if(e>>>0<48806446){e=e<<1;e=e>>>0<w>>>0?w:e;if(!e){e=0;g=0}else na=747}else{e=97612893;na=747}if((na|0)==747){na=0;n=e*44|0;n=(n|0)==0?1:n;g=_d(n)|0;if(!g)do{g=k[35]|0;k[35]=g+0;if(!g){na=750;break N}Xa[g&0]();g=_d(n)|0}while((g|0)==0)}ma=g+(v*44|0)|0;i[ma>>0]=0;i[ma+1>>0]=0;i[ma+2>>0]=0;k[ma+4>>2]=0;k[ma+8>>2]=0;k[ma+12>>2]=0;k[ma+16>>2]=q;k[ma+20>>2]=o;k[ma+24>>2]=x;k[ma+28>>2]=A;k[ma+32>>2]=z;k[ma+36>>2]=f;k[ma+40>>2]=d;ma=g+((((u|0)/-44|0)+v|0)*44|0)|0;fe(ma|0,y|0,u|0)|0;k[a>>2]=ma;k[S>>2]=g+(w*44|0);k[K>>2]=g+(e*44|0);if(!y)break;$d(y);break}E=(d|0)==1;F=k[(E?n:u)>>2]|0;E=k[(E?x:y)>>2]|0;P=+(C|0);N=+(J-C|0);O=+(B|0);c=+(I-B|0);M=+$(+aa);A=0;B=0;C=0;D=0;while(1){s=+(C|0);h=P+N*s/20.0;p[t>>3]=h;d=k[t+4>>2]|0;e=de(k[t>>2]|0,d|0,52)|0;e=e&2047;do if(e>>>0<=1074){d=(d|0)<0;m=d?-h:h;if(e>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=d?-h:h}while(0);f=A;A=~~h;h=O+c*s/20.0;p[t>>3]=h;d=k[t+4>>2]|0;e=de(k[t>>2]|0,d|0,52)|0;e=e&2047;do if(e>>>0<=1074){d=(d|0)<0;m=d?-h:h;if(e>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=d?-h:h}while(0);z=B;B=~~h;R=+(A-F|0);h=+(B-E|0);h=+X(+(R*R+h*h))/M;p[t>>3]=h;d=k[t+4>>2]|0;e=de(k[t>>2]|0,d|0,52)|0;e=e&2047;do if(e>>>0<=1074){d=(d|0)<0;m=d?-h:h;if(e>>>0<1022){h=h*0.0;break}l=m+4503599627370496.0+-4503599627370496.0-m;do if(l>.5)h=m+l+-1.0;else{h=m+l;if(!(l<=-.5))break;h=h+1.0}while(0);h=d?-h:h}while(0);o=D;D=0-~~h|0;if(!C){C=1;continue}q=k[S>>2]|0;d=k[K>>2]|0;do if(q>>>0<d>>>0){i[q>>0]=0;i[q+1>>0]=0;i[q+2>>0]=0;k[q+4>>2]=0;k[q+8>>2]=0;k[q+12>>2]=0;e=q+16|0;g=q+16|0;k[g>>2]=f;k[q+20>>2]=z;k[q+24>>2]=o;d=q+28|0;n=q+28|0;k[n>>2]=A;k[q+32>>2]=B;k[q+36>>2]=D;o=q+40|0;k[o>>2]=1;do if((f|0)<=(A|0)){if((f|0)!=(A|0)){e=A;d=1;na=699;break}if((z|0)<=(B|0)){d=1;na=700}else na=698}else na=698;while(0);if((na|0)==698){k[oa>>2]=k[e>>2];k[oa+4>>2]=k[e+4>>2];k[oa+8>>2]=k[e+8>>2];k[e>>2]=k[d>>2];k[e+4>>2]=k[d+4>>2];k[e+8>>2]=k[d+8>>2];k[d>>2]=k[oa>>2];k[d+4>>2]=k[oa+4>>2];k[d+8>>2]=k[oa+8>>2];k[o>>2]=-1;f=k[g>>2]|0;e=k[n>>2]|0;d=-1;na=699}if((na|0)==699?(na=0,(f|0)==(e|0)):0)na=700;if((na|0)==700){na=0;k[o>>2]=0-d}k[S>>2]=q+44}else{y=k[a>>2]|0;e=y;v=q-e|0;w=(v|0)/44|0;x=w+1|0;if(x>>>0>97612893){na=703;break N}d=(d-e|0)/44|0;if(d>>>0<48806446){d=d<<1;d=d>>>0<x>>>0?x:d;if(!d){d=0;e=0}else na=706}else{d=97612893;na=706}if((na|0)==706){g=d*44|0;g=(g|0)==0?1:g;e=_d(g)|0;if(!e)do{e=k[35]|0;k[35]=e+0;if(!e){na=709;break N}Xa[e&0]();e=_d(g)|0}while((e|0)==0)}u=e+(d*44|0)|0;i[e+(w*44|0)>>0]=0;i[e+(w*44|0)+1>>0]=0;i[e+(w*44|0)+2>>0]=0;k[e+(w*44|0)+4>>2]=0;k[e+(w*44|0)+8>>2]=0;k[e+(w*44|0)+12>>2]=0;n=e+(w*44|0)+16|0;k[n>>2]=f;k[e+(w*44|0)+20>>2]=z;k[e+(w*44|0)+24>>2]=o;d=e+(w*44|0)+28|0;k[d>>2]=A;k[e+(w*44|0)+32>>2]=B;k[e+(w*44|0)+36>>2]=D;q=e+(w*44|0)+40|0;k[q>>2]=1;g=e+(w*44|0)+16|0;o=e+(w*44|0)+28|0;do if((f|0)<=(A|0)){if((f|0)!=(A|0)){g=A;d=1;na=715;break}if((z|0)<=(B|0)){d=1;na=716}else na=714}else na=714;while(0);if((na|0)==714){k[oa>>2]=k[n>>2];k[oa+4>>2]=k[n+4>>2];k[oa+8>>2]=k[n+8>>2];k[n>>2]=k[d>>2];k[n+4>>2]=k[d+4>>2];k[n+8>>2]=k[d+8>>2];k[d>>2]=k[oa>>2];k[d+4>>2]=k[oa+4>>2];k[d+8>>2]=k[oa+8>>2];k[q>>2]=-1;f=k[g>>2]|0;g=k[o>>2]|0;d=-1;na=715}if((na|0)==715?(na=0,(f|0)==(g|0)):0)na=716;if((na|0)==716){na=0;k[q>>2]=0-d}ma=e+((((v|0)/-44|0)+w|0)*44|0)|0;fe(ma|0,y|0,v|0)|0;k[a>>2]=ma;k[S>>2]=e+(x*44|0);k[K>>2]=u;if(!y)break;$d(y)}while(0);C=C+1|0;if((C|0)>=21)break}}while(0);Q=Q+44|0;if((Q|0)==(T|0)){na=827;break}}if((na|0)==703)xa(1340,1363,303,1438);else if((na|0)==709){Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}else if((na|0)==744)xa(1340,1363,303,1438);else if((na|0)==750){Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}else if((na|0)==809)xa(1340,1363,303,1438);else if((na|0)==815){Aa=ya(4)|0;k[Aa>>2]=128;La(Aa|0,8,1)}else if((na|0)==827){pa=k[S>>2]|0;qa=k[a>>2]|0;break}}else{pa=0;qa=0}while(0);k[ua>>2]=(pa-qa|0)/44|0;Nd(1113,ua);if(ta)$d(U);Bc(ra);d=k[Y>>2]|0;e=d;if(d){f=k[Z>>2]|0;if((f|0)!=(d|0))k[Z>>2]=f+(~(((f+-24-e|0)>>>0)/24|0)*24|0);$d(d)}d=k[V>>2]|0;e=d;if(d){f=k[W>>2]|0;if((f|0)!=(d|0))k[W>>2]=f+(~(((f+-24-e|0)>>>0)/24|0)*24|0);$d(d)}f=k[va>>2]|0;g=f;if(f){d=va+4|0;e=k[d>>2]|0;if((e|0)!=(f|0))k[d>>2]=e+(~(((e+-12-g|0)>>>0)/12|0)*12|0);$d(f)}d=k[wa>>2]|0;if(!d){r=Aa;return}e=k[za>>2]|0;if((e|0)!=(d|0))k[za>>2]=e+(~((e+-16-d|0)>>>4)<<4);$d(d);r=Aa;return}function nc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0;t=r;r=r+32|0;j=t+12|0;l=t;n=a+4|0;o=k[a>>2]|0;f=o;p=(k[n>>2]|0)-f|0;q=p>>5;s=q+1|0;if(s>>>0>134217727)xa(1340,1363,303,1438);m=a+8|0;f=(k[m>>2]|0)-f|0;if(f>>5>>>0<67108863){f=f>>4;f=f>>>0<s>>>0?s:f;if(!f){f=0;g=0}else h=5}else{f=134217727;h=5}if((h|0)==5){h=f<<5;h=(h|0)==0?1:h;g=_d(h)|0;a:do if(!g){while(1){g=k[35]|0;k[35]=g+0;if(!g)break;Xa[g&0]();g=_d(h)|0;if(g)break a}t=ya(4)|0;k[t>>2]=128;La(t|0,8,1)}while(0)}h=g+(q<<5)|0;k[j>>2]=k[b>>2];k[j+4>>2]=k[b+4>>2];k[j+8>>2]=k[b+8>>2];k[l>>2]=k[c>>2];k[l+4>>2]=k[c+4>>2];k[l+8>>2]=k[c+8>>2];d=i[d>>0]|0;e=k[e>>2]|0;k[h>>2]=k[j>>2];k[h+4>>2]=k[j+4>>2];k[h+8>>2]=k[j+8>>2];c=g+(q<<5)+12|0;k[c>>2]=k[l>>2];k[c+4>>2]=k[l+4>>2];k[c+8>>2]=k[l+8>>2];k[g+(q<<5)+24>>2]=e;i[g+(q<<5)+28>>0]=d;i[g+(q<<5)+29>>0]=0;fe(g|0,o|0,p|0)|0;k[a>>2]=g;k[n>>2]=g+(s<<5);k[m>>2]=g+(f<<5);if(!o){r=t;return}$d(o);r=t;return}function oc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0;w=r;r=r+64|0;v=w+24|0;u=w;a:while(1){n=b;p=b+-32|0;o=b+-64|0;q=b+-28|0;s=a;b:while(1){m=s;a=n-m|0;c=a>>5;switch(c|0){case 2:{h=4;break a}case 3:{h=8;break a}case 4:{h=26;break a}case 5:{h=27;break a}case 1:case 0:{h=136;break a}default:{}}if((a|0)<992){h=29;break a}e=(c|0)/2|0;f=s+(e<<5)|0;do if((a|0)>31968){a=(c|0)/4|0;c=f;l=s;a=wc(s,s+(a<<5)|0,f,s+(a+e<<5)|0,p)|0}else{c=k[f>>2]|0;a=k[s>>2]|0;if((c|0)>=(a|0))if((c|0)==(a|0))d=(k[s+(e<<5)+4>>2]|0)<(k[s+4>>2]|0);else d=0;else d=1;a=k[p>>2]|0;if((a|0)>=(c|0))if((a|0)==(c|0))a=(k[q>>2]|0)<(k[s+(e<<5)+4>>2]|0);else a=0;else a=1;if(!d){if(!a){c=f;l=s;a=0;break};k[v>>2]=k[f>>2];k[v+4>>2]=k[f+4>>2];k[v+8>>2]=k[f+8>>2];k[v+12>>2]=k[f+12>>2];k[v+16>>2]=k[f+16>>2];k[v+20>>2]=k[f+20>>2];k[v+24>>2]=k[f+24>>2];k[v+28>>2]=k[f+28>>2];k[f>>2]=k[p>>2];k[f+4>>2]=k[p+4>>2];k[f+8>>2]=k[p+8>>2];k[f+12>>2]=k[p+12>>2];k[f+16>>2]=k[p+16>>2];k[f+20>>2]=k[p+20>>2];k[f+24>>2]=k[p+24>>2];j[f+28>>1]=j[p+28>>1]|0;k[p>>2]=k[v>>2];k[p+4>>2]=k[v+4>>2];k[p+8>>2]=k[v+8>>2];k[p+12>>2]=k[v+12>>2];k[p+16>>2]=k[v+16>>2];k[p+20>>2]=k[v+20>>2];k[p+24>>2]=k[v+24>>2];j[p+28>>1]=j[v+28>>1]|0;a=k[f>>2]|0;c=k[s>>2]|0;if((a|0)>=(c|0)){if((a|0)!=(c|0)){c=f;l=s;a=1;break}if((k[s+(e<<5)+4>>2]|0)>=(k[s+4>>2]|0)){c=f;l=s;a=1;break}};k[v>>2]=k[s>>2];k[v+4>>2]=k[s+4>>2];k[v+8>>2]=k[s+8>>2];k[v+12>>2]=k[s+12>>2];k[v+16>>2]=k[s+16>>2];k[v+20>>2]=k[s+20>>2];k[v+24>>2]=k[s+24>>2];k[v+28>>2]=k[s+28>>2];k[s>>2]=k[f>>2];k[s+4>>2]=k[f+4>>2];k[s+8>>2]=k[f+8>>2];k[s+12>>2]=k[f+12>>2];k[s+16>>2]=k[f+16>>2];k[s+20>>2]=k[f+20>>2];k[s+24>>2]=k[f+24>>2];j[s+28>>1]=j[f+28>>1]|0;k[f>>2]=k[v>>2];k[f+4>>2]=k[v+4>>2];k[f+8>>2]=k[v+8>>2];k[f+12>>2]=k[v+12>>2];k[f+16>>2]=k[v+16>>2];k[f+20>>2]=k[v+20>>2];k[f+24>>2]=k[v+24>>2];j[f+28>>1]=j[v+28>>1]|0;c=f;l=s;a=2;break};k[v>>2]=k[s>>2];k[v+4>>2]=k[s+4>>2];k[v+8>>2]=k[s+8>>2];k[v+12>>2]=k[s+12>>2];k[v+16>>2]=k[s+16>>2];k[v+20>>2]=k[s+20>>2];k[v+24>>2]=k[s+24>>2];k[v+28>>2]=k[s+28>>2];if(a){k[s>>2]=k[p>>2];k[s+4>>2]=k[p+4>>2];k[s+8>>2]=k[p+8>>2];k[s+12>>2]=k[p+12>>2];k[s+16>>2]=k[p+16>>2];k[s+20>>2]=k[p+20>>2];k[s+24>>2]=k[p+24>>2];j[s+28>>1]=j[p+28>>1]|0;k[p>>2]=k[v>>2];k[p+4>>2]=k[v+4>>2];k[p+8>>2]=k[v+8>>2];k[p+12>>2]=k[v+12>>2];k[p+16>>2]=k[v+16>>2];k[p+20>>2]=k[v+20>>2];k[p+24>>2]=k[v+24>>2];j[p+28>>1]=j[v+28>>1]|0;c=f;l=s;a=1;break};k[s>>2]=k[f>>2];k[s+4>>2]=k[f+4>>2];k[s+8>>2]=k[f+8>>2];k[s+12>>2]=k[f+12>>2];k[s+16>>2]=k[f+16>>2];k[s+20>>2]=k[f+20>>2];k[s+24>>2]=k[f+24>>2];j[s+28>>1]=j[f+28>>1]|0;k[f>>2]=k[v>>2];k[f+4>>2]=k[v+4>>2];k[f+8>>2]=k[v+8>>2];k[f+12>>2]=k[v+12>>2];k[f+16>>2]=k[v+16>>2];k[f+20>>2]=k[v+20>>2];k[f+24>>2]=k[v+24>>2];j[f+28>>1]=j[v+28>>1]|0;a=k[p>>2]|0;c=k[f>>2]|0;if((a|0)>=(c|0)){if((a|0)!=(c|0)){c=f;l=s;a=1;break}if((k[q>>2]|0)>=(k[s+(e<<5)+4>>2]|0)){c=f;l=s;a=1;break}};k[v>>2]=k[f>>2];k[v+4>>2]=k[f+4>>2];k[v+8>>2]=k[f+8>>2];k[v+12>>2]=k[f+12>>2];k[v+16>>2]=k[f+16>>2];k[v+20>>2]=k[f+20>>2];k[v+24>>2]=k[f+24>>2];k[v+28>>2]=k[f+28>>2];k[f>>2]=k[p>>2];k[f+4>>2]=k[p+4>>2];k[f+8>>2]=k[p+8>>2];k[f+12>>2]=k[p+12>>2];k[f+16>>2]=k[p+16>>2];k[f+20>>2]=k[p+20>>2];k[f+24>>2]=k[p+24>>2];j[f+28>>1]=j[p+28>>1]|0;k[p>>2]=k[v>>2];k[p+4>>2]=k[v+4>>2];k[p+8>>2]=k[v+8>>2];k[p+12>>2]=k[v+12>>2];k[p+16>>2]=k[v+16>>2];k[p+20>>2]=k[v+20>>2];k[p+24>>2]=k[v+24>>2];j[p+28>>1]=j[v+28>>1]|0;c=f;l=s;a=2}while(0);i=k[l>>2]|0;h=k[c>>2]|0;c:do if((i|0)<(h|0))d=p;else{if((i|0)==(h|0)?(k[s+4>>2]|0)<(k[s+(e<<5)+4>>2]|0):0){d=p;break}d:do if((s|0)!=(o|0)){g=s+(e<<5)+4|0;d=o;e=p;while(1){c=k[d>>2]|0;if((c|0)<(h|0))break;if((c|0)==(h|0)?(k[e+-28>>2]|0)<(k[g>>2]|0):0)break;c=d+-32|0;if((s|0)==(c|0))break d;else{e=d;d=c}}k[v>>2]=k[s>>2];k[v+4>>2]=k[s+4>>2];k[v+8>>2]=k[s+8>>2];k[v+12>>2]=k[s+12>>2];k[v+16>>2]=k[s+16>>2];k[v+20>>2]=k[s+20>>2];k[v+24>>2]=k[s+24>>2];k[v+28>>2]=k[s+28>>2];k[s>>2]=k[d>>2];k[s+4>>2]=k[d+4>>2];k[s+8>>2]=k[d+8>>2];k[s+12>>2]=k[d+12>>2];k[s+16>>2]=k[d+16>>2];k[s+20>>2]=k[d+20>>2];k[s+24>>2]=k[d+24>>2];j[s+28>>1]=j[d+28>>1]|0;k[d>>2]=k[v>>2];k[d+4>>2]=k[v+4>>2];k[d+8>>2]=k[v+8>>2];k[d+12>>2]=k[v+12>>2];k[d+16>>2]=k[v+16>>2];k[d+20>>2]=k[v+20>>2];k[d+24>>2]=k[v+24>>2];j[d+28>>1]=j[v+28>>1]|0;a=a+1|0;break c}while(0);a=s+32|0;c=k[p>>2]|0;do if((i|0)>=(c|0)){if((i|0)==(c|0)?(k[s+4>>2]|0)<(k[q>>2]|0):0)break;if((a|0)==(p|0)){h=136;break a}e=s+4|0;d=s;while(1){c=k[d+32>>2]|0;if((i|0)<(c|0))break;if((i|0)==(c|0)?(k[e>>2]|0)<(k[d+36>>2]|0):0)break;c=a+32|0;if((c|0)==(p|0)){h=136;break a}else{d=a;a=c}}k[v>>2]=k[a>>2];k[v+4>>2]=k[a+4>>2];k[v+8>>2]=k[a+8>>2];k[v+12>>2]=k[a+12>>2];k[v+16>>2]=k[a+16>>2];k[v+20>>2]=k[a+20>>2];k[v+24>>2]=k[a+24>>2];k[v+28>>2]=k[a+28>>2];k[a>>2]=k[p>>2];k[a+4>>2]=k[p+4>>2];k[a+8>>2]=k[p+8>>2];k[a+12>>2]=k[p+12>>2];k[a+16>>2]=k[p+16>>2];k[a+20>>2]=k[p+20>>2];k[a+24>>2]=k[p+24>>2];j[a+28>>1]=j[p+28>>1]|0;k[p>>2]=k[v>>2];k[p+4>>2]=k[v+4>>2];k[p+8>>2]=k[v+8>>2];k[p+12>>2]=k[v+12>>2];k[p+16>>2]=k[v+16>>2];k[p+20>>2]=k[v+20>>2];k[p+24>>2]=k[v+24>>2];j[p+28>>1]=j[v+28>>1]|0;a=d+64|0}while(0);if((a|0)==(p|0)){h=136;break a}g=s+4|0;e=p;while(1){f=k[l>>2]|0;c=k[a>>2]|0;e:do if((f|0)>=(c|0))do{if((f|0)==(c|0)?(k[g>>2]|0)<(k[a+4>>2]|0):0)break e;a=a+32|0;c=k[a>>2]|0}while((f|0)>=(c|0));while(0);while(1){d=e;e=e+-32|0;c=k[e>>2]|0;if((f|0)<(c|0))continue;if((f|0)!=(c|0))break;if((k[g>>2]|0)>=(k[d+-28>>2]|0))break}if(a>>>0>=e>>>0){s=a;continue b};k[v>>2]=k[a>>2];k[v+4>>2]=k[a+4>>2];k[v+8>>2]=k[a+8>>2];k[v+12>>2]=k[a+12>>2];k[v+16>>2]=k[a+16>>2];k[v+20>>2]=k[a+20>>2];k[v+24>>2]=k[a+24>>2];k[v+28>>2]=k[a+28>>2];k[a>>2]=k[e>>2];k[a+4>>2]=k[e+4>>2];k[a+8>>2]=k[e+8>>2];k[a+12>>2]=k[e+12>>2];k[a+16>>2]=k[e+16>>2];k[a+20>>2]=k[e+20>>2];k[a+24>>2]=k[e+24>>2];j[a+28>>1]=j[e+28>>1]|0;k[e>>2]=k[v>>2];k[e+4>>2]=k[v+4>>2];k[e+8>>2]=k[v+8>>2];k[e+12>>2]=k[v+12>>2];k[e+16>>2]=k[v+16>>2];k[e+20>>2]=k[v+20>>2];k[e+24>>2]=k[v+24>>2];j[e+28>>1]=j[v+28>>1]|0;a=a+32|0}}while(0);c=s+32|0;f:do if(c>>>0<d>>>0){e=d;while(1){g=k[f>>2]|0;h=f+4|0;i=c;while(1){c=k[i>>2]|0;if((c|0)>=(g|0)){if((c|0)!=(g|0))break;if((k[i+4>>2]|0)>=(k[h>>2]|0))break}i=i+32|0}d=e+-32|0;c=k[d>>2]|0;g:do if((c|0)>=(g|0))while(1){if((c|0)==(g|0)?(k[e+-28>>2]|0)<(k[h>>2]|0):0)break g;e=d+-32|0;c=k[e>>2]|0;if((c|0)<(g|0)){d=e;break}else{l=d;d=e;e=l}}while(0);if(i>>>0>d>>>0){c=i;break f};k[v>>2]=k[i>>2];k[v+4>>2]=k[i+4>>2];k[v+8>>2]=k[i+8>>2];k[v+12>>2]=k[i+12>>2];k[v+16>>2]=k[i+16>>2];k[v+20>>2]=k[i+20>>2];k[v+24>>2]=k[i+24>>2];k[v+28>>2]=k[i+28>>2];k[i>>2]=k[d>>2];k[i+4>>2]=k[d+4>>2];k[i+8>>2]=k[d+8>>2];k[i+12>>2]=k[d+12>>2];k[i+16>>2]=k[d+16>>2];k[i+20>>2]=k[d+20>>2];k[i+24>>2]=k[d+24>>2];j[i+28>>1]=j[d+28>>1]|0;k[d>>2]=k[v>>2];k[d+4>>2]=k[v+4>>2];k[d+8>>2]=k[v+8>>2];k[d+12>>2]=k[v+12>>2];k[d+16>>2]=k[v+16>>2];k[d+20>>2]=k[v+20>>2];k[d+24>>2]=k[v+24>>2];j[d+28>>1]=j[v+28>>1]|0;c=i+32|0;e=d;f=(f|0)==(i|0)?d:f;a=a+1|0}}while(0);do if((c|0)!=(f|0)){d=k[f>>2]|0;e=k[c>>2]|0;if((d|0)>=(e|0)){if((d|0)!=(e|0))break;if((k[f+4>>2]|0)>=(k[c+4>>2]|0))break};k[v>>2]=k[c>>2];k[v+4>>2]=k[c+4>>2];k[v+8>>2]=k[c+8>>2];k[v+12>>2]=k[c+12>>2];k[v+16>>2]=k[c+16>>2];k[v+20>>2]=k[c+20>>2];k[v+24>>2]=k[c+24>>2];k[v+28>>2]=k[c+28>>2];k[c>>2]=k[f>>2];k[c+4>>2]=k[f+4>>2];k[c+8>>2]=k[f+8>>2];k[c+12>>2]=k[f+12>>2];k[c+16>>2]=k[f+16>>2];k[c+20>>2]=k[f+20>>2];k[c+24>>2]=k[f+24>>2];j[c+28>>1]=j[f+28>>1]|0;k[f>>2]=k[v>>2];k[f+4>>2]=k[v+4>>2];k[f+8>>2]=k[v+8>>2];k[f+12>>2]=k[v+12>>2];k[f+16>>2]=k[v+16>>2];k[f+20>>2]=k[v+20>>2];k[f+24>>2]=k[v+24>>2];j[f+28>>1]=j[v+28>>1]|0;a=a+1|0}while(0);if(!a){d=xc(s,c)|0;a=c+32|0;if(xc(a,b)|0){h=131;break}if(d){s=a;continue}}l=c;if((l-m|0)>=(n-l|0)){h=135;break}oc(s,c);s=c+32|0}if((h|0)==131)if(d){h=136;break}else{a=s;b=c;continue}else if((h|0)==135){oc(c+32|0,b);a=s;b=c;continue}}if((h|0)==4){a=k[p>>2]|0;b=k[s>>2]|0;if((a|0)>=(b|0)){if((a|0)!=(b|0)){r=w;return}if((k[q>>2]|0)>=(k[s+4>>2]|0)){r=w;return}};k[v>>2]=k[s>>2];k[v+4>>2]=k[s+4>>2];k[v+8>>2]=k[s+8>>2];k[v+12>>2]=k[s+12>>2];k[v+16>>2]=k[s+16>>2];k[v+20>>2]=k[s+20>>2];k[v+24>>2]=k[s+24>>2];k[v+28>>2]=k[s+28>>2];k[s>>2]=k[p>>2];k[s+4>>2]=k[p+4>>2];k[s+8>>2]=k[p+8>>2];k[s+12>>2]=k[p+12>>2];k[s+16>>2]=k[p+16>>2];k[s+20>>2]=k[p+20>>2];k[s+24>>2]=k[p+24>>2];j[s+28>>1]=j[p+28>>1]|0;k[p>>2]=k[v>>2];k[p+4>>2]=k[v+4>>2];k[p+8>>2]=k[v+8>>2];k[p+12>>2]=k[v+12>>2];k[p+16>>2]=k[v+16>>2];k[p+20>>2]=k[v+20>>2];k[p+24>>2]=k[v+24>>2];j[p+28>>1]=j[v+28>>1]|0;r=w;return}else if((h|0)==8){d=s+32|0;b=k[d>>2]|0;a=k[s>>2]|0;if((b|0)>=(a|0))if((b|0)==(a|0))c=(k[s+36>>2]|0)<(k[s+4>>2]|0);else c=0;else c=1;a=k[p>>2]|0;if((a|0)>=(b|0))if((a|0)==(b|0))a=(k[q>>2]|0)<(k[s+36>>2]|0);else a=0;else a=1;if(!c){if(!a){r=w;return};k[v>>2]=k[d>>2];k[v+4>>2]=k[d+4>>2];k[v+8>>2]=k[d+8>>2];k[v+12>>2]=k[d+12>>2];k[v+16>>2]=k[d+16>>2];k[v+20>>2]=k[d+20>>2];k[v+24>>2]=k[d+24>>2];k[v+28>>2]=k[d+28>>2];k[d>>2]=k[p>>2];k[d+4>>2]=k[p+4>>2];k[d+8>>2]=k[p+8>>2];k[d+12>>2]=k[p+12>>2];k[d+16>>2]=k[p+16>>2];k[d+20>>2]=k[p+20>>2];k[d+24>>2]=k[p+24>>2];j[d+28>>1]=j[p+28>>1]|0;k[p>>2]=k[v>>2];k[p+4>>2]=k[v+4>>2];k[p+8>>2]=k[v+8>>2];k[p+12>>2]=k[v+12>>2];k[p+16>>2]=k[v+16>>2];k[p+20>>2]=k[v+20>>2];k[p+24>>2]=k[v+24>>2];j[p+28>>1]=j[v+28>>1]|0;a=k[d>>2]|0;b=k[s>>2]|0;if((a|0)>=(b|0)){if((a|0)!=(b|0)){r=w;return}if((k[s+36>>2]|0)>=(k[s+4>>2]|0)){r=w;return}};k[v>>2]=k[s>>2];k[v+4>>2]=k[s+4>>2];k[v+8>>2]=k[s+8>>2];k[v+12>>2]=k[s+12>>2];k[v+16>>2]=k[s+16>>2];k[v+20>>2]=k[s+20>>2];k[v+24>>2]=k[s+24>>2];k[v+28>>2]=k[s+28>>2];k[s>>2]=k[d>>2];k[s+4>>2]=k[d+4>>2];k[s+8>>2]=k[d+8>>2];k[s+12>>2]=k[d+12>>2];k[s+16>>2]=k[d+16>>2];k[s+20>>2]=k[d+20>>2];k[s+24>>2]=k[d+24>>2];j[s+28>>1]=j[d+28>>1]|0;k[d>>2]=k[v>>2];k[d+4>>2]=k[v+4>>2];k[d+8>>2]=k[v+8>>2];k[d+12>>2]=k[v+12>>2];k[d+16>>2]=k[v+16>>2];k[d+20>>2]=k[v+20>>2];k[d+24>>2]=k[v+24>>2];j[d+28>>1]=j[v+28>>1]|0;r=w;return};k[v>>2]=k[s>>2];k[v+4>>2]=k[s+4>>2];k[v+8>>2]=k[s+8>>2];k[v+12>>2]=k[s+12>>2];k[v+16>>2]=k[s+16>>2];k[v+20>>2]=k[s+20>>2];k[v+24>>2]=k[s+24>>2];k[v+28>>2]=k[s+28>>2];if(a){k[s>>2]=k[p>>2];k[s+4>>2]=k[p+4>>2];k[s+8>>2]=k[p+8>>2];k[s+12>>2]=k[p+12>>2];k[s+16>>2]=k[p+16>>2];k[s+20>>2]=k[p+20>>2];k[s+24>>2]=k[p+24>>2];j[s+28>>1]=j[p+28>>1]|0;k[p>>2]=k[v>>2];k[p+4>>2]=k[v+4>>2];k[p+8>>2]=k[v+8>>2];k[p+12>>2]=k[v+12>>2];k[p+16>>2]=k[v+16>>2];k[p+20>>2]=k[v+20>>2];k[p+24>>2]=k[v+24>>2];j[p+28>>1]=j[v+28>>1]|0;r=w;return};k[s>>2]=k[d>>2];k[s+4>>2]=k[d+4>>2];k[s+8>>2]=k[d+8>>2];k[s+12>>2]=k[d+12>>2];k[s+16>>2]=k[d+16>>2];k[s+20>>2]=k[d+20>>2];k[s+24>>2]=k[d+24>>2];j[s+28>>1]=j[d+28>>1]|0;k[d>>2]=k[v>>2];k[d+4>>2]=k[v+4>>2];k[d+8>>2]=k[v+8>>2];k[d+12>>2]=k[v+12>>2];k[d+16>>2]=k[v+16>>2];k[d+20>>2]=k[v+20>>2];k[d+24>>2]=k[v+24>>2];j[d+28>>1]=j[v+28>>1]|0;a=k[p>>2]|0;b=k[d>>2]|0;if((a|0)>=(b|0)){if((a|0)!=(b|0)){r=w;return}if((k[q>>2]|0)>=(k[s+36>>2]|0)){r=w;return}};k[v>>2]=k[d>>2];k[v+4>>2]=k[d+4>>2];k[v+8>>2]=k[d+8>>2];k[v+12>>2]=k[d+12>>2];k[v+16>>2]=k[d+16>>2];k[v+20>>2]=k[d+20>>2];k[v+24>>2]=k[d+24>>2];k[v+28>>2]=k[d+28>>2];k[d>>2]=k[p>>2];k[d+4>>2]=k[p+4>>2];k[d+8>>2]=k[p+8>>2];k[d+12>>2]=k[p+12>>2];k[d+16>>2]=k[p+16>>2];k[d+20>>2]=k[p+20>>2];k[d+24>>2]=k[p+24>>2];j[d+28>>1]=j[p+28>>1]|0;k[p>>2]=k[v>>2];k[p+4>>2]=k[v+4>>2];k[p+8>>2]=k[v+8>>2];k[p+12>>2]=k[v+12>>2];k[p+16>>2]=k[v+16>>2];k[p+20>>2]=k[v+20>>2];k[p+24>>2]=k[v+24>>2];j[p+28>>1]=j[v+28>>1]|0;r=w;return}else if((h|0)==26){vc(s,s+32|0,s+64|0,p)|0;r=w;return}else if((h|0)==27){wc(s,s+32|0,s+64|0,s+96|0,p)|0;r=w;return}else if((h|0)==29){c=s+64|0;g=s+32|0;a=k[g>>2]|0;e=k[s>>2]|0;if((a|0)>=(e|0))if((a|0)==(e|0))d=(k[s+36>>2]|0)<(k[s+4>>2]|0);else d=0;else d=1;f=k[c>>2]|0;if((f|0)>=(a|0))if((f|0)==(a|0))a=(k[s+68>>2]|0)<(k[s+36>>2]|0);else a=0;else a=1;do if(!d){if(a){k[v>>2]=k[g>>2];k[v+4>>2]=k[g+4>>2];k[v+8>>2]=k[g+8>>2];k[v+12>>2]=k[g+12>>2];k[v+16>>2]=k[g+16>>2];k[v+20>>2]=k[g+20>>2];k[v+24>>2]=k[g+24>>2];k[v+28>>2]=k[g+28>>2];k[g>>2]=k[c>>2];k[g+4>>2]=k[c+4>>2];k[g+8>>2]=k[c+8>>2];k[g+12>>2]=k[c+12>>2];k[g+16>>2]=k[c+16>>2];k[g+20>>2]=k[c+20>>2];k[g+24>>2]=k[c+24>>2];j[g+28>>1]=j[c+28>>1]|0;k[c>>2]=k[v>>2];k[c+4>>2]=k[v+4>>2];k[c+8>>2]=k[v+8>>2];k[c+12>>2]=k[v+12>>2];k[c+16>>2]=k[v+16>>2];k[c+20>>2]=k[v+20>>2];k[c+24>>2]=k[v+24>>2];j[c+28>>1]=j[v+28>>1]|0;a=k[g>>2]|0;if((a|0)>=(e|0)){if((a|0)!=(e|0))break;if((k[s+36>>2]|0)>=(k[s+4>>2]|0))break};k[v>>2]=k[s>>2];k[v+4>>2]=k[s+4>>2];k[v+8>>2]=k[s+8>>2];k[v+12>>2]=k[s+12>>2];k[v+16>>2]=k[s+16>>2];k[v+20>>2]=k[s+20>>2];k[v+24>>2]=k[s+24>>2];k[v+28>>2]=k[s+28>>2];k[s>>2]=k[g>>2];k[s+4>>2]=k[g+4>>2];k[s+8>>2]=k[g+8>>2];k[s+12>>2]=k[g+12>>2];k[s+16>>2]=k[g+16>>2];k[s+20>>2]=k[g+20>>2];k[s+24>>2]=k[g+24>>2];j[s+28>>1]=j[g+28>>1]|0;k[g>>2]=k[v>>2];k[g+4>>2]=k[v+4>>2];k[g+8>>2]=k[v+8>>2];k[g+12>>2]=k[v+12>>2];k[g+16>>2]=k[v+16>>2];k[g+20>>2]=k[v+20>>2];k[g+24>>2]=k[v+24>>2];j[g+28>>1]=j[v+28>>1]|0}}else{k[v>>2]=k[s>>2];k[v+4>>2]=k[s+4>>2];k[v+8>>2]=k[s+8>>2];k[v+12>>2]=k[s+12>>2];k[v+16>>2]=k[s+16>>2];k[v+20>>2]=k[s+20>>2];k[v+24>>2]=k[s+24>>2];k[v+28>>2]=k[s+28>>2];if(a){k[s>>2]=k[c>>2];k[s+4>>2]=k[c+4>>2];k[s+8>>2]=k[c+8>>2];k[s+12>>2]=k[c+12>>2];k[s+16>>2]=k[c+16>>2];k[s+20>>2]=k[c+20>>2];k[s+24>>2]=k[c+24>>2];j[s+28>>1]=j[c+28>>1]|0;k[c>>2]=k[v>>2];k[c+4>>2]=k[v+4>>2];k[c+8>>2]=k[v+8>>2];k[c+12>>2]=k[v+12>>2];k[c+16>>2]=k[v+16>>2];k[c+20>>2]=k[v+20>>2];k[c+24>>2]=k[v+24>>2];j[c+28>>1]=j[v+28>>1]|0;break};k[s>>2]=k[g>>2];k[s+4>>2]=k[g+4>>2];k[s+8>>2]=k[g+8>>2];k[s+12>>2]=k[g+12>>2];k[s+16>>2]=k[g+16>>2];k[s+20>>2]=k[g+20>>2];k[s+24>>2]=k[g+24>>2];j[s+28>>1]=j[g+28>>1]|0;k[g>>2]=k[v>>2];k[g+4>>2]=k[v+4>>2];k[g+8>>2]=k[v+8>>2];k[g+12>>2]=k[v+12>>2];k[g+16>>2]=k[v+16>>2];k[g+20>>2]=k[v+20>>2];k[g+24>>2]=k[v+24>>2];j[g+28>>1]=j[v+28>>1]|0;a=k[g>>2]|0;if((f|0)>=(a|0)){if((f|0)!=(a|0))break;if((k[s+68>>2]|0)>=(k[s+36>>2]|0))break};k[v>>2]=k[g>>2];k[v+4>>2]=k[g+4>>2];k[v+8>>2]=k[g+8>>2];k[v+12>>2]=k[g+12>>2];k[v+16>>2]=k[g+16>>2];k[v+20>>2]=k[g+20>>2];k[v+24>>2]=k[g+24>>2];k[v+28>>2]=k[g+28>>2];k[g>>2]=k[c>>2];k[g+4>>2]=k[c+4>>2];k[g+8>>2]=k[c+8>>2];k[g+12>>2]=k[c+12>>2];k[g+16>>2]=k[c+16>>2];k[g+20>>2]=k[c+20>>2];k[g+24>>2]=k[c+24>>2];j[g+28>>1]=j[c+28>>1]|0;k[c>>2]=k[v>>2];k[c+4>>2]=k[v+4>>2];k[c+8>>2]=k[v+8>>2];k[c+12>>2]=k[v+12>>2];k[c+16>>2]=k[v+16>>2];k[c+20>>2]=k[v+20>>2];k[c+24>>2]=k[v+24>>2];j[c+28>>1]=j[v+28>>1]|0}while(0);a=s+96|0;if((a|0)!=(b|0)){g=a;while(1){f=k[g>>2]|0;a=k[c>>2]|0;if((f|0)>=(a|0)){if((f|0)==(a|0)?(t=k[g+4>>2]|0,(t|0)<(k[c+4>>2]|0)):0){e=t;h=52}}else{e=k[g+4>>2]|0;h=52}if((h|0)==52){h=0;v=g+8|0;k[u>>2]=k[v>>2];k[u+4>>2]=k[v+4>>2];k[u+8>>2]=k[v+8>>2];k[u+12>>2]=k[v+12>>2];k[u+16>>2]=k[v+16>>2];k[u+20>>2]=k[v+20>>2];k[g>>2]=k[c>>2];k[g+4>>2]=k[c+4>>2];k[g+8>>2]=k[c+8>>2];k[g+12>>2]=k[c+12>>2];k[g+16>>2]=k[c+16>>2];k[g+20>>2]=k[c+20>>2];k[g+24>>2]=k[c+24>>2];j[g+28>>1]=j[c+28>>1]|0;h:do if((c|0)==(s|0))a=s;else while(1){a=c;c=c+-32|0;d=k[c>>2]|0;if((f|0)>=(d|0)){if((f|0)!=(d|0))break h;if((e|0)>=(k[a+-28>>2]|0))break h};k[a>>2]=k[c>>2];k[a+4>>2]=k[c+4>>2];k[a+8>>2]=k[c+8>>2];k[a+12>>2]=k[c+12>>2];k[a+16>>2]=k[c+16>>2];k[a+20>>2]=k[c+20>>2];k[a+24>>2]=k[c+24>>2];j[a+28>>1]=j[c+28>>1]|0;if((c|0)==(s|0)){a=s;break}}while(0);k[a>>2]=f;k[a+4>>2]=e;v=a+8|0;k[v>>2]=k[u>>2];k[v+4>>2]=k[u+4>>2];k[v+8>>2]=k[u+8>>2];k[v+12>>2]=k[u+12>>2];k[v+16>>2]=k[u+16>>2];j[v+20>>1]=j[u+20>>1]|0}a=g+32|0;if((a|0)==(b|0))break;else{c=g;g=a}}}r=w;return}else if((h|0)==136){r=w;return}}function pc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;s=b+16|0;e=k[s>>2]|0;f=k[e>>2]|0;g=k[e+4>>2]|0;do if((f|0)!=(g|0)){if((k[c+16>>2]|0)==(k[g+-16>>2]|0)?(k[c+20>>2]|0)==(k[g+-12>>2]|0):0){f=g;break}rc(+p[b>>3],k[b+20>>2]|0,e);e=k[s>>2]|0;f=k[e>>2]|0;g=e+4|0;h=k[g>>2]|0;if((h|0)!=(f|0)){k[g>>2]=h+(~(((h+-44-f|0)>>>0)/44|0)*44|0);f=k[s>>2]|0;e=f;f=k[f+4>>2]|0}}while(0);o=e+4|0;q=e+8|0;g=k[q>>2]|0;if(f>>>0>=g>>>0){r=k[e>>2]|0;h=r;l=f-h|0;m=(l|0)/44|0;n=m+1|0;if(n>>>0>97612893)xa(1340,1363,303,1438);f=(g-h|0)/44|0;if(f>>>0<48806446){f=f<<1;f=f>>>0<n>>>0?n:f;if(!f){f=0;g=0}else w=12}else{f=97612893;w=12}if((w|0)==12){h=f*44|0;h=(h|0)==0?1:h;g=_d(h)|0;a:do if(!g){while(1){g=k[35]|0;k[35]=g+0;if(!g)break;Xa[g&0]();g=_d(h)|0;if(g)break a}b=ya(4)|0;k[b>>2]=128;La(b|0,8,1)}while(0)}h=g+(f*44|0)|0;f=g+(m*44|0)|0;i=c;j=f+44|0;do{k[f>>2]=k[i>>2];f=f+4|0;i=i+4|0}while((f|0)<(j|0));m=g+((((l|0)/-44|0)+m|0)*44|0)|0;fe(m|0,r|0,l|0)|0;k[e>>2]=m;k[o>>2]=g+(n*44|0);k[q>>2]=h;if(r)$d(r)}else{i=c;j=f+44|0;do{k[f>>2]=k[i>>2];f=f+4|0;i=i+4|0}while((f|0)<(j|0));k[o>>2]=(k[o>>2]|0)+44}if(!(!d?(k[c+36>>2]|0)!=0:0))w=21;if((w|0)==21?(rc(+p[b>>3],k[b+20>>2]|0,k[s>>2]|0),u=k[s>>2]|0,t=k[u>>2]|0,u=u+4|0,v=k[u>>2]|0,(v|0)!=(t|0)):0)k[u>>2]=v+(~(((v+-44-t|0)>>>0)/44|0)*44|0);w=k[s>>2]|0;e=k[w+4>>2]|0;if((k[w>>2]|0)==(e|0)){b=(k[(k[(k[b+20>>2]|0)+4>>2]|0)+-8>>2]|0)+-12|0;k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];return}else{b=e+-16|0;k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];return}}function qc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0.0,h=0,j=0,l=0,m=0,n=0,o=0.0,q=0;n=b;if(i[b+29>>0]|0){a=1;return a|0}c=k[k[a>>2]>>2]|0;h=k[b+8>>2]|0;e=(h|0)==0;d=(k[c+8>>2]|0)==0;m=k[b>>2]|0;if((!(e^d)?(m|0)==(k[c>>2]|0):0)?(f=k[b+4>>2]|0,(f|0)==(k[c+4>>2]|0)):0){c=k[b+20>>2]|0;l=d^(c|0)==0?2:3}else{l=e&1;c=k[b+20>>2]|0;f=k[b+4>>2]|0}e=k[a+4>>2]|0;d=k[e+8>>2]|0;j=d-h|0;j=(j|0)>-1?j:0-j|0;c=d-c|0;c=(c|0)>-1?c:0-c|0;d=k[e>>2]|0;e=k[e+4>>2]|0;o=+(d-m|0);g=+(e-f|0);g=o*o+g*g;b=a+8|0;h=k[k[b>>2]>>2]|0;if((h|0)>0?(q=m-d|0,+(((q|0)>-1?q:0-q|0)|0)>+p[k[a+12>>2]>>3]):0){q=0;return q|0}do if((l|0)<=(h|0)){if((l|0)!=(h|0)){q=1;return q|0}if((m|0)==(d|0)&(e|0)==(f|0)){if((j|0)<(k[k[a+16>>2]>>2]|0))break;if((j|0)!=(k[k[a+16>>2]>>2]|0)){q=1;return q|0}if((c|0)<(k[k[a+20>>2]>>2]|0))break;if((c|0)!=(k[k[a+20>>2]>>2]|0)){q=1;return q|0}}if(!(g<+p[k[a+12>>2]>>3])){q=1;return q|0}}while(0);k[k[a+24>>2]>>2]=n;k[k[a+16>>2]>>2]=j;k[k[a+20>>2]>>2]=c;p[k[a+12>>2]>>3]=g;k[k[b>>2]>>2]=l;q=1;return q|0}function rc(a,b,c){a=+a;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0.0,m=0,n=0,o=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0;V=r;r=r+160|0;U=V+144|0;g=V+24|0;h=V+16|0;L=V+100|0;M=V+56|0;N=V+8|0;O=V;Q=V+44|0;R=V+32|0;d=k[c>>2]|0;P=c+4|0;f=k[P>>2]|0;if((d|0)==(f|0))l=0.0;else{e=0;do{K=k[d+36>>2]|0;T=k[d+24>>2]|0;T=(K|0)<(T|0)?K:T;e=(T|0)<(e|0)?T:e;d=d+44|0}while((d|0)!=(f|0));l=+(e|0)}k[U>>2]=0;T=U+4|0;k[T>>2]=0;k[U+8>>2]=0;p[g>>3]=0.0;l=-a-l;p[h>>3]=l;j=L+1|0;m=L+2|0;n=L+4|0;o=L+8|0;q=L+12|0;s=L+16|0;t=L+20|0;u=L+24|0;v=L+28|0;w=L+32|0;x=L+36|0;y=L+40|0;z=M+1|0;A=M+2|0;B=M+4|0;C=M+8|0;D=M+12|0;E=M+16|0;F=M+20|0;G=M+24|0;H=M+28|0;I=M+32|0;J=M+36|0;K=M+40|0;d=l>0.0?h:g;g=0;while(1){f=~~+p[d>>3];a:do if(!g){d=k[c>>2]|0;e=k[P>>2]|0;if((d|0)!=(e|0))do{_=k[d+16>>2]|0;Z=k[d+20>>2]|0;Y=(k[d+24>>2]|0)+f|0;X=k[d+28>>2]|0;W=k[d+32>>2]|0;h=(k[d+36>>2]|0)+f|0;i[M>>0]=0;i[z>>0]=0;i[A>>0]=0;k[B>>2]=0;k[C>>2]=0;k[D>>2]=0;k[E>>2]=_;k[F>>2]=Z;k[G>>2]=Y;k[H>>2]=X;k[I>>2]=W;k[J>>2]=h;k[K>>2]=1;sc(U,M);d=d+44|0}while((d|0)!=(e|0))}else{d=k[P>>2]|0;while(1){if((d|0)==(k[c>>2]|0))break a;h=k[d+-16>>2]|0;W=k[d+-12>>2]|0;X=(k[d+-8>>2]|0)+f|0;Y=k[d+-28>>2]|0;Z=k[d+-24>>2]|0;_=(k[d+-20>>2]|0)+f|0;i[L>>0]=0;i[j>>0]=0;i[m>>0]=0;k[n>>2]=0;k[o>>2]=0;k[q>>2]=0;k[s>>2]=h;k[t>>2]=W;k[u>>2]=X;k[v>>2]=Y;k[w>>2]=Z;k[x>>2]=_;k[y>>2]=1;sc(U,L);d=d+-44|0}}while(0);if(!f)break;p[N>>3]=0.0;l=+(f|0)-a;p[O>>3]=l;d=l>0.0?O:N;g=g^1}d=k[U>>2]|0;if(k[d+8>>2]|0){_=k[d+4>>2]|0;k[Q>>2]=k[d>>2];k[Q+4>>2]=_;k[Q+8>>2]=0;tc(U,d,Q)}d=k[T>>2]|0;if(k[d+-4>>2]|0){_=k[d+-8>>2]|0;k[R>>2]=k[d+-12>>2];k[R+4>>2]=_;k[R+8>>2]=0;tc(U,d,R)}o=b+4|0;d=k[o>>2]|0;q=b+8|0;e=k[q>>2]|0;if(d>>>0<e>>>0){k[d>>2]=k[U>>2];k[d+4>>2]=k[T>>2];_=U+8|0;k[d+8>>2]=k[_>>2];k[_>>2]=0;k[T>>2]=0;k[U>>2]=0;k[o>>2]=(k[o>>2]|0)+12;r=V;return}f=k[b>>2]|0;g=(d-f|0)/12|0;j=g+1|0;if(j>>>0>357913941)xa(1340,1363,303,1438);d=(e-f|0)/12|0;if(d>>>0<178956970){d=d<<1;d=d>>>0<j>>>0?j:d;if(!d){d=0;e=0}else S=23}else{d=357913941;S=23}if((S|0)==23){f=d*12|0;f=(f|0)==0?1:f;e=_d(f)|0;b:do if(!e){while(1){e=k[35]|0;k[35]=e+0;if(!e)break;Xa[e&0]();e=_d(f)|0;if(e)break b}_=ya(4)|0;k[_>>2]=128;La(_|0,8,1)}while(0)}h=e+(g*12|0)|0;f=h;n=e+(d*12|0)|0;k[e+(g*12|0)+8>>2]=0;k[h>>2]=k[U>>2];k[e+(g*12|0)+4>>2]=k[T>>2];d=U+8|0;k[e+(g*12|0)+8>>2]=k[d>>2];k[d>>2]=0;k[T>>2]=0;k[U>>2]=0;j=e+(j*12|0)|0;g=k[b>>2]|0;d=k[o>>2]|0;if((d|0)==(g|0)){d=g;g=b;h=o;e=f;m=d}else{e=h;do{_=e+-12|0;Z=d;d=d+-12|0;k[_>>2]=0;Y=e+-8|0;k[Y>>2]=0;k[e+-4>>2]=0;k[_>>2]=k[d>>2];_=Z+-8|0;k[Y>>2]=k[_>>2];Z=Z+-4|0;k[e+-4>>2]=k[Z>>2];k[Z>>2]=0;k[_>>2]=0;k[d>>2]=0;e=f+-12|0;f=e}while((d|0)!=(g|0));g=b;h=o;e=f;m=k[b>>2]|0;d=k[o>>2]|0}k[g>>2]=e;k[h>>2]=j;k[q>>2]=n;j=m;if((d|0)!=(j|0))do{e=d;d=d+-12|0;g=k[d>>2]|0;h=g;if(g){e=e+-8|0;f=k[e>>2]|0;if((f|0)!=(g|0))k[e>>2]=f+(~(((f+-12-h|0)>>>0)/12|0)*12|0);$d(g)}}while((d|0)!=(j|0));if(m)$d(m);d=k[U>>2]|0;if(!d){r=V;return}e=k[T>>2]|0;if((e|0)!=(d|0))k[T>>2]=e+(~(((e+-12-d|0)>>>0)/12|0)*12|0);$d(d);r=V;return}function sc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;e=a+4|0;d=k[e>>2]|0;if(!((((k[a>>2]|0)!=(d|0)?(k[d+-12>>2]|0)==(k[b+16>>2]|0):0)?(k[d+-8>>2]|0)==(k[b+20>>2]|0):0)?(k[d+-4>>2]|0)==(k[b+24>>2]|0):0))c=5;do if((c|0)==5){c=b+16|0;if((d|0)==(k[a+8>>2]|0)){uc(a,c);d=k[e>>2]|0;break}else{k[d>>2]=k[c>>2];k[d+4>>2]=k[c+4>>2];k[d+8>>2]=k[c+8>>2];d=(k[e>>2]|0)+12|0;k[e>>2]=d;break}}while(0);if((((k[a>>2]|0)!=(d|0)?(k[d+-12>>2]|0)==(k[b+28>>2]|0):0)?(k[d+-8>>2]|0)==(k[b+32>>2]|0):0)?(k[d+-4>>2]|0)==(k[b+36>>2]|0):0)return;c=b+28|0;if((d|0)==(k[a+8>>2]|0)){uc(a,c);return}else{k[d>>2]=k[c>>2];k[d+4>>2]=k[c+4>>2];k[d+8>>2]=k[c+8>>2];k[e>>2]=(k[e>>2]|0)+12;return}}function tc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0;m=k[a>>2]|0;n=b;d=m;j=n-d|0;l=(j|0)/12|0;p=a+4|0;g=k[p>>2]|0;o=a+8|0;f=k[o>>2]|0;if(g>>>0<f>>>0){if((g|0)==(b|0)){k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[p>>2]=(k[p>>2]|0)+12;return}f=g-(m+((l+1|0)*12|0))|0;d=b+(((f|0)/12|0)*12|0)|0;if(d>>>0<g>>>0){e=g;do{k[e>>2]=k[d>>2];k[e+4>>2]=k[d+4>>2];k[e+8>>2]=k[d+8>>2];d=d+12|0;e=(k[p>>2]|0)+12|0;k[p>>2]=e}while(d>>>0<g>>>0)}he(g+(((f|0)/-12|0)*12|0)|0,b|0,f|0)|0;k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];return}e=((g-d|0)/12|0)+1|0;if(e>>>0>357913941)xa(1340,1363,303,1438);d=(f-d|0)/12|0;if(d>>>0<178956970){d=d<<1;d=d>>>0<e>>>0?e:d;if(!d){d=0;i=0}else h=11}else{d=357913941;h=11}if((h|0)==11){f=d*12|0;f=(f|0)==0?1:f;e=_d(f)|0;a:do if(!e){while(1){e=k[35]|0;k[35]=e+0;if(!e)break;Xa[e&0]();e=_d(f)|0;if(e)break a}p=ya(4)|0;k[p>>2]=128;La(p|0,8,1)}while(0);i=e}f=i+(l*12|0)|0;g=f;e=i+(d*12|0)|0;do if((l|0)==(d|0)){if((j|0)>0){g=i+((((l+1|0)/-2|0)+l|0)*12|0)|0;f=g;d=m;break}h=(m|0)==(b|0)?1:l<<1;f=h>>>2;if(!h)d=0;else{e=h*12|0;e=(e|0)==0?1:e;d=_d(e)|0;b:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(e)|0;if(d)break b}p=ya(4)|0;k[p>>2]=128;La(p|0,8,1)}while(0)}f=d+(f*12|0)|0;g=f;e=d+(h*12|0)|0;if(!i)d=m;else{$d(i);d=k[a>>2]|0}}else d=m;while(0);k[f>>2]=k[c>>2];k[f+4>>2]=k[c+4>>2];k[f+8>>2]=k[c+8>>2];m=g;c=n-d|0;l=m+(((c|0)/-12|0)*12|0)|0;fe(l|0,d|0,c|0)|0;c=(k[p>>2]|0)-n|0;fe(m+12|0,b|0,c|0)|0;d=k[a>>2]|0;k[a>>2]=l;k[p>>2]=m+((((c|0)/12|0)+1|0)*12|0);k[o>>2]=e;if(!d)return;$d(d);return}function uc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0;f=a+4|0;g=k[a>>2]|0;c=g;h=(k[f>>2]|0)-c|0;i=(h|0)/12|0;j=i+1|0;if(j>>>0>357913941)xa(1340,1363,303,1438);l=a+8|0;c=((k[l>>2]|0)-c|0)/12|0;if(c>>>0<178956970){c=c<<1;c=c>>>0<j>>>0?j:c;if(!c){c=0;d=0}else e=5}else{c=357913941;e=5}if((e|0)==5){e=c*12|0;e=(e|0)==0?1:e;d=_d(e)|0;a:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(e)|0;if(d)break a}a=ya(4)|0;k[a>>2]=128;La(a|0,8,1)}while(0)}e=d+(i*12|0)|0;k[e>>2]=k[b>>2];k[e+4>>2]=k[b+4>>2];k[e+8>>2]=k[b+8>>2];b=d+((((h|0)/-12|0)+i|0)*12|0)|0;fe(b|0,g|0,h|0)|0;k[a>>2]=b;k[f>>2]=d+(j*12|0);k[l>>2]=d+(c*12|0);if(!g)return;$d(g);return}function vc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,l=0;l=r;r=r+32|0;i=l;f=k[b>>2]|0;e=k[a>>2]|0;if((f|0)>=(e|0))if((f|0)==(e|0))g=(k[b+4>>2]|0)<(k[a+4>>2]|0);else g=0;else g=1;e=k[c>>2]|0;if((e|0)>=(f|0))if((e|0)==(f|0))e=(k[c+4>>2]|0)<(k[b+4>>2]|0);else e=0;else e=1;do if(!g)if(e){k[i>>2]=k[b>>2];k[i+4>>2]=k[b+4>>2];k[i+8>>2]=k[b+8>>2];k[i+12>>2]=k[b+12>>2];k[i+16>>2]=k[b+16>>2];k[i+20>>2]=k[b+20>>2];k[i+24>>2]=k[b+24>>2];k[i+28>>2]=k[b+28>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];k[b+24>>2]=k[c+24>>2];j[b+28>>1]=j[c+28>>1]|0;k[c>>2]=k[i>>2];k[c+4>>2]=k[i+4>>2];k[c+8>>2]=k[i+8>>2];k[c+12>>2]=k[i+12>>2];k[c+16>>2]=k[i+16>>2];k[c+20>>2]=k[i+20>>2];k[c+24>>2]=k[i+24>>2];j[c+28>>1]=j[i+28>>1]|0;e=k[b>>2]|0;f=k[a>>2]|0;if((e|0)>=(f|0)){if((e|0)!=(f|0)){h=1;break}if((k[b+4>>2]|0)>=(k[a+4>>2]|0)){h=1;break}};k[i>>2]=k[a>>2];k[i+4>>2]=k[a+4>>2];k[i+8>>2]=k[a+8>>2];k[i+12>>2]=k[a+12>>2];k[i+16>>2]=k[a+16>>2];k[i+20>>2]=k[a+20>>2];k[i+24>>2]=k[a+24>>2];k[i+28>>2]=k[a+28>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];k[a+24>>2]=k[b+24>>2];j[a+28>>1]=j[b+28>>1]|0;k[b>>2]=k[i>>2];k[b+4>>2]=k[i+4>>2];k[b+8>>2]=k[i+8>>2];k[b+12>>2]=k[i+12>>2];k[b+16>>2]=k[i+16>>2];k[b+20>>2]=k[i+20>>2];k[b+24>>2]=k[i+24>>2];j[b+28>>1]=j[i+28>>1]|0;h=2}else h=0;else{k[i>>2]=k[a>>2];k[i+4>>2]=k[a+4>>2];k[i+8>>2]=k[a+8>>2];k[i+12>>2]=k[a+12>>2];k[i+16>>2]=k[a+16>>2];k[i+20>>2]=k[a+20>>2];k[i+24>>2]=k[a+24>>2];k[i+28>>2]=k[a+28>>2];if(e){k[a>>2]=k[c>>2];k[a+4>>2]=k[c+4>>2];k[a+8>>2]=k[c+8>>2];k[a+12>>2]=k[c+12>>2];k[a+16>>2]=k[c+16>>2];k[a+20>>2]=k[c+20>>2];k[a+24>>2]=k[c+24>>2];j[a+28>>1]=j[c+28>>1]|0;k[c>>2]=k[i>>2];k[c+4>>2]=k[i+4>>2];k[c+8>>2]=k[i+8>>2];k[c+12>>2]=k[i+12>>2];k[c+16>>2]=k[i+16>>2];k[c+20>>2]=k[i+20>>2];k[c+24>>2]=k[i+24>>2];j[c+28>>1]=j[i+28>>1]|0;h=1;break};k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];k[a+24>>2]=k[b+24>>2];j[a+28>>1]=j[b+28>>1]|0;k[b>>2]=k[i>>2];k[b+4>>2]=k[i+4>>2];k[b+8>>2]=k[i+8>>2];k[b+12>>2]=k[i+12>>2];k[b+16>>2]=k[i+16>>2];k[b+20>>2]=k[i+20>>2];k[b+24>>2]=k[i+24>>2];j[b+28>>1]=j[i+28>>1]|0;e=k[c>>2]|0;f=k[b>>2]|0;if((e|0)>=(f|0)){if((e|0)!=(f|0)){h=1;break}if((k[c+4>>2]|0)>=(k[b+4>>2]|0)){h=1;break}};k[i>>2]=k[b>>2];k[i+4>>2]=k[b+4>>2];k[i+8>>2]=k[b+8>>2];k[i+12>>2]=k[b+12>>2];k[i+16>>2]=k[b+16>>2];k[i+20>>2]=k[b+20>>2];k[i+24>>2]=k[b+24>>2];k[i+28>>2]=k[b+28>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];k[b+24>>2]=k[c+24>>2];j[b+28>>1]=j[c+28>>1]|0;k[c>>2]=k[i>>2];k[c+4>>2]=k[i+4>>2];k[c+8>>2]=k[i+8>>2];k[c+12>>2]=k[i+12>>2];k[c+16>>2]=k[i+16>>2];k[c+20>>2]=k[i+20>>2];k[c+24>>2]=k[i+24>>2];j[c+28>>1]=j[i+28>>1]|0;h=2}while(0);e=k[d>>2]|0;f=k[c>>2]|0;if((e|0)>=(f|0)){if((e|0)!=(f|0)){b=h;r=l;return b|0}if((k[d+4>>2]|0)>=(k[c+4>>2]|0)){b=h;r=l;return b|0}};k[i>>2]=k[c>>2];k[i+4>>2]=k[c+4>>2];k[i+8>>2]=k[c+8>>2];k[i+12>>2]=k[c+12>>2];k[i+16>>2]=k[c+16>>2];k[i+20>>2]=k[c+20>>2];k[i+24>>2]=k[c+24>>2];k[i+28>>2]=k[c+28>>2];k[c>>2]=k[d>>2];k[c+4>>2]=k[d+4>>2];k[c+8>>2]=k[d+8>>2];k[c+12>>2]=k[d+12>>2];k[c+16>>2]=k[d+16>>2];k[c+20>>2]=k[d+20>>2];k[c+24>>2]=k[d+24>>2];j[c+28>>1]=j[d+28>>1]|0;k[d>>2]=k[i>>2];k[d+4>>2]=k[i+4>>2];k[d+8>>2]=k[i+8>>2];k[d+12>>2]=k[i+12>>2];k[d+16>>2]=k[i+16>>2];k[d+20>>2]=k[i+20>>2];k[d+24>>2]=k[i+24>>2];j[d+28>>1]=j[i+28>>1]|0;e=h+1|0;f=k[c>>2]|0;g=k[b>>2]|0;if((f|0)>=(g|0)){if((f|0)!=(g|0)){b=e;r=l;return b|0}if((k[c+4>>2]|0)>=(k[b+4>>2]|0)){b=e;r=l;return b|0}};k[i>>2]=k[b>>2];k[i+4>>2]=k[b+4>>2];k[i+8>>2]=k[b+8>>2];k[i+12>>2]=k[b+12>>2];k[i+16>>2]=k[b+16>>2];k[i+20>>2]=k[b+20>>2];k[i+24>>2]=k[b+24>>2];k[i+28>>2]=k[b+28>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];k[b+24>>2]=k[c+24>>2];j[b+28>>1]=j[c+28>>1]|0;k[c>>2]=k[i>>2];k[c+4>>2]=k[i+4>>2];k[c+8>>2]=k[i+8>>2];k[c+12>>2]=k[i+12>>2];k[c+16>>2]=k[i+16>>2];k[c+20>>2]=k[i+20>>2];k[c+24>>2]=k[i+24>>2];j[c+28>>1]=j[i+28>>1]|0;e=h+2|0;f=k[b>>2]|0;g=k[a>>2]|0;if((f|0)>=(g|0)){if((f|0)!=(g|0)){b=e;r=l;return b|0}if((k[b+4>>2]|0)>=(k[a+4>>2]|0)){b=e;r=l;return b|0}};k[i>>2]=k[a>>2];k[i+4>>2]=k[a+4>>2];k[i+8>>2]=k[a+8>>2];k[i+12>>2]=k[a+12>>2];k[i+16>>2]=k[a+16>>2];k[i+20>>2]=k[a+20>>2];k[i+24>>2]=k[a+24>>2];k[i+28>>2]=k[a+28>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];k[a+24>>2]=k[b+24>>2];j[a+28>>1]=j[b+28>>1]|0;k[b>>2]=k[i>>2];k[b+4>>2]=k[i+4>>2];k[b+8>>2]=k[i+8>>2];k[b+12>>2]=k[i+12>>2];k[b+16>>2]=k[i+16>>2];k[b+20>>2]=k[i+20>>2];k[b+24>>2]=k[i+24>>2];j[b+28>>1]=j[i+28>>1]|0;b=h+3|0;r=l;return b|0}function wc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,l=0;l=r;r=r+32|0;i=l;h=vc(a,b,c,d)|0;f=k[e>>2]|0;g=k[d>>2]|0;if((f|0)>=(g|0)){if((f|0)!=(g|0)){b=h;r=l;return b|0}if((k[e+4>>2]|0)>=(k[d+4>>2]|0)){b=h;r=l;return b|0}};k[i>>2]=k[d>>2];k[i+4>>2]=k[d+4>>2];k[i+8>>2]=k[d+8>>2];k[i+12>>2]=k[d+12>>2];k[i+16>>2]=k[d+16>>2];k[i+20>>2]=k[d+20>>2];k[i+24>>2]=k[d+24>>2];k[i+28>>2]=k[d+28>>2];k[d>>2]=k[e>>2];k[d+4>>2]=k[e+4>>2];k[d+8>>2]=k[e+8>>2];k[d+12>>2]=k[e+12>>2];k[d+16>>2]=k[e+16>>2];k[d+20>>2]=k[e+20>>2];k[d+24>>2]=k[e+24>>2];j[d+28>>1]=j[e+28>>1]|0;k[e>>2]=k[i>>2];k[e+4>>2]=k[i+4>>2];k[e+8>>2]=k[i+8>>2];k[e+12>>2]=k[i+12>>2];k[e+16>>2]=k[i+16>>2];k[e+20>>2]=k[i+20>>2];k[e+24>>2]=k[i+24>>2];j[e+28>>1]=j[i+28>>1]|0;f=h+1|0;g=k[d>>2]|0;e=k[c>>2]|0;if((g|0)>=(e|0)){if((g|0)!=(e|0)){b=f;r=l;return b|0}if((k[d+4>>2]|0)>=(k[c+4>>2]|0)){b=f;r=l;return b|0}};k[i>>2]=k[c>>2];k[i+4>>2]=k[c+4>>2];k[i+8>>2]=k[c+8>>2];k[i+12>>2]=k[c+12>>2];k[i+16>>2]=k[c+16>>2];k[i+20>>2]=k[c+20>>2];k[i+24>>2]=k[c+24>>2];k[i+28>>2]=k[c+28>>2];k[c>>2]=k[d>>2];k[c+4>>2]=k[d+4>>2];k[c+8>>2]=k[d+8>>2];k[c+12>>2]=k[d+12>>2];k[c+16>>2]=k[d+16>>2];k[c+20>>2]=k[d+20>>2];k[c+24>>2]=k[d+24>>2];j[c+28>>1]=j[d+28>>1]|0;k[d>>2]=k[i>>2];k[d+4>>2]=k[i+4>>2];k[d+8>>2]=k[i+8>>2];k[d+12>>2]=k[i+12>>2];k[d+16>>2]=k[i+16>>2];k[d+20>>2]=k[i+20>>2];k[d+24>>2]=k[i+24>>2];j[d+28>>1]=j[i+28>>1]|0;f=h+2|0;g=k[c>>2]|0;e=k[b>>2]|0;if((g|0)>=(e|0)){if((g|0)!=(e|0)){b=f;r=l;return b|0}if((k[c+4>>2]|0)>=(k[b+4>>2]|0)){b=f;r=l;return b|0}};k[i>>2]=k[b>>2];k[i+4>>2]=k[b+4>>2];k[i+8>>2]=k[b+8>>2];k[i+12>>2]=k[b+12>>2];k[i+16>>2]=k[b+16>>2];k[i+20>>2]=k[b+20>>2];k[i+24>>2]=k[b+24>>2];k[i+28>>2]=k[b+28>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];k[b+24>>2]=k[c+24>>2];j[b+28>>1]=j[c+28>>1]|0;k[c>>2]=k[i>>2];k[c+4>>2]=k[i+4>>2];k[c+8>>2]=k[i+8>>2];k[c+12>>2]=k[i+12>>2];k[c+16>>2]=k[i+16>>2];k[c+20>>2]=k[i+20>>2];k[c+24>>2]=k[i+24>>2];j[c+28>>1]=j[i+28>>1]|0;f=h+3|0;g=k[b>>2]|0;e=k[a>>2]|0;if((g|0)>=(e|0)){if((g|0)!=(e|0)){b=f;r=l;return b|0}if((k[b+4>>2]|0)>=(k[a+4>>2]|0)){b=f;r=l;return b|0}};k[i>>2]=k[a>>2];k[i+4>>2]=k[a+4>>2];k[i+8>>2]=k[a+8>>2];k[i+12>>2]=k[a+12>>2];k[i+16>>2]=k[a+16>>2];k[i+20>>2]=k[a+20>>2];k[i+24>>2]=k[a+24>>2];k[i+28>>2]=k[a+28>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];k[a+24>>2]=k[b+24>>2];j[a+28>>1]=j[b+28>>1]|0;k[b>>2]=k[i>>2];k[b+4>>2]=k[i+4>>2];k[b+8>>2]=k[i+8>>2];k[b+12>>2]=k[i+12>>2];k[b+16>>2]=k[i+16>>2];k[b+20>>2]=k[i+20>>2];k[b+24>>2]=k[i+24>>2];j[b+28>>1]=j[i+28>>1]|0;b=h+4|0;r=l;return b|0}function xc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,l=0,m=0,n=0,o=0;o=r;r=r+64|0;i=o+24|0;m=o;switch(b-a>>5|0){case 2:{c=b+-32|0;d=k[c>>2]|0;e=k[a>>2]|0;if((d|0)>=(e|0)){if((d|0)!=(e|0)){a=1;r=o;return a|0}if((k[b+-28>>2]|0)>=(k[a+4>>2]|0)){a=1;r=o;return a|0}};k[i>>2]=k[a>>2];k[i+4>>2]=k[a+4>>2];k[i+8>>2]=k[a+8>>2];k[i+12>>2]=k[a+12>>2];k[i+16>>2]=k[a+16>>2];k[i+20>>2]=k[a+20>>2];k[i+24>>2]=k[a+24>>2];k[i+28>>2]=k[a+28>>2];k[a>>2]=k[c>>2];k[a+4>>2]=k[c+4>>2];k[a+8>>2]=k[c+8>>2];k[a+12>>2]=k[c+12>>2];k[a+16>>2]=k[c+16>>2];k[a+20>>2]=k[c+20>>2];k[a+24>>2]=k[c+24>>2];j[a+28>>1]=j[c+28>>1]|0;k[c>>2]=k[i>>2];k[c+4>>2]=k[i+4>>2];k[c+8>>2]=k[i+8>>2];k[c+12>>2]=k[i+12>>2];k[c+16>>2]=k[i+16>>2];k[c+20>>2]=k[i+20>>2];k[c+24>>2]=k[i+24>>2];j[c+28>>1]=j[i+28>>1]|0;a=1;r=o;return a|0}case 3:{g=a+32|0;f=b+-32|0;e=k[g>>2]|0;c=k[a>>2]|0;if((e|0)>=(c|0))if((e|0)==(c|0))d=(k[a+36>>2]|0)<(k[a+4>>2]|0);else d=0;else d=1;c=k[f>>2]|0;if((c|0)>=(e|0))if((c|0)==(e|0))c=(k[b+-28>>2]|0)<(k[a+36>>2]|0);else c=0;else c=1;if(!d){if(!c){a=1;r=o;return a|0};k[i>>2]=k[g>>2];k[i+4>>2]=k[g+4>>2];k[i+8>>2]=k[g+8>>2];k[i+12>>2]=k[g+12>>2];k[i+16>>2]=k[g+16>>2];k[i+20>>2]=k[g+20>>2];k[i+24>>2]=k[g+24>>2];k[i+28>>2]=k[g+28>>2];k[g>>2]=k[f>>2];k[g+4>>2]=k[f+4>>2];k[g+8>>2]=k[f+8>>2];k[g+12>>2]=k[f+12>>2];k[g+16>>2]=k[f+16>>2];k[g+20>>2]=k[f+20>>2];k[g+24>>2]=k[f+24>>2];j[g+28>>1]=j[f+28>>1]|0;k[f>>2]=k[i>>2];k[f+4>>2]=k[i+4>>2];k[f+8>>2]=k[i+8>>2];k[f+12>>2]=k[i+12>>2];k[f+16>>2]=k[i+16>>2];k[f+20>>2]=k[i+20>>2];k[f+24>>2]=k[i+24>>2];j[f+28>>1]=j[i+28>>1]|0;c=k[g>>2]|0;d=k[a>>2]|0;if((c|0)>=(d|0)){if((c|0)!=(d|0)){a=1;r=o;return a|0}if((k[a+36>>2]|0)>=(k[a+4>>2]|0)){a=1;r=o;return a|0}};k[i>>2]=k[a>>2];k[i+4>>2]=k[a+4>>2];k[i+8>>2]=k[a+8>>2];k[i+12>>2]=k[a+12>>2];k[i+16>>2]=k[a+16>>2];k[i+20>>2]=k[a+20>>2];k[i+24>>2]=k[a+24>>2];k[i+28>>2]=k[a+28>>2];k[a>>2]=k[g>>2];k[a+4>>2]=k[g+4>>2];k[a+8>>2]=k[g+8>>2];k[a+12>>2]=k[g+12>>2];k[a+16>>2]=k[g+16>>2];k[a+20>>2]=k[g+20>>2];k[a+24>>2]=k[g+24>>2];j[a+28>>1]=j[g+28>>1]|0;k[g>>2]=k[i>>2];k[g+4>>2]=k[i+4>>2];k[g+8>>2]=k[i+8>>2];k[g+12>>2]=k[i+12>>2];k[g+16>>2]=k[i+16>>2];k[g+20>>2]=k[i+20>>2];k[g+24>>2]=k[i+24>>2];j[g+28>>1]=j[i+28>>1]|0;a=1;r=o;return a|0};k[i>>2]=k[a>>2];k[i+4>>2]=k[a+4>>2];k[i+8>>2]=k[a+8>>2];k[i+12>>2]=k[a+12>>2];k[i+16>>2]=k[a+16>>2];k[i+20>>2]=k[a+20>>2];k[i+24>>2]=k[a+24>>2];k[i+28>>2]=k[a+28>>2];if(c){k[a>>2]=k[f>>2];k[a+4>>2]=k[f+4>>2];k[a+8>>2]=k[f+8>>2];k[a+12>>2]=k[f+12>>2];k[a+16>>2]=k[f+16>>2];k[a+20>>2]=k[f+20>>2];k[a+24>>2]=k[f+24>>2];j[a+28>>1]=j[f+28>>1]|0;k[f>>2]=k[i>>2];k[f+4>>2]=k[i+4>>2];k[f+8>>2]=k[i+8>>2];k[f+12>>2]=k[i+12>>2];k[f+16>>2]=k[i+16>>2];k[f+20>>2]=k[i+20>>2];k[f+24>>2]=k[i+24>>2];j[f+28>>1]=j[i+28>>1]|0;a=1;r=o;return a|0};k[a>>2]=k[g>>2];k[a+4>>2]=k[g+4>>2];k[a+8>>2]=k[g+8>>2];k[a+12>>2]=k[g+12>>2];k[a+16>>2]=k[g+16>>2];k[a+20>>2]=k[g+20>>2];k[a+24>>2]=k[g+24>>2];j[a+28>>1]=j[g+28>>1]|0;k[g>>2]=k[i>>2];k[g+4>>2]=k[i+4>>2];k[g+8>>2]=k[i+8>>2];k[g+12>>2]=k[i+12>>2];k[g+16>>2]=k[i+16>>2];k[g+20>>2]=k[i+20>>2];k[g+24>>2]=k[i+24>>2];j[g+28>>1]=j[i+28>>1]|0;c=k[f>>2]|0;d=k[g>>2]|0;if((c|0)>=(d|0)){if((c|0)!=(d|0)){a=1;r=o;return a|0}if((k[b+-28>>2]|0)>=(k[a+36>>2]|0)){a=1;r=o;return a|0}};k[i>>2]=k[g>>2];k[i+4>>2]=k[g+4>>2];k[i+8>>2]=k[g+8>>2];k[i+12>>2]=k[g+12>>2];k[i+16>>2]=k[g+16>>2];k[i+20>>2]=k[g+20>>2];k[i+24>>2]=k[g+24>>2];k[i+28>>2]=k[g+28>>2];k[g>>2]=k[f>>2];k[g+4>>2]=k[f+4>>2];k[g+8>>2]=k[f+8>>2];k[g+12>>2]=k[f+12>>2];k[g+16>>2]=k[f+16>>2];k[g+20>>2]=k[f+20>>2];k[g+24>>2]=k[f+24>>2];j[g+28>>1]=j[f+28>>1]|0;k[f>>2]=k[i>>2];k[f+4>>2]=k[i+4>>2];k[f+8>>2]=k[i+8>>2];k[f+12>>2]=k[i+12>>2];k[f+16>>2]=k[i+16>>2];k[f+20>>2]=k[i+20>>2];k[f+24>>2]=k[i+24>>2];j[f+28>>1]=j[i+28>>1]|0;a=1;r=o;return a|0}case 4:{vc(a,a+32|0,a+64|0,b+-32|0)|0;a=1;r=o;return a|0}case 5:{wc(a,a+32|0,a+64|0,a+96|0,b+-32|0)|0;a=1;r=o;return a|0}case 1:case 0:{a=1;r=o;return a|0}default:{f=a+64|0;h=a+32|0;c=k[h>>2]|0;e=k[a>>2]|0;if((c|0)>=(e|0))if((c|0)==(e|0))d=(k[a+36>>2]|0)<(k[a+4>>2]|0);else d=0;else d=1;g=k[f>>2]|0;if((g|0)>=(c|0))if((g|0)==(c|0))c=(k[a+68>>2]|0)<(k[a+36>>2]|0);else c=0;else c=1;do if(!d){if(c){k[i>>2]=k[h>>2];k[i+4>>2]=k[h+4>>2];k[i+8>>2]=k[h+8>>2];k[i+12>>2]=k[h+12>>2];k[i+16>>2]=k[h+16>>2];k[i+20>>2]=k[h+20>>2];k[i+24>>2]=k[h+24>>2];k[i+28>>2]=k[h+28>>2];k[h>>2]=k[f>>2];k[h+4>>2]=k[f+4>>2];k[h+8>>2]=k[f+8>>2];k[h+12>>2]=k[f+12>>2];k[h+16>>2]=k[f+16>>2];k[h+20>>2]=k[f+20>>2];k[h+24>>2]=k[f+24>>2];j[h+28>>1]=j[f+28>>1]|0;k[f>>2]=k[i>>2];k[f+4>>2]=k[i+4>>2];k[f+8>>2]=k[i+8>>2];k[f+12>>2]=k[i+12>>2];k[f+16>>2]=k[i+16>>2];k[f+20>>2]=k[i+20>>2];k[f+24>>2]=k[i+24>>2];j[f+28>>1]=j[i+28>>1]|0;c=k[h>>2]|0;if((c|0)>=(e|0)){if((c|0)!=(e|0))break;if((k[a+36>>2]|0)>=(k[a+4>>2]|0))break};k[i>>2]=k[a>>2];k[i+4>>2]=k[a+4>>2];k[i+8>>2]=k[a+8>>2];k[i+12>>2]=k[a+12>>2];k[i+16>>2]=k[a+16>>2];k[i+20>>2]=k[a+20>>2];k[i+24>>2]=k[a+24>>2];k[i+28>>2]=k[a+28>>2];k[a>>2]=k[h>>2];k[a+4>>2]=k[h+4>>2];k[a+8>>2]=k[h+8>>2];k[a+12>>2]=k[h+12>>2];k[a+16>>2]=k[h+16>>2];k[a+20>>2]=k[h+20>>2];k[a+24>>2]=k[h+24>>2];j[a+28>>1]=j[h+28>>1]|0;k[h>>2]=k[i>>2];k[h+4>>2]=k[i+4>>2];k[h+8>>2]=k[i+8>>2];k[h+12>>2]=k[i+12>>2];k[h+16>>2]=k[i+16>>2];k[h+20>>2]=k[i+20>>2];k[h+24>>2]=k[i+24>>2];j[h+28>>1]=j[i+28>>1]|0}}else{k[i>>2]=k[a>>2];k[i+4>>2]=k[a+4>>2];k[i+8>>2]=k[a+8>>2];k[i+12>>2]=k[a+12>>2];k[i+16>>2]=k[a+16>>2];k[i+20>>2]=k[a+20>>2];k[i+24>>2]=k[a+24>>2];k[i+28>>2]=k[a+28>>2];if(c){k[a>>2]=k[f>>2];k[a+4>>2]=k[f+4>>2];k[a+8>>2]=k[f+8>>2];k[a+12>>2]=k[f+12>>2];k[a+16>>2]=k[f+16>>2];k[a+20>>2]=k[f+20>>2];k[a+24>>2]=k[f+24>>2];j[a+28>>1]=j[f+28>>1]|0;k[f>>2]=k[i>>2];k[f+4>>2]=k[i+4>>2];k[f+8>>2]=k[i+8>>2];k[f+12>>2]=k[i+12>>2];k[f+16>>2]=k[i+16>>2];k[f+20>>2]=k[i+20>>2];k[f+24>>2]=k[i+24>>2];j[f+28>>1]=j[i+28>>1]|0;break};k[a>>2]=k[h>>2];k[a+4>>2]=k[h+4>>2];k[a+8>>2]=k[h+8>>2];k[a+12>>2]=k[h+12>>2];k[a+16>>2]=k[h+16>>2];k[a+20>>2]=k[h+20>>2];k[a+24>>2]=k[h+24>>2];j[a+28>>1]=j[h+28>>1]|0;k[h>>2]=k[i>>2];k[h+4>>2]=k[i+4>>2];k[h+8>>2]=k[i+8>>2];k[h+12>>2]=k[i+12>>2];k[h+16>>2]=k[i+16>>2];k[h+20>>2]=k[i+20>>2];k[h+24>>2]=k[i+24>>2];j[h+28>>1]=j[i+28>>1]|0;c=k[h>>2]|0;if((g|0)>=(c|0)){if((g|0)!=(c|0))break;if((k[a+68>>2]|0)>=(k[a+36>>2]|0))break};k[i>>2]=k[h>>2];k[i+4>>2]=k[h+4>>2];k[i+8>>2]=k[h+8>>2];k[i+12>>2]=k[h+12>>2];k[i+16>>2]=k[h+16>>2];k[i+20>>2]=k[h+20>>2];k[i+24>>2]=k[h+24>>2];k[i+28>>2]=k[h+28>>2];k[h>>2]=k[f>>2];k[h+4>>2]=k[f+4>>2];k[h+8>>2]=k[f+8>>2];k[h+12>>2]=k[f+12>>2];k[h+16>>2]=k[f+16>>2];k[h+20>>2]=k[f+20>>2];k[h+24>>2]=k[f+24>>2];j[h+28>>1]=j[f+28>>1]|0;k[f>>2]=k[i>>2];k[f+4>>2]=k[i+4>>2];k[f+8>>2]=k[i+8>>2];k[f+12>>2]=k[i+12>>2];k[f+16>>2]=k[i+16>>2];k[f+20>>2]=k[i+20>>2];k[f+24>>2]=k[i+24>>2];j[f+28>>1]=j[i+28>>1]|0}while(0);d=a+96|0;if((d|0)==(b|0)){a=1;r=o;return a|0}c=0;while(1){i=k[d>>2]|0;e=k[f>>2]|0;if((i|0)>=(e|0)){if((i|0)==(e|0)?(l=k[d+4>>2]|0,(l|0)<(k[f+4>>2]|0)):0){h=l;n=50}}else{h=k[d+4>>2]|0;n=50}if((n|0)==50){n=0;g=d+8|0;k[m>>2]=k[g>>2];k[m+4>>2]=k[g+4>>2];k[m+8>>2]=k[g+8>>2];k[m+12>>2]=k[g+12>>2];k[m+16>>2]=k[g+16>>2];k[m+20>>2]=k[g+20>>2];k[d>>2]=k[f>>2];k[d+4>>2]=k[f+4>>2];k[d+8>>2]=k[f+8>>2];k[d+12>>2]=k[f+12>>2];k[d+16>>2]=k[f+16>>2];k[d+20>>2]=k[f+20>>2];k[d+24>>2]=k[f+24>>2];j[d+28>>1]=j[f+28>>1]|0;a:do if((f|0)==(a|0))e=a;else while(1){e=f;f=f+-32|0;g=k[f>>2]|0;if((i|0)>=(g|0)){if((i|0)!=(g|0))break a;if((h|0)>=(k[e+-28>>2]|0))break a};k[e>>2]=k[f>>2];k[e+4>>2]=k[f+4>>2];k[e+8>>2]=k[f+8>>2];k[e+12>>2]=k[f+12>>2];k[e+16>>2]=k[f+16>>2];k[e+20>>2]=k[f+20>>2];k[e+24>>2]=k[f+24>>2];j[e+28>>1]=j[f+28>>1]|0;if((f|0)==(a|0)){e=a;break}}while(0);k[e>>2]=i;k[e+4>>2]=h;i=e+8|0;k[i>>2]=k[m>>2];k[i+4>>2]=k[m+4>>2];k[i+8>>2]=k[m+8>>2];k[i+12>>2]=k[m+12>>2];k[i+16>>2]=k[m+16>>2];j[i+20>>1]=j[m+20>>1]|0;c=c+1|0;if((c|0)==8)break}e=d+32|0;if((e|0)==(b|0)){c=1;n=58;break}else{f=d;d=e}}if((n|0)==58){r=o;return c|0}a=(d+32|0)==(b|0);r=o;return a|0}}return 0}function yc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0;n=a+4|0;f=k[n>>2]|0;m=k[a>>2]|0;d=m;j=f-d>>4;l=j+1|0;if(l>>>0>268435455)xa(1340,1363,303,1438);o=a+8|0;e=(k[o>>2]|0)-d|0;if(e>>4>>>0<134217727){e=e>>3;e=e>>>0<l>>>0?l:e;if(!e){h=0;g=0}else i=5}else{e=268435455;i=5}if((i|0)==5){h=e<<4;h=(h|0)==0?1:h;g=_d(h)|0;a:do if(!g){while(1){g=k[35]|0;k[35]=g+0;if(!g)break;Xa[g&0]();g=_d(h)|0;if(g)break a}o=ya(4)|0;k[o>>2]=128;La(o|0,8,1)}while(0);h=e}i=g+(j<<4)|0;e=i;h=g+(h<<4)|0;k[i>>2]=0;k[i+4>>2]=0;k[i+8>>2]=0;k[i+12>>2]=0;k[i>>2]=k[b>>2];k[g+(j<<4)+4>>2]=k[b+4>>2];k[g+(j<<4)+8>>2]=k[c>>2];k[g+(j<<4)+12>>2]=k[c+4>>2];g=g+(l<<4)|0;if((f|0)==(m|0))f=a;else{d=i;do{b=d+-16|0;c=f;f=f+-16|0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=0;k[b+12>>2]=0;k[b>>2]=k[f>>2];k[d+-12>>2]=k[c+-12>>2];k[d+-8>>2]=k[c+-8>>2];k[d+-4>>2]=k[c+-4>>2];d=e+-16|0;e=d}while((f|0)!=(m|0));f=a;d=k[a>>2]|0}k[f>>2]=e;k[n>>2]=g;k[o>>2]=h;if(!d)return;$d(d);return}function zc(a,b){a=a|0;b=b|0;return (k[a+16>>2]|0)<(k[b+16>>2]|0)|0}function Ac(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0;t=r;r=r+48|0;s=t;q=b;a:while(1){n=q;p=q+-44|0;b:while(1){j=a;b=n-j|0;switch((b|0)/44|0|0){case 2:{o=4;break a}case 3:{o=6;break a}case 4:{o=14;break a}case 5:{o=15;break a}case 1:case 0:{o=82;break a}default:{}}if((b|0)<1364){o=21;break a}d=(b|0)/88|0;i=a+(d*44|0)|0;do if((b|0)>43956){e=(b|0)/176|0;f=a+(e*44|0)|0;e=a+((e+d|0)*44|0)|0;b=Hc(a,f,i,e,c)|0;if(Za[k[c>>2]&7](p,e)|0){d=s;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=p;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=p;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=b+1|0;if(Za[k[c>>2]&7](e,i)|0){d=s;l=i;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=i;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=b+2|0;if(Za[k[c>>2]&7](i,f)|0){d=s;l=f;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=f;l=i;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=i;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=b+3|0;if(Za[k[c>>2]&7](f,a)|0){d=s;l=a;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=a;l=f;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=f;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));b=b+4|0}else b=d}else b=d}else b=d}}else{m=Za[k[c>>2]&7](i,a)|0;b=Za[k[c>>2]&7](p,i)|0;if(!m){if(!b){b=0;break}d=s;l=i;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=i;l=p;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=p;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));if(!(Za[k[c>>2]&7](i,a)|0)){b=1;break}d=s;l=a;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=a;l=i;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=i;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));b=2;break}if(b){d=s;l=a;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=a;l=p;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=p;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));b=1;break}d=s;l=a;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=a;l=i;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=i;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));if(Za[k[c>>2]&7](p,i)|0){d=s;l=i;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=i;l=p;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=p;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));b=2}else b=1}while(0);do if(Za[k[c>>2]&7](a,i)|0)e=p;else{e=p;while(1){e=e+-44|0;if((a|0)==(e|0))break;if(Za[k[c>>2]&7](e,i)|0){o=65;break}}if((o|0)==65){o=0;d=s;l=a;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=a;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));b=b+1|0;break}b=a+44|0;if(!(Za[k[c>>2]&7](a,p)|0)){if((b|0)==(p|0)){o=82;break a}else e=a;while(1){d=b+44|0;if(Za[k[c>>2]&7](a,b)|0)break;if((d|0)==(p|0)){o=82;break a}else{e=b;b=d}}b=e+44|0;d=s;l=b;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=b;l=p;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=p;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));b=e+88|0}if((b|0)==(p|0)){o=82;break a}else d=p;while(1){e=b;while(1){b=e+44|0;if(Za[k[c>>2]&7](a,e)|0){f=d;break}else e=b}do f=f+-44|0;while(Za[k[c>>2]&7](a,f)|0);if(e>>>0>=f>>>0){a=e;continue b}d=s;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=f;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=f;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=f}}while(0);d=a+44|0;c:do if(d>>>0<e>>>0)while(1){g=d;while(1){f=g+44|0;if(Za[k[c>>2]&7](g,i)|0)g=f;else{h=e;break}}do h=h+-44|0;while(!(Za[k[c>>2]&7](h,i)|0));if(g>>>0>h>>>0){e=i;break c}d=s;l=g;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=g;l=h;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=h;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=f;e=h;i=(i|0)==(g|0)?h:i;b=b+1|0}else{g=d;e=i}while(0);if((g|0)!=(e|0)?Za[k[c>>2]&7](e,g)|0:0){d=s;l=g;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=g;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));b=b+1|0}if(!b){b=Ic(a,g,c)|0;d=g+44|0;if(Ic(d,q,c)|0){o=77;break}if(b){a=d;continue}}m=g;if((m-j|0)>=(n-m|0)){o=81;break}Ac(a,g,c);a=g+44|0}if((o|0)==77){o=0;if(b){o=82;break}else{q=g;continue}}else if((o|0)==81){o=0;Ac(g+44|0,q,c);q=g;continue}}if((o|0)==4){if(!(Za[k[c>>2]&7](p,a)|0)){r=t;return}d=s;l=a;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=a;l=p;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=p;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));r=t;return}else if((o|0)==6){e=a+44|0;q=Za[k[c>>2]&7](e,a)|0;b=Za[k[c>>2]&7](p,e)|0;if(!q){if(!b){r=t;return}d=s;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=p;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=p;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));if(!(Za[k[c>>2]&7](e,a)|0)){r=t;return}d=s;l=a;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=a;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));r=t;return}if(b){d=s;l=a;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=a;l=p;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=p;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));r=t;return}d=s;l=a;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=a;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));if(!(Za[k[c>>2]&7](p,e)|0)){r=t;return}d=s;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=p;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=p;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));r=t;return}else if((o|0)==14){Hc(a,a+44|0,a+88|0,p,c)|0;r=t;return}else if((o|0)==15){b=a+44|0;e=a+88|0;f=a+132|0;Hc(a,b,e,f,c)|0;if(!(Za[k[c>>2]&7](p,f)|0)){r=t;return}d=s;l=f;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=f;l=p;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=p;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));if(!(Za[k[c>>2]&7](f,e)|0)){r=t;return}d=s;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=f;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=f;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));if(!(Za[k[c>>2]&7](e,b)|0)){r=t;return}d=s;l=b;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=b;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));if(!(Za[k[c>>2]&7](b,a)|0)){r=t;return}d=s;l=a;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=a;l=b;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=b;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));r=t;return}else if((o|0)==21){f=a+88|0;e=a+44|0;p=Za[k[c>>2]&7](e,a)|0;b=Za[k[c>>2]&7](f,e)|0;do if(p){if(b){d=s;l=a;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=a;l=f;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=f;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));break}d=s;l=a;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=a;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));if(Za[k[c>>2]&7](f,e)|0){d=s;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=f;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=f;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0))}}else if(b){d=s;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=f;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=f;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));if(Za[k[c>>2]&7](e,a)|0){d=s;l=a;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=a;l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=e;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0))}}while(0);b=a+132|0;if((b|0)==(q|0)){r=t;return}e=f;while(1){if(Za[k[c>>2]&7](b,e)|0){d=s;l=b;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));d=b;while(1){l=e;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0));if((e|0)==(a|0))break;d=e+-44|0;if(Za[k[c>>2]&7](s,d)|0){p=e;e=d;d=p}else break}d=e;l=s;m=d+44|0;do{k[d>>2]=k[l>>2];d=d+4|0;l=l+4|0}while((d|0)<(m|0))}d=b+44|0;if((d|0)==(q|0))break;else{e=b;b=d}}r=t;return}else if((o|0)==82){r=t;return}}function Bc(a){a=a|0;var b=0,c=0,d=0,e=0,f=0;Cc(k[a+68>>2]|0);d=a+52|0;c=a+60|0;if((k[c>>2]|0)!=0?(b=k[a+56>>2]|0,e=(k[d>>2]|0)+4|0,f=k[b>>2]|0,k[f+4>>2]=k[e>>2],k[k[e>>2]>>2]=f,k[c>>2]=0,(b|0)!=(d|0)):0)do{f=b;b=k[b+4>>2]|0;$d(f)}while((b|0)!=(d|0));b=k[a+36>>2]|0;c=b;if(b){d=a+40|0;e=k[d>>2]|0;if((e|0)!=(b|0))k[d>>2]=e+(~((e+-4-c|0)>>>2)<<2);$d(b)}b=k[a+20>>2]|0;c=b;if(b){d=a+24|0;e=k[d>>2]|0;if((e|0)!=(b|0))k[d>>2]=e+(~(((e+-12-c|0)>>>0)/12|0)*12|0);$d(b)}d=k[a+4>>2]|0;if(!d)return;b=a+8|0;c=k[b>>2]|0;if((c|0)!=(d|0))k[b>>2]=c+(~(((c+-28-d|0)>>>0)/28|0)*28|0);$d(d);return}function Cc(a){a=a|0;if(!a)return;else{Cc(k[a>>2]|0);Cc(k[a+4>>2]|0);$d(a);return}}function Dc(a,b){a=a|0;b=b|0;var c=0.0,d=0.0,e=0,f=0,g=0,h=0,j=0,l=0,m=0;c=+p[a+16>>3];d=+p[b+16>>3];if(c<d){m=1;return m|0}if(d<c){m=0;return m|0}e=i[a+24>>0]|0;f=i[b+24>>0]|0;if((e&255)<(f&255)){m=1;return m|0}if((f&255)<(e&255)){m=0;return m|0}g=k[a+8>>2]|0;b=k[b+8>>2]|0;e=k[g+28>>2]|0;f=k[g+16>>2]|0;a=e-f|0;g=(k[g+32>>2]|0)-(k[g+20>>2]|0)|0;h=k[b+28>>2]|0;j=k[b+16>>2]|0;l=h-j|0;b=(k[b+32>>2]|0)-(k[b+20>>2]|0)|0;if((a|0)>=0){if((e|0)==(f|0)){m=0;return m|0}}else{a=0-a|0;g=0-g|0}if((l|0)>=0)if((h|0)==(j|0)){m=(a|0)!=0;return m|0}else e=l;else{e=0-l|0;b=0-b|0}j=(e|0)<0?0-e|0:e;h=(g|0)<0?0-g|0:g;h=ne(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;l=(a|0)<0?0-a|0:a;m=(b|0)<0?0-b|0:b;l=ne(m|0,((m|0)<0)<<31>>31|0,l|0,((l|0)<0)<<31>>31|0)|0;m=L;f=ha(e>>31|1,g>>31|1)|0;e=ha(b>>31|1,a>>31|1)|0;if((f|0)<(e|0)){m=1;return m|0}if((e|0)<(f|0)){m=0;return m|0}if((f|0)==-1){m=m>>>0<j>>>0|(m|0)==(j|0)&l>>>0<h>>>0;return m|0}else{m=j>>>0<m>>>0|(j|0)==(m|0)&h>>>0<l>>>0;return m|0}return 0}function Ec(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0;t=r;r=r+64|0;q=t+32|0;p=t;o=b;a:while(1){l=o;n=o+-32|0;s=a;b:while(1){h=s;a=l-h|0;b=a>>5;switch(b|0){case 2:{m=4;break a}case 3:{m=6;break a}case 4:{m=14;break a}case 5:{m=15;break a}case 1:case 0:{m=82;break a}default:{}}if((a|0)<992){m=21;break a}d=(b|0)/2|0;g=s+(d<<5)|0;do if((a|0)>31968){b=(b|0)/4|0;e=s+(b<<5)|0;b=s+(b+d<<5)|0;a=Fc(s,e,g,b,c)|0;if(Za[k[c>>2]&7](n,b)|0){k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];k[p+12>>2]=k[b+12>>2];k[p+16>>2]=k[b+16>>2];k[p+20>>2]=k[b+20>>2];k[p+24>>2]=k[b+24>>2];k[p+28>>2]=k[b+28>>2];k[b>>2]=k[n>>2];k[b+4>>2]=k[n+4>>2];k[b+8>>2]=k[n+8>>2];k[b+12>>2]=k[n+12>>2];k[b+16>>2]=k[n+16>>2];k[b+20>>2]=k[n+20>>2];j[b+24>>1]=j[n+24>>1]|0;i[b+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;d=a+1|0;if(Za[k[c>>2]&7](b,g)|0){k[p>>2]=k[g>>2];k[p+4>>2]=k[g+4>>2];k[p+8>>2]=k[g+8>>2];k[p+12>>2]=k[g+12>>2];k[p+16>>2]=k[g+16>>2];k[p+20>>2]=k[g+20>>2];k[p+24>>2]=k[g+24>>2];k[p+28>>2]=k[g+28>>2];k[g>>2]=k[b>>2];k[g+4>>2]=k[b+4>>2];k[g+8>>2]=k[b+8>>2];k[g+12>>2]=k[b+12>>2];k[g+16>>2]=k[b+16>>2];k[g+20>>2]=k[b+20>>2];j[g+24>>1]=j[b+24>>1]|0;i[g+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;b=a+2|0;if(Za[k[c>>2]&7](g,e)|0){k[p>>2]=k[e>>2];k[p+4>>2]=k[e+4>>2];k[p+8>>2]=k[e+8>>2];k[p+12>>2]=k[e+12>>2];k[p+16>>2]=k[e+16>>2];k[p+20>>2]=k[e+20>>2];k[p+24>>2]=k[e+24>>2];k[p+28>>2]=k[e+28>>2];k[e>>2]=k[g>>2];k[e+4>>2]=k[g+4>>2];k[e+8>>2]=k[g+8>>2];k[e+12>>2]=k[g+12>>2];k[e+16>>2]=k[g+16>>2];k[e+20>>2]=k[g+20>>2];j[e+24>>1]=j[g+24>>1]|0;i[e+26>>0]=i[g+26>>0]|0;k[g>>2]=k[p>>2];k[g+4>>2]=k[p+4>>2];k[g+8>>2]=k[p+8>>2];k[g+12>>2]=k[p+12>>2];k[g+16>>2]=k[p+16>>2];k[g+20>>2]=k[p+20>>2];j[g+24>>1]=j[p+24>>1]|0;i[g+26>>0]=i[p+26>>0]|0;if(Za[k[c>>2]&7](e,s)|0){k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[e>>2];k[s+4>>2]=k[e+4>>2];k[s+8>>2]=k[e+8>>2];k[s+12>>2]=k[e+12>>2];k[s+16>>2]=k[e+16>>2];k[s+20>>2]=k[e+20>>2];j[s+24>>1]=j[e+24>>1]|0;i[s+26>>0]=i[e+26>>0]|0;k[e>>2]=k[p>>2];k[e+4>>2]=k[p+4>>2];k[e+8>>2]=k[p+8>>2];k[e+12>>2]=k[p+12>>2];k[e+16>>2]=k[p+16>>2];k[e+20>>2]=k[p+20>>2];j[e+24>>1]=j[p+24>>1]|0;i[e+26>>0]=i[p+26>>0]|0;a=a+4|0}else a=a+3|0}else a=b}else a=d}}else{f=Za[k[c>>2]&7](g,s)|0;a=Za[k[c>>2]&7](n,g)|0;if(!f){if(!a){a=0;break};k[p>>2]=k[g>>2];k[p+4>>2]=k[g+4>>2];k[p+8>>2]=k[g+8>>2];k[p+12>>2]=k[g+12>>2];k[p+16>>2]=k[g+16>>2];k[p+20>>2]=k[g+20>>2];k[p+24>>2]=k[g+24>>2];k[p+28>>2]=k[g+28>>2];k[g>>2]=k[n>>2];k[g+4>>2]=k[n+4>>2];k[g+8>>2]=k[n+8>>2];k[g+12>>2]=k[n+12>>2];k[g+16>>2]=k[n+16>>2];k[g+20>>2]=k[n+20>>2];j[g+24>>1]=j[n+24>>1]|0;i[g+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;if(!(Za[k[c>>2]&7](g,s)|0)){a=1;break};k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[g>>2];k[s+4>>2]=k[g+4>>2];k[s+8>>2]=k[g+8>>2];k[s+12>>2]=k[g+12>>2];k[s+16>>2]=k[g+16>>2];k[s+20>>2]=k[g+20>>2];j[s+24>>1]=j[g+24>>1]|0;i[s+26>>0]=i[g+26>>0]|0;k[g>>2]=k[p>>2];k[g+4>>2]=k[p+4>>2];k[g+8>>2]=k[p+8>>2];k[g+12>>2]=k[p+12>>2];k[g+16>>2]=k[p+16>>2];k[g+20>>2]=k[p+20>>2];j[g+24>>1]=j[p+24>>1]|0;i[g+26>>0]=i[p+26>>0]|0;a=2;break};k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];if(a){k[s>>2]=k[n>>2];k[s+4>>2]=k[n+4>>2];k[s+8>>2]=k[n+8>>2];k[s+12>>2]=k[n+12>>2];k[s+16>>2]=k[n+16>>2];k[s+20>>2]=k[n+20>>2];j[s+24>>1]=j[n+24>>1]|0;i[s+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;a=1;break};k[s>>2]=k[g>>2];k[s+4>>2]=k[g+4>>2];k[s+8>>2]=k[g+8>>2];k[s+12>>2]=k[g+12>>2];k[s+16>>2]=k[g+16>>2];k[s+20>>2]=k[g+20>>2];j[s+24>>1]=j[g+24>>1]|0;i[s+26>>0]=i[g+26>>0]|0;k[g>>2]=k[p>>2];k[g+4>>2]=k[p+4>>2];k[g+8>>2]=k[p+8>>2];k[g+12>>2]=k[p+12>>2];k[g+16>>2]=k[p+16>>2];k[g+20>>2]=k[p+20>>2];j[g+24>>1]=j[p+24>>1]|0;i[g+26>>0]=i[p+26>>0]|0;if(Za[k[c>>2]&7](n,g)|0){k[p>>2]=k[g>>2];k[p+4>>2]=k[g+4>>2];k[p+8>>2]=k[g+8>>2];k[p+12>>2]=k[g+12>>2];k[p+16>>2]=k[g+16>>2];k[p+20>>2]=k[g+20>>2];k[p+24>>2]=k[g+24>>2];k[p+28>>2]=k[g+28>>2];k[g>>2]=k[n>>2];k[g+4>>2]=k[n+4>>2];k[g+8>>2]=k[n+8>>2];k[g+12>>2]=k[n+12>>2];k[g+16>>2]=k[n+16>>2];k[g+20>>2]=k[n+20>>2];j[g+24>>1]=j[n+24>>1]|0;i[g+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;a=2}else a=1}while(0);do if(Za[k[c>>2]&7](s,g)|0)b=n;else{b=n;while(1){b=b+-32|0;if((s|0)==(b|0))break;if(Za[k[c>>2]&7](b,g)|0){m=65;break}}if((m|0)==65){m=0;k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[b>>2];k[s+4>>2]=k[b+4>>2];k[s+8>>2]=k[b+8>>2];k[s+12>>2]=k[b+12>>2];k[s+16>>2]=k[b+16>>2];k[s+20>>2]=k[b+20>>2];j[s+24>>1]=j[b+24>>1]|0;i[s+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;a=a+1|0;break}a=s+32|0;if(!(Za[k[c>>2]&7](s,n)|0)){if((a|0)==(n|0)){m=82;break a}else b=s;while(1){if(Za[k[c>>2]&7](s,a)|0)break;b=a+32|0;if((b|0)==(n|0)){m=82;break a}else{h=a;a=b;b=h}}k[p>>2]=k[a>>2];k[p+4>>2]=k[a+4>>2];k[p+8>>2]=k[a+8>>2];k[p+12>>2]=k[a+12>>2];k[p+16>>2]=k[a+16>>2];k[p+20>>2]=k[a+20>>2];k[p+24>>2]=k[a+24>>2];k[p+28>>2]=k[a+28>>2];k[a>>2]=k[n>>2];k[a+4>>2]=k[n+4>>2];k[a+8>>2]=k[n+8>>2];k[a+12>>2]=k[n+12>>2];k[a+16>>2]=k[n+16>>2];k[a+20>>2]=k[n+20>>2];j[a+24>>1]=j[n+24>>1]|0;i[a+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;a=b+64|0}if((a|0)==(n|0)){m=82;break a}else d=n;while(1){b=a;while(1){a=b+32|0;if(Za[k[c>>2]&7](s,b)|0)break;else b=a}do d=d+-32|0;while(Za[k[c>>2]&7](s,d)|0);if(b>>>0>=d>>>0){s=b;continue b};k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];k[p+12>>2]=k[b+12>>2];k[p+16>>2]=k[b+16>>2];k[p+20>>2]=k[b+20>>2];k[p+24>>2]=k[b+24>>2];k[p+28>>2]=k[b+28>>2];k[b>>2]=k[d>>2];k[b+4>>2]=k[d+4>>2];k[b+8>>2]=k[d+8>>2];k[b+12>>2]=k[d+12>>2];k[b+16>>2]=k[d+16>>2];k[b+20>>2]=k[d+20>>2];j[b+24>>1]=j[d+24>>1]|0;i[b+26>>0]=i[d+26>>0]|0;k[d>>2]=k[p>>2];k[d+4>>2]=k[p+4>>2];k[d+8>>2]=k[p+8>>2];k[d+12>>2]=k[p+12>>2];k[d+16>>2]=k[p+16>>2];k[d+20>>2]=k[p+20>>2];j[d+24>>1]=j[p+24>>1]|0;i[d+26>>0]=i[p+26>>0]|0}}while(0);d=s+32|0;c:do if(d>>>0<b>>>0)while(1){e=d;while(1){d=e+32|0;if(Za[k[c>>2]&7](e,g)|0)e=d;else{f=b;break}}do f=f+-32|0;while(!(Za[k[c>>2]&7](f,g)|0));if(e>>>0>f>>>0){d=e;b=g;break c};k[p>>2]=k[e>>2];k[p+4>>2]=k[e+4>>2];k[p+8>>2]=k[e+8>>2];k[p+12>>2]=k[e+12>>2];k[p+16>>2]=k[e+16>>2];k[p+20>>2]=k[e+20>>2];k[p+24>>2]=k[e+24>>2];k[p+28>>2]=k[e+28>>2];k[e>>2]=k[f>>2];k[e+4>>2]=k[f+4>>2];k[e+8>>2]=k[f+8>>2];k[e+12>>2]=k[f+12>>2];k[e+16>>2]=k[f+16>>2];k[e+20>>2]=k[f+20>>2];j[e+24>>1]=j[f+24>>1]|0;i[e+26>>0]=i[f+26>>0]|0;k[f>>2]=k[p>>2];k[f+4>>2]=k[p+4>>2];k[f+8>>2]=k[p+8>>2];k[f+12>>2]=k[p+12>>2];k[f+16>>2]=k[p+16>>2];k[f+20>>2]=k[p+20>>2];j[f+24>>1]=j[p+24>>1]|0;i[f+26>>0]=i[p+26>>0]|0;b=f;g=(g|0)==(e|0)?f:g;a=a+1|0}else b=g;while(0);if((d|0)!=(b|0)?Za[k[c>>2]&7](b,d)|0:0){k[p>>2]=k[d>>2];k[p+4>>2]=k[d+4>>2];k[p+8>>2]=k[d+8>>2];k[p+12>>2]=k[d+12>>2];k[p+16>>2]=k[d+16>>2];k[p+20>>2]=k[d+20>>2];k[p+24>>2]=k[d+24>>2];k[p+28>>2]=k[d+28>>2];k[d>>2]=k[b>>2];k[d+4>>2]=k[b+4>>2];k[d+8>>2]=k[b+8>>2];k[d+12>>2]=k[b+12>>2];k[d+16>>2]=k[b+16>>2];k[d+20>>2]=k[b+20>>2];j[d+24>>1]=j[b+24>>1]|0;i[d+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;a=a+1|0}if(!a){a=Gc(s,d,c)|0;b=d+32|0;if(Gc(b,o,c)|0){m=77;break}if(a){s=b;continue}}g=d;if((g-h|0)>=(l-g|0)){m=81;break}Ec(s,d,c);s=d+32|0}if((m|0)==77){m=0;if(a){m=82;break}else{a=s;o=d;continue}}else if((m|0)==81){m=0;Ec(d+32|0,o,c);a=s;o=d;continue}}if((m|0)==4){if(!(Za[k[c>>2]&7](n,s)|0)){r=t;return};k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[n>>2];k[s+4>>2]=k[n+4>>2];k[s+8>>2]=k[n+8>>2];k[s+12>>2]=k[n+12>>2];k[s+16>>2]=k[n+16>>2];k[s+20>>2]=k[n+20>>2];j[s+24>>1]=j[n+24>>1]|0;i[s+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;r=t;return}else if((m|0)==6){b=s+32|0;q=Za[k[c>>2]&7](b,s)|0;a=Za[k[c>>2]&7](n,b)|0;if(!q){if(!a){r=t;return};k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];k[p+12>>2]=k[b+12>>2];k[p+16>>2]=k[b+16>>2];k[p+20>>2]=k[b+20>>2];k[p+24>>2]=k[b+24>>2];k[p+28>>2]=k[b+28>>2];k[b>>2]=k[n>>2];k[b+4>>2]=k[n+4>>2];k[b+8>>2]=k[n+8>>2];k[b+12>>2]=k[n+12>>2];k[b+16>>2]=k[n+16>>2];k[b+20>>2]=k[n+20>>2];j[b+24>>1]=j[n+24>>1]|0;i[b+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;if(!(Za[k[c>>2]&7](b,s)|0)){r=t;return};k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[b>>2];k[s+4>>2]=k[b+4>>2];k[s+8>>2]=k[b+8>>2];k[s+12>>2]=k[b+12>>2];k[s+16>>2]=k[b+16>>2];k[s+20>>2]=k[b+20>>2];j[s+24>>1]=j[b+24>>1]|0;i[s+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;r=t;return};k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];if(a){k[s>>2]=k[n>>2];k[s+4>>2]=k[n+4>>2];k[s+8>>2]=k[n+8>>2];k[s+12>>2]=k[n+12>>2];k[s+16>>2]=k[n+16>>2];k[s+20>>2]=k[n+20>>2];j[s+24>>1]=j[n+24>>1]|0;i[s+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;r=t;return};k[s>>2]=k[b>>2];k[s+4>>2]=k[b+4>>2];k[s+8>>2]=k[b+8>>2];k[s+12>>2]=k[b+12>>2];k[s+16>>2]=k[b+16>>2];k[s+20>>2]=k[b+20>>2];j[s+24>>1]=j[b+24>>1]|0;i[s+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;if(!(Za[k[c>>2]&7](n,b)|0)){r=t;return};k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];k[p+12>>2]=k[b+12>>2];k[p+16>>2]=k[b+16>>2];k[p+20>>2]=k[b+20>>2];k[p+24>>2]=k[b+24>>2];k[p+28>>2]=k[b+28>>2];k[b>>2]=k[n>>2];k[b+4>>2]=k[n+4>>2];k[b+8>>2]=k[n+8>>2];k[b+12>>2]=k[n+12>>2];k[b+16>>2]=k[n+16>>2];k[b+20>>2]=k[n+20>>2];j[b+24>>1]=j[n+24>>1]|0;i[b+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;r=t;return}else if((m|0)==14){Fc(s,s+32|0,s+64|0,n,c)|0;r=t;return}else if((m|0)==15){a=s+32|0;b=s+64|0;d=s+96|0;Fc(s,a,b,d,c)|0;if(!(Za[k[c>>2]&7](n,d)|0)){r=t;return};k[p>>2]=k[d>>2];k[p+4>>2]=k[d+4>>2];k[p+8>>2]=k[d+8>>2];k[p+12>>2]=k[d+12>>2];k[p+16>>2]=k[d+16>>2];k[p+20>>2]=k[d+20>>2];k[p+24>>2]=k[d+24>>2];k[p+28>>2]=k[d+28>>2];k[d>>2]=k[n>>2];k[d+4>>2]=k[n+4>>2];k[d+8>>2]=k[n+8>>2];k[d+12>>2]=k[n+12>>2];k[d+16>>2]=k[n+16>>2];k[d+20>>2]=k[n+20>>2];j[d+24>>1]=j[n+24>>1]|0;i[d+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;if(!(Za[k[c>>2]&7](d,b)|0)){r=t;return};k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];k[p+12>>2]=k[b+12>>2];k[p+16>>2]=k[b+16>>2];k[p+20>>2]=k[b+20>>2];k[p+24>>2]=k[b+24>>2];k[p+28>>2]=k[b+28>>2];k[b>>2]=k[d>>2];k[b+4>>2]=k[d+4>>2];k[b+8>>2]=k[d+8>>2];k[b+12>>2]=k[d+12>>2];k[b+16>>2]=k[d+16>>2];k[b+20>>2]=k[d+20>>2];j[b+24>>1]=j[d+24>>1]|0;i[b+26>>0]=i[d+26>>0]|0;k[d>>2]=k[p>>2];k[d+4>>2]=k[p+4>>2];k[d+8>>2]=k[p+8>>2];k[d+12>>2]=k[p+12>>2];k[d+16>>2]=k[p+16>>2];k[d+20>>2]=k[p+20>>2];j[d+24>>1]=j[p+24>>1]|0;i[d+26>>0]=i[p+26>>0]|0;if(!(Za[k[c>>2]&7](b,a)|0)){r=t;return};k[p>>2]=k[a>>2];k[p+4>>2]=k[a+4>>2];k[p+8>>2]=k[a+8>>2];k[p+12>>2]=k[a+12>>2];k[p+16>>2]=k[a+16>>2];k[p+20>>2]=k[a+20>>2];k[p+24>>2]=k[a+24>>2];k[p+28>>2]=k[a+28>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];j[a+24>>1]=j[b+24>>1]|0;i[a+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;if(!(Za[k[c>>2]&7](a,s)|0)){r=t;return};k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[a>>2];k[s+4>>2]=k[a+4>>2];k[s+8>>2]=k[a+8>>2];k[s+12>>2]=k[a+12>>2];k[s+16>>2]=k[a+16>>2];k[s+20>>2]=k[a+20>>2];j[s+24>>1]=j[a+24>>1]|0;i[s+26>>0]=i[a+26>>0]|0;k[a>>2]=k[p>>2];k[a+4>>2]=k[p+4>>2];k[a+8>>2]=k[p+8>>2];k[a+12>>2]=k[p+12>>2];k[a+16>>2]=k[p+16>>2];k[a+20>>2]=k[p+20>>2];j[a+24>>1]=j[p+24>>1]|0;i[a+26>>0]=i[p+26>>0]|0;r=t;return}else if((m|0)==21){b=s+64|0;a=s+32|0;n=Za[k[c>>2]&7](a,s)|0;d=Za[k[c>>2]&7](b,a)|0;do if(n){k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];if(d){k[s>>2]=k[b>>2];k[s+4>>2]=k[b+4>>2];k[s+8>>2]=k[b+8>>2];k[s+12>>2]=k[b+12>>2];k[s+16>>2]=k[b+16>>2];k[s+20>>2]=k[b+20>>2];j[s+24>>1]=j[b+24>>1]|0;i[s+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;break};k[s>>2]=k[a>>2];k[s+4>>2]=k[a+4>>2];k[s+8>>2]=k[a+8>>2];k[s+12>>2]=k[a+12>>2];k[s+16>>2]=k[a+16>>2];k[s+20>>2]=k[a+20>>2];j[s+24>>1]=j[a+24>>1]|0;i[s+26>>0]=i[a+26>>0]|0;k[a>>2]=k[p>>2];k[a+4>>2]=k[p+4>>2];k[a+8>>2]=k[p+8>>2];k[a+12>>2]=k[p+12>>2];k[a+16>>2]=k[p+16>>2];k[a+20>>2]=k[p+20>>2];j[a+24>>1]=j[p+24>>1]|0;i[a+26>>0]=i[p+26>>0]|0;if(Za[k[c>>2]&7](b,a)|0){k[p>>2]=k[a>>2];k[p+4>>2]=k[a+4>>2];k[p+8>>2]=k[a+8>>2];k[p+12>>2]=k[a+12>>2];k[p+16>>2]=k[a+16>>2];k[p+20>>2]=k[a+20>>2];k[p+24>>2]=k[a+24>>2];k[p+28>>2]=k[a+28>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];j[a+24>>1]=j[b+24>>1]|0;i[a+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0}}else if(d?(k[p>>2]=k[a>>2],k[p+4>>2]=k[a+4>>2],k[p+8>>2]=k[a+8>>2],k[p+12>>2]=k[a+12>>2],k[p+16>>2]=k[a+16>>2],k[p+20>>2]=k[a+20>>2],k[p+24>>2]=k[a+24>>2],k[p+28>>2]=k[a+28>>2],k[a>>2]=k[b>>2],k[a+4>>2]=k[b+4>>2],k[a+8>>2]=k[b+8>>2],k[a+12>>2]=k[b+12>>2],k[a+16>>2]=k[b+16>>2],k[a+20>>2]=k[b+20>>2],j[a+24>>1]=j[b+24>>1]|0,i[a+26>>0]=i[b+26>>0]|0,k[b>>2]=k[p>>2],k[b+4>>2]=k[p+4>>2],k[b+8>>2]=k[p+8>>2],k[b+12>>2]=k[p+12>>2],k[b+16>>2]=k[p+16>>2],k[b+20>>2]=k[p+20>>2],j[b+24>>1]=j[p+24>>1]|0,i[b+26>>0]=i[p+26>>0]|0,Za[k[c>>2]&7](a,s)|0):0){k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[a>>2];k[s+4>>2]=k[a+4>>2];k[s+8>>2]=k[a+8>>2];k[s+12>>2]=k[a+12>>2];k[s+16>>2]=k[a+16>>2];k[s+20>>2]=k[a+20>>2];j[s+24>>1]=j[a+24>>1]|0;i[s+26>>0]=i[a+26>>0]|0;k[a>>2]=k[p>>2];k[a+4>>2]=k[p+4>>2];k[a+8>>2]=k[p+8>>2];k[a+12>>2]=k[p+12>>2];k[a+16>>2]=k[p+16>>2];k[a+20>>2]=k[p+20>>2];j[a+24>>1]=j[p+24>>1]|0;i[a+26>>0]=i[p+26>>0]|0}while(0);a=s+96|0;if((a|0)!=(o|0))while(1){if(Za[k[c>>2]&7](a,b)|0){k[q>>2]=k[a>>2];k[q+4>>2]=k[a+4>>2];k[q+8>>2]=k[a+8>>2];k[q+12>>2]=k[a+12>>2];k[q+16>>2]=k[a+16>>2];k[q+20>>2]=k[a+20>>2];k[q+24>>2]=k[a+24>>2];k[q+28>>2]=k[a+28>>2];d=a;e=b;while(1){k[d>>2]=k[e>>2];k[d+4>>2]=k[e+4>>2];k[d+8>>2]=k[e+8>>2];k[d+12>>2]=k[e+12>>2];k[d+16>>2]=k[e+16>>2];k[d+20>>2]=k[e+20>>2];j[d+24>>1]=j[e+24>>1]|0;i[d+26>>0]=i[e+26>>0]|0;if((e|0)==(s|0))break;b=e+-32|0;if(Za[k[c>>2]&7](q,b)|0){d=e;e=b}else break}k[e>>2]=k[q>>2];k[e+4>>2]=k[q+4>>2];k[e+8>>2]=k[q+8>>2];k[e+12>>2]=k[q+12>>2];k[e+16>>2]=k[q+16>>2];k[e+20>>2]=k[q+20>>2];j[e+24>>1]=j[q+24>>1]|0;i[e+26>>0]=i[q+26>>0]|0}b=a+32|0;if((b|0)==(o|0))break;else{p=a;a=b;b=p}}r=t;return}else if((m|0)==82){r=t;return}}function Fc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,l=0;h=r;r=r+32|0;g=h;l=Za[k[e>>2]&7](b,a)|0;f=Za[k[e>>2]&7](c,b)|0;do if(l){k[g>>2]=k[a>>2];k[g+4>>2]=k[a+4>>2];k[g+8>>2]=k[a+8>>2];k[g+12>>2]=k[a+12>>2];k[g+16>>2]=k[a+16>>2];k[g+20>>2]=k[a+20>>2];k[g+24>>2]=k[a+24>>2];k[g+28>>2]=k[a+28>>2];if(f){k[a>>2]=k[c>>2];k[a+4>>2]=k[c+4>>2];k[a+8>>2]=k[c+8>>2];k[a+12>>2]=k[c+12>>2];k[a+16>>2]=k[c+16>>2];k[a+20>>2]=k[c+20>>2];j[a+24>>1]=j[c+24>>1]|0;i[a+26>>0]=i[c+26>>0]|0;k[c>>2]=k[g>>2];k[c+4>>2]=k[g+4>>2];k[c+8>>2]=k[g+8>>2];k[c+12>>2]=k[g+12>>2];k[c+16>>2]=k[g+16>>2];k[c+20>>2]=k[g+20>>2];j[c+24>>1]=j[g+24>>1]|0;i[c+26>>0]=i[g+26>>0]|0;f=1;break};k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];j[a+24>>1]=j[b+24>>1]|0;i[a+26>>0]=i[b+26>>0]|0;k[b>>2]=k[g>>2];k[b+4>>2]=k[g+4>>2];k[b+8>>2]=k[g+8>>2];k[b+12>>2]=k[g+12>>2];k[b+16>>2]=k[g+16>>2];k[b+20>>2]=k[g+20>>2];j[b+24>>1]=j[g+24>>1]|0;i[b+26>>0]=i[g+26>>0]|0;if(Za[k[e>>2]&7](c,b)|0){k[g>>2]=k[b>>2];k[g+4>>2]=k[b+4>>2];k[g+8>>2]=k[b+8>>2];k[g+12>>2]=k[b+12>>2];k[g+16>>2]=k[b+16>>2];k[g+20>>2]=k[b+20>>2];k[g+24>>2]=k[b+24>>2];k[g+28>>2]=k[b+28>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];j[b+24>>1]=j[c+24>>1]|0;i[b+26>>0]=i[c+26>>0]|0;k[c>>2]=k[g>>2];k[c+4>>2]=k[g+4>>2];k[c+8>>2]=k[g+8>>2];k[c+12>>2]=k[g+12>>2];k[c+16>>2]=k[g+16>>2];k[c+20>>2]=k[g+20>>2];j[c+24>>1]=j[g+24>>1]|0;i[c+26>>0]=i[g+26>>0]|0;f=2}else f=1}else if(f){k[g>>2]=k[b>>2];k[g+4>>2]=k[b+4>>2];k[g+8>>2]=k[b+8>>2];k[g+12>>2]=k[b+12>>2];k[g+16>>2]=k[b+16>>2];k[g+20>>2]=k[b+20>>2];k[g+24>>2]=k[b+24>>2];k[g+28>>2]=k[b+28>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];j[b+24>>1]=j[c+24>>1]|0;i[b+26>>0]=i[c+26>>0]|0;k[c>>2]=k[g>>2];k[c+4>>2]=k[g+4>>2];k[c+8>>2]=k[g+8>>2];k[c+12>>2]=k[g+12>>2];k[c+16>>2]=k[g+16>>2];k[c+20>>2]=k[g+20>>2];j[c+24>>1]=j[g+24>>1]|0;i[c+26>>0]=i[g+26>>0]|0;if(Za[k[e>>2]&7](b,a)|0){k[g>>2]=k[a>>2];k[g+4>>2]=k[a+4>>2];k[g+8>>2]=k[a+8>>2];k[g+12>>2]=k[a+12>>2];k[g+16>>2]=k[a+16>>2];k[g+20>>2]=k[a+20>>2];k[g+24>>2]=k[a+24>>2];k[g+28>>2]=k[a+28>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];j[a+24>>1]=j[b+24>>1]|0;i[a+26>>0]=i[b+26>>0]|0;k[b>>2]=k[g>>2];k[b+4>>2]=k[g+4>>2];k[b+8>>2]=k[g+8>>2];k[b+12>>2]=k[g+12>>2];k[b+16>>2]=k[g+16>>2];k[b+20>>2]=k[g+20>>2];j[b+24>>1]=j[g+24>>1]|0;i[b+26>>0]=i[g+26>>0]|0;f=2}else f=1}else f=0;while(0);if(!(Za[k[e>>2]&7](d,c)|0)){l=f;r=h;return l|0};k[g>>2]=k[c>>2];k[g+4>>2]=k[c+4>>2];k[g+8>>2]=k[c+8>>2];k[g+12>>2]=k[c+12>>2];k[g+16>>2]=k[c+16>>2];k[g+20>>2]=k[c+20>>2];k[g+24>>2]=k[c+24>>2];k[g+28>>2]=k[c+28>>2];k[c>>2]=k[d>>2];k[c+4>>2]=k[d+4>>2];k[c+8>>2]=k[d+8>>2];k[c+12>>2]=k[d+12>>2];k[c+16>>2]=k[d+16>>2];k[c+20>>2]=k[d+20>>2];j[c+24>>1]=j[d+24>>1]|0;i[c+26>>0]=i[d+26>>0]|0;k[d>>2]=k[g>>2];k[d+4>>2]=k[g+4>>2];k[d+8>>2]=k[g+8>>2];k[d+12>>2]=k[g+12>>2];k[d+16>>2]=k[g+16>>2];k[d+20>>2]=k[g+20>>2];j[d+24>>1]=j[g+24>>1]|0;i[d+26>>0]=i[g+26>>0]|0;if(!(Za[k[e>>2]&7](c,b)|0)){l=f+1|0;r=h;return l|0};k[g>>2]=k[b>>2];k[g+4>>2]=k[b+4>>2];k[g+8>>2]=k[b+8>>2];k[g+12>>2]=k[b+12>>2];k[g+16>>2]=k[b+16>>2];k[g+20>>2]=k[b+20>>2];k[g+24>>2]=k[b+24>>2];k[g+28>>2]=k[b+28>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];j[b+24>>1]=j[c+24>>1]|0;i[b+26>>0]=i[c+26>>0]|0;k[c>>2]=k[g>>2];k[c+4>>2]=k[g+4>>2];k[c+8>>2]=k[g+8>>2];k[c+12>>2]=k[g+12>>2];k[c+16>>2]=k[g+16>>2];k[c+20>>2]=k[g+20>>2];j[c+24>>1]=j[g+24>>1]|0;i[c+26>>0]=i[g+26>>0]|0;if(!(Za[k[e>>2]&7](b,a)|0)){l=f+2|0;r=h;return l|0};k[g>>2]=k[a>>2];k[g+4>>2]=k[a+4>>2];k[g+8>>2]=k[a+8>>2];k[g+12>>2]=k[a+12>>2];k[g+16>>2]=k[a+16>>2];k[g+20>>2]=k[a+20>>2];k[g+24>>2]=k[a+24>>2];k[g+28>>2]=k[a+28>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];j[a+24>>1]=j[b+24>>1]|0;i[a+26>>0]=i[b+26>>0]|0;k[b>>2]=k[g>>2];k[b+4>>2]=k[g+4>>2];k[b+8>>2]=k[g+8>>2];k[b+12>>2]=k[g+12>>2];k[b+16>>2]=k[g+16>>2];k[b+20>>2]=k[g+20>>2];j[b+24>>1]=j[g+24>>1]|0;i[b+26>>0]=i[g+26>>0]|0;l=f+3|0;r=h;return l|0}function Gc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,l=0,m=0,n=0;n=r;r=r+64|0;h=n+32|0;l=n;switch(b-a>>5|0){case 2:{d=b+-32|0;if(!(Za[k[c>>2]&7](d,a)|0)){a=1;r=n;return a|0};k[h>>2]=k[a>>2];k[h+4>>2]=k[a+4>>2];k[h+8>>2]=k[a+8>>2];k[h+12>>2]=k[a+12>>2];k[h+16>>2]=k[a+16>>2];k[h+20>>2]=k[a+20>>2];k[h+24>>2]=k[a+24>>2];k[h+28>>2]=k[a+28>>2];k[a>>2]=k[d>>2];k[a+4>>2]=k[d+4>>2];k[a+8>>2]=k[d+8>>2];k[a+12>>2]=k[d+12>>2];k[a+16>>2]=k[d+16>>2];k[a+20>>2]=k[d+20>>2];j[a+24>>1]=j[d+24>>1]|0;i[a+26>>0]=i[d+26>>0]|0;k[d>>2]=k[h>>2];k[d+4>>2]=k[h+4>>2];k[d+8>>2]=k[h+8>>2];k[d+12>>2]=k[h+12>>2];k[d+16>>2]=k[h+16>>2];k[d+20>>2]=k[h+20>>2];j[d+24>>1]=j[h+24>>1]|0;i[d+26>>0]=i[h+26>>0]|0;a=1;r=n;return a|0}case 3:{f=a+32|0;e=b+-32|0;b=Za[k[c>>2]&7](f,a)|0;d=Za[k[c>>2]&7](e,f)|0;if(!b){if(!d){a=1;r=n;return a|0};k[h>>2]=k[f>>2];k[h+4>>2]=k[f+4>>2];k[h+8>>2]=k[f+8>>2];k[h+12>>2]=k[f+12>>2];k[h+16>>2]=k[f+16>>2];k[h+20>>2]=k[f+20>>2];k[h+24>>2]=k[f+24>>2];k[h+28>>2]=k[f+28>>2];k[f>>2]=k[e>>2];k[f+4>>2]=k[e+4>>2];k[f+8>>2]=k[e+8>>2];k[f+12>>2]=k[e+12>>2];k[f+16>>2]=k[e+16>>2];k[f+20>>2]=k[e+20>>2];j[f+24>>1]=j[e+24>>1]|0;i[f+26>>0]=i[e+26>>0]|0;k[e>>2]=k[h>>2];k[e+4>>2]=k[h+4>>2];k[e+8>>2]=k[h+8>>2];k[e+12>>2]=k[h+12>>2];k[e+16>>2]=k[h+16>>2];k[e+20>>2]=k[h+20>>2];j[e+24>>1]=j[h+24>>1]|0;i[e+26>>0]=i[h+26>>0]|0;if(!(Za[k[c>>2]&7](f,a)|0)){a=1;r=n;return a|0};k[h>>2]=k[a>>2];k[h+4>>2]=k[a+4>>2];k[h+8>>2]=k[a+8>>2];k[h+12>>2]=k[a+12>>2];k[h+16>>2]=k[a+16>>2];k[h+20>>2]=k[a+20>>2];k[h+24>>2]=k[a+24>>2];k[h+28>>2]=k[a+28>>2];k[a>>2]=k[f>>2];k[a+4>>2]=k[f+4>>2];k[a+8>>2]=k[f+8>>2];k[a+12>>2]=k[f+12>>2];k[a+16>>2]=k[f+16>>2];k[a+20>>2]=k[f+20>>2];j[a+24>>1]=j[f+24>>1]|0;i[a+26>>0]=i[f+26>>0]|0;k[f>>2]=k[h>>2];k[f+4>>2]=k[h+4>>2];k[f+8>>2]=k[h+8>>2];k[f+12>>2]=k[h+12>>2];k[f+16>>2]=k[h+16>>2];k[f+20>>2]=k[h+20>>2];j[f+24>>1]=j[h+24>>1]|0;i[f+26>>0]=i[h+26>>0]|0;a=1;r=n;return a|0};k[h>>2]=k[a>>2];k[h+4>>2]=k[a+4>>2];k[h+8>>2]=k[a+8>>2];k[h+12>>2]=k[a+12>>2];k[h+16>>2]=k[a+16>>2];k[h+20>>2]=k[a+20>>2];k[h+24>>2]=k[a+24>>2];k[h+28>>2]=k[a+28>>2];if(d){k[a>>2]=k[e>>2];k[a+4>>2]=k[e+4>>2];k[a+8>>2]=k[e+8>>2];k[a+12>>2]=k[e+12>>2];k[a+16>>2]=k[e+16>>2];k[a+20>>2]=k[e+20>>2];j[a+24>>1]=j[e+24>>1]|0;i[a+26>>0]=i[e+26>>0]|0;k[e>>2]=k[h>>2];k[e+4>>2]=k[h+4>>2];k[e+8>>2]=k[h+8>>2];k[e+12>>2]=k[h+12>>2];k[e+16>>2]=k[h+16>>2];k[e+20>>2]=k[h+20>>2];j[e+24>>1]=j[h+24>>1]|0;i[e+26>>0]=i[h+26>>0]|0;a=1;r=n;return a|0};k[a>>2]=k[f>>2];k[a+4>>2]=k[f+4>>2];k[a+8>>2]=k[f+8>>2];k[a+12>>2]=k[f+12>>2];k[a+16>>2]=k[f+16>>2];k[a+20>>2]=k[f+20>>2];j[a+24>>1]=j[f+24>>1]|0;i[a+26>>0]=i[f+26>>0]|0;k[f>>2]=k[h>>2];k[f+4>>2]=k[h+4>>2];k[f+8>>2]=k[h+8>>2];k[f+12>>2]=k[h+12>>2];k[f+16>>2]=k[h+16>>2];k[f+20>>2]=k[h+20>>2];j[f+24>>1]=j[h+24>>1]|0;i[f+26>>0]=i[h+26>>0]|0;if(!(Za[k[c>>2]&7](e,f)|0)){a=1;r=n;return a|0};k[h>>2]=k[f>>2];k[h+4>>2]=k[f+4>>2];k[h+8>>2]=k[f+8>>2];k[h+12>>2]=k[f+12>>2];k[h+16>>2]=k[f+16>>2];k[h+20>>2]=k[f+20>>2];k[h+24>>2]=k[f+24>>2];k[h+28>>2]=k[f+28>>2];k[f>>2]=k[e>>2];k[f+4>>2]=k[e+4>>2];k[f+8>>2]=k[e+8>>2];k[f+12>>2]=k[e+12>>2];k[f+16>>2]=k[e+16>>2];k[f+20>>2]=k[e+20>>2];j[f+24>>1]=j[e+24>>1]|0;i[f+26>>0]=i[e+26>>0]|0;k[e>>2]=k[h>>2];k[e+4>>2]=k[h+4>>2];k[e+8>>2]=k[h+8>>2];k[e+12>>2]=k[h+12>>2];k[e+16>>2]=k[h+16>>2];k[e+20>>2]=k[h+20>>2];j[e+24>>1]=j[h+24>>1]|0;i[e+26>>0]=i[h+26>>0]|0;a=1;r=n;return a|0}case 4:{Fc(a,a+32|0,a+64|0,b+-32|0,c)|0;a=1;r=n;return a|0}case 5:{e=a+32|0;f=a+64|0;g=a+96|0;d=b+-32|0;Fc(a,e,f,g,c)|0;if(!(Za[k[c>>2]&7](d,g)|0)){a=1;r=n;return a|0};k[h>>2]=k[g>>2];k[h+4>>2]=k[g+4>>2];k[h+8>>2]=k[g+8>>2];k[h+12>>2]=k[g+12>>2];k[h+16>>2]=k[g+16>>2];k[h+20>>2]=k[g+20>>2];k[h+24>>2]=k[g+24>>2];k[h+28>>2]=k[g+28>>2];k[g>>2]=k[d>>2];k[g+4>>2]=k[d+4>>2];k[g+8>>2]=k[d+8>>2];k[g+12>>2]=k[d+12>>2];k[g+16>>2]=k[d+16>>2];k[g+20>>2]=k[d+20>>2];j[g+24>>1]=j[d+24>>1]|0;i[g+26>>0]=i[d+26>>0]|0;k[d>>2]=k[h>>2];k[d+4>>2]=k[h+4>>2];k[d+8>>2]=k[h+8>>2];k[d+12>>2]=k[h+12>>2];k[d+16>>2]=k[h+16>>2];k[d+20>>2]=k[h+20>>2];j[d+24>>1]=j[h+24>>1]|0;i[d+26>>0]=i[h+26>>0]|0;if(!(Za[k[c>>2]&7](g,f)|0)){a=1;r=n;return a|0};k[h>>2]=k[f>>2];k[h+4>>2]=k[f+4>>2];k[h+8>>2]=k[f+8>>2];k[h+12>>2]=k[f+12>>2];k[h+16>>2]=k[f+16>>2];k[h+20>>2]=k[f+20>>2];k[h+24>>2]=k[f+24>>2];k[h+28>>2]=k[f+28>>2];k[f>>2]=k[g>>2];k[f+4>>2]=k[g+4>>2];k[f+8>>2]=k[g+8>>2];k[f+12>>2]=k[g+12>>2];k[f+16>>2]=k[g+16>>2];k[f+20>>2]=k[g+20>>2];j[f+24>>1]=j[g+24>>1]|0;i[f+26>>0]=i[g+26>>0]|0;k[g>>2]=k[h>>2];k[g+4>>2]=k[h+4>>2];k[g+8>>2]=k[h+8>>2];k[g+12>>2]=k[h+12>>2];k[g+16>>2]=k[h+16>>2];k[g+20>>2]=k[h+20>>2];j[g+24>>1]=j[h+24>>1]|0;i[g+26>>0]=i[h+26>>0]|0;if(!(Za[k[c>>2]&7](f,e)|0)){a=1;r=n;return a|0};k[h>>2]=k[e>>2];k[h+4>>2]=k[e+4>>2];k[h+8>>2]=k[e+8>>2];k[h+12>>2]=k[e+12>>2];k[h+16>>2]=k[e+16>>2];k[h+20>>2]=k[e+20>>2];k[h+24>>2]=k[e+24>>2];k[h+28>>2]=k[e+28>>2];k[e>>2]=k[f>>2];k[e+4>>2]=k[f+4>>2];k[e+8>>2]=k[f+8>>2];k[e+12>>2]=k[f+12>>2];k[e+16>>2]=k[f+16>>2];k[e+20>>2]=k[f+20>>2];j[e+24>>1]=j[f+24>>1]|0;i[e+26>>0]=i[f+26>>0]|0;k[f>>2]=k[h>>2];k[f+4>>2]=k[h+4>>2];k[f+8>>2]=k[h+8>>2];k[f+12>>2]=k[h+12>>2];k[f+16>>2]=k[h+16>>2];k[f+20>>2]=k[h+20>>2];j[f+24>>1]=j[h+24>>1]|0;i[f+26>>0]=i[h+26>>0]|0;if(!(Za[k[c>>2]&7](e,a)|0)){a=1;r=n;return a|0};k[h>>2]=k[a>>2];k[h+4>>2]=k[a+4>>2];k[h+8>>2]=k[a+8>>2];k[h+12>>2]=k[a+12>>2];k[h+16>>2]=k[a+16>>2];k[h+20>>2]=k[a+20>>2];k[h+24>>2]=k[a+24>>2];k[h+28>>2]=k[a+28>>2];k[a>>2]=k[e>>2];k[a+4>>2]=k[e+4>>2];k[a+8>>2]=k[e+8>>2];k[a+12>>2]=k[e+12>>2];k[a+16>>2]=k[e+16>>2];k[a+20>>2]=k[e+20>>2];j[a+24>>1]=j[e+24>>1]|0;i[a+26>>0]=i[e+26>>0]|0;k[e>>2]=k[h>>2];k[e+4>>2]=k[h+4>>2];k[e+8>>2]=k[h+8>>2];k[e+12>>2]=k[h+12>>2];k[e+16>>2]=k[h+16>>2];k[e+20>>2]=k[h+20>>2];j[e+24>>1]=j[h+24>>1]|0;i[e+26>>0]=i[h+26>>0]|0;a=1;r=n;return a|0}case 1:case 0:{a=1;r=n;return a|0}default:{f=a+64|0;d=a+32|0;g=Za[k[c>>2]&7](d,a)|0;e=Za[k[c>>2]&7](f,d)|0;do if(g){k[h>>2]=k[a>>2];k[h+4>>2]=k[a+4>>2];k[h+8>>2]=k[a+8>>2];k[h+12>>2]=k[a+12>>2];k[h+16>>2]=k[a+16>>2];k[h+20>>2]=k[a+20>>2];k[h+24>>2]=k[a+24>>2];k[h+28>>2]=k[a+28>>2];if(e){k[a>>2]=k[f>>2];k[a+4>>2]=k[f+4>>2];k[a+8>>2]=k[f+8>>2];k[a+12>>2]=k[f+12>>2];k[a+16>>2]=k[f+16>>2];k[a+20>>2]=k[f+20>>2];j[a+24>>1]=j[f+24>>1]|0;i[a+26>>0]=i[f+26>>0]|0;k[f>>2]=k[h>>2];k[f+4>>2]=k[h+4>>2];k[f+8>>2]=k[h+8>>2];k[f+12>>2]=k[h+12>>2];k[f+16>>2]=k[h+16>>2];k[f+20>>2]=k[h+20>>2];j[f+24>>1]=j[h+24>>1]|0;i[f+26>>0]=i[h+26>>0]|0;break};k[a>>2]=k[d>>2];k[a+4>>2]=k[d+4>>2];k[a+8>>2]=k[d+8>>2];k[a+12>>2]=k[d+12>>2];k[a+16>>2]=k[d+16>>2];k[a+20>>2]=k[d+20>>2];j[a+24>>1]=j[d+24>>1]|0;i[a+26>>0]=i[d+26>>0]|0;k[d>>2]=k[h>>2];k[d+4>>2]=k[h+4>>2];k[d+8>>2]=k[h+8>>2];k[d+12>>2]=k[h+12>>2];k[d+16>>2]=k[h+16>>2];k[d+20>>2]=k[h+20>>2];j[d+24>>1]=j[h+24>>1]|0;i[d+26>>0]=i[h+26>>0]|0;if(Za[k[c>>2]&7](f,d)|0){k[h>>2]=k[d>>2];k[h+4>>2]=k[d+4>>2];k[h+8>>2]=k[d+8>>2];k[h+12>>2]=k[d+12>>2];k[h+16>>2]=k[d+16>>2];k[h+20>>2]=k[d+20>>2];k[h+24>>2]=k[d+24>>2];k[h+28>>2]=k[d+28>>2];k[d>>2]=k[f>>2];k[d+4>>2]=k[f+4>>2];k[d+8>>2]=k[f+8>>2];k[d+12>>2]=k[f+12>>2];k[d+16>>2]=k[f+16>>2];k[d+20>>2]=k[f+20>>2];j[d+24>>1]=j[f+24>>1]|0;i[d+26>>0]=i[f+26>>0]|0;k[f>>2]=k[h>>2];k[f+4>>2]=k[h+4>>2];k[f+8>>2]=k[h+8>>2];k[f+12>>2]=k[h+12>>2];k[f+16>>2]=k[h+16>>2];k[f+20>>2]=k[h+20>>2];j[f+24>>1]=j[h+24>>1]|0;i[f+26>>0]=i[h+26>>0]|0}}else if(e?(k[h>>2]=k[d>>2],k[h+4>>2]=k[d+4>>2],k[h+8>>2]=k[d+8>>2],k[h+12>>2]=k[d+12>>2],k[h+16>>2]=k[d+16>>2],k[h+20>>2]=k[d+20>>2],k[h+24>>2]=k[d+24>>2],k[h+28>>2]=k[d+28>>2],k[d>>2]=k[f>>2],k[d+4>>2]=k[f+4>>2],k[d+8>>2]=k[f+8>>2],k[d+12>>2]=k[f+12>>2],k[d+16>>2]=k[f+16>>2],k[d+20>>2]=k[f+20>>2],j[d+24>>1]=j[f+24>>1]|0,i[d+26>>0]=i[f+26>>0]|0,k[f>>2]=k[h>>2],k[f+4>>2]=k[h+4>>2],k[f+8>>2]=k[h+8>>2],k[f+12>>2]=k[h+12>>2],k[f+16>>2]=k[h+16>>2],k[f+20>>2]=k[h+20>>2],j[f+24>>1]=j[h+24>>1]|0,i[f+26>>0]=i[h+26>>0]|0,Za[k[c>>2]&7](d,a)|0):0){k[h>>2]=k[a>>2];k[h+4>>2]=k[a+4>>2];k[h+8>>2]=k[a+8>>2];k[h+12>>2]=k[a+12>>2];k[h+16>>2]=k[a+16>>2];k[h+20>>2]=k[a+20>>2];k[h+24>>2]=k[a+24>>2];k[h+28>>2]=k[a+28>>2];k[a>>2]=k[d>>2];k[a+4>>2]=k[d+4>>2];k[a+8>>2]=k[d+8>>2];k[a+12>>2]=k[d+12>>2];k[a+16>>2]=k[d+16>>2];k[a+20>>2]=k[d+20>>2];j[a+24>>1]=j[d+24>>1]|0;i[a+26>>0]=i[d+26>>0]|0;k[d>>2]=k[h>>2];k[d+4>>2]=k[h+4>>2];k[d+8>>2]=k[h+8>>2];k[d+12>>2]=k[h+12>>2];k[d+16>>2]=k[h+16>>2];k[d+20>>2]=k[h+20>>2];j[d+24>>1]=j[h+24>>1]|0;i[d+26>>0]=i[h+26>>0]|0}while(0);e=a+96|0;if((e|0)==(b|0)){a=1;r=n;return a|0}d=0;while(1){if(Za[k[c>>2]&7](e,f)|0){k[l>>2]=k[e>>2];k[l+4>>2]=k[e+4>>2];k[l+8>>2]=k[e+8>>2];k[l+12>>2]=k[e+12>>2];k[l+16>>2]=k[e+16>>2];k[l+20>>2]=k[e+20>>2];k[l+24>>2]=k[e+24>>2];k[l+28>>2]=k[e+28>>2];g=e;h=f;while(1){k[g>>2]=k[h>>2];k[g+4>>2]=k[h+4>>2];k[g+8>>2]=k[h+8>>2];k[g+12>>2]=k[h+12>>2];k[g+16>>2]=k[h+16>>2];k[g+20>>2]=k[h+20>>2];j[g+24>>1]=j[h+24>>1]|0;i[g+26>>0]=i[h+26>>0]|0;if((h|0)==(a|0))break;f=h+-32|0;if(Za[k[c>>2]&7](l,f)|0){g=h;h=f}else break}k[h>>2]=k[l>>2];k[h+4>>2]=k[l+4>>2];k[h+8>>2]=k[l+8>>2];k[h+12>>2]=k[l+12>>2];k[h+16>>2]=k[l+16>>2];k[h+20>>2]=k[l+20>>2];j[h+24>>1]=j[l+24>>1]|0;i[h+26>>0]=i[l+26>>0]|0;d=d+1|0;if((d|0)==8)break}f=e+32|0;if((f|0)==(b|0)){d=1;m=35;break}else{h=e;e=f;f=h}}if((m|0)==35){r=n;return d|0}a=(e+32|0)==(b|0);r=n;return a|0}}return 0}function Hc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0;l=r;r=r+48|0;j=l;i=Za[k[e>>2]&7](b,a)|0;f=Za[k[e>>2]&7](c,b)|0;do if(i){if(f){g=j;h=a;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=a;h=c;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=c;h=j;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));f=1;break}g=j;h=a;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=a;h=b;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=b;h=j;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));if(Za[k[e>>2]&7](c,b)|0){g=j;h=b;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=b;h=c;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=c;h=j;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));f=2}else f=1}else if(f){g=j;h=b;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=b;h=c;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=c;h=j;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));if(Za[k[e>>2]&7](b,a)|0){g=j;h=a;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=a;h=b;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=b;h=j;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));f=2}else f=1}else f=0;while(0);if(!(Za[k[e>>2]&7](d,c)|0)){d=f;r=l;return d|0}g=j;h=c;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=c;h=d;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=d;h=j;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));if(!(Za[k[e>>2]&7](c,b)|0)){d=f+1|0;r=l;return d|0}g=j;h=b;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=b;h=c;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=c;h=j;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));if(!(Za[k[e>>2]&7](b,a)|0)){d=f+2|0;r=l;return d|0}g=j;h=a;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=a;h=b;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));g=b;h=j;i=g+44|0;do{k[g>>2]=k[h>>2];g=g+4|0;h=h+4|0}while((g|0)<(i|0));d=f+3|0;r=l;return d|0}function Ic(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0;n=r;r=r+48|0;m=n;switch((b-a|0)/44|0|0){case 2:{d=b+-44|0;if(!(Za[k[c>>2]&7](d,a)|0)){m=1;r=n;return m|0}g=m;j=a;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=a;j=d;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=d;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));m=1;r=n;return m|0}case 3:{f=a+44|0;e=b+-44|0;b=Za[k[c>>2]&7](f,a)|0;d=Za[k[c>>2]&7](e,f)|0;if(!b){if(!d){m=1;r=n;return m|0}g=m;j=f;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=f;j=e;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=e;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));if(!(Za[k[c>>2]&7](f,a)|0)){m=1;r=n;return m|0}g=m;j=a;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=a;j=f;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=f;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));m=1;r=n;return m|0}if(d){g=m;j=a;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=a;j=e;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=e;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));m=1;r=n;return m|0}g=m;j=a;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=a;j=f;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=f;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));if(!(Za[k[c>>2]&7](e,f)|0)){m=1;r=n;return m|0}g=m;j=f;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=f;j=e;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=e;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));m=1;r=n;return m|0}case 4:{Hc(a,a+44|0,a+88|0,b+-44|0,c)|0;m=1;r=n;return m|0}case 5:{e=a+44|0;f=a+88|0;h=a+132|0;d=b+-44|0;Hc(a,e,f,h,c)|0;if(!(Za[k[c>>2]&7](d,h)|0)){m=1;r=n;return m|0}g=m;j=h;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=h;j=d;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=d;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));if(!(Za[k[c>>2]&7](h,f)|0)){m=1;r=n;return m|0}g=m;j=f;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=f;j=h;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=h;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));if(!(Za[k[c>>2]&7](f,e)|0)){m=1;r=n;return m|0}g=m;j=e;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=e;j=f;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=f;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));if(!(Za[k[c>>2]&7](e,a)|0)){m=1;r=n;return m|0}g=m;j=a;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=a;j=e;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=e;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));m=1;r=n;return m|0}case 1:case 0:{m=1;r=n;return m|0}default:{f=a+88|0;e=a+44|0;l=Za[k[c>>2]&7](e,a)|0;d=Za[k[c>>2]&7](f,e)|0;do if(l){if(d){g=m;j=a;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=a;j=f;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=f;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));break}g=m;j=a;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=a;j=e;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=e;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));if(Za[k[c>>2]&7](f,e)|0){g=m;j=e;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=e;j=f;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=f;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0))}}else if(d){g=m;j=e;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=e;j=f;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=f;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));if(Za[k[c>>2]&7](e,a)|0){g=m;j=a;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=a;j=e;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=e;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0))}}while(0);e=a+132|0;if((e|0)==(b|0)){m=1;r=n;return m|0}d=0;i=0;while(1){if(Za[k[c>>2]&7](e,f)|0){g=m;j=e;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));g=e;h=f;while(1){j=h;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));if((h|0)==(a|0))break;f=h+-44|0;if(Za[k[c>>2]&7](m,f)|0){g=h;h=f}else break}g=h;j=m;l=g+44|0;do{k[g>>2]=k[j>>2];g=g+4|0;j=j+4|0}while((g|0)<(l|0));f=i+1|0;h=(f|0)==8;i=e+44|0;d=h?(i|0)==(b|0):d;if(h){e=34;break}else{g=f;f=h?i:e}}else{g=i;f=e}e=f+44|0;if((e|0)==(b|0)){d=1;e=34;break}else i=g}if((e|0)==34){r=n;return d|0}}}return 0}\\nfunction $a(a){a=a|0;var b=0;b=r;r=r+a|0;r=r+15&-16;return b|0}function ab(){return r|0}function bb(a){a=a|0;r=a}function cb(a,b){a=a|0;b=b|0;r=a;s=b}function db(a,b){a=a|0;b=b|0;if(!w){w=a;x=b}}function eb(a){a=a|0;i[t>>0]=i[a>>0];i[t+1>>0]=i[a+1>>0];i[t+2>>0]=i[a+2>>0];i[t+3>>0]=i[a+3>>0]}function fb(a){a=a|0;i[t>>0]=i[a>>0];i[t+1>>0]=i[a+1>>0];i[t+2>>0]=i[a+2>>0];i[t+3>>0]=i[a+3>>0];i[t+4>>0]=i[a+4>>0];i[t+5>>0]=i[a+5>>0];i[t+6>>0]=i[a+6>>0];i[t+7>>0]=i[a+7>>0]}function gb(a){a=a|0;L=a}function hb(){return L|0}function ib(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;i=d+4|0;e=_d((((k[i>>2]|0)-(k[d>>2]|0)|0)/12|0)<<2)|0;k[a>>2]=e;e=((k[i>>2]|0)-(k[d>>2]|0)|0)/12|0;k[b>>2]=e;e=_d(e<<2)|0;k[c>>2]=e;b=k[d>>2]|0;if((k[i>>2]|0)==(b|0))return;f=0;while(1){j=b+(f*12|0)+4|0;h=b+(f*12|0)|0;g=(k[j>>2]|0)-(k[h>>2]|0)|0;k[e+(f<<2)>>2]=g>>3;g=_d(g<<1|4)|0;k[(k[a>>2]|0)+(f<<2)>>2]=g;g=(g&4|0)==0?g:g+4|0;b=k[j>>2]|0;h=k[h>>2]|0;if((b|0)!=(h|0)){b=b-h>>3;e=0;do{j=e<<1;p[g+(j<<3)>>3]=+(k[h+(e<<3)>>2]|0);p[g+((j|1)<<3)>>3]=+(k[h+(e<<3)+4>>2]|0);e=e+1|0}while(e>>>0<b>>>0)}f=f+1|0;b=k[d>>2]|0;if(f>>>0>=(((k[i>>2]|0)-b|0)/12|0)>>>0)break;e=k[c>>2]|0}return}function jb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,l=0,m=0,n=0,o=0,q=0,s=0;q=r;r=r+16|0;n=q+8|0;e=q;l=d+4|0;h=((k[l>>2]|0)-(k[d>>2]|0)|0)/12|0;k[e>>2]=h;k[e+4>>2]=h<<2;Nd(880,e);e=_d((((k[l>>2]|0)-(k[d>>2]|0)|0)/12|0)<<2)|0;k[a>>2]=e;e=((k[l>>2]|0)-(k[d>>2]|0)|0)/12|0;k[b>>2]=e;k[n>>2]=e;k[n+4>>2]=e<<2;Nd(892,n);e=_d((((k[l>>2]|0)-(k[d>>2]|0)|0)/12|0)<<2)|0;k[c>>2]=e;b=k[d>>2]|0;a:do if((k[l>>2]|0)!=(b|0)){f=0;while(1){s=b+(f*12|0)+4|0;h=b+(f*12|0)|0;g=((k[s>>2]|0)-(k[h>>2]|0)|0)/12|0;k[e+(f<<2)>>2]=g;g=_d(g*24|4)|0;k[(k[a>>2]|0)+(f<<2)>>2]=g;g=(g&4|0)==0?g:g+4|0;b=k[s>>2]|0;h=k[h>>2]|0;if((b|0)!=(h|0)){b=(b-h|0)/12|0;e=0;do{s=e*3|0;p[g+(s<<3)>>3]=+(k[h+(e*12|0)>>2]|0);p[g+(s+1<<3)>>3]=+(k[h+(e*12|0)+4>>2]|0);p[g+(s+2<<3)>>3]=+(k[h+(e*12|0)+8>>2]|0);e=e+1|0}while(e>>>0<b>>>0)}f=f+1|0;b=k[d>>2]|0;if(f>>>0>=(((k[l>>2]|0)-b|0)/12|0)>>>0)break a;e=k[c>>2]|0}}while(0);g=(k[87]|0)>-1;b:do if(!0){b=904;o=11}else{b=904;e=904;while(1){if(!(i[b>>0]|0)){b=e;break b}b=b+1|0;e=b;if(!(e&3)){o=11;break}}}while(0);if((o|0)==11){while(1){e=k[b>>2]|0;if(!((e&-2139062144^-2139062144)&e+-16843009))b=b+4|0;else break}if((e&255)<<24>>24)do b=b+1|0;while((i[b>>0]|0)!=0)}f=b-904|0;b=k[72]|0;e=(b|0)==0;c:do if(g){do if(e){b=i[346]|0;i[346]=b+255|b;b=k[68]|0;if(!(b&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;b=e+(k[80]|0)|0;k[72]=b;break}else{k[68]=b|32;m=0;o=33;break c}}else e=k[73]|0;while(0);if((b-e|0)>>>0<f>>>0){m=Ta[k[308>>2]&7](272,904,f)|0;o=33;break}else{fe(e|0,904,f|0)|0;k[73]=(k[73]|0)+f;break}}else{do if(e){b=i[346]|0;i[346]=b+255|b;b=k[68]|0;if(!(b&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;b=e+(k[80]|0)|0;k[72]=b;break}else{k[68]=b|32;m=0;o=33;break c}}else e=k[73]|0;while(0);if((b-e|0)>>>0<f>>>0){m=Ta[k[308>>2]&7](272,904,f)|0;o=33;break}else{fe(e|0,904,f|0)|0;k[73]=(k[73]|0)+f;break}}while(0);if(((o|0)==33?(m|0)!=(f|0):0)?(((m>>>0)/(f>>>0)|0)+-1|0)<0:0){r=q;return}f=i[347]|0;if(f<<24>>24!=10){b=k[73]|0;e=k[72]|0;if(b>>>0<e>>>0){k[73]=b+1;i[b>>0]=10;r=q;return}}else e=k[72]|0;i[n>>0]=10;do if(!e){f=j[173]|0;b=(f&65535)<<24>>24;i[346]=b+255|b;b=k[68]|0;if(!(b&8)){k[70]=0;k[69]=0;g=k[79]|0;k[75]=g;k[73]=g;e=g+(k[80]|0)|0;k[72]=e;b=(f&65535)>>>8&255;o=44;break}else{k[68]=b|32;break}}else{g=k[73]|0;b=f;o=44}while(0);do if((o|0)==44)if(g>>>0>=e>>>0|b<<24>>24==10){Ta[k[308>>2]&7](272,n,1)|0;break}else{k[73]=g+1;i[g>>0]=10;break}while(0);r=q;return}function kb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0.0,i=0,j=0,l=0,m=0,n=0.0,o=0,q=0.0,r=0,s=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0;k[a>>2]=0;C=a+4|0;k[C>>2]=0;k[a+8>>2]=0;if((c|0)<=0)return;D=a+8|0;i=0;g=0;e=0;a:while(1){if(i>>>0>=g>>>0){l=k[a>>2]|0;f=l;m=(i-f|0)/12|0;o=m+1|0;if(o>>>0>357913941){E=6;break}f=(g-f|0)/12|0;if(f>>>0<178956970){f=f<<1;f=f>>>0<o>>>0?o:f;if(!f){f=0;g=0;j=l}else E=9}else{f=357913941;E=9}if((E|0)==9){E=0;j=f*12|0;j=(j|0)==0?1:j;g=_d(j)|0;if(!g){do{g=k[35]|0;k[35]=g+0;if(!g){E=12;break a}Xa[g&0]();g=_d(j)|0}while((g|0)==0);j=k[a>>2]|0;i=k[C>>2]|0}else j=l}l=g+(m*12|0)|0;m=l;r=g+(f*12|0)|0;s=g+(o*12|0)|0;o=s;k[l>>2]=0;k[l+4>>2]=0;k[l+8>>2]=0;if((i|0)==(j|0)){f=i;g=m;i=f}else{f=l;g=m;do{B=f+-12|0;A=i;i=i+-12|0;k[B>>2]=0;z=f+-8|0;k[z>>2]=0;k[f+-4>>2]=0;k[B>>2]=k[i>>2];B=A+-8|0;k[z>>2]=k[B>>2];A=A+-4|0;k[f+-4>>2]=k[A>>2];k[A>>2]=0;k[B>>2]=0;k[i>>2]=0;f=g+-12|0;g=f}while((i|0)!=(j|0));i=k[a>>2]|0;f=k[C>>2]|0}k[a>>2]=g;k[C>>2]=o;k[D>>2]=r;o=i;if((f|0)!=(o|0))do{g=f;f=f+-12|0;l=k[f>>2]|0;m=l;if(l){g=g+-8|0;j=k[g>>2]|0;if((j|0)!=(l|0))k[g>>2]=j+(~((j+-8-m|0)>>>3)<<3);$d(l)}}while((f|0)!=(o|0));if(!i)f=s;else{$d(i);f=s}}else{k[i>>2]=0;k[i+4>>2]=0;k[i+8>>2]=0;f=i+12|0;k[C>>2]=f}y=f+-12|0;z=k[b+(e<<2)>>2]|0;A=k[d+(e<<2)>>2]|0;if((A|0)>0){B=f+-8|0;w=f+-4|0;x=0;do{i=x<<1;h=+p[z+(i<<3)>>3];p[t>>3]=h;f=k[t+4>>2]|0;g=de(k[t>>2]|0,f|0,52)|0;g=g&2047;do if(g>>>0<=1074){f=(f|0)<0;q=f?-h:h;if(g>>>0<1022){h=h*0.0;break}n=q+4503599627370496.0+-4503599627370496.0-q;if(!(n>.5)){h=q+n;if(n<=-.5)h=h+1.0}else h=q+n+-1.0;h=f?-h:h}while(0);v=~~h;h=+p[z+((i|1)<<3)>>3];p[t>>3]=h;f=k[t+4>>2]|0;g=de(k[t>>2]|0,f|0,52)|0;g=g&2047;do if(g>>>0<=1074){f=(f|0)<0;q=f?-h:h;if(g>>>0<1022){h=h*0.0;break}n=q+4503599627370496.0+-4503599627370496.0-q;if(!(n>.5)){h=q+n;if(n<=-.5)h=h+1.0}else h=q+n+-1.0;h=f?-h:h}while(0);l=~~h;g=k[B>>2]|0;f=k[w>>2]|0;if(g>>>0>=f>>>0){u=k[y>>2]|0;r=u;s=g-r>>3;o=s+1|0;if(o>>>0>536870911){E=48;break a}f=f-r|0;if(f>>3>>>0<268435455){f=f>>2;f=f>>>0<o>>>0?o:f;if(!f){j=0;i=0}else E=51}else{f=536870911;E=51}if((E|0)==51){E=0;j=f<<3;j=(j|0)==0?1:j;i=_d(j)|0;if(!i)do{i=k[35]|0;k[35]=i+0;if(!i){E=54;break a}Xa[i&0]();i=_d(j)|0}while((i|0)==0);j=f}f=i+(s<<3)|0;m=i+(j<<3)|0;k[f>>2]=v;k[i+(s<<3)+4>>2]=l;l=i+(o<<3)|0;if((g|0)!=(u|0)){j=g+-8|0;while(1){v=g;g=g+-8|0;k[f+-8>>2]=k[g>>2];k[f+-4>>2]=k[v+-4>>2];if((g|0)==(u|0))break;else f=f+-8|0}f=i+(s+~((j-r|0)>>>3)<<3)|0}k[y>>2]=f;k[B>>2]=l;k[w>>2]=m;if(u)$d(u)}else{k[g>>2]=v;k[g+4>>2]=l;k[B>>2]=g+8}x=x+1|0}while((x|0)<(A|0))}e=e+1|0;if((e|0)>=(c|0)){E=65;break}i=k[C>>2]|0;g=k[D>>2]|0}if((E|0)==6)xa(1340,1363,303,1438);else if((E|0)==12){E=ya(4)|0;k[E>>2]=128;La(E|0,8,1)}else if((E|0)==48)xa(1340,1363,303,1438);else if((E|0)==54){E=ya(4)|0;k[E>>2]=128;La(E|0,8,1)}else if((E|0)==65)return}function lb(a,b,c,d,e,f,g,h,m,n){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;m=m|0;n=n|0;var o=0,q=0,s=0,t=0,u=0.0,v=0.0,w=0,x=0.0,y=0,z=0.0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0;Y=r;r=r+112|0;P=Y+96|0;N=Y+72|0;O=Y+56|0;W=Y+44|0;V=Y+32|0;T=Y+20|0;R=Y+8|0;Q=Y;kb(W,a,b,c);kb(V,d,e,f);k[g>>2]=0;b=k[W>>2]|0;X=W+4|0;e=k[X>>2]|0;if((b|0)!=(e|0)?(o=k[V>>2]|0,q=k[V+4>>2]|0,(o|0)!=(q|0)):0){k[T>>2]=0;S=T+4|0;k[S>>2]=0;k[T+8>>2]=0;if(b>>>0<e>>>0){do{mb(T,k[b>>2]|0,k[b+4>>2]|0,0);b=b+12|0}while(b>>>0<e>>>0);e=k[T>>2]|0;a=k[S>>2]|0;c=a;if((e|0)==(a|0)){f=e;b=e;e=c}else{b=e;do{i[b+4>>0]=1;b=b+32|0}while((b|0)!=(a|0));f=e;b=a;e=c}}else{f=0;b=0;e=0}if(o>>>0<q>>>0){do{mb(T,k[o>>2]|0,k[o+4>>2]|0,1);o=o+12|0}while(o>>>0<q>>>0);c=k[S>>2]|0;b=c;o=k[T>>2]|0}else{o=f;c=e}if((b|0)!=(o|0)){a=o;b=b-a>>5;e=0;do{k[o+(e<<5)+4+4>>2]=e;e=e+1|0}while(e>>>0<b>>>0);o=a}k[P>>2]=0;J=P+4|0;k[J>>2]=0;k[P+8>>2]=0;I=o;C=c-o>>5;A=P+8|0;B=(C|0)!=0;a:do if(B){b=C*24|0;o=_d(b)|0;b:do if(!o){while(1){o=k[35]|0;k[35]=o+0;if(!o)break;Xa[o&0]();o=_d(b)|0;if(o)break b}Y=ya(4)|0;k[Y>>2]=128;La(Y|0,8,1)}while(0);s=o;q=o+(C*24|0)|0;k[P>>2]=s;k[J>>2]=s;k[A>>2]=q;s=N+4|0;t=N+8|0;w=N+12|0;y=N+16|0;b=0;while(1){e=k[I+(b<<5)+12>>2]|0;a=k[I+(b<<5)+16>>2]|0;c=k[I+(b<<5)+20>>2]|0;f=k[I+(b<<5)+24>>2]|0;d=k[I+(b<<5)+28>>2]|0;k[N>>2]=e;k[s>>2]=a;k[t>>2]=c;k[w>>2]=f;H=y;k[H>>2]=b;k[H+4>>2]=d;if(o>>>0<q>>>0){k[o>>2]=e;k[o+4>>2]=a;k[o+8>>2]=c;k[o+12>>2]=f;k[o+16>>2]=b;k[o+20>>2]=d;k[J>>2]=o+24}else Db(P,N);b=b+1|0;if(b>>>0>=C>>>0){o=0;break a}o=k[J>>2]|0;q=k[A>>2]|0}}else o=1;while(0);k[O>>2]=0;H=O+4|0;k[H>>2]=0;k[O+8>>2]=0;e=O+8|0;if(B){if(o)o=0;else{b=C*24|0;o=_d(b)|0;c:do if(!o){while(1){o=k[35]|0;k[35]=o+0;if(!o)break;Xa[o&0]();o=_d(b)|0;if(o)break c}Y=ya(4)|0;k[Y>>2]=128;La(Y|0,8,1)}while(0)}G=o;k[O>>2]=G;k[H>>2]=G;k[e>>2]=o+(C*24|0)}Eb(O,k[P>>2]|0,k[J>>2]|0);G=k[H>>2]|0;a=k[O>>2]|0;e=(G-a|0)/24|0;c=(G|0)==(a|0);d:do if(!c){b=e<<5;b=(b|0)==0?1:b;o=_d(b)|0;do if(!o){while(1){o=k[35]|0;k[35]=o+0;if(!o){U=39;break}Xa[o&0]();o=_d(b)|0;if(o){U=40;break}}if((U|0)==39){Y=ya(4)|0;k[Y>>2]=128;La(Y|0,8,1)}else if((U|0)==40){f=o;b=o+(e<<5)|0;e=b;if(c){M=f;K=f;L=e;break d}else{F=a;E=f;a=f;break}}}else{D=o;e=o+(e<<5)|0;F=a;b=e;E=D;a=D}while(0);e:while(1){t=k[F+16>>2]|0;q=k[I+(t<<5)>>2]|0;t=I+(t<<5)+4|0;s=k[t>>2]|0;t=k[t+4>>2]|0;w=k[F>>2]|0;y=k[F+4>>2]|0;A=k[F+8>>2]|0;B=k[F+12>>2]|0;C=k[F+20>>2]|0;if((o|0)==(b|0)){c=a;D=E;f=a-E>>5;d=f+1|0;if(d>>>0>134217727){U=44;break}o=e-E|0;if(o>>5>>>0<67108863){o=o>>4;o=o>>>0<d>>>0?d:o;if(!o){e=0;a=0}else U=47}else{o=134217727;U=47}if((U|0)==47){U=0;e=o<<5;e=(e|0)==0?1:e;b=_d(e)|0;if(!b)do{b=k[35]|0;k[35]=b+0;if(!b){U=50;break e}Xa[b&0]();b=_d(e)|0}while((b|0)==0);e=o;a=b}b=a+(f<<5)|0;o=b;e=a+(e<<5)|0;k[b>>2]=q;q=a+(f<<5)+4|0;k[q>>2]=s;k[q+4>>2]=t;k[a+(f<<5)+12>>2]=w;k[a+(f<<5)+16>>2]=y;k[a+(f<<5)+20>>2]=A;k[a+(f<<5)+24>>2]=B;k[a+(f<<5)+28>>2]=C;a=a+(d<<5)|0;if((c|0)!=(D|0))do{C=c;c=c+-32|0;k[b+-32>>2]=k[c>>2];y=C+-28|0;A=k[y+4>>2]|0;B=b+-28|0;k[B>>2]=k[y>>2];k[B+4>>2]=A;k[b+-20>>2]=k[C+-20>>2];k[b+-16>>2]=k[C+-16>>2];k[b+-12>>2]=k[C+-12>>2];k[b+-8>>2]=k[C+-8>>2];k[b+-4>>2]=k[C+-4>>2];b=o+-32|0;o=b}while((c|0)!=(D|0));if(!E)c=o;else{$d(E);c=o}}else{k[o>>2]=q;c=o+4|0;k[c>>2]=s;k[c+4>>2]=t;k[o+12>>2]=w;k[o+16>>2]=y;k[o+20>>2]=A;k[o+24>>2]=B;k[o+28>>2]=C;c=E;a=a+32|0}o=F+24|0;if((o|0)==(G|0)){M=c;K=a;L=e;break d}F=o;o=a;b=e;E=c}if((U|0)==44)xa(1340,1363,303,1438);else if((U|0)==50){Y=ya(4)|0;k[Y>>2]=128;La(Y|0,8,1)}}else{M=0;K=0;L=0}while(0);o=k[T>>2]|0;b=o;if(!o)o=T+8|0;else{e=k[S>>2]|0;if((e|0)!=(o|0))k[S>>2]=e+(~((e+-32-b|0)>>>5)<<5);$d(o);o=T+8|0;k[o>>2]=0;k[S>>2]=0;k[T>>2]=0}k[T>>2]=M;k[S>>2]=K;k[o>>2]=L;b=k[O>>2]|0;e=b;a=M;if(b){o=k[H>>2]|0;if((o|0)!=(b|0))k[H>>2]=o+(~(((o+-24-e|0)>>>0)/24|0)*24|0);$d(b)}o=k[P>>2]|0;b=o;if(o){e=k[J>>2]|0;if((e|0)!=(o|0))k[J>>2]=e+(~(((e+-24-b|0)>>>0)/24|0)*24|0);$d(o)}J=k[S>>2]|0;k[P>>2]=1;ob(a,J,P);do if((a|0)!=(J|0)){K=N+4|0;I=k[a+12>>2]|0;f=0;E=0;d=0;w=0;s=0;o=a;b=0;c=0;e=0;f:while(1){if(d){F=0;t=E;H=J;G=b}else{t=o;q=b;while(1){if((k[t+12>>2]|0)!=(I|0)){o=1;a=t;b=q;break};k[K>>2]=0;k[K+4>>2]=0;i[K+8>>0]=0;i[O>>0]=0;o=e;do if((o|0)==(c|0)){d=e-q|0;a=d>>5;f=a+1|0;if(f>>>0>134217727){U=78;break f}if(a>>>0<67108863){e=d>>4;e=e>>>0<f>>>0?f:e}else e=134217727;b=e<<5;b=(b|0)==0?1:b;o=_d(b)|0;if(!o)do{o=k[35]|0;k[35]=o+0;if(!o){U=84;break f}Xa[o&0]();o=_d(b)|0}while((o|0)==0);c=o+(e<<5)|0;k[o+(a<<5)>>2]=0;k[o+(a<<5)+4>>2]=0;k[o+(a<<5)+8>>2]=t;b=o+(a<<5)+12|0;k[b>>2]=k[N>>2];k[b+4>>2]=k[N+4>>2];k[b+8>>2]=k[N+8>>2];i[b+12>>0]=i[N+12>>0]|0;i[o+(a<<5)+25>>0]=1;a=o+(a<<5)+26|0;j[a>>1]=j[O>>1]|0;j[a+2>>1]=j[O+2>>1]|0;j[a+4>>1]=j[O+4>>1]|0;a=o+(f<<5)|0;b=o;e=q;fe(o|0,e|0,d|0)|0;if(!q){e=a;break}$d(e);e=a}else{k[o>>2]=0;k[o+4>>2]=0;k[o+8>>2]=t;b=o+12|0;k[b>>2]=k[N>>2];k[b+4>>2]=k[N+4>>2];k[b+8>>2]=k[N+8>>2];i[b+12>>0]=i[N+12>>0]|0;i[o+25>>0]=1;b=o+26|0;j[b>>1]=j[O>>1]|0;j[b+2>>1]=j[O+2>>1]|0;j[b+4>>1]=j[O+4>>1]|0;b=q;e=o+32|0}while(0);t=t+32|0;if((t|0)==(J|0)){o=0;a=J;break}else q=b}F=o;t=b;f=e;H=a;G=b}if((t|0)!=(f|0)){z=+(I|0);d=t;do{o=k[d+8>>2]|0;b=k[o+16>>2]|0;q=k[o+20>>2]|0;a=k[o+24>>2]|0;do if((b|0)==(a|0)){u=+(b|0);o=k[o+12>>2]|0}else{o=k[o+12>>2]|0;x=+(o|0);u=+(b|0);v=z-x;if(v==0.0)break;u=u+(+(a|0)-u)*v/(+(q|0)-x)}while(0);p[d+16>>3]=u;i[d+24>>0]=((I|0)==(q|0)|(I|0)==(o|0))&1;d=d+32|0}while((d|0)!=(f|0))}k[P>>2]=2;qb(t,f,P);E=G;D=e;if((E|0)==(D|0)){o=E;q=w}else{C=E;o=G;t=w;while(1){a=C+32|0;b=a;g:do if(!((a|0)==(D|0)|(i[C+24>>0]|0)==0)){d=C+16|0;f=C;while(1){if(!(i[f+56>>0]|0))break g;if(!(+p[f+48>>3]==+p[d>>3]))break g;f=a+32|0;b=f;if((f|0)==(D|0))break;else{M=a;a=f;f=M}}}while(0);a=o;B=a>>>0<b>>>0;if(B){f=a;do{q=k[f+8>>2]|0;d=k[q+12>>2]|0;q=k[q+20>>2]|0;if((d|0)!=(q|0)){i[f+25>>0]=(I|0)==(d|0)&1;i[f+26>>0]=(I|0)==(q|0)&1}f=f+32|0}while(f>>>0<b>>>0)}if((C|0)==(b|0))q=t;else{A=b+25|0;d=o;q=t;while(1){f=d;h:do if((f|0)==(b|0)){f=d;d=q;U=111}else{w=q;while(1){t=k[f+8>>2]|0;q=i[f+25>>0]|0;if((k[t+12>>2]|0)==(k[t+20>>2]|0)){f=d;y=s;d=w;break h}q=q<<24>>24==0;if(!q)k[f>>2]=s;do if(!(i[t+4>>0]|0)){if(q)d=(k[t+28>>2]|0)+w|0;else d=w;if(i[f+26>>0]|0){t=d;break}s=(k[t+28>>2]|0)+s|0;t=d}else t=w;while(0);if(!q)k[f+4>>2]=s;f=f+32|0;d=f;if((f|0)==(b|0)){f=d;d=t;U=111;break}else w=t}}while(0);if((U|0)==111){U=0;q=i[A>>0]|0;y=s}w=f;i:do if((w|0)==(b|0))q=d;else{t=w;while(1){s=k[t+8>>2]|0;if((k[s+12>>2]|0)!=(k[s+20>>2]|0)){t=w;break}if((i[t+25>>0]|0)!=q<<24>>24){t=w;break}k[t>>2]=d;if(!(i[s+4>>0]|0))d=(k[s+28>>2]|0)+d|0;k[t+4>>2]=d;t=t+32|0;if((t|0)==(b|0)){t=w;break}}do{s=k[t+8>>2]|0;if((k[s+12>>2]|0)!=(k[s+20>>2]|0))break;if((i[t+25>>0]|0)!=q<<24>>24)break;if(!(i[s+4>>0]|0))d=d-(k[s+28>>2]|0)|0;t=t+32|0}while((t|0)!=(b|0));s=w;while(1){M=k[s+8>>2]|0;if((k[M+12>>2]|0)!=(k[M+20>>2]|0)){q=d;break i}if((i[s+25>>0]|0)!=q<<24>>24){q=d;break i}s=s+32|0;f=s;if((s|0)==(b|0)){q=d;break}}}while(0);if((f|0)==(b|0)){f=C;break}else{d=f;s=y}}do{if(!(k[f>>2]|0))d=0;else d=(k[f+4>>2]|0)!=0;i[(k[f+8>>2]|0)+5>>0]=d&1;f=f+32|0}while((f|0)!=(b|0));s=y}j:do if(B)do{M=k[a+8>>2]|0;if((k[M+12>>2]|0)==(k[M+20>>2]|0)?(i[a+26>>0]|0)==0:0)break j;a=a+32|0;o=a}while(a>>>0<b>>>0);while(0);C=o;if(C>>>0<b>>>0){a=C;do{p[a+16>>3]=+(k[(k[a+8>>2]|0)+24>>2]|0);i[a+25>>0]=0;i[a+26>>0]=1;a=a+32|0}while(a>>>0<b>>>0)}if((C|0)==(D|0)){o=D;break}else t=q}}k:do if((E|0)==(o|0)){b=E;U=151}else{b=E;do{if(i[b+26>>0]|0){U=151;break k}b=b+32|0}while((b|0)!=(o|0))}while(0);l:do if((U|0)==151){U=0;a=b;if((b|0)==(o|0)){o=a;break}else{d=a;b=a}while(1){do{a=b;f=a+32|0;b=f;if((f|0)==(o|0)){o=d;break l}}while((i[a+58>>0]|0)!=0);M=d;k[M>>2]=k[f>>2];k[M+4>>2]=k[f+4>>2];k[M+8>>2]=k[f+8>>2];k[M+12>>2]=k[f+12>>2];k[M+16>>2]=k[f+16>>2];k[M+20>>2]=k[f+20>>2];j[M+24>>1]=j[f+24>>1]|0;i[M+26>>0]=i[f+26>>0]|0;d=d+32|0}}while(0);b=o;do if((b|0)==(D|0))f=D;else{L=E+((o-G>>5)+(e-o>>5)<<5)|0;M=e-L|0;he(o|0,L|0,M|0)|0;o=b+(M>>5<<5)|0;if((D|0)==(o|0)){f=D;break}e=D+(~((D+-32-o|0)>>>5)<<5)|0;f=e}while(0);a=(E|0)==(f|0);if(a)o=2147483647;else{b=E;o=2147483647;do{M=k[(k[b+8>>2]|0)+20>>2]|0;o=(M|0)<(o|0)?M:o;b=b+32|0}while((b|0)!=(f|0))}if(F){M=k[H+12>>2]|0;o=(M|0)<(o|0)?M:o}d=(H|0)==(J|0);if(a&d){U=164;break}else{I=o;w=q;o=H;b=G}}if((U|0)==78)xa(1340,1363,303,1438);else if((U|0)==84){Y=ya(4)|0;k[Y>>2]=128;La(Y|0,8,1)}else if((U|0)==164){if(!G)break;$d(G);break}}while(0);o=k[T>>2]|0;f=k[S>>2]|0;rb(o,f);if((o|0)!=(f|0))do{P=k[o+28>>2]|0;b=o+12|0;e=k[b>>2]|0;a=o+20|0;c=k[a>>2]|0;if((((e|0)==(c|0)?0-P|0:P)|0)<0){N=o+16|0;O=k[N>>2]|0;k[b>>2]=c;P=o+24|0;k[N>>2]=k[P>>2];k[a>>2]=e;k[P>>2]=O}o=o+32|0}while((o|0)!=(f|0));k[R>>2]=0;K=R+4|0;k[K>>2]=0;k[R+8>>2]=0;o=_d(12)|0;m:do if(!o){while(1){o=k[35]|0;k[35]=o+0;if(!o)break;Xa[o&0]();o=_d(12)|0;if(o)break m}Y=ya(4)|0;k[Y>>2]=128;La(Y|0,8,1)}while(0);k[K>>2]=o;k[R>>2]=o;J=R+8|0;k[J>>2]=o+12;k[o>>2]=0;k[o+4>>2]=0;k[o+8>>2]=0;c=o+12|0;k[K>>2]=c;e=k[k[W>>2]>>2]|0;a=k[e>>2]|0;e=k[e+4>>2]|0;o=k[T>>2]|0;b=k[S>>2]|0;k[Q>>2]=a;I=Q+4|0;k[I>>2]=e;n:do if((o|0)!=(b|0)){f=o;H=o;s=c;t=0;o:while(1){o=f+4|0;if(!(i[o>>0]|0)){U=222;break n}G=H;p:do if((G|0)==(b|0))F=H;else{d=o+4|0;q=G;o=H;while(1){f=q+4|0;if(!(i[f>>0]|0)){F=o;b=q;break p}if((k[f+4>>2]|0)!=(k[d>>2]|0)){F=o;b=q;break p}q=q+32|0;o=q;if((q|0)==(b|0)){F=o;break}}}while(0);if((G|0)==(b|0)){U=218;break}else o=G;q:while(1){f=o+4|0;E=f+2|0;do if(!(i[E>>0]|0)){if((k[o+12>>2]|0)!=(a|0))break;if((k[o+16>>2]|0)==(e|0))break q}while(0);o=o+32|0;if((o|0)==(b|0)){U=218;break o}}D=f+1|0;if((l[D>>0]|0)==(t&1|0))q=t;else{c=s+-12|0;f=s+-8|0;d=k[f>>2]|0;do if((k[c>>2]|0)!=(d|0))if(d>>>0<(k[s+-4>>2]|0)>>>0){k[d>>2]=a;k[d+4>>2]=e;k[f>>2]=d+8;q=s;break}else{sb(c,Q);q=k[K>>2]|0;break}else q=s;while(0);c=k[J>>2]|0;do if(q>>>0<c>>>0){k[q>>2]=0;k[q+4>>2]=0;k[q+8>>2]=0;c=q+12|0;k[K>>2]=c}else{C=k[R>>2]|0;f=q;y=C;A=(f-y|0)/12|0;B=A+1|0;if(B>>>0>357913941){U=194;break o}c=(c-y|0)/12|0;if(c>>>0<178956970){c=c<<1;c=c>>>0<B>>>0?B:c;if(!c){c=0;s=0}else U=197}else{c=357913941;U=197}if((U|0)==197){U=0;s=c*12|0;s=(s|0)==0?1:s;d=_d(s)|0;if(!d)do{d=k[35]|0;k[35]=d+0;if(!d){U=200;break o}Xa[d&0]();d=_d(s)|0}while((d|0)==0);s=d}d=s+(A*12|0)|0;t=d;w=s+(c*12|0)|0;k[d>>2]=0;k[s+(A*12|0)+4>>2]=0;k[s+(A*12|0)+8>>2]=0;c=s+(B*12|0)|0;s=c;if((q|0)==(C|0))d=t;else{f=t;do{P=d+-12|0;O=q;q=q+-12|0;k[P>>2]=0;N=d+-8|0;k[N>>2]=0;k[d+-4>>2]=0;k[P>>2]=k[q>>2];P=O+-8|0;k[N>>2]=k[P>>2];O=O+-4|0;k[d+-4>>2]=k[O>>2];k[O>>2]=0;k[P>>2]=0;k[q>>2]=0;d=f+-12|0;f=d}while((q|0)!=(C|0));d=f;y=k[R>>2]|0;f=k[K>>2]|0}k[R>>2]=d;k[K>>2]=s;k[J>>2]=w;w=y;if((f|0)!=(w|0))do{d=f;f=f+-12|0;s=k[f>>2]|0;t=s;if(s){d=d+-8|0;q=k[d>>2]|0;if((q|0)!=(s|0))k[d>>2]=q+(~((q+-8-t|0)>>>3)<<3);$d(s)}}while((f|0)!=(w|0));if(!y)break;$d(y)}while(0);s=c;q=(i[D>>0]|0)!=0}f=s+-8|0;d=k[f>>2]|0;if(d>>>0<(k[s+-4>>2]|0)>>>0){k[d>>2]=a;k[d+4>>2]=e;k[f>>2]=d+8}else sb(s+-12|0,Q);a=k[o+20>>2]|0;k[Q>>2]=a;e=k[o+24>>2]|0;k[I>>2]=e;i[E>>0]=1;o=G;f=1;do{f=f&(i[o+4+2>>0]|0)!=0;o=o+32|0}while((o|0)!=(b|0));H=f?F:H;b=k[S>>2]|0;f=H;if((f|0)==(b|0)){U=222;break n}else t=q}if((U|0)==194)xa(1340,1363,303,1438);else if((U|0)==200){Y=ya(4)|0;k[Y>>2]=128;La(Y|0,8,1)}else if((U|0)==218){k[g>>2]=1;ib(h,m,n,W);break}}else U=222;while(0);if((U|0)==222){o=c+-8|0;b=k[o>>2]|0;if(b>>>0<(k[c+-4>>2]|0)>>>0){k[b>>2]=a;k[b+4>>2]=e;k[o>>2]=b+8}else sb(c+-12|0,Q);ib(h,m,n,R)}f=k[R>>2]|0;if(f){o=k[K>>2]|0;if((o|0)!=(f|0)){do{b=o;o=o+-12|0;a=k[o>>2]|0;c=a;if(a){b=b+-8|0;e=k[b>>2]|0;if((e|0)!=(a|0))k[b>>2]=e+(~((e+-8-c|0)>>>3)<<3);$d(a)}}while((o|0)!=(f|0));k[K>>2]=f}$d(f)}o=k[T>>2]|0;b=o;if(!o)o=V;else{e=k[S>>2]|0;if((e|0)!=(o|0))k[S>>2]=e+(~((e+-32-b|0)>>>5)<<5);$d(o);o=V}}else{o=V;U=3}if((U|0)==3)ib(h,m,n,W);d=k[o>>2]|0;if(d){f=V+4|0;o=k[f>>2]|0;if((o|0)!=(d|0)){do{b=o;o=o+-12|0;a=k[o>>2]|0;c=a;if(a){b=b+-8|0;e=k[b>>2]|0;if((e|0)!=(a|0))k[b>>2]=e+(~((e+-8-c|0)>>>3)<<3);$d(a)}}while((o|0)!=(d|0));k[f>>2]=d}$d(d)}f=k[W>>2]|0;if(!f){r=Y;return}o=k[X>>2]|0;if((o|0)!=(f|0)){do{b=o;o=o+-12|0;a=k[o>>2]|0;c=a;if(a){b=b+-8|0;e=k[b>>2]|0;if((e|0)!=(a|0))k[b>>2]=e+(~((e+-8-c|0)>>>3)<<3);$d(a)}}while((o|0)!=(f|0));k[X>>2]=f}$d(f);r=Y;return}function mb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;B=r;r=r+32|0;A=B;v=c-b>>3;if(!v){r=B;return}w=A+4|0;x=w+1|0;y=w+2|0;z=w+4|0;n=A+12|0;o=A+16|0;p=A+20|0;q=A+24|0;s=A+28|0;t=a+4|0;u=a+8|0;if(d){l=0;do{d=l;l=l+1|0;g=l>>>0<v>>>0?b+(l<<3)|0:b;f=k[b+(d<<3)>>2]|0;d=k[b+(d<<3)+4>>2]|0;c=k[g>>2]|0;g=k[g+4>>2]|0;do if((f|0)!=(c|0)|(d|0)!=(g|0)){k[A>>2]=0;i[w>>0]=0;i[x>>0]=0;i[y>>0]=0;k[z>>2]=0;k[n>>2]=f;k[o>>2]=d;k[p>>2]=c;k[q>>2]=g;k[s>>2]=1;if((f|0)<=(c|0))if((f|0)==(c|0))if((d|0)>(g|0))m=8;else{e=1;c=f;m=10}else{h=f;f=g;e=1;m=9}else m=8;if((m|0)==8){k[n>>2]=c;k[o>>2]=g;k[p>>2]=f;k[q>>2]=d;k[s>>2]=-1;h=c;c=f;f=d;d=g;e=-1;m=9}if((m|0)==9){m=0;if((h|0)==(c|0)){g=f;m=10}else j=d}if((m|0)==10){e=0-e|0;k[s>>2]=e;h=c;j=d;f=g}d=k[t>>2]|0;if(d>>>0<(k[u>>2]|0)>>>0){k[d>>2]=0;C=w;g=k[C+4>>2]|0;m=d+4|0;k[m>>2]=k[C>>2];k[m+4>>2]=g;k[d+12>>2]=h;k[d+16>>2]=j;k[d+20>>2]=c;k[d+24>>2]=f;k[d+28>>2]=e;k[t>>2]=(k[t>>2]|0)+32;break}else{kc(a,A);break}}while(0)}while((l|0)!=(v|0));r=B;return}if(v>>>0>1){j=1;c=0}else{r=B;return}while(1){h=k[b+(c<<3)>>2]|0;d=k[b+(c<<3)+4>>2]|0;g=k[b+(j<<3)>>2]|0;c=k[b+(j<<3)+4>>2]|0;do if((h|0)!=(g|0)|(d|0)!=(c|0)){k[A>>2]=0;i[w>>0]=0;i[x>>0]=0;i[y>>0]=0;k[z>>2]=0;k[n>>2]=h;k[o>>2]=d;k[p>>2]=g;k[q>>2]=c;k[s>>2]=1;if((h|0)<=(g|0))if((h|0)==(g|0))if((d|0)>(c|0))m=19;else{f=c;g=h;c=1;m=21}else{f=c;c=1;e=h;m=20}else m=19;if((m|0)==19){k[n>>2]=g;k[o>>2]=c;k[p>>2]=h;k[q>>2]=d;k[s>>2]=-1;f=d;d=c;c=-1;e=g;g=h;m=20}if((m|0)==20){m=0;if((e|0)==(g|0))m=21;else h=d}if((m|0)==21){c=0-c|0;k[s>>2]=c;e=g;h=d}d=k[t>>2]|0;if(d>>>0<(k[u>>2]|0)>>>0){k[d>>2]=0;l=w;m=k[l+4>>2]|0;C=d+4|0;k[C>>2]=k[l>>2];k[C+4>>2]=m;k[d+12>>2]=e;k[d+16>>2]=h;k[d+20>>2]=g;k[d+24>>2]=f;k[d+28>>2]=c;k[t>>2]=(k[t>>2]|0)+32;break}else{kc(a,A);break}}while(0);c=j+1|0;if(c>>>0<v>>>0){C=j;j=c;c=C}else break}r=B;return}function nb(a,b){a=a|0;b=b|0;return (k[a+12>>2]|0)<(k[b+12>>2]|0)|0}function ob(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0;w=r;r=r+32|0;v=w;a:while(1){l=b;m=b+-32|0;n=b+-28|0;o=b+-20|0;p=b+-16|0;q=b+-12|0;s=b+-8|0;t=b+-4|0;b:while(1){j=a;f=l-j|0;d=f>>5;switch(d|0){case 2:{u=4;break a}case 3:{u=6;break a}case 4:{u=7;break a}case 5:{u=8;break a}case 1:case 0:{u=53;break a}default:{}}if((f|0)<224){u=10;break a}e=(d|0)/2|0;i=a+(e<<5)|0;if((f|0)>31968){d=(d|0)/4|0;d=Bb(a,a+(d<<5)|0,i,a+(d+e<<5)|0,m,c)|0}else d=zb(a,i,m,c)|0;do if(Za[k[c>>2]&7](a,i)|0)f=m;else{f=b;g=m;while(1){e=g+-32|0;if((a|0)==(e|0))break;if(Za[k[c>>2]&7](e,i)|0){u=36;break}else{f=g;g=e}}if((u|0)==36){u=0;H=k[a>>2]|0;C=a+4|0;F=C;G=k[F>>2]|0;F=k[F+4>>2]|0;A=a+12|0;D=k[A>>2]|0;y=a+16|0;B=k[y>>2]|0;g=a+20|0;z=k[g>>2]|0;J=a+24|0;x=k[J>>2]|0;I=a+28|0;h=k[I>>2]|0;k[a>>2]=k[e>>2];E=f+-60|0;L=E;K=k[L+4>>2]|0;k[C>>2]=k[L>>2];k[C+4>>2]=K;C=f+-52|0;k[A>>2]=k[C>>2];A=f+-48|0;k[y>>2]=k[A>>2];y=f+-44|0;k[g>>2]=k[y>>2];g=f+-40|0;k[J>>2]=k[g>>2];f=f+-36|0;k[I>>2]=k[f>>2];k[e>>2]=H;k[E>>2]=G;k[E+4>>2]=F;k[C>>2]=D;k[A>>2]=B;k[y>>2]=z;k[g>>2]=x;k[f>>2]=h;f=e;d=d+1|0;break}d=a+32|0;if(!(Za[k[c>>2]&7](a,m)|0)){if((d|0)==(m|0)){u=53;break a}else e=a;while(1){if(Za[k[c>>2]&7](a,d)|0)break;e=d+32|0;if((e|0)==(m|0)){u=53;break a}else{L=d;d=e;e=L}}E=k[d>>2]|0;j=e+36|0;G=j;F=k[G>>2]|0;G=k[G+4>>2]|0;z=e+44|0;H=k[z>>2]|0;A=e+48|0;I=k[A>>2]|0;B=e+52|0;J=k[B>>2]|0;C=e+56|0;K=k[C>>2]|0;D=e+60|0;L=k[D>>2]|0;k[d>>2]=k[m>>2];x=n;y=k[x+4>>2]|0;d=j;k[d>>2]=k[x>>2];k[d+4>>2]=y;k[z>>2]=k[o>>2];k[A>>2]=k[p>>2];k[B>>2]=k[q>>2];k[C>>2]=k[s>>2];k[D>>2]=k[t>>2];k[m>>2]=E;d=n;k[d>>2]=F;k[d+4>>2]=G;k[o>>2]=H;k[p>>2]=I;k[q>>2]=J;k[s>>2]=K;k[t>>2]=L;d=e+64|0}if((d|0)==(m|0)){u=53;break a}else e=m;while(1){g=d;while(1){d=g+32|0;if(Za[k[c>>2]&7](a,g)|0){f=e;break}else g=d}while(1){e=f+-32|0;if(Za[k[c>>2]&7](a,e)|0)f=e;else break}if(g>>>0>=e>>>0){a=g;continue b}y=k[g>>2]|0;D=g+4|0;A=D;z=k[A>>2]|0;A=k[A+4>>2]|0;F=g+12|0;C=k[F>>2]|0;H=g+16|0;E=k[H>>2]|0;J=g+20|0;G=k[J>>2]|0;L=g+24|0;I=k[L>>2]|0;x=g+28|0;K=k[x>>2]|0;k[g>>2]=k[e>>2];B=f+-28|0;i=B;j=k[i+4>>2]|0;k[D>>2]=k[i>>2];k[D+4>>2]=j;D=f+-20|0;k[F>>2]=k[D>>2];F=f+-16|0;k[H>>2]=k[F>>2];H=f+-12|0;k[J>>2]=k[H>>2];J=f+-8|0;k[L>>2]=k[J>>2];L=f+-4|0;k[x>>2]=k[L>>2];k[e>>2]=y;k[B>>2]=z;k[B+4>>2]=A;k[D>>2]=C;k[F>>2]=E;k[H>>2]=G;k[J>>2]=I;k[L>>2]=K}}while(0);e=a+32|0;c:do if(e>>>0<f>>>0)while(1){h=e;while(1){e=h+32|0;if(Za[k[c>>2]&7](h,i)|0)h=e;else break}while(1){g=f+-32|0;if(Za[k[c>>2]&7](g,i)|0)break;else f=g}if(h>>>0>g>>>0){e=i;break c}z=k[h>>2]|0;E=h+4|0;B=E;A=k[B>>2]|0;B=k[B+4>>2]|0;G=h+12|0;D=k[G>>2]|0;I=h+16|0;F=k[I>>2]|0;K=h+20|0;H=k[K>>2]|0;x=h+24|0;J=k[x>>2]|0;y=h+28|0;L=k[y>>2]|0;k[h>>2]=k[g>>2];C=f+-28|0;N=C;M=k[N+4>>2]|0;k[E>>2]=k[N>>2];k[E+4>>2]=M;E=f+-20|0;k[G>>2]=k[E>>2];G=f+-16|0;k[I>>2]=k[G>>2];I=f+-12|0;k[K>>2]=k[I>>2];K=f+-8|0;k[x>>2]=k[K>>2];f=f+-4|0;k[y>>2]=k[f>>2];k[g>>2]=z;k[C>>2]=A;k[C+4>>2]=B;k[E>>2]=D;k[G>>2]=F;k[I>>2]=H;k[K>>2]=J;k[f>>2]=L;f=g;i=(i|0)==(h|0)?g:i;d=d+1|0}else{h=e;e=i}while(0);if((h|0)!=(e|0)?Za[k[c>>2]&7](e,h)|0:0){A=k[h>>2]|0;F=h+4|0;C=F;B=k[C>>2]|0;C=k[C+4>>2]|0;H=h+12|0;E=k[H>>2]|0;J=h+16|0;G=k[J>>2]|0;L=h+20|0;I=k[L>>2]|0;N=h+24|0;K=k[N>>2]|0;z=h+28|0;M=k[z>>2]|0;k[h>>2]=k[e>>2];D=e+4|0;x=D;y=k[x+4>>2]|0;k[F>>2]=k[x>>2];k[F+4>>2]=y;F=e+12|0;k[H>>2]=k[F>>2];H=e+16|0;k[J>>2]=k[H>>2];J=e+20|0;k[L>>2]=k[J>>2];L=e+24|0;k[N>>2]=k[L>>2];N=e+28|0;k[z>>2]=k[N>>2];k[e>>2]=A;k[D>>2]=B;k[D+4>>2]=C;k[F>>2]=E;k[H>>2]=G;k[J>>2]=I;k[L>>2]=K;k[N>>2]=M;d=d+1|0}if(!d){d=Cb(a,h,c)|0;e=h+32|0;if(Cb(e,b,c)|0){u=48;break}if(d){a=e;continue}}N=h;if((N-j|0)>=(l-N|0)){u=52;break}ob(a,h,c);a=h+32|0}if((u|0)==48){u=0;if(d){u=53;break}else{b=h;continue}}else if((u|0)==52){u=0;ob(h+32|0,b,c);b=h;continue}}if((u|0)==4){if(!(Za[k[c>>2]&7](m,a)|0)){r=w;return}I=k[a>>2]|0;A=a+4|0;H=A;G=k[H>>2]|0;H=k[H+4>>2]|0;B=a+12|0;J=k[B>>2]|0;C=a+16|0;K=k[C>>2]|0;D=a+20|0;L=k[D>>2]|0;E=a+24|0;M=k[E>>2]|0;F=a+28|0;N=k[F>>2]|0;k[a>>2]=k[m>>2];y=n;z=k[y+4>>2]|0;k[A>>2]=k[y>>2];k[A+4>>2]=z;k[B>>2]=k[o>>2];k[C>>2]=k[p>>2];k[D>>2]=k[q>>2];k[E>>2]=k[s>>2];k[F>>2]=k[t>>2];k[m>>2]=I;I=n;k[I>>2]=G;k[I+4>>2]=H;k[o>>2]=J;k[p>>2]=K;k[q>>2]=L;k[s>>2]=M;k[t>>2]=N;r=w;return}else if((u|0)==6){zb(a,a+32|0,m,c)|0;r=w;return}else if((u|0)==7){Ab(a,a+32|0,a+64|0,m,c)|0;r=w;return}else if((u|0)==8){Bb(a,a+32|0,a+64|0,a+96|0,m,c)|0;r=w;return}else if((u|0)==10){e=a+64|0;zb(a,a+32|0,e,c)|0;d=a+96|0;if((d|0)!=(b|0)){n=v+4|0;o=v+12|0;p=v+16|0;q=v+20|0;s=v+24|0;t=v+28|0;m=d;while(1){if(Za[k[c>>2]&7](m,e)|0){k[v>>2]=k[m>>2];M=m+4|0;N=k[M+4>>2]|0;d=n;k[d>>2]=k[M>>2];k[d+4>>2]=N;k[o>>2]=k[m+12>>2];k[p>>2]=k[m+16>>2];k[q>>2]=k[m+20>>2];k[s>>2]=k[m+24>>2];k[t>>2]=k[m+28>>2];d=m;while(1){k[d>>2]=k[e>>2];l=e+4|0;h=l;g=k[h+4>>2]|0;f=d+4|0;k[f>>2]=k[h>>2];k[f+4>>2]=g;f=e+12|0;k[d+12>>2]=k[f>>2];g=e+16|0;k[d+16>>2]=k[g>>2];h=e+20|0;k[d+20>>2]=k[h>>2];i=e+24|0;k[d+24>>2]=k[i>>2];j=e+28|0;k[d+28>>2]=k[j>>2];if((e|0)==(a|0))break;d=e+-32|0;if(Za[k[c>>2]&7](v,d)|0){N=e;e=d;d=N}else break}k[e>>2]=k[v>>2];L=n;M=k[L+4>>2]|0;N=l;k[N>>2]=k[L>>2];k[N+4>>2]=M;k[f>>2]=k[o>>2];k[g>>2]=k[p>>2];k[h>>2]=k[q>>2];k[i>>2]=k[s>>2];k[j>>2]=k[t>>2]}d=m+32|0;if((d|0)==(b|0))break;else{e=m;m=d}}}r=w;return}else if((u|0)==53){r=w;return}}function pb(a,b){a=a|0;b=b|0;var c=0.0,d=0.0,e=0,f=0,g=0,h=0,j=0,l=0,m=0;c=+p[a+16>>3];d=+p[b+16>>3];if(c<d){m=1;return m|0}if(d<c){m=0;return m|0}e=i[a+24>>0]|0;f=i[b+24>>0]|0;if((e&255)<(f&255)){m=1;return m|0}if((f&255)<(e&255)){m=0;return m|0}g=k[a+8>>2]|0;b=k[b+8>>2]|0;e=k[g+20>>2]|0;f=k[g+12>>2]|0;a=e-f|0;g=(k[g+24>>2]|0)-(k[g+16>>2]|0)|0;h=k[b+20>>2]|0;j=k[b+12>>2]|0;l=h-j|0;b=(k[b+24>>2]|0)-(k[b+16>>2]|0)|0;if((a|0)>=0){if((e|0)==(f|0)){m=0;return m|0}}else{a=0-a|0;g=0-g|0}if((l|0)>=0)if((h|0)==(j|0)){m=(a|0)!=0;return m|0}else e=l;else{e=0-l|0;b=0-b|0}j=(e|0)<0?0-e|0:e;h=(g|0)<0?0-g|0:g;h=ne(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;l=(a|0)<0?0-a|0:a;m=(b|0)<0?0-b|0:b;l=ne(m|0,((m|0)<0)<<31>>31|0,l|0,((l|0)<0)<<31>>31|0)|0;m=L;f=ha(e>>31|1,g>>31|1)|0;e=ha(b>>31|1,a>>31|1)|0;if((f|0)<(e|0)){m=1;return m|0}if((e|0)<(f|0)){m=0;return m|0}if((f|0)==-1){m=m>>>0<j>>>0|(m|0)==(j|0)&l>>>0<h>>>0;return m|0}else{m=j>>>0<m>>>0|(j|0)==(m|0)&h>>>0<l>>>0;return m|0}return 0}function qb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0;t=r;r=r+64|0;q=t+32|0;p=t;o=b;a:while(1){l=o;n=o+-32|0;s=a;b:while(1){h=s;a=l-h|0;b=a>>5;switch(b|0){case 2:{m=4;break a}case 3:{m=6;break a}case 4:{m=14;break a}case 5:{m=15;break a}case 1:case 0:{m=82;break a}default:{}}if((a|0)<992){m=21;break a}d=(b|0)/2|0;g=s+(d<<5)|0;do if((a|0)>31968){b=(b|0)/4|0;e=s+(b<<5)|0;b=s+(b+d<<5)|0;a=xb(s,e,g,b,c)|0;if(Za[k[c>>2]&7](n,b)|0){k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];k[p+12>>2]=k[b+12>>2];k[p+16>>2]=k[b+16>>2];k[p+20>>2]=k[b+20>>2];k[p+24>>2]=k[b+24>>2];k[p+28>>2]=k[b+28>>2];k[b>>2]=k[n>>2];k[b+4>>2]=k[n+4>>2];k[b+8>>2]=k[n+8>>2];k[b+12>>2]=k[n+12>>2];k[b+16>>2]=k[n+16>>2];k[b+20>>2]=k[n+20>>2];j[b+24>>1]=j[n+24>>1]|0;i[b+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;d=a+1|0;if(Za[k[c>>2]&7](b,g)|0){k[p>>2]=k[g>>2];k[p+4>>2]=k[g+4>>2];k[p+8>>2]=k[g+8>>2];k[p+12>>2]=k[g+12>>2];k[p+16>>2]=k[g+16>>2];k[p+20>>2]=k[g+20>>2];k[p+24>>2]=k[g+24>>2];k[p+28>>2]=k[g+28>>2];k[g>>2]=k[b>>2];k[g+4>>2]=k[b+4>>2];k[g+8>>2]=k[b+8>>2];k[g+12>>2]=k[b+12>>2];k[g+16>>2]=k[b+16>>2];k[g+20>>2]=k[b+20>>2];j[g+24>>1]=j[b+24>>1]|0;i[g+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;b=a+2|0;if(Za[k[c>>2]&7](g,e)|0){k[p>>2]=k[e>>2];k[p+4>>2]=k[e+4>>2];k[p+8>>2]=k[e+8>>2];k[p+12>>2]=k[e+12>>2];k[p+16>>2]=k[e+16>>2];k[p+20>>2]=k[e+20>>2];k[p+24>>2]=k[e+24>>2];k[p+28>>2]=k[e+28>>2];k[e>>2]=k[g>>2];k[e+4>>2]=k[g+4>>2];k[e+8>>2]=k[g+8>>2];k[e+12>>2]=k[g+12>>2];k[e+16>>2]=k[g+16>>2];k[e+20>>2]=k[g+20>>2];j[e+24>>1]=j[g+24>>1]|0;i[e+26>>0]=i[g+26>>0]|0;k[g>>2]=k[p>>2];k[g+4>>2]=k[p+4>>2];k[g+8>>2]=k[p+8>>2];k[g+12>>2]=k[p+12>>2];k[g+16>>2]=k[p+16>>2];k[g+20>>2]=k[p+20>>2];j[g+24>>1]=j[p+24>>1]|0;i[g+26>>0]=i[p+26>>0]|0;if(Za[k[c>>2]&7](e,s)|0){k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[e>>2];k[s+4>>2]=k[e+4>>2];k[s+8>>2]=k[e+8>>2];k[s+12>>2]=k[e+12>>2];k[s+16>>2]=k[e+16>>2];k[s+20>>2]=k[e+20>>2];j[s+24>>1]=j[e+24>>1]|0;i[s+26>>0]=i[e+26>>0]|0;k[e>>2]=k[p>>2];k[e+4>>2]=k[p+4>>2];k[e+8>>2]=k[p+8>>2];k[e+12>>2]=k[p+12>>2];k[e+16>>2]=k[p+16>>2];k[e+20>>2]=k[p+20>>2];j[e+24>>1]=j[p+24>>1]|0;i[e+26>>0]=i[p+26>>0]|0;a=a+4|0}else a=a+3|0}else a=b}else a=d}}else{f=Za[k[c>>2]&7](g,s)|0;a=Za[k[c>>2]&7](n,g)|0;if(!f){if(!a){a=0;break};k[p>>2]=k[g>>2];k[p+4>>2]=k[g+4>>2];k[p+8>>2]=k[g+8>>2];k[p+12>>2]=k[g+12>>2];k[p+16>>2]=k[g+16>>2];k[p+20>>2]=k[g+20>>2];k[p+24>>2]=k[g+24>>2];k[p+28>>2]=k[g+28>>2];k[g>>2]=k[n>>2];k[g+4>>2]=k[n+4>>2];k[g+8>>2]=k[n+8>>2];k[g+12>>2]=k[n+12>>2];k[g+16>>2]=k[n+16>>2];k[g+20>>2]=k[n+20>>2];j[g+24>>1]=j[n+24>>1]|0;i[g+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;if(!(Za[k[c>>2]&7](g,s)|0)){a=1;break};k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[g>>2];k[s+4>>2]=k[g+4>>2];k[s+8>>2]=k[g+8>>2];k[s+12>>2]=k[g+12>>2];k[s+16>>2]=k[g+16>>2];k[s+20>>2]=k[g+20>>2];j[s+24>>1]=j[g+24>>1]|0;i[s+26>>0]=i[g+26>>0]|0;k[g>>2]=k[p>>2];k[g+4>>2]=k[p+4>>2];k[g+8>>2]=k[p+8>>2];k[g+12>>2]=k[p+12>>2];k[g+16>>2]=k[p+16>>2];k[g+20>>2]=k[p+20>>2];j[g+24>>1]=j[p+24>>1]|0;i[g+26>>0]=i[p+26>>0]|0;a=2;break};k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];if(a){k[s>>2]=k[n>>2];k[s+4>>2]=k[n+4>>2];k[s+8>>2]=k[n+8>>2];k[s+12>>2]=k[n+12>>2];k[s+16>>2]=k[n+16>>2];k[s+20>>2]=k[n+20>>2];j[s+24>>1]=j[n+24>>1]|0;i[s+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;a=1;break};k[s>>2]=k[g>>2];k[s+4>>2]=k[g+4>>2];k[s+8>>2]=k[g+8>>2];k[s+12>>2]=k[g+12>>2];k[s+16>>2]=k[g+16>>2];k[s+20>>2]=k[g+20>>2];j[s+24>>1]=j[g+24>>1]|0;i[s+26>>0]=i[g+26>>0]|0;k[g>>2]=k[p>>2];k[g+4>>2]=k[p+4>>2];k[g+8>>2]=k[p+8>>2];k[g+12>>2]=k[p+12>>2];k[g+16>>2]=k[p+16>>2];k[g+20>>2]=k[p+20>>2];j[g+24>>1]=j[p+24>>1]|0;i[g+26>>0]=i[p+26>>0]|0;if(Za[k[c>>2]&7](n,g)|0){k[p>>2]=k[g>>2];k[p+4>>2]=k[g+4>>2];k[p+8>>2]=k[g+8>>2];k[p+12>>2]=k[g+12>>2];k[p+16>>2]=k[g+16>>2];k[p+20>>2]=k[g+20>>2];k[p+24>>2]=k[g+24>>2];k[p+28>>2]=k[g+28>>2];k[g>>2]=k[n>>2];k[g+4>>2]=k[n+4>>2];k[g+8>>2]=k[n+8>>2];k[g+12>>2]=k[n+12>>2];k[g+16>>2]=k[n+16>>2];k[g+20>>2]=k[n+20>>2];j[g+24>>1]=j[n+24>>1]|0;i[g+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;a=2}else a=1}while(0);do if(Za[k[c>>2]&7](s,g)|0)b=n;else{b=n;while(1){b=b+-32|0;if((s|0)==(b|0))break;if(Za[k[c>>2]&7](b,g)|0){m=65;break}}if((m|0)==65){m=0;k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[b>>2];k[s+4>>2]=k[b+4>>2];k[s+8>>2]=k[b+8>>2];k[s+12>>2]=k[b+12>>2];k[s+16>>2]=k[b+16>>2];k[s+20>>2]=k[b+20>>2];j[s+24>>1]=j[b+24>>1]|0;i[s+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;a=a+1|0;break}a=s+32|0;if(!(Za[k[c>>2]&7](s,n)|0)){if((a|0)==(n|0)){m=82;break a}else b=s;while(1){if(Za[k[c>>2]&7](s,a)|0)break;b=a+32|0;if((b|0)==(n|0)){m=82;break a}else{h=a;a=b;b=h}}k[p>>2]=k[a>>2];k[p+4>>2]=k[a+4>>2];k[p+8>>2]=k[a+8>>2];k[p+12>>2]=k[a+12>>2];k[p+16>>2]=k[a+16>>2];k[p+20>>2]=k[a+20>>2];k[p+24>>2]=k[a+24>>2];k[p+28>>2]=k[a+28>>2];k[a>>2]=k[n>>2];k[a+4>>2]=k[n+4>>2];k[a+8>>2]=k[n+8>>2];k[a+12>>2]=k[n+12>>2];k[a+16>>2]=k[n+16>>2];k[a+20>>2]=k[n+20>>2];j[a+24>>1]=j[n+24>>1]|0;i[a+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;a=b+64|0}if((a|0)==(n|0)){m=82;break a}else d=n;while(1){b=a;while(1){a=b+32|0;if(Za[k[c>>2]&7](s,b)|0)break;else b=a}do d=d+-32|0;while(Za[k[c>>2]&7](s,d)|0);if(b>>>0>=d>>>0){s=b;continue b};k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];k[p+12>>2]=k[b+12>>2];k[p+16>>2]=k[b+16>>2];k[p+20>>2]=k[b+20>>2];k[p+24>>2]=k[b+24>>2];k[p+28>>2]=k[b+28>>2];k[b>>2]=k[d>>2];k[b+4>>2]=k[d+4>>2];k[b+8>>2]=k[d+8>>2];k[b+12>>2]=k[d+12>>2];k[b+16>>2]=k[d+16>>2];k[b+20>>2]=k[d+20>>2];j[b+24>>1]=j[d+24>>1]|0;i[b+26>>0]=i[d+26>>0]|0;k[d>>2]=k[p>>2];k[d+4>>2]=k[p+4>>2];k[d+8>>2]=k[p+8>>2];k[d+12>>2]=k[p+12>>2];k[d+16>>2]=k[p+16>>2];k[d+20>>2]=k[p+20>>2];j[d+24>>1]=j[p+24>>1]|0;i[d+26>>0]=i[p+26>>0]|0}}while(0);d=s+32|0;c:do if(d>>>0<b>>>0)while(1){e=d;while(1){d=e+32|0;if(Za[k[c>>2]&7](e,g)|0)e=d;else{f=b;break}}do f=f+-32|0;while(!(Za[k[c>>2]&7](f,g)|0));if(e>>>0>f>>>0){d=e;b=g;break c};k[p>>2]=k[e>>2];k[p+4>>2]=k[e+4>>2];k[p+8>>2]=k[e+8>>2];k[p+12>>2]=k[e+12>>2];k[p+16>>2]=k[e+16>>2];k[p+20>>2]=k[e+20>>2];k[p+24>>2]=k[e+24>>2];k[p+28>>2]=k[e+28>>2];k[e>>2]=k[f>>2];k[e+4>>2]=k[f+4>>2];k[e+8>>2]=k[f+8>>2];k[e+12>>2]=k[f+12>>2];k[e+16>>2]=k[f+16>>2];k[e+20>>2]=k[f+20>>2];j[e+24>>1]=j[f+24>>1]|0;i[e+26>>0]=i[f+26>>0]|0;k[f>>2]=k[p>>2];k[f+4>>2]=k[p+4>>2];k[f+8>>2]=k[p+8>>2];k[f+12>>2]=k[p+12>>2];k[f+16>>2]=k[p+16>>2];k[f+20>>2]=k[p+20>>2];j[f+24>>1]=j[p+24>>1]|0;i[f+26>>0]=i[p+26>>0]|0;b=f;g=(g|0)==(e|0)?f:g;a=a+1|0}else b=g;while(0);if((d|0)!=(b|0)?Za[k[c>>2]&7](b,d)|0:0){k[p>>2]=k[d>>2];k[p+4>>2]=k[d+4>>2];k[p+8>>2]=k[d+8>>2];k[p+12>>2]=k[d+12>>2];k[p+16>>2]=k[d+16>>2];k[p+20>>2]=k[d+20>>2];k[p+24>>2]=k[d+24>>2];k[p+28>>2]=k[d+28>>2];k[d>>2]=k[b>>2];k[d+4>>2]=k[b+4>>2];k[d+8>>2]=k[b+8>>2];k[d+12>>2]=k[b+12>>2];k[d+16>>2]=k[b+16>>2];k[d+20>>2]=k[b+20>>2];j[d+24>>1]=j[b+24>>1]|0;i[d+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;a=a+1|0}if(!a){a=yb(s,d,c)|0;b=d+32|0;if(yb(b,o,c)|0){m=77;break}if(a){s=b;continue}}g=d;if((g-h|0)>=(l-g|0)){m=81;break}qb(s,d,c);s=d+32|0}if((m|0)==77){m=0;if(a){m=82;break}else{a=s;o=d;continue}}else if((m|0)==81){m=0;qb(d+32|0,o,c);a=s;o=d;continue}}if((m|0)==4){if(!(Za[k[c>>2]&7](n,s)|0)){r=t;return};k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[n>>2];k[s+4>>2]=k[n+4>>2];k[s+8>>2]=k[n+8>>2];k[s+12>>2]=k[n+12>>2];k[s+16>>2]=k[n+16>>2];k[s+20>>2]=k[n+20>>2];j[s+24>>1]=j[n+24>>1]|0;i[s+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;r=t;return}else if((m|0)==6){b=s+32|0;q=Za[k[c>>2]&7](b,s)|0;a=Za[k[c>>2]&7](n,b)|0;if(!q){if(!a){r=t;return};k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];k[p+12>>2]=k[b+12>>2];k[p+16>>2]=k[b+16>>2];k[p+20>>2]=k[b+20>>2];k[p+24>>2]=k[b+24>>2];k[p+28>>2]=k[b+28>>2];k[b>>2]=k[n>>2];k[b+4>>2]=k[n+4>>2];k[b+8>>2]=k[n+8>>2];k[b+12>>2]=k[n+12>>2];k[b+16>>2]=k[n+16>>2];k[b+20>>2]=k[n+20>>2];j[b+24>>1]=j[n+24>>1]|0;i[b+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;if(!(Za[k[c>>2]&7](b,s)|0)){r=t;return};k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[b>>2];k[s+4>>2]=k[b+4>>2];k[s+8>>2]=k[b+8>>2];k[s+12>>2]=k[b+12>>2];k[s+16>>2]=k[b+16>>2];k[s+20>>2]=k[b+20>>2];j[s+24>>1]=j[b+24>>1]|0;i[s+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;r=t;return};k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];if(a){k[s>>2]=k[n>>2];k[s+4>>2]=k[n+4>>2];k[s+8>>2]=k[n+8>>2];k[s+12>>2]=k[n+12>>2];k[s+16>>2]=k[n+16>>2];k[s+20>>2]=k[n+20>>2];j[s+24>>1]=j[n+24>>1]|0;i[s+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;r=t;return};k[s>>2]=k[b>>2];k[s+4>>2]=k[b+4>>2];k[s+8>>2]=k[b+8>>2];k[s+12>>2]=k[b+12>>2];k[s+16>>2]=k[b+16>>2];k[s+20>>2]=k[b+20>>2];j[s+24>>1]=j[b+24>>1]|0;i[s+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;if(!(Za[k[c>>2]&7](n,b)|0)){r=t;return};k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];k[p+12>>2]=k[b+12>>2];k[p+16>>2]=k[b+16>>2];k[p+20>>2]=k[b+20>>2];k[p+24>>2]=k[b+24>>2];k[p+28>>2]=k[b+28>>2];k[b>>2]=k[n>>2];k[b+4>>2]=k[n+4>>2];k[b+8>>2]=k[n+8>>2];k[b+12>>2]=k[n+12>>2];k[b+16>>2]=k[n+16>>2];k[b+20>>2]=k[n+20>>2];j[b+24>>1]=j[n+24>>1]|0;i[b+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;r=t;return}else if((m|0)==14){xb(s,s+32|0,s+64|0,n,c)|0;r=t;return}else if((m|0)==15){a=s+32|0;b=s+64|0;d=s+96|0;xb(s,a,b,d,c)|0;if(!(Za[k[c>>2]&7](n,d)|0)){r=t;return};k[p>>2]=k[d>>2];k[p+4>>2]=k[d+4>>2];k[p+8>>2]=k[d+8>>2];k[p+12>>2]=k[d+12>>2];k[p+16>>2]=k[d+16>>2];k[p+20>>2]=k[d+20>>2];k[p+24>>2]=k[d+24>>2];k[p+28>>2]=k[d+28>>2];k[d>>2]=k[n>>2];k[d+4>>2]=k[n+4>>2];k[d+8>>2]=k[n+8>>2];k[d+12>>2]=k[n+12>>2];k[d+16>>2]=k[n+16>>2];k[d+20>>2]=k[n+20>>2];j[d+24>>1]=j[n+24>>1]|0;i[d+26>>0]=i[n+26>>0]|0;k[n>>2]=k[p>>2];k[n+4>>2]=k[p+4>>2];k[n+8>>2]=k[p+8>>2];k[n+12>>2]=k[p+12>>2];k[n+16>>2]=k[p+16>>2];k[n+20>>2]=k[p+20>>2];j[n+24>>1]=j[p+24>>1]|0;i[n+26>>0]=i[p+26>>0]|0;if(!(Za[k[c>>2]&7](d,b)|0)){r=t;return};k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];k[p+12>>2]=k[b+12>>2];k[p+16>>2]=k[b+16>>2];k[p+20>>2]=k[b+20>>2];k[p+24>>2]=k[b+24>>2];k[p+28>>2]=k[b+28>>2];k[b>>2]=k[d>>2];k[b+4>>2]=k[d+4>>2];k[b+8>>2]=k[d+8>>2];k[b+12>>2]=k[d+12>>2];k[b+16>>2]=k[d+16>>2];k[b+20>>2]=k[d+20>>2];j[b+24>>1]=j[d+24>>1]|0;i[b+26>>0]=i[d+26>>0]|0;k[d>>2]=k[p>>2];k[d+4>>2]=k[p+4>>2];k[d+8>>2]=k[p+8>>2];k[d+12>>2]=k[p+12>>2];k[d+16>>2]=k[p+16>>2];k[d+20>>2]=k[p+20>>2];j[d+24>>1]=j[p+24>>1]|0;i[d+26>>0]=i[p+26>>0]|0;if(!(Za[k[c>>2]&7](b,a)|0)){r=t;return};k[p>>2]=k[a>>2];k[p+4>>2]=k[a+4>>2];k[p+8>>2]=k[a+8>>2];k[p+12>>2]=k[a+12>>2];k[p+16>>2]=k[a+16>>2];k[p+20>>2]=k[a+20>>2];k[p+24>>2]=k[a+24>>2];k[p+28>>2]=k[a+28>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];j[a+24>>1]=j[b+24>>1]|0;i[a+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;if(!(Za[k[c>>2]&7](a,s)|0)){r=t;return};k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[a>>2];k[s+4>>2]=k[a+4>>2];k[s+8>>2]=k[a+8>>2];k[s+12>>2]=k[a+12>>2];k[s+16>>2]=k[a+16>>2];k[s+20>>2]=k[a+20>>2];j[s+24>>1]=j[a+24>>1]|0;i[s+26>>0]=i[a+26>>0]|0;k[a>>2]=k[p>>2];k[a+4>>2]=k[p+4>>2];k[a+8>>2]=k[p+8>>2];k[a+12>>2]=k[p+12>>2];k[a+16>>2]=k[p+16>>2];k[a+20>>2]=k[p+20>>2];j[a+24>>1]=j[p+24>>1]|0;i[a+26>>0]=i[p+26>>0]|0;r=t;return}else if((m|0)==21){b=s+64|0;a=s+32|0;n=Za[k[c>>2]&7](a,s)|0;d=Za[k[c>>2]&7](b,a)|0;do if(n){k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];if(d){k[s>>2]=k[b>>2];k[s+4>>2]=k[b+4>>2];k[s+8>>2]=k[b+8>>2];k[s+12>>2]=k[b+12>>2];k[s+16>>2]=k[b+16>>2];k[s+20>>2]=k[b+20>>2];j[s+24>>1]=j[b+24>>1]|0;i[s+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0;break};k[s>>2]=k[a>>2];k[s+4>>2]=k[a+4>>2];k[s+8>>2]=k[a+8>>2];k[s+12>>2]=k[a+12>>2];k[s+16>>2]=k[a+16>>2];k[s+20>>2]=k[a+20>>2];j[s+24>>1]=j[a+24>>1]|0;i[s+26>>0]=i[a+26>>0]|0;k[a>>2]=k[p>>2];k[a+4>>2]=k[p+4>>2];k[a+8>>2]=k[p+8>>2];k[a+12>>2]=k[p+12>>2];k[a+16>>2]=k[p+16>>2];k[a+20>>2]=k[p+20>>2];j[a+24>>1]=j[p+24>>1]|0;i[a+26>>0]=i[p+26>>0]|0;if(Za[k[c>>2]&7](b,a)|0){k[p>>2]=k[a>>2];k[p+4>>2]=k[a+4>>2];k[p+8>>2]=k[a+8>>2];k[p+12>>2]=k[a+12>>2];k[p+16>>2]=k[a+16>>2];k[p+20>>2]=k[a+20>>2];k[p+24>>2]=k[a+24>>2];k[p+28>>2]=k[a+28>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];j[a+24>>1]=j[b+24>>1]|0;i[a+26>>0]=i[b+26>>0]|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];j[b+24>>1]=j[p+24>>1]|0;i[b+26>>0]=i[p+26>>0]|0}}else if(d?(k[p>>2]=k[a>>2],k[p+4>>2]=k[a+4>>2],k[p+8>>2]=k[a+8>>2],k[p+12>>2]=k[a+12>>2],k[p+16>>2]=k[a+16>>2],k[p+20>>2]=k[a+20>>2],k[p+24>>2]=k[a+24>>2],k[p+28>>2]=k[a+28>>2],k[a>>2]=k[b>>2],k[a+4>>2]=k[b+4>>2],k[a+8>>2]=k[b+8>>2],k[a+12>>2]=k[b+12>>2],k[a+16>>2]=k[b+16>>2],k[a+20>>2]=k[b+20>>2],j[a+24>>1]=j[b+24>>1]|0,i[a+26>>0]=i[b+26>>0]|0,k[b>>2]=k[p>>2],k[b+4>>2]=k[p+4>>2],k[b+8>>2]=k[p+8>>2],k[b+12>>2]=k[p+12>>2],k[b+16>>2]=k[p+16>>2],k[b+20>>2]=k[p+20>>2],j[b+24>>1]=j[p+24>>1]|0,i[b+26>>0]=i[p+26>>0]|0,Za[k[c>>2]&7](a,s)|0):0){k[p>>2]=k[s>>2];k[p+4>>2]=k[s+4>>2];k[p+8>>2]=k[s+8>>2];k[p+12>>2]=k[s+12>>2];k[p+16>>2]=k[s+16>>2];k[p+20>>2]=k[s+20>>2];k[p+24>>2]=k[s+24>>2];k[p+28>>2]=k[s+28>>2];k[s>>2]=k[a>>2];k[s+4>>2]=k[a+4>>2];k[s+8>>2]=k[a+8>>2];k[s+12>>2]=k[a+12>>2];k[s+16>>2]=k[a+16>>2];k[s+20>>2]=k[a+20>>2];j[s+24>>1]=j[a+24>>1]|0;i[s+26>>0]=i[a+26>>0]|0;k[a>>2]=k[p>>2];k[a+4>>2]=k[p+4>>2];k[a+8>>2]=k[p+8>>2];k[a+12>>2]=k[p+12>>2];k[a+16>>2]=k[p+16>>2];k[a+20>>2]=k[p+20>>2];j[a+24>>1]=j[p+24>>1]|0;i[a+26>>0]=i[p+26>>0]|0}while(0);a=s+96|0;if((a|0)!=(o|0))while(1){if(Za[k[c>>2]&7](a,b)|0){k[q>>2]=k[a>>2];k[q+4>>2]=k[a+4>>2];k[q+8>>2]=k[a+8>>2];k[q+12>>2]=k[a+12>>2];k[q+16>>2]=k[a+16>>2];k[q+20>>2]=k[a+20>>2];k[q+24>>2]=k[a+24>>2];k[q+28>>2]=k[a+28>>2];d=a;e=b;while(1){k[d>>2]=k[e>>2];k[d+4>>2]=k[e+4>>2];k[d+8>>2]=k[e+8>>2];k[d+12>>2]=k[e+12>>2];k[d+16>>2]=k[e+16>>2];k[d+20>>2]=k[e+20>>2];j[d+24>>1]=j[e+24>>1]|0;i[d+26>>0]=i[e+26>>0]|0;if((e|0)==(s|0))break;b=e+-32|0;if(Za[k[c>>2]&7](q,b)|0){d=e;e=b}else break}k[e>>2]=k[q>>2];k[e+4>>2]=k[q+4>>2];k[e+8>>2]=k[q+8>>2];k[e+12>>2]=k[q+12>>2];k[e+16>>2]=k[q+16>>2];k[e+20>>2]=k[q+20>>2];j[e+24>>1]=j[q+24>>1]|0;i[e+26>>0]=i[q+26>>0]|0}b=a+32|0;if((b|0)==(o|0))break;else{p=a;a=b;b=p}}r=t;return}else if((m|0)==82){r=t;return}}function rb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;a:while(1){p=b;r=b+-32|0;q=b+-64|0;z=b+-28|0;s=z+4|0;t=b+-20|0;u=b+-16|0;v=b+-12|0;w=b+-8|0;x=b+-4|0;b:while(1){o=a;c=p-o|0;d=c>>5;switch(d|0){case 2:{y=4;break a}case 3:{y=8;break a}case 4:{y=9;break a}case 5:{y=10;break a}case 1:case 0:{y=83;break a}default:{}}if((c|0)<224){y=12;break a}e=(d|0)/2|0;j=a+(e<<5)|0;if((c|0)>31968){c=(d|0)/4|0;c=vb(a,a+(c<<5)|0,j,a+(c+e<<5)|0,r)|0}else c=tb(a,j,r)|0;n=a+4|0;d=a+(e<<5)+4|0;m=i[n>>0]^1;l=i[d>>0]^1;c:do if((m&255)<(l&255))e=r;else{if((l&255)>=(m&255)?(k[n+4>>2]|0)>>>0<(k[d+4>>2]|0)>>>0:0){e=r;break}d:do if((a|0)!=(q|0)){h=d+4|0;e=q;f=r;while(1){g=f+-28|0;d=i[g>>0]^1;if((d&255)<(l&255))break;if((l&255)>=(d&255)?(k[g+4>>2]|0)>>>0<(k[h>>2]|0)>>>0:0)break;d=e+-32|0;if((a|0)==(d|0))break d;else{f=e;e=d}}G=k[a>>2]|0;E=n;F=k[E>>2]|0;E=k[E+4>>2]|0;A=a+12|0;D=k[A>>2]|0;h=a+16|0;B=k[h>>2]|0;I=a+20|0;d=k[I>>2]|0;y=a+24|0;l=k[y>>2]|0;H=a+28|0;m=k[H>>2]|0;k[a>>2]=k[e>>2];K=g;J=k[K+4>>2]|0;C=n;k[C>>2]=k[K>>2];k[C+4>>2]=J;C=f+-20|0;k[A>>2]=k[C>>2];A=f+-16|0;k[h>>2]=k[A>>2];h=f+-12|0;k[I>>2]=k[h>>2];n=f+-8|0;k[y>>2]=k[n>>2];y=f+-4|0;k[H>>2]=k[y>>2];k[e>>2]=G;k[g>>2]=F;k[g+4>>2]=E;k[C>>2]=D;k[A>>2]=B;k[h>>2]=d;k[n>>2]=l;k[y>>2]=m;c=c+1|0;break c}while(0);d=a+32|0;c=i[z>>0]^1;do if((m&255)<(c&255))a=d;else{if((c&255)>=(m&255)?(k[n+4>>2]|0)>>>0<(k[s>>2]|0)>>>0:0){a=d;break}if((d|0)==(r|0)){y=83;break a}f=n+4|0;while(1){e=a+36|0;c=i[e>>0]^1;if((m&255)<(c&255))break;if((c&255)>=(m&255)?(k[f>>2]|0)>>>0<(k[e+4>>2]|0)>>>0:0)break;a=d+32|0;if((a|0)==(r|0)){y=83;break a}else{K=d;d=a;a=K}}F=k[d>>2]|0;E=e;D=k[E>>2]|0;E=k[E+4>>2]|0;o=a+44|0;G=k[o>>2]|0;y=a+48|0;H=k[y>>2]|0;A=a+52|0;I=k[A>>2]|0;B=a+56|0;J=k[B>>2]|0;C=a+60|0;K=k[C>>2]|0;k[d>>2]=k[r>>2];j=z;l=k[j+4>>2]|0;m=e;k[m>>2]=k[j>>2];k[m+4>>2]=l;k[o>>2]=k[t>>2];k[y>>2]=k[u>>2];k[A>>2]=k[v>>2];k[B>>2]=k[w>>2];k[C>>2]=k[x>>2];k[r>>2]=F;F=z;k[F>>2]=D;k[F+4>>2]=E;k[t>>2]=G;k[u>>2]=H;k[v>>2]=I;k[w>>2]=J;k[x>>2]=K;a=a+64|0}while(0);if((a|0)==(r|0)){y=83;break a}h=n+4|0;f=r;while(1){g=i[n>>0]^1;c=i[a+4>>0]^1;e:do if((g&255)>=(c&255)){d=a;while(1){if((c&255)>=(g&255)?(k[h>>2]|0)>>>0<(k[d+4+4>>2]|0)>>>0:0){a=d;break e}a=d+32|0;c=i[d+36>>0]^1;if((g&255)<(c&255))break;else d=a}}while(0);d=f;while(1){f=d+-32|0;e=d+-28|0;c=i[e>>0]^1;if((g&255)<(c&255)){d=f;continue}if((c&255)<(g&255))break;if((k[h>>2]|0)>>>0<(k[e+4>>2]|0)>>>0)d=f;else break}if(a>>>0>=f>>>0)continue b;A=k[a>>2]|0;C=a+4|0;y=C;o=k[y>>2]|0;y=k[y+4>>2]|0;E=a+12|0;B=k[E>>2]|0;G=a+16|0;D=k[G>>2]|0;I=a+20|0;F=k[I>>2]|0;K=a+24|0;H=k[K>>2]|0;m=a+28|0;J=k[m>>2]|0;k[a>>2]=k[f>>2];j=e;l=k[j+4>>2]|0;k[C>>2]=k[j>>2];k[C+4>>2]=l;C=d+-20|0;k[E>>2]=k[C>>2];E=d+-16|0;k[G>>2]=k[E>>2];G=d+-12|0;k[I>>2]=k[G>>2];I=d+-8|0;k[K>>2]=k[I>>2];K=d+-4|0;k[m>>2]=k[K>>2];k[f>>2]=A;A=e;k[A>>2]=o;k[A+4>>2]=y;k[C>>2]=B;k[E>>2]=D;k[G>>2]=F;k[I>>2]=H;k[K>>2]=J;a=a+32|0}}while(0);d=a+32|0;f:do if(d>>>0<e>>>0)while(1){l=j+4|0;h=i[l>>0]^1;l=l+4|0;n=d;while(1){m=n+4|0;d=i[m>>0]^1;if((d&255)>=(h&255)){if((h&255)<(d&255))break;if((k[m+4>>2]|0)>>>0>=(k[l>>2]|0)>>>0)break}n=n+32|0}f=e+-32|0;d=i[e+-28>>0]^1;g:do if((d&255)>=(h&255)){g=f;while(1){if((h&255)>=(d&255)?(k[e+-28+4>>2]|0)>>>0<(k[l>>2]|0)>>>0:0){f=g;break g}f=g+-32|0;d=i[e+-60>>0]^1;if((d&255)<(h&255)){e=g;break}else{e=g;g=f}}}while(0);if(n>>>0>f>>>0){d=n;break f}l=k[n>>2]|0;B=m;A=k[B>>2]|0;B=k[B+4>>2]|0;F=n+12|0;C=k[F>>2]|0;H=n+16|0;E=k[H>>2]|0;J=n+20|0;G=k[J>>2]|0;d=n+24|0;I=k[d>>2]|0;h=n+28|0;K=k[h>>2]|0;k[n>>2]=k[f>>2];y=e+-28|0;L=y;g=k[L+4>>2]|0;D=m;k[D>>2]=k[L>>2];k[D+4>>2]=g;D=e+-20|0;k[F>>2]=k[D>>2];F=e+-16|0;k[H>>2]=k[F>>2];H=e+-12|0;k[J>>2]=k[H>>2];J=e+-8|0;k[d>>2]=k[J>>2];d=e+-4|0;k[h>>2]=k[d>>2];k[f>>2]=l;e=y;k[e>>2]=A;k[e+4>>2]=B;k[D>>2]=C;k[F>>2]=E;k[H>>2]=G;k[J>>2]=I;k[d>>2]=K;d=n+32|0;e=f;j=(j|0)==(n|0)?f:j;c=c+1|0}while(0);do if((d|0)!=(j|0)){g=j+4|0;h=d+4|0;e=i[g>>0]^1;f=i[h>>0]^1;if((e&255)>=(f&255)){if((f&255)<(e&255))break;if((k[g+4>>2]|0)>>>0>=(k[h+4>>2]|0)>>>0)break}B=k[d>>2]|0;A=h;y=k[A>>2]|0;A=k[A+4>>2]|0;F=d+12|0;C=k[F>>2]|0;H=d+16|0;E=k[H>>2]|0;J=d+20|0;G=k[J>>2]|0;L=d+24|0;I=k[L>>2]|0;n=d+28|0;K=k[n>>2]|0;k[d>>2]=k[j>>2];l=g;m=k[l+4>>2]|0;D=h;k[D>>2]=k[l>>2];k[D+4>>2]=m;D=j+12|0;k[F>>2]=k[D>>2];F=j+16|0;k[H>>2]=k[F>>2];H=j+20|0;k[J>>2]=k[H>>2];J=j+24|0;k[L>>2]=k[J>>2];L=j+28|0;k[n>>2]=k[L>>2];k[j>>2]=B;B=g;k[B>>2]=y;k[B+4>>2]=A;k[D>>2]=C;k[F>>2]=E;k[H>>2]=G;k[J>>2]=I;k[L>>2]=K;c=c+1|0}while(0);if(!c){e=wb(a,d)|0;c=d+32|0;if(wb(c,b)|0){y=78;break}if(e){a=c;continue}}L=d;if((L-o|0)>=(p-L|0)){y=82;break}rb(a,d);a=d+32|0}if((y|0)==78)if(e){y=83;break}else{b=d;continue}else if((y|0)==82){rb(d+32|0,b);b=d;continue}}if((y|0)==4){d=a+4|0;b=i[z>>0]^1;c=i[d>>0]^1;if((b&255)>=(c&255)){if((c&255)<(b&255))return;if((k[s>>2]|0)>>>0>=(k[d+4>>2]|0)>>>0)return}G=k[a>>2]|0;F=d;E=k[F>>2]|0;F=k[F+4>>2]|0;y=a+12|0;H=k[y>>2]|0;A=a+16|0;I=k[A>>2]|0;B=a+20|0;J=k[B>>2]|0;C=a+24|0;K=k[C>>2]|0;D=a+28|0;L=k[D>>2]|0;k[a>>2]=k[r>>2];p=z;q=k[p+4>>2]|0;s=d;k[s>>2]=k[p>>2];k[s+4>>2]=q;k[y>>2]=k[t>>2];k[A>>2]=k[u>>2];k[B>>2]=k[v>>2];k[C>>2]=k[w>>2];k[D>>2]=k[x>>2];k[r>>2]=G;G=z;k[G>>2]=E;k[G+4>>2]=F;k[t>>2]=H;k[u>>2]=I;k[v>>2]=J;k[w>>2]=K;k[x>>2]=L;return}else if((y|0)==8){tb(a,a+32|0,r)|0;return}else if((y|0)==9){ub(a,a+32|0,a+64|0,r)|0;return}else if((y|0)==10){vb(a,a+32|0,a+64|0,a+96|0,r)|0;return}else if((y|0)==12){d=a+64|0;tb(a,a+32|0,d)|0;c=a+96|0;if((c|0)==(b|0))return;else x=c;while(1){f=x+4|0;l=d+4|0;c=i[f>>0]^1;e=i[l>>0]^1;if((c&255)>=(e&255)){if((e&255)>=(c&255)?(k[f+4>>2]|0)>>>0<(k[l+4>>2]|0)>>>0:0)y=16}else y=16;if((y|0)==16){y=0;p=k[x>>2]|0;r=f;q=k[r>>2]|0;r=k[r+4>>2]|0;e=x+12|0;s=k[e>>2]|0;g=x+16|0;t=k[g>>2]|0;h=x+20|0;u=k[h>>2]|0;K=x+24|0;v=k[K>>2]|0;L=x+28|0;w=k[L>>2]|0;k[x>>2]=k[d>>2];I=l;J=k[I+4>>2]|0;c=f;k[c>>2]=k[I>>2];k[c+4>>2]=J;c=d+12|0;k[e>>2]=k[c>>2];e=d+16|0;k[g>>2]=k[e>>2];g=d+20|0;k[h>>2]=k[g>>2];h=d+24|0;k[K>>2]=k[h>>2];f=d+28|0;k[L>>2]=k[f>>2];h:do if((d|0)==(a|0)){j=e;e=l}else{n=q&255^1;m=d;o=f;j=e;e=l;while(1){d=m+-32|0;l=m+-28|0;f=i[l>>0]^1;if((n&255)>=(f&255)){if((f&255)<(n&255)){d=m;f=o;break h}if(r>>>0>=(k[m+-24>>2]|0)>>>0){d=m;f=o;break h}}k[m>>2]=k[d>>2];g=l;e=k[g+4>>2]|0;c=m+4|0;k[c>>2]=k[g>>2];k[c+4>>2]=e;c=m+-20|0;k[m+12>>2]=k[c>>2];e=m+-16|0;k[m+16>>2]=k[e>>2];g=m+-12|0;k[m+20>>2]=k[g>>2];h=m+-8|0;k[m+24>>2]=k[h>>2];f=m+-4|0;k[m+28>>2]=k[f>>2];if((d|0)==(a|0)){j=e;e=l;break}else{m=d;o=f;j=e;e=l}}}while(0);k[d>>2]=p;L=e;k[L>>2]=q;k[L+4>>2]=r;k[c>>2]=s;k[j>>2]=t;k[g>>2]=u;k[h>>2]=v;k[f>>2]=w}c=x+32|0;if((c|0)==(b|0))break;else{d=x;x=c}}return}else if((y|0)==83)return}function sb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0;m=a+4|0;e=k[m>>2]|0;n=k[a>>2]|0;j=n;l=e-j>>3;i=l+1|0;if(i>>>0>536870911)xa(1340,1363,303,1438);o=a+8|0;c=(k[o>>2]|0)-j|0;if(c>>3>>>0<268435455){c=c>>2;c=c>>>0<i>>>0?i:c;if(!c){f=0;d=0}else g=5}else{c=536870911;g=5}if((g|0)==5){f=c<<3;f=(f|0)==0?1:f;d=_d(f)|0;a:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(f)|0;if(d)break a}a=ya(4)|0;k[a>>2]=128;La(a|0,8,1)}while(0);f=c}c=d+(l<<3)|0;h=d+(f<<3)|0;k[c>>2]=k[b>>2];k[d+(l<<3)+4>>2]=k[b+4>>2];g=d+(i<<3)|0;if((e|0)!=(n|0)){f=e+-8|0;while(1){b=e;e=e+-8|0;k[c+-8>>2]=k[e>>2];k[c+-4>>2]=k[b+-4>>2];if((e|0)==(n|0))break;else c=c+-8|0}c=d+(l+~((f-j|0)>>>3)<<3)|0}k[a>>2]=c;k[m>>2]=g;k[o>>2]=h;if(!n)return;$d(n);return}function tb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;x=b+4|0;v=a+4|0;e=i[x>>0]^1;d=i[v>>0]^1;if((e&255)>=(d&255))if((d&255)<(e&255))f=0;else f=(k[x+4>>2]|0)>>>0<(k[v+4>>2]|0)>>>0;else f=1;w=c+4|0;d=i[w>>0]^1;if((d&255)>=(e&255))if((e&255)<(d&255))e=0;else e=(k[w+4>>2]|0)>>>0<(k[x+4>>2]|0)>>>0;else e=1;if(!f){if(!e){x=0;return x|0}z=k[b>>2]|0;m=x;y=k[m>>2]|0;m=k[m+4>>2]|0;f=b+12|0;n=k[f>>2]|0;g=b+16|0;p=k[g>>2]|0;h=b+20|0;r=k[h>>2]|0;j=b+24|0;t=k[j>>2]|0;l=b+28|0;e=k[l>>2]|0;k[b>>2]=k[c>>2];s=w;q=k[s+4>>2]|0;o=x;k[o>>2]=k[s>>2];k[o+4>>2]=q;o=c+12|0;k[f>>2]=k[o>>2];q=c+16|0;k[g>>2]=k[q>>2];s=c+20|0;k[h>>2]=k[s>>2];u=c+24|0;k[j>>2]=k[u>>2];d=c+28|0;k[l>>2]=k[d>>2];k[c>>2]=z;c=w;k[c>>2]=y;k[c+4>>2]=m;k[o>>2]=n;k[q>>2]=p;k[s>>2]=r;k[u>>2]=t;k[d>>2]=e;d=i[x>>0]^1;e=i[v>>0]^1;if((d&255)>=(e&255)){if((e&255)<(d&255)){z=1;return z|0}if((k[x+4>>2]|0)>>>0>=(k[v+4>>2]|0)>>>0){z=1;return z|0}}r=k[a>>2]|0;t=v;s=k[t>>2]|0;t=k[t+4>>2]|0;m=a+12|0;u=k[m>>2]|0;n=a+16|0;w=k[n>>2]|0;o=a+20|0;c=k[o>>2]|0;p=a+24|0;y=k[p>>2]|0;q=a+28|0;z=k[q>>2]|0;k[a>>2]=k[b>>2];e=x;a=k[e+4>>2]|0;k[v>>2]=k[e>>2];k[v+4>>2]=a;k[m>>2]=k[f>>2];k[n>>2]=k[g>>2];k[o>>2]=k[h>>2];k[p>>2]=k[j>>2];k[q>>2]=k[l>>2];k[b>>2]=r;k[x>>2]=s;k[x+4>>2]=t;k[f>>2]=u;k[g>>2]=w;k[h>>2]=c;k[j>>2]=y;k[l>>2]=z;z=2;return z|0}n=k[a>>2]|0;p=v;o=k[p>>2]|0;p=k[p+4>>2]|0;d=a+12|0;q=k[d>>2]|0;f=a+16|0;r=k[f>>2]|0;g=a+20|0;s=k[g>>2]|0;l=a+24|0;t=k[l>>2]|0;m=a+28|0;u=k[m>>2]|0;if(e){k[a>>2]=k[c>>2];x=w;b=k[x+4>>2]|0;k[v>>2]=k[x>>2];k[v+4>>2]=b;v=c+12|0;k[d>>2]=k[v>>2];b=c+16|0;k[f>>2]=k[b>>2];x=c+20|0;k[g>>2]=k[x>>2];y=c+24|0;k[l>>2]=k[y>>2];z=c+28|0;k[m>>2]=k[z>>2];k[c>>2]=n;c=w;k[c>>2]=o;k[c+4>>2]=p;k[v>>2]=q;k[b>>2]=r;k[x>>2]=s;k[y>>2]=t;k[z>>2]=u;z=1;return z|0}k[a>>2]=k[b>>2];h=x;j=k[h+4>>2]|0;a=v;k[a>>2]=k[h>>2];k[a+4>>2]=j;a=b+12|0;k[d>>2]=k[a>>2];j=b+16|0;k[f>>2]=k[j>>2];h=b+20|0;k[g>>2]=k[h>>2];g=b+24|0;k[l>>2]=k[g>>2];f=b+28|0;k[m>>2]=k[f>>2];k[b>>2]=n;d=x;k[d>>2]=o;k[d+4>>2]=p;k[a>>2]=q;k[j>>2]=r;k[h>>2]=s;k[g>>2]=t;k[f>>2]=u;d=i[w>>0]^1;e=o&255^1;if((d&255)>=(e&255)){if((e&255)<(d&255)){z=1;return z|0}if((k[w+4>>2]|0)>>>0>=p>>>0){z=1;return z|0}}k[b>>2]=k[c>>2];y=w;b=k[y+4>>2]|0;v=x;k[v>>2]=k[y>>2];k[v+4>>2]=b;v=c+12|0;k[a>>2]=k[v>>2];b=c+16|0;k[j>>2]=k[b>>2];x=c+20|0;k[h>>2]=k[x>>2];y=c+24|0;k[g>>2]=k[y>>2];z=c+28|0;k[f>>2]=k[z>>2];k[c>>2]=n;c=w;k[c>>2]=o;k[c+4>>2]=p;k[v>>2]=q;k[b>>2]=r;k[x>>2]=s;k[y>>2]=t;k[z>>2]=u;z=2;return z|0}function ub(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;v=tb(a,b,c)|0;g=d+4|0;t=c+4|0;e=i[g>>0]^1;f=i[t>>0]^1;if((e&255)>=(f&255)){if((f&255)<(e&255)){b=v;return b|0}if((k[g+4>>2]|0)>>>0>=(k[t+4>>2]|0)>>>0){b=v;return b|0}}A=k[c>>2]|0;y=t;z=k[y>>2]|0;y=k[y+4>>2]|0;o=c+12|0;x=k[o>>2]|0;p=c+16|0;h=k[p>>2]|0;q=c+20|0;l=k[q>>2]|0;r=c+24|0;n=k[r>>2]|0;s=c+28|0;u=k[s>>2]|0;k[c>>2]=k[d>>2];m=g;j=k[m+4>>2]|0;w=t;k[w>>2]=k[m>>2];k[w+4>>2]=j;w=d+12|0;k[o>>2]=k[w>>2];j=d+16|0;k[p>>2]=k[j>>2];m=d+20|0;k[q>>2]=k[m>>2];f=d+24|0;k[r>>2]=k[f>>2];e=d+28|0;k[s>>2]=k[e>>2];k[d>>2]=A;d=g;k[d>>2]=z;k[d+4>>2]=y;k[w>>2]=x;k[j>>2]=h;k[m>>2]=l;k[f>>2]=n;k[e>>2]=u;e=v+1|0;u=b+4|0;f=i[t>>0]^1;d=i[u>>0]^1;if((f&255)>=(d&255)){if((d&255)<(f&255)){A=e;return A|0}if((k[t+4>>2]|0)>>>0>=(k[u+4>>2]|0)>>>0){A=e;return A|0}}z=k[b>>2]|0;y=u;x=k[y>>2]|0;y=k[y+4>>2]|0;h=b+12|0;A=k[h>>2]|0;j=b+16|0;f=k[j>>2]|0;l=b+20|0;e=k[l>>2]|0;m=b+24|0;g=k[m>>2]|0;n=b+28|0;d=k[n>>2]|0;k[b>>2]=k[c>>2];C=t;B=k[C+4>>2]|0;w=u;k[w>>2]=k[C>>2];k[w+4>>2]=B;k[h>>2]=k[o>>2];k[j>>2]=k[p>>2];k[l>>2]=k[q>>2];k[m>>2]=k[r>>2];k[n>>2]=k[s>>2];k[c>>2]=z;z=t;k[z>>2]=x;k[z+4>>2]=y;k[o>>2]=A;k[p>>2]=f;k[q>>2]=e;k[r>>2]=g;k[s>>2]=d;d=v+2|0;g=a+4|0;e=i[u>>0]^1;f=i[g>>0]^1;if((e&255)>=(f&255)){if((f&255)<(e&255)){C=d;return C|0}if((k[u+4>>2]|0)>>>0>=(k[g+4>>2]|0)>>>0){C=d;return C|0}}x=k[a>>2]|0;w=g;t=k[w>>2]|0;w=k[w+4>>2]|0;p=a+12|0;y=k[p>>2]|0;q=a+16|0;z=k[q>>2]|0;r=a+20|0;A=k[r>>2]|0;s=a+24|0;B=k[s>>2]|0;c=a+28|0;C=k[c>>2]|0;k[a>>2]=k[b>>2];d=u;o=k[d+4>>2]|0;a=g;k[a>>2]=k[d>>2];k[a+4>>2]=o;k[p>>2]=k[h>>2];k[q>>2]=k[j>>2];k[r>>2]=k[l>>2];k[s>>2]=k[m>>2];k[c>>2]=k[n>>2];k[b>>2]=x;x=u;k[x>>2]=t;k[x+4>>2]=w;k[h>>2]=y;k[j>>2]=z;k[l>>2]=A;k[m>>2]=B;k[n>>2]=C;C=v+3|0;return C|0}function vb(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;v=ub(a,b,c,d)|0;h=e+4|0;p=d+4|0;f=i[h>>0]^1;g=i[p>>0]^1;if((f&255)>=(g&255)){if((g&255)<(f&255)){b=v;return b|0}if((k[h+4>>2]|0)>>>0>=(k[p+4>>2]|0)>>>0){b=v;return b|0}}B=k[d>>2]|0;z=p;A=k[z>>2]|0;z=k[z+4>>2]|0;j=d+12|0;y=k[j>>2]|0;l=d+16|0;w=k[l>>2]|0;m=d+20|0;r=k[m>>2]|0;n=d+24|0;t=k[n>>2]|0;o=d+28|0;u=k[o>>2]|0;k[d>>2]=k[e>>2];s=h;q=k[s+4>>2]|0;x=p;k[x>>2]=k[s>>2];k[x+4>>2]=q;x=e+12|0;k[j>>2]=k[x>>2];q=e+16|0;k[l>>2]=k[q>>2];s=e+20|0;k[m>>2]=k[s>>2];g=e+24|0;k[n>>2]=k[g>>2];f=e+28|0;k[o>>2]=k[f>>2];k[e>>2]=B;e=h;k[e>>2]=A;k[e+4>>2]=z;k[x>>2]=y;k[q>>2]=w;k[s>>2]=r;k[g>>2]=t;k[f>>2]=u;f=v+1|0;u=c+4|0;g=i[p>>0]^1;e=i[u>>0]^1;if((g&255)>=(e&255)){if((e&255)<(g&255)){B=f;return B|0}if((k[p+4>>2]|0)>>>0>=(k[u+4>>2]|0)>>>0){B=f;return B|0}}x=k[c>>2]|0;z=u;y=k[z>>2]|0;z=k[z+4>>2]|0;h=c+12|0;A=k[h>>2]|0;q=c+16|0;B=k[q>>2]|0;r=c+20|0;g=k[r>>2]|0;s=c+24|0;f=k[s>>2]|0;t=c+28|0;e=k[t>>2]|0;k[c>>2]=k[d>>2];D=p;C=k[D+4>>2]|0;w=u;k[w>>2]=k[D>>2];k[w+4>>2]=C;k[h>>2]=k[j>>2];k[q>>2]=k[l>>2];k[r>>2]=k[m>>2];k[s>>2]=k[n>>2];k[t>>2]=k[o>>2];k[d>>2]=x;d=p;k[d>>2]=y;k[d+4>>2]=z;k[j>>2]=A;k[l>>2]=B;k[m>>2]=g;k[n>>2]=f;k[o>>2]=e;e=v+2|0;d=b+4|0;f=i[u>>0]^1;g=i[d>>0]^1;if((f&255)>=(g&255)){if((g&255)<(f&255)){D=e;return D|0}if((k[u+4>>2]|0)>>>0>=(k[d+4>>2]|0)>>>0){D=e;return D|0}}B=k[b>>2]|0;A=d;z=k[A>>2]|0;A=k[A+4>>2]|0;j=b+12|0;C=k[j>>2]|0;l=b+16|0;D=k[l>>2]|0;m=b+20|0;e=k[m>>2]|0;n=b+24|0;g=k[n>>2]|0;o=b+28|0;f=k[o>>2]|0;k[b>>2]=k[c>>2];w=u;x=k[w+4>>2]|0;y=d;k[y>>2]=k[w>>2];k[y+4>>2]=x;k[j>>2]=k[h>>2];k[l>>2]=k[q>>2];k[m>>2]=k[r>>2];k[n>>2]=k[s>>2];k[o>>2]=k[t>>2];k[c>>2]=B;B=u;k[B>>2]=z;k[B+4>>2]=A;k[h>>2]=C;k[q>>2]=D;k[r>>2]=e;k[s>>2]=g;k[t>>2]=f;f=v+3|0;h=a+4|0;g=i[d>>0]^1;e=i[h>>0]^1;if((g&255)>=(e&255)){if((e&255)<(g&255)){D=f;return D|0}if((k[d+4>>2]|0)>>>0>=(k[h+4>>2]|0)>>>0){D=f;return D|0}}y=k[a>>2]|0;x=h;w=k[x>>2]|0;x=k[x+4>>2]|0;r=a+12|0;z=k[r>>2]|0;s=a+16|0;A=k[s>>2]|0;t=a+20|0;B=k[t>>2]|0;u=a+24|0;C=k[u>>2]|0;c=a+28|0;D=k[c>>2]|0;k[a>>2]=k[b>>2];p=d;q=k[p+4>>2]|0;a=h;k[a>>2]=k[p>>2];k[a+4>>2]=q;k[r>>2]=k[j>>2];k[s>>2]=k[l>>2];k[t>>2]=k[m>>2];k[u>>2]=k[n>>2];k[c>>2]=k[o>>2];k[b>>2]=y;y=d;k[y>>2]=w;k[y+4>>2]=x;k[j>>2]=z;k[l>>2]=A;k[m>>2]=B;k[n>>2]=C;k[o>>2]=D;D=v+4|0;return D|0}function wb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;switch(b-a>>5|0){case 2:{c=b+-32|0;f=b+-28|0;g=a+4|0;d=i[f>>0]^1;e=i[g>>0]^1;if((d&255)>=(e&255)){if((e&255)<(d&255)){b=1;return b|0}if((k[f+4>>2]|0)>>>0>=(k[g+4>>2]|0)>>>0){b=1;return b|0}}r=k[a>>2]|0;q=g;p=k[q>>2]|0;q=k[q+4>>2]|0;v=a+12|0;s=k[v>>2]|0;x=a+16|0;u=k[x>>2]|0;m=a+20|0;w=k[m>>2]|0;n=a+24|0;y=k[n>>2]|0;o=a+28|0;z=k[o>>2]|0;k[a>>2]=k[c>>2];l=f;a=k[l+4>>2]|0;t=g;k[t>>2]=k[l>>2];k[t+4>>2]=a;t=b+-20|0;k[v>>2]=k[t>>2];v=b+-16|0;k[x>>2]=k[v>>2];x=b+-12|0;k[m>>2]=k[x>>2];a=b+-8|0;k[n>>2]=k[a>>2];b=b+-4|0;k[o>>2]=k[b>>2];k[c>>2]=r;r=f;k[r>>2]=p;k[r+4>>2]=q;k[t>>2]=s;k[v>>2]=u;k[x>>2]=w;k[a>>2]=y;k[b>>2]=z;b=1;return b|0}case 3:{tb(a,a+32|0,b+-32|0)|0;b=1;return b|0}case 4:{ub(a,a+32|0,a+64|0,b+-32|0)|0;b=1;return b|0}case 5:{vb(a,a+32|0,a+64|0,a+96|0,b+-32|0)|0;b=1;return b|0}case 1:case 0:{b=1;return b|0}default:{e=a+64|0;tb(a,a+32|0,e)|0;d=a+96|0;if((d|0)==(b|0)){b=1;return b|0}else c=0;while(1){h=d+4|0;j=e+4|0;f=i[h>>0]^1;g=i[j>>0]^1;if((f&255)>=(g&255)){if((g&255)>=(f&255)?(k[h+4>>2]|0)>>>0<(k[j+4>>2]|0)>>>0:0)z=13}else z=13;if((z|0)==13){z=0;r=k[d>>2]|0;t=h;s=k[t>>2]|0;t=k[t+4>>2]|0;m=d+12|0;u=k[m>>2]|0;p=d+16|0;v=k[p>>2]|0;g=d+20|0;w=k[g>>2]|0;f=d+24|0;x=k[f>>2]|0;q=d+28|0;y=k[q>>2]|0;k[d>>2]=k[e>>2];n=j;o=k[n+4>>2]|0;l=h;k[l>>2]=k[n>>2];k[l+4>>2]=o;l=e+12|0;k[m>>2]=k[l>>2];m=e+16|0;k[p>>2]=k[m>>2];h=e+20|0;k[g>>2]=k[h>>2];g=e+24|0;k[f>>2]=k[g>>2];f=e+28|0;k[q>>2]=k[f>>2];a:do if((e|0)!=(a|0)){q=s&255^1;p=e;o=h;while(1){e=p+-32|0;n=p+-28|0;h=i[n>>0]^1;if((q&255)>=(h&255)){if((h&255)<(q&255)){e=p;h=o;break a}if(t>>>0>=(k[p+-24>>2]|0)>>>0){e=p;h=o;break a}}k[p>>2]=k[e>>2];h=n;m=k[h+4>>2]|0;l=p+4|0;k[l>>2]=k[h>>2];k[l+4>>2]=m;l=p+-20|0;k[p+12>>2]=k[l>>2];m=p+-16|0;k[p+16>>2]=k[m>>2];h=p+-12|0;k[p+20>>2]=k[h>>2];g=p+-8|0;k[p+24>>2]=k[g>>2];f=p+-4|0;k[p+28>>2]=k[f>>2];if((e|0)==(a|0)){j=n;break}else{p=e;o=h;j=n}}}while(0);k[e>>2]=r;r=j;k[r>>2]=s;k[r+4>>2]=t;k[l>>2]=u;k[m>>2]=v;k[h>>2]=w;k[g>>2]=x;k[f>>2]=y;c=c+1|0;if((c|0)==8)break}e=d+32|0;if((e|0)==(b|0)){c=1;z=22;break}else{y=d;d=e;e=y}}if((z|0)==22)return c|0;b=(d+32|0)==(b|0);return b|0}}return 0}function xb(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,l=0;h=r;r=r+32|0;g=h;l=Za[k[e>>2]&7](b,a)|0;f=Za[k[e>>2]&7](c,b)|0;do if(l){k[g>>2]=k[a>>2];k[g+4>>2]=k[a+4>>2];k[g+8>>2]=k[a+8>>2];k[g+12>>2]=k[a+12>>2];k[g+16>>2]=k[a+16>>2];k[g+20>>2]=k[a+20>>2];k[g+24>>2]=k[a+24>>2];k[g+28>>2]=k[a+28>>2];if(f){k[a>>2]=k[c>>2];k[a+4>>2]=k[c+4>>2];k[a+8>>2]=k[c+8>>2];k[a+12>>2]=k[c+12>>2];k[a+16>>2]=k[c+16>>2];k[a+20>>2]=k[c+20>>2];j[a+24>>1]=j[c+24>>1]|0;i[a+26>>0]=i[c+26>>0]|0;k[c>>2]=k[g>>2];k[c+4>>2]=k[g+4>>2];k[c+8>>2]=k[g+8>>2];k[c+12>>2]=k[g+12>>2];k[c+16>>2]=k[g+16>>2];k[c+20>>2]=k[g+20>>2];j[c+24>>1]=j[g+24>>1]|0;i[c+26>>0]=i[g+26>>0]|0;f=1;break};k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];j[a+24>>1]=j[b+24>>1]|0;i[a+26>>0]=i[b+26>>0]|0;k[b>>2]=k[g>>2];k[b+4>>2]=k[g+4>>2];k[b+8>>2]=k[g+8>>2];k[b+12>>2]=k[g+12>>2];k[b+16>>2]=k[g+16>>2];k[b+20>>2]=k[g+20>>2];j[b+24>>1]=j[g+24>>1]|0;i[b+26>>0]=i[g+26>>0]|0;if(Za[k[e>>2]&7](c,b)|0){k[g>>2]=k[b>>2];k[g+4>>2]=k[b+4>>2];k[g+8>>2]=k[b+8>>2];k[g+12>>2]=k[b+12>>2];k[g+16>>2]=k[b+16>>2];k[g+20>>2]=k[b+20>>2];k[g+24>>2]=k[b+24>>2];k[g+28>>2]=k[b+28>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];j[b+24>>1]=j[c+24>>1]|0;i[b+26>>0]=i[c+26>>0]|0;k[c>>2]=k[g>>2];k[c+4>>2]=k[g+4>>2];k[c+8>>2]=k[g+8>>2];k[c+12>>2]=k[g+12>>2];k[c+16>>2]=k[g+16>>2];k[c+20>>2]=k[g+20>>2];j[c+24>>1]=j[g+24>>1]|0;i[c+26>>0]=i[g+26>>0]|0;f=2}else f=1}else if(f){k[g>>2]=k[b>>2];k[g+4>>2]=k[b+4>>2];k[g+8>>2]=k[b+8>>2];k[g+12>>2]=k[b+12>>2];k[g+16>>2]=k[b+16>>2];k[g+20>>2]=k[b+20>>2];k[g+24>>2]=k[b+24>>2];k[g+28>>2]=k[b+28>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];j[b+24>>1]=j[c+24>>1]|0;i[b+26>>0]=i[c+26>>0]|0;k[c>>2]=k[g>>2];k[c+4>>2]=k[g+4>>2];k[c+8>>2]=k[g+8>>2];k[c+12>>2]=k[g+12>>2];k[c+16>>2]=k[g+16>>2];k[c+20>>2]=k[g+20>>2];j[c+24>>1]=j[g+24>>1]|0;i[c+26>>0]=i[g+26>>0]|0;if(Za[k[e>>2]&7](b,a)|0){k[g>>2]=k[a>>2];k[g+4>>2]=k[a+4>>2];k[g+8>>2]=k[a+8>>2];k[g+12>>2]=k[a+12>>2];k[g+16>>2]=k[a+16>>2];k[g+20>>2]=k[a+20>>2];k[g+24>>2]=k[a+24>>2];k[g+28>>2]=k[a+28>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];j[a+24>>1]=j[b+24>>1]|0;i[a+26>>0]=i[b+26>>0]|0;k[b>>2]=k[g>>2];k[b+4>>2]=k[g+4>>2];k[b+8>>2]=k[g+8>>2];k[b+12>>2]=k[g+12>>2];k[b+16>>2]=k[g+16>>2];k[b+20>>2]=k[g+20>>2];j[b+24>>1]=j[g+24>>1]|0;i[b+26>>0]=i[g+26>>0]|0;f=2}else f=1}else f=0;while(0);if(!(Za[k[e>>2]&7](d,c)|0)){l=f;r=h;return l|0};k[g>>2]=k[c>>2];k[g+4>>2]=k[c+4>>2];k[g+8>>2]=k[c+8>>2];k[g+12>>2]=k[c+12>>2];k[g+16>>2]=k[c+16>>2];k[g+20>>2]=k[c+20>>2];k[g+24>>2]=k[c+24>>2];k[g+28>>2]=k[c+28>>2];k[c>>2]=k[d>>2];k[c+4>>2]=k[d+4>>2];k[c+8>>2]=k[d+8>>2];k[c+12>>2]=k[d+12>>2];k[c+16>>2]=k[d+16>>2];k[c+20>>2]=k[d+20>>2];j[c+24>>1]=j[d+24>>1]|0;i[c+26>>0]=i[d+26>>0]|0;k[d>>2]=k[g>>2];k[d+4>>2]=k[g+4>>2];k[d+8>>2]=k[g+8>>2];k[d+12>>2]=k[g+12>>2];k[d+16>>2]=k[g+16>>2];k[d+20>>2]=k[g+20>>2];j[d+24>>1]=j[g+24>>1]|0;i[d+26>>0]=i[g+26>>0]|0;if(!(Za[k[e>>2]&7](c,b)|0)){l=f+1|0;r=h;return l|0};k[g>>2]=k[b>>2];k[g+4>>2]=k[b+4>>2];k[g+8>>2]=k[b+8>>2];k[g+12>>2]=k[b+12>>2];k[g+16>>2]=k[b+16>>2];k[g+20>>2]=k[b+20>>2];k[g+24>>2]=k[b+24>>2];k[g+28>>2]=k[b+28>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];j[b+24>>1]=j[c+24>>1]|0;i[b+26>>0]=i[c+26>>0]|0;k[c>>2]=k[g>>2];k[c+4>>2]=k[g+4>>2];k[c+8>>2]=k[g+8>>2];k[c+12>>2]=k[g+12>>2];k[c+16>>2]=k[g+16>>2];k[c+20>>2]=k[g+20>>2];j[c+24>>1]=j[g+24>>1]|0;i[c+26>>0]=i[g+26>>0]|0;if(!(Za[k[e>>2]&7](b,a)|0)){l=f+2|0;r=h;return l|0};k[g>>2]=k[a>>2];k[g+4>>2]=k[a+4>>2];k[g+8>>2]=k[a+8>>2];k[g+12>>2]=k[a+12>>2];k[g+16>>2]=k[a+16>>2];k[g+20>>2]=k[a+20>>2];k[g+24>>2]=k[a+24>>2];k[g+28>>2]=k[a+28>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];j[a+24>>1]=j[b+24>>1]|0;i[a+26>>0]=i[b+26>>0]|0;k[b>>2]=k[g>>2];k[b+4>>2]=k[g+4>>2];k[b+8>>2]=k[g+8>>2];k[b+12>>2]=k[g+12>>2];k[b+16>>2]=k[g+16>>2];k[b+20>>2]=k[g+20>>2];j[b+24>>1]=j[g+24>>1]|0;i[b+26>>0]=i[g+26>>0]|0;l=f+3|0;r=h;return l|0}function yb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,l=0,m=0,n=0;n=r;r=r+64|0;h=n+32|0;l=n;switch(b-a>>5|0){case 2:{d=b+-32|0;if(!(Za[k[c>>2]&7](d,a)|0)){a=1;r=n;return a|0};k[h>>2]=k[a>>2];k[h+4>>2]=k[a+4>>2];k[h+8>>2]=k[a+8>>2];k[h+12>>2]=k[a+12>>2];k[h+16>>2]=k[a+16>>2];k[h+20>>2]=k[a+20>>2];k[h+24>>2]=k[a+24>>2];k[h+28>>2]=k[a+28>>2];k[a>>2]=k[d>>2];k[a+4>>2]=k[d+4>>2];k[a+8>>2]=k[d+8>>2];k[a+12>>2]=k[d+12>>2];k[a+16>>2]=k[d+16>>2];k[a+20>>2]=k[d+20>>2];j[a+24>>1]=j[d+24>>1]|0;i[a+26>>0]=i[d+26>>0]|0;k[d>>2]=k[h>>2];k[d+4>>2]=k[h+4>>2];k[d+8>>2]=k[h+8>>2];k[d+12>>2]=k[h+12>>2];k[d+16>>2]=k[h+16>>2];k[d+20>>2]=k[h+20>>2];j[d+24>>1]=j[h+24>>1]|0;i[d+26>>0]=i[h+26>>0]|0;a=1;r=n;return a|0}case 3:{f=a+32|0;e=b+-32|0;b=Za[k[c>>2]&7](f,a)|0;d=Za[k[c>>2]&7](e,f)|0;if(!b){if(!d){a=1;r=n;return a|0};k[h>>2]=k[f>>2];k[h+4>>2]=k[f+4>>2];k[h+8>>2]=k[f+8>>2];k[h+12>>2]=k[f+12>>2];k[h+16>>2]=k[f+16>>2];k[h+20>>2]=k[f+20>>2];k[h+24>>2]=k[f+24>>2];k[h+28>>2]=k[f+28>>2];k[f>>2]=k[e>>2];k[f+4>>2]=k[e+4>>2];k[f+8>>2]=k[e+8>>2];k[f+12>>2]=k[e+12>>2];k[f+16>>2]=k[e+16>>2];k[f+20>>2]=k[e+20>>2];j[f+24>>1]=j[e+24>>1]|0;i[f+26>>0]=i[e+26>>0]|0;k[e>>2]=k[h>>2];k[e+4>>2]=k[h+4>>2];k[e+8>>2]=k[h+8>>2];k[e+12>>2]=k[h+12>>2];k[e+16>>2]=k[h+16>>2];k[e+20>>2]=k[h+20>>2];j[e+24>>1]=j[h+24>>1]|0;i[e+26>>0]=i[h+26>>0]|0;if(!(Za[k[c>>2]&7](f,a)|0)){a=1;r=n;return a|0};k[h>>2]=k[a>>2];k[h+4>>2]=k[a+4>>2];k[h+8>>2]=k[a+8>>2];k[h+12>>2]=k[a+12>>2];k[h+16>>2]=k[a+16>>2];k[h+20>>2]=k[a+20>>2];k[h+24>>2]=k[a+24>>2];k[h+28>>2]=k[a+28>>2];k[a>>2]=k[f>>2];k[a+4>>2]=k[f+4>>2];k[a+8>>2]=k[f+8>>2];k[a+12>>2]=k[f+12>>2];k[a+16>>2]=k[f+16>>2];k[a+20>>2]=k[f+20>>2];j[a+24>>1]=j[f+24>>1]|0;i[a+26>>0]=i[f+26>>0]|0;k[f>>2]=k[h>>2];k[f+4>>2]=k[h+4>>2];k[f+8>>2]=k[h+8>>2];k[f+12>>2]=k[h+12>>2];k[f+16>>2]=k[h+16>>2];k[f+20>>2]=k[h+20>>2];j[f+24>>1]=j[h+24>>1]|0;i[f+26>>0]=i[h+26>>0]|0;a=1;r=n;return a|0};k[h>>2]=k[a>>2];k[h+4>>2]=k[a+4>>2];k[h+8>>2]=k[a+8>>2];k[h+12>>2]=k[a+12>>2];k[h+16>>2]=k[a+16>>2];k[h+20>>2]=k[a+20>>2];k[h+24>>2]=k[a+24>>2];k[h+28>>2]=k[a+28>>2];if(d){k[a>>2]=k[e>>2];k[a+4>>2]=k[e+4>>2];k[a+8>>2]=k[e+8>>2];k[a+12>>2]=k[e+12>>2];k[a+16>>2]=k[e+16>>2];k[a+20>>2]=k[e+20>>2];j[a+24>>1]=j[e+24>>1]|0;i[a+26>>0]=i[e+26>>0]|0;k[e>>2]=k[h>>2];k[e+4>>2]=k[h+4>>2];k[e+8>>2]=k[h+8>>2];k[e+12>>2]=k[h+12>>2];k[e+16>>2]=k[h+16>>2];k[e+20>>2]=k[h+20>>2];j[e+24>>1]=j[h+24>>1]|0;i[e+26>>0]=i[h+26>>0]|0;a=1;r=n;return a|0};k[a>>2]=k[f>>2];k[a+4>>2]=k[f+4>>2];k[a+8>>2]=k[f+8>>2];k[a+12>>2]=k[f+12>>2];k[a+16>>2]=k[f+16>>2];k[a+20>>2]=k[f+20>>2];j[a+24>>1]=j[f+24>>1]|0;i[a+26>>0]=i[f+26>>0]|0;k[f>>2]=k[h>>2];k[f+4>>2]=k[h+4>>2];k[f+8>>2]=k[h+8>>2];k[f+12>>2]=k[h+12>>2];k[f+16>>2]=k[h+16>>2];k[f+20>>2]=k[h+20>>2];j[f+24>>1]=j[h+24>>1]|0;i[f+26>>0]=i[h+26>>0]|0;if(!(Za[k[c>>2]&7](e,f)|0)){a=1;r=n;return a|0};k[h>>2]=k[f>>2];k[h+4>>2]=k[f+4>>2];k[h+8>>2]=k[f+8>>2];k[h+12>>2]=k[f+12>>2];k[h+16>>2]=k[f+16>>2];k[h+20>>2]=k[f+20>>2];k[h+24>>2]=k[f+24>>2];k[h+28>>2]=k[f+28>>2];k[f>>2]=k[e>>2];k[f+4>>2]=k[e+4>>2];k[f+8>>2]=k[e+8>>2];k[f+12>>2]=k[e+12>>2];k[f+16>>2]=k[e+16>>2];k[f+20>>2]=k[e+20>>2];j[f+24>>1]=j[e+24>>1]|0;i[f+26>>0]=i[e+26>>0]|0;k[e>>2]=k[h>>2];k[e+4>>2]=k[h+4>>2];k[e+8>>2]=k[h+8>>2];k[e+12>>2]=k[h+12>>2];k[e+16>>2]=k[h+16>>2];k[e+20>>2]=k[h+20>>2];j[e+24>>1]=j[h+24>>1]|0;i[e+26>>0]=i[h+26>>0]|0;a=1;r=n;return a|0}case 4:{xb(a,a+32|0,a+64|0,b+-32|0,c)|0;a=1;r=n;return a|0}case 5:{e=a+32|0;f=a+64|0;g=a+96|0;d=b+-32|0;xb(a,e,f,g,c)|0;if(!(Za[k[c>>2]&7](d,g)|0)){a=1;r=n;return a|0};k[h>>2]=k[g>>2];k[h+4>>2]=k[g+4>>2];k[h+8>>2]=k[g+8>>2];k[h+12>>2]=k[g+12>>2];k[h+16>>2]=k[g+16>>2];k[h+20>>2]=k[g+20>>2];k[h+24>>2]=k[g+24>>2];k[h+28>>2]=k[g+28>>2];k[g>>2]=k[d>>2];k[g+4>>2]=k[d+4>>2];k[g+8>>2]=k[d+8>>2];k[g+12>>2]=k[d+12>>2];k[g+16>>2]=k[d+16>>2];k[g+20>>2]=k[d+20>>2];j[g+24>>1]=j[d+24>>1]|0;i[g+26>>0]=i[d+26>>0]|0;k[d>>2]=k[h>>2];k[d+4>>2]=k[h+4>>2];k[d+8>>2]=k[h+8>>2];k[d+12>>2]=k[h+12>>2];k[d+16>>2]=k[h+16>>2];k[d+20>>2]=k[h+20>>2];j[d+24>>1]=j[h+24>>1]|0;i[d+26>>0]=i[h+26>>0]|0;if(!(Za[k[c>>2]&7](g,f)|0)){a=1;r=n;return a|0};k[h>>2]=k[f>>2];k[h+4>>2]=k[f+4>>2];k[h+8>>2]=k[f+8>>2];k[h+12>>2]=k[f+12>>2];k[h+16>>2]=k[f+16>>2];k[h+20>>2]=k[f+20>>2];k[h+24>>2]=k[f+24>>2];k[h+28>>2]=k[f+28>>2];k[f>>2]=k[g>>2];k[f+4>>2]=k[g+4>>2];k[f+8>>2]=k[g+8>>2];k[f+12>>2]=k[g+12>>2];k[f+16>>2]=k[g+16>>2];k[f+20>>2]=k[g+20>>2];j[f+24>>1]=j[g+24>>1]|0;i[f+26>>0]=i[g+26>>0]|0;k[g>>2]=k[h>>2];k[g+4>>2]=k[h+4>>2];k[g+8>>2]=k[h+8>>2];k[g+12>>2]=k[h+12>>2];k[g+16>>2]=k[h+16>>2];k[g+20>>2]=k[h+20>>2];j[g+24>>1]=j[h+24>>1]|0;i[g+26>>0]=i[h+26>>0]|0;if(!(Za[k[c>>2]&7](f,e)|0)){a=1;r=n;return a|0};k[h>>2]=k[e>>2];k[h+4>>2]=k[e+4>>2];k[h+8>>2]=k[e+8>>2];k[h+12>>2]=k[e+12>>2];k[h+16>>2]=k[e+16>>2];k[h+20>>2]=k[e+20>>2];k[h+24>>2]=k[e+24>>2];k[h+28>>2]=k[e+28>>2];k[e>>2]=k[f>>2];k[e+4>>2]=k[f+4>>2];k[e+8>>2]=k[f+8>>2];k[e+12>>2]=k[f+12>>2];k[e+16>>2]=k[f+16>>2];k[e+20>>2]=k[f+20>>2];j[e+24>>1]=j[f+24>>1]|0;i[e+26>>0]=i[f+26>>0]|0;k[f>>2]=k[h>>2];k[f+4>>2]=k[h+4>>2];k[f+8>>2]=k[h+8>>2];k[f+12>>2]=k[h+12>>2];k[f+16>>2]=k[h+16>>2];k[f+20>>2]=k[h+20>>2];j[f+24>>1]=j[h+24>>1]|0;i[f+26>>0]=i[h+26>>0]|0;if(!(Za[k[c>>2]&7](e,a)|0)){a=1;r=n;return a|0};k[h>>2]=k[a>>2];k[h+4>>2]=k[a+4>>2];k[h+8>>2]=k[a+8>>2];k[h+12>>2]=k[a+12>>2];k[h+16>>2]=k[a+16>>2];k[h+20>>2]=k[a+20>>2];k[h+24>>2]=k[a+24>>2];k[h+28>>2]=k[a+28>>2];k[a>>2]=k[e>>2];k[a+4>>2]=k[e+4>>2];k[a+8>>2]=k[e+8>>2];k[a+12>>2]=k[e+12>>2];k[a+16>>2]=k[e+16>>2];k[a+20>>2]=k[e+20>>2];j[a+24>>1]=j[e+24>>1]|0;i[a+26>>0]=i[e+26>>0]|0;k[e>>2]=k[h>>2];k[e+4>>2]=k[h+4>>2];k[e+8>>2]=k[h+8>>2];k[e+12>>2]=k[h+12>>2];k[e+16>>2]=k[h+16>>2];k[e+20>>2]=k[h+20>>2];j[e+24>>1]=j[h+24>>1]|0;i[e+26>>0]=i[h+26>>0]|0;a=1;r=n;return a|0}case 1:case 0:{a=1;r=n;return a|0}default:{f=a+64|0;d=a+32|0;g=Za[k[c>>2]&7](d,a)|0;e=Za[k[c>>2]&7](f,d)|0;do if(g){k[h>>2]=k[a>>2];k[h+4>>2]=k[a+4>>2];k[h+8>>2]=k[a+8>>2];k[h+12>>2]=k[a+12>>2];k[h+16>>2]=k[a+16>>2];k[h+20>>2]=k[a+20>>2];k[h+24>>2]=k[a+24>>2];k[h+28>>2]=k[a+28>>2];if(e){k[a>>2]=k[f>>2];k[a+4>>2]=k[f+4>>2];k[a+8>>2]=k[f+8>>2];k[a+12>>2]=k[f+12>>2];k[a+16>>2]=k[f+16>>2];k[a+20>>2]=k[f+20>>2];j[a+24>>1]=j[f+24>>1]|0;i[a+26>>0]=i[f+26>>0]|0;k[f>>2]=k[h>>2];k[f+4>>2]=k[h+4>>2];k[f+8>>2]=k[h+8>>2];k[f+12>>2]=k[h+12>>2];k[f+16>>2]=k[h+16>>2];k[f+20>>2]=k[h+20>>2];j[f+24>>1]=j[h+24>>1]|0;i[f+26>>0]=i[h+26>>0]|0;break};k[a>>2]=k[d>>2];k[a+4>>2]=k[d+4>>2];k[a+8>>2]=k[d+8>>2];k[a+12>>2]=k[d+12>>2];k[a+16>>2]=k[d+16>>2];k[a+20>>2]=k[d+20>>2];j[a+24>>1]=j[d+24>>1]|0;i[a+26>>0]=i[d+26>>0]|0;k[d>>2]=k[h>>2];k[d+4>>2]=k[h+4>>2];k[d+8>>2]=k[h+8>>2];k[d+12>>2]=k[h+12>>2];k[d+16>>2]=k[h+16>>2];k[d+20>>2]=k[h+20>>2];j[d+24>>1]=j[h+24>>1]|0;i[d+26>>0]=i[h+26>>0]|0;if(Za[k[c>>2]&7](f,d)|0){k[h>>2]=k[d>>2];k[h+4>>2]=k[d+4>>2];k[h+8>>2]=k[d+8>>2];k[h+12>>2]=k[d+12>>2];k[h+16>>2]=k[d+16>>2];k[h+20>>2]=k[d+20>>2];k[h+24>>2]=k[d+24>>2];k[h+28>>2]=k[d+28>>2];k[d>>2]=k[f>>2];k[d+4>>2]=k[f+4>>2];k[d+8>>2]=k[f+8>>2];k[d+12>>2]=k[f+12>>2];k[d+16>>2]=k[f+16>>2];k[d+20>>2]=k[f+20>>2];j[d+24>>1]=j[f+24>>1]|0;i[d+26>>0]=i[f+26>>0]|0;k[f>>2]=k[h>>2];k[f+4>>2]=k[h+4>>2];k[f+8>>2]=k[h+8>>2];k[f+12>>2]=k[h+12>>2];k[f+16>>2]=k[h+16>>2];k[f+20>>2]=k[h+20>>2];j[f+24>>1]=j[h+24>>1]|0;i[f+26>>0]=i[h+26>>0]|0}}else if(e?(k[h>>2]=k[d>>2],k[h+4>>2]=k[d+4>>2],k[h+8>>2]=k[d+8>>2],k[h+12>>2]=k[d+12>>2],k[h+16>>2]=k[d+16>>2],k[h+20>>2]=k[d+20>>2],k[h+24>>2]=k[d+24>>2],k[h+28>>2]=k[d+28>>2],k[d>>2]=k[f>>2],k[d+4>>2]=k[f+4>>2],k[d+8>>2]=k[f+8>>2],k[d+12>>2]=k[f+12>>2],k[d+16>>2]=k[f+16>>2],k[d+20>>2]=k[f+20>>2],j[d+24>>1]=j[f+24>>1]|0,i[d+26>>0]=i[f+26>>0]|0,k[f>>2]=k[h>>2],k[f+4>>2]=k[h+4>>2],k[f+8>>2]=k[h+8>>2],k[f+12>>2]=k[h+12>>2],k[f+16>>2]=k[h+16>>2],k[f+20>>2]=k[h+20>>2],j[f+24>>1]=j[h+24>>1]|0,i[f+26>>0]=i[h+26>>0]|0,Za[k[c>>2]&7](d,a)|0):0){k[h>>2]=k[a>>2];k[h+4>>2]=k[a+4>>2];k[h+8>>2]=k[a+8>>2];k[h+12>>2]=k[a+12>>2];k[h+16>>2]=k[a+16>>2];k[h+20>>2]=k[a+20>>2];k[h+24>>2]=k[a+24>>2];k[h+28>>2]=k[a+28>>2];k[a>>2]=k[d>>2];k[a+4>>2]=k[d+4>>2];k[a+8>>2]=k[d+8>>2];k[a+12>>2]=k[d+12>>2];k[a+16>>2]=k[d+16>>2];k[a+20>>2]=k[d+20>>2];j[a+24>>1]=j[d+24>>1]|0;i[a+26>>0]=i[d+26>>0]|0;k[d>>2]=k[h>>2];k[d+4>>2]=k[h+4>>2];k[d+8>>2]=k[h+8>>2];k[d+12>>2]=k[h+12>>2];k[d+16>>2]=k[h+16>>2];k[d+20>>2]=k[h+20>>2];j[d+24>>1]=j[h+24>>1]|0;i[d+26>>0]=i[h+26>>0]|0}while(0);e=a+96|0;if((e|0)==(b|0)){a=1;r=n;return a|0}d=0;while(1){if(Za[k[c>>2]&7](e,f)|0){k[l>>2]=k[e>>2];k[l+4>>2]=k[e+4>>2];k[l+8>>2]=k[e+8>>2];k[l+12>>2]=k[e+12>>2];k[l+16>>2]=k[e+16>>2];k[l+20>>2]=k[e+20>>2];k[l+24>>2]=k[e+24>>2];k[l+28>>2]=k[e+28>>2];g=e;h=f;while(1){k[g>>2]=k[h>>2];k[g+4>>2]=k[h+4>>2];k[g+8>>2]=k[h+8>>2];k[g+12>>2]=k[h+12>>2];k[g+16>>2]=k[h+16>>2];k[g+20>>2]=k[h+20>>2];j[g+24>>1]=j[h+24>>1]|0;i[g+26>>0]=i[h+26>>0]|0;if((h|0)==(a|0))break;f=h+-32|0;if(Za[k[c>>2]&7](l,f)|0){g=h;h=f}else break}k[h>>2]=k[l>>2];k[h+4>>2]=k[l+4>>2];k[h+8>>2]=k[l+8>>2];k[h+12>>2]=k[l+12>>2];k[h+16>>2]=k[l+16>>2];k[h+20>>2]=k[l+20>>2];j[h+24>>1]=j[l+24>>1]|0;i[h+26>>0]=i[l+26>>0]|0;d=d+1|0;if((d|0)==8)break}f=e+32|0;if((f|0)==(b|0)){d=1;m=35;break}else{h=e;e=f;f=h}}if((m|0)==35){r=n;return d|0}a=(e+32|0)==(b|0);r=n;return a|0}}return 0}function zb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;v=Za[k[d>>2]&7](b,a)|0;e=Za[k[d>>2]&7](c,b)|0;if(!v){if(!e){c=0;return c|0}y=k[b>>2]|0;j=b+4|0;l=j;w=k[l>>2]|0;l=k[l+4>>2]|0;e=b+12|0;m=k[e>>2]|0;f=b+16|0;o=k[f>>2]|0;g=b+20|0;q=k[g>>2]|0;h=b+24|0;s=k[h>>2]|0;i=b+28|0;u=k[i>>2]|0;k[b>>2]=k[c>>2];x=c+4|0;r=x;p=k[r+4>>2]|0;n=j;k[n>>2]=k[r>>2];k[n+4>>2]=p;n=c+12|0;k[e>>2]=k[n>>2];p=c+16|0;k[f>>2]=k[p>>2];r=c+20|0;k[g>>2]=k[r>>2];t=c+24|0;k[h>>2]=k[t>>2];v=c+28|0;k[i>>2]=k[v>>2];k[c>>2]=y;c=x;k[c>>2]=w;k[c+4>>2]=l;k[n>>2]=m;k[p>>2]=o;k[r>>2]=q;k[t>>2]=s;k[v>>2]=u;if(!(Za[k[d>>2]&7](b,a)|0)){y=1;return y|0}t=k[a>>2]|0;n=a+4|0;v=n;u=k[v>>2]|0;v=k[v+4>>2]|0;o=a+12|0;d=k[o>>2]|0;p=a+16|0;c=k[p>>2]|0;q=a+20|0;w=k[q>>2]|0;r=a+24|0;x=k[r>>2]|0;s=a+28|0;y=k[s>>2]|0;k[a>>2]=k[b>>2];a=j;m=k[a+4>>2]|0;k[n>>2]=k[a>>2];k[n+4>>2]=m;k[o>>2]=k[e>>2];k[p>>2]=k[f>>2];k[q>>2]=k[g>>2];k[r>>2]=k[h>>2];k[s>>2]=k[i>>2];k[b>>2]=t;b=j;k[b>>2]=u;k[b+4>>2]=v;k[e>>2]=d;k[f>>2]=c;k[g>>2]=w;k[h>>2]=x;k[i>>2]=y;y=2;return y|0}r=k[a>>2]|0;f=a+4|0;t=f;s=k[t>>2]|0;t=k[t+4>>2]|0;g=a+12|0;u=k[g>>2]|0;j=a+16|0;v=k[j>>2]|0;l=a+20|0;n=k[l>>2]|0;m=a+24|0;o=k[m>>2]|0;p=a+28|0;q=k[p>>2]|0;if(e){k[a>>2]=k[c>>2];a=c+4|0;w=a;b=k[w+4>>2]|0;d=f;k[d>>2]=k[w>>2];k[d+4>>2]=b;d=c+12|0;k[g>>2]=k[d>>2];b=c+16|0;k[j>>2]=k[b>>2];w=c+20|0;k[l>>2]=k[w>>2];x=c+24|0;k[m>>2]=k[x>>2];y=c+28|0;k[p>>2]=k[y>>2];k[c>>2]=r;c=a;k[c>>2]=s;k[c+4>>2]=t;k[d>>2]=u;k[b>>2]=v;k[w>>2]=n;k[x>>2]=o;k[y>>2]=q;y=1;return y|0}k[a>>2]=k[b>>2];a=b+4|0;e=a;h=k[e+4>>2]|0;i=f;k[i>>2]=k[e>>2];k[i+4>>2]=h;i=b+12|0;k[g>>2]=k[i>>2];h=b+16|0;k[j>>2]=k[h>>2];g=b+20|0;k[l>>2]=k[g>>2];f=b+24|0;k[m>>2]=k[f>>2];e=b+28|0;k[p>>2]=k[e>>2];k[b>>2]=r;y=a;k[y>>2]=s;k[y+4>>2]=t;k[i>>2]=u;k[h>>2]=v;k[g>>2]=n;k[f>>2]=o;k[e>>2]=q;if(!(Za[k[d>>2]&7](c,b)|0)){y=1;return y|0}n=k[b>>2]|0;q=a;p=k[q>>2]|0;q=k[q+4>>2]|0;r=k[i>>2]|0;t=k[h>>2]|0;v=k[g>>2]|0;d=k[f>>2]|0;x=k[e>>2]|0;k[b>>2]=k[c>>2];o=c+4|0;b=o;u=k[b+4>>2]|0;s=a;k[s>>2]=k[b>>2];k[s+4>>2]=u;s=c+12|0;k[i>>2]=k[s>>2];u=c+16|0;k[h>>2]=k[u>>2];b=c+20|0;k[g>>2]=k[b>>2];w=c+24|0;k[f>>2]=k[w>>2];y=c+28|0;k[e>>2]=k[y>>2];k[c>>2]=n;c=o;k[c>>2]=p;k[c+4>>2]=q;k[s>>2]=r;k[u>>2]=t;k[b>>2]=v;k[w>>2]=d;k[y>>2]=x;y=2;return y|0}function Ab(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;l=zb(a,b,c,e)|0;if(!(Za[k[e>>2]&7](d,c)|0)){c=l;return c|0}A=k[c>>2]|0;r=c+4|0;x=r;y=k[x>>2]|0;x=k[x+4>>2]|0;m=c+12|0;w=k[m>>2]|0;n=c+16|0;u=k[n>>2]|0;o=c+20|0;s=k[o>>2]|0;p=c+24|0;g=k[p>>2]|0;q=c+28|0;i=k[q>>2]|0;k[c>>2]=k[d>>2];z=d+4|0;f=z;t=k[f+4>>2]|0;v=r;k[v>>2]=k[f>>2];k[v+4>>2]=t;v=d+12|0;k[m>>2]=k[v>>2];t=d+16|0;k[n>>2]=k[t>>2];f=d+20|0;k[o>>2]=k[f>>2];h=d+24|0;k[p>>2]=k[h>>2];j=d+28|0;k[q>>2]=k[j>>2];k[d>>2]=A;d=z;k[d>>2]=y;k[d+4>>2]=x;k[v>>2]=w;k[t>>2]=u;k[f>>2]=s;k[h>>2]=g;k[j>>2]=i;if(!(Za[k[e>>2]&7](c,b)|0)){A=l+1|0;return A|0}v=k[b>>2]|0;d=b+4|0;u=d;t=k[u>>2]|0;u=k[u+4>>2]|0;f=b+12|0;w=k[f>>2]|0;g=b+16|0;x=k[g>>2]|0;h=b+20|0;y=k[h>>2]|0;i=b+24|0;z=k[i>>2]|0;j=b+28|0;A=k[j>>2]|0;k[b>>2]=k[c>>2];C=r;B=k[C+4>>2]|0;s=d;k[s>>2]=k[C>>2];k[s+4>>2]=B;k[f>>2]=k[m>>2];k[g>>2]=k[n>>2];k[h>>2]=k[o>>2];k[i>>2]=k[p>>2];k[j>>2]=k[q>>2];k[c>>2]=v;v=r;k[v>>2]=t;k[v+4>>2]=u;k[m>>2]=w;k[n>>2]=x;k[o>>2]=y;k[p>>2]=z;k[q>>2]=A;if(!(Za[k[e>>2]&7](b,a)|0)){C=l+2|0;return C|0}x=k[a>>2]|0;p=a+4|0;w=p;v=k[w>>2]|0;w=k[w+4>>2]|0;e=a+12|0;y=k[e>>2]|0;c=a+16|0;z=k[c>>2]|0;s=a+20|0;A=k[s>>2]|0;t=a+24|0;B=k[t>>2]|0;u=a+28|0;C=k[u>>2]|0;k[a>>2]=k[b>>2];q=d;r=k[q+4>>2]|0;a=p;k[a>>2]=k[q>>2];k[a+4>>2]=r;k[e>>2]=k[f>>2];k[c>>2]=k[g>>2];k[s>>2]=k[h>>2];k[t>>2]=k[i>>2];k[u>>2]=k[j>>2];k[b>>2]=x;x=d;k[x>>2]=v;k[x+4>>2]=w;k[f>>2]=y;k[g>>2]=z;k[h>>2]=A;k[i>>2]=B;k[j>>2]=C;C=l+3|0;return C|0}function Bb(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;t=Ab(a,b,c,d,f)|0;if(!(Za[k[f>>2]&7](e,d)|0)){c=t;return c|0}B=k[d>>2]|0;m=d+4|0;y=m;z=k[y>>2]|0;y=k[y+4>>2]|0;g=d+12|0;x=k[g>>2]|0;h=d+16|0;v=k[h>>2]|0;i=d+20|0;n=k[i>>2]|0;j=d+24|0;p=k[j>>2]|0;l=d+28|0;r=k[l>>2]|0;k[d>>2]=k[e>>2];A=e+4|0;o=A;u=k[o+4>>2]|0;w=m;k[w>>2]=k[o>>2];k[w+4>>2]=u;w=e+12|0;k[g>>2]=k[w>>2];u=e+16|0;k[h>>2]=k[u>>2];o=e+20|0;k[i>>2]=k[o>>2];q=e+24|0;k[j>>2]=k[q>>2];s=e+28|0;k[l>>2]=k[s>>2];k[e>>2]=B;e=A;k[e>>2]=z;k[e+4>>2]=y;k[w>>2]=x;k[u>>2]=v;k[o>>2]=n;k[q>>2]=p;k[s>>2]=r;if(!(Za[k[f>>2]&7](d,c)|0)){B=t+1|0;return B|0}w=k[c>>2]|0;n=c+4|0;v=n;u=k[v>>2]|0;v=k[v+4>>2]|0;o=c+12|0;x=k[o>>2]|0;p=c+16|0;y=k[p>>2]|0;q=c+20|0;z=k[q>>2]|0;r=c+24|0;A=k[r>>2]|0;s=c+28|0;B=k[s>>2]|0;k[c>>2]=k[d>>2];D=m;C=k[D+4>>2]|0;e=n;k[e>>2]=k[D>>2];k[e+4>>2]=C;k[o>>2]=k[g>>2];k[p>>2]=k[h>>2];k[q>>2]=k[i>>2];k[r>>2]=k[j>>2];k[s>>2]=k[l>>2];k[d>>2]=w;w=m;k[w>>2]=u;k[w+4>>2]=v;k[g>>2]=x;k[h>>2]=y;k[i>>2]=z;k[j>>2]=A;k[l>>2]=B;if(!(Za[k[f>>2]&7](c,b)|0)){D=t+2|0;return D|0}y=k[b>>2]|0;j=b+4|0;x=j;w=k[x>>2]|0;x=k[x+4>>2]|0;l=b+12|0;z=k[l>>2]|0;e=b+16|0;A=k[e>>2]|0;g=b+20|0;B=k[g>>2]|0;h=b+24|0;C=k[h>>2]|0;i=b+28|0;D=k[i>>2]|0;k[b>>2]=k[c>>2];d=n;u=k[d+4>>2]|0;v=j;k[v>>2]=k[d>>2];k[v+4>>2]=u;k[l>>2]=k[o>>2];k[e>>2]=k[p>>2];k[g>>2]=k[q>>2];k[h>>2]=k[r>>2];k[i>>2]=k[s>>2];k[c>>2]=y;y=n;k[y>>2]=w;k[y+4>>2]=x;k[o>>2]=z;k[p>>2]=A;k[q>>2]=B;k[r>>2]=C;k[s>>2]=D;if(!(Za[k[f>>2]&7](b,a)|0)){D=t+3|0;return D|0}y=k[a>>2]|0;p=a+4|0;x=p;w=k[x>>2]|0;x=k[x+4>>2]|0;s=a+12|0;z=k[s>>2]|0;f=a+16|0;A=k[f>>2]|0;c=a+20|0;B=k[c>>2]|0;u=a+24|0;C=k[u>>2]|0;v=a+28|0;D=k[v>>2]|0;k[a>>2]=k[b>>2];q=j;r=k[q+4>>2]|0;a=p;k[a>>2]=k[q>>2];k[a+4>>2]=r;k[s>>2]=k[l>>2];k[f>>2]=k[e>>2];k[c>>2]=k[g>>2];k[u>>2]=k[h>>2];k[v>>2]=k[i>>2];k[b>>2]=y;y=j;k[y>>2]=w;k[y+4>>2]=x;k[l>>2]=z;k[e>>2]=A;k[g>>2]=B;k[h>>2]=C;k[i>>2]=D;D=t+4|0;return D|0}function Cb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0;x=r;r=r+32|0;v=x;switch(b-a>>5|0){case 2:{d=b+-32|0;if(!(Za[k[c>>2]&7](d,a)|0)){w=1;r=x;return w|0}j=k[a>>2]|0;p=a+4|0;n=p;m=k[n>>2]|0;n=k[n+4>>2]|0;s=a+12|0;o=k[s>>2]|0;u=a+16|0;q=k[u>>2]|0;h=a+20|0;t=k[h>>2]|0;w=a+24|0;v=k[w>>2]|0;i=a+28|0;c=k[i>>2]|0;k[a>>2]=k[d>>2];l=b+-28|0;g=l;a=k[g+4>>2]|0;k[p>>2]=k[g>>2];k[p+4>>2]=a;p=b+-20|0;k[s>>2]=k[p>>2];s=b+-16|0;k[u>>2]=k[s>>2];u=b+-12|0;k[h>>2]=k[u>>2];a=b+-8|0;k[w>>2]=k[a>>2];w=b+-4|0;k[i>>2]=k[w>>2];k[d>>2]=j;b=l;k[b>>2]=m;k[b+4>>2]=n;k[p>>2]=o;k[s>>2]=q;k[u>>2]=t;k[a>>2]=v;k[w>>2]=c;w=1;r=x;return w|0}case 3:{zb(a,a+32|0,b+-32|0,c)|0;w=1;r=x;return w|0}case 4:{Ab(a,a+32|0,a+64|0,b+-32|0,c)|0;w=1;r=x;return w|0}case 5:{Bb(a,a+32|0,a+64|0,a+96|0,b+-32|0,c)|0;w=1;r=x;return w|0}case 1:case 0:{w=1;r=x;return w|0}default:{f=a+64|0;zb(a,a+32|0,f,c)|0;e=a+96|0;if((e|0)==(b|0)){w=1;r=x;return w|0}o=v+4|0;p=v+12|0;q=v+16|0;s=v+20|0;t=v+24|0;u=v+28|0;d=0;while(1){if(Za[k[c>>2]&7](e,f)|0){k[v>>2]=k[e>>2];m=e+4|0;n=k[m+4>>2]|0;g=o;k[g>>2]=k[m>>2];k[g+4>>2]=n;k[p>>2]=k[e+12>>2];k[q>>2]=k[e+16>>2];k[s>>2]=k[e+20>>2];k[t>>2]=k[e+24>>2];k[u>>2]=k[e+28>>2];g=e;while(1){k[g>>2]=k[f>>2];n=f+4|0;j=n;i=k[j+4>>2]|0;h=g+4|0;k[h>>2]=k[j>>2];k[h+4>>2]=i;h=f+12|0;k[g+12>>2]=k[h>>2];i=f+16|0;k[g+16>>2]=k[i>>2];j=f+20|0;k[g+20>>2]=k[j>>2];l=f+24|0;k[g+24>>2]=k[l>>2];m=f+28|0;k[g+28>>2]=k[m>>2];if((f|0)==(a|0))break;g=f+-32|0;if(Za[k[c>>2]&7](v,g)|0){n=f;f=g;g=n}else break}k[f>>2]=k[v>>2];f=o;g=k[f+4>>2]|0;k[n>>2]=k[f>>2];k[n+4>>2]=g;k[h>>2]=k[p>>2];k[i>>2]=k[q>>2];k[j>>2]=k[s>>2];k[l>>2]=k[t>>2];k[m>>2]=k[u>>2];d=d+1|0;if((d|0)==8)break}f=e+32|0;if((f|0)==(b|0)){d=1;w=16;break}else{n=e;e=f;f=n}}if((w|0)==16){r=x;return d|0}w=(e+32|0)==(b|0);r=x;return w|0}}return 0}function Db(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0;m=a+4|0;e=k[m>>2]|0;l=k[a>>2]|0;c=l;i=(e-c|0)/24|0;j=i+1|0;if(j>>>0>178956970)xa(1340,1363,303,1438);n=a+8|0;d=((k[n>>2]|0)-c|0)/24|0;if(d>>>0<89478485){d=d<<1;d=d>>>0<j>>>0?j:d;if(!d){g=0;f=0}else h=5}else{d=178956970;h=5}if((h|0)==5){g=d*24|0;g=(g|0)==0?1:g;f=_d(g)|0;a:do if(!f){while(1){f=k[35]|0;k[35]=f+0;if(!f)break;Xa[f&0]();f=_d(g)|0;if(f)break a}n=ya(4)|0;k[n>>2]=128;La(n|0,8,1)}while(0);g=d}h=f+(i*24|0)|0;d=h;g=f+(g*24|0)|0;k[h>>2]=k[b>>2];k[f+(i*24|0)+4>>2]=k[b+4>>2];k[f+(i*24|0)+8>>2]=k[b+8>>2];k[f+(i*24|0)+12>>2]=k[b+12>>2];k[f+(i*24|0)+16>>2]=k[b+16>>2];k[f+(i*24|0)+20>>2]=k[b+20>>2];f=f+(j*24|0)|0;if((e|0)==(l|0))e=a;else{c=h;do{i=e;e=e+-24|0;k[c+-24>>2]=k[e>>2];k[c+-20>>2]=k[i+-20>>2];k[c+-16>>2]=k[i+-16>>2];k[c+-12>>2]=k[i+-12>>2];i=i+-8|0;j=k[i+4>>2]|0;b=c+-8|0;k[b>>2]=k[i>>2];k[b+4>>2]=j;c=d+-24|0;d=c}while((e|0)!=(l|0));e=a;c=k[a>>2]|0}k[e>>2]=d;k[m>>2]=f;k[n>>2]=g;if(!c)return;$d(c);return}function Eb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0;V=r;r=r+160|0;K=V+132|0;y=V+8|0;z=V;A=V+120|0;B=V+108|0;I=V+52|0;H=V+40|0;G=V+28|0;M=V+16|0;S=V+96|0;O=V+84|0;v=V+64|0;k[S>>2]=0;T=S+4|0;k[T>>2]=0;k[S+8>>2]=0;k[O>>2]=0;R=O+4|0;k[R>>2]=0;k[O+8>>2]=0;do if((b|0)!=(c|0)){p=v+4|0;q=v+8|0;s=v+12|0;t=v+16|0;u=S+8|0;f=0;g=0;o=0;n=0;h=0;e=0;a:while(1){l=b+16|0;if((f|0)==(g|0)){m=e-n|0;i=m>>3;j=i+1|0;if(j>>>0>536870911){N=6;break}d=h-n|0;if(d>>3>>>0<268435455){d=d>>2;d=d>>>0<j>>>0?j:d;if(!d){d=0;g=0}else N=9}else{d=536870911;N=9}if((N|0)==9){N=0;f=d<<3;f=(f|0)==0?1:f;e=_d(f)|0;if(!e)do{e=k[35]|0;k[35]=e+0;if(!e){N=12;break a}Xa[e&0]();e=_d(f)|0}while((e|0)==0);g=e}h=g+(d<<3)|0;e=l;d=k[e+4>>2]|0;f=g+(i<<3)|0;k[f>>2]=k[e>>2];k[f+4>>2]=d;f=g+(j<<3)|0;d=g;e=n;fe(g|0,e|0,m|0)|0;if(!n){l=h;j=f}else{$d(e);l=h;j=f}}else{j=l;l=k[j+4>>2]|0;d=f;k[d>>2]=k[j>>2];k[d+4>>2]=l;d=n;l=h;j=e+8|0}e=k[b>>2]|0;k[v>>2]=e;f=k[b+4>>2]|0;k[p>>2]=f;g=k[b+8>>2]|0;k[q>>2]=g;h=k[b+12>>2]|0;k[s>>2]=h;k[t>>2]=o;i=k[T>>2]|0;if(i>>>0<(k[u>>2]|0)>>>0){k[i>>2]=e;k[i+4>>2]=f;k[i+8>>2]=g;k[i+12>>2]=h;k[i+16>>2]=o;k[T>>2]=i+20}else Fb(S,v);b=b+24|0;if((b|0)==(c|0)){N=21;break}f=j;g=l;o=o+1|0;n=d;h=l;e=j}if((N|0)==6)xa(1340,1363,303,1438);else if((N|0)==12){V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}else if((N|0)==21){x=k[T>>2]|0;w=k[S>>2]|0;U=d;break}}else{x=0;w=0;U=0}while(0);n=(x-w|0)/20|0;k[M>>2]=0;J=M+4|0;k[J>>2]=0;k[M+8>>2]=0;g=(x|0)==(w|0);if(!g){if(n>>>0>357913941)xa(1340,1363,303,1438);d=n*12|0;b=_d(d)|0;b:do if(!b){while(1){b=k[35]|0;k[35]=b+0;if(!b)break;Xa[b&0]();b=_d(d)|0;if(b)break b}V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}while(0);k[J>>2]=b;k[M>>2]=b;k[M+8>>2]=b+(n*12|0);e=n;f=b;while(1){k[f+4>>2]=0;k[f+8>>2]=0;k[f>>2]=f+4;d=b+12|0;k[J>>2]=d;b=e+-1|0;if(!b)break;else{e=b;f=d;b=d}}}k[I>>2]=0;E=I+4|0;k[E>>2]=0;k[I+8>>2]=0;k[K>>2]=0;m=K+4|0;k[m>>2]=0;k[K+8>>2]=0;e=n<<1;j=K+8|0;if(g){f=0;g=0;d=0}else{d=n<<4;b=_d(d)|0;c:do if(!b){while(1){b=k[35]|0;k[35]=b+0;if(!b)break;Xa[b&0]();b=_d(d)|0;if(b)break c}V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}while(0);f=b;d=b+(e<<3)|0;k[K>>2]=f;k[m>>2]=f;k[j>>2]=d;f=b;g=b}F=w;D=(F|0)==(x|0);if(D){e=g;b=g;d=f;j=f}else{h=y+4|0;i=z+4|0;b=F;while(1){C=k[b+4>>2]|0;e=b+12|0;f=(C|0)<(k[e>>2]|0)?1:-1;k[y>>2]=C;k[h>>2]=f;if(g>>>0<d>>>0){w=y;C=k[w+4>>2]|0;d=g;k[d>>2]=k[w>>2];k[d+4>>2]=C;d=(k[m>>2]|0)+8|0;k[m>>2]=d}else{dc(K,y);d=k[m>>2]|0}k[z>>2]=k[e>>2];k[i>>2]=0-f;if(d>>>0<(k[j>>2]|0)>>>0){c=z;w=k[c+4>>2]|0;C=d;k[C>>2]=k[c>>2];k[C+4>>2]=w;k[m>>2]=d+8}else dc(K,z);b=b+20|0;if((b|0)==(x|0))break;g=k[m>>2]|0;d=k[j>>2]|0}j=k[K>>2]|0;d=k[m>>2]|0;e=j;b=d}ec(e,b);h=d-j>>3;l=I+8|0;b=k[l>>2]|0;i=k[I>>2]|0;e=i;d=k[E>>2]|0;if(((b-e|0)/12|0)>>>0<h>>>0){f=d-e|0;g=(f|0)/12|0;if(!h)e=0;else{d=h*12|0;d=(d|0)==0?1:d;b=_d(d)|0;d:do if(!b){while(1){b=k[35]|0;k[35]=b+0;if(!b)break;Xa[b&0]();b=_d(d)|0;if(b)break d}V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}while(0);e=b}d=e+(g*12|0)|0;b=e+(h*12|0)|0;C=e+((((f|0)/-12|0)+g|0)*12|0)|0;fe(C|0,i|0,f|0)|0;k[I>>2]=C;k[E>>2]=d;k[l>>2]=b;if(!i)e=j;else{$d(i);e=k[K>>2]|0}}else e=j;k[A>>2]=k[e>>2];k[A+4>>2]=0;k[A+8>>2]=0;if(d>>>0<b>>>0){k[d>>2]=k[A>>2];k[d+4>>2]=k[A+4>>2];k[d+8>>2]=k[A+8>>2];k[E>>2]=(k[E>>2]|0)+12}else fc(I,A);i=k[K>>2]|0;d=k[m>>2]|0;if((i|0)==(d|0))d=i;else{f=B+4|0;g=B+8|0;h=i;e=k[E>>2]|0;do{b=k[h>>2]|0;do if((b|0)!=(k[e+-12>>2]|0)){k[B>>2]=b;k[f>>2]=k[e+-8>>2];k[g>>2]=k[e+-4>>2];if(e>>>0<(k[l>>2]|0)>>>0){k[e>>2]=k[B>>2];k[e+4>>2]=k[B+4>>2];k[e+8>>2]=k[B+8>>2];e=e+12|0;k[E>>2]=e;break}else{fc(I,B);e=k[E>>2]|0;break}}while(0);b=k[h+4>>2]|0;if((b|0)<0){C=e+-4|0;k[C>>2]=(k[C>>2]|0)-b}C=e+-8|0;k[C>>2]=(k[C>>2]|0)+b;h=h+8|0}while((h|0)!=(d|0))}b=i;if(i){if((d|0)!=(i|0))k[m>>2]=d+(~((d+-8-b|0)>>>3)<<3);$d(i)}k[H>>2]=0;C=H+4|0;k[C>>2]=0;k[H+8>>2]=0;d=k[I>>2]|0;Mb(H,d,k[E>>2]|0,n);z=G+4|0;k[z>>2]=0;A=G+8|0;k[A>>2]=0;B=G+4|0;k[G>>2]=B;b=_d(32)|0;e:do if(!b){while(1){b=k[35]|0;k[35]=b+0;if(!b)break;Xa[b&0]();b=_d(32)|0;if(b)break e}V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}while(0);y=B;k[b+16>>2]=k[d>>2];g=b+20|0;k[g>>2]=0;h=b+24|0;k[h>>2]=0;f=b+28|0;k[f>>2]=0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=y;k[B>>2]=b;d=k[k[G>>2]>>2]|0;if(!d)d=b;else{k[G>>2]=d;d=b}Nb(b,d);k[A>>2]=(k[A>>2]|0)+1;b=k[g>>2]|0;d=b;if(!b)b=f;else{e=k[h>>2]|0;if((e|0)!=(b|0))k[h>>2]=e+(~(((e+-20-d|0)>>>0)/20|0)*20|0);$d(b);k[f>>2]=0;k[h>>2]=0;k[g>>2]=0;b=f}k[g>>2]=0;k[h>>2]=0;k[b>>2]=0;b=k[H>>2]|0;f:do if((b|0)!=(k[C>>2]|0)){g:while(1){d=k[B>>2]|0;do if(d){g=k[b>>2]|0;while(1){e=k[d+16>>2]|0;if((g|0)<(e|0)){e=k[d>>2]|0;if(!e){N=90;break}else d=e}else{if((e|0)>=(g|0)){N=96;break}f=d+4|0;e=k[f>>2]|0;if(!e){N=94;break}else d=e}}if((N|0)==90){k[K>>2]=d;f=d;N=97;break}else if((N|0)==94){k[K>>2]=d;N=97;break}else if((N|0)==96){N=0;k[K>>2]=d;if(!d){f=K;N=97;break}else break}}else{k[K>>2]=B;f=B;d=y;N=97}while(0);if((N|0)==97){N=0;e=_d(32)|0;if(!e)do{e=k[35]|0;k[35]=e+0;if(!e)break g;Xa[e&0]();e=_d(32)|0}while((e|0)==0);k[e+16>>2]=k[b>>2];k[e+20>>2]=0;k[e+24>>2]=0;k[e+28>>2]=0;k[e>>2]=0;k[e+4>>2]=0;k[e+8>>2]=d;k[f>>2]=e;d=k[k[G>>2]>>2]|0;if(!d)d=e;else{k[G>>2]=d;d=k[f>>2]|0}Nb(k[z>>2]|0,d);k[A>>2]=(k[A>>2]|0)+1;d=e}i=d+20|0;e=k[i>>2]|0;f=e;h=d+24|0;if(!e)d=d+28|0;else{g=k[h>>2]|0;if((g|0)!=(e|0))k[h>>2]=g+(~(((g+-20-f|0)>>>0)/20|0)*20|0);$d(e);d=d+28|0;k[d>>2]=0;k[h>>2]=0;k[i>>2]=0}k[i>>2]=0;k[h>>2]=0;k[d>>2]=0;b=b+4|0;if((b|0)==(k[C>>2]|0))break f}V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}while(0);h:do if(!D){c=F;i:while(1){v=c+4|0;h=k[v>>2]|0;w=c+12|0;i=k[w>>2]|0;e=k[B>>2]|0;j=(e|0)==0;j:do if(j)d=B;else{g=(i|0)<(h|0)?i:h;d=B;f=e;while(1){b=f;while(1){if((k[b+16>>2]|0)>=(g|0))break;b=k[b+4>>2]|0;if(!b)break j}f=k[b>>2]|0;if(!f){d=b;break}else d=b}}while(0);if((d|0)!=(k[G>>2]|0)){b=k[d>>2]|0;if(!b)while(1){b=k[d+8>>2]|0;if((k[b>>2]|0)==(d|0))d=b;else{d=b;break}}else{d=b;while(1){b=k[d+4>>2]|0;if(!b)break;else d=b}}}k:do if(j)f=B;else{g=(h|0)<(i|0)?i:h;f=B;while(1){b=e;while(1){if((g|0)<(k[b+16>>2]|0))break;b=k[b+4>>2]|0;if(!b)break k}e=k[b>>2]|0;if(!e){f=b;break}else f=b}}while(0);if((d|0)!=(f|0)){t=c+8|0;u=c+16|0;while(1){o=d+24|0;l=k[o>>2]|0;p=d+28|0;do if((l|0)==(k[p>>2]|0)){q=d+20|0;s=k[q>>2]|0;m=s;n=(l-m|0)/20|0;h=n+1|0;if(h>>>0>214748364){N=135;break i}if(n>>>0<107374182){b=n<<1;b=b>>>0<h>>>0?h:b;if(!b){g=0;e=0}else N=138}else{b=214748364;N=138}if((N|0)==138){N=0;g=b*20|0;g=(g|0)==0?1:g;e=_d(g)|0;if(!e)do{e=k[35]|0;k[35]=e+0;if(!e){N=141;break i}Xa[e&0]();e=_d(g)|0}while((e|0)==0);g=b}b=e+(n*20|0)|0;j=e+(g*20|0)|0;k[b>>2]=k[c>>2];k[e+(n*20|0)+4>>2]=k[v>>2];k[e+(n*20|0)+8>>2]=k[t>>2];k[e+(n*20|0)+12>>2]=k[w>>2];k[e+(n*20|0)+16>>2]=k[u>>2];i=e+(h*20|0)|0;if((l|0)!=(s|0)){h=l+-20|0;g=l;while(1){l=g;g=g+-20|0;k[b+-20>>2]=k[g>>2];k[b+-16>>2]=k[l+-16>>2];k[b+-12>>2]=k[l+-12>>2];k[b+-8>>2]=k[l+-8>>2];k[b+-4>>2]=k[l+-4>>2];if((g|0)==(s|0))break;else b=b+-20|0}b=e+((n+~(((h-m|0)>>>0)/20|0)|0)*20|0)|0}k[q>>2]=b;k[o>>2]=i;k[p>>2]=j;if(!s)break;$d(s)}else{k[l>>2]=k[c>>2];k[l+4>>2]=k[v>>2];k[l+8>>2]=k[t>>2];k[l+12>>2]=k[w>>2];k[l+16>>2]=k[u>>2];k[o>>2]=l+20}while(0);b=k[d+4>>2]|0;if(!b)while(1){b=k[d+8>>2]|0;if((k[b>>2]|0)==(d|0))break;else d=b}else while(1){d=k[b>>2]|0;if(!d)break;else b=d}if((b|0)==(f|0))break;else d=b}}c=c+20|0;if((c|0)==(x|0))break h}if((N|0)==135)xa(1340,1363,303,1438);else if((N|0)==141){V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}}while(0);h=k[I>>2]|0;b=k[B>>2]|0;do if(b){g=k[h>>2]|0;f=b;while(1){d=k[f+16>>2]|0;if((g|0)<(d|0)){d=k[f>>2]|0;if(!d){N=159;break}}else{if((d|0)>=(g|0)){N=165;break}e=f+4|0;d=k[e>>2]|0;if(!d){N=163;break}}f=d}if((N|0)==159){k[K>>2]=f;e=f;N=166;break}else if((N|0)==163){k[K>>2]=f;N=166;break}else if((N|0)==165){k[K>>2]=f;if(!f){e=K;N=166;break}else{d=f;break}}}else{k[K>>2]=B;e=B;f=y;N=166}while(0);if((N|0)==166){b=_d(32)|0;l:do if(!b){while(1){b=k[35]|0;k[35]=b+0;if(!b)break;Xa[b&0]();b=_d(32)|0;if(b){d=b;break l}}V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}else d=b;while(0);k[d+16>>2]=k[h>>2];k[d+20>>2]=0;k[d+24>>2]=0;k[d+28>>2]=0;k[d>>2]=0;k[d+4>>2]=0;k[d+8>>2]=f;k[e>>2]=d;b=k[k[G>>2]>>2]|0;if(!b)b=d;else{k[G>>2]=b;b=k[e>>2]|0}Nb(k[z>>2]|0,b);k[A>>2]=(k[A>>2]|0)+1;b=k[B>>2]|0;h=k[I>>2]|0}g=k[d+20>>2]|0;do if(b){f=k[h>>2]|0;while(1){d=k[b+16>>2]|0;if((f|0)<(d|0)){d=k[b>>2]|0;if(!d){N=177;break}else b=d}else{if((d|0)>=(f|0)){N=183;break}e=b+4|0;d=k[e>>2]|0;if(!d){N=181;break}else b=d}}if((N|0)==177){k[K>>2]=b;e=b;d=b;N=184;break}else if((N|0)==181){k[K>>2]=b;d=b;N=184;break}else if((N|0)==183){k[K>>2]=b;if(!b){e=K;d=b;N=184;break}else break}}else{k[K>>2]=B;e=B;d=y;N=184}while(0);if((N|0)==184){b=_d(32)|0;m:do if(!b){while(1){b=k[35]|0;k[35]=b+0;if(!b)break;Xa[b&0]();b=_d(32)|0;if(b)break m}V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}while(0);k[b+16>>2]=k[h>>2];k[b+20>>2]=0;k[b+24>>2]=0;k[b+28>>2]=0;k[b>>2]=0;k[b+4>>2]=0;k[b+8>>2]=d;k[e>>2]=b;d=k[k[G>>2]>>2]|0;if(!d)d=b;else{k[G>>2]=d;d=k[e>>2]|0}Nb(k[z>>2]|0,d);k[A>>2]=(k[A>>2]|0)+1}Pb(M,g,k[b+24>>2]|0,-2147483648);b=k[H>>2]|0;n:do if((b|0)!=(k[C>>2]|0)){o:while(1){g=k[B>>2]|0;do if(g){h=k[b>>2]|0;f=g;while(1){d=k[f+16>>2]|0;if((h|0)<(d|0)){d=k[f>>2]|0;if(!d){N=197;break}}else{if((d|0)>=(h|0)){N=203;break}e=f+4|0;d=k[e>>2]|0;if(!d){N=201;break}}f=d}if((N|0)==197){k[K>>2]=f;g=f;N=204;break}else if((N|0)==201){k[K>>2]=f;g=e;N=204;break}else if((N|0)==203){N=0;k[K>>2]=f;if(!f){g=K;N=204;break}else{d=f;break}}}else{k[K>>2]=B;g=B;f=y;N=204}while(0);if((N|0)==204){d=_d(32)|0;if(!d)while(1){d=k[35]|0;k[35]=d+0;if(!d){N=207;break o}Xa[d&0]();d=_d(32)|0;if(d){e=d;break}}else e=d;k[e+16>>2]=k[b>>2];k[e+20>>2]=0;k[e+24>>2]=0;k[e+28>>2]=0;k[e>>2]=0;k[e+4>>2]=0;k[e+8>>2]=f;k[g>>2]=e;d=k[k[G>>2]>>2]|0;if(!d)d=e;else{k[G>>2]=d;d=k[g>>2]|0}Nb(k[z>>2]|0,d);k[A>>2]=(k[A>>2]|0)+1;g=k[B>>2]|0;d=e}h=k[d+20>>2]|0;do if(g){f=k[b>>2]|0;while(1){d=k[g+16>>2]|0;if((f|0)<(d|0)){d=k[g>>2]|0;if(!d){N=215;break}}else{if((d|0)>=(f|0)){N=221;break}e=g+4|0;d=k[e>>2]|0;if(!d){N=219;break}}g=d}if((N|0)==215){k[K>>2]=g;f=g;N=222;break}else if((N|0)==219){k[K>>2]=g;f=e;N=222;break}else if((N|0)==221){N=0;k[K>>2]=g;if(!g){f=K;N=222;break}else{d=g;break}}}else{k[K>>2]=B;f=B;g=y;N=222}while(0);if((N|0)==222){N=0;d=_d(32)|0;if(!d)do{d=k[35]|0;k[35]=d+0;if(!d){N=225;break o}Xa[d&0]();d=_d(32)|0}while((d|0)==0);k[d+16>>2]=k[b>>2];k[d+20>>2]=0;k[d+24>>2]=0;k[d+28>>2]=0;k[d>>2]=0;k[d+4>>2]=0;k[d+8>>2]=g;k[f>>2]=d;e=k[k[G>>2]>>2]|0;if(!e)e=d;else{k[G>>2]=e;e=k[f>>2]|0}Nb(k[z>>2]|0,e);k[A>>2]=(k[A>>2]|0)+1}Pb(M,h,k[d+24>>2]|0,k[b>>2]|0);b=b+4|0;if((b|0)==(k[C>>2]|0))break n}if((N|0)==207){V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}else if((N|0)==225){V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}}while(0);Ob(k[B>>2]|0);b=k[H>>2]|0;d=b;if(b){e=k[C>>2]|0;if((e|0)!=(b|0))k[C>>2]=e+(~((e+-4-d|0)>>>2)<<2);$d(b)}b=k[I>>2]|0;d=b;if(b){e=k[E>>2]|0;if((e|0)!=(b|0))k[E>>2]=e+(~(((e+-12-d|0)>>>0)/12|0)*12|0);$d(b)}p:do if(!D){c=K+4|0;w=K+8|0;y=K+12|0;z=K+16|0;A=O+8|0;B=K+4|0;C=K+8|0;D=K+12|0;E=K+16|0;u=F;q:while(1){v=k[u+16>>2]|0;n=k[M>>2]|0;m=n+(v*12|0)|0;b=k[u>>2]|0;d=k[u+8>>2]|0;do if((b|0)==(d|0))N=320;else{H=k[u+4>>2]|0;l=b+1|0;h=k[u+12>>2]|0;H=be(h|0,((h|0)<0)<<31>>31|0,H|0,((H|0)<0)<<31>>31|0)|0;h=L;e=((b|0)<0)<<31>>31;l=be(l|0,((l|0)<0)<<31>>31|0,b|0,e|0)|0;g=L;e=be(d|0,((d|0)<0)<<31>>31|0,b|0,e|0)|0;i=L;I=(i|0)<0;b=be(0,0,H|0,h|0)|0;d=L;f=be(0,0,e|0,i|0)|0;j=L;b=I?b:H;d=I?d:h;e=(g|0)<0;f=be(0,0,l|0,g|0)|0;g=e?L:g;h=(d|0)<0;i=((I?j:i)|0)<0?-1:1;j=ha(h?-1:1,(g|0)<0?-1:1)|0;if((j|0)>=(i|0)?(I=be(0,0,b|0,d|0)|0,I=ne((h?I:b)|0,(h?L:d)|0,(e?f:l)|0,g|0)|0,!(((I|0)!=0|(L|0)!=0)&((i|0)>=(j|0)&(j|0)==-1))):0){N=320;break}e=k[n+(v*12|0)+8>>2]|0;if(!e){s=0;t=0;i=0}else{d=e<<3;d=(d|0)==0?1:d;b=_d(d)|0;if(!b)do{b=k[35]|0;k[35]=b+0;if(!b){N=247;break q}Xa[b&0]();b=_d(d)|0}while((b|0)==0);s=b;t=b;i=b+(e<<3)|0}q=s;h=k[m>>2]|0;m=n+(v*12|0)+4|0;l=m;n=t;o=q-t>>3;f=h;do if((f|0)==(m|0)){j=t;b=t}else{e=h;d=e;g=0;while(1){j=g+1|0;b=k[d+4>>2]|0;if(!b)while(1){b=k[d+8>>2]|0;if((k[b>>2]|0)==(d|0))break;else d=b}else while(1){d=k[b>>2]|0;if(!d)break;else b=d}if((b|0)==(m|0))break;else{d=b;g=j}}if((g|0)<=-1){j=t;b=t;break}p=t;if((g|0)>=(i-t>>3|0)){d=(t-t>>3)+j|0;if(d>>>0>536870911){N=290;break q}b=i-t|0;if(b>>3>>>0<268435455){b=b>>2;b=b>>>0<d>>>0?d:b;if(!b)g=0;else N=293}else{b=536870911;N=293}if((N|0)==293){N=0;d=b<<3;d=(d|0)==0?1:d;b=_d(d)|0;if(!b)do{b=k[35]|0;k[35]=b+0;if(!b){N=296;break q}Xa[b&0]();b=_d(d)|0}while((b|0)==0);g=b}d=g+(o<<3)|0;h=d;while(1){k[h>>2]=k[f+16>>2];k[h+4>>2]=k[f+20>>2];b=h+8|0;f=k[e+4>>2]|0;if(!f)while(1){f=k[e+8>>2]|0;if((k[f>>2]|0)==(e|0)){e=f;break}else e=f}else{e=f;while(1){f=k[e>>2]|0;if(!f)break;else e=f}}if((e|0)==(m|0))break;else{f=e;h=b}}if((n|0)!=(s|0)){f=s+-8|0;e=s;while(1){I=e;e=e+-8|0;k[d+-8>>2]=k[e>>2];k[d+-4>>2]=k[I+-4>>2];if((e|0)==(n|0))break;else d=d+-8|0}d=g+(o+~((f-t|0)>>>3)<<3)|0}if((p|0)!=(s|0)){g=p+-8|0;e=s;f=h;while(1){k[f+8>>2]=k[e>>2];k[f+12>>2]=k[e+4>>2];e=e+8|0;if((e|0)==(p|0))break;else{f=b;b=b+8|0}}b=h+(((g-q|0)>>>3)+2<<3)|0}if(!t){j=d;break}$d(t);j=d;break}i=t-q|0;b=i>>3;if((g|0)>=(b|0)){do if((i|0)>-8){if((i|0)>0){d=e;g=b}else{l=h;break}while(1){b=k[d+4>>2]|0;if(!b)while(1){b=k[d+8>>2]|0;if((k[b>>2]|0)==(d|0))break;else d=b}else while(1){d=k[b>>2]|0;if(!d)break;else b=d}if((g|0)>1){d=b;g=g+-1|0}else break}l=b}else{d=e;g=b;while(1){b=k[d>>2]|0;if(!b)while(1){b=k[d+8>>2]|0;if((k[b>>2]|0)==(d|0))d=b;else break}else while(1){d=k[b+4>>2]|0;if(!d)break;else b=d}if((g|0)<-1){d=b;g=g+1|0}else break}l=b}while(0);b=l;if((b|0)==(m|0)){d=p;b=t}else{g=p;d=l;while(1){k[g>>2]=k[b+16>>2];k[g+4>>2]=k[b+20>>2];g=g+8|0;b=k[d+4>>2]|0;if(!b){b=d;while(1){d=k[b+8>>2]|0;if((k[d>>2]|0)==(b|0))break;else b=d}}else while(1){d=k[b>>2]|0;if(!d){d=b;break}else b=d}if((d|0)==(m|0))break;else b=d}d=g;b=g}if((i|0)<=0){j=t;break}}else{d=p;b=t}j=d-(n+(j+o<<3))>>3;g=s+(j<<3)|0;if(g>>>0<p>>>0){i=p+(0-j<<3)+~q|0;b=d;h=g;while(1){k[b>>2]=k[h>>2];k[b+4>>2]=k[h+4>>2];h=h+8|0;if(h>>>0>=p>>>0)break;else b=b+8|0}b=d+((i>>>3)+1<<3)|0}if(j)do{I=d;d=d+-8|0;H=g;g=g+-8|0;k[d>>2]=k[g>>2];k[I+-4>>2]=k[H+-4>>2]}while((g|0)!=(s|0));h=l;if((f|0)==(h|0)){j=t;break}else g=s;while(1){k[g>>2]=k[f+16>>2];k[g+4>>2]=k[f+20>>2];d=k[e+4>>2]|0;if(!d)while(1){d=k[e+8>>2]|0;if((k[d>>2]|0)==(e|0))break;else e=d}else while(1){e=k[d>>2]|0;if(!e)break;else d=e}if((d|0)==(h|0)){j=t;break}else{g=g+8|0;f=d;e=d}}}while(0);e=j;Hb(e,b);d=e+8|0;if((d|0)!=(b|0)){i=d;while(1){g=k[e>>2]|0;h=k[e+4>>2]|0;f=k[e+8>>2]|0;d=k[e+12>>2]|0;k[K>>2]=g;k[B>>2]=h;k[C>>2]=f;k[D>>2]=d;k[E>>2]=v;e=k[R>>2]|0;if(e>>>0<(k[A>>2]|0)>>>0){k[e>>2]=g;k[e+4>>2]=h;k[e+8>>2]=f;k[e+12>>2]=d;k[e+16>>2]=v;k[R>>2]=e+20}else Fb(O,K);d=i+8|0;if((d|0)==(b|0))break;else{e=i;i=d}}}if(!j)break;$d(j)}while(0);if((N|0)==320){N=0;d=k[m>>2]|0;j=n+(v*12|0)+4|0;e=d;b=k[d+4>>2]|0;if(!b)while(1){b=k[d+8>>2]|0;if((k[b>>2]|0)==(d|0))break;else d=b}else while(1){d=k[b>>2]|0;if(!d)break;else b=d}if((b|0)!=(j|0)){d=b;i=e;while(1){e=i;i=d;b=k[e+16>>2]|0;e=k[e+20>>2]|0;f=k[d+16>>2]|0;g=k[d+20>>2]|0;k[K>>2]=b;k[c>>2]=e;k[w>>2]=f;k[y>>2]=g;k[z>>2]=v;h=k[R>>2]|0;if(h>>>0<(k[A>>2]|0)>>>0){k[h>>2]=b;k[h+4>>2]=e;k[h+8>>2]=f;k[h+12>>2]=g;k[h+16>>2]=v;k[R>>2]=h+20}else Fb(O,K);b=k[d+4>>2]|0;if(!b)while(1){b=k[d+8>>2]|0;if((k[b>>2]|0)==(d|0))break;else d=b}else while(1){d=k[b>>2]|0;if(!d)break;else b=d}if((b|0)==(j|0))break;else d=b}}}u=u+20|0;if((u|0)==(x|0))break p}if((N|0)==247){V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}else if((N|0)==290)xa(1340,1363,303,1438);else if((N|0)==296){V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}}while(0);d=k[M>>2]|0;if(d){b=k[J>>2]|0;if((b|0)!=(d|0)){do{Gb(k[b+-8>>2]|0);b=b+-12|0}while((b|0)!=(d|0));k[J>>2]=d}$d(d)}b=k[R>>2]|0;d=k[O>>2]|0;r:do if((b|0)!=(d|0)){v=a+4|0;c=a+8|0;w=U;e=k[v>>2]|0;u=0;s:while(1){m=k[d+(u*20|0)+16>>2]|0;p=k[d+(u*20|0)>>2]|0;q=k[d+(u*20|0)+4>>2]|0;s=k[d+(u*20|0)+8>>2]|0;j=k[d+(u*20|0)+12>>2]|0;l=k[w+(m<<3)>>2]|0;m=k[w+(m<<3)+4>>2]|0;d=k[c>>2]|0;do if(e>>>0<d>>>0){k[e>>2]=p;k[e+4>>2]=q;k[e+8>>2]=s;k[e+12>>2]=j;e=e+16|0;k[e>>2]=l;k[e+4>>2]=m;e=(k[v>>2]|0)+24|0;k[v>>2]=e}else{t=k[a>>2]|0;b=t;n=(e-b|0)/24|0;o=n+1|0;if(o>>>0>178956970){N=344;break s}d=(d-b|0)/24|0;if(d>>>0<89478485){d=d<<1;d=d>>>0<o>>>0?o:d;if(!d){g=0;f=0}else N=347}else{d=178956970;N=347}if((N|0)==347){N=0;g=d*24|0;g=(g|0)==0?1:g;f=_d(g)|0;if(!f)do{f=k[35]|0;k[35]=f+0;if(!f){N=350;break s}Xa[f&0]();f=_d(g)|0}while((f|0)==0);g=d}h=f+(n*24|0)|0;d=h;i=f+(g*24|0)|0;k[h>>2]=p;k[f+(n*24|0)+4>>2]=q;k[f+(n*24|0)+8>>2]=s;k[f+(n*24|0)+12>>2]=j;g=f+(n*24|0)+16|0;k[g>>2]=l;k[g+4>>2]=m;f=f+(o*24|0)|0;g=f;if((e|0)!=(t|0)){b=h;do{J=e;e=e+-24|0;k[b+-24>>2]=k[e>>2];k[b+-20>>2]=k[J+-20>>2];k[b+-16>>2]=k[J+-16>>2];k[b+-12>>2]=k[J+-12>>2];J=J+-8|0;K=k[J+4>>2]|0;M=b+-8|0;k[M>>2]=k[J>>2];k[M+4>>2]=K;b=d+-24|0;d=b}while((e|0)!=(t|0));b=k[a>>2]|0}k[a>>2]=d;k[v>>2]=g;k[c>>2]=i;if(!b){e=f;break}$d(b);e=k[v>>2]|0}while(0);m=e+-24|0;n=k[m>>2]|0;o=e+-16|0;p=k[o>>2]|0;do if((n|0)<(p|0))f=1;else{if((n|0)==(p|0)?(k[e+-20>>2]|0)<(k[e+-12>>2]|0):0){f=1;break}f=0}while(0);d=k[O>>2]|0;h=k[d+(u*20|0)+16>>2]|0;i=k[S>>2]|0;j=i+(h*20|0)|0;g=k[j>>2]|0;l=i+(h*20|0)+8|0;b=k[l>>2]|0;do if((g|0)>=(b|0)){if((g|0)==(b|0)?(k[i+(h*20|0)+4>>2]|0)<(k[i+(h*20|0)+12>>2]|0):0){N=364;break}if(f)N=366}else N=364;while(0);if((N|0)==364){N=0;if(!f)N=366}if((N|0)==366){N=0;g=e+-4|0;k[g>>2]=0-(k[g>>2]|0);g=k[j>>2]|0;b=k[l>>2]|0}f=(n|0)==(p|0);if((g|0)!=(b|0)&f){M=e+-4|0;k[M>>2]=0-(k[M>>2]|0)}do if((p|0)>=(n|0)){if(!f)break;b=e+-12|0;h=k[b>>2]|0;g=e+-20|0;f=k[g>>2]|0;if((h|0)<(f|0))N=373}else{f=e+-20|0;h=e+-12|0;b=h;g=f;h=k[h>>2]|0;f=k[f>>2]|0;N=373}while(0);if((N|0)==373){N=0;k[m>>2]=p;k[g>>2]=h;k[o>>2]=n;k[b>>2]=f}u=u+1|0;b=k[R>>2]|0;if(u>>>0>=((b-d|0)/20|0)>>>0){P=d;Q=b;break r}}if((N|0)==344)xa(1340,1363,303,1438);else if((N|0)==350){V=ya(4)|0;k[V>>2]=128;La(V|0,8,1)}}else{P=b;Q=b}while(0);b=P;if(P){if((Q|0)!=(P|0))k[R>>2]=Q+(~(((Q+-20-b|0)>>>0)/20|0)*20|0);$d(P)}b=k[S>>2]|0;d=b;if(b){e=k[T>>2]|0;if((e|0)!=(b|0))k[T>>2]=e+(~(((e+-20-d|0)>>>0)/20|0)*20|0);$d(b)}if(!U){r=V;return}$d(U);r=V;return}function Fb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0;m=a+4|0;e=k[m>>2]|0;n=k[a>>2]|0;j=n;l=(e-j|0)/20|0;i=l+1|0;if(i>>>0>214748364)xa(1340,1363,303,1438);o=a+8|0;c=((k[o>>2]|0)-j|0)/20|0;if(c>>>0<107374182){c=c<<1;c=c>>>0<i>>>0?i:c;if(!c){f=0;d=0}else g=5}else{c=214748364;g=5}if((g|0)==5){f=c*20|0;f=(f|0)==0?1:f;d=_d(f)|0;a:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(f)|0;if(d)break a}a=ya(4)|0;k[a>>2]=128;La(a|0,8,1)}while(0);f=c}c=d+(l*20|0)|0;h=d+(f*20|0)|0;k[c>>2]=k[b>>2];k[d+(l*20|0)+4>>2]=k[b+4>>2];k[d+(l*20|0)+8>>2]=k[b+8>>2];k[d+(l*20|0)+12>>2]=k[b+12>>2];k[d+(l*20|0)+16>>2]=k[b+16>>2];g=d+(i*20|0)|0;if((e|0)!=(n|0)){f=e+-20|0;while(1){b=e;e=e+-20|0;k[c+-20>>2]=k[e>>2];k[c+-16>>2]=k[b+-16>>2];k[c+-12>>2]=k[b+-12>>2];k[c+-8>>2]=k[b+-8>>2];k[c+-4>>2]=k[b+-4>>2];if((e|0)==(n|0))break;else c=c+-20|0}c=d+((l+~(((f-j|0)>>>0)/20|0)|0)*20|0)|0}k[a>>2]=c;k[m>>2]=g;k[o>>2]=h;if(!n)return;$d(n);return}function Gb(a){a=a|0;if(!a)return;else{Gb(k[a>>2]|0);Gb(k[a+4>>2]|0);$d(a);return}}function Hb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;t=b;a:while(1){m=t;n=t+-8|0;o=t+-16|0;s=t+-4|0;y=a;b:while(1){l=y;a=m-l|0;b=a>>3;switch(b|0){case 2:{x=4;break a}case 3:{x=9;break a}case 4:{x=10;break a}case 5:{x=11;break a}case 1:case 0:{x=88;break a}default:{}}if((a|0)<56){x=13;break a}c=(b|0)/2|0;g=y+(c<<3)|0;if((a|0)>7992){a=(b|0)/4|0;a=Kb(y,y+(a<<3)|0,g,y+(a+c<<3)|0,n)|0}else a=Ib(y,g,n)|0;h=k[y>>2]|0;f=k[g>>2]|0;c:do if((h|0)<(f|0))c=n;else{if((h|0)==(f|0)?(k[y+4>>2]|0)>(k[y+(c<<3)+4>>2]|0):0){c=n;break}d:do if((y|0)!=(o|0)){e=y+(c<<3)+4|0;c=o;d=n;while(1){b=k[c>>2]|0;if((b|0)<(f|0)){x=58;break}if((b|0)==(f|0)?(p=d+-4|0,(k[p>>2]|0)>(k[e>>2]|0)):0){d=p;b=f;break}b=c+-8|0;if((y|0)==(b|0))break d;else{d=c;c=b}}if((x|0)==58){x=0;d=d+-4|0}i=y+4|0;j=k[i>>2]|0;k[y>>2]=b;k[i>>2]=k[d>>2];k[c>>2]=h;k[d>>2]=j;a=a+1|0;break c}while(0);a=y+8|0;f=k[n>>2]|0;do if((h|0)>=(f|0)){if((h|0)==(f|0)?(k[y+4>>2]|0)>(k[s>>2]|0):0)break;if((a|0)==(n|0)){x=88;break a}c=y+4|0;e=y;while(1){d=e+8|0;b=k[d>>2]|0;if((h|0)<(b|0)){x=40;break}if((h|0)==(b|0)?(q=e+12|0,r=k[q>>2]|0,(k[c>>2]|0)>(r|0)):0){c=q;a=h;b=r;break}b=a+8|0;if((b|0)==(n|0)){x=88;break a}else{e=a;a=b}}if((x|0)==40){x=0;l=e+12|0;c=l;a=b;b=k[l>>2]|0}k[d>>2]=f;k[c>>2]=k[s>>2];k[n>>2]=a;k[s>>2]=b;a=e+16|0}while(0);if((a|0)==(n|0)){x=88;break a}h=y+4|0;c=n;while(1){g=k[y>>2]|0;b=k[a>>2]|0;e:do if((g|0)<(b|0)){f=a;e=a}else while(1){if((g|0)==(b|0)?(k[h>>2]|0)>(k[a+4>>2]|0):0){f=a;b=g;e=a;break e}a=a+8|0;b=k[a>>2]|0;if((g|0)<(b|0)){f=a;e=a;break}}while(0);while(1){d=c+-8|0;a=k[d>>2]|0;if((g|0)<(a|0)){c=d;continue}if((g|0)!=(a|0))break;if((k[h>>2]|0)>(k[c+-4>>2]|0))c=d;else{a=g;break}}if(e>>>0>=d>>>0){y=e;continue b}j=e+4|0;l=k[j>>2]|0;k[f>>2]=a;a=c+-4|0;k[j>>2]=k[a>>2];k[d>>2]=b;k[a>>2]=l;a=e+8|0;c=d}}while(0);b=y+8|0;f:do if(b>>>0<c>>>0)while(1){i=k[g>>2]|0;f=g+4|0;j=b;while(1){b=k[j>>2]|0;if((b|0)>=(i|0)){if((b|0)!=(i|0))break;if((k[j+4>>2]|0)<=(k[f>>2]|0)){b=i;break}}j=j+8|0}d=c+-8|0;e=k[d>>2]|0;g:do if((e|0)<(i|0)){h=d;f=d}else while(1){if((e|0)==(i|0)?(k[c+-4>>2]|0)>(k[f>>2]|0):0){h=d;f=d;e=i;break g}c=d+-8|0;e=k[c>>2]|0;if((e|0)<(i|0)){h=c;f=c;c=d;break}else{h=d;d=c;c=h}}while(0);if(j>>>0>h>>>0){h=j;break f}d=j+4|0;i=k[d>>2]|0;k[j>>2]=e;c=c+-4|0;k[d>>2]=k[c>>2];k[f>>2]=b;k[c>>2]=i;b=j+8|0;c=h;g=(g|0)==(j|0)?h:g;a=a+1|0}else h=b;while(0);do if((h|0)!=(g|0)){e=k[g>>2]|0;f=k[h>>2]|0;if((e|0)>=(f|0)){if((e|0)!=(f|0))break;b=g+4|0;d=h+4|0;c=k[d>>2]|0;if((k[b>>2]|0)<=(c|0))break}else{c=h+4|0;b=g+4|0;d=c;c=k[c>>2]|0}k[h>>2]=e;k[d>>2]=k[b>>2];k[g>>2]=f;k[b>>2]=c;a=a+1|0}while(0);if(!a){a=Lb(y,h)|0;b=h+8|0;if(Lb(b,t)|0){x=83;break}if(a){y=b;continue}}j=h;if((j-l|0)>=(m-j|0)){x=87;break}Hb(y,h);y=h+8|0}if((x|0)==83){x=0;if(a){x=88;break}else{a=y;t=h;continue}}else if((x|0)==87){x=0;Hb(h+8|0,t);a=y;t=h;continue}}if((x|0)==4){c=t+-8|0;d=k[c>>2]|0;e=k[y>>2]|0;if((d|0)>=(e|0)){if((d|0)!=(e|0))return;a=y+4|0;b=k[a>>2]|0;if((k[s>>2]|0)<=(b|0))return}else{b=y+4|0;a=b;b=k[b>>2]|0}k[y>>2]=d;k[a>>2]=k[s>>2];k[c>>2]=e;k[s>>2]=b;return}else if((x|0)==9){Ib(y,y+8|0,n)|0;return}else if((x|0)==10){Jb(y,y+8|0,y+16|0,n)|0;return}else if((x|0)==11){Kb(y,y+8|0,y+16|0,y+24|0,n)|0;return}else if((x|0)==13){b=y+16|0;Ib(y,y+8|0,b)|0;a=y+24|0;if((a|0)==(t|0))return;while(1){h=k[a>>2]|0;e=k[b>>2]|0;if((h|0)>=(e|0)){if((h|0)==(e|0)?(u=a+4|0,v=k[u>>2]|0,w=b+4|0,(v|0)>(k[w>>2]|0)):0){d=u;c=w;i=v;x=18}}else{i=a+4|0;d=i;c=b+4|0;i=k[i>>2]|0;x=18}if((x|0)==18){x=0;k[a>>2]=e;k[d>>2]=k[c>>2];h:do if((b|0)!=(y|0)){f=b;while(1){b=f+-8|0;g=k[b>>2]|0;if((h|0)>=(g|0)){if((h|0)!=(g|0)){b=f;break h}e=f+-4|0;d=k[e>>2]|0;if((i|0)>(d|0))c=e;else{b=f;break h}}else{d=f+-4|0;c=d;d=k[d>>2]|0}k[f>>2]=g;k[f+4>>2]=d;if((b|0)==(y|0))break;else f=b}}while(0);k[b>>2]=h;k[c>>2]=i}b=a+8|0;if((b|0)==(t|0))break;else{s=a;a=b;b=s}}return}else if((x|0)==88)return}function Ib(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0;f=k[b>>2]|0;i=k[a>>2]|0;do if((f|0)<(i|0))d=1;else{if((f|0)==(i|0)?(k[b+4>>2]|0)>(k[a+4>>2]|0):0){d=1;break}d=0}while(0);g=k[c>>2]|0;do if((g|0)<(f|0))e=1;else{if((g|0)==(f|0)?(k[c+4>>2]|0)>(k[b+4>>2]|0):0){e=1;break}e=0}while(0);if(!d){if(!e){b=0;return b|0}h=b+4|0;i=k[h>>2]|0;k[b>>2]=g;g=c+4|0;k[h>>2]=k[g>>2];k[c>>2]=f;k[g>>2]=i;f=k[b>>2]|0;g=k[a>>2]|0;if((f|0)>=(g|0)){if((f|0)!=(g|0)){b=1;return b|0}d=a+4|0;e=k[d>>2]|0;if((k[h>>2]|0)<=(e|0)){b=1;return b|0}}else{e=a+4|0;d=e;e=k[e>>2]|0}k[a>>2]=f;k[d>>2]=k[h>>2];k[b>>2]=g;k[h>>2]=e;b=2;return b|0}d=a+4|0;h=k[d>>2]|0;if(e){k[a>>2]=g;b=c+4|0;k[d>>2]=k[b>>2];k[c>>2]=i;k[b>>2]=h;b=1;return b|0}k[a>>2]=f;f=b+4|0;k[d>>2]=k[f>>2];k[b>>2]=i;k[f>>2]=h;e=k[c>>2]|0;if((e|0)>=(i|0)){if((e|0)!=(i|0)){b=1;return b|0}d=c+4|0;if((k[d>>2]|0)<=(h|0)){b=1;return b|0}}else d=c+4|0;k[b>>2]=e;k[f>>2]=k[d>>2];k[c>>2]=i;k[d>>2]=h;b=2;return b|0}function Jb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0;l=Ib(a,b,c)|0;h=k[d>>2]|0;i=k[c>>2]|0;if((h|0)>=(i|0)){if((h|0)!=(i|0)){b=l;return b|0}f=d+4|0;g=c+4|0;e=k[g>>2]|0;if((k[f>>2]|0)>(e|0))j=g;else{b=l;return b|0}}else{e=c+4|0;f=d+4|0;j=e;e=k[e>>2]|0}k[c>>2]=h;k[j>>2]=k[f>>2];k[d>>2]=i;k[f>>2]=e;f=l+1|0;h=k[c>>2]|0;i=k[b>>2]|0;if((h|0)>=(i|0)){if((h|0)!=(i|0)){b=f;return b|0}g=b+4|0;e=k[g>>2]|0;if((k[j>>2]|0)>(e|0))d=g;else{b=f;return b|0}}else{e=b+4|0;d=e;e=k[e>>2]|0}k[b>>2]=h;k[d>>2]=k[j>>2];k[c>>2]=i;k[j>>2]=e;g=l+2|0;h=k[b>>2]|0;i=k[a>>2]|0;if((h|0)>=(i|0)){if((h|0)!=(i|0)){b=g;return b|0}f=a+4|0;e=k[f>>2]|0;if((k[d>>2]|0)<=(e|0)){b=g;return b|0}}else{e=a+4|0;f=e;e=k[e>>2]|0}k[a>>2]=h;k[f>>2]=k[d>>2];k[b>>2]=i;k[d>>2]=e;b=l+3|0;return b|0}function Kb(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0;n=Jb(a,b,c,d)|0;i=k[e>>2]|0;j=k[d>>2]|0;if((i|0)>=(j|0)){if((i|0)!=(j|0)){b=n;return b|0}g=e+4|0;h=d+4|0;f=k[h>>2]|0;if((k[g>>2]|0)>(f|0))m=h;else{b=n;return b|0}}else{f=d+4|0;g=e+4|0;m=f;f=k[f>>2]|0}k[d>>2]=i;k[m>>2]=k[g>>2];k[e>>2]=j;k[g>>2]=f;g=n+1|0;i=k[d>>2]|0;j=k[c>>2]|0;if((i|0)>=(j|0)){if((i|0)!=(j|0)){b=g;return b|0}h=c+4|0;f=k[h>>2]|0;if((k[m>>2]|0)>(f|0))l=h;else{b=g;return b|0}}else{f=c+4|0;l=f;f=k[f>>2]|0}k[c>>2]=i;k[l>>2]=k[m>>2];k[d>>2]=j;k[m>>2]=f;g=n+2|0;i=k[c>>2]|0;j=k[b>>2]|0;if((i|0)>=(j|0)){if((i|0)!=(j|0)){b=g;return b|0}h=b+4|0;f=k[h>>2]|0;if((k[l>>2]|0)>(f|0))e=h;else{b=g;return b|0}}else{f=b+4|0;e=f;f=k[f>>2]|0}k[b>>2]=i;k[e>>2]=k[l>>2];k[c>>2]=j;k[l>>2]=f;h=n+3|0;i=k[b>>2]|0;j=k[a>>2]|0;if((i|0)>=(j|0)){if((i|0)!=(j|0)){b=h;return b|0}g=a+4|0;f=k[g>>2]|0;if((k[e>>2]|0)<=(f|0)){b=h;return b|0}}else{f=a+4|0;g=f;f=k[f>>2]|0}k[a>>2]=i;k[g>>2]=k[e>>2];k[b>>2]=j;k[e>>2]=f;b=n+4|0;return b|0}function Lb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;switch(b-a>>3|0){case 2:{f=b+-8|0;g=k[f>>2]|0;h=k[a>>2]|0;if((g|0)>=(h|0)){if((g|0)!=(h|0)){a=1;return a|0}e=b+-4|0;c=a+4|0;d=k[c>>2]|0;if((k[e>>2]|0)<=(d|0)){a=1;return a|0}}else{d=a+4|0;c=d;e=b+-4|0;d=k[d>>2]|0}k[a>>2]=g;k[c>>2]=k[e>>2];k[f>>2]=h;k[e>>2]=d;a=1;return a|0}case 3:{Ib(a,a+8|0,b+-8|0)|0;a=1;return a|0}case 4:{Jb(a,a+8|0,a+16|0,b+-8|0)|0;a=1;return a|0}case 5:{Kb(a,a+8|0,a+16|0,a+24|0,b+-8|0)|0;a=1;return a|0}case 1:case 0:{a=1;return a|0}default:{e=a+16|0;Ib(a,a+8|0,e)|0;d=a+24|0;if((d|0)==(b|0)){a=1;return a|0}else c=0;while(1){l=k[d>>2]|0;h=k[e>>2]|0;if((l|0)>=(h|0)){if((l|0)==(h|0)?(n=d+4|0,o=k[n>>2]|0,p=e+4|0,(o|0)>(k[p>>2]|0)):0){f=p;g=n;m=o;q=15}}else{m=d+4|0;f=e+4|0;g=m;m=k[m>>2]|0;q=15}if((q|0)==15){q=0;k[d>>2]=h;k[g>>2]=k[f>>2];a:do if((e|0)!=(a|0)){j=e;while(1){e=j+-8|0;i=k[e>>2]|0;if((l|0)>=(i|0)){if((l|0)!=(i|0)){e=j;break a}h=j+-4|0;g=k[h>>2]|0;if((m|0)>(g|0))f=h;else{e=j;break a}}else{g=j+-4|0;f=g;g=k[g>>2]|0}k[j>>2]=i;k[j+4>>2]=g;if((e|0)==(a|0))break;else j=e}}while(0);k[e>>2]=l;k[f>>2]=m;c=c+1|0;if((c|0)==8)break}e=d+8|0;if((e|0)==(b|0)){c=1;q=24;break}else{m=d;d=e;e=m}}if((q|0)==24)return c|0;a=(d+8|0)==(b|0);return a|0}}return 0}function Mb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0;e=b;if(d>>>0<30|(b|0)==(c|0))return;l=(c-e|0)/12|0;m=(l>>>0)/3|0;j=b;f=e;g=e;e=0;h=d;i=0;while(1){if(i>>>0>=m>>>0){if((l-i|0)>>>0<m>>>0)break;o=k[j+4>>2]|0;n=o>>>0<h>>>0;f=n?g:f;e=n?i:e;h=n?o:h}g=j+12|0;if((g|0)==(c|0))break;else{j=g;i=i+1|0}}if(!e)return;e=k[f+4>>2]|0;if(e>>>0>((d>>>0)/9|0)>>>0)return;o=f+8|0;Mb(a,b,f,(k[o>>2]|0)+e|0);m=a+4|0;e=k[m>>2]|0;b=a+8|0;if((e|0)==(k[b>>2]|0)){n=k[a>>2]|0;i=e-n|0;j=i>>2;l=j+1|0;if(l>>>0>1073741823)xa(1340,1363,303,1438);if(j>>>0<536870911){e=i>>1;e=e>>>0<l>>>0?l:e;if(!e){e=0;g=0}else p=15}else{e=1073741823;p=15}if((p|0)==15){h=e<<2;h=(h|0)==0?1:h;g=_d(h)|0;a:do if(!g){while(1){g=k[35]|0;k[35]=g+0;if(!g)break;Xa[g&0]();g=_d(h)|0;if(g)break a}a=ya(4)|0;k[a>>2]=128;La(a|0,8,1)}while(0)}k[g+(j<<2)>>2]=k[f>>2];fe(g|0,n|0,i|0)|0;k[a>>2]=g;k[m>>2]=g+(l<<2);k[b>>2]=g+(e<<2);if(n)$d(n)}else{k[e>>2]=k[f>>2];k[m>>2]=e+4}Mb(a,f,c,d-(k[o>>2]|0)|0);return}function Nb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0;h=(b|0)==(a|0);i[b+12>>0]=h&1;if(h)return;while(1){f=b+8|0;g=k[f>>2]|0;d=g+12|0;if(i[d>>0]|0){c=37;break}h=g+8|0;e=k[h>>2]|0;c=k[e>>2]|0;if((c|0)==(g|0)){c=k[e+4>>2]|0;if(!c){c=7;break}c=c+12|0;if(i[c>>0]|0){c=7;break}i[d>>0]=1;i[e+12>>0]=(e|0)==(a|0)&1;i[c>>0]=1}else{if(!c){c=24;break}c=c+12|0;if(i[c>>0]|0){c=24;break}i[d>>0]=1;i[e+12>>0]=(e|0)==(a|0)&1;i[c>>0]=1}if((e|0)==(a|0)){c=37;break}else b=e}if((c|0)==7){if((k[g>>2]|0)==(b|0)){b=g;a=e}else{f=g+4|0;b=k[f>>2]|0;c=k[b>>2]|0;k[f>>2]=c;if(!c)c=e;else{k[c+8>>2]=g;c=k[h>>2]|0}d=b+8|0;k[d>>2]=c;c=k[h>>2]|0;if((k[c>>2]|0)==(g|0))k[c>>2]=b;else k[c+4>>2]=b;k[b>>2]=g;k[h>>2]=b;a=k[d>>2]|0}i[b+12>>0]=1;i[a+12>>0]=0;d=k[a>>2]|0;e=d+4|0;b=k[e>>2]|0;k[a>>2]=b;if(b)k[b+8>>2]=a;b=a+8|0;k[d+8>>2]=k[b>>2];c=k[b>>2]|0;if((k[c>>2]|0)==(a|0))k[c>>2]=d;else k[c+4>>2]=d;k[e>>2]=a;k[b>>2]=d;return}else if((c|0)==24){if((k[g>>2]|0)==(b|0)){d=b+4|0;c=k[d>>2]|0;k[g>>2]=c;if(!c)c=e;else{k[c+8>>2]=g;c=k[h>>2]|0}k[f>>2]=c;c=k[h>>2]|0;if((k[c>>2]|0)==(g|0))k[c>>2]=b;else k[c+4>>2]=b;k[d>>2]=g;k[h>>2]=b;e=k[f>>2]|0}else b=g;i[b+12>>0]=1;i[e+12>>0]=0;h=e+4|0;d=k[h>>2]|0;b=k[d>>2]|0;k[h>>2]=b;if(b)k[b+8>>2]=e;b=e+8|0;k[d+8>>2]=k[b>>2];c=k[b>>2]|0;if((k[c>>2]|0)==(e|0))k[c>>2]=d;else k[c+4>>2]=d;k[d>>2]=e;k[b>>2]=d;return}else if((c|0)==37)return}function Ob(a){a=a|0;var b=0,c=0,d=0,e=0;if(!a)return;Ob(k[a>>2]|0);Ob(k[a+4>>2]|0);b=k[a+20>>2]|0;c=b;if(b){d=a+24|0;e=k[d>>2]|0;if((e|0)!=(b|0))k[d>>2]=e+(~(((e+-20-c|0)>>>0)/20|0)*20|0);$d(b)}$d(a);return}function Pb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0.0,q=0,s=0.0,t=0.0,u=0,v=0,w=0,x=0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0.0;ca=r;r=r+48|0;g=b;$=ca+40|0;X=ca+32|0;Z=ca+16|0;Y=ca;aa=ca+8|0;k[Z>>2]=0;ba=Z+4|0;k[ba>>2]=0;k[Z+8>>2]=0;f=c-g|0;do if((c|0)!=(b|0)){if(((f|0)/20|0)>>>0>214748364)xa(1340,1363,303,1438);e=_d(f)|0;a:do if(!e){while(1){e=k[35]|0;k[35]=e+0;if(!e)break;Xa[e&0]();e=_d(f)|0;if(e)break a}ca=ya(4)|0;k[ca>>2]=128;La(ca|0,8,1)}while(0);if((b|0)!=(c|0)){g=c+-20-g|0;f=e;while(1){k[f>>2]=k[b>>2];k[f+4>>2]=k[b+4>>2];k[f+8>>2]=k[b+8>>2];k[f+12>>2]=k[b+12>>2];k[f+16>>2]=k[b+16>>2];b=b+20|0;if((b|0)==(c|0))break;else f=f+20|0}q=e+((((g>>>0)/20|0)+1|0)*20|0)|0;g=(q|0)==(e|0);if(g){Qb(e,q);h=g;break}c=(q-e|0)/20|0;o=0;do{h=e+(o*20|0)+8|0;i=k[h>>2]|0;j=e+(o*20|0)|0;l=k[j>>2]|0;if((i|0)>=(l|0)){if((i|0)==(l|0)?(u=e+(o*20|0)+12|0,v=k[u>>2]|0,w=e+(o*20|0)+4|0,x=k[w>>2]|0,(v|0)<(x|0)):0){b=u;f=w;m=v;n=x;_=19}}else{n=e+(o*20|0)+4|0;m=e+(o*20|0)+12|0;b=m;f=n;m=k[m>>2]|0;n=k[n>>2]|0;_=19}if((_|0)==19){_=0;k[j>>2]=i;k[f>>2]=m;k[h>>2]=l;k[b>>2]=n}o=o+1|0}while(o>>>0<c>>>0);W=g;Qb(e,q);if(W)h=W;else{S=Z+8|0;T=Y+4|0;U=$+4|0;V=X+4|0;R=e;while(1){b=k[ba>>2]|0;f=k[S>>2]|0;if((b|0)==(f|0)){Rb(Z,R);b=k[ba>>2]|0;f=k[S>>2]|0}else{k[b>>2]=k[R>>2];k[b+4>>2]=k[R+4>>2];b=b+8|0;k[ba>>2]=b}Q=R+8|0;if((b|0)==(f|0))Rb(Z,Q);else{k[b>>2]=k[Q>>2];k[b+4>>2]=k[R+12>>2];k[ba>>2]=b+8}P=R+16|0;h=k[P>>2]|0;O=k[a>>2]|0;b=k[O+(h*12|0)>>2]|0;h=O+(h*12|0)+4|0;if((b|0)!=(h|0)){f=b;while(1){b=f+16|0;g=f+20|0;do if((k[g>>2]|0)>=(d|0)){c=k[ba>>2]|0;if((c|0)==(k[S>>2]|0)){Rb(Z,b);break}else{k[c>>2]=k[b>>2];k[c+4>>2]=k[g>>2];k[ba>>2]=c+8;break}}while(0);b=k[f+4>>2]|0;if(!b)while(1){b=k[f+8>>2]|0;if((k[b>>2]|0)==(f|0))break;else f=b}else while(1){f=k[b>>2]|0;if(!f)break;else b=f}if((b|0)==(h|0))break;else f=b}}L=R+4|0;if((k[L>>2]|0)<(d|0))O=0;else O=(k[R+12>>2]|0)>=(d|0);M=R+8|0;N=R+12|0;K=R;b:do{if(!O){if((k[K+4>>2]|0)>=(d|0)?(k[K+12>>2]|0)>=(d|0):0)_=46}else _=46;c:do if((_|0)==46){_=0;b=k[R>>2]|0;f=k[K>>2]|0;g=(b|0)==(f|0);if(((g?(k[L>>2]|0)==(k[K+4>>2]|0):0)?(k[M>>2]|0)==(k[K+8>>2]|0):0)?(k[N>>2]|0)==(k[K+12>>2]|0):0)break;J=K+8|0;c=k[J>>2]|0;h=k[Q>>2]|0;if((((c|0)<(f|0)?c:f)|0)>=(((h|0)<(b|0)?b:h)|0))break b;if(g?(k[L>>2]|0)==(k[K+4>>2]|0):0)break;if((h|0)==(c|0)?(k[N>>2]|0)==(k[K+12>>2]|0):0)break;I=Y;k[I>>2]=0;k[I+4>>2]=0;if(!(Sb(R,K)|0))break;b=k[R>>2]|0;h=k[M>>2]|0;g=k[L>>2]|0;n=k[N>>2]|0;m=(h|0)<(b|0);j=m?h:b;m=m?b:h;G=(n|0)<(g|0);x=G?n:g;G=G?g:n;o=k[K>>2]|0;c=k[J>>2]|0;H=K+4|0;u=k[H>>2]|0;I=K+12|0;v=k[I>>2]|0;l=(c|0)<(o|0);i=l?c:o;l=l?o:c;F=(v|0)<(u|0);w=F?v:u;F=F?u:v;d:do if((m|0)>=(i|0)&(j|0)<=(l|0)){if(!((x|0)<=(F|0)&(G|0)>=(w|0))){_=79;break}f=(c|0)==(o|0);do if((h|0)==(b|0)){if(f){_=79;break d}do if((v|0)==(u|0))g=u;else{p=+(o|0);s=+(u|0);t=+(b|0)-p;if(t==0.0){g=u;break}g=~~(s+(+(v|0)-s)*t/(+(c|0)-p))}while(0);if(!((x|0)<=(g|0)&(G|0)>=(g|0))){_=79;break d}k[Y>>2]=b;k[T>>2]=g}else{if(!f){z=+(v-u|0);A=+(n-g|0);y=+(c-o|0);p=+(h-b|0);s=z*p;t=A*y;if(s==t){_=79;break d}da=+(o|0);C=+(u|0);E=A*+(b|0);B=+(g|0)*p;D=(y*E-z*da*p+y*(C*p)-y*B)/(t-s);E=(z*(A*da)+(z*B-A*(C*y))-z*E)/(s-t);b=~~D;o=~~E;b=((D<+(b|0))<<31>>31)+b|0;g=(v|0)==(u|0)?u:(n|0)==(g|0)?g:((E<+(o|0))<<31>>31)+o|0;if(!((x|0)<=(g|0)&(((j|0)>(b|0)|(m|0)<(b|0)|(G|0)<(g|0))^1))){_=79;break d}if(!((w|0)<=(g|0)&(((i|0)>(b|0)|(l|0)<(b|0)|(F|0)<(g|0))^1))){_=79;break d}k[Y>>2]=b;k[T>>2]=g;break}do if((n|0)!=(g|0)){p=+(b|0);s=+(g|0);t=+(o|0)-p;if(t==0.0)break;g=~~(s+(+(n|0)-s)*t/(+(h|0)-p))}while(0);if(!((w|0)<=(g|0)&(F|0)>=(g|0))){_=79;break d}k[Y>>2]=o;k[T>>2]=g;b=o}while(0);k[$>>2]=b;k[U>>2]=g;if(!(Tb($,R)|0)){_=79;break}k[X>>2]=b;k[V>>2]=g;if(!(Tb(X,K)|0)){_=79;break}}else _=79;while(0);e:do if((_|0)==79){_=0;f:do if(Sb(R,K)|0){b=k[R>>2]|0;i=k[M>>2]|0;n=k[L>>2]|0;v=k[N>>2]|0;u=(b|0)>(i|0);o=u?i:b;u=u?b:i;G=(n|0)>(v|0);F=G?v:n;G=G?n:v;j=k[K>>2]|0;g=k[J>>2]|0;l=k[H>>2]|0;m=k[I>>2]|0;h=(j|0)>(g|0);c=h?g:j;h=h?j:g;x=(l|0)>(m|0);w=x?m:l;x=x?l:m;if(!((u|0)>=(c|0)&(o|0)<=(h|0)))break;if(!((F|0)<=(x|0)&(G|0)>=(w|0)))break;f=(j|0)==(g|0);do if((b|0)==(i|0)){if(f)break f;do if((l|0)==(m|0))p=+(l|0);else{t=+(j|0);p=+(l|0);s=+(b|0)-t;if(s==0.0)break;p=p+(+(m|0)-p)*s/(+(g|0)-t)}while(0);g=~~p;g=((p<+(g|0))<<31>>31)+g|0;if(!((G|0)>=(g|0)&(F|0)<=(g|0)))break f;k[Y>>2]=b;k[T>>2]=g}else{if(!f){B=+(l|0);C=+(m|0)-B;D=+(n|0);E=+(v|0)-D;A=+(j|0);z=+(g|0)-A;y=+(b|0);p=+(i|0)-y;s=C*p;t=z*E;if(s==t)break f;da=y*E;y=p*D;D=(da*z-A*C*p+z*(B*p)-z*y)/(t-s);da=(y*C-B*z*E+C*(E*A)-C*da)/(s-t);b=~~D;g=~~da;b=((D<+(b|0))<<31>>31)+b|0;g=(l|0)==(m|0)?l:(n|0)==(v|0)?n:((da<+(g|0))<<31>>31)+g|0;if(!((F|0)<=(g|0)&(((o|0)>(b|0)|(u|0)<(b|0)|(G|0)<(g|0))^1)))break f;if(!((w|0)<=(g|0)&(((c|0)>(b|0)|(h|0)<(b|0)|(x|0)<(g|0))^1)))break f;k[Y>>2]=b;k[T>>2]=g;break}do if((n|0)==(v|0))p=+(n|0);else{t=+(b|0);p=+(n|0);s=+(j|0)-t;if(s==0.0)break;p=p+(+(v|0)-p)*s/(+(i|0)-t)}while(0);g=~~p;g=((p<+(g|0))<<31>>31)+g|0;if(!((x|0)>=(g|0)&(w|0)<=(g|0)))break f;k[Y>>2]=j;k[T>>2]=g;b=j}while(0);break e}while(0);break c}while(0);f=k[ba>>2]|0;if((f|0)==(k[S>>2]|0))Rb(Z,Y);else{k[f>>2]=b;k[f+4>>2]=g;k[ba>>2]=f+8}Ub($,(k[a>>2]|0)+((k[K+16>>2]|0)*12|0)|0,Y);Ub($,(k[a>>2]|0)+((k[P>>2]|0)*12|0)|0,Y)}while(0);K=K+20|0}while((K|0)!=(q|0));R=R+20|0;if((R|0)==(q|0)){h=W;break}}}}else{b=e;_=11}}else{b=0;_=11}while(0);if((_|0)==11){Qb(b,b);h=(b|0)==(b|0);e=b;q=b}n=k[Z>>2]|0;o=k[ba>>2]|0;Vb(n,o);u=(n|0)==(o|0);g:do if(!u){b=n+8|0;if((b|0)==(o|0))m=o;else{f=b;b=n;while(1){if((k[b>>2]|0)==(k[b+8>>2]|0)?(k[b+4>>2]|0)==(k[b+12>>2]|0):0){_=114;break g}b=f+8|0;if((b|0)==(o|0)){m=o;break}else{Z=f;f=b;b=Z}}}}else{b=n;_=114}while(0);if((_|0)==114)if((b|0)==(o|0))m=o;else{f=b+16|0;if((f|0)!=(o|0)){c=b;b=b+8|0;while(1){g=k[f>>2]|0;if((k[c>>2]|0)==(g|0)){b=b+12|0;if((k[c+4>>2]|0)==(k[b>>2]|0))b=c;else _=120}else{b=b+12|0;_=120}if((_|0)==120){_=0;Z=c+8|0;k[Z>>2]=g;k[c+12>>2]=k[b>>2];b=Z}g=f+8|0;if((g|0)==(o|0))break;else{Z=f;f=g;c=b;b=Z}}}m=b+8|0}if(!h){i=aa+4|0;j=e;f=n;do{l=k[j+16>>2]|0;b=j+8|0;c=k[b>>2]|0;h=k[j>>2]|0;if((c|0)>=(h|0))if((c|0)==(h|0))g=(k[j+12>>2]|0)<(k[j+4>>2]|0)?b:j;else g=j;else g=b;g=k[g>>2]|0;if((h|0)>=(c|0))if((h|0)==(c|0))b=(k[j+4>>2]|0)<(k[j+12>>2]|0)?b:j;else b=j;c=k[b>>2]|0;b=f;h:do if((b|0)!=(m|0))do{if((k[b>>2]|0)>=(g|0))break h;b=b+8|0;f=b}while((b|0)!=(m|0));while(0);b=f;i:do if((b|0)!=(m|0))do{g=k[b>>2]|0;if((g|0)>(c|0))break i;k[aa>>2]=g;k[i>>2]=k[b+4>>2];if(Tb(aa,j)|0)Ub($,(k[a>>2]|0)+(l*12|0)|0,b);b=b+8|0}while((b|0)!=(m|0));while(0);j=j+20|0}while((j|0)!=(q|0))}if(e)$d(e);if(!n){r=ca;return}if(!u)k[ba>>2]=o+(~((o+-8-n|0)>>>3)<<3);$d(n);r=ca;return}\\nfunction Jc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0;L=r;r=r+176|0;D=L+72|0;E=L;K=L+40|0;B=L+104|0;F=L+168|0;G=L+164|0;H=L+160|0;I=a+16|0;c=k[I>>2]|0;k[K>>2]=k[c>>2];k[K+4>>2]=k[c+4>>2];k[K+8>>2]=k[c+8>>2];k[K+12>>2]=k[c+12>>2];k[K+16>>2]=k[c+16>>2];k[K+20>>2]=k[c+20>>2];k[K+24>>2]=k[c+24>>2];h=c+28|0;l=k[K>>2]|0;J=K+8|0;if((l|0)==(k[J>>2]|0)?(t=K+4|0,e=k[t>>2]|0,(e|0)==(k[K+12>>2]|0)):0){u=a+20|0;d=k[u>>2]|0;v=a+24|0;f=k[v>>2]|0;if((d|0)!=(f|0)?(w=a+64|0,x=a+72|0,y=a+68|0,(k[d>>2]|0)==(l|0)):0){c=f;while(1){l=d+4|0;if((k[l>>2]|0)!=(e|0))break;s=k[d+8>>2]|0;e=c-d|0;if((e|0)>12){f=(e|0)/12|0;m=c+-12|0;q=d;C=k[q>>2]|0;q=k[q+4>>2]|0;n=m;o=k[n+4>>2]|0;p=d;k[p>>2]=k[n>>2];k[p+4>>2]=o;k[m>>2]=C;k[m+4>>2]=q;m=d+8|0;q=c+-4|0;C=k[m>>2]|0;k[m>>2]=k[q>>2];k[q>>2]=C;q=f+-1|0;do if((e|0)>=36?(C=f+-3|0,z=(C|0)/2|0,(C|0)>=-1):0){c=d+12|0;e=c;do if((q|0)>2){f=d+24|0;g=k[f>>2]|0;c=k[c>>2]|0;if((g|0)==(c|0)){if((k[d+28>>2]|0)>=(k[d+16>>2]|0)){j=1;break}}else if((g|0)>=(c|0)){j=1;break}e=f;j=2}else j=1;while(0);c=e;f=k[d>>2]|0;g=k[c>>2]|0;if((f|0)==(g|0)){if((k[l>>2]|0)<(k[c+4>>2]|0))break}else if((f|0)<(g|0))break;o=d;n=k[o>>2]|0;o=k[o+4>>2]|0;p=k[m>>2]|0;g=e;l=k[g+4>>2]|0;C=d;k[C>>2]=k[g>>2];k[C+4>>2]=l;k[m>>2]=k[c+8>>2];a:do if((z|0)>=(j|0)){m=c;c=j;while(1){f=c<<1|1;c=d+(f*12|0)|0;g=c;l=f+1|0;do if((l|0)<(q|0)){e=d+(l*12|0)|0;j=k[e>>2]|0;c=k[c>>2]|0;if((j|0)==(c|0)){if((k[d+(l*12|0)+4>>2]|0)>=(k[d+(f*12|0)+4>>2]|0))break}else if((j|0)>=(c|0))break;g=e;f=l}while(0);c=g;e=k[c>>2]|0;if((n|0)==(e|0)){if((o|0)<(k[c+4>>2]|0)){c=m;break a}}else if((n|0)<(e|0)){c=m;break a}j=g;l=k[j+4>>2]|0;C=m;k[C>>2]=k[j>>2];k[C+4>>2]=l;k[m+8>>2]=k[c+8>>2];if((z|0)<(f|0))break;else{m=c;c=f}}}while(0);C=c;k[C>>2]=n;k[C+4>>2]=o;k[c+8>>2]=p}while(0);c=k[v>>2]|0}k[v>>2]=c+-12;e=s;c=k[e+4>>2]|0;if(!c){d=s;while(1){c=k[d+8>>2]|0;if((k[c>>2]|0)==(d|0))break;else d=c}}else while(1){d=k[c>>2]|0;if(!d)break;else c=d}if((k[w>>2]|0)==(e|0))k[w>>2]=c;k[x>>2]=(k[x>>2]|0)+-1;Mc(k[y>>2]|0,s);$d(s);d=k[u>>2]|0;c=k[v>>2]|0;if((d|0)==(c|0))break;if((k[d>>2]|0)!=(k[K>>2]|0))break;e=k[t>>2]|0}c=k[I>>2]|0}d=c;f=c}else A=3;b:do if((A|0)==3){j=k[a+8>>2]|0;if((h|0)==(j|0)){d=c;f=c}else{g=k[K+4>>2]|0;f=c;while(1){e=k[f+28>>2]|0;if((e|0)==(k[f+36>>2]|0)){d=k[f+32>>2]|0;if(!((e|0)==(l|0)?(d|0)!=(k[f+40>>2]|0):0)){d=c;f=c;break b}}else{if((e|0)!=(l|0)){d=c;f=c;break b}d=k[f+32>>2]|0}if((d|0)!=(g|0)){d=c;f=c;break b}d=h+28|0;if((d|0)==(j|0)){d=c;f=c;h=j;break}else{f=h;h=d}}}}while(0);k[B>>2]=k[d>>2];k[B+4>>2]=k[d+4>>2];k[B+8>>2]=k[d+8>>2];k[B+12>>2]=k[d+12>>2];k[B+16>>2]=k[d+16>>2];k[B+20>>2]=k[d+20>>2];k[B+24>>2]=k[d+24>>2];C=B+28|0;k[C>>2]=k[d>>2];k[C+4>>2]=k[d+4>>2];k[C+8>>2]=k[d+8>>2];k[C+12>>2]=k[d+12>>2];k[C+16>>2]=k[d+16>>2];k[C+20>>2]=k[d+20>>2];k[C+24>>2]=k[d+24>>2];C=a+68|0;c=k[C>>2]|0;c:do if(!c)d=C;else{e=C;while(1){d=c;while(1){if(!(cd(d+16|0,B)|0))break;c=k[d+4>>2]|0;if(!c){d=e;break c}else d=c}c=k[d>>2]|0;if(!c)break;else e=d}}while(0);if((f|0)==(h|0)){r=L;return}m=D+24|0;n=a+80|0;o=a+36|0;p=E+32|0;q=a+64|0;s=K+4|0;t=K+12|0;u=D+24|0;v=E+32|0;w=K+8|0;x=K+24|0;y=D+24|0;z=E+32|0;A=D+24|0;B=E+32|0;c=f;do{k[K>>2]=k[c>>2];k[K+4>>2]=k[c+4>>2];k[K+8>>2]=k[c+8>>2];k[K+12>>2]=k[c+12>>2];k[K+16>>2]=k[c+16>>2];k[K+20>>2]=k[c+20>>2];k[K+24>>2]=k[c+24>>2];e=d;do if((e|0)==(C|0)){e=d;c=k[e>>2]|0;if(!c)while(1){c=k[e+8>>2]|0;if((k[c>>2]|0)==(e|0))e=c;else break}else while(1){e=k[c+4>>2]|0;if(!e)break;else c=e}l=c+44|0;k[F>>2]=d;k[D>>2]=k[F>>2];e=dd(a,l,l,K,D,b)|0;d=e;i[m>>0]=1;if(Nc(n,c+16|0,l,K,D)|0){k[E>>2]=k[D>>2];k[E+4>>2]=k[D+4>>2];k[E+8>>2]=k[D+8>>2];k[E+12>>2]=k[D+12>>2];k[E+16>>2]=k[D+16>>2];k[E+20>>2]=k[D+20>>2];k[E+24>>2]=k[D+24>>2];k[E+28>>2]=k[D+28>>2];k[p>>2]=d;l=Oc(o,E)|0;k[e+72>>2]=l}}else{l=e+16|0;if((e|0)==(k[q>>2]|0)){k[G>>2]=d;k[D>>2]=k[G>>2];c=dd(a,l,l,K,D,b)|0;if(!((k[K>>2]|0)==(k[J>>2]|0)?(k[s>>2]|0)==(k[t>>2]|0):0)){g=K;f=k[g>>2]|0;g=k[g+4>>2]|0;N=w;M=k[N+4>>2]|0;j=K;k[j>>2]=k[N>>2];k[j+4>>2]=M;j=w;k[j>>2]=f;k[j+4>>2]=g;k[x>>2]=k[x>>2]^32}i[u>>0]=1;if(Nc(n,K,l,e+44|0,D)|0){k[E>>2]=k[D>>2];k[E+4>>2]=k[D+4>>2];k[E+8>>2]=k[D+8>>2];k[E+12>>2]=k[D+12>>2];k[E+16>>2]=k[D+16>>2];k[E+20>>2]=k[D+20>>2];k[E+24>>2]=k[D+24>>2];k[E+28>>2]=k[D+28>>2];k[v>>2]=d;N=Oc(o,E)|0;k[e+72>>2]=N}d=c;break}j=e+44|0;g=e+72|0;c=k[g>>2]|0;if(c){i[c+24>>0]=0;k[g>>2]=0}c=d;e=k[c>>2]|0;if(!e)while(1){e=k[c+8>>2]|0;if((k[e>>2]|0)==(c|0))c=e;else{c=e;break}}else{c=e;while(1){e=k[c+4>>2]|0;if(!e)break;else c=e}}N=c+44|0;k[H>>2]=d;k[D>>2]=k[H>>2];e=dd(a,N,l,K,D,b)|0;f=e;i[y>>0]=1;if(Nc(n,c+16|0,N,K,D)|0){k[E>>2]=k[D>>2];k[E+4>>2]=k[D+4>>2];k[E+8>>2]=k[D+8>>2];k[E+12>>2]=k[D+12>>2];k[E+16>>2]=k[D+16>>2];k[E+20>>2]=k[D+20>>2];k[E+24>>2]=k[D+24>>2];k[E+28>>2]=k[D+28>>2];k[z>>2]=f;N=Oc(o,E)|0;k[e+72>>2]=N}if(!((k[K>>2]|0)==(k[J>>2]|0)?(k[s>>2]|0)==(k[t>>2]|0):0)){M=K;e=k[M>>2]|0;M=k[M+4>>2]|0;O=w;c=k[O+4>>2]|0;N=K;k[N>>2]=k[O>>2];k[N+4>>2]=c;N=w;k[N>>2]=e;k[N+4>>2]=M;k[x>>2]=k[x>>2]^32}i[A>>0]=1;if(Nc(n,K,l,j,D)|0){k[E>>2]=k[D>>2];k[E+4>>2]=k[D+4>>2];k[E+8>>2]=k[D+8>>2];k[E+12>>2]=k[D+12>>2];k[E+16>>2]=k[D+16>>2];k[E+20>>2]=k[D+20>>2];k[E+24>>2]=k[D+24>>2];k[E+28>>2]=k[D+28>>2];k[B>>2]=d;O=Oc(o,E)|0;k[g>>2]=O}d=f}while(0);c=(k[I>>2]|0)+28|0;k[I>>2]=c}while((c|0)!=(h|0));r=L;return}function Kc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,q=0.0,s=0.0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0;J=r;r=r+144|0;E=J+72|0;F=J+32|0;I=J;H=J+104|0;G=a+36|0;h=k[k[G>>2]>>2]|0;A=k[h+40>>2]|0;B=A;y=B+44|0;k[I>>2]=k[y>>2];k[I+4>>2]=k[y+4>>2];k[I+8>>2]=k[y+8>>2];k[I+12>>2]=k[y+12>>2];k[I+16>>2]=k[y+16>>2];k[I+20>>2]=k[y+20>>2];k[I+24>>2]=k[y+24>>2];y=k[B+76>>2]|0;z=A;c=k[z>>2]|0;if(!c){d=z;while(1){c=k[d+8>>2]|0;if((k[c>>2]|0)==(d|0))d=c;else break}}else while(1){d=k[c+4>>2]|0;if(!d)break;else c=d}C=c;d=c+16|0;D=c+72|0;w=D+4|0;x=k[w>>2]|0;k[H>>2]=k[d>>2];k[H+4>>2]=k[d+4>>2];k[H+8>>2]=k[d+8>>2];k[H+12>>2]=k[d+12>>2];k[H+16>>2]=k[d+16>>2];k[H+20>>2]=k[d+20>>2];k[H+24>>2]=k[d+24>>2];d=k[H>>2]|0;u=H+8|0;do if((d|0)==(k[u>>2]|0)?(g=k[H+4>>2]|0,(g|0)==(k[H+12>>2]|0)):0){e=k[I+8>>2]|0;if((k[I>>2]|0)==(e|0)?(k[I+4>>2]|0)==(k[I+12>>2]|0):0)break;f=I+8|0;if((e|0)==(d|0)?(k[I+12>>2]|0)==(g|0):0){o=I;n=k[o>>2]|0;o=k[o+4>>2]|0;l=f;m=k[l+4>>2]|0;t=I;k[t>>2]=k[l>>2];k[t+4>>2]=m;t=f;k[t>>2]=n;k[t+4>>2]=o;t=I+24|0;k[t>>2]=k[t>>2]^32}}while(0);m=c+44|0;k[m>>2]=k[I>>2];k[m+4>>2]=k[I+4>>2];k[m+8>>2]=k[I+8>>2];k[m+12>>2]=k[I+12>>2];k[m+16>>2]=k[I+16>>2];k[m+20>>2]=k[I+20>>2];k[m+24>>2]=k[I+24>>2];s=+p[h+8>>3];q=+p[h+16>>3];m=b+16|0;d=k[m>>2]|0;n=b+20|0;e=k[n>>2]|0;if(d>>>0>=e>>>0){o=b+12|0;t=k[o>>2]|0;f=t;j=d-f|0;l=(j|0)/24|0;h=l+1|0;if(h>>>0>178956970)xa(1340,1363,303,1438);d=(e-f|0)/24|0;if(d>>>0<89478485){g=d<<1;g=g>>>0<h>>>0?h:g}else g=178956970;f=g*24|0;f=(f|0)==0?1:f;e=_d(f)|0;a:do if(!e){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();e=_d(f)|0;if(e)break a}J=ya(4)|0;k[J>>2]=128;La(J|0,8,1)}while(0);p[e+(l*24|0)>>3]=s;p[e+(l*24|0)+8>>3]=q;k[e+(l*24|0)+16>>2]=0;k[e+(l*24|0)+20>>2]=0;d=e+(h*24|0)|0;l=e+((((j|0)/-24|0)+l|0)*24|0)|0;fe(l|0,t|0,j|0)|0;k[o>>2]=l;k[m>>2]=d;k[n>>2]=e+(g*24|0);if(t){$d(t);d=k[m>>2]|0}}else{p[d>>3]=s;p[d+8>>3]=q;k[d+16>>2]=0;k[d+20>>2]=0;d=(k[m>>2]|0)+24|0;k[m>>2]=d}t=d+-24|0;k[x+4>>2]=t;k[y+4>>2]=t;o=k[H>>2]|0;l=k[u>>2]|0;h=(o|0)==(l|0);if(h)f=(k[H+4>>2]|0)!=(k[H+12>>2]|0);else f=1;m=k[I>>2]|0;n=k[I+8>>2]|0;j=(m|0)==(n|0);do if(j){e=k[I+4>>2]|0;d=(e|0)!=(k[I+12>>2]|0);if(!(d|f^1)){if((o|0)==(m|0)?(k[H+4>>2]|0)==(e|0):0){g=1;break}if((l|0)==(m|0)?(k[H+12>>2]|0)==(e|0):0)g=1;else v=36}else v=31}else{d=1;v=31}while(0);do if((v|0)==31)if(!(f|d^1)){if((m|0)==(o|0)?(k[I+4>>2]|0)==(k[H+4>>2]|0):0){g=1;break}if((n|0)==(o|0)?(k[I+12>>2]|0)==(k[H+4>>2]|0):0)g=1;else v=36}else v=36;while(0);if((v|0)==36){if(h)d=(k[H+4>>2]|0)!=(k[H+12>>2]|0);else d=1;if(j)e=(k[I+4>>2]|0)!=(k[I+12>>2]|0);else e=1;g=d^e^1}if(h)f=(k[H+4>>2]|0)!=(k[H+12>>2]|0);else f=1;do if(j){e=k[I+4>>2]|0;d=(e|0)!=(k[I+12>>2]|0);if(!(d|f^1)){if((o|0)==(m|0)?(k[H+4>>2]|0)==(e|0):0){d=0;break}if((l|0)==(m|0))d=(k[H+12>>2]|0)!=(e|0);else d=1}else v=49}else{d=1;v=49}while(0);do if((v|0)==49)if(!(f|d^1)){if((m|0)==(o|0)?(k[I+4>>2]|0)==(k[H+4>>2]|0):0){d=0;break}if((n|0)==(o|0))d=(k[I+12>>2]|0)!=(k[H+4>>2]|0);else d=1}else d=1;while(0);l=b+24|0;e=g&1;e=d?e|2:e;k[E>>2]=0;k[E+4>>2]=0;k[E+8>>2]=0;k[E+12>>2]=0;k[E+16>>2]=0;k[E+20>>2]=e;f=b+28|0;d=k[f>>2]|0;g=b+32|0;if(d>>>0<(k[g>>2]|0)>>>0){k[d>>2]=k[E>>2];k[d+4>>2]=k[E+4>>2];k[d+8>>2]=k[E+8>>2];k[d+12>>2]=k[E+12>>2];k[d+16>>2]=k[E+16>>2];k[d+20>>2]=k[E+20>>2];j=(k[f>>2]|0)+24|0;k[f>>2]=j}else{bd(l,E);j=k[f>>2]|0}h=j+-24|0;k[h>>2]=(k[b>>2]|0)+((k[H+16>>2]|0)*12|0);k[F>>2]=0;k[F+4>>2]=0;k[F+8>>2]=0;k[F+12>>2]=0;k[F+16>>2]=0;k[F+20>>2]=e;if(j>>>0<(k[g>>2]|0)>>>0){k[j>>2]=k[F>>2];k[j+4>>2]=k[F+4>>2];k[j+8>>2]=k[F+8>>2];k[j+12>>2]=k[F+12>>2];k[j+16>>2]=k[F+16>>2];k[j+20>>2]=k[F+20>>2];d=(k[f>>2]|0)+24|0;k[f>>2]=d}else{bd(l,F);d=k[f>>2]|0}v=d+-24|0;k[v>>2]=(k[b>>2]|0)+((k[I+16>>2]|0)*12|0);k[j+-16>>2]=v;k[d+-16>>2]=h;k[d+-20>>2]=t;k[x+16>>2]=h;k[j+-12>>2]=x;j=k[x+8>>2]|0;k[j+12>>2]=y;k[y+16>>2]=j;j=k[y+8>>2]|0;k[j+12>>2]=v;k[d+-8>>2]=j;k[w>>2]=h;j=a+64|0;d=k[B+4>>2]|0;if(!d){e=z;while(1){d=k[e+8>>2]|0;if((k[d>>2]|0)==(e|0))break;else e=d}}else while(1){e=k[d>>2]|0;if(!e)break;else d=e}if((k[j>>2]|0)==(B|0))k[j>>2]=d;e=a+72|0;k[e>>2]=(k[e>>2]|0)+-1;Mc(k[a+68>>2]|0,z);$d(A);e=k[G>>2]|0;g=k[e>>2]|0;h=a+40|0;d=k[h>>2]|0;f=d-e|0;if((f|0)>4){d=d+-4|0;k[e>>2]=k[d>>2];k[d>>2]=g;Lc(e,(f>>2)+-1|0,e);d=k[h>>2]|0}k[h>>2]=d+-4;B=g+4|0;A=k[g>>2]|0;k[A+4>>2]=k[B>>2];k[k[B>>2]>>2]=A;B=a+60|0;k[B>>2]=(k[B>>2]|0)+-1;$d(g);if((c|0)!=(k[j>>2]|0)){d=k[D>>2]|0;if(d){i[d+24>>0]=0;k[D>>2]=0}d=k[c>>2]|0;if(!d){e=c;while(1){d=k[e+8>>2]|0;if((k[d>>2]|0)==(e|0))e=d;else break}}else while(1){e=k[d+4>>2]|0;if(!e)break;else d=e}i[E+24>>0]=1;if(Nc(a+80|0,d+16|0,H,I,E)|0){k[F>>2]=k[E>>2];k[F+4>>2]=k[E+4>>2];k[F+8>>2]=k[E+8>>2];k[F+12>>2]=k[E+12>>2];k[F+16>>2]=k[E+16>>2];k[F+20>>2]=k[E+20>>2];k[F+24>>2]=k[E+24>>2];k[F+28>>2]=k[E+28>>2];k[F+32>>2]=C;C=Oc(G,F)|0;k[D>>2]=C}}d=k[c+4>>2]|0;if(!d)while(1){d=k[c+8>>2]|0;if((k[d>>2]|0)==(c|0)){c=d;break}else c=d}else{c=d;while(1){d=k[c>>2]|0;if(!d)break;else c=d}}if((c|0)==(a+68|0)){r=J;return}d=c+72|0;e=k[d>>2]|0;if(e){i[e+24>>0]=0;k[d>>2]=0}i[E+24>>0]=1;if(Nc(a+80|0,H,I,c+44|0,E)|0){k[F>>2]=k[E>>2];k[F+4>>2]=k[E+4>>2];k[F+8>>2]=k[E+8>>2];k[F+12>>2]=k[E+12>>2];k[F+16>>2]=k[E+16>>2];k[F+20>>2]=k[E+20>>2];k[F+24>>2]=k[E+24>>2];k[F+28>>2]=k[E+28>>2];k[F+32>>2]=c;a=Oc(G,F)|0;k[d>>2]=a}r=J;return}function Lc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0.0,h=0.0,i=0,j=0,l=0,m=0.0,n=0,o=0,q=0;d=c-a|0;if((b|0)<2)return;q=(b+-2|0)/2|0;if((q|0)<(d>>2|0))return;l=d>>1|1;f=a+(l<<2)|0;d=f;e=l+1|0;do if((e|0)<(b|0)){j=a+(e<<2)|0;f=k[f>>2]|0;i=k[j>>2]|0;g=+p[i+24>>3];h=+p[f+24>>3];if(g!=h){if(!(g<h)){e=l;break}}else if(!(+p[i+16>>3]<+p[f+16>>3])){e=l;break}d=j}else e=l;while(0);f=k[d>>2]|0;i=k[c>>2]|0;g=+p[i+24>>3];h=+p[f+24>>3];o=i;if(g!=h){if(g<h)return}else if(+p[i+16>>3]<+p[f+16>>3])return;n=i+16|0;k[c>>2]=k[d>>2];a:do if((q|0)>=(e|0)){m=+p[i+24>>3];while(1){e=e<<1|1;i=a+(e<<2)|0;f=i;c=e+1|0;do if((c|0)<(b|0)){l=a+(c<<2)|0;i=k[i>>2]|0;j=k[l>>2]|0;g=+p[j+24>>3];h=+p[i+24>>3];if(g!=h){if(!(g<h))break}else if(!(+p[j+16>>3]<+p[i+16>>3]))break;f=l;e=c}while(0);i=k[f>>2]|0;g=+p[i+24>>3];if(m!=g){if(m<g)break a}else if(+p[n>>3]<+p[i+16>>3])break a;k[d>>2]=k[f>>2];if((q|0)<(e|0)){d=f;break}else d=f}}while(0);k[d>>2]=o;return}function Mc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0;d=k[b>>2]|0;if(d){c=k[b+4>>2]|0;if(!c){e=b;c=b;h=6}else while(1){d=k[c>>2]|0;if(!d){h=4;break}else c=d}}else{c=b;h=4}if((h|0)==4){d=k[c+4>>2]|0;if(!d){l=c+8|0;e=c;d=0;m=0;j=c}else{e=c;h=6}}if((h|0)==6){l=e+8|0;k[d+8>>2]=k[l>>2];m=1;j=c}c=k[l>>2]|0;f=k[c>>2]|0;if((f|0)==(e|0)){k[c>>2]=d;if((e|0)==(a|0)){a=d;f=0}else f=k[c+4>>2]|0}else k[c+4>>2]=d;g=e+12|0;h=(i[g>>0]|0)!=0;if((e|0)!=(b|0)){o=b+8|0;c=k[o>>2]|0;k[l>>2]=c;if((k[k[o>>2]>>2]|0)==(b|0))k[c>>2]=e;else k[c+4>>2]=e;c=k[b>>2]|0;k[j>>2]=c;k[c+8>>2]=e;c=k[b+4>>2]|0;k[e+4>>2]=c;if(c)k[c+8>>2]=e;i[g>>0]=i[b+12>>0]|0;a=(a|0)==(b|0)?e:a}if(!(h&(a|0)!=0))return;if(m){i[d+12>>0]=1;return}else g=f;while(1){f=g+8|0;h=k[f>>2]|0;c=g+12|0;d=(i[c>>0]|0)!=0;if((k[h>>2]|0)==(g|0)){if(!d){i[c>>0]=1;i[h+12>>0]=0;e=g+4|0;c=k[e>>2]|0;k[h>>2]=c;if(c)k[c+8>>2]=h;d=h+8|0;k[f>>2]=k[d>>2];c=k[d>>2]|0;if((k[c>>2]|0)==(h|0))k[c>>2]=g;else k[c+4>>2]=g;k[e>>2]=h;k[d>>2]=g;a=(a|0)==(h|0)?g:a;g=k[h>>2]|0}e=k[g>>2]|0;f=(e|0)==0;if(!f?(i[e+12>>0]|0)==0:0){c=e;a=g;h=76;break}c=g+4|0;d=k[c>>2]|0;if((d|0)!=0?(i[d+12>>0]|0)==0:0){h=67;break}i[g+12>>0]=0;c=k[g+8>>2]|0;d=c+12|0;if((c|0)==(a|0)|(i[d>>0]|0)==0){h=64;break}o=k[c+8>>2]|0;c=(k[o>>2]|0)==(c|0)?o+4|0:o}else{if(d)f=g;else{i[c>>0]=1;i[h+12>>0]=0;o=h+4|0;e=k[o>>2]|0;c=k[e>>2]|0;k[o>>2]=c;if(c)k[c+8>>2]=h;c=h+8|0;k[e+8>>2]=k[c>>2];d=k[c>>2]|0;if((k[d>>2]|0)==(h|0))k[d>>2]=e;else k[d+4>>2]=e;k[e>>2]=h;k[c>>2]=e;f=k[g>>2]|0;a=(a|0)==(f|0)?g:a;f=k[f+4>>2]|0}c=k[f>>2]|0;if((c|0)!=0?(n=c+12|0,(i[n>>0]|0)==0):0){h=37;break}c=k[f+4>>2]|0;if((c|0)!=0?(i[c+12>>0]|0)==0:0){a=c;c=f;h=46;break}i[f+12>>0]=0;c=k[f+8>>2]|0;if((c|0)==(a|0)){h=35;break}if(!(i[c+12>>0]|0)){a=c;h=35;break}o=k[c+8>>2]|0;c=(k[o>>2]|0)==(c|0)?o+4|0:o}g=k[c>>2]|0}do if((h|0)==35){i[a+12>>0]=1;return}else if((h|0)==37){a=k[f+4>>2]|0;if(!a)a=n;else{if(!(i[a+12>>0]|0)){c=f;h=46;break}a=c+12|0}i[a>>0]=1;i[f+12>>0]=0;e=c+4|0;a=k[e>>2]|0;k[f>>2]=a;if(a)k[a+8>>2]=f;a=f+8|0;k[c+8>>2]=k[a>>2];d=k[a>>2]|0;if((k[d>>2]|0)==(f|0))k[d>>2]=c;else k[d+4>>2]=c;k[e>>2]=f;k[a>>2]=c;a=f;h=46}else if((h|0)==64){i[d>>0]=1;return}else if((h|0)==67){if(!f){if(!(i[e+12>>0]|0)){c=e;a=g;h=76;break}d=g+4|0;c=d;d=k[d>>2]|0}i[d+12>>0]=1;i[g+12>>0]=0;a=k[d>>2]|0;k[c>>2]=a;if(a)k[a+8>>2]=g;a=g+8|0;k[d+8>>2]=k[a>>2];c=k[a>>2]|0;if((k[c>>2]|0)==(g|0))k[c>>2]=d;else k[c+4>>2]=d;k[d>>2]=g;k[a>>2]=d;c=g;a=d;h=76}while(0);if((h|0)==46){e=k[c+8>>2]|0;o=e+12|0;i[c+12>>0]=i[o>>0]|0;i[o>>0]=1;i[a+12>>0]=1;o=e+4|0;d=k[o>>2]|0;a=k[d>>2]|0;k[o>>2]=a;if(a)k[a+8>>2]=e;a=e+8|0;k[d+8>>2]=k[a>>2];c=k[a>>2]|0;if((k[c>>2]|0)==(e|0))k[c>>2]=d;else k[c+4>>2]=d;k[d>>2]=e;k[a>>2]=d;return}else if((h|0)==76){f=k[a+8>>2]|0;d=f+12|0;i[a+12>>0]=i[d>>0]|0;i[d>>0]=1;i[c+12>>0]=1;d=k[f>>2]|0;e=d+4|0;a=k[e>>2]|0;k[f>>2]=a;if(a)k[a+8>>2]=f;a=f+8|0;k[d+8>>2]=k[a>>2];c=k[a>>2]|0;if((k[c>>2]|0)==(f|0))k[c>>2]=d;else k[c+4>>2]=d;k[e>>2]=f;k[a>>2]=d;return}}function Nc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,l=0,m=0.0,n=0.0,o=0.0,q=0.0,s=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,M=0,N=0.0,O=0.0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0.0,ia=0,ja=0.0,ka=0.0,la=0,ma=0.0,na=0.0,oa=0.0,pa=0.0,qa=0.0,ra=0.0,sa=0.0,ta=0.0,ua=0.0,va=0.0,wa=0.0,xa=0.0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0;gb=r;r=r+11200|0;Na=gb+10416|0;Oa=gb+9376|0;Ma=gb+8336|0;Ea=gb+8072|0;Fa=gb+7812|0;Xa=gb+7552|0;Ga=gb+7292|0;Ha=gb+7032|0;Ya=gb+6772|0;Ia=gb+792|0;Ja=gb+6512|0;Za=gb+6252|0;Ka=gb+5992|0;La=gb+528|0;Wa=gb+5732|0;Pa=gb+5472|0;Qa=gb+5212|0;Ra=gb+4952|0;Sa=gb+4692|0;Ua=gb+264|0;Va=gb;_a=gb+3912|0;Ta=gb+3132|0;Z=gb+2872|0;_=gb+2612|0;$=gb+2352|0;aa=gb+2092|0;ca=gb+1832|0;ba=gb+1572|0;fa=gb+1312|0;ga=gb+1052|0;U=k[b>>2]|0;$a=b+8|0;T=k[$a>>2]|0;if((U|0)==(T|0))f=(k[b+4>>2]|0)!=(k[b+12>>2]|0);else f=1;V=k[c>>2]|0;cb=c+8|0;S=k[cb>>2]|0;if((V|0)==(S|0))g=(k[c+4>>2]|0)!=(k[c+12>>2]|0);else g=1;ea=k[d>>2]|0;fb=d+8|0;da=k[fb>>2]|0;if((ea|0)==(da|0))h=(k[d+4>>2]|0)!=(k[d+12>>2]|0);else h=1;do if(!f){if(g){if(h)if((k[c+16>>2]|0)==(k[d+16>>2]|0)){e=0;r=gb;return e|0}else{Rc(a+4|0,b,c,d,1,e);break}if(((V|0)==(U|0)?((S|0)==(ea|0)?(k[c+4>>2]|0)==(k[b+4>>2]|0):0):0)?(k[c+12>>2]|0)==(k[d+4>>2]|0):0){e=0;r=gb;return e|0}Qc(a+4|0,b,d,c,2,e);break}D=b+4|0;f=k[D>>2]|0;G=c+4|0;j=k[G>>2]|0;P=d+4|0;l=k[P>>2]|0;g=Pc(U,f,V,j,ea,l)|0;if(h){f=Pc(U,f,V,j,da,k[d+12>>2]|0)|0;if((V|0)<(U|0)){if((g|0)!=-1&(f|0)!=-1){e=0;r=gb;return e|0}}else if((f|0)!=-1){e=0;r=gb;return e|0}Qc(a+4|0,b,c,d,3,e);break}if((g|0)!=-1){e=0;r=gb;return e|0}v=+(U|0);w=+(V|0);O=v-w;q=+(ea|0);ha=w-q;s=+(f|0);n=+(j|0);ja=s-n;u=+(l|0);ka=n-u;Ba=((V|0)<0)<<31>>31;g=be(U|0,((U|0)<0)<<31>>31|0,V|0,Ba|0)|0;Ca=L;Ba=be(V|0,Ba|0,ea|0,((ea|0)<0)<<31>>31|0)|0;h=L;da=((j|0)<0)<<31>>31;za=be(f|0,((f|0)<0)<<31>>31|0,j|0,da|0)|0;Aa=L;da=be(j|0,da|0,l|0,((l|0)<0)<<31>>31|0)|0;ea=L;Da=(Ca|0)<0;la=be(0,0,g|0,Ca|0)|0;f=Da?L:Ca;Ca=(h|0)<0;j=be(0,0,Ba|0,h|0)|0;h=Ca?L:h;l=(Aa|0)<0;ya=be(0,0,za|0,Aa|0)|0;Aa=l?L:Aa;a=(ea|0)<0;Y=be(0,0,da|0,ea|0)|0;f=ne((a?Y:da)|0,(a?L:ea)|0,(Da?la:g)|0,f|0)|0;g=L;h=ne((l?ya:za)|0,Aa|0,(Ca?j:Ba)|0,h|0)|0;j=L;l=Ca^l;do if(Da^a){if(!l){a=ge(f|0,g|0,h|0,j|0)|0;m=-(+(a>>>0)+4294967296.0*+(L>>>0));break}if(g>>>0>j>>>0|(g|0)==(j|0)&f>>>0>h>>>0){a=be(f|0,g|0,h|0,j|0)|0;m=-(+(a>>>0)+4294967296.0*+(L>>>0));break}else{a=be(h|0,j|0,f|0,g|0)|0;m=+(a>>>0)+4294967296.0*+(L>>>0);break}}else{if(l){a=ge(f|0,g|0,h|0,j|0)|0;m=+(a>>>0)+4294967296.0*+(L>>>0);break}if(g>>>0<j>>>0|(g|0)==(j|0)&f>>>0<h>>>0){a=be(h|0,j|0,f|0,g|0)|0;m=-(+(a>>>0)+4294967296.0*+(L>>>0));break}else{a=be(f|0,g|0,h|0,j|0)|0;m=+(a>>>0)+4294967296.0*+(L>>>0);break}}while(0);ma=.5/m;x=w+q;o=s+n;y=n+u;C=v-q;B=s-u;z=O*(v+w);m=ka*z;if(m<0.0){n=0.0-m;if(m>0.0){m=(m*2.0+0.0)/n;m=m<0.0?-m:m}else m=2.0;u=0.0;v=0.0;q=m+1.0}else{u=m+0.0;v=3.0;n=0.0;q=0.0}A=ja*o;m=ka*A;do if(m<0.0){o=n-m;if(m>0.0|n<0.0){m=(m*2.0+n*q)/o;m=m<0.0?-m:m}else m=q<2.0?2.0:q;n=o;q=m+1.0}else{o=m+u;if(u<0.0?m>0.0|u>0.0:0){v=(u*v-m*2.0)/o;u=o;v=(v<0.0?-v:v)+1.0;break}u=o;v=v<2.0?3.0:v+1.0}while(0);w=ha*x;o=ja*w;do if(o<0.0){s=u-o;if(o>0.0|u<0.0){m=(o*2.0+u*v)/s;m=m<0.0?-m:m}else m=v<2.0?2.0:v;v=m+1.0}else{m=o+n;if(n<0.0?o>0.0|n>0.0:0){q=(n*q-o*2.0)/m;n=m;q=(q<0.0?-q:q)+1.0;s=u;break}n=m;q=q<2.0?3.0:q+1.0;s=u}while(0);y=ka*y;o=ja*y;do if(o<0.0){u=s-o;if(o>0.0|s<0.0){m=(o*2.0+s*v)/u;m=m<0.0?-m:m}else m=v<2.0?2.0:v;N=n;s=u;v=m+1.0}else{m=o+n;if(n<0.0?o>0.0|n>0.0:0){q=(n*q-o*2.0)/m;N=m;q=(q<0.0?-q:q)+1.0;break}N=m;q=q<2.0?3.0:q+1.0}while(0);m=O*w;if(m<0.0){n=0.0-m;if(m>0.0){m=(m*2.0+0.0)/n;m=m<0.0?-m:m}else m=2.0;x=0.0;w=0.0;u=m+1.0}else{x=m+0.0;w=3.0;n=0.0;u=0.0}m=O*y;do if(m<0.0){o=n-m;if(m>0.0|n<0.0){m=(m*2.0+n*u)/o;m=m<0.0?-m:m}else m=u<2.0?2.0:u;n=o;y=m+1.0}else{o=m+x;if(x<0.0?m>0.0|x>0.0:0){w=(x*w-m*2.0)/o;y=u;x=o;w=(w<0.0?-w:w)+1.0;break}y=u;x=o;w=w<2.0?3.0:w+1.0}while(0);o=ha*z;do if(o<0.0){u=x-o;if(o>0.0|x<0.0){m=(o*2.0+x*w)/u;m=m<0.0?-m:m}else m=w<2.0?2.0:w;z=n;w=m+1.0}else{m=o+n;if(n<0.0?o>0.0|n>0.0:0){y=(n*y-o*2.0)/m;z=m;y=(y<0.0?-y:y)+1.0;u=x;break}z=m;y=y<2.0?3.0:y+1.0;u=x}while(0);n=ha*A;a:do if(n<0.0){o=u-n;if(n>0.0|u<0.0){m=(n*2.0+u*w)/o;m=m<0.0?-m:m}else m=w<2.0?2.0:w;w=m+1.0}else{m=n+z;do if(z<0.0){if(!(n>0.0|z>0.0))break;y=(z*y-n*2.0)/m;z=m;o=u;y=(y<0.0?-y:y)+1.0;break a}while(0);z=m;o=u;y=y<2.0?3.0:y+1.0}while(0);n=+X(+((O*O+ja*ja)*(ha*ha+ka*ka)*(C*C+B*B)));b:do if(n<0.0){m=s-n;if(s<0.0|n>0.0){n=(s*v+n*5.0)/m;n=n<0.0?-n:n}else n=v<5.0?5.0:v;C=N;A=m;B=q;x=n+1.0}else{m=N+n;do if(N<0.0){if(!(N>0.0|n>0.0))break;B=(N*q-n*5.0)/m;C=m;A=s;B=(B<0.0?-B:B)+1.0;x=v;break b}while(0);C=m;A=s;B=q<5.0?6.0:q+1.0;x=v}while(0);m=s-N;n=o-z;f=o<0.0|z>0.0;u=A-C;g=C>0.0|A<0.0;p[e>>3]=ma*m;Y=e+8|0;p[Y>>3]=ma*n;W=e+16|0;p[W>>3]=ma*u;i[e+24>>0]=1;do if(s<0.0|N>0.0){if(!(s>0.0|N<0.0)){ia=97;break}m=(s*v+N*q)/m;if(!(m<0.0))break;m=-m}else ia=97;while(0);if((ia|0)==97)m=v<q?q:v;T=m+1.0>64.0;do if(f){if(!(o>0.0|z<0.0)){ia=102;break}m=(o*w+z*y)/n;if(!(m<0.0))break;m=-m}else ia=102;while(0);if((ia|0)==102)m=w<y?y:w;V=m+1.0>64.0;do if(g){if(!(C<0.0|A>0.0)){ia=107;break}m=(B*C+x*A)/u;if(!(m<0.0))break;m=-m}else ia=107;while(0);if((ia|0)==107)m=x<B?B:x;S=m+1.0>64.0;if(!(T|V|S))break;E=k[b>>2]|0;F=((E|0)<0)<<31>>31;K=k[c>>2]|0;M=((K|0)<0)<<31>>31;f=be(E|0,F|0,K|0,M|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;a=L;k[_a>>2]=Da;k[_a+4>>2]=a;k[_a+256>>2]=(a|0)!=0?-2:-1;break}else{k[_a+256>>2]=0;break}else{k[_a>>2]=f;k[_a+4>>2]=g;k[_a+256>>2]=(g|0)!=0?2:1}while(0);U=_a+260|0;I=k[d>>2]|0;J=((I|0)<0)<<31>>31;f=be(K|0,M|0,I|0,J|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;a=L;k[U>>2]=Da;k[_a+264>>2]=a;k[_a+516>>2]=(a|0)!=0?-2:-1;break}else{k[_a+516>>2]=0;break}else{k[U>>2]=f;k[_a+264>>2]=g;k[_a+516>>2]=(g|0)!=0?2:1}while(0);R=_a+520|0;f=be(E|0,F|0,I|0,J|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;a=L;k[R>>2]=Da;k[_a+524>>2]=a;k[_a+776>>2]=(a|0)!=0?-2:-1;break}else{k[_a+776>>2]=0;break}else{k[R>>2]=f;k[_a+524>>2]=g;k[_a+776>>2]=(g|0)!=0?2:1}while(0);j=k[D>>2]|0;D=((j|0)<0)<<31>>31;G=k[G>>2]|0;H=((G|0)<0)<<31>>31;f=be(j|0,D|0,G|0,H|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;a=L;k[Ta>>2]=Da;k[Ta+4>>2]=a;k[Ta+256>>2]=(a|0)!=0?-2:-1;break}else{k[Ta+256>>2]=0;break}else{k[Ta>>2]=f;k[Ta+4>>2]=g;k[Ta+256>>2]=(g|0)!=0?2:1}while(0);Q=Ta+260|0;h=k[P>>2]|0;l=((h|0)<0)<<31>>31;f=be(G|0,H|0,h|0,l|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;a=L;k[Q>>2]=Da;k[Ta+264>>2]=a;k[Ta+516>>2]=(a|0)!=0?-2:-1;break}else{k[Ta+516>>2]=0;break}else{k[Q>>2]=f;k[Ta+264>>2]=g;k[Ta+516>>2]=(g|0)!=0?2:1}while(0);P=Ta+520|0;f=be(j|0,D|0,h|0,l|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;a=L;k[P>>2]=Da;k[Ta+524>>2]=a;k[Ta+776>>2]=(a|0)!=0?-2:-1;break}else{k[Ta+776>>2]=0;break}else{k[P>>2]=f;k[Ta+524>>2]=g;k[Ta+776>>2]=(g|0)!=0?2:1}while(0);f=ge(K|0,M|0,E|0,F|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;a=L;k[Na>>2]=Da;k[Na+4>>2]=a;k[Na+256>>2]=(a|0)!=0?-2:-1;break}else{k[Na+256>>2]=0;break}else{k[Na>>2]=f;k[Na+4>>2]=g;k[Na+256>>2]=(g|0)!=0?2:1}while(0);E=Na+260|0;f=ge(I|0,J|0,K|0,M|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;a=L;k[E>>2]=Da;k[Na+264>>2]=a;k[Na+516>>2]=(a|0)!=0?-2:-1;break}else{k[Na+516>>2]=0;break}else{k[E>>2]=f;k[Na+264>>2]=g;k[Na+516>>2]=(g|0)!=0?2:1}while(0);f=ge(G|0,H|0,j|0,D|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;a=L;k[Oa>>2]=Da;k[Oa+4>>2]=a;k[Oa+256>>2]=(a|0)!=0?-2:-1;break}else{k[Oa+256>>2]=0;break}else{k[Oa>>2]=f;k[Oa+4>>2]=g;k[Oa+256>>2]=(g|0)!=0?2:1}while(0);j=Oa+260|0;f=ge(h|0,l|0,G|0,H|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;a=L;k[j>>2]=Da;k[Oa+264>>2]=a;k[Oa+516>>2]=(a|0)!=0?-2:-1;break}else{k[Oa+516>>2]=0;break}else{k[j>>2]=f;k[Oa+264>>2]=g;k[Oa+516>>2]=(g|0)!=0?2:1}while(0);Sc(Ea,_a,Q);Sc(Fa,U,Ta);Uc(Ma,Ea,Fa);g=k[Ma+256>>2]|0;f=(g|0)>-1?g:0-g|0;c:do switch(f|0){case 0:{f=0;m=0.0;break}case 1:{m=+((k[Ma>>2]|0)>>>0);ia=164;break}case 2:{m=+((k[Ma+4>>2]|0)>>>0)*4294967296.0+ +((k[Ma>>2]|0)>>>0);ia=164;break}default:{m=+((k[Ma+(f+-3<<2)>>2]|0)>>>0)+(+((k[Ma+(f+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Ma+(f+-2<<2)>>2]|0)>>>0))*4294967296.0;h=f<<5;f=h+-96|0;m=(g|0)<0?-m:m;if((f|0)>1023){m=m*89884656743115795.0e291;f=h+-1119|0;if((f|0)<=1023)break c;f=h+-2142|0;f=(f|0)>1023?1023:f;m=m*89884656743115795.0e291;break c}if((f|0)>=-1022)break c;m=m*2.2250738585072014e-308;f=h+926|0;if((f|0)>=-1022)break c;f=h+1948|0;f=(f|0)<-1022?-1022:f;m=m*2.2250738585072014e-308}}while(0);if((ia|0)==164){f=0;m=(g|0)<0?-m:m}Fa=ee(f+1023|0,0,52)|0;Ma=L;k[t>>2]=Fa;k[t+4>>2]=Ma;q=.5/(m*+p[t>>3]);Sc(Ga,_a,Na);Sc(Ha,Ta,Oa);Tc(Xa,Ga,Ha);Sc(Ia,U,E);Sc(Ja,Q,j);Tc(Ya,Ia,Ja);if(T|S){Sc(Ka,Xa,Q);Sc(La,Ya,Ta);Uc(Za,Ka,La);j=Za+256|0;g=k[j>>2]|0;f=(g|0)>-1?g:0-g|0;d:do switch(f|0){case 0:{f=0;m=0.0;break}case 1:{m=+((k[Za>>2]|0)>>>0);ia=175;break}case 2:{m=+((k[Za+4>>2]|0)>>>0)*4294967296.0+ +((k[Za>>2]|0)>>>0);ia=175;break}default:{m=+((k[Za+(f+-3<<2)>>2]|0)>>>0)+(+((k[Za+(f+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Za+(f+-2<<2)>>2]|0)>>>0))*4294967296.0;h=f<<5;f=h+-96|0;m=(g|0)<0?-m:m;if((f|0)>1023){m=m*89884656743115795.0e291;f=h+-1119|0;if((f|0)<=1023)break d;f=h+-2142|0;f=(f|0)>1023?1023:f;m=m*89884656743115795.0e291;break d}if((f|0)>=-1022)break d;m=m*2.2250738585072014e-308;f=h+926|0;if((f|0)>=-1022)break d;f=h+1948|0;f=(f|0)<-1022?-1022:f;m=m*2.2250738585072014e-308}}while(0);if((ia|0)==175){f=0;m=(g|0)<0?-m:m}Na=ee(f+1023|0,0,52)|0;Oa=L;k[t>>2]=Na;k[t+4>>2]=Oa;p[e>>3]=q*(m*+p[t>>3]);if(S){Sc(Pa,_a,_a);Sc(Qa,Ta,Ta);Tc(Ra,Pa,Qa);Sc(Ua,U,U);Sc(Va,Q,Q);Tc(Sa,Ua,Va);Sc(Z,Ra,Sa);Sc($,R,R);Sc(aa,P,P);Tc(_,$,aa);Sc(Wa,Z,_);g=k[Wa+256>>2]|0;f=(g|0)>-1?g:0-g|0;e:do switch(f|0){case 0:{f=0;m=0.0;break}case 1:{m=+((k[Wa>>2]|0)>>>0);ia=186;break}case 2:{m=+((k[Wa+4>>2]|0)>>>0)*4294967296.0+ +((k[Wa>>2]|0)>>>0);ia=186;break}default:{m=+((k[Wa+(f+-3<<2)>>2]|0)>>>0)+(+((k[Wa+(f+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Wa+(f+-2<<2)>>2]|0)>>>0))*4294967296.0;h=f<<5;f=h+-96|0;m=(g|0)<0?-m:m;if((f|0)>1023){m=m*89884656743115795.0e291;f=h+-1119|0;if((f|0)<=1023)break e;f=h+-2142|0;f=(f|0)>1023?1023:f;m=m*89884656743115795.0e291;break e}if((f|0)>=-1022)break e;m=m*2.2250738585072014e-308;f=h+926|0;if((f|0)>=-1022)break e;f=h+1948|0;f=(f|0)<-1022?-1022:f;m=m*2.2250738585072014e-308}}while(0);if((ia|0)==186){f=0;m=(g|0)<0?-m:m}Ua=ee(f+1023|0,0,52)|0;Va=L;k[t>>2]=Ua;k[t+4>>2]=Va;o=+X(+(m*+p[t>>3]));n=+p[e>>3];do if(!(n<0.0)){m=q*o;if(q<0.0){p[W>>3]=n-m;break}else{p[W>>3]=n+m;break}}else{Sc(ba,Za,Za);Uc(ca,ba,Wa);g=k[ca+256>>2]|0;f=(g|0)>-1?g:0-g|0;f:do switch(f|0){case 0:{f=0;m=0.0;break}case 1:{m=+((k[ca>>2]|0)>>>0);ia=200;break}case 2:{m=+((k[ca+4>>2]|0)>>>0)*4294967296.0+ +((k[ca>>2]|0)>>>0);ia=200;break}default:{m=+((k[ca+(f+-3<<2)>>2]|0)>>>0)+(+((k[ca+(f+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[ca+(f+-2<<2)>>2]|0)>>>0))*4294967296.0;h=f<<5;f=h+-96|0;m=(g|0)<0?-m:m;if((f|0)>1023){m=m*89884656743115795.0e291;f=h+-1119|0;if((f|0)<=1023)break f;f=h+-2142|0;f=(f|0)>1023?1023:f;m=m*89884656743115795.0e291;break f}if((f|0)>=-1022)break f;m=m*2.2250738585072014e-308;f=h+926|0;if((f|0)>=-1022)break f;f=h+1948|0;f=(f|0)<-1022?-1022:f;m=m*2.2250738585072014e-308}}while(0);if((ia|0)==200){f=0;m=(g|0)<0?-m:m}f=ee(f+1023|0,0,52)|0;g=L;k[t>>2]=f;k[t+4>>2]=g;n=q*(m*+p[t>>3]);g=k[j>>2]|0;f=(g|0)>-1?g:0-g|0;g:do switch(f|0){case 0:{f=0;m=0.0;break}case 1:{m=+((k[Za>>2]|0)>>>0);ia=210;break}case 2:{m=+((k[Za+4>>2]|0)>>>0)*4294967296.0+ +((k[Za>>2]|0)>>>0);ia=210;break}default:{m=+((k[Za+(f+-3<<2)>>2]|0)>>>0)+(+((k[Za+(f+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Za+(f+-2<<2)>>2]|0)>>>0))*4294967296.0;h=f<<5;f=h+-96|0;m=(g|0)<0?-m:m;if((f|0)>1023){m=m*89884656743115795.0e291;f=h+-1119|0;if((f|0)<=1023)break g;f=h+-2142|0;f=(f|0)>1023?1023:f;m=m*89884656743115795.0e291;break g}if((f|0)>=-1022)break g;m=m*2.2250738585072014e-308;f=h+926|0;if((f|0)>=-1022)break g;f=h+1948|0;f=(f|0)<-1022?-1022:f;m=m*2.2250738585072014e-308}}while(0);if((ia|0)==210){f=0;m=(g|0)<0?-m:m}Va=ee(f+1023|0,0,52)|0;Wa=L;k[t>>2]=Va;k[t+4>>2]=Wa;p[W>>3]=n/(o+m*+p[t>>3])}while(0)}}if(V){Sc(fa,Ya,_a);Sc(ga,Xa,U);Uc(Za,fa,ga);g=k[Za+256>>2]|0;f=(g|0)>-1?g:0-g|0;h:do switch(f|0){case 0:{f=0;m=0.0;break}case 1:{m=+((k[Za>>2]|0)>>>0);ia=224;break}case 2:{m=+((k[Za+4>>2]|0)>>>0)*4294967296.0+ +((k[Za>>2]|0)>>>0);ia=224;break}default:{m=+((k[Za+(f+-3<<2)>>2]|0)>>>0)+(+((k[Za+(f+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Za+(f+-2<<2)>>2]|0)>>>0))*4294967296.0;h=f<<5;f=h+-96|0;m=(g|0)<0?-m:m;if((f|0)>1023){m=m*89884656743115795.0e291;f=h+-1119|0;if((f|0)<=1023)break h;f=h+-2142|0;f=(f|0)>1023?1023:f;m=m*89884656743115795.0e291;break h}if((f|0)>=-1022)break h;m=m*2.2250738585072014e-308;f=h+926|0;if((f|0)>=-1022)break h;f=h+1948|0;f=(f|0)<-1022?-1022:f;m=m*2.2250738585072014e-308}}while(0);if((ia|0)==224){f=0;m=(g|0)<0?-m:m}Za=ee(f+1023|0,0,52)|0;_a=L;k[t>>2]=Za;k[t+4>>2]=_a;p[Y>>3]=q*(m*+p[t>>3])}}else{if(!g){if(!h){g=k[c+4>>2]|0;h=k[d+4>>2]|0;f=Pc(V,g,ea,h,U,k[b+4>>2]|0)|0;if((V|0)<(ea|0)){if((f|0)!=-1&(Pc(V,g,ea,h,T,k[b+12>>2]|0)|0)!=-1){e=0;r=gb;return e|0}}else if((f|0)!=-1){e=0;r=gb;return e|0}Qc(a+4|0,c,d,b,1,e);break}if((k[b+16>>2]|0)==(k[d+16>>2]|0)){e=0;r=gb;return e|0}f=(k[d+24>>2]&32|0)==0;if(!(k[b+24>>2]&32))if(f)ia=254;else{e=0;r=gb;return e|0}else if(!f)ia=254;if((ia|0)==254?(Pc(U,k[b+4>>2]|0,V,k[c+4>>2]|0,da,k[d+12>>2]|0)|0)!=-1:0){e=0;r=gb;return e|0}Rc(a+4|0,c,b,d,2,e);break}f=k[b+16>>2]|0;g=k[c+16>>2]|0;if(!h)if((f|0)==(g|0)){e=0;r=gb;return e|0}else{Rc(a+4|0,d,b,c,3,e);break}if(!((f|0)!=(g|0)?(g|0)!=(k[d+16>>2]|0):0)){e=0;r=gb;return e|0}O=+(T|0)-+(U|0);ya=b+12|0;J=k[ya>>2]|0;za=b+4|0;K=k[za>>2]|0;xa=+(J|0)-+(K|0);M=((U|0)<0)<<31>>31;P=((K|0)<0)<<31>>31;Q=((T|0)<0)<<31>>31;R=((J|0)<0)<<31>>31;Ca=(U|0)<0;g=be(0,0,U|0,M|0)|0;f=Ca?L:M;l=(K|0)<0;la=be(0,0,K|0,P|0)|0;Aa=l?L:P;Ba=(T|0)<0;j=be(0,0,T|0,Q|0)|0;h=Ba?L:Q;Da=(J|0)<0;ga=be(0,0,J|0,R|0)|0;f=ne((Da?ga:J)|0,(Da?L:R)|0,(Ca?g:U)|0,f|0)|0;g=L;h=ne((l?la:K)|0,Aa|0,(Ba?j:T)|0,h|0)|0;j=L;l=Ba^l;do if(Ca^Da){if(!l){Da=ge(h|0,j|0,f|0,g|0)|0;wa=-(+(Da>>>0)+4294967296.0*+(L>>>0));break}if(g>>>0>j>>>0|(g|0)==(j|0)&f>>>0>h>>>0){Da=be(f|0,g|0,h|0,j|0)|0;wa=-(+(Da>>>0)+4294967296.0*+(L>>>0));break}else{Da=be(h|0,j|0,f|0,g|0)|0;wa=+(Da>>>0)+4294967296.0*+(L>>>0);break}}else{if(l){Da=ge(h|0,j|0,f|0,g|0)|0;wa=+(Da>>>0)+4294967296.0*+(L>>>0);break}if(g>>>0<j>>>0|(g|0)==(j|0)&f>>>0<h>>>0){Da=be(h|0,j|0,f|0,g|0)|0;wa=-(+(Da>>>0)+4294967296.0*+(L>>>0));break}else{Da=be(f|0,g|0,h|0,j|0)|0;wa=+(Da>>>0)+4294967296.0*+(L>>>0);break}}while(0);B=+(S|0)-+(V|0);Aa=c+12|0;D=k[Aa>>2]|0;Ba=c+4|0;E=k[Ba>>2]|0;ra=+(D|0)-+(E|0);F=((V|0)<0)<<31>>31;G=((E|0)<0)<<31>>31;H=((S|0)<0)<<31>>31;I=((D|0)<0)<<31>>31;Ca=(V|0)<0;g=be(0,0,V|0,F|0)|0;f=Ca?L:F;l=(E|0)<0;fa=be(0,0,E|0,G|0)|0;ga=l?L:G;la=(S|0)<0;j=be(0,0,S|0,H|0)|0;h=la?L:H;Da=(D|0)<0;ca=be(0,0,D|0,I|0)|0;f=ne((Da?ca:D)|0,(Da?L:I)|0,(Ca?g:V)|0,f|0)|0;g=L;h=ne((l?fa:E)|0,ga|0,(la?j:S)|0,h|0)|0;j=L;l=la^l;do if(Ca^Da){if(!l){Da=ge(h|0,j|0,f|0,g|0)|0;sa=-(+(Da>>>0)+4294967296.0*+(L>>>0));break}if(g>>>0>j>>>0|(g|0)==(j|0)&f>>>0>h>>>0){Da=be(f|0,g|0,h|0,j|0)|0;sa=-(+(Da>>>0)+4294967296.0*+(L>>>0));break}else{Da=be(h|0,j|0,f|0,g|0)|0;sa=+(Da>>>0)+4294967296.0*+(L>>>0);break}}else{if(l){Da=ge(h|0,j|0,f|0,g|0)|0;sa=+(Da>>>0)+4294967296.0*+(L>>>0);break}if(g>>>0<j>>>0|(g|0)==(j|0)&f>>>0<h>>>0){Da=be(h|0,j|0,f|0,g|0)|0;sa=-(+(Da>>>0)+4294967296.0*+(L>>>0));break}else{Da=be(f|0,g|0,h|0,j|0)|0;sa=+(Da>>>0)+4294967296.0*+(L>>>0);break}}while(0);C=+(da|0)-+(ea|0);Ca=d+12|0;Z=k[Ca>>2]|0;Da=d+4|0;_=k[Da>>2]|0;ta=+(Z|0)-+(_|0);$=((ea|0)<0)<<31>>31;aa=((_|0)<0)<<31>>31;ba=((da|0)<0)<<31>>31;ca=((Z|0)<0)<<31>>31;ga=(ea|0)<0;g=be(0,0,ea|0,$|0)|0;f=ga?L:$;l=(_|0)<0;W=be(0,0,_|0,aa|0)|0;Y=l?L:aa;fa=(da|0)<0;j=be(0,0,da|0,ba|0)|0;h=fa?L:ba;la=(Z|0)<0;hb=be(0,0,Z|0,ca|0)|0;f=ne((la?hb:Z)|0,(la?L:ca)|0,(ga?g:ea)|0,f|0)|0;g=L;h=ne((l?W:_)|0,Y|0,(fa?j:da)|0,h|0)|0;j=L;l=fa^l;do if(ga^la){if(!l){hb=ge(h|0,j|0,f|0,g|0)|0;ua=-(+(hb>>>0)+4294967296.0*+(L>>>0));break}if(g>>>0>j>>>0|(g|0)==(j|0)&f>>>0>h>>>0){hb=be(f|0,g|0,h|0,j|0)|0;ua=-(+(hb>>>0)+4294967296.0*+(L>>>0));break}else{hb=be(h|0,j|0,f|0,g|0)|0;ua=+(hb>>>0)+4294967296.0*+(L>>>0);break}}else{if(l){hb=ge(h|0,j|0,f|0,g|0)|0;ua=+(hb>>>0)+4294967296.0*+(L>>>0);break}if(g>>>0<j>>>0|(g|0)==(j|0)&f>>>0<h>>>0){hb=be(h|0,j|0,f|0,g|0)|0;ua=-(+(hb>>>0)+4294967296.0*+(L>>>0));break}else{hb=be(f|0,g|0,h|0,j|0)|0;ua=+(hb>>>0)+4294967296.0*+(L>>>0);break}}while(0);qa=+X(+(O*O+xa*xa));va=+X(+(B*B+ra*ra));pa=+X(+(C*C+ta*ta));U=be(T|0,Q|0,U|0,M|0)|0;Y=L;R=be(J|0,R|0,K|0,P|0)|0;T=L;J=be(S|0,H|0,V|0,F|0)|0;K=L;M=be(D|0,I|0,E|0,G|0)|0;P=L;W=(Y|0)<0;V=be(0,0,U|0,Y|0)|0;U=W?V:U;V=W?L:Y;Y=(T|0)<0;S=be(0,0,R|0,T|0)|0;S=Y?S:R;T=Y?L:T;R=(K|0)<0;Q=be(0,0,J|0,K|0)|0;J=R?Q:J;K=R?L:K;Q=(P|0)<0;f=be(0,0,M|0,P|0)|0;M=Q?f:M;P=Q?L:P;f=ne(M|0,P|0,U|0,V|0)|0;g=L;h=ne(J|0,K|0,S|0,T|0)|0;j=L;l=Y^R;do if(W^Q){if(!l){hb=ge(f|0,g|0,h|0,j|0)|0;w=-(+(hb>>>0)+4294967296.0*+(L>>>0));break}if(g>>>0>j>>>0|(g|0)==(j|0)&f>>>0>h>>>0){hb=be(f|0,g|0,h|0,j|0)|0;w=-(+(hb>>>0)+4294967296.0*+(L>>>0));break}else{hb=be(h|0,j|0,f|0,g|0)|0;w=+(hb>>>0)+4294967296.0*+(L>>>0);break}}else{if(l){hb=ge(f|0,g|0,h|0,j|0)|0;w=+(hb>>>0)+4294967296.0*+(L>>>0);break}if(g>>>0<j>>>0|(g|0)==(j|0)&f>>>0<h>>>0){hb=be(h|0,j|0,f|0,g|0)|0;w=-(+(hb>>>0)+4294967296.0*+(L>>>0));break}else{hb=be(f|0,g|0,h|0,j|0)|0;w=+(hb>>>0)+4294967296.0*+(L>>>0);break}}while(0);D=be(da|0,ba|0,ea|0,$|0)|0;E=L;F=be(Z|0,ca|0,_|0,aa|0)|0;G=L;I=(E|0)<0;H=be(0,0,D|0,E|0)|0;D=I?H:D;E=I?L:E;H=(G|0)<0;j=be(0,0,F|0,G|0)|0;F=H?j:F;G=H?L:G;j=ne(F|0,G|0,J|0,K|0)|0;l=L;g=ne(D|0,E|0,M|0,P|0)|0;h=L;f=Q^I;do if(R^H){if(!f){hb=ge(j|0,l|0,g|0,h|0)|0;z=-(+(hb>>>0)+4294967296.0*+(L>>>0));break}if(l>>>0>h>>>0|(l|0)==(h|0)&j>>>0>g>>>0){hb=be(j|0,l|0,g|0,h|0)|0;z=-(+(hb>>>0)+4294967296.0*+(L>>>0));break}else{hb=be(g|0,h|0,j|0,l|0)|0;z=+(hb>>>0)+4294967296.0*+(L>>>0);break}}else{if(f){hb=ge(j|0,l|0,g|0,h|0)|0;z=+(hb>>>0)+4294967296.0*+(L>>>0);break}if(l>>>0<h>>>0|(l|0)==(h|0)&j>>>0<g>>>0){hb=be(g|0,h|0,j|0,l|0)|0;z=-(+(hb>>>0)+4294967296.0*+(L>>>0));break}else{hb=be(j|0,l|0,g|0,h|0)|0;z=+(hb>>>0)+4294967296.0*+(L>>>0);break}}while(0);j=ne(S|0,T|0,D|0,E|0)|0;l=L;g=ne(U|0,V|0,F|0,G|0)|0;h=L;f=H^W;do if(I^Y){if(!f){hb=ge(j|0,l|0,g|0,h|0)|0;y=-(+(hb>>>0)+4294967296.0*+(L>>>0));break}if(l>>>0>h>>>0|(l|0)==(h|0)&j>>>0>g>>>0){hb=be(j|0,l|0,g|0,h|0)|0;y=-(+(hb>>>0)+4294967296.0*+(L>>>0));break}else{hb=be(g|0,h|0,j|0,l|0)|0;y=+(hb>>>0)+4294967296.0*+(L>>>0);break}}else{if(f){hb=ge(j|0,l|0,g|0,h|0)|0;y=+(hb>>>0)+4294967296.0*+(L>>>0);break}if(l>>>0<h>>>0|(l|0)==(h|0)&j>>>0<g>>>0){hb=be(g|0,h|0,j|0,l|0)|0;y=-(+(hb>>>0)+4294967296.0*+(L>>>0));break}else{hb=be(j|0,l|0,g|0,h|0)|0;y=+(hb>>>0)+4294967296.0*+(L>>>0);break}}while(0);m=pa*w;if(m<0.0){n=0.0-m;if(m>0.0){m=(m*4.0+0.0)/n;m=m<0.0?-m:m}else m=4.0;u=0.0;v=0.0;s=m+1.0}else{u=m+0.0;v=5.0;n=0.0;s=0.0}o=qa*z;do if(o<0.0){q=n-o;if(o>0.0|n<0.0){o=(o*4.0+n*s)/q;o=o<0.0?-o:o}else o=s<4.0?4.0:s;m=u;n=q;s=o+1.0}else{m=o+u;if(u<0.0?o>0.0|u>0.0:0){v=(u*v-o*4.0)/m;v=(v<0.0?-v:v)+1.0;break}v=v<4.0?5.0:v+1.0}while(0);o=va*y;i:do if(o<0.0){q=n-o;if(o>0.0|n<0.0){n=(o*4.0+n*s)/q;n=n<0.0?-n:n}else n=s<4.0?4.0:s;oa=q;q=m;s=n+1.0;na=v}else{q=o+m;do if(m<0.0){if(!(o>0.0|m>0.0))break;na=(m*v-o*4.0)/q;oa=n;na=(na<0.0?-na:na)+1.0;break i}while(0);oa=n;na=v<4.0?5.0:v+1.0}while(0);m=ua*w;if(m<0.0){n=0.0-m;if(m>0.0){m=(m*3.0+0.0)/n;m=m<0.0?-m:m}else m=3.0;w=0.0;x=0.0;u=m+1.0}else{w=m+0.0;x=4.0;n=0.0;u=0.0}o=wa*z;j:do if(o<0.0){v=n-o;if(o>0.0|n<0.0){m=(o*3.0+n*u)/v;m=m<0.0?-m:m}else m=u<3.0?3.0:u;n=v;u=m+1.0}else{m=o+w;do if(w<0.0){if(!(o>0.0|w>0.0))break;x=(w*x-o*3.0)/m;w=m;x=(x<0.0?-x:x)+1.0;break j}while(0);w=m;x=x<3.0?4.0:x+1.0}while(0);m=sa*y;k:do if(m<0.0){o=n-m;if(m>0.0|n<0.0){m=(m*3.0+n*u)/o;m=m<0.0?-m:m}else m=u<3.0?3.0:u;A=o;z=m+1.0;ma=w;N=x}else{o=m+w;do if(w<0.0){if(!(m>0.0|w>0.0))break;N=(w*x-m*3.0)/o;A=n;z=u;ma=o;N=(N<0.0?-N:N)+1.0;break k}while(0);A=n;z=u;ma=o;N=x<3.0?4.0:x+1.0}while(0);n=O*sa*pa;if(n<0.0){m=0.0-n;if(n>0.0){n=(n*5.0+0.0)/m;n=n<0.0?-n:n}else n=5.0;w=n+1.0;u=0.0;v=0.0}else{m=0.0;w=0.0;u=n+0.0;v=6.0}n=wa*B*pa;l:do if(n<0.0){o=u-n;if(n>0.0|u<0.0){n=(n*5.0+u*v)/o;n=n<0.0?-n:n}else n=v<5.0?5.0:v;u=o;v=n+1.0}else{o=n+m;do if(m<0.0){if(!(n>0.0|m>0.0))break;w=(m*w-n*5.0)/o;m=o;w=(w<0.0?-w:w)+1.0;break l}while(0);m=o;w=w<5.0?6.0:w+1.0}while(0);n=B*ua*qa;m:do if(n<0.0){o=m-n;if(n>0.0|m<0.0){n=(n*5.0+m*w)/o;n=n<0.0?-n:n}else n=w<5.0?5.0:w;m=o;w=n+1.0}else{o=n+u;do if(u<0.0){if(!(n>0.0|u>0.0))break;v=(u*v-n*5.0)/o;u=o;v=(v<0.0?-v:v)+1.0;break m}while(0);u=o;v=v<5.0?6.0:v+1.0}while(0);n=sa*C*qa;n:do if(n<0.0){o=u-n;if(n>0.0|u<0.0){n=(n*5.0+u*v)/o;n=n<0.0?-n:n}else n=v<5.0?5.0:v;x=o;v=n+1.0}else{o=n+m;do if(m<0.0){if(!(n>0.0|m>0.0))break;w=(m*w-n*5.0)/o;x=u;m=o;w=(w<0.0?-w:w)+1.0;break n}while(0);x=u;m=o;w=w<5.0?6.0:w+1.0}while(0);n=wa*C*va;o:do if(n<0.0){o=m-n;if(n>0.0|m<0.0){m=(n*5.0+m*w)/o;m=m<0.0?-m:m}else m=w<5.0?5.0:w;w=m+1.0;u=x}else{u=n+x;do if(x<0.0){if(!(n>0.0|x>0.0))break;v=(x*v-n*5.0)/u;o=m;v=(v<0.0?-v:v)+1.0;break o}while(0);o=m;v=v<5.0?6.0:v+1.0}while(0);m=O*ua*va;p:do if(m<0.0){n=u-m;if(m>0.0|u<0.0){m=(m*5.0+u*v)/n;m=m<0.0?-m:m}else m=v<5.0?5.0:v;ka=n;ja=m+1.0;ha=o}else{n=m+o;do if(o<0.0){if(!(m>0.0|o>0.0))break;w=(o*w-m*5.0)/n;ka=u;ja=v;ha=n;w=(w<0.0?-w:w)+1.0;break p}while(0);ka=u;ja=v;ha=n;w=w<5.0?6.0:w+1.0}while(0);n=xa*sa*pa;if(n<0.0){m=0.0-n;if(n>0.0){n=(n*5.0+0.0)/m;n=n<0.0?-n:n}else n=5.0;x=n+1.0;u=0.0;v=0.0}else{m=0.0;x=0.0;u=n+0.0;v=6.0}n=wa*ra*pa;q:do if(n<0.0){o=u-n;if(n>0.0|u<0.0){n=(n*5.0+u*v)/o;n=n<0.0?-n:n}else n=v<5.0?5.0:v;y=o;v=n+1.0}else{o=n+m;do if(m<0.0){if(!(n>0.0|m>0.0))break;x=(m*x-n*5.0)/o;y=u;m=o;x=(x<0.0?-x:x)+1.0;break q}while(0);y=u;m=o;x=x<5.0?6.0:x+1.0}while(0);n=ra*ua*qa;r:do if(n<0.0){o=m-n;if(n>0.0|m<0.0){n=(n*5.0+m*x)/o;n=n<0.0?-n:n}else n=x<5.0?5.0:x;m=o;x=n+1.0;u=y}else{u=n+y;do if(y<0.0){if(!(n>0.0|y>0.0))break;v=(y*v-n*5.0)/u;v=(v<0.0?-v:v)+1.0;break r}while(0);v=v<5.0?6.0:v+1.0}while(0);n=sa*ta*qa;s:do if(n<0.0){o=u-n;if(n>0.0|u<0.0){n=(n*5.0+u*v)/o;n=n<0.0?-n:n}else n=v<5.0?5.0:v;u=o;o=m;v=n+1.0}else{o=n+m;do if(m<0.0){if(!(n>0.0|m>0.0))break;x=(m*x-n*5.0)/o;x=(x<0.0?-x:x)+1.0;break s}while(0);x=x<5.0?6.0:x+1.0}while(0);m=wa*ta*va;t:do if(m<0.0){n=o-m;if(m>0.0|o<0.0){m=(m*5.0+o*x)/n;m=m<0.0?-m:m}else m=x<5.0?5.0:x;y=n;x=m+1.0}else{n=m+u;do if(u<0.0){if(!(m>0.0|u>0.0))break;v=(u*v-m*5.0)/n;y=o;u=n;v=(v<0.0?-v:v)+1.0;break t}while(0);y=o;u=n;v=v<5.0?6.0:v+1.0}while(0);n=xa*ua*va;u:do if(n<0.0){o=u-n;if(n>0.0|u<0.0){m=(n*5.0+u*v)/o;m=m<0.0?-m:m}else m=v<5.0?5.0:v;v=m+1.0}else{m=n+y;do if(y<0.0){if(!(n>0.0|y>0.0))break;x=(y*x-n*5.0)/m;y=m;o=u;x=(x<0.0?-x:x)+1.0;break u}while(0);y=m;o=u;x=x<5.0?6.0:x+1.0}while(0);O=A+ka;g=ka<0.0;do if(A<0.0|g){if(!(A>0.0|ka>0.0)){ia=474;break}m=(ka*ja-A*z)/O;if(!(m<0.0))break;m=-m}else ia=474;while(0);if((ia|0)==474)m=ja<z?z:ja;C=m+1.0;B=ma+ha;f=ha<0.0;do if(ma<0.0|f){if(!(ma>0.0|ha>0.0)){ia=479;break}m=(ha*w-ma*N)/B;if(!(m<0.0))break;m=-m}else ia=479;while(0);if((ia|0)==479)m=w<N?N:w;A=m+1.0;N=q-oa;do if(q<0.0|oa>0.0){if(!(q>0.0|oa<0.0)){ia=484;break}m=(q*na+oa*s)/N;if(!(m<0.0))break;m=-m}else ia=484;while(0);if((ia|0)==484)m=na<s?s:na;z=m+1.0;n=ka-ha;do if((g|ha>0.0)&(ka>0.0|f)){m=(ka*ja+ha*w)/n;if(!(m<0.0))break;m=-m}else m=ja<w?w:ja;while(0);u=n/N;s=z+(m+1.0)+1.0;n=o-y;do if(o<0.0|y>0.0){if(!(o>0.0|y<0.0)){ia=493;break}m=(o*v+y*x)/n;if(!(m<0.0))break;m=-m}else ia=493;while(0);if((ia|0)==493)m=v<x?x:v;o=n/N;n=z+(m+1.0)+1.0;q=O-B;do if(O<0.0|B>0.0){if(!(O>0.0|B<0.0)){ia=498;break}m=(O*C+B*A)/q;if(!(m<0.0))break;m=-m}else ia=498;while(0);if((ia|0)==498)m=C<A?A:C;ga=s>64.0;da=n>64.0;ia=z+(m+1.0)+1.0>64.0;p[e>>3]=u;fa=e+8|0;p[fa>>3]=o;la=e+16|0;p[la>>3]=q/N;i[e+24>>0]=1;if(!(ga|da|ia))break;P=k[$a>>2]|0;Q=((P|0)<0)<<31>>31;R=k[b>>2]|0;S=((R|0)<0)<<31>>31;f=be(P|0,Q|0,R|0,S|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){ea=be(0,0,f|0,g|0)|0;hb=L;k[_a>>2]=ea;k[_a+4>>2]=hb;k[_a+256>>2]=(hb|0)!=0?-2:-1;break}else{k[_a+256>>2]=0;break}else{k[_a>>2]=f;k[_a+4>>2]=g;k[_a+256>>2]=(g|0)!=0?2:1}while(0);ea=_a+260|0;T=k[cb>>2]|0;U=((T|0)<0)<<31>>31;V=k[c>>2]|0;W=((V|0)<0)<<31>>31;f=be(T|0,U|0,V|0,W|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){ca=be(0,0,f|0,g|0)|0;hb=L;k[ea>>2]=ca;k[_a+264>>2]=hb;k[_a+516>>2]=(hb|0)!=0?-2:-1;break}else{k[_a+516>>2]=0;break}else{k[ea>>2]=f;k[_a+264>>2]=g;k[_a+516>>2]=(g|0)!=0?2:1}while(0);ca=_a+520|0;Y=k[fb>>2]|0;Z=((Y|0)<0)<<31>>31;_=k[d>>2]|0;$=((_|0)<0)<<31>>31;f=be(Y|0,Z|0,_|0,$|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){ba=be(0,0,f|0,g|0)|0;hb=L;k[ca>>2]=ba;k[_a+524>>2]=hb;k[_a+776>>2]=(hb|0)!=0?-2:-1;break}else{k[_a+776>>2]=0;break}else{k[ca>>2]=f;k[_a+524>>2]=g;k[_a+776>>2]=(g|0)!=0?2:1}while(0);K=k[ya>>2]|0;M=((K|0)<0)<<31>>31;G=k[za>>2]|0;H=((G|0)<0)<<31>>31;f=be(K|0,M|0,G|0,H|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){za=be(0,0,f|0,g|0)|0;hb=L;k[Ta>>2]=za;k[Ta+4>>2]=hb;k[Ta+256>>2]=(hb|0)!=0?-2:-1;break}else{k[Ta+256>>2]=0;break}else{k[Ta>>2]=f;k[Ta+4>>2]=g;k[Ta+256>>2]=(g|0)!=0?2:1}while(0);ba=Ta+260|0;I=k[Aa>>2]|0;J=((I|0)<0)<<31>>31;l=k[Ba>>2]|0;D=((l|0)<0)<<31>>31;f=be(I|0,J|0,l|0,D|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Ba=be(0,0,f|0,g|0)|0;hb=L;k[ba>>2]=Ba;k[Ta+264>>2]=hb;k[Ta+516>>2]=(hb|0)!=0?-2:-1;break}else{k[Ta+516>>2]=0;break}else{k[ba>>2]=f;k[Ta+264>>2]=g;k[Ta+516>>2]=(g|0)!=0?2:1}while(0);aa=Ta+520|0;E=k[Ca>>2]|0;F=((E|0)<0)<<31>>31;h=k[Da>>2]|0;j=((h|0)<0)<<31>>31;f=be(E|0,F|0,h|0,j|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;hb=L;k[aa>>2]=Da;k[Ta+524>>2]=hb;k[Ta+776>>2]=(hb|0)!=0?-2:-1;break}else{k[Ta+776>>2]=0;break}else{k[aa>>2]=f;k[Ta+524>>2]=g;k[Ta+776>>2]=(g|0)!=0?2:1}while(0);hb=ne(K|0,M|0,R|0,S|0)|0;g=L;f=ne(P|0,Q|0,G|0,H|0)|0;f=be(hb|0,g|0,f|0,L|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;hb=L;k[Na>>2]=Da;k[Na+4>>2]=hb;k[Na+256>>2]=(hb|0)!=0?-2:-1;break}else{k[Na+256>>2]=0;break}else{k[Na>>2]=f;k[Na+4>>2]=g;k[Na+256>>2]=(g|0)!=0?2:1}while(0);G=Na+260|0;hb=ne(I|0,J|0,V|0,W|0)|0;g=L;f=ne(T|0,U|0,l|0,D|0)|0;f=be(hb|0,g|0,f|0,L|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;hb=L;k[G>>2]=Da;k[Na+264>>2]=hb;k[Na+516>>2]=(hb|0)!=0?-2:-1;break}else{k[Na+516>>2]=0;break}else{k[G>>2]=f;k[Na+264>>2]=g;k[Na+516>>2]=(g|0)!=0?2:1}while(0);D=Na+520|0;hb=ne(E|0,F|0,_|0,$|0)|0;g=L;f=ne(Y|0,Z|0,h|0,j|0)|0;f=be(hb|0,g|0,f|0,L|0)|0;g=L;do if(!((g|0)>0|(g|0)==0&f>>>0>0))if((g|0)<0){Da=be(0,0,f|0,g|0)|0;hb=L;k[D>>2]=Da;k[Na+524>>2]=hb;k[Na+776>>2]=(hb|0)!=0?-2:-1;break}else{k[Na+776>>2]=0;break}else{k[D>>2]=f;k[Na+524>>2]=g;k[Na+776>>2]=(g|0)!=0?2:1}while(0);Sc(Fa,_a,_a);Sc(Xa,Ta,Ta);Tc(Ea,Fa,Xa);fe(Ma|0,Ea|0,260)|0;Sc(Fa,ea,ea);Sc(Xa,ba,ba);Tc(Ea,Fa,Xa);fe(Ma+260|0,Ea|0,260)|0;Sc(Fa,ca,ca);Sc(Xa,aa,aa);Tc(Ea,Fa,Xa);fe(Ma+520|0,Ea|0,260)|0;Sc(Ha,ea,aa);Sc(Ya,ca,ba);Uc(Ga,Ha,Ya);fe(Oa|0,Ga|0,260)|0;h=Oa+260|0;Sc(Ha,ca,Ta);Sc(Ya,_a,aa);Uc(Ga,Ha,Ya);fe(h|0,Ga|0,260)|0;j=Oa+520|0;Sc(Ha,_a,ba);Sc(Ya,ea,Ta);Uc(Ga,Ha,Ya);fe(j|0,Ga|0,260)|0;l=a+4|0;Vc(Ia,l,Oa,Ma);m=+p[Ia>>3];g=k[Ia+8>>2]|0;do if((g|0)>1023){m=m*89884656743115795.0e291;f=g+-1023|0;if((f|0)<=1023)break;f=g+-2046|0;f=(f|0)>1023?1023:f;m=m*89884656743115795.0e291}else{if((g|0)>=-1022){f=g;break}m=m*2.2250738585072014e-308;f=g+1022|0;if((f|0)>=-1022)break;f=g+2044|0;f=(f|0)<-1022?-1022:f;m=m*2.2250738585072014e-308}while(0);Ya=ee(f+1023|0,0,52)|0;hb=L;k[t>>2]=Ya;k[t+4>>2]=hb;n=m*+p[t>>3];if(da){Sc(Za,ba,D);Sc(Ka,aa,G);Uc(Ja,Za,Ka);fe(Oa|0,Ja|0,260)|0;Sc(Za,aa,Na);Sc(Ka,Ta,D);Uc(Ja,Za,Ka);fe(h|0,Ja|0,260)|0;Sc(Za,Ta,G);Sc(Ka,ba,Na);Uc(Ja,Za,Ka);fe(j|0,Ja|0,260)|0;Vc(La,l,Oa,Ma);m=+p[La>>3];g=k[La+8>>2]|0;do if((g|0)>1023){m=m*89884656743115795.0e291;f=g+-1023|0;if((f|0)<=1023)break;f=g+-2046|0;f=(f|0)>1023?1023:f;m=m*89884656743115795.0e291}else{if((g|0)>=-1022){f=g;break}m=m*2.2250738585072014e-308;f=g+1022|0;if((f|0)>=-1022)break;f=g+2044|0;f=(f|0)<-1022?-1022:f;m=m*2.2250738585072014e-308}while(0);Za=ee(f+1023|0,0,52)|0;hb=L;k[t>>2]=Za;k[t+4>>2]=hb;p[fa>>3]=m*+p[t>>3]/n}do if(ga|ia){f=Oa+780|0;k[Oa+1036>>2]=0;Sc(Pa,ea,D);Sc(Qa,ca,G);Uc(Wa,Pa,Qa);fe(Oa|0,Wa|0,260)|0;if(ia){Sc(Sa,Oa,Ta);Tc(Ra,f,Sa);fe(f|0,Ra|0,260)|0;Sc(Pa,ca,Na);Sc(Qa,_a,D);Uc(Wa,Pa,Qa);fe(h|0,Wa|0,260)|0;Sc(Sa,h,ba);Tc(Ra,f,Sa);fe(f|0,Ra|0,260)|0;Sc(Pa,_a,G);Sc(Qa,ea,Na);Uc(Wa,Pa,Qa);fe(j|0,Wa|0,260)|0;Sc(Sa,j,aa);Tc(Ra,f,Sa);fe(f|0,Ra|0,260)|0}else{Sc(Pa,ca,Na);Sc(Qa,_a,D);Uc(Wa,Pa,Qa);fe(h|0,Wa|0,260)|0;Sc(Pa,_a,G);Sc(Qa,ea,Na);Uc(Wa,Pa,Qa);fe(j|0,Wa|0,260)|0}if(ga){Vc(Ua,l,Oa,Ma);m=+p[Ua>>3];g=k[Ua+8>>2]|0;do if((g|0)>1023){m=m*89884656743115795.0e291;f=g+-1023|0;if((f|0)<=1023)break;f=g+-2046|0;f=(f|0)>1023?1023:f;m=m*89884656743115795.0e291}else{if((g|0)>=-1022){f=g;break}m=m*2.2250738585072014e-308;f=g+1022|0;if((f|0)>=-1022)break;f=g+2044|0;f=(f|0)<-1022?-1022:f;m=m*2.2250738585072014e-308}while(0);_a=ee(f+1023|0,0,52)|0;hb=L;k[t>>2]=_a;k[t+4>>2]=hb;p[e>>3]=m*+p[t>>3]/n}if(!ia)break;k[Ma+780>>2]=1;k[Ma+1036>>2]=1;Wc(Va,l,Oa,Ma);m=+p[Va>>3];g=k[Va+8>>2]|0;do if((g|0)>1023){m=m*89884656743115795.0e291;f=g+-1023|0;if((f|0)<=1023)break;f=g+-2046|0;f=(f|0)>1023?1023:f;m=m*89884656743115795.0e291}else{if((g|0)>=-1022){f=g;break}m=m*2.2250738585072014e-308;f=g+1022|0;if((f|0)>=-1022)break;f=g+2044|0;f=(f|0)<-1022?-1022:f;m=m*2.2250738585072014e-308}while(0);_a=ee(f+1023|0,0,52)|0;hb=L;k[t>>2]=_a;k[t+4>>2]=hb;p[la>>3]=m*+p[t>>3]/n}while(0)}while(0);if((k[b>>2]|0)==(k[$a>>2]|0)?(ab=k[b+4>>2]|0,bb=k[b+12>>2]|0,(ab|0)!=(bb|0)):0){f=(k[b+24>>2]&32|0)!=0;h=e+8|0;g=k[h>>2]|0;h=k[h+4>>2]|0;p[t>>3]=+((f?bb:ab)|0);$a=k[t>>2]|0;_a=k[t+4>>2]|0;hb=(h|0)>-1|(h|0)==-1&g>>>0>4294967295;b=be(0,-2147483648,g|0,h|0)|0;g=hb?b:g;h=hb?L:h;hb=(_a|0)>-1|(_a|0)==-1&$a>>>0>4294967295;b=be(0,-2147483648,$a|0,_a|0)|0;$a=hb?b:$a;_a=hb?L:_a;hb=be(g|0,h|0,$a|0,_a|0)|0;b=L;if((h>>>0>_a>>>0|(h|0)==(_a|0)&g>>>0>$a>>>0)&(b>>>0>0|(b|0)==0&hb>>>0>64)){hb=0;r=gb;return hb|0}p[t>>3]=+((f?ab:bb)|0);$a=k[t>>2]|0;_a=k[t+4>>2]|0;ab=(_a|0)>-1|(_a|0)==-1&$a>>>0>4294967295;b=be(0,-2147483648,$a|0,_a|0)|0;$a=ab?b:$a;_a=ab?L:_a;ab=be(g|0,h|0,$a|0,_a|0)|0;b=L;hb=be($a|0,_a|0,g|0,h|0)|0;bb=L;if(((h>>>0>_a>>>0|(h|0)==(_a|0)&g>>>0>$a>>>0?(b>>>0>0|(b|0)==0&ab>>>0>64)<<31>>31:(bb>>>0>0|(bb|0)==0&hb>>>0>64)&1)|0)==1){hb=0;r=gb;return hb|0}}if((k[c>>2]|0)==(k[cb>>2]|0)?(db=k[c+4>>2]|0,eb=k[c+12>>2]|0,(db|0)!=(eb|0)):0){f=(k[c+24>>2]&32|0)!=0;h=e+8|0;g=k[h>>2]|0;h=k[h+4>>2]|0;p[t>>3]=+((f?eb:db)|0);cb=k[t>>2]|0;bb=k[t+4>>2]|0;hb=(h|0)>-1|(h|0)==-1&g>>>0>4294967295;c=be(0,-2147483648,g|0,h|0)|0;g=hb?c:g;h=hb?L:h;hb=(bb|0)>-1|(bb|0)==-1&cb>>>0>4294967295;c=be(0,-2147483648,cb|0,bb|0)|0;cb=hb?c:cb;bb=hb?L:bb;hb=be(g|0,h|0,cb|0,bb|0)|0;c=L;if((h>>>0>bb>>>0|(h|0)==(bb|0)&g>>>0>cb>>>0)&(c>>>0>0|(c|0)==0&hb>>>0>64)){hb=0;r=gb;return hb|0}p[t>>3]=+((f?db:eb)|0);cb=k[t>>2]|0;bb=k[t+4>>2]|0;db=(bb|0)>-1|(bb|0)==-1&cb>>>0>4294967295;c=be(0,-2147483648,cb|0,bb|0)|0;cb=db?c:cb;bb=db?L:bb;db=be(g|0,h|0,cb|0,bb|0)|0;c=L;hb=be(cb|0,bb|0,g|0,h|0)|0;eb=L;if(((h>>>0>bb>>>0|(h|0)==(bb|0)&g>>>0>cb>>>0?(c>>>0>0|(c|0)==0&db>>>0>64)<<31>>31:(eb>>>0>0|(eb|0)==0&hb>>>0>64)&1)|0)==1){hb=0;r=gb;return hb|0}}if((k[d>>2]|0)!=(k[fb>>2]|0)){hb=1;r=gb;return hb|0}j=k[d+4>>2]|0;l=k[d+12>>2]|0;if((j|0)==(l|0)){hb=1;r=gb;return hb|0}h=(k[d+24>>2]&32|0)!=0;g=e+8|0;f=k[g>>2]|0;g=k[g+4>>2]|0;p[t>>3]=+((h?l:j)|0);d=k[t>>2]|0;fb=k[t+4>>2]|0;hb=(g|0)>-1|(g|0)==-1&f>>>0>4294967295;e=be(0,-2147483648,f|0,g|0)|0;f=hb?e:f;g=hb?L:g;hb=(fb|0)>-1|(fb|0)==-1&d>>>0>4294967295;e=be(0,-2147483648,d|0,fb|0)|0;d=hb?e:d;fb=hb?L:fb;hb=be(f|0,g|0,d|0,fb|0)|0;e=L;if((g>>>0>fb>>>0|(g|0)==(fb|0)&f>>>0>d>>>0)&(e>>>0>0|(e|0)==0&hb>>>0>64)){hb=0;r=gb;return hb|0}p[t>>3]=+((h?j:l)|0);eb=k[t>>2]|0;db=k[t+4>>2]|0;d=(db|0)>-1|(db|0)==-1&eb>>>0>4294967295;fb=be(0,-2147483648,eb|0,db|0)|0;eb=d?fb:eb;db=d?L:db;d=be(f|0,g|0,eb|0,db|0)|0;fb=L;hb=be(eb|0,db|0,f|0,g|0)|0;e=L;hb=((g>>>0>db>>>0|(g|0)==(db|0)&f>>>0>eb>>>0?(fb>>>0>0|(fb|0)==0&d>>>0>64)<<31>>31:(e>>>0>0|(e|0)==0&hb>>>0>64)&1)|0)!=1;r=gb;return hb|0}function Oc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0.0,h=0,i=0.0,j=0,l=0,m=0,n=0,o=0,q=0;f=a+16|0;c=_d(48)|0;a:do if(!c){while(1){c=k[35]|0;k[35]=c+0;if(!c)break;Xa[c&0]();c=_d(48)|0;if(c)break a}q=ya(4)|0;k[q>>2]=128;La(q|0,8,1)}while(0);e=c+8|0;d=e+40|0;do{k[e>>2]=k[b>>2];e=e+4|0;b=b+4|0}while((e|0)<(d|0));k[c>>2]=f;q=a+20|0;n=k[q>>2]|0;k[c+4>>2]=n;k[n>>2]=c;k[q>>2]=c;n=a+24|0;k[n>>2]=(k[n>>2]|0)+1;n=a+4|0;b=k[n>>2]|0;l=a+8|0;d=k[l>>2]|0;if(b>>>0>=d>>>0){m=k[a>>2]|0;e=m;j=b-e|0;f=j>>2;h=f+1|0;if(h>>>0>1073741823)xa(1340,1363,303,1438);b=d-e|0;if(b>>2>>>0<536870911){b=b>>1;b=b>>>0<h>>>0?h:b;if(!b){b=0;d=0}else o=11}else{b=1073741823;o=11}if((o|0)==11){e=b<<2;e=(e|0)==0?1:e;d=_d(e)|0;b:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(e)|0;if(d)break b}q=ya(4)|0;k[q>>2]=128;La(q|0,8,1)}while(0)}k[d+(f<<2)>>2]=c;c=d+(h<<2)|0;fe(d|0,m|0,j|0)|0;k[a>>2]=d;k[n>>2]=c;k[l>>2]=d+(b<<2);if(m){$d(m);c=k[n>>2]|0}}else{k[b>>2]=c;c=(k[n>>2]|0)+4|0;k[n>>2]=c}j=k[a>>2]|0;o=c-j|0;f=o>>2;if((o|0)<=4){q=k[q>>2]|0;q=q+8|0;return q|0}h=(f+-2|0)/2|0;a=j+(h<<2)|0;d=c+-4|0;b=k[a>>2]|0;c=k[d>>2]|0;i=+p[c+24>>3];g=+p[b+24>>3];e=b;l=c;do if(i!=g)if(i<g){c=c+16|0;break}else{q=k[q>>2]|0;q=q+8|0;return q|0}else{c=c+16|0;if(!(+p[c>>3]<+p[b+16>>3])){q=k[q>>2]|0;q=q+8|0;return q|0}}while(0);k[d>>2]=e;c:do if((f+-1|0)>>>0>=3)while(1){b=h;h=(h+-1|0)/2|0;d=j+(h<<2)|0;e=k[d>>2]|0;g=+p[e+24>>3];f=e;if(i!=g){if(!(i<g))break c}else if(!(+p[c>>3]<+p[e+16>>3]))break c;k[a>>2]=f;if(b>>>0<3){a=d;break}else a=d}while(0);k[a>>2]=l;q=k[q>>2]|0;q=q+8|0;return q|0}function Pc(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0.0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;j=((c|0)<0)<<31>>31;n=be(a|0,((a|0)<0)<<31>>31|0,c|0,j|0)|0;a=L;j=be(c|0,j|0,e|0,((e|0)<0)<<31>>31|0)|0;c=L;p=((d|0)<0)<<31>>31;l=be(b|0,((b|0)<0)<<31>>31|0,d|0,p|0)|0;k=L;p=be(d|0,p|0,f|0,((f|0)<0)<<31>>31|0)|0;o=L;h=(a|0)<0;b=be(0,0,n|0,a|0)|0;a=h?L:a;e=(k|0)<0;m=be(0,0,l|0,k|0)|0;k=e?L:k;i=(c|0)<0;d=be(0,0,j|0,c|0)|0;c=i?L:c;f=(o|0)<0;q=be(0,0,p|0,o|0)|0;a=ne((f?q:p)|0,(f?L:o)|0,(h?b:n)|0,a|0)|0;b=L;c=ne((e?m:l)|0,k|0,(i?d:j)|0,c|0)|0;d=L;e=i^e;do if(h^f){if(!e){q=ge(a|0,b|0,c|0,d|0)|0;g=-(+(q>>>0)+4294967296.0*+(L>>>0));break}if(b>>>0>d>>>0|(b|0)==(d|0)&a>>>0>c>>>0){q=be(a|0,b|0,c|0,d|0)|0;g=-(+(q>>>0)+4294967296.0*+(L>>>0));break}else{q=be(c|0,d|0,a|0,b|0)|0;g=+(q>>>0)+4294967296.0*+(L>>>0);break}}else{if(e){q=ge(a|0,b|0,c|0,d|0)|0;g=+(q>>>0)+4294967296.0*+(L>>>0);break}if(b>>>0<d>>>0|(b|0)==(d|0)&a>>>0<c>>>0){q=be(c|0,d|0,a|0,b|0)|0;g=-(+(q>>>0)+4294967296.0*+(L>>>0));break}else{q=be(a|0,b|0,c|0,d|0)|0;g=+(q>>>0)+4294967296.0*+(L>>>0);break}}while(0);return (g==0.0?0:g<0.0?-1:1)|0}function Qc(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0.0,h=0,j=0,l=0,m=0.0,n=0,o=0,q=0,s=0,u=0,v=0,w=0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0,H=0.0,I=0,J=0,K=0.0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,Y=0,Z=0,_=0,$=0,aa=0.0,ba=0.0,ca=0.0,da=0.0,ea=0.0,fa=0.0,ga=0.0,ha=0.0,ia=0.0,ja=0.0,ka=0.0,la=0.0,ma=0.0,na=0.0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Kb=0,Lb=0;Ib=r;r=r+18272|0;bb=Ib+18008|0;Eb=Ib+16968|0;Fb=Ib+15928|0;Fa=Ib+15664|0;Ga=Ib+15404|0;Gb=Ib+15144|0;pa=Ib+14884|0;qa=Ib+14624|0;ib=Ib+14364|0;rb=Ib+14104|0;hb=Ib+13844|0;pb=Ib+13584|0;zb=Ib+13324|0;ra=Ib+13064|0;sa=Ib+12804|0;Cb=Ib+12544|0;ta=Ib+12284|0;ua=Ib+12024|0;Da=Ib+11764|0;Ea=Ib+11504|0;Xa=Ib+11244|0;xa=Ib+10984|0;za=Ib+10724|0;Ya=Ib+10464|0;Ba=Ib+10204|0;Ca=Ib+9944|0;yb=Ib+9684|0;Bb=Ib+9424|0;Ha=Ib+9164|0;Ia=Ib+8904|0;Ja=Ib+8644|0;Ka=Ib+8384|0;La=Ib+8124|0;Ma=Ib+7864|0;Na=Ib+7604|0;Oa=Ib+7344|0;Pa=Ib+7084|0;Qa=Ib+6824|0;Ra=Ib+6564|0;Za=Ib+6304|0;_a=Ib+6044|0;$a=Ib+5784|0;ab=Ib+5524|0;Db=Ib+48|0;Sa=Ib+5264|0;Ta=Ib+5004|0;Ua=Ib+4744|0;Va=Ib+4484|0;Wa=Ib+4224|0;cb=Ib+3964|0;db=Ib+3704|0;eb=Ib+3444|0;fb=Ib+3184|0;gb=Ib+2924|0;jb=Ib+32|0;kb=Ib+2664|0;lb=Ib+2404|0;mb=Ib+2144|0;nb=Ib+1884|0;ob=Ib+1624|0;qb=Ib+16|0;sb=Ib+1364|0;tb=Ib+1104|0;ub=Ib+844|0;vb=Ib+584|0;wb=Ib+324|0;xb=Ib+64|0;Ab=Ib;wa=d+12|0;v=k[wa>>2]|0;oa=d+4|0;q=k[oa>>2]|0;la=+(q|0);ma=+(v|0)-la;M=k[d>>2]|0;ja=+(M|0);Aa=d+8|0;N=k[Aa>>2]|0;na=ja-+(N|0);ya=c+4|0;O=k[ya>>2]|0;ga=+(O|0);va=b+4|0;P=k[va>>2]|0;ha=+(P|0);ba=ga-ha;Q=k[b>>2]|0;F=+(Q|0);R=k[c>>2]|0;aa=+(R|0);ia=F-aa;w=((v|0)<0)<<31>>31;s=((q|0)<0)<<31>>31;Z=be(v|0,w|0,q|0,s|0)|0;_=L;S=((M|0)<0)<<31>>31;T=((N|0)<0)<<31>>31;G=be(M|0,S|0,N|0,T|0)|0;I=L;U=((R|0)<0)<<31>>31;V=((Q|0)<0)<<31>>31;n=be(R|0,U|0,Q|0,V|0)|0;l=L;W=((O|0)<0)<<31>>31;Y=((P|0)<0)<<31>>31;j=be(O|0,W|0,P|0,Y|0)|0;h=L;$=(_|0)<0;J=be(0,0,Z|0,_|0)|0;Z=$?J:Z;_=$?L:_;J=(I|0)<0;o=be(0,0,G|0,I|0)|0;G=J?o:G;I=J?L:I;o=(l|0)<0;Jb=be(0,0,n|0,l|0)|0;l=o?L:l;u=(h|0)<0;Kb=be(0,0,j|0,h|0)|0;h=ne((u?Kb:j)|0,(u?L:h)|0,Z|0,_|0)|0;j=L;l=ne((o?Jb:n)|0,l|0,G|0,I|0)|0;n=L;o=J^o;do if($^u){if(!o){Kb=ge(l|0,n|0,h|0,j|0)|0;E=-(+(Kb>>>0)+4294967296.0*+(L>>>0));break}if(j>>>0>n>>>0|(j|0)==(n|0)&h>>>0>l>>>0){Kb=be(h|0,j|0,l|0,n|0)|0;E=-(+(Kb>>>0)+4294967296.0*+(L>>>0));break}else{Kb=be(l|0,n|0,h|0,j|0)|0;E=+(Kb>>>0)+4294967296.0*+(L>>>0);break}}else{if(o){Kb=ge(l|0,n|0,h|0,j|0)|0;E=+(Kb>>>0)+4294967296.0*+(L>>>0);break}if(j>>>0<n>>>0|(j|0)==(n|0)&h>>>0<l>>>0){Kb=be(l|0,n|0,h|0,j|0)|0;E=-(+(Kb>>>0)+4294967296.0*+(L>>>0));break}else{Kb=be(h|0,j|0,l|0,n|0)|0;E=+(Kb>>>0)+4294967296.0*+(L>>>0);break}}while(0);q=be(q|0,s|0,v|0,w|0)|0;s=L;n=be(v|0,w|0,P|0,Y|0)|0;l=L;j=be(N|0,T|0,Q|0,V|0)|0;h=L;u=(s|0)<0;o=be(0,0,q|0,s|0)|0;q=u?o:q;s=u?L:s;o=(l|0)<0;Jb=be(0,0,n|0,l|0)|0;l=o?L:l;Kb=(h|0)<0;Lb=be(0,0,j|0,h|0)|0;h=ne((Kb?Lb:j)|0,(Kb?L:h)|0,q|0,s|0)|0;j=L;l=ne((o?Jb:n)|0,l|0,G|0,I|0)|0;n=L;o=J^o;do if(u^Kb){if(!o){Lb=ge(h|0,j|0,l|0,n|0)|0;D=-(+(Lb>>>0)+4294967296.0*+(L>>>0));break}if(j>>>0>n>>>0|(j|0)==(n|0)&h>>>0>l>>>0){Lb=be(h|0,j|0,l|0,n|0)|0;D=-(+(Lb>>>0)+4294967296.0*+(L>>>0));break}else{Lb=be(l|0,n|0,h|0,j|0)|0;D=+(Lb>>>0)+4294967296.0*+(L>>>0);break}}else{if(o){Lb=ge(h|0,j|0,l|0,n|0)|0;D=+(Lb>>>0)+4294967296.0*+(L>>>0);break}if(j>>>0<n>>>0|(j|0)==(n|0)&h>>>0<l>>>0){Lb=be(l|0,n|0,h|0,j|0)|0;D=-(+(Lb>>>0)+4294967296.0*+(L>>>0));break}else{Lb=be(h|0,j|0,l|0,n|0)|0;D=+(Lb>>>0)+4294967296.0*+(L>>>0);break}}while(0);l=be(v|0,w|0,O|0,W|0)|0;j=L;o=be(N|0,T|0,R|0,U|0)|0;n=L;h=(j|0)<0;Kb=be(0,0,l|0,j|0)|0;j=h?L:j;Lb=(n|0)<0;Jb=be(0,0,o|0,n|0)|0;n=ne((Lb?Jb:o)|0,(Lb?L:n)|0,q|0,s|0)|0;o=L;j=ne((h?Kb:l)|0,j|0,G|0,I|0)|0;l=L;h=J^h;do if(u^Lb){if(!h){Lb=ge(n|0,o|0,j|0,l|0)|0;z=-(+(Lb>>>0)+4294967296.0*+(L>>>0));break}if(o>>>0>l>>>0|(o|0)==(l|0)&n>>>0>j>>>0){Lb=be(n|0,o|0,j|0,l|0)|0;z=-(+(Lb>>>0)+4294967296.0*+(L>>>0));break}else{Lb=be(j|0,l|0,n|0,o|0)|0;z=+(Lb>>>0)+4294967296.0*+(L>>>0);break}}else{if(h){Lb=ge(n|0,o|0,j|0,l|0)|0;z=+(Lb>>>0)+4294967296.0*+(L>>>0);break}if(o>>>0<l>>>0|(o|0)==(l|0)&n>>>0<j>>>0){Lb=be(j|0,l|0,n|0,o|0)|0;z=-(+(Lb>>>0)+4294967296.0*+(L>>>0));break}else{Lb=be(n|0,o|0,j|0,l|0)|0;z=+(Lb>>>0)+4294967296.0*+(L>>>0);break}}while(0);o=be(P|0,Y|0,O|0,W|0)|0;n=L;l=be(Q|0,V|0,R|0,U|0)|0;j=L;V=be(N|0,T|0,M|0,S|0)|0;W=L;Kb=(n|0)<0;Y=be(0,0,o|0,n|0)|0;n=Kb?L:n;h=(j|0)<0;Jb=be(0,0,l|0,j|0)|0;j=h?L:j;Lb=(W|0)<0;U=be(0,0,V|0,W|0)|0;n=ne((Lb?U:V)|0,(Lb?L:W)|0,(Kb?Y:o)|0,n|0)|0;o=L;j=ne(Z|0,_|0,(h?Jb:l)|0,j|0)|0;l=L;h=h^$;do if(Kb^Lb){if(!h){Lb=ge(n|0,o|0,j|0,l|0)|0;y=-(+(Lb>>>0)+4294967296.0*+(L>>>0));break}if(o>>>0>l>>>0|(o|0)==(l|0)&n>>>0>j>>>0){Lb=be(n|0,o|0,j|0,l|0)|0;y=-(+(Lb>>>0)+4294967296.0*+(L>>>0));break}else{Lb=be(j|0,l|0,n|0,o|0)|0;y=+(Lb>>>0)+4294967296.0*+(L>>>0);break}}else{if(h){Lb=ge(n|0,o|0,j|0,l|0)|0;y=+(Lb>>>0)+4294967296.0*+(L>>>0);break}if(o>>>0<l>>>0|(o|0)==(l|0)&n>>>0<j>>>0){Lb=be(j|0,l|0,n|0,o|0)|0;y=-(+(Lb>>>0)+4294967296.0*+(L>>>0));break}else{Lb=be(n|0,o|0,j|0,l|0)|0;y=+(Lb>>>0)+4294967296.0*+(L>>>0);break}}while(0);ka=1.0/+X(+(ma*ma+na*na));do if(y==0.0){m=E/(D*8.0);if(m<0.0){g=0.0-m;if(m>0.0){m=(m*4.0+0.0)/g;m=m<0.0?-m:m}else m=4.0;A=g;z=m+1.0;y=0.0;x=0.0}else{A=0.0;z=0.0;y=m+0.0;x=5.0}g=D/(E*2.0);if(g<0.0){m=y-g;if(y<0.0|g>0.0){g=(y*x+g*4.0)/m;g=g<0.0?-g:g}else g=x<4.0?4.0:x;x=g+1.0;K=z;y=m;H=A;break}else{m=A+g;if(A<0.0?A>0.0|g>0.0:0){K=(A*z-g*4.0)/m;K=(K<0.0?-K:K)+1.0;H=m;break}K=z<4.0?5.0:z+1.0;H=m;break}}else{m=y*y;m=+X(+(z*(D*(E*E+m))))/m;h=m<0.0;do if((e|0)==2){if(!h){C=0.0;x=0.0;B=m+0.0;A=10.0;break}g=0.0-m;if(m>0.0){m=(m*9.0+0.0)/g;m=m<0.0?-m:m}else m=9.0;C=g;x=m+1.0;B=0.0;A=0.0}else{if(!h){C=m+0.0;x=10.0;B=0.0;A=0.0;break}g=0.0-m;if(m>0.0){m=(m*9.0+0.0)/g;m=m<0.0?-m:m}else m=9.0;C=0.0;x=0.0;B=g;A=m+1.0}while(0);m=D+z;if(D<0.0|z<0.0?D>0.0|z>0.0:0){g=(D-z)/m;if(g<0.0)g=-g}else g=1.0;m=E*m/(y*(y*2.0));g=g+1.0+1.0+1.0+4.0+1.0;if(m<0.0){z=B-m;if(B<0.0|m>0.0){g=(B*A+m*g)/z;g=g<0.0?-g:g}else g=A<g?g:A;K=g+1.0;y=C;H=z;break}else{y=C+m;if(C<0.0?C>0.0|m>0.0:0){x=(C*x-m*g)/y;x=(x<0.0?-x:x)+1.0;K=A;H=B;break}x=(x<g?g:x)+1.0;K=A;H=B;break}}while(0);g=(F+aa)*.5;if(g<0.0){m=0.0-g;if(g>0.0){g=(g*0.0+0.0)/m;g=g<0.0?-g:g}else g=0.0;C=0.0;D=0.0;F=g+1.0}else{C=g+0.0;D=1.0;m=0.0;F=0.0}if(ba<0.0){A=-ba;g=x;E=y*A;z=K;A=H*A}else{g=K;E=ba*H;z=x;A=ba*y}B=g+0.0+1.0;g=z+0.0+1.0;fa=C+A;if(C<0.0|A<0.0?C>0.0|A>0.0:0){g=(C*D-A*g)/fa;g=g<0.0?-g:g}else g=D<g?g:D;da=g+1.0;ea=m+E;if(m<0.0|E<0.0?m>0.0|E>0.0:0){g=(m*F-E*B)/ea;g=g<0.0?-g:g}else g=F<B?B:F;ca=g+1.0;g=(ha+ga)*.5;if(g<0.0){m=0.0-g;if(g>0.0){g=(g*0.0+0.0)/m;g=g<0.0?-g:g}else g=0.0;A=0.0;B=0.0;D=g+1.0}else{A=g+0.0;B=1.0;m=0.0;D=0.0}if(ia<0.0){ia=-ia;z=x;C=y*ia;g=K;x=H*ia}else{z=K;C=ia*H;g=x;x=ia*y}y=z+0.0+1.0;g=g+0.0+1.0;ba=A+x;if(A<0.0|x<0.0?A>0.0|x>0.0:0){g=(A*B-x*g)/ba;g=g<0.0?-g:g}else g=B<g?g:B;K=g+1.0;aa=m+C;if(m<0.0|C<0.0?m>0.0|C>0.0:0){g=(m*D-C*y)/aa;g=g<0.0?-g:g}else g=D<y?y:D;H=g+1.0;g=ma*ja;if(g<0.0){m=0.0-g;if(g>0.0){g=(g+0.0)/m;g=g<0.0?-g:g}else g=1.0;z=0.0;A=0.0;y=g+1.0}else{z=g+0.0;A=2.0;m=0.0;y=0.0}g=na*la;do if(g<0.0){x=m-g;if(m<0.0|g>0.0){g=(m*y+g)/x;g=g<0.0?-g:g}else g=y<1.0?1.0:y;m=x;C=g+1.0;x=z;D=A}else{x=z+g;if(z<0.0?z>0.0|g>0.0:0){D=(z*A-g)/x;C=y;D=(D<0.0?-D:D)+1.0;break}C=y;D=A<1.0?2.0:A+1.0}while(0);if(ma<0.0){z=-ma;g=da;B=fa*z;y=ca;z=ea*z}else{g=ca;B=ma*ea;y=da;z=ma*fa}A=g+0.0+1.0;g=y+0.0+1.0;F=m+z;if(m<0.0|z<0.0?m>0.0|z>0.0:0){g=(m*C-z*g)/F;g=g<0.0?-g:g}else g=C<g?g:C;C=g+1.0;E=x+B;if(x<0.0|B<0.0?x>0.0|B>0.0:0){g=(x*D-B*A)/E;g=g<0.0?-g:g}else g=D<A?A:D;B=g+1.0;if(na<0.0){x=-na;g=K;z=ba*x;m=H;x=aa*x}else{g=H;z=na*aa;m=K;x=na*ba}y=g+0.0+1.0;g=m+0.0+1.0;m=F+x;do if(F<0.0|x<0.0){if(!(F>0.0|x>0.0)){Hb=146;break}g=(F*C-x*g)/m;g=g<0.0?-g:g}else Hb=146;while(0);if((Hb|0)==146)g=C<g?g:C;x=g+1.0;A=E+z;do if(E<0.0|z<0.0){if(!(E>0.0|z>0.0)){Hb=150;break}g=(E*B-z*y)/A;g=g<0.0?-g:g}else Hb=150;while(0);if((Hb|0)==150)g=B<y?y:B;g=g+1.0;if(m<A){y=g;g=x;z=A}else{y=x;z=m;m=A}if(ka<0.0){x=g;g=y;A=-(ka*z);m=-(ka*m)}else{x=y;A=ka*m;m=ka*z}y=g+3.0+1.0;g=x+3.0+1.0;C=fa+m;l=fa<0.0;do if(l|m<0.0){if(!(fa>0.0|m>0.0)){Hb=159;break}g=(fa*da-m*g)/C;g=g<0.0?-g:g}else Hb=159;while(0);if((Hb|0)==159)g=da<g?g:da;z=g+1.0;B=ea+A;h=ea<0.0;do if(h|A<0.0){if(!(ea>0.0|A>0.0)){Hb=163;break}g=(ea*ca-A*y)/B;g=g<0.0?-g:g}else Hb=163;while(0);if((Hb|0)==163)g=ca<y?y:ca;x=g+1.0;g=fa-ea;m=ba-aa;j=ba<0.0|aa>0.0;y=C-B;n=C<0.0|B>0.0;p[f>>3]=g;O=f+8|0;p[O>>3]=m;P=f+16|0;p[P>>3]=y;i[f+24>>0]=1;do if((l|ea>0.0)&(fa>0.0|h)){g=(fa*da+ea*ca)/g;if(!(g<0.0))break;g=-g}else g=da<ca?ca:da;while(0);J=g+1.0>64.0;do if(j){if(!(ba>0.0|aa<0.0)){Hb=171;break}g=(ba*K+aa*H)/m;if(!(g<0.0))break;g=-g}else Hb=171;while(0);if((Hb|0)==171)g=K<H?H:K;M=g+1.0>64.0;do if(n){if(!(C>0.0|B<0.0)){Hb=176;break}g=(C*z+B*x)/y;if(!(g<0.0))break;g=-g}else Hb=176;while(0);if((Hb|0)==176)g=z<x?x:z;N=g+1.0>64.0;if(!(J|M|N)){r=Ib;return}j=k[wa>>2]|0;h=k[oa>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Kb=be(0,0,h|0,j|0)|0;Lb=L;k[Fa>>2]=Kb;k[Fa+4>>2]=Lb;k[Fa+256>>2]=(Lb|0)!=0?-2:-1;break}else{k[Fa+256>>2]=0;break}else{k[Fa>>2]=h;k[Fa+4>>2]=j;k[Fa+256>>2]=(j|0)!=0?2:1}while(0);j=k[d>>2]|0;h=k[Aa>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Kb=be(0,0,h|0,j|0)|0;Lb=L;k[Ga>>2]=Kb;k[Ga+4>>2]=Lb;k[Ga+256>>2]=(Lb|0)!=0?-2:-1;break}else{k[Ga+256>>2]=0;break}else{k[Ga>>2]=h;k[Ga+4>>2]=j;k[Ga+256>>2]=(j|0)!=0?2:1}while(0);Sc(pa,Fa,Fa);Sc(qa,Ga,Ga);Tc(Gb,pa,qa);s=k[ya>>2]|0;u=((s|0)<0)<<31>>31;v=k[va>>2]|0;w=((v|0)<0)<<31>>31;h=be(s|0,u|0,v|0,w|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Lb=be(0,0,h|0,j|0)|0;G=L;k[ib>>2]=Lb;k[ib+4>>2]=G;G=(G|0)!=0?-2:-1;k[ib+256>>2]=G;break}else{k[ib+256>>2]=0;G=0;break}else{k[ib>>2]=h;k[ib+4>>2]=j;G=(j|0)!=0?2:1;k[ib+256>>2]=G}while(0);l=k[b>>2]|0;n=((l|0)<0)<<31>>31;o=k[c>>2]|0;q=((o|0)<0)<<31>>31;h=be(l|0,n|0,o|0,q|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Lb=be(0,0,h|0,j|0)|0;I=L;k[rb>>2]=Lb;k[rb+4>>2]=I;I=(I|0)!=0?-2:-1;k[rb+256>>2]=I;break}else{k[rb+256>>2]=0;I=0;break}else{k[rb>>2]=h;k[rb+4>>2]=j;I=(j|0)!=0?2:1;k[rb+256>>2]=I}while(0);h=ge(o|0,q|0,l|0,n|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Kb=be(0,0,h|0,j|0)|0;Lb=L;k[hb>>2]=Kb;k[hb+4>>2]=Lb;k[hb+256>>2]=(Lb|0)!=0?-2:-1;break}else{k[hb+256>>2]=0;break}else{k[hb>>2]=h;k[hb+4>>2]=j;k[hb+256>>2]=(j|0)!=0?2:1}while(0);h=ge(s|0,u|0,v|0,w|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Kb=be(0,0,h|0,j|0)|0;Lb=L;k[pb>>2]=Kb;k[pb+4>>2]=Lb;k[pb+256>>2]=(Lb|0)!=0?-2:-1;break}else{k[pb+256>>2]=0;break}else{k[pb>>2]=h;k[pb+4>>2]=j;k[pb+256>>2]=(j|0)!=0?2:1}while(0);Sc(ra,Fa,ib);Sc(sa,Ga,rb);Tc(zb,ra,sa);Sc(ta,ib,Ga);Sc(ua,rb,Fa);Uc(Cb,ta,ua);j=k[wa>>2]|0;h=k[va>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Kb=be(0,0,h|0,j|0)|0;Lb=L;k[Da>>2]=Kb;k[Da+4>>2]=Lb;k[Da+256>>2]=(Lb|0)!=0?-2:-1;break}else{k[Da+256>>2]=0;break}else{k[Da>>2]=h;k[Da+4>>2]=j;k[Da+256>>2]=(j|0)!=0?2:1}while(0);j=k[b>>2]|0;h=k[Aa>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Kb=be(0,0,h|0,j|0)|0;Lb=L;k[Ea>>2]=Kb;k[Ea+4>>2]=Lb;k[Ea+256>>2]=(Lb|0)!=0?-2:-1;break}else{k[Ea+256>>2]=0;break}else{k[Ea>>2]=h;k[Ea+4>>2]=j;k[Ea+256>>2]=(j|0)!=0?2:1}while(0);Sc(xa,Fa,Ea);Sc(za,Ga,Da);Uc(Xa,xa,za);j=k[wa>>2]|0;h=k[ya>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Kb=be(0,0,h|0,j|0)|0;Lb=L;k[Da>>2]=Kb;k[Da+4>>2]=Lb;k[Da+256>>2]=(Lb|0)!=0?-2:-1;break}else{k[Da+256>>2]=0;break}else{k[Da>>2]=h;k[Da+4>>2]=j;k[Da+256>>2]=(j|0)!=0?2:1}while(0);j=k[c>>2]|0;h=k[Aa>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Kb=be(0,0,h|0,j|0)|0;Lb=L;k[Ea>>2]=Kb;k[Ea+4>>2]=Lb;k[Ea+256>>2]=(Lb|0)!=0?-2:-1;break}else{k[Ea+256>>2]=0;break}else{k[Ea>>2]=h;k[Ea+4>>2]=j;k[Ea+256>>2]=(j|0)!=0?2:1}while(0);Sc(Ba,Fa,Ea);Sc(Ca,Ga,Da);Uc(Ya,Ba,Ca);Tc(yb,Xa,Ya);h=Cb+256|0;if(!(k[h>>2]|0)){Sc(Ha,zb,zb);Sc(Ia,yb,yb);Uc(Bb,Ha,Ia);Sc(Ja,zb,yb);fe(Cb|0,Ja|0,260)|0;Sc(La,Cb,hb);k[bb>>2]=2;k[bb+256>>2]=1;Sc(Ma,La,bb);Sc(Na,Bb,ib);Tc(Ka,Ma,Na);fe(Eb|0,Ka|0,260)|0;fe(Fb|0,Gb|0,260)|0;Sc(Pa,Cb,yb);k[bb>>2]=2;k[bb+256>>2]=1;Sc(Qa,Pa,bb);Sc(Ra,Bb,zb);Tc(Oa,Qa,Ra);fe(Eb+260|0,Oa|0,260)|0;k[Fb+260>>2]=1;k[Fb+516>>2]=1;n=Eb+520|0;Sc(_a,Cb,pb);k[bb>>2]=2;k[bb+256>>2]=1;Sc($a,_a,bb);Sc(ab,Bb,rb);Tc(Za,$a,ab);fe(n|0,Za|0,260)|0;j=k[h>>2]|0;h=(j|0)>-1?j:0-j|0;a:do switch(h|0){case 0:{h=0;g=0.0;break}case 1:{g=+((k[Cb>>2]|0)>>>0);Hb=234;break}case 2:{g=+((k[Cb+4>>2]|0)>>>0)*4294967296.0+ +((k[Cb>>2]|0)>>>0);Hb=234;break}default:{g=+((k[Cb+(h+-3<<2)>>2]|0)>>>0)+(+((k[Cb+(h+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Cb+(h+-2<<2)>>2]|0)>>>0))*4294967296.0;l=h<<5;h=l+-96|0;g=(j|0)<0?-g:g;if((h|0)>1023){g=g*89884656743115795.0e291;h=l+-1119|0;if((h|0)<=1023)break a;h=l+-2142|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291;break a}if((h|0)>=-1022)break a;g=g*2.2250738585072014e-308;h=l+926|0;if((h|0)>=-1022)break a;h=l+1948|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}}while(0);if((Hb|0)==234){h=0;g=(j|0)<0?-g:g}Kb=ee(h+1023|0,0,52)|0;Lb=L;k[t>>2]=Kb;k[t+4>>2]=Lb;m=1.0/(g*+p[t>>3]);if(J){j=k[Eb+256>>2]|0;h=(j|0)>-1?j:0-j|0;b:do switch(h|0){case 0:{h=0;g=0.0;break}case 1:{g=+((k[Eb>>2]|0)>>>0);Hb=245;break}case 2:{g=+((k[Eb+4>>2]|0)>>>0)*4294967296.0+ +((k[Eb>>2]|0)>>>0);Hb=245;break}default:{g=+((k[Eb+(h+-3<<2)>>2]|0)>>>0)+(+((k[Eb+(h+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Eb+(h+-2<<2)>>2]|0)>>>0))*4294967296.0;l=h<<5;h=l+-96|0;g=(j|0)<0?-g:g;if((h|0)>1023){g=g*89884656743115795.0e291;h=l+-1119|0;if((h|0)<=1023)break b;h=l+-2142|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291;break b}if((h|0)>=-1022)break b;g=g*2.2250738585072014e-308;h=l+926|0;if((h|0)>=-1022)break b;h=l+1948|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}}while(0);if((Hb|0)==245){h=0;g=(j|0)<0?-g:g}Kb=ee(h+1023|0,0,52)|0;Lb=L;k[t>>2]=Kb;k[t+4>>2]=Lb;p[f>>3]=m*(g*+p[t>>3]*.25)}if(M){j=k[Eb+776>>2]|0;h=(j|0)>-1?j:0-j|0;c:do switch(h|0){case 0:{h=0;g=0.0;break}case 1:{g=+((k[n>>2]|0)>>>0);Hb=257;break}case 2:{g=+((k[Eb+524>>2]|0)>>>0)*4294967296.0+ +((k[n>>2]|0)>>>0);Hb=257;break}default:{g=+((k[Eb+520+(h+-3<<2)>>2]|0)>>>0)+(+((k[Eb+520+(h+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Eb+520+(h+-2<<2)>>2]|0)>>>0))*4294967296.0;l=h<<5;h=l+-96|0;g=(j|0)<0?-g:g;if((h|0)>1023){g=g*89884656743115795.0e291;h=l+-1119|0;if((h|0)<=1023)break c;h=l+-2142|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291;break c}if((h|0)>=-1022)break c;g=g*2.2250738585072014e-308;h=l+926|0;if((h|0)>=-1022)break c;h=l+1948|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}}while(0);if((Hb|0)==257){h=0;g=(j|0)<0?-g:g}Kb=ee(h+1023|0,0,52)|0;Lb=L;k[t>>2]=Kb;k[t+4>>2]=Lb;p[O>>3]=m*(g*+p[t>>3]*.25)}if(N){Xc(Db,Eb,Fb);g=+p[Db>>3];j=k[Db+8>>2]|0;do if((j|0)>1023){g=g*89884656743115795.0e291;h=j+-1023|0;if((h|0)<=1023)break;h=j+-2046|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291}else{if((j|0)>=-1022){h=j;break}g=g*2.2250738585072014e-308;h=j+1022|0;if((h|0)>=-1022)break;h=j+2044|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}while(0);h=ee(h+1023|0,0,52)|0;j=L;k[t>>2]=h;k[t+4>>2]=j;m=m*(g*+p[t>>3]*.25);j=k[Gb+256>>2]|0;h=(j|0)>-1?j:0-j|0;d:do switch(h|0){case 0:{h=0;g=0.0;break}case 1:{g=+((k[Gb>>2]|0)>>>0);Hb=275;break}case 2:{g=+((k[Gb+4>>2]|0)>>>0)*4294967296.0+ +((k[Gb>>2]|0)>>>0);Hb=275;break}default:{g=+((k[Gb+(h+-3<<2)>>2]|0)>>>0)+(+((k[Gb+(h+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Gb+(h+-2<<2)>>2]|0)>>>0))*4294967296.0;l=h<<5;h=l+-96|0;g=(j|0)<0?-g:g;if((h|0)>1023){g=g*89884656743115795.0e291;h=l+-1119|0;if((h|0)<=1023)break d;h=l+-2142|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291;break d}if((h|0)>=-1022)break d;g=g*2.2250738585072014e-308;h=l+926|0;if((h|0)>=-1022)break d;h=l+1948|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}}while(0);if((Hb|0)==275){h=0;g=(j|0)<0?-g:g}Kb=ee(h+1023|0,0,52)|0;Lb=L;k[t>>2]=Kb;k[t+4>>2]=Lb;na=m/+X(+(g*+p[t>>3]));p[P>>3]=na}}else{Sc(Sa,zb,zb);Sc(Ta,Cb,Cb);Tc(Ua,Sa,Ta);Sc(Va,Ua,Xa);Sc(Wa,Va,Ya);k[bb>>2]=4;k[bb+256>>2]=1;Sc(Bb,Wa,bb);j=k[h>>2]|0;h=(j|0)>-1?j:0-j|0;e:do switch(h|0){case 0:{h=0;g=0.0;break}case 1:{g=+((k[Cb>>2]|0)>>>0);Hb=287;break}case 2:{g=+((k[Cb+4>>2]|0)>>>0)*4294967296.0+ +((k[Cb>>2]|0)>>>0);Hb=287;break}default:{g=+((k[Cb+(h+-3<<2)>>2]|0)>>>0)+(+((k[Cb+(h+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Cb+(h+-2<<2)>>2]|0)>>>0))*4294967296.0;l=h<<5;h=l+-96|0;g=(j|0)<0?-g:g;if((h|0)>1023){g=g*89884656743115795.0e291;h=l+-1119|0;if((h|0)<=1023)break e;h=l+-2142|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291;break e}if((h|0)>=-1022)break e;g=g*2.2250738585072014e-308;h=l+926|0;if((h|0)>=-1022)break e;h=l+1948|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}}while(0);if((Hb|0)==287){h=0;g=(j|0)<0?-g:g}Kb=ee(h+1023|0,0,52)|0;Lb=L;k[t>>2]=Kb;k[t+4>>2]=Lb;m=1.0/(g*+p[t>>3]);m=m*m;do if(J|N){Sc(db,hb,Cb);Sc(eb,db,Cb);Sc(gb,zb,yb);Sc(fb,gb,ib);Tc(cb,eb,fb);fe(Eb|0,cb|0,260)|0;k[Fb>>2]=1;k[Fb+256>>2]=1;fe(Eb+260|0,ib|0,256)|0;k[Eb+516>>2]=(e|0)==2?0-G|0:G;fe(Fb+260|0,Bb|0,260)|0;if(!J)break;Xc(jb,Eb,Fb);g=+p[jb>>3];j=k[jb+8>>2]|0;do if((j|0)>1023){g=g*89884656743115795.0e291;h=j+-1023|0;if((h|0)<=1023)break;h=j+-2046|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291}else{if((j|0)>=-1022){h=j;break}g=g*2.2250738585072014e-308;h=j+1022|0;if((h|0)>=-1022)break;h=j+2044|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}while(0);Kb=ee(h+1023|0,0,52)|0;Lb=L;k[t>>2]=Kb;k[t+4>>2]=Lb;p[f>>3]=m*(g*+p[t>>3]*.5)}while(0);do if(M|N){j=Eb+520|0;Sc(lb,pb,Cb);Sc(mb,lb,Cb);Sc(ob,zb,yb);Sc(nb,ob,rb);Tc(kb,mb,nb);fe(j|0,kb|0,260)|0;h=Fb+520|0;k[h>>2]=1;k[Fb+776>>2]=1;fe(Eb+780|0,rb|0,256)|0;k[Eb+1036>>2]=(e|0)==2?0-I|0:I;fe(Fb+780|0,Bb|0,260)|0;if(!M)break;Xc(qb,j,h);g=+p[qb>>3];j=k[qb+8>>2]|0;do if((j|0)>1023){g=g*89884656743115795.0e291;h=j+-1023|0;if((h|0)<=1023)break;h=j+-2046|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291}else{if((j|0)>=-1022){h=j;break}g=g*2.2250738585072014e-308;h=j+1022|0;if((h|0)>=-1022)break;h=j+2044|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}while(0);Kb=ee(h+1023|0,0,52)|0;Lb=L;k[t>>2]=Kb;k[t+4>>2]=Lb;p[O>>3]=m*(g*+p[t>>3]*.5)}while(0);if(N){Sc(sb,Fb,Gb);fe(Fb|0,sb|0,260)|0;j=Fb+260|0;Sc(tb,j,Gb);fe(j|0,tb|0,260)|0;Sc(wb,Cb,Cb);Sc(xb,zb,zb);Tc(vb,wb,xb);Sc(ub,yb,vb);fe(Eb+520|0,ub|0,260)|0;k[Fb+520>>2]=1;k[Fb+776>>2]=1;j=k[zb+256>>2]|0;fe(Eb+780|0,zb|0,256)|0;k[Eb+1036>>2]=(e|0)==2?0-j|0:j;fe(Fb+780|0,Bb|0,260)|0;Wc(Ab,a,Eb,Fb);g=+p[Ab>>3];j=k[Ab+8>>2]|0;do if((j|0)>1023){g=g*89884656743115795.0e291;h=j+-1023|0;if((h|0)<=1023)break;h=j+-2046|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291}else{if((j|0)>=-1022){h=j;break}g=g*2.2250738585072014e-308;h=j+1022|0;if((h|0)>=-1022)break;h=j+2044|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}while(0);h=ee(h+1023|0,0,52)|0;j=L;k[t>>2]=h;k[t+4>>2]=j;m=m*(g*+p[t>>3]*.5);j=k[Gb+256>>2]|0;h=(j|0)>-1?j:0-j|0;f:do switch(h|0){case 0:{h=0;g=0.0;break}case 1:{g=+((k[Gb>>2]|0)>>>0);Hb=322;break}case 2:{g=+((k[Gb+4>>2]|0)>>>0)*4294967296.0+ +((k[Gb>>2]|0)>>>0);Hb=322;break}default:{g=+((k[Gb+(h+-3<<2)>>2]|0)>>>0)+(+((k[Gb+(h+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Gb+(h+-2<<2)>>2]|0)>>>0))*4294967296.0;l=h<<5;h=l+-96|0;g=(j|0)<0?-g:g;if((h|0)>1023){g=g*89884656743115795.0e291;h=l+-1119|0;if((h|0)<=1023)break f;h=l+-2142|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291;break f}if((h|0)>=-1022)break f;g=g*2.2250738585072014e-308;h=l+926|0;if((h|0)>=-1022)break f;h=l+1948|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}}while(0);if((Hb|0)==322){h=0;g=(j|0)<0?-g:g}Kb=ee(h+1023|0,0,52)|0;Lb=L;k[t>>2]=Kb;k[t+4>>2]=Lb;na=m/+X(+(g*+p[t>>3]));p[P>>3]=na}}r=Ib;return}function Rc(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0.0,h=0,j=0,l=0,m=0.0,n=0,o=0.0,q=0,s=0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0,D=0.0,E=0.0,F=0,G=0.0,H=0,I=0.0,J=0.0,K=0.0,M=0,N=0,O=0.0,P=0,Q=0,R=0,S=0,T=0.0,U=0.0,V=0,W=0,Y=0,Z=0,_=0,$=0,aa=0.0,ba=0,ca=0.0,da=0,ea=0.0,fa=0.0,ga=0.0,ia=0.0,ja=0.0,ka=0,la=0,ma=0.0,na=0,oa=0,pa=0,qa=0.0,ra=0,sa=0.0,ta=0.0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0.0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0,kb=0,lb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Kb=0,Lb=0,Mb=0,Nb=0,Ob=0,Pb=0,Qb=0,Rb=0,Sb=0,Tb=0,Ub=0,Vb=0,Wb=0,Xb=0,Yb=0,Zb=0,_b=0,$b=0,ac=0,bc=0,cc=0,dc=0,ec=0,fc=0,gc=0,hc=0,ic=0,jc=0,kc=0,lc=0,mc=0,nc=0,oc=0,pc=0,qc=0,rc=0,sc=0,tc=0,uc=0,vc=0,wc=0,xc=0,yc=0,zc=0,Ac=0,Bc=0,Cc=0,Dc=0,Ec=0,Fc=0,Gc=0,Hc=0,Ic=0,Jc=0,Kc=0,Lc=0,Mc=0,Nc=0,Oc=0,Pc=0,Qc=0,Rc=0,Wc=0,Yc=0,Zc=0,_c=0,$c=0,bd=0,cd=0,dd=0,ed=0,fd=0,gd=0,hd=0,id=0,jd=0,kd=0,ld=0;ld=r;r=r+34960|0;id=ld+34696|0;gd=ld+34176|0;hd=ld+33656|0;cd=ld+33136|0;jd=ld+32096|0;kd=ld+31056|0;Oc=ld+30792|0;Ca=ld+30532|0;Da=ld+30272|0;Ha=ld+30012|0;Ea=ld+29752|0;Fa=ld+29492|0;wb=ld+29232|0;xb=ld+28972|0;yb=ld+28712|0;dd=ld+28452|0;zb=ld+28192|0;Ab=ld+27932|0;fd=ld+27672|0;Bb=ld+27412|0;Cb=ld+27152|0;$b=ld+26892|0;Db=ld+26632|0;Eb=ld+26372|0;Fb=ld+26112|0;Gb=ld+25852|0;ac=ld+25592|0;bc=ld+25332|0;cc=ld+25072|0;dc=ld+96|0;Pc=ld+24812|0;Cc=ld+24552|0;Dc=ld+24292|0;Ec=ld+24032|0;Fc=ld+23772|0;Qc=ld+23512|0;Rc=ld+23252|0;Wc=ld+22992|0;Yc=ld+80|0;Zc=ld+22732|0;_c=ld+22472|0;$c=ld+22212|0;bd=ld+64|0;Ia=ld+21952|0;Ja=ld+21692|0;Ka=ld+21432|0;Na=ld+21172|0;Oa=ld+20912|0;Pa=ld+20652|0;Qa=ld+20392|0;Ra=ld+20132|0;Sa=ld+19872|0;Ta=ld+19612|0;Lc=ld+19352|0;Ua=ld+19092|0;Mc=ld+18832|0;Va=ld+18572|0;xc=ld+18312|0;Wa=ld+18052|0;Xa=ld+17792|0;Ya=ld+17532|0;Za=ld+17272|0;_a=ld+17012|0;$a=ld+16752|0;ab=ld+16492|0;bb=ld+16232|0;cb=ld+15972|0;db=ld+15712|0;eb=ld+15452|0;fb=ld+15192|0;gb=ld+14932|0;hb=ld+14672|0;ib=ld+14412|0;jb=ld+14152|0;kb=ld+13892|0;lb=ld+13632|0;mb=ld+13372|0;nb=ld+13112|0;ob=ld+12852|0;pb=ld+12592|0;qb=ld+12332|0;rb=ld+12072|0;sb=ld+11812|0;tb=ld+11552|0;ub=ld+11292|0;vb=ld+48|0;Hb=ld+11032|0;Ib=ld+10772|0;Jb=ld+10512|0;Kb=ld+10252|0;Lb=ld+9992|0;Mb=ld+9732|0;Nb=ld+9472|0;Ob=ld+9212|0;Pb=ld+8952|0;Qb=ld+8692|0;Rb=ld+8432|0;Sb=ld+8172|0;Tb=ld+7912|0;Ub=ld+7652|0;Vb=ld+7392|0;Wb=ld+7132|0;Xb=ld+6872|0;Yb=ld+6612|0;Zb=ld+6352|0;_b=ld+32|0;rc=ld+6092|0;sc=ld+5832|0;tc=ld+5572|0;uc=ld+5312|0;vc=ld+5052|0;wc=ld+4792|0;ec=ld+4532|0;fc=ld+4272|0;gc=ld+4012|0;hc=ld+3752|0;ic=ld+3492|0;jc=ld+3232|0;kc=ld+2972|0;lc=ld+2712|0;mc=ld+2452|0;nc=ld+2192|0;oc=ld+1932|0;pc=ld+1672|0;qc=ld+1412|0;yc=ld+16|0;Gc=ld+1152|0;Hc=ld+892|0;Ic=ld+632|0;Jc=ld+372|0;Kc=ld+112|0;Nc=ld;C=k[c>>2]|0;zc=c+8|0;s=k[zc>>2]|0;o=+(s|0);aa=+(C|0)-o;Ga=c+4|0;W=k[Ga>>2]|0;Ac=c+12|0;M=k[Ac>>2]|0;x=+(M|0);ca=+(W|0)-x;Ma=d+8|0;$=k[Ma>>2]|0;P=k[d>>2]|0;u=+(P|0);B=+($|0)-u;La=d+12|0;Y=k[La>>2]|0;Bc=d+4|0;R=k[Bc>>2]|0;y=+(R|0);I=+(Y|0)-y;F=((W|0)<0)<<31>>31;N=((M|0)<0)<<31>>31;ua=be(W|0,F|0,M|0,N|0)|0;va=L;V=((C|0)<0)<<31>>31;H=((s|0)<0)<<31>>31;wa=be(C|0,V|0,s|0,H|0)|0;xa=L;Z=((Y|0)<0)<<31>>31;S=((R|0)<0)<<31>>31;na=be(Y|0,Z|0,R|0,S|0)|0;oa=L;_=(($|0)<0)<<31>>31;Q=((P|0)<0)<<31>>31;ka=be($|0,_|0,P|0,Q|0)|0;la=L;ya=(va|0)<0;za=be(0,0,ua|0,va|0)|0;ua=ya?za:ua;va=ya?L:va;za=(xa|0)<0;pa=be(0,0,wa|0,xa|0)|0;wa=za?pa:wa;xa=za?L:xa;pa=(oa|0)<0;ra=be(0,0,na|0,oa|0)|0;na=pa?ra:na;oa=pa?L:oa;ra=(la|0)<0;h=be(0,0,ka|0,la|0)|0;ka=ra?h:ka;la=ra?L:la;h=ne(ka|0,la|0,ua|0,va|0)|0;j=L;l=ne(na|0,oa|0,wa|0,xa|0)|0;n=L;q=za^pa;do if(ya^ra){if(!q){Aa=ge(l|0,n|0,h|0,j|0)|0;Ba=-(+(Aa>>>0)+4294967296.0*+(L>>>0));break}if(j>>>0>n>>>0|(j|0)==(n|0)&h>>>0>l>>>0){Aa=be(h|0,j|0,l|0,n|0)|0;Ba=-(+(Aa>>>0)+4294967296.0*+(L>>>0));break}else{Aa=be(l|0,n|0,h|0,j|0)|0;Ba=+(Aa>>>0)+4294967296.0*+(L>>>0);break}}else{if(q){Aa=ge(l|0,n|0,h|0,j|0)|0;Ba=+(Aa>>>0)+4294967296.0*+(L>>>0);break}if(j>>>0<n>>>0|(j|0)==(n|0)&h>>>0<l>>>0){Aa=be(l|0,n|0,h|0,j|0)|0;Ba=-(+(Aa>>>0)+4294967296.0*+(L>>>0));break}else{Aa=be(h|0,j|0,l|0,n|0)|0;Ba=+(Aa>>>0)+4294967296.0*+(L>>>0);break}}while(0);Aa=Ba<0.0;U=aa*aa+ca*ca;if(Ba==0.0){n=be(R|0,S|0,M|0,N|0)|0;l=L;j=be(P|0,Q|0,s|0,H|0)|0;h=L;q=(l|0)<0;ra=be(0,0,n|0,l|0)|0;l=q?L:l;Aa=(h|0)<0;pa=be(0,0,j|0,h|0)|0;h=ne((Aa?pa:j)|0,(Aa?L:h)|0,ua|0,va|0)|0;j=L;l=ne((q?ra:n)|0,l|0,wa|0,xa|0)|0;n=L;q=za^q;do if(ya^Aa){if(!q){Aa=ge(h|0,j|0,l|0,n|0)|0;T=-(+(Aa>>>0)+4294967296.0*+(L>>>0));break}if(j>>>0>n>>>0|(j|0)==(n|0)&h>>>0>l>>>0){Aa=be(h|0,j|0,l|0,n|0)|0;T=-(+(Aa>>>0)+4294967296.0*+(L>>>0));break}else{Aa=be(l|0,n|0,h|0,j|0)|0;T=+(Aa>>>0)+4294967296.0*+(L>>>0);break}}else{if(q){Aa=ge(h|0,j|0,l|0,n|0)|0;T=+(Aa>>>0)+4294967296.0*+(L>>>0);break}if(j>>>0<n>>>0|(j|0)==(n|0)&h>>>0<l>>>0){Aa=be(l|0,n|0,h|0,j|0)|0;T=-(+(Aa>>>0)+4294967296.0*+(L>>>0));break}else{Aa=be(h|0,j|0,l|0,n|0)|0;T=+(Aa>>>0)+4294967296.0*+(L>>>0);break}}while(0);F=k[b>>2]|0;C=((F|0)<0)<<31>>31;n=be(F|0,C|0,s|0,H|0)|0;l=L;H=k[b+4>>2]|0;s=((H|0)<0)<<31>>31;j=be(H|0,s|0,M|0,N|0)|0;h=L;q=(l|0)<0;ra=be(0,0,n|0,l|0)|0;l=q?L:l;Aa=(h|0)<0;pa=be(0,0,j|0,h|0)|0;h=ne((Aa?pa:j)|0,(Aa?L:h)|0,wa|0,xa|0)|0;j=L;l=ne((q?ra:n)|0,l|0,ua|0,va|0)|0;n=L;q=ya^q;do if(za^Aa){if(!q){Aa=ge(h|0,j|0,l|0,n|0)|0;m=-(+(Aa>>>0)+4294967296.0*+(L>>>0));break}if(j>>>0>n>>>0|(j|0)==(n|0)&h>>>0>l>>>0){Aa=be(h|0,j|0,l|0,n|0)|0;m=-(+(Aa>>>0)+4294967296.0*+(L>>>0));break}else{Aa=be(l|0,n|0,h|0,j|0)|0;m=+(Aa>>>0)+4294967296.0*+(L>>>0);break}}else{if(q){Aa=ge(h|0,j|0,l|0,n|0)|0;m=+(Aa>>>0)+4294967296.0*+(L>>>0);break}if(j>>>0<n>>>0|(j|0)==(n|0)&h>>>0<l>>>0){Aa=be(l|0,n|0,h|0,j|0)|0;m=-(+(Aa>>>0)+4294967296.0*+(L>>>0));break}else{Aa=be(h|0,j|0,l|0,n|0)|0;m=+(Aa>>>0)+4294967296.0*+(L>>>0);break}}while(0);l=be(H|0,s|0,R|0,S|0)|0;j=L;q=be(F|0,C|0,P|0,Q|0)|0;n=L;h=(j|0)<0;ra=be(0,0,l|0,j|0)|0;j=h?L:j;Aa=(n|0)<0;pa=be(0,0,q|0,n|0)|0;n=ne((Aa?pa:q)|0,(Aa?L:n)|0,ua|0,va|0)|0;q=L;j=ne((h?ra:l)|0,j|0,wa|0,xa|0)|0;l=L;h=za^h;do if(ya^Aa){if(!h){Aa=ge(n|0,q|0,j|0,l|0)|0;g=-(+(Aa>>>0)+4294967296.0*+(L>>>0));break}if(q>>>0>l>>>0|(q|0)==(l|0)&n>>>0>j>>>0){Aa=be(n|0,q|0,j|0,l|0)|0;g=-(+(Aa>>>0)+4294967296.0*+(L>>>0));break}else{Aa=be(j|0,l|0,n|0,q|0)|0;g=+(Aa>>>0)+4294967296.0*+(L>>>0);break}}else{if(h){Aa=ge(n|0,q|0,j|0,l|0)|0;g=+(Aa>>>0)+4294967296.0*+(L>>>0);break}if(q>>>0<l>>>0|(q|0)==(l|0)&n>>>0<j>>>0){Aa=be(j|0,l|0,n|0,q|0)|0;g=-(+(Aa>>>0)+4294967296.0*+(L>>>0));break}else{Aa=be(n|0,q|0,j|0,l|0)|0;g=+(Aa>>>0)+4294967296.0*+(L>>>0);break}}while(0);z=m*g;G=(o+u)*.5;g=aa*(G-+(F|0));if(g<0.0){m=0.0-g;if(g>0.0){g=(g+0.0)/m;g=g<0.0?-g:g}else g=1.0;v=0.0;w=0.0;u=g+1.0}else{v=g+0.0;w=2.0;m=0.0;u=0.0}O=(x+y)*.5;g=ca*(O-+(H|0));do if(g<0.0){o=m-g;if(m<0.0|g>0.0){g=(m*u+g)/o;g=g<0.0?-g:g}else g=u<1.0?1.0:u;m=o;x=g+1.0;y=v}else{o=v+g;if(v<0.0?v>0.0|g>0.0:0){w=(v*w-g)/o;x=u;y=o;w=(w<0.0?-w:w)+1.0;break}x=u;y=o;w=w<1.0?2.0:w+1.0}while(0);u=+X(+z);h=u<0.0;do if((e|0)==2)if(h){v=y-u;if(y<0.0|u>0.0){g=(y*w+u*2.5)/v;g=g<0.0?-g:g}else g=w<2.5?2.5:w;u=x;o=g+1.0;g=v;break}else{g=m+u;if(m<0.0?m>0.0|u>0.0:0){u=(m*x-u*2.5)/g;u=(u<0.0?-u:u)+1.0;m=g;o=w;g=y;break}u=x<2.5?3.5:x+1.0;m=g;o=w;g=y;break}else if(h){o=m-u;if(m<0.0|u>0.0){g=(m*x+u*2.5)/o;g=g<0.0?-g:g}else g=x<2.5?2.5:x;u=g+1.0;m=o;o=w;g=y;break}else{g=y+u;if(y<0.0?y>0.0|u>0.0:0){o=(y*w-u*2.5)/g;u=x;o=(o<0.0?-o:o)+1.0;break}u=x;o=w<2.5?3.5:w+1.0;break}while(0);D=u+3.0;E=m/U;A=o+3.0;B=g/U;if(G<0.0){g=0.0-G;if(G>0.0){m=(G*0.0+0.0)/g;m=m<0.0?-m:m}else m=0.0;v=0.0;w=0.0;z=g;y=m+1.0}else{v=G+0.0;w=1.0;z=0.0;y=0.0}if(aa<0.0){o=-aa;g=D;x=E*o;m=A;o=B*o}else{g=A;x=aa*B;m=D;o=aa*E}u=g+0.0+1.0;g=m+0.0+1.0;K=v+o;if(v<0.0|o<0.0?v>0.0|o>0.0:0){g=(v*w-o*g)/K;g=g<0.0?-g:g}else g=w<g?g:w;I=g+1.0;J=z+x;if(z<0.0|x<0.0?z>0.0|x>0.0:0){g=(z*y-x*u)/J;g=g<0.0?-g:g}else g=y<u?u:y;G=g+1.0;if(O<0.0){g=0.0-O;if(O>0.0){m=(O*0.0+0.0)/g;m=m<0.0?-m:m}else m=0.0;u=0.0;v=0.0;y=g;x=m+1.0}else{u=O+0.0;v=1.0;y=0.0;x=0.0}if(ca<0.0){m=-ca;o=D;w=E*m;g=A;m=B*m}else{o=A;w=ca*B;g=D;m=ca*E}o=o+0.0+1.0;g=g+0.0+1.0;D=u+m;if(u<0.0|m<0.0?u>0.0|m>0.0:0){g=(u*v-m*g)/D;g=g<0.0?-g:g}else g=v<g?g:v;A=g+1.0;B=y+w;if(y<0.0|w<0.0?y>0.0|w>0.0:0){g=(y*x-w*o)/B;g=g<0.0?-g:g}else g=x<o?o:x;u=g+1.0;o=T*.5/+X(+U);h=o<0.0;a:do if(T<0.0)if(h){m=K-o;if(K<0.0|o>0.0){o=(K*I+o*5.0)/m;o=o<0.0?-o:o}else o=I<5.0?5.0:I;g=J;z=m;x=G;w=o+1.0;break}else{g=J+o;do if(J<0.0){if(!(J>0.0|o>0.0))break;x=(J*G-o*5.0)/g;z=K;x=(x<0.0?-x:x)+1.0;w=I;break a}while(0);z=K;x=G<5.0?6.0:G+1.0;w=I;break}else if(h){g=J-o;if(J<0.0|o>0.0){m=(J*G+o*5.0)/g;m=m<0.0?-m:m}else m=G<5.0?5.0:G;z=K;x=m+1.0;w=I;break}else{m=K+o;do if(K<0.0){if(!(K>0.0|o>0.0))break;w=(K*I-o*5.0)/m;g=J;z=m;x=G;w=(w<0.0?-w:w)+1.0;break a}while(0);g=J;z=m;x=G;w=I<5.0?6.0:I+1.0;break}while(0);y=K-J;do if(K<0.0|J>0.0){if(!(K>0.0|J<0.0)){ed=132;break}o=(K*I+J*G)/y;if(!(o<0.0))break;o=-o}else ed=132;while(0);if((ed|0)==132)o=I<G?G:I;v=D-B;do if(D<0.0|B>0.0){if(!(D>0.0|B<0.0)){ed=137;break}m=(D*A+B*u)/v;if(!(m<0.0))break;m=-m}else ed=137;while(0);if((ed|0)==137)m=A<u?u:A;u=z-g;do if(g>0.0|z<0.0){if(!(g<0.0|z>0.0)){ed=142;break}g=(x*g+w*z)/u;if(!(g<0.0))break;g=-g}else ed=142;while(0);if((ed|0)==142)g=w<x?x:w;p[f>>3]=y;p[f+8>>3]=v;p[f+16>>3]=u;i[f+24>>0]=1}else{J=+X(+U);qa=+X(+(B*B+I*I));n=be(R|0,S|0,Y|0,Z|0)|0;l=L;q=(l|0)<0;da=be(0,0,n|0,l|0)|0;l=q?L:l;h=ne(ka|0,la|0,wa|0,xa|0)|0;j=L;l=ne((q?da:n)|0,l|0,ua|0,va|0)|0;n=L;q=ya^q;do if(za^ra){if(!q){da=ge(h|0,j|0,l|0,n|0)|0;o=-(+(da>>>0)+4294967296.0*+(L>>>0));break}if(j>>>0>n>>>0|(j|0)==(n|0)&h>>>0>l>>>0){da=be(h|0,j|0,l|0,n|0)|0;o=-(+(da>>>0)+4294967296.0*+(L>>>0));break}else{da=be(l|0,n|0,h|0,j|0)|0;o=+(da>>>0)+4294967296.0*+(L>>>0);break}}else{if(q){da=ge(h|0,j|0,l|0,n|0)|0;o=+(da>>>0)+4294967296.0*+(L>>>0);break}if(j>>>0<n>>>0|(j|0)==(n|0)&h>>>0<l>>>0){da=be(l|0,n|0,h|0,j|0)|0;o=-(+(da>>>0)+4294967296.0*+(L>>>0));break}else{da=be(h|0,j|0,l|0,n|0)|0;o=+(da>>>0)+4294967296.0*+(L>>>0);break}}while(0);if(!(o<0.0)){g=J*qa;m=g+o;if(g<0.0?g>0.0|o>0.0:0){sa=(o-g*5.0)/m;ta=m;sa=(sa<0.0?-sa:sa)+1.0}else{ta=m;sa=6.0}}else{m=Ba*Ba;g=J*qa;u=g-o;if(g<0.0|o>0.0){g=(g*5.0+o)/u;if(g<0.0)g=-g}else g=5.0;ta=m/u;sa=g+1.0+3.0+1.0}H=k[b+4>>2]|0;s=((H|0)<0)<<31>>31;n=be(W|0,F|0,H|0,s|0)|0;l=L;ba=k[b>>2]|0;da=((ba|0)<0)<<31>>31;j=be(C|0,V|0,ba|0,da|0)|0;h=L;q=(l|0)<0;R=be(0,0,n|0,l|0)|0;l=q?L:l;S=(h|0)<0;Q=be(0,0,j|0,h|0)|0;h=ne((S?Q:j)|0,(S?L:h)|0,ua|0,va|0)|0;j=L;l=ne((q?R:n)|0,l|0,wa|0,xa|0)|0;n=L;q=za^q;do if(ya^S){if(!q){S=ge(h|0,j|0,l|0,n|0)|0;m=-(+(S>>>0)+4294967296.0*+(L>>>0));break}if(j>>>0>n>>>0|(j|0)==(n|0)&h>>>0>l>>>0){S=be(h|0,j|0,l|0,n|0)|0;m=-(+(S>>>0)+4294967296.0*+(L>>>0));break}else{S=be(l|0,n|0,h|0,j|0)|0;m=+(S>>>0)+4294967296.0*+(L>>>0);break}}else{if(q){S=ge(h|0,j|0,l|0,n|0)|0;m=+(S>>>0)+4294967296.0*+(L>>>0);break}if(j>>>0<n>>>0|(j|0)==(n|0)&h>>>0<l>>>0){S=be(l|0,n|0,h|0,j|0)|0;m=-(+(S>>>0)+4294967296.0*+(L>>>0));break}else{S=be(h|0,j|0,l|0,n|0)|0;m=+(S>>>0)+4294967296.0*+(L>>>0);break}}while(0);n=be($|0,_|0,ba|0,da|0)|0;l=L;j=be(Y|0,Z|0,H|0,s|0)|0;h=L;q=(l|0)<0;R=be(0,0,n|0,l|0)|0;l=q?L:l;S=(h|0)<0;Q=be(0,0,j|0,h|0)|0;h=ne((S?Q:j)|0,(S?L:h)|0,ka|0,la|0)|0;j=L;l=ne((q?R:n)|0,l|0,na|0,oa|0)|0;n=L;q=pa^q;do if(ra^S){if(!q){S=ge(h|0,j|0,l|0,n|0)|0;g=-(+(S>>>0)+4294967296.0*+(L>>>0));break}if(j>>>0>n>>>0|(j|0)==(n|0)&h>>>0>l>>>0){S=be(h|0,j|0,l|0,n|0)|0;g=-(+(S>>>0)+4294967296.0*+(L>>>0));break}else{S=be(l|0,n|0,h|0,j|0)|0;g=+(S>>>0)+4294967296.0*+(L>>>0);break}}else{if(q){S=ge(h|0,j|0,l|0,n|0)|0;g=+(S>>>0)+4294967296.0*+(L>>>0);break}if(j>>>0<n>>>0|(j|0)==(n|0)&h>>>0<l>>>0){S=be(l|0,n|0,h|0,j|0)|0;g=-(+(S>>>0)+4294967296.0*+(L>>>0));break}else{S=be(h|0,j|0,l|0,n|0)|0;g=+(S>>>0)+4294967296.0*+(L>>>0);break}}while(0);T=ta*2.0*m*g;fa=sa+0.0+1.0+1.0+1.0+1.0+1.0;l=(W|0)<0;j=be(0,0,W|0,F|0)|0;h=l?L:F;S=(C|0)<0;n=be(0,0,C|0,V|0)|0;n=ne(ua|0,va|0,(S?n:C)|0,(S?L:V)|0)|0;q=L;h=ne(wa|0,xa|0,(l?j:W)|0,h|0)|0;j=L;l=l^za;do if(S^ya){if(!l){W=ge(h|0,j|0,n|0,q|0)|0;A=-(+(W>>>0)+4294967296.0*+(L>>>0));break}if(q>>>0>j>>>0|(q|0)==(j|0)&n>>>0>h>>>0){W=be(n|0,q|0,h|0,j|0)|0;A=-(+(W>>>0)+4294967296.0*+(L>>>0));break}else{W=be(h|0,j|0,n|0,q|0)|0;A=+(W>>>0)+4294967296.0*+(L>>>0);break}}else{if(l){W=ge(h|0,j|0,n|0,q|0)|0;A=+(W>>>0)+4294967296.0*+(L>>>0);break}if(q>>>0<j>>>0|(q|0)==(j|0)&n>>>0<h>>>0){W=be(h|0,j|0,n|0,q|0)|0;A=-(+(W>>>0)+4294967296.0*+(L>>>0));break}else{W=be(n|0,q|0,h|0,j|0)|0;A=+(W>>>0)+4294967296.0*+(L>>>0);break}}while(0);l=($|0)<0;j=be(0,0,$|0,_|0)|0;h=l?L:_;_=(Y|0)<0;n=be(0,0,Y|0,Z|0)|0;n=ne(ka|0,la|0,(_?n:Y)|0,(_?L:Z)|0)|0;q=L;h=ne(na|0,oa|0,(l?j:$)|0,h|0)|0;j=L;l=l^pa;do if(_^ra){if(!l){$=ge(h|0,j|0,n|0,q|0)|0;y=-(+($>>>0)+4294967296.0*+(L>>>0));break}if(q>>>0>j>>>0|(q|0)==(j|0)&n>>>0>h>>>0){$=be(n|0,q|0,h|0,j|0)|0;y=-(+($>>>0)+4294967296.0*+(L>>>0));break}else{$=be(h|0,j|0,n|0,q|0)|0;y=+($>>>0)+4294967296.0*+(L>>>0);break}}else{if(l){$=ge(h|0,j|0,n|0,q|0)|0;y=+($>>>0)+4294967296.0*+(L>>>0);break}if(q>>>0<j>>>0|(q|0)==(j|0)&n>>>0<h>>>0){$=be(h|0,j|0,n|0,q|0)|0;y=-(+($>>>0)+4294967296.0*+(L>>>0));break}else{$=be(n|0,q|0,h|0,j|0)|0;y=+($>>>0)+4294967296.0*+(L>>>0);break}}while(0);z=1.0/Ba;g=B*A*z;if(g<0.0){m=0.0-g;if(g>0.0){g=(g*5.0+0.0)/m;g=g<0.0?-g:g}else g=5.0;v=0.0;x=0.0;w=g+1.0}else{v=g+0.0;x=6.0;m=0.0;w=0.0}o=aa*y*z;do if(o<0.0){u=m-o;if(o>0.0|m<0.0){g=(o*5.0+m*w)/u;g=g<0.0?-g:g}else g=w<5.0?5.0:w;U=v;ea=u;K=x;O=g+1.0}else{g=o+v;if(v<0.0?o>0.0|v>0.0:0){K=(v*x-o*5.0)/g;U=g;ea=m;K=(K<0.0?-K:K)+1.0;O=w;break}U=g;ea=m;K=x<5.0?6.0:x+1.0;O=w}while(0);g=ca*y*z;if(g<0.0){m=0.0-g;if(g>0.0){g=(g*5.0+0.0)/m;g=g<0.0?-g:g}else g=5.0;v=0.0;x=0.0;w=g+1.0}else{v=g+0.0;x=6.0;m=0.0;w=0.0}o=I*A*z;do if(o<0.0){u=m-o;if(o>0.0|m<0.0){g=(o*5.0+m*w)/u;g=g<0.0?-g:g}else g=w<5.0?5.0:w;ja=v;ma=u;ga=x;ia=g+1.0}else{g=o+v;if(v<0.0?o>0.0|v>0.0:0){ga=(v*x-o*5.0)/g;ja=g;ma=m;ga=(ga<0.0?-ga:ga)+1.0;ia=w;break}ja=g;ma=m;ga=x<5.0?6.0:x+1.0;ia=w}while(0);E=aa*qa;P=E<0.0;if(P){m=O;g=K;v=-(E*U);o=-(E*ea)}else{m=K;g=O;v=E*ea;o=E*U}u=g+3.0+1.0;g=m+3.0+1.0;y=o+0.0;if(o<0.0&o>0.0){g=(0.0-o*g)/y;g=g<0.0?-g:g}else g=g>0.0?g:0.0;w=g+1.0;z=v+0.0;if(v<0.0&v>0.0){g=(0.0-v*u)/z;g=g<0.0?-g:g}else g=u>0.0?u:0.0;x=g+1.0;G=B*J;S=G<0.0;if(S){m=O;g=K;v=-(G*U);o=-(G*ea)}else{m=K;g=O;v=G*ea;o=G*U}u=g+3.0+1.0;g=m+3.0+1.0;B=y+o;if(y<0.0|o<0.0?y>0.0|o>0.0:0){g=(y*w-o*g)/B;g=g<0.0?-g:g}else g=w<g?g:w;y=g+1.0;A=z+v;do if(z<0.0|v<0.0){if(!(z>0.0|v>0.0)){ed=255;break}g=(z*x-v*u)/A;g=g<0.0?-g:g}else ed=255;while(0);if((ed|0)==255)g=x<u?u:x;w=g+1.0;ca=ca*qa;R=ca<0.0;if(R){m=ia;g=ga;v=-(ca*ja);o=-(ca*ma)}else{m=ga;g=ia;v=ca*ma;o=ca*ja}u=g+3.0+1.0;g=m+3.0+1.0;D=B+o;do if(B<0.0|o<0.0){if(!(B>0.0|o>0.0)){ed=262;break}g=(B*y-o*g)/D;g=g<0.0?-g:g}else ed=262;while(0);if((ed|0)==262)g=y<g?g:y;z=g+1.0;B=A+v;do if(A<0.0|v<0.0){if(!(A>0.0|v>0.0)){ed=266;break}g=(A*w-v*u)/B;g=g<0.0?-g:g}else ed=266;while(0);if((ed|0)==266)g=w<u?u:w;y=g+1.0;aa=I*J;Q=aa<0.0;if(Q){m=ia;g=ga;x=-(aa*ja);o=-(aa*ma)}else{m=ga;g=ia;x=aa*ma;o=aa*ja}u=g+3.0+1.0;g=m+3.0+1.0;w=D+o;do if(D<0.0|o<0.0){if(!(D>0.0|o>0.0)){ed=273;break}g=(D*z-o*g)/w;g=g<0.0?-g:g}else ed=273;while(0);if((ed|0)==273)g=z<g?g:z;v=g+1.0;z=B+x;do if(B<0.0|x<0.0){if(!(B>0.0|x>0.0)){ed=277;break}g=(B*y-x*u)/z;g=g<0.0?-g:g}else ed=277;while(0);if((ed|0)==277)g=y<u?u:y;u=g+1.0;F=0-H|0;N=((F|0)<0)<<31>>31;M=(H|0)>0;H=be(0,0,F|0,N|0)|0;F=M?H:F;H=M?L:N;N=(ba|0)<0;C=be(0,0,ba|0,da|0)|0;C=N?C:ba;s=N?L:da;n=ne(C|0,s|0,ka|0,la|0)|0;q=L;j=ne(na|0,oa|0,F|0,H|0)|0;l=L;h=M^pa;do if(ra^N){if(!h){ra=ge(n|0,q|0,j|0,l|0)|0;g=-(+(ra>>>0)+4294967296.0*+(L>>>0));break}if(q>>>0>l>>>0|(q|0)==(l|0)&n>>>0>j>>>0){ra=be(n|0,q|0,j|0,l|0)|0;g=-(+(ra>>>0)+4294967296.0*+(L>>>0));break}else{ra=be(j|0,l|0,n|0,q|0)|0;g=+(ra>>>0)+4294967296.0*+(L>>>0);break}}else{if(h){ra=ge(n|0,q|0,j|0,l|0)|0;g=+(ra>>>0)+4294967296.0*+(L>>>0);break}if(q>>>0<l>>>0|(q|0)==(l|0)&n>>>0<j>>>0){ra=be(j|0,l|0,n|0,q|0)|0;g=-(+(ra>>>0)+4294967296.0*+(L>>>0));break}else{ra=be(n|0,q|0,j|0,l|0)|0;g=+(ra>>>0)+4294967296.0*+(L>>>0);break}}while(0);m=J*g;b:do if(m<0.0){o=w-m;if(w<0.0|m>0.0){g=(w*v+m*4.0)/o;g=g<0.0?-g:g}else g=v<4.0?4.0:v;x=z;w=o;v=g+1.0}else{g=z+m;do if(z<0.0){if(!(z>0.0|m>0.0))break;u=(z*u-m*4.0)/g;x=g;u=(u<0.0?-u:u)+1.0;break b}while(0);x=g;u=u<4.0?5.0:u+1.0}while(0);n=ne(C|0,s|0,wa|0,xa|0)|0;q=L;j=ne(ua|0,va|0,F|0,H|0)|0;l=L;h=M^ya;do if(za^N){if(!h){za=ge(n|0,q|0,j|0,l|0)|0;g=-(+(za>>>0)+4294967296.0*+(L>>>0));break}if(q>>>0>l>>>0|(q|0)==(l|0)&n>>>0>j>>>0){za=be(n|0,q|0,j|0,l|0)|0;g=-(+(za>>>0)+4294967296.0*+(L>>>0));break}else{za=be(j|0,l|0,n|0,q|0)|0;g=+(za>>>0)+4294967296.0*+(L>>>0);break}}else{if(h){za=ge(n|0,q|0,j|0,l|0)|0;g=+(za>>>0)+4294967296.0*+(L>>>0);break}if(q>>>0<l>>>0|(q|0)==(l|0)&n>>>0<j>>>0){za=be(j|0,l|0,n|0,q|0)|0;g=-(+(za>>>0)+4294967296.0*+(L>>>0));break}else{za=be(n|0,q|0,j|0,l|0)|0;g=+(za>>>0)+4294967296.0*+(L>>>0);break}}while(0);m=qa*g;c:do if(m<0.0){o=w-m;if(w<0.0|m>0.0){m=(w*v+m*4.0)/o;m=m<0.0?-m:m}else m=v<4.0?4.0:v;g=x;m=m+1.0}else{g=x+m;do if(x<0.0){if(!(x>0.0|m>0.0))break;u=(x*u-m*4.0)/g;u=(u<0.0?-u:u)+1.0;o=w;m=v;break c}while(0);u=u<4.0?5.0:u+1.0;o=w;m=v}while(0);z=g+0.0;if(g<0.0&g>0.0){g=(0.0-g*u)/z;g=g<0.0?-g:g}else g=u>0.0?u:0.0;x=g+1.0;y=o+0.0;if(o<0.0&o>0.0){g=(0.0-o*m)/y;g=g<0.0?-g:g}else g=m>0.0?m:0.0;o=g+1.0;v=+X(+T);w=fa*.5+1.0;h=v<0.0;d:do if((e|0)==2)if(h){u=y-v;if(y<0.0|v>0.0){g=(y*o+w*v)/u;g=g<0.0?-g:g}else g=o<w?w:o;v=x;m=z;o=g+1.0;g=u;break}else{g=z+v;do if(z<0.0){if(!(z>0.0|v>0.0))break;v=(z*x-w*v)/g;v=(v<0.0?-v:v)+1.0;m=g;g=y;break d}while(0);v=(x<w?w:x)+1.0;m=g;g=y;break}else if(h){m=z-v;if(z<0.0|v>0.0){g=(z*x+w*v)/m;g=g<0.0?-g:g}else g=x<w?w:x;v=g+1.0;g=y;break}else{g=y+v;do if(y<0.0){if(!(y>0.0|v>0.0))break;o=(y*o-w*v)/g;v=x;m=z;o=(o<0.0?-o:o)+1.0;break d}while(0);v=x;m=z;o=(o<w?w:o)+1.0;break}while(0);I=ta*ta;T=sa+sa+1.0+1.0;v=T+v;J=m/I;T=T+o;I=g/I;if(P){m=T;g=v;w=-(E*J);o=-(E*I)}else{m=v;g=T;w=E*I;o=E*J}u=g+3.0+1.0;g=m+3.0+1.0;A=U+o;do if(U<0.0|o<0.0){if(!(U>0.0|o>0.0)){ed=349;break}g=(U*K-o*g)/A;g=g<0.0?-g:g}else ed=349;while(0);if((ed|0)==349)g=K<g?g:K;y=g+1.0;z=ea+w;do if(ea<0.0|w<0.0){if(!(ea>0.0|w>0.0)){ed=353;break}g=(ea*O-w*u)/z;g=g<0.0?-g:g}else ed=353;while(0);if((ed|0)==353)g=O<u?u:O;x=g+1.0;if(S){m=T;g=v;w=-(G*J);o=-(G*I)}else{m=v;g=T;w=G*I;o=G*J}u=g+3.0+1.0;g=m+3.0+1.0;U=A+o;do if(A<0.0|o<0.0){if(!(A>0.0|o>0.0)){ed=360;break}g=(A*y-o*g)/U;g=g<0.0?-g:g}else ed=360;while(0);if((ed|0)==360)g=y<g?g:y;K=g+1.0;O=z+w;do if(z<0.0|w<0.0){if(!(z>0.0|w>0.0)){ed=364;break}g=(z*x-w*u)/O;g=g<0.0?-g:g}else ed=364;while(0);if((ed|0)==364)g=x<u?u:x;G=g+1.0;if(R){m=T;g=v;w=-(ca*J);o=-(ca*I)}else{m=v;g=T;w=ca*I;o=ca*J}u=g+3.0+1.0;g=m+3.0+1.0;A=ja+o;do if(ja<0.0|o<0.0){if(!(ja>0.0|o>0.0)){ed=371;break}g=(ja*ga-o*g)/A;g=g<0.0?-g:g}else ed=371;while(0);if((ed|0)==371)g=ga<g?g:ga;y=g+1.0;z=ma+w;do if(ma<0.0|w<0.0){if(!(ma>0.0|w>0.0)){ed=375;break}g=(ma*ia-w*u)/z;g=g<0.0?-g:g}else ed=375;while(0);if((ed|0)==375)g=ia<u?u:ia;x=g+1.0;if(Q){m=T;g=v;w=-(aa*J);o=-(aa*I)}else{m=v;g=T;w=aa*I;o=aa*J}u=g+3.0+1.0;g=m+3.0+1.0;E=A+o;do if(A<0.0|o<0.0){if(!(A>0.0|o>0.0)){ed=382;break}g=(A*y-o*g)/E;g=g<0.0?-g:g}else ed=382;while(0);if((ed|0)==382)g=y<g?g:y;B=g+1.0;D=z+w;do if(z<0.0|w<0.0){if(!(z>0.0|w>0.0)){ed=386;break}g=(z*x-w*u)/D;g=g<0.0?-g:g}else ed=386;while(0);if((ed|0)==386)g=x<u?u:x;A=g+1.0;if(J<I){o=J;g=I;x=T}else{o=I;g=J;x=v;v=T}e:do if(Aa){w=Ba*o;m=Ba*g;g=x+1.0+1.0;o=v+1.0+1.0;u=U-m;do if(U<0.0|m>-0.0){if(!(U>0.0|m<-0.0)){ed=393;break}g=(U*K+m*g)/u;g=g<0.0?-g:g}else ed=393;while(0);if((ed|0)==393)g=K<g?g:K;m=g+1.0;g=O-w;do if(O<0.0|w>-0.0){if(!(O>0.0|w<-0.0))break;o=(O*G+w*o)/g;o=o<0.0?-o:o;z=u;x=m;break e}while(0);o=G<o?o:G;z=u;x=m}else{m=Ba*g;u=Ba*o;o=v+1.0+1.0;g=x+1.0+1.0;v=U+m;do if(U<0.0|m<0.0){if(!(U>0.0|m>0.0)){ed=401;break}g=(U*K-m*g)/v;g=g<0.0?-g:g}else ed=401;while(0);if((ed|0)==401)g=K<g?g:K;m=g+1.0;g=O+u;do if(O<0.0|u<0.0){if(!(O>0.0|u>0.0))break;o=(O*G-u*o)/g;o=o<0.0?-o:o;z=v;x=m;break e}while(0);o=G<o?o:G;z=v;x=m}while(0);w=o+1.0;y=U-O;do if(U<0.0|O>0.0){if(!(U>0.0|O<0.0)){ed=409;break}o=(U*K+O*G)/y;if(!(o<0.0))break;o=-o}else ed=409;while(0);if((ed|0)==409)o=K<G?G:K;v=E-D;do if(E<0.0|D>0.0){if(!(E>0.0|D<0.0)){ed=414;break}m=(E*B+D*A)/v;if(!(m<0.0))break;m=-m}else ed=414;while(0);if((ed|0)==414)m=B<A?A:B;u=z-g;do if(g>0.0|z<0.0){if(!(g<0.0|z>0.0)){ed=419;break}g=(g*w+x*z)/u;if(!(g<0.0))break;g=-g}else ed=419;while(0);if((ed|0)==419)g=x<w?w:x;p[f>>3]=y;p[f+8>>3]=v;p[f+16>>3]=u;i[f+24>>0]=1}N=g+1.0>64.0;H=m+1.0>64.0;M=o+1.0>64.0;if(!(M|H|N)){r=ld;return}j=k[c>>2]|0;h=k[zc>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){za=be(0,0,h|0,j|0)|0;Aa=L;k[gd>>2]=za;k[gd+4>>2]=Aa;k[gd+256>>2]=(Aa|0)!=0?-2:-1;break}else{k[gd+256>>2]=0;break}else{k[gd>>2]=h;k[gd+4>>2]=j;k[gd+256>>2]=(j|0)!=0?2:1}while(0);j=k[Ga>>2]|0;h=k[Ac>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){za=be(0,0,h|0,j|0)|0;Aa=L;k[hd>>2]=za;k[hd+4>>2]=Aa;k[hd+256>>2]=(Aa|0)!=0?-2:-1;break}else{k[hd+256>>2]=0;break}else{k[hd>>2]=h;k[hd+4>>2]=j;k[hd+256>>2]=(j|0)!=0?2:1}while(0);F=gd+260|0;j=k[Ma>>2]|0;h=k[d>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){za=be(0,0,h|0,j|0)|0;Aa=L;k[F>>2]=za;k[gd+264>>2]=Aa;k[gd+516>>2]=(Aa|0)!=0?-2:-1;break}else{k[gd+516>>2]=0;break}else{k[F>>2]=h;k[gd+264>>2]=j;k[gd+516>>2]=(j|0)!=0?2:1}while(0);C=hd+260|0;j=k[La>>2]|0;h=k[Bc>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){za=be(0,0,h|0,j|0)|0;Aa=L;k[C>>2]=za;k[hd+264>>2]=Aa;k[hd+516>>2]=(Aa|0)!=0?-2:-1;break}else{k[hd+516>>2]=0;break}else{k[C>>2]=h;k[hd+264>>2]=j;k[hd+516>>2]=(j|0)!=0?2:1}while(0);Sc(Ca,F,hd);Sc(Da,gd,C);Uc(Oc,Ca,Da);l=Oc+256|0;if(k[l>>2]|0){h=k[c>>2]|0;do if((h|0)<=0)if((h|0)<0){k[id>>2]=0-h;k[id+256>>2]=-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+256>>2]=1}while(0);Sc(Ja,hd,id);h=k[Ga>>2]|0;do if((h|0)<=0)if((h|0)<0){k[id>>2]=0-h;k[id+256>>2]=-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+256>>2]=1}while(0);Sc(Ka,gd,id);Uc(Ia,Ja,Ka);fe(cd|0,Ia|0,260)|0;j=cd+260|0;h=k[La>>2]|0;do if((h|0)<=0)if((h|0)<0){k[id>>2]=0-h;k[id+256>>2]=-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+256>>2]=1}while(0);Sc(Oa,F,id);h=k[Ma>>2]|0;do if((h|0)<=0)if((h|0)<0){k[id>>2]=0-h;k[id+256>>2]=-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+256>>2]=1}while(0);Sc(Pa,C,id);Uc(Na,Oa,Pa);fe(j|0,Na|0,260)|0;Sc(Qa,gd,j);Sc(Ra,F,cd);Tc(dd,Qa,Ra);Sc(Sa,hd,j);Sc(Ta,C,cd);Tc(fd,Sa,Ta);h=k[b>>2]|0;do if((h|0)<=0)if((h|0)<0){k[id>>2]=0-h;k[id+256>>2]=-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+256>>2]=1}while(0);Sc(Ua,Oc,id);Uc(Lc,dd,Ua);h=k[b+4>>2]|0;do if((h|0)<=0)if((h|0)<0){k[id>>2]=0-h;k[id+256>>2]=-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+256>>2]=1}while(0);Sc(Va,Oc,id);Uc(Mc,fd,Va);if((k[Lc+256>>2]|0)==0?(k[Mc+256>>2]|0)==0:0){j=k[l>>2]|0;h=(j|0)>-1?j:0-j|0;f:do switch(h|0){case 0:{h=0;g=0.0;break}case 1:{g=+((k[Oc>>2]|0)>>>0);ed=576;break}case 2:{g=+((k[Oc+4>>2]|0)>>>0)*4294967296.0+ +((k[Oc>>2]|0)>>>0);ed=576;break}default:{g=+((k[Oc+(h+-3<<2)>>2]|0)>>>0)+(+((k[Oc+(h+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Oc+(h+-2<<2)>>2]|0)>>>0))*4294967296.0;l=h<<5;h=l+-96|0;g=(j|0)<0?-g:g;if((h|0)>1023){g=g*89884656743115795.0e291;h=l+-1119|0;if((h|0)<=1023)break f;h=l+-2142|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291;break f}if((h|0)>=-1022)break f;g=g*2.2250738585072014e-308;h=l+926|0;if((h|0)>=-1022)break f;h=l+1948|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}}while(0);if((ed|0)==576){h=0;g=(j|0)<0?-g:g}h=ee(h+1023|0,0,52)|0;j=L;k[t>>2]=h;k[t+4>>2]=j;o=g*+p[t>>3];j=k[dd+256>>2]|0;h=(j|0)>-1?j:0-j|0;g:do switch(h|0){case 0:{h=0;g=0.0;break}case 1:{g=+((k[dd>>2]|0)>>>0);ed=586;break}case 2:{g=+((k[dd+4>>2]|0)>>>0)*4294967296.0+ +((k[dd>>2]|0)>>>0);ed=586;break}default:{g=+((k[dd+(h+-3<<2)>>2]|0)>>>0)+(+((k[dd+(h+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[dd+(h+-2<<2)>>2]|0)>>>0))*4294967296.0;l=h<<5;h=l+-96|0;g=(j|0)<0?-g:g;if((h|0)>1023){g=g*89884656743115795.0e291;h=l+-1119|0;if((h|0)<=1023)break g;h=l+-2142|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291;break g}if((h|0)>=-1022)break g;g=g*2.2250738585072014e-308;h=l+926|0;if((h|0)>=-1022)break g;h=l+1948|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}}while(0);if((ed|0)==586){h=0;g=(j|0)<0?-g:g}h=ee(h+1023|0,0,52)|0;j=L;k[t>>2]=h;k[t+4>>2]=j;m=g*+p[t>>3]/o;j=k[fd+256>>2]|0;h=(j|0)>-1?j:0-j|0;h:do switch(h|0){case 0:{h=0;g=0.0;break}case 1:{g=+((k[fd>>2]|0)>>>0);ed=596;break}case 2:{g=+((k[fd+4>>2]|0)>>>0)*4294967296.0+ +((k[fd>>2]|0)>>>0);ed=596;break}default:{g=+((k[fd+(h+-3<<2)>>2]|0)>>>0)+(+((k[fd+(h+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[fd+(h+-2<<2)>>2]|0)>>>0))*4294967296.0;l=h<<5;h=l+-96|0;g=(j|0)<0?-g:g;if((h|0)>1023){g=g*89884656743115795.0e291;h=l+-1119|0;if((h|0)<=1023)break h;h=l+-2142|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291;break h}if((h|0)>=-1022)break h;g=g*2.2250738585072014e-308;h=l+926|0;if((h|0)>=-1022)break h;h=l+1948|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}}while(0);if((ed|0)==596){h=0;g=(j|0)<0?-g:g}kd=ee(h+1023|0,0,52)|0;a=L;k[t>>2]=kd;k[t+4>>2]=a;Ba=g*+p[t>>3]/o;p[f>>3]=m;p[f+8>>3]=Ba;p[f+16>>3]=m;i[f+24>>0]=1}else{h=ha((k[l>>2]>>31&2)+-1|0,(e|0)==2?1:-1)|0;do if((h|0)<=0)if((h|0)<0){k[xc>>2]=0-h;k[xc+256>>2]=-1;break}else{k[xc+256>>2]=0;break}else{k[xc>>2]=h;k[xc+256>>2]=1}while(0);fe(Xa|0,Lc|0,260)|0;q=Xa+256|0;k[q>>2]=0-(k[q>>2]|0);Sc(Ya,F,Xa);fe(_a|0,Mc|0,260)|0;q=_a+256|0;k[q>>2]=0-(k[q>>2]|0);Sc(Za,C,_a);Tc(Wa,Ya,Za);fe(jd|0,Wa|0,260)|0;q=jd+260|0;fe(ab|0,Lc|0,260)|0;n=ab+256|0;k[n>>2]=0-(k[n>>2]|0);Sc(bb,gd,ab);fe(db|0,Mc|0,260)|0;n=db+256|0;k[n>>2]=0-(k[n>>2]|0);Sc(cb,hd,db);Tc($a,bb,cb);fe(q|0,$a|0,260)|0;n=jd+520|0;fe(n|0,xc|0,260)|0;s=jd+780|0;k[jd+1036>>2]=0;Sc(fb,gd,gd);Sc(gb,hd,hd);Tc(eb,fb,gb);fe(kd|0,eb|0,260)|0;Sc(ib,F,F);Sc(jb,C,C);Tc(hb,ib,jb);fe(kd+260|0,hb|0,260)|0;Sc(lb,gd,F);Sc(mb,hd,C);Tc(kb,lb,mb);fe(kd+520|0,kb|0,260)|0;Sc(ob,gd,Mc);Sc(pb,hd,Lc);Uc(qb,ob,pb);Sc(sb,F,Mc);Sc(tb,C,Lc);Uc(rb,sb,tb);Sc(ub,qb,rb);k[id>>2]=2;k[id+256>>2]=-1;Sc(nb,ub,id);fe(kd+780|0,nb|0,260)|0;ad(vb,a,jd,kd);g=+p[vb>>3];j=k[vb+8>>2]|0;do if((j|0)>1023){g=g*89884656743115795.0e291;h=j+-1023|0;if((h|0)<=1023)break;h=j+-2046|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291}else{if((j|0)>=-1022){h=j;break}g=g*2.2250738585072014e-308;h=j+1022|0;if((h|0)>=-1022)break;h=j+2044|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}while(0);h=ee(h+1023|0,0,52)|0;j=L;k[t>>2]=h;k[t+4>>2]=j;o=g*+p[t>>3];j=k[l>>2]|0;h=(j|0)>-1?j:0-j|0;i:do switch(h|0){case 0:{h=0;g=0.0;break}case 1:{g=+((k[Oc>>2]|0)>>>0);ed=618;break}case 2:{g=+((k[Oc+4>>2]|0)>>>0)*4294967296.0+ +((k[Oc>>2]|0)>>>0);ed=618;break}default:{g=+((k[Oc+(h+-3<<2)>>2]|0)>>>0)+(+((k[Oc+(h+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Oc+(h+-2<<2)>>2]|0)>>>0))*4294967296.0;l=h<<5;h=l+-96|0;g=(j|0)<0?-g:g;if((h|0)>1023){g=g*89884656743115795.0e291;h=l+-1119|0;if((h|0)<=1023)break i;h=l+-2142|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291;break i}if((h|0)>=-1022)break i;g=g*2.2250738585072014e-308;h=l+926|0;if((h|0)>=-1022)break i;h=l+1948|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}}while(0);if((ed|0)==618){h=0;g=(j|0)<0?-g:g}cd=ee(h+1023|0,0,52)|0;ed=L;k[t>>2]=cd;k[t+4>>2]=ed;m=o*(g*+p[t>>3]);if(H){Sc(Jb,Lc,Lc);Sc(Kb,Mc,Mc);Tc(Ib,Jb,Kb);Sc(Lb,C,Ib);Sc(Ob,Lc,F);Sc(Pb,Mc,C);Tc(Nb,Ob,Pb);Sc(Mb,fd,Nb);Uc(Hb,Lb,Mb);fe(jd|0,Hb|0,260)|0;Sc(Sb,Lc,Lc);Sc(Tb,Mc,Mc);Tc(Rb,Sb,Tb);Sc(Ub,hd,Rb);Sc(Xb,Lc,gd);Sc(Yb,Mc,hd);Tc(Wb,Xb,Yb);Sc(Vb,fd,Wb);Uc(Qb,Ub,Vb);fe(q|0,Qb|0,260)|0;Sc(Zb,fd,xc);fe(n|0,Zb|0,260)|0;ad(_b,a,jd,kd);g=+p[_b>>3];j=k[_b+8>>2]|0;do if((j|0)>1023){g=g*89884656743115795.0e291;h=j+-1023|0;if((h|0)<=1023)break;h=j+-2046|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291}else{if((j|0)>=-1022){h=j;break}g=g*2.2250738585072014e-308;h=j+1022|0;if((h|0)>=-1022)break;h=j+2044|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}while(0);ed=ee(h+1023|0,0,52)|0;fd=L;k[t>>2]=ed;k[t+4>>2]=fd;p[f+8>>3]=g*+p[t>>3]/m}do if(M|N){Sc(tc,Lc,Lc);Sc(uc,Mc,Mc);Tc(sc,tc,uc);Sc(vc,F,sc);Sc(fc,Lc,F);Sc(gc,Mc,C);Tc(ec,fc,gc);Sc(wc,dd,ec);Uc(rc,vc,wc);fe(jd|0,rc|0,260)|0;Sc(jc,Lc,Lc);Sc(kc,Mc,Mc);Tc(ic,jc,kc);Sc(lc,gd,ic);Sc(oc,Lc,gd);Sc(pc,Mc,hd);Tc(nc,oc,pc);Sc(mc,dd,nc);Uc(hc,lc,mc);fe(q|0,hc|0,260)|0;Sc(qc,dd,xc);fe(n|0,qc|0,260)|0;if(M){ad(yc,a,jd,kd);g=+p[yc>>3];j=k[yc+8>>2]|0;do if((j|0)>1023){g=g*89884656743115795.0e291;h=j+-1023|0;if((h|0)<=1023)break;h=j+-2046|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291}else{if((j|0)>=-1022){h=j;break}g=g*2.2250738585072014e-308;h=j+1022|0;if((h|0)>=-1022)break;h=j+2044|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}while(0);gd=ee(h+1023|0,0,52)|0;hd=L;k[t>>2]=gd;k[t+4>>2]=hd;p[f>>3]=g*+p[t>>3]/m}if(!N)break;Sc(Ic,Lc,Lc);Sc(Jc,Mc,Mc);Tc(Hc,Ic,Jc);Sc(Kc,Oc,Hc);k[id>>2]=1;k[id+256>>2]=o<0.0?-1:1;Sc(Gc,Kc,id);fe(s|0,Gc|0,260)|0;ad(Nc,a,jd,kd);g=+p[Nc>>3];j=k[Nc+8>>2]|0;do if((j|0)>1023){g=g*89884656743115795.0e291;h=j+-1023|0;if((h|0)<=1023)break;h=j+-2046|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291}else{if((j|0)>=-1022){h=j;break}g=g*2.2250738585072014e-308;h=j+1022|0;if((h|0)>=-1022)break;h=j+2044|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}while(0);kd=ee(h+1023|0,0,52)|0;a=L;k[t>>2]=kd;k[t+4>>2]=a;p[f+16>>3]=g*+p[t>>3]/m}while(0)}}else{Sc(Ea,gd,gd);Sc(Fa,hd,hd);Tc(Ha,Ea,Fa);j=k[Ha+256>>2]|0;h=(j|0)>-1?j:0-j|0;j:do switch(h|0){case 0:{h=0;g=0.0;break}case 1:{g=+((k[Ha>>2]|0)>>>0);ed=448;break}case 2:{g=+((k[Ha+4>>2]|0)>>>0)*4294967296.0+ +((k[Ha>>2]|0)>>>0);ed=448;break}default:{g=+((k[Ha+(h+-3<<2)>>2]|0)>>>0)+(+((k[Ha+(h+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[Ha+(h+-2<<2)>>2]|0)>>>0))*4294967296.0;l=h<<5;h=l+-96|0;g=(j|0)<0?-g:g;if((h|0)>1023){g=g*89884656743115795.0e291;h=l+-1119|0;if((h|0)<=1023)break j;h=l+-2142|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291;break j}if((h|0)<-1022){g=g*2.2250738585072014e-308;h=l+926|0;if((h|0)<-1022){h=l+1948|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}}}}while(0);if((ed|0)==448){h=0;g=(j|0)<0?-g:g}h=ee(h+1023|0,0,52)|0;j=L;k[t>>2]=h;k[t+4>>2]=j;m=g*+p[t>>3]*2.0;j=k[d>>2]|0;h=k[zc>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Oc=be(0,0,h|0,j|0)|0;ed=L;k[id>>2]=Oc;k[id+4>>2]=ed;k[id+256>>2]=(ed|0)!=0?-2:-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+4>>2]=j;k[id+256>>2]=(j|0)!=0?2:1}while(0);Sc(xb,hd,id);j=k[Bc>>2]|0;h=k[Ac>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Oc=be(0,0,h|0,j|0)|0;ed=L;k[id>>2]=Oc;k[id+4>>2]=ed;k[id+256>>2]=(ed|0)!=0?-2:-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+4>>2]=j;k[id+256>>2]=(j|0)!=0?2:1}while(0);Sc(yb,gd,id);Uc(wb,xb,yb);fe(cd|0,wb|0,260)|0;s=b+4|0;j=k[s>>2]|0;h=k[Ac>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Oc=be(0,0,h|0,j|0)|0;ed=L;k[id>>2]=Oc;k[id+4>>2]=ed;k[id+256>>2]=(ed|0)!=0?-2:-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+4>>2]=j;k[id+256>>2]=(j|0)!=0?2:1}while(0);Sc(zb,gd,id);j=k[b>>2]|0;h=k[zc>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Oc=be(0,0,h|0,j|0)|0;ed=L;k[id>>2]=Oc;k[id+4>>2]=ed;k[id+256>>2]=(ed|0)!=0?-2:-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+4>>2]=j;k[id+256>>2]=(j|0)!=0?2:1}while(0);Sc(Ab,hd,id);Uc(dd,zb,Ab);j=k[b>>2]|0;h=k[d>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Oc=be(0,0,h|0,j|0)|0;ed=L;k[id>>2]=Oc;k[id+4>>2]=ed;k[id+256>>2]=(ed|0)!=0?-2:-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+4>>2]=j;k[id+256>>2]=(j|0)!=0?2:1}while(0);Sc(Bb,hd,id);j=k[s>>2]|0;h=k[Bc>>2]|0;h=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){Oc=be(0,0,h|0,j|0)|0;ed=L;k[id>>2]=Oc;k[id+4>>2]=ed;k[id+256>>2]=(ed|0)!=0?-2:-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+4>>2]=j;k[id+256>>2]=(j|0)!=0?2:1}while(0);Sc(Cb,gd,id);Uc(fd,Bb,Cb);Sc(kd,dd,fd);k[kd+260>>2]=1;k[kd+516>>2]=1;if(H){k[id>>2]=2;k[id+256>>2]=(e|0)==2?1:-1;Sc(jd,hd,id);q=jd+260|0;Sc(Db,gd,gd);h=k[Ac>>2]|0;j=k[Bc>>2]|0;h=ge(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){ed=be(0,0,h|0,j|0)|0;fd=L;k[id>>2]=ed;k[id+4>>2]=fd;k[id+256>>2]=(fd|0)!=0?-2:-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+4>>2]=j;k[id+256>>2]=(j|0)!=0?2:1}while(0);Sc(Eb,Db,id);Sc(Gb,gd,hd);fd=k[zc>>2]|0;j=k[d>>2]|0;fd=ge(j|0,((j|0)<0)<<31>>31|0,fd|0,((fd|0)<0)<<31>>31|0)|0;j=L;h=k[b>>2]|0;h=ee(h|0,((h|0)<0)<<31>>31|0,1)|0;h=be(fd|0,j|0,h|0,L|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){ed=be(0,0,h|0,j|0)|0;fd=L;k[id>>2]=ed;k[id+4>>2]=fd;k[id+256>>2]=(fd|0)!=0?-2:-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+4>>2]=j;k[id+256>>2]=(j|0)!=0?2:1}while(0);Sc(Fb,Gb,id);Uc(ac,Eb,Fb);Sc(cc,hd,hd);h=k[s>>2]|0;j=((h|0)<0)<<31>>31;l=ee(h|0,j|0,1)|0;n=L;do if((h|0)<=0)if((h|0)<0){ed=be(0,0,l|0,n|0)|0;fd=L;k[id>>2]=ed;k[id+4>>2]=fd;k[id+256>>2]=(fd|0)!=0?-2:-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=l;fd=de(h|0,j|0,31)|0;k[id+4>>2]=fd;k[id+256>>2]=(fd|0)!=0?2:1}while(0);Sc(bc,cc,id);Tc($b,ac,bc);fe(q|0,$b|0,260)|0;Xc(dc,jd,kd);g=+p[dc>>3];j=k[dc+8>>2]|0;do if((j|0)>1023){g=g*89884656743115795.0e291;h=j+-1023|0;if((h|0)<=1023)break;h=j+-2046|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291}else{if((j|0)>=-1022){h=j;break}g=g*2.2250738585072014e-308;h=j+1022|0;if((h|0)>=-1022)break;h=j+2044|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}while(0);ed=ee(h+1023|0,0,52)|0;fd=L;k[t>>2]=ed;k[t+4>>2]=fd;p[f+8>>3]=g*+p[t>>3]/m}do if(M|N){k[id>>2]=2;k[id+256>>2]=(e|0)==2?1:-1;Sc(jd,gd,id);q=jd+260|0;Sc(Cc,hd,hd);h=k[zc>>2]|0;j=k[d>>2]|0;h=ge(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){ed=be(0,0,h|0,j|0)|0;fd=L;k[id>>2]=ed;k[id+4>>2]=fd;k[id+256>>2]=(fd|0)!=0?-2:-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+4>>2]=j;k[id+256>>2]=(j|0)!=0?2:1}while(0);Sc(Dc,Cc,id);Sc(Fc,gd,hd);fd=k[Ac>>2]|0;j=k[Bc>>2]|0;fd=ge(j|0,((j|0)<0)<<31>>31|0,fd|0,((fd|0)<0)<<31>>31|0)|0;j=L;h=k[s>>2]|0;h=ee(h|0,((h|0)<0)<<31>>31|0,1)|0;h=be(fd|0,j|0,h|0,L|0)|0;j=L;do if(!((j|0)>0|(j|0)==0&h>>>0>0))if((j|0)<0){ed=be(0,0,h|0,j|0)|0;fd=L;k[id>>2]=ed;k[id+4>>2]=fd;k[id+256>>2]=(fd|0)!=0?-2:-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=h;k[id+4>>2]=j;k[id+256>>2]=(j|0)!=0?2:1}while(0);Sc(Ec,Fc,id);Uc(Qc,Dc,Ec);Sc(Wc,gd,gd);h=k[b>>2]|0;j=((h|0)<0)<<31>>31;l=ee(h|0,j|0,1)|0;n=L;do if((h|0)<=0)if((h|0)<0){ed=be(0,0,l|0,n|0)|0;fd=L;k[id>>2]=ed;k[id+4>>2]=fd;k[id+256>>2]=(fd|0)!=0?-2:-1;break}else{k[id+256>>2]=0;break}else{k[id>>2]=l;fd=de(h|0,j|0,31)|0;k[id+4>>2]=fd;k[id+256>>2]=(fd|0)!=0?2:1}while(0);Sc(Rc,Wc,id);Tc(Pc,Qc,Rc);fe(q|0,Pc|0,260)|0;if(M){Xc(Yc,jd,kd);g=+p[Yc>>3];j=k[Yc+8>>2]|0;do if((j|0)>1023){g=g*89884656743115795.0e291;h=j+-1023|0;if((h|0)<=1023)break;h=j+-2046|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291}else{if((j|0)>=-1022){h=j;break}g=g*2.2250738585072014e-308;h=j+1022|0;if((h|0)>=-1022)break;h=j+2044|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}while(0);fd=ee(h+1023|0,0,52)|0;id=L;k[t>>2]=fd;k[t+4>>2]=id;p[f>>3]=g*+p[t>>3]/m}if(!N)break;j=k[cd+256>>2]|0;fe(jd+520|0,cd|0,256)|0;k[jd+776>>2]=(j|0)<0?0-j|0:j;Sc(_c,gd,gd);Sc($c,hd,hd);Tc(Zc,_c,$c);fe(kd+520|0,Zc|0,260)|0;Vc(bd,a,jd,kd);g=+p[bd>>3];j=k[bd+8>>2]|0;do if((j|0)>1023){g=g*89884656743115795.0e291;h=j+-1023|0;if((h|0)<=1023)break;h=j+-2046|0;h=(h|0)>1023?1023:h;g=g*89884656743115795.0e291}else{if((j|0)>=-1022){h=j;break}g=g*2.2250738585072014e-308;h=j+1022|0;if((h|0)>=-1022)break;h=j+2044|0;h=(h|0)<-1022?-1022:h;g=g*2.2250738585072014e-308}while(0);kd=ee(h+1023|0,0,52)|0;a=L;k[t>>2]=kd;k[t+4>>2]=a;p[f+16>>3]=g*+p[t>>3]/m}while(0)}r=ld;return}function Sc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;r=b+256|0;d=k[r>>2]|0;if((d|0)!=0?(s=c+256|0,e=k[s>>2]|0,(e|0)!=0):0){d=(d|0)>-1?d:0-d|0;p=(e|0)>-1?e:0-e|0;o=d+-1+p|0;o=o>>>0<64?o:64;q=a+256|0;k[q>>2]=o;if(o){o=(d|0)==0;l=0-d|0;e=0;g=0;m=-1;n=0;while(1){j=0-(m>>>0>l>>>0?m:l)|0;if(o){f=0;d=0}else{f=0;d=0;i=0;do{h=n-i|0;if(h>>>0<p>>>0){t=ne(k[c+(h<<2)>>2]|0,0,k[b+(i<<2)>>2]|0,0)|0;h=L;e=ge(t|0,0,e|0,g|0)|0;g=L;f=ge(h|0,0,f|0,d|0)|0;d=L}i=i+1|0}while((i|0)!=(j|0))}k[a+(n<<2)>>2]=e;e=ge(g|0,0,f|0,d|0)|0;g=L;n=n+1|0;d=k[q>>2]|0;if(n>>>0>=d>>>0)break;else m=m+-1|0}if(!((e|0)==0&(g|0)==0|(d|0)==64)){k[a+(d<<2)>>2]=e;d=(k[q>>2]|0)+1|0;k[q>>2]=d}}else d=0;if(!((k[r>>2]|0)>0^(k[s>>2]|0)>0))return;k[q>>2]=0-d;return}k[a+256>>2]=0;return}\\nfunction Tc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0;j=b+256|0;d=k[j>>2]|0;if(!d){fe(a|0,c|0,260)|0;return}e=k[c+256>>2]|0;if(!e){fe(a|0,b|0,260)|0;return}f=(d|0)>-1?d:0-d|0;g=(e|0)>-1?e:0-e|0;if(!((d|0)>0^(e|0)>0)){while(1)if(f>>>0<g>>>0){h=g;i=c;g=f;f=h;c=b;b=i}else break;i=a+256|0;k[i>>2]=f;if(!g){e=0;d=0;c=0}else{e=0;d=0;h=0;while(1){m=k[c+(h<<2)>>2]|0;d=ge(k[b+(h<<2)>>2]|0,0,e|0,d|0)|0;d=ge(d|0,L|0,m|0,0)|0;e=L;k[a+(h<<2)>>2]=d;h=h+1|0;if((h|0)==(g|0)){d=0;c=g;break}else d=0}}if(c>>>0<f>>>0)while(1){m=ge(k[b+(c<<2)>>2]|0,0,e|0,d|0)|0;e=L;k[a+(c<<2)>>2]=m;c=c+1|0;if((c|0)==(f|0)){d=0;break}else d=0}if(!((e|0)==0&(d|0)==0)?(l=k[i>>2]|0,(l|0)!=64):0){k[a+(l<<2)>>2]=e;k[i>>2]=(k[i>>2]|0)+1}}else $c(a,b,f,c,g,0);if((k[j>>2]|0)>=0)return;m=a+256|0;k[m>>2]=0-(k[m>>2]|0);return}function Uc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0;j=b+256|0;d=k[j>>2]|0;if(!d){fe(a|0,c|0,260)|0;a=a+256|0;k[a>>2]=0-(k[a>>2]|0);return}e=k[c+256>>2]|0;if(!e){fe(a|0,b|0,260)|0;return}f=(d|0)>-1?d:0-d|0;g=(e|0)>-1?e:0-e|0;if((d|0)>0^(e|0)>0){while(1)if(f>>>0<g>>>0){h=g;i=c;g=f;f=h;c=b;b=i}else break;i=a+256|0;k[i>>2]=f;if(!g){e=0;d=0;c=0}else{e=0;d=0;h=0;while(1){m=k[c+(h<<2)>>2]|0;d=ge(k[b+(h<<2)>>2]|0,0,e|0,d|0)|0;d=ge(d|0,L|0,m|0,0)|0;e=L;k[a+(h<<2)>>2]=d;h=h+1|0;if((h|0)==(g|0)){d=0;c=g;break}else d=0}}if(c>>>0<f>>>0)while(1){m=ge(k[b+(c<<2)>>2]|0,0,e|0,d|0)|0;e=L;k[a+(c<<2)>>2]=m;c=c+1|0;if((c|0)==(f|0)){d=0;break}else d=0}if(!((e|0)==0&(d|0)==0)?(l=k[i>>2]|0,(l|0)!=64):0){k[a+(l<<2)>>2]=e;k[i>>2]=(k[i>>2]|0)+1}}else $c(a,b,f,c,g,0);if((k[j>>2]|0)>=0)return;m=a+256|0;k[m>>2]=0-(k[m>>2]|0);return}function Vc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0.0,n=0,o=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0.0,A=0,B=0,C=0,D=0,E=0;C=r;r=r+3184|0;A=C+2924|0;x=C+48|0;y=C+32|0;e=C+2664|0;f=C+2404|0;n=C+2144|0;o=C+1884|0;q=C+1624|0;s=C+1364|0;t=C+1104|0;u=C+844|0;v=C+584|0;w=C+324|0;g=C+64|0;h=C+16|0;i=C;Xc(x,c,d);j=c+520|0;l=d+520|0;_c(y,j,l);m=+p[x>>3];if(!(!(m<0.0)?!(+p[y>>3]<0.0):0))B=3;if((B|0)==3?(z=+p[y>>3],m>0.0|z>0.0):0){D=b+780|0;Sc(f,c,c);Sc(n,f,d);E=c+260|0;Sc(q,E,E);f=d+260|0;Sc(o,q,f);Tc(s,n,o);Sc(u,j,j);Sc(t,u,l);Uc(e,s,t);fe(D|0,e|0,260)|0;B=b+2080|0;k[B>>2]=1;k[b+2336>>2]=1;Sc(w,c,E);k[A>>2]=2;k[A+256>>2]=1;Sc(v,w,A);fe(b+1040|0,v|0,260)|0;Sc(g,d,f);fe(b+2340|0,g|0,260)|0;Xc(h,D,B);Zc(i,x,z,k[y+8>>2]|0);b=(k[h+8>>2]|0)-(k[i+8>>2]|0)|0;B=a+8|0;z=+Kd(+p[h>>3]/+p[i>>3],B);p[a>>3]=z;k[B>>2]=b+(k[B>>2]|0);r=C;return}Yc(a,x,y);r=C;return}function Wc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,q=0,s=0,t=0,u=0,v=0.0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0.0,G=0,H=0,I=0,J=0;I=r;r=r+4752|0;G=I+4484|0;D=I+48|0;E=I+32|0;e=I+4224|0;f=I+3964|0;t=I+3704|0;w=I+3444|0;x=I+3184|0;y=I+2924|0;z=I+2664|0;A=I+2404|0;B=I+2144|0;C=I+1884|0;g=I+1624|0;h=I+1364|0;i=I+1104|0;j=I+844|0;l=I+584|0;m=I+324|0;n=I+64|0;o=I+16|0;q=I;Xc(D,c,d);s=c+520|0;u=d+520|0;Xc(E,s,u);v=+p[D>>3];if(!(!(v<0.0)?!(+p[E>>3]<0.0):0))H=3;if((H|0)==3?(F=+p[E>>3],v>0.0|F>0.0):0){Sc(f,c,c);Sc(t,f,d);J=c+260|0;Sc(x,J,J);f=d+260|0;Sc(w,x,f);Tc(y,t,w);Sc(A,s,s);Sc(z,A,u);Uc(B,y,z);z=c+780|0;Sc(g,z,z);A=d+780|0;Sc(C,g,A);Uc(e,B,C);fe(b|0,e|0,260)|0;H=b+1300|0;k[H>>2]=1;k[b+1556>>2]=1;Sc(i,c,J);k[G>>2]=2;k[G+256>>2]=1;Sc(h,i,G);fe(b+260|0,h|0,260)|0;Sc(j,d,f);fe(b+1560|0,j|0,260)|0;Sc(m,s,z);k[G>>2]=2;k[G+256>>2]=-1;Sc(l,m,G);fe(b+520|0,l|0,260)|0;Sc(n,u,A);fe(b+1820|0,n|0,260)|0;Vc(o,b,b,H);Zc(q,D,F,k[E+8>>2]|0);b=(k[o+8>>2]|0)-(k[q+8>>2]|0)|0;H=a+8|0;F=+Kd(+p[o>>3]/+p[q>>3],H);p[a>>3]=F;k[H>>2]=b+(k[H>>2]|0);r=I;return}Yc(a,D,E);r=I;return}function Xc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0.0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,q=0,s=0,t=0;t=r;r=r+1376|0;o=t+48|0;q=t+32|0;l=t+1104|0;d=t+844|0;f=t+584|0;g=t+324|0;h=t+64|0;m=t+16|0;n=t;_c(o,b,c);i=b+260|0;j=c+260|0;_c(q,i,j);e=+p[o>>3];if(!(!(e<0.0)?!(+p[q>>3]<0.0):0))s=3;do if((s|0)==3){if(!(e>0.0)?!(+p[q>>3]>0.0):0)break;Sc(d,b,b);Sc(f,d,c);Sc(h,i,i);Sc(g,h,j);Uc(l,f,g);f=k[l+256>>2]|0;d=(f|0)>-1?f:0-f|0;switch(d|0){case 0:{e=0.0;d=0;break}case 1:{e=+((k[l>>2]|0)>>>0);d=0;s=10;break}case 2:{e=+((k[l+4>>2]|0)>>>0)*4294967296.0+ +((k[l>>2]|0)>>>0);d=0;s=10;break}default:{e=+((k[l+(d+-3<<2)>>2]|0)>>>0)+(+((k[l+(d+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[l+(d+-2<<2)>>2]|0)>>>0))*4294967296.0;d=(d<<5)+-96|0;s=10}}if((s|0)==10)e=(f|0)<0?-e:e;l=m+8|0;e=+Kd(e,l);p[m>>3]=e;s=(k[l>>2]|0)+d|0;k[l>>2]=s;Zc(n,o,+p[q>>3],k[q+8>>2]|0);q=s-(k[n+8>>2]|0)|0;s=a+8|0;e=+Kd(e/+p[n>>3],s);p[a>>3]=e;k[s>>2]=q+(k[s>>2]|0);r=t;return}while(0);Yc(a,o,q);r=t;return}function Yc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0.0,f=0,g=0;d=+p[b>>3];if(!(d==0.0)?(f=k[c+8>>2]|0,g=k[b+8>>2]|0,(f|0)<=(g+54|0)):0){e=+p[c>>3];if((g|0)>(f+54|0)|e==0.0){k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];return}if((g|0)<(f|0)){b=f-g|0;if((b|0)>1023){e=e*89884656743115795.0e291;c=b+-1023|0;if((c|0)>1023){c=b+-2046|0;c=(c|0)>1023?1023:c;e=e*89884656743115795.0e291}}else if((b|0)<-1022){e=e*2.2250738585072014e-308;c=b+1022|0;if((c|0)<-1022){c=b+2044|0;c=(c|0)<-1022?-1022:c;e=e*2.2250738585072014e-308}}else c=b;b=ee(c+1023|0,0,52)|0;f=L;k[t>>2]=b;k[t+4>>2]=f;f=a+8|0;e=+Kd(d+e*+p[t>>3],f);p[a>>3]=e;k[f>>2]=(k[f>>2]|0)+g;return}else{b=g-f|0;if((b|0)>1023){d=d*89884656743115795.0e291;c=b+-1023|0;if((c|0)>1023){c=b+-2046|0;c=(c|0)>1023?1023:c;d=d*89884656743115795.0e291}}else if((b|0)<-1022){d=d*2.2250738585072014e-308;c=b+1022|0;if((c|0)<-1022){c=b+2044|0;c=(c|0)<-1022?-1022:c;d=d*2.2250738585072014e-308}}else c=b;b=ee(c+1023|0,0,52)|0;g=L;k[t>>2]=b;k[t+4>>2]=g;g=a+8|0;e=+Kd(e+d*+p[t>>3],g);p[a>>3]=e;k[g>>2]=(k[g>>2]|0)+f;return}};k[a>>2]=k[c>>2];k[a+4>>2]=k[c+4>>2];k[a+8>>2]=k[c+8>>2];k[a+12>>2]=k[c+12>>2];return}function Zc(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;var e=0.0,f=0.0,g=0,h=0;e=+p[b>>3];if(!(e==0.0)?(h=k[b+8>>2]|0,(h+54|0)>=(d|0)):0){if((h|0)>(d+54|0)|c==0.0){k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];return}if((h|0)<(d|0)){g=d-h|0;if((g|0)>1023){f=c*-89884656743115795.0e291;b=g+-1023|0;if((b|0)>1023){b=g+-2046|0;b=(b|0)>1023?1023:b;f=f*89884656743115795.0e291}}else{f=-c;if((g|0)<-1022){f=c*-2.2250738585072014e-308;b=g+1022|0;if((b|0)<-1022){b=g+2044|0;b=(b|0)<-1022?-1022:b;f=f*2.2250738585072014e-308}}else b=g}g=ee(b+1023|0,0,52)|0;d=L;k[t>>2]=g;k[t+4>>2]=d;d=a+8|0;c=+Kd(e+f*+p[t>>3],d);p[a>>3]=c;k[d>>2]=(k[d>>2]|0)+h;return}else{g=h-d|0;if((g|0)>1023){e=e*89884656743115795.0e291;b=g+-1023|0;if((b|0)>1023){b=g+-2046|0;b=(b|0)>1023?1023:b;e=e*89884656743115795.0e291}}else if((g|0)<-1022){e=e*2.2250738585072014e-308;b=g+1022|0;if((b|0)<-1022){b=g+2044|0;b=(b|0)<-1022?-1022:b;e=e*2.2250738585072014e-308}}else b=g;g=ee(b+1023|0,0,52)|0;h=L;k[t>>2]=g;k[t+4>>2]=h;h=a+8|0;c=+Kd(e*+p[t>>3]-c,h);p[a>>3]=c;k[h>>2]=(k[h>>2]|0)+d;return}}h=a+8|0;c=+Kd(-c,h);p[a>>3]=c;k[h>>2]=(k[h>>2]|0)+d;return}function _c(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0,f=0,g=0,h=0.0,i=0,j=0,l=0,m=0;m=r;r=r+48|0;g=m+32|0;j=m+16|0;i=m;f=k[b+256>>2]|0;e=(f|0)>-1?f:0-f|0;switch(e|0){case 0:{d=0.0;b=0;break}case 1:{d=+((k[b>>2]|0)>>>0);b=0;l=5;break}case 2:{d=+((k[b+4>>2]|0)>>>0)*4294967296.0+ +((k[b>>2]|0)>>>0);b=0;l=5;break}default:{d=+((k[b+(e+-3<<2)>>2]|0)>>>0)+(+((k[b+(e+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[b+(e+-2<<2)>>2]|0)>>>0))*4294967296.0;b=(e<<5)+-96|0;l=5}}if((l|0)==5)d=(f|0)<0?-d:d;e=g+8|0;h=+Kd(d,e);p[g>>3]=h;f=(k[e>>2]|0)+b|0;k[e>>2]=f;e=k[c+256>>2]|0;b=(e|0)>-1?e:0-e|0;switch(b|0){case 0:{d=0.0;b=0;break}case 1:{d=+((k[c>>2]|0)>>>0);b=0;l=10;break}case 2:{d=+((k[c+4>>2]|0)>>>0)*4294967296.0+ +((k[c>>2]|0)>>>0);b=0;l=10;break}default:{d=+((k[c+(b+-3<<2)>>2]|0)>>>0)+(+((k[c+(b+-1<<2)>>2]|0)>>>0)*4294967296.0+ +((k[c+(b+-2<<2)>>2]|0)>>>0))*4294967296.0;b=(b<<5)+-96|0;l=10}}if((l|0)==10)d=(e|0)<0?-d:d;l=j+8|0;d=+Kd(d,l);p[j>>3]=d;l=(k[l>>2]|0)+b|0;c=(l&1|0)==0;j=i+8|0;d=+Kd(+X(+(c?d:d*2.0)),j);p[i>>3]=d;j=(((c^1)<<31>>31)+l>>1)+(k[j>>2]|0)+f|0;l=a+8|0;h=+Kd(h*d,l);p[a>>3]=h;k[l>>2]=j+(k[l>>2]|0);r=m;return}function $c(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0;if(c>>>0<e>>>0){$c(a,d,e,b,c,1);a=a+256|0;k[a>>2]=0-(k[a>>2]|0);return}do if((c|0)!=(e|0)|f){f=a+256|0;k[f>>2]=c+-1;if(!e){e=0;h=f;f=0}else{j=f;i=12}}else{while(1){f=c+-1|0;e=k[b+(f<<2)>>2]|0;g=k[d+(f<<2)>>2]|0;if(e>>>0<g>>>0){i=5;break}if(e>>>0>g>>>0){i=8;break}if(!f)break;else c=f}if((i|0)==5){$c(a,d,c,b,c,1);a=a+256|0;k[a>>2]=0-(k[a>>2]|0);return}if((i|0)==8?(c|0)!=0:0){j=a+256|0;k[j>>2]=f;e=c;i=12;break}k[a+256>>2]=0;return}while(0);if((i|0)==12){f=0;i=0;do{g=b+(i<<2)|0;h=d+(i<<2)|0;k[a+(i<<2)>>2]=(k[g>>2]|0)+(f<<31>>31)-(k[h>>2]|0);g=k[g>>2]|0;h=k[h>>2]|0;if(g>>>0<h>>>0)f=1;else f=f&(g|0)==(h|0);i=i+1|0}while((i|0)!=(e|0));h=j}if(e>>>0<c>>>0){g=f;while(1){f=b+(e<<2)|0;k[a+(e<<2)>>2]=(k[f>>2]|0)-(g&1);e=e+1|0;if((e|0)==(c|0))break;else g=g&(k[f>>2]|0)==0}}f=k[h>>2]|0;if(!(k[a+(f<<2)>>2]|0))return;k[h>>2]=f+1;return}function ad(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0.0,g=0,h=0,i=0,j=0,l=0,m=0,n=0.0,o=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Aa=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0;Ka=r;r=r+16688|0;Ja=Ka+16416|0;xa=Ka+15896|0;ya=Ka+15376|0;za=Ka+272|0;Ba=Ka+256|0;ha=Ka+15112|0;ia=Ka+14852|0;pa=Ka+14592|0;qa=Ka+14332|0;ra=Ka+14072|0;sa=Ka+13812|0;ta=Ka+13552|0;ua=Ka+13292|0;va=Ka+13032|0;wa=Ka+12772|0;ja=Ka+12512|0;ka=Ka+12252|0;la=Ka+11992|0;ma=Ka+11732|0;na=Ka+11472|0;Aa=Ka+240|0;oa=Ka+224|0;Ha=Ka+10432|0;Ia=Ka+9392|0;K=Ka+208|0;M=Ka+192|0;e=Ka+176|0;o=Ka+160|0;q=Ka+144|0;u=Ka+9128|0;v=Ka+8868|0;w=Ka+8608|0;x=Ka+8348|0;y=Ka+8088|0;z=Ka+7828|0;A=Ka+7568|0;B=Ka+7308|0;C=Ka+7048|0;D=Ka+6788|0;E=Ka+6528|0;F=Ka+6268|0;G=Ka+6008|0;H=Ka+5748|0;I=Ka+5488|0;L=Ka+128|0;J=Ka+112|0;Fa=Ka+96|0;t=Ka+80|0;j=Ka+64|0;s=Ka+48|0;Ea=Ka+32|0;N=Ka+5228|0;O=Ka+4968|0;P=Ka+4708|0;Q=Ka+4448|0;R=Ka+4188|0;S=Ka+3928|0;T=Ka+3668|0;U=Ka+3408|0;V=Ka+3148|0;W=Ka+2888|0;Y=Ka+2628|0;Z=Ka+2368|0;_=Ka+2108|0;$=Ka+1848|0;ba=Ka+1588|0;ca=Ka+1328|0;da=Ka+1068|0;ea=Ka+808|0;fa=Ka+548|0;ga=Ka+288|0;Ca=Ka+16|0;Da=Ka;aa=c+780|0;if(!(k[c+1036>>2]|0)){Xc(K,c,d);k[Ha>>2]=1;k[Ha+256>>2]=1;g=d+260|0;Sc(Ia,d,g);h=Ha+260|0;i=d+520|0;fe(h|0,i|0,260)|0;j=Ia+260|0;k[j>>2]=1;k[Ia+516>>2]=1;l=c+520|0;m=d+780|0;_c(e,l,m);Xc(q,Ha,Ia);f=+p[q>>3];Fa=k[q+8>>2]|0;Ea=(Fa&1|0)==0;Ga=o+8|0;f=+Kd(+X(+(Ea?f:f*2.0)),Ga);p[o>>3]=f;Fa=(((Ea^1)<<31>>31)+Fa>>1)+(k[Ga>>2]|0)|0;k[Ga>>2]=Fa;Fa=Fa+(k[e+8>>2]|0)|0;Ga=M+8|0;f=+Kd(+p[e>>3]*f,Ga);p[M>>3]=f;e=Fa+(k[Ga>>2]|0)|0;k[Ga>>2]=e;n=+p[K>>3];if(n<0.0|f<0.0?n>0.0|f>0.0:0){Sc(v,c,c);Sc(w,v,d);Ga=c+260|0;Sc(y,Ga,Ga);Sc(x,y,g);Tc(z,w,x);Sc(B,l,l);Sc(C,B,m);Sc(A,C,i);Uc(u,z,A);fe(Ha|0,u|0,260)|0;k[Ia>>2]=1;k[Ia+256>>2]=1;Sc(E,c,Ga);k[Ja>>2]=2;k[Ja+256>>2]=1;Sc(F,E,Ja);Sc(H,l,l);Sc(G,H,m);Uc(D,F,G);fe(h|0,D|0,260)|0;Sc(I,d,g);fe(j|0,I|0,260)|0;Xc(L,Ha,Ia);Zc(J,K,f,e);Ia=(k[L+8>>2]|0)-(k[J+8>>2]|0)|0;Ja=a+8|0;n=+Kd(+p[L>>3]/+p[J>>3],Ja);p[a>>3]=n;k[Ja>>2]=Ia+(k[Ja>>2]|0);r=Ka;return}Yc(a,K,M);r=Ka;return}k[Ha>>2]=1;k[Ha+256>>2]=1;l=d+260|0;Sc(Ia,d,l);m=Ha+260|0;g=d+520|0;fe(m|0,g|0,260)|0;o=Ia+260|0;k[o>>2]=1;k[Ia+516>>2]=1;h=c+520|0;i=d+780|0;_c(t,h,i);Xc(s,Ha,Ia);n=+p[s>>3];e=k[s+8>>2]|0;M=(e&1|0)==0;q=j+8|0;n=+Kd(+X(+(M?n:n*2.0)),q);p[j>>3]=n;e=(((M^1)<<31>>31)+e>>1)+(k[q>>2]|0)|0;k[q>>2]=e;e=e+(k[t+8>>2]|0)|0;q=Fa+8|0;n=+Kd(+p[t>>3]*n,q);p[Fa>>3]=n;k[q>>2]=e+(k[q>>2]|0);fe(Ha|0,c|0,260)|0;fe(Ia|0,d|0,260)|0;e=c+260|0;fe(m|0,e|0,260)|0;fe(o|0,l|0,260)|0;j=Ha+520|0;fe(j|0,aa|0,260)|0;k[Ia+520>>2]=1;k[Ia+776>>2]=1;Vc(Ea,b,Ha,Ia);f=+p[Ea>>3];if(f<0.0|n<0.0?f>0.0|n>0.0:0){Sc(N,aa,c);k[Ja>>2]=2;k[Ja+256>>2]=1;Sc(Ha,N,Ja);Sc(P,aa,e);k[Ja>>2]=2;k[Ja+256>>2]=1;Sc(O,P,Ja);fe(m|0,O|0,260)|0;Sc(R,c,c);Sc(S,R,d);Sc(U,e,e);Sc(T,U,l);Tc(V,S,T);Sc(W,aa,aa);Tc(Y,V,W);Sc(_,h,h);Sc($,_,g);Sc(Z,$,i);Uc(Q,Y,Z);fe(j|0,Q|0,260)|0;g=Ha+780|0;Sc(ca,c,e);k[Ja>>2]=2;k[Ja+256>>2]=1;Sc(da,ca,Ja);Sc(fa,h,h);Sc(ea,fa,i);Uc(ba,da,ea);fe(g|0,ba|0,260)|0;e=Ia+780|0;Sc(ga,d,l);fe(e|0,ga|0,260)|0;Xc(za,Ha,Ia);Xc(Ba,j,Ia+520|0);f=+p[za>>3];if(!(f<0.0)?!(+p[Ba>>3]<0.0):0)Ga=12;else{n=+p[Ba>>3];if(f>0.0|n>0.0){Sc(ia,Ha,Ha);Sc(pa,ia,Ia);Sc(ra,m,m);Sc(qa,ra,o);Tc(sa,pa,qa);Sc(ta,j,j);Uc(ua,sa,ta);Sc(wa,g,g);Sc(ja,wa,Ia);Sc(va,ja,o);Uc(ha,ua,va);fe(xa|0,ha|0,260)|0;k[ya>>2]=1;k[ya+256>>2]=1;Sc(la,Ha,m);Sc(ma,j,g);Uc(na,la,ma);k[Ja>>2]=2;k[Ja+256>>2]=1;Sc(ka,na,Ja);fe(xa+260|0,ka|0,260)|0;fe(ya+260|0,e|0,260)|0;Xc(Aa,xa,ya);Zc(oa,za,n,k[Ba+8>>2]|0);e=(k[Aa+8>>2]|0)-(k[oa+8>>2]|0)|0;Ja=Ca+8|0;f=+Kd(+p[Aa>>3]/+p[oa>>3],Ja);p[Ca>>3]=f;e=e+(k[Ja>>2]|0)|0;k[Ja>>2]=e}else Ga=12}if((Ga|0)==12){Yc(Ca,za,Ba);f=+p[Ca>>3];e=k[Ca+8>>2]|0}Zc(Da,Ea,+p[Fa>>3],k[q>>2]|0);Ia=e-(k[Da+8>>2]|0)|0;Ja=a+8|0;n=+Kd(f/+p[Da>>3],Ja);p[a>>3]=n;k[Ja>>2]=Ia+(k[Ja>>2]|0);r=Ka;return}Yc(a,Ea,Fa);r=Ka;return}function bd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0;f=a+4|0;g=k[a>>2]|0;c=g;h=(k[f>>2]|0)-c|0;i=(h|0)/24|0;j=i+1|0;if(j>>>0>178956970)xa(1340,1363,303,1438);l=a+8|0;c=((k[l>>2]|0)-c|0)/24|0;if(c>>>0<89478485){c=c<<1;c=c>>>0<j>>>0?j:c;if(!c){c=0;d=0}else e=5}else{c=178956970;e=5}if((e|0)==5){e=c*24|0;e=(e|0)==0?1:e;d=_d(e)|0;a:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(e)|0;if(d)break a}a=ya(4)|0;k[a>>2]=128;La(a|0,8,1)}while(0)}e=d+(i*24|0)|0;k[e>>2]=k[b>>2];k[e+4>>2]=k[b+4>>2];k[e+8>>2]=k[b+8>>2];k[e+12>>2]=k[b+12>>2];k[e+16>>2]=k[b+16>>2];k[e+20>>2]=k[b+20>>2];b=d+((((h|0)/-24|0)+i|0)*24|0)|0;fe(b|0,g|0,h|0)|0;k[a>>2]=b;k[f>>2]=d+(j*24|0);k[l>>2]=d+(c*24|0);if(!g)return;$d(g);return}function cd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;j=k[a+16>>2]|0;h=a+28|0;l=k[a+44>>2]|0;m=j>>>0>l>>>0;o=m?a:h;t=k[b+16>>2]|0;i=b+28|0;r=k[b+44>>2]|0;s=t>>>0>r>>>0;p=s?b:i;c=o+8|0;d=k[o>>2]|0;e=k[c>>2]|0;q=(d|0)==(e|0);if(q)if((k[o+4>>2]|0)<(k[o+12>>2]|0))c=o;else g=4;else if((d|0)<(e|0))c=o;else g=4;d=p+8|0;e=k[p>>2]|0;f=k[d>>2]|0;n=(e|0)==(f|0);if(n)if((k[p+4>>2]|0)<(k[p+12>>2]|0))f=p;else g=8;else if((e|0)<(f|0))f=p;else g=8;if((g|0)==8)f=d;d=k[c>>2]|0;e=k[f>>2]|0;if((d|0)<(e|0)){b=hd(a,h,f)|0;return b|0}if((d|0)>(e|0)){b=(hd(b,i,c)|0)^1;return b|0}d=k[o+16>>2]|0;e=k[p+16>>2]|0;if((d|0)==(e|0)){do if((j|0)!=(l|0))if(m){c=a+12|0;f=1;break}else{c=a+32|0;f=-1;break}else{c=a+4|0;f=0}while(0);e=k[c>>2]|0;do if((t|0)!=(r|0))if(s){c=b+12|0;d=1;break}else{c=b+32|0;d=-1;break}else{c=b+4|0;d=0}while(0);c=k[c>>2]|0;if((e|0)<(c|0)){b=1;return b|0}else return (f|0)<(d|0)&(c|0)>=(e|0)|0}c=(j|0)==(l|0);if(d>>>0<e>>>0){do if(!c){if(!m){c=a+32|0;e=-1;break}if((k[a>>2]|0)==(k[a+8>>2]|0)){c=a+4|0;e=1;break}else{c=a+12|0;e=1;break}}else{c=a+4|0;e=0}while(0);d=k[c>>2]|0;do if((t|0)!=(r|0))if(s){c=b+12|0;break}else{c=b+32|0;break}else c=b+4|0;while(0);c=k[c>>2]|0;if((d|0)!=(c|0)){b=(d|0)<(c|0);return b|0}if(q)c=(k[o+4>>2]|0)==(k[o+12>>2]|0);else c=0;b=(e|0)<0&c;return b|0}else{do if(!c)if(m){c=a+12|0;break}else{c=a+32|0;break}else c=a+4|0;while(0);e=k[c>>2]|0;do if((t|0)!=(r|0)){if(!s){c=b+32|0;d=-1;break}if((k[b>>2]|0)==(k[b+8>>2]|0)){c=b+4|0;d=1;break}else{c=b+12|0;d=1;break}}else{c=b+4|0;d=0}while(0);c=k[c>>2]|0;if((e|0)!=(c|0)){b=(e|0)<(c|0);return b|0}if(n)c=(k[p+4>>2]|0)!=(k[p+12>>2]|0);else c=1;b=(d|0)>0|c;return b|0}return 0}function dd(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;B=r;r=r+144|0;A=B+128|0;z=B+72|0;p=B;x=B+64|0;u=B+32|0;k[z>>2]=k[b>>2];k[z+4>>2]=k[b+4>>2];k[z+8>>2]=k[b+8>>2];k[z+12>>2]=k[b+12>>2];k[z+16>>2]=k[b+16>>2];k[z+20>>2]=k[b+20>>2];k[z+24>>2]=k[b+24>>2];i=z+28|0;k[i>>2]=k[d>>2];k[i+4>>2]=k[d+4>>2];k[i+8>>2]=k[d+8>>2];k[i+12>>2]=k[d+12>>2];k[i+16>>2]=k[d+16>>2];k[i+20>>2]=k[d+20>>2];k[i+24>>2]=k[d+24>>2];i=d;g=k[i>>2]|0;i=k[i+4>>2]|0;v=d+8|0;h=v;b=k[h>>2]|0;h=k[h+4>>2]|0;s=d+16|0;m=s;l=k[m>>2]|0;m=k[m+4>>2]|0;t=d+24|0;j=k[t>>2]|0;k[p>>2]=k[c>>2];k[p+4>>2]=k[c+4>>2];k[p+8>>2]=k[c+8>>2];k[p+12>>2]=k[c+12>>2];k[p+16>>2]=k[c+16>>2];k[p+20>>2]=k[c+20>>2];k[p+24>>2]=k[c+24>>2];q=d+8|0;if((g|0)==(b|0)?(k[d+4>>2]|0)==(k[d+12>>2]|0):0){n=g;o=i}else{n=b;o=h;b=g;h=i;j=j^32}ed(x,f,c,d);y=a+64|0;i=k[e>>2]|0;f=k[x+4>>2]|0;c=_d(80)|0;a:do if(!c){while(1){g=k[35]|0;k[35]=g+0;if(!g)break;Xa[g&0]();c=_d(80)|0;if(c)break a}B=ya(4)|0;k[B>>2]=128;La(B|0,8,1)}while(0);g=c+16|0;C=g;k[C>>2]=n;k[C+4>>2]=o;o=c+24|0;k[o>>2]=b;k[o+4>>2]=h;b=c+32|0;k[b>>2]=l;k[b+4>>2]=m;k[c+40>>2]=j;b=c+44|0;k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];k[b+24>>2]=k[p+24>>2];k[c+72>>2]=0;k[c+76>>2]=f;g=fd(y,i,A,g)|0;b=k[g>>2]|0;if(b)if((b|0)==(c|0))c=b;else{$d(c);c=b}else{b=k[A>>2]|0;k[c>>2]=0;k[c+4>>2]=0;k[c+8>>2]=b;k[g>>2]=c;b=k[k[y>>2]>>2]|0;if(!b)b=c;else{k[y>>2]=b;b=k[g>>2]|0}Nb(k[a+68>>2]|0,b);C=a+72|0;k[C>>2]=(k[C>>2]|0)+1}k[e>>2]=c;if(!((k[d>>2]|0)==(k[q>>2]|0)?(k[d+4>>2]|0)==(k[d+12>>2]|0):0))w=16;do if((w|0)==16){k[u>>2]=k[d>>2];k[u+4>>2]=k[d+4>>2];k[u+8>>2]=k[d+8>>2];k[u+12>>2]=k[d+12>>2];k[u+16>>2]=k[d+16>>2];k[u+20>>2]=k[d+20>>2];k[u+24>>2]=k[d+24>>2];n=d;m=k[n>>2]|0;n=k[n+4>>2]|0;l=v;f=k[l>>2]|0;l=k[l+4>>2]|0;j=s;i=k[j>>2]|0;j=k[j+4>>2]|0;g=k[t>>2]^32;b=_d(80)|0;b:do if(!b){while(1){b=k[35]|0;k[35]=b+0;if(!b)break;Xa[b&0]();b=_d(80)|0;if(b){h=b;break b}}C=ya(4)|0;k[C>>2]=128;La(C|0,8,1)}else h=b;while(0);b=h+16|0;k[b>>2]=k[u>>2];k[b+4>>2]=k[u+4>>2];k[b+8>>2]=k[u+8>>2];k[b+12>>2]=k[u+12>>2];k[b+16>>2]=k[u+16>>2];k[b+20>>2]=k[u+20>>2];k[b+24>>2]=k[u+24>>2];C=h+44|0;k[C>>2]=f;k[C+4>>2]=l;C=h+52|0;k[C>>2]=m;k[C+4>>2]=n;C=h+60|0;k[C>>2]=i;k[C+4>>2]=j;k[h+68>>2]=g;k[h+72>>2]=0;k[h+76>>2]=0;g=fd(y,c,A,b)|0;b=k[g>>2]|0;if(b)if((b|0)==(h|0))g=b;else{$d(h);g=b}else{b=k[A>>2]|0;k[h>>2]=0;k[h+4>>2]=0;k[h+8>>2]=b;k[g>>2]=h;b=k[k[y>>2]>>2]|0;if(!b)b=h;else{k[y>>2]=b;b=k[g>>2]|0}Nb(k[a+68>>2]|0,b);g=a+72|0;k[g>>2]=(k[g>>2]|0)+1;g=h}k[e>>2]=g;b=a+20|0;n=v;m=k[n>>2]|0;n=k[n+4>>2]|0;q=a+24|0;h=k[q>>2]|0;o=a+28|0;i=k[o>>2]|0;if(h>>>0>=i>>>0){p=k[b>>2]|0;j=p;c=h-j|0;l=(c|0)/12|0;f=l+1|0;if(f>>>0>357913941)xa(1340,1363,303,1438);h=(i-j|0)/12|0;if(h>>>0<178956970){h=h<<1;h=h>>>0<f>>>0?f:h;if(!h){j=0;i=0}else w=32}else{h=357913941;w=32}if((w|0)==32){j=h*12|0;j=(j|0)==0?1:j;i=_d(j)|0;c:do if(!i){while(1){i=k[35]|0;k[35]=i+0;if(!i)break;Xa[i&0]();i=_d(j)|0;if(i)break c}C=ya(4)|0;k[C>>2]=128;La(C|0,8,1)}while(0);j=h}h=i+(l*12|0)|0;k[h>>2]=m;k[h+4>>2]=n;k[i+(l*12|0)+8>>2]=g;h=i+(f*12|0)|0;C=i+((((c|0)/-12|0)+l|0)*12|0)|0;fe(C|0,p|0,c|0)|0;k[b>>2]=C;k[q>>2]=h;k[o>>2]=i+(j*12|0);if(!p)f=h;else{$d(p);f=k[q>>2]|0}}else{f=h;k[f>>2]=m;k[f+4>>2]=n;k[h+8>>2]=g;f=(k[q>>2]|0)+12|0;k[q>>2]=f}o=k[b>>2]|0;C=f-o|0;c=(C|0)/12|0;if((C|0)>12){j=(c+-2|0)/2|0;b=o+(j*12|0)|0;l=f+-12|0;h=k[l>>2]|0;i=k[b>>2]|0;if((h|0)==(i|0)){if((k[f+-8>>2]|0)>=(k[o+(j*12|0)+4>>2]|0)){c=g;break}}else if((h|0)>=(i|0)){c=g;break}n=l;m=k[n>>2]|0;n=k[n+4>>2]|0;C=f+-4|0;f=k[C>>2]|0;u=b;v=k[u+4>>2]|0;w=l;k[w>>2]=k[u>>2];k[w+4>>2]=v;k[C>>2]=k[o+(j*12|0)+8>>2];d:do if((c+-1|0)>>>0>=3)while(1){g=j;j=(j+-1|0)/2|0;h=o+(j*12|0)|0;i=k[h>>2]|0;if((m|0)==(i|0)){if((n|0)>=(k[o+(j*12|0)+4>>2]|0))break d}else if((m|0)>=(i|0))break d;v=h;w=k[v+4>>2]|0;C=b;k[C>>2]=k[v>>2];k[C+4>>2]=w;k[o+(g*12|0)+8>>2]=k[o+(j*12|0)+8>>2];if(g>>>0<3){b=h;break}else b=h}while(0);c=b;k[c>>2]=m;k[c+4>>2]=n;k[b+8>>2]=f;c=k[e>>2]|0}else c=g}while(0);j=k[x>>2]|0;b=_d(80)|0;e:do if(!b){while(1){b=k[35]|0;k[35]=b+0;if(!b)break;Xa[b&0]();b=_d(80)|0;if(b){f=b;break e}}C=ya(4)|0;k[C>>2]=128;La(C|0,8,1)}else f=b;while(0);h=f+16|0;i=h;b=z;g=i+56|0;do{k[i>>2]=k[b>>2];i=i+4|0;b=b+4|0}while((i|0)<(g|0));k[f+72>>2]=0;k[f+76>>2]=j;g=fd(y,c,A,h)|0;b=k[g>>2]|0;if(!b){b=k[A>>2]|0;k[f>>2]=0;k[f+4>>2]=0;k[f+8>>2]=b;k[g>>2]=f;b=k[k[y>>2]>>2]|0;if(!b)b=f;else{k[y>>2]=b;b=k[g>>2]|0}Nb(k[a+68>>2]|0,b);C=a+72|0;k[C>>2]=(k[C>>2]|0)+1;C=f;r=B;return C|0}else{if((b|0)==(f|0)){C=b;r=B;return C|0}$d(f);C=b;r=B;return C|0}return 0}function ed(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0;x=r;r=r+80|0;q=x+48|0;s=x+24|0;t=x+12|0;u=x;v=k[c+16>>2]|0;w=k[d+16>>2]|0;o=k[c>>2]|0;l=k[c+8>>2]|0;i=(o|0)==(l|0);if(i)g=(k[c+4>>2]|0)!=(k[c+12>>2]|0);else g=1;m=k[d>>2]|0;n=k[d+8>>2]|0;j=(m|0)==(n|0);do if(j){f=k[d+4>>2]|0;e=(f|0)!=(k[d+12>>2]|0);if(!(e|g^1)){if((o|0)==(m|0)?(k[c+4>>2]|0)==(f|0):0){h=1;break}if((l|0)==(m|0)?(k[c+12>>2]|0)==(f|0):0)h=1;else p=14}else p=9}else{e=1;p=9}while(0);do if((p|0)==9)if(!(g|e^1)){if((m|0)==(o|0)?(k[d+4>>2]|0)==(k[c+4>>2]|0):0){h=1;break}if((n|0)==(o|0)?(k[d+12>>2]|0)==(k[c+4>>2]|0):0)h=1;else p=14}else p=14;while(0);if((p|0)==14){if(i)e=(k[c+4>>2]|0)!=(k[c+12>>2]|0);else e=1;if(j)f=(k[d+4>>2]|0)!=(k[d+12>>2]|0);else f=1;h=e^f^1}if(i)g=(k[c+4>>2]|0)!=(k[c+12>>2]|0);else g=1;do if(j){f=k[d+4>>2]|0;e=(f|0)!=(k[d+12>>2]|0);if(!(e|g^1)){if((o|0)==(m|0)?(k[c+4>>2]|0)==(f|0):0){e=0;break}if((l|0)==(m|0))e=(k[c+12>>2]|0)!=(f|0);else e=1}else p=27}else{e=1;p=27}while(0);do if((p|0)==27)if(!(g|e^1)){if((m|0)==(o|0)?(k[d+4>>2]|0)==(k[c+4>>2]|0):0){e=0;break}if((n|0)==(o|0))e=(k[d+12>>2]|0)!=(k[c+4>>2]|0);else e=1}else e=1;while(0);i=b+24|0;f=h&1;f=e?f|2:f;k[q>>2]=0;k[q+4>>2]=0;k[q+8>>2]=0;k[q+12>>2]=0;k[q+16>>2]=0;k[q+20>>2]=f;g=b+28|0;e=k[g>>2]|0;h=b+32|0;if(e>>>0<(k[h>>2]|0)>>>0){k[e>>2]=k[q>>2];k[e+4>>2]=k[q+4>>2];k[e+8>>2]=k[q+8>>2];k[e+12>>2]=k[q+12>>2];k[e+16>>2]=k[q+16>>2];k[e+20>>2]=k[q+20>>2];m=(k[g>>2]|0)+24|0;k[g>>2]=m}else{bd(i,q);m=k[g>>2]|0}l=m+-24|0;k[s>>2]=0;k[s+4>>2]=0;k[s+8>>2]=0;k[s+12>>2]=0;k[s+16>>2]=0;k[s+20>>2]=f;if(m>>>0<(k[h>>2]|0)>>>0){k[m>>2]=k[s>>2];k[m+4>>2]=k[s+4>>2];k[m+8>>2]=k[s+8>>2];k[m+12>>2]=k[s+12>>2];k[m+16>>2]=k[s+16>>2];k[m+20>>2]=k[s+20>>2];i=(k[g>>2]|0)+24|0;k[g>>2]=i}else{bd(i,s);i=k[g>>2]|0}h=i+-24|0;g=k[b>>2]|0;j=b+4|0;e=k[j>>2]|0;do if((g|0)==(e|0)){f=k[c+24>>2]&31;k[t>>2]=k[c+20>>2];k[t+4>>2]=0;k[t+8>>2]=f;f=b+8|0;if(g>>>0<(k[f>>2]|0)>>>0){k[g>>2]=k[t>>2];k[g+4>>2]=k[t+4>>2];k[g+8>>2]=k[t+8>>2];e=(k[j>>2]|0)+12|0;k[j>>2]=e;break}else{gd(b,t);e=k[j>>2]|0;break}}else f=b+8|0;while(0);t=k[d+24>>2]&31;k[u>>2]=k[d+20>>2];k[u+4>>2]=0;k[u+8>>2]=t;if(e>>>0<(k[f>>2]|0)>>>0){k[e>>2]=k[u>>2];k[e+4>>2]=k[u+4>>2];k[e+8>>2]=k[u+8>>2];k[j>>2]=(k[j>>2]|0)+12;b=k[b>>2]|0;d=b+(v*12|0)|0;k[l>>2]=d;b=b+(w*12|0)|0;k[h>>2]=b;b=m+-16|0;k[b>>2]=h;b=i+-16|0;k[b>>2]=l;b=l;d=h;k[a>>2]=b;b=a+4|0;k[b>>2]=d;r=x;return}else{gd(b,u);b=k[b>>2]|0;d=b+(v*12|0)|0;k[l>>2]=d;b=b+(w*12|0)|0;k[h>>2]=b;b=m+-16|0;k[b>>2]=h;b=i+-16|0;k[b>>2]=l;b=l;d=h;k[a>>2]=b;b=a+4|0;k[b>>2]=d;r=x;return}}function fd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;h=a+4|0;e=b;if((h|0)!=(b|0)?(f=b+16|0,!(cd(d,f)|0)):0){if(!(cd(f,d)|0)){k[c>>2]=e;return c|0}a=b+4|0;e=k[a>>2]|0;g=(e|0)==0;if(g){f=b;while(1){e=k[f+8>>2]|0;if((k[e>>2]|0)==(f|0))break;else f=e}}else while(1){f=k[e>>2]|0;if(!f)break;else e=f}if((e|0)!=(h|0)?!(cd(d,e+16|0)|0):0){e=k[h>>2]|0;if(!e){k[c>>2]=h;c=h;return c|0}else a=e;while(1){e=a+16|0;if(cd(d,e)|0){e=k[a>>2]|0;if(!e){h=33;break}}else{if(!(cd(e,d)|0)){h=38;break}f=a+4|0;e=k[f>>2]|0;if(!e){h=37;break}}a=e}if((h|0)==33){k[c>>2]=a;c=a;return c|0}else if((h|0)==37){k[c>>2]=a;c=f;return c|0}else if((h|0)==38){k[c>>2]=a;return c|0}}if(g){k[c>>2]=b;c=a;return c|0}else{k[c>>2]=e;c=e;return c|0}}g=k[b>>2]|0;if((k[a>>2]|0)!=(b|0)){if(!g){f=b;while(1){e=k[f+8>>2]|0;if((k[e>>2]|0)==(f|0))f=e;else break}}else{e=g;while(1){f=k[e+4>>2]|0;if(!f)break;else e=f}}if(!(cd(e+16|0,d)|0)){e=k[h>>2]|0;if(!e){k[c>>2]=h;c=h;return c|0}else a=e;while(1){e=a+16|0;if(cd(d,e)|0){e=k[a>>2]|0;if(!e){h=14;break}}else{if(!(cd(e,d)|0)){h=19;break}f=a+4|0;e=k[f>>2]|0;if(!e){h=18;break}}a=e}if((h|0)==14){k[c>>2]=a;c=a;return c|0}else if((h|0)==18){k[c>>2]=a;c=f;return c|0}else if((h|0)==19){k[c>>2]=a;return c|0}}else{a=b;f=g}}else{a=b;f=g}if(!f){k[c>>2]=b;c=a;return c|0}else{d=e;k[c>>2]=d;c=d+4|0;return c|0}return 0}function gd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0;f=a+4|0;g=k[a>>2]|0;c=g;h=(k[f>>2]|0)-c|0;i=(h|0)/12|0;j=i+1|0;if(j>>>0>357913941)xa(1340,1363,303,1438);l=a+8|0;c=((k[l>>2]|0)-c|0)/12|0;if(c>>>0<178956970){c=c<<1;c=c>>>0<j>>>0?j:c;if(!c){c=0;d=0}else e=5}else{c=357913941;e=5}if((e|0)==5){e=c*12|0;e=(e|0)==0?1:e;d=_d(e)|0;a:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(e)|0;if(d)break a}a=ya(4)|0;k[a>>2]=128;La(a|0,8,1)}while(0)}e=d+(i*12|0)|0;k[e>>2]=k[b>>2];k[e+4>>2]=k[b+4>>2];k[e+8>>2]=k[b+8>>2];b=d+((((h|0)/-12|0)+i|0)*12|0)|0;fe(b|0,g|0,h|0)|0;k[a>>2]=b;k[f>>2]=d+(j*12|0);k[l>>2]=d+(c*12|0);if(!g)return;$d(g);return}function hd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0.0,l=0.0,m=0.0,n=0.0;i=k[a>>2]|0;f=k[a+8>>2]|0;if((i|0)==(f|0))d=(k[a+4>>2]|0)!=(k[a+12>>2]|0);else d=1;h=k[b>>2]|0;if((h|0)==(k[b+8>>2]|0))e=(k[b+4>>2]|0)!=(k[b+12>>2]|0);else e=1;if(d)if(e){e=k[c>>2]|0;d=k[c+4>>2]|0;if((k[a+16>>2]|0)==(k[b+16>>2]|0)){i=(Pc(i,k[a+4>>2]|0,f,k[a+12>>2]|0,e,d)|0)==1;return i|0}else{j=+jd(a,e,d);i=j<+jd(b,e,d);return i|0}}else{g=k[b+4>>2]|0;f=k[c>>2]|0;e=k[c+4>>2]|0;d=id(h,g,a,f,e,1)|0;if(!d){j=+(h|0)-+(f|0);l=+(g|0)-+(e|0);i=!((j*j+l*l)/(j*2.0)<+jd(a,f,e));return i|0}else{i=(d|0)==-1;return i|0}}if(e){f=k[a+4>>2]|0;g=k[c>>2]|0;e=k[c+4>>2]|0;d=id(i,f,b,g,e,0)|0;if(!d){l=+(i|0)-+(g|0);j=+(f|0)-+(e|0);i=(l*l+j*j)/(l*2.0)<+jd(b,g,e);return i|0}else{i=(d|0)==-1;return i|0}}do if((i|0)>(h|0)){e=k[c+4>>2]|0;d=k[a+4>>2]|0;if((e|0)>(d|0)){f=e;e=k[b+4>>2]|0;break}else{i=0;return i|0}}else{if((i|0)>=(h|0)){h=k[a+4>>2]|0;b=k[b+4>>2]|0;b=ge(b|0,((b|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;h=L;i=k[c+4>>2]|0;i=ee(i|0,((i|0)<0)<<31>>31|0,1)|0;c=L;i=(h|0)<(c|0)|(h|0)==(c|0)&b>>>0<i>>>0;return i|0}f=k[c+4>>2]|0;e=k[b+4>>2]|0;if((f|0)<(e|0)){d=k[a+4>>2]|0;break}else{i=1;return i|0}}while(0);l=+(k[c>>2]|0);m=+(i|0)-l;j=+(f|0);n=+(d|0)-j;l=+(h|0)-l;j=+(e|0)-j;i=(n*n+m*m)/(m*2.0)<(j*j+l*l)/(l*2.0);return i|0}function id(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0.0,h=0,i=0,j=0,l=0,m=0.0,n=0.0,o=0.0,q=0.0,r=0,s=0,u=0,v=0,w=0,x=0,y=0,z=0;h=k[c>>2]|0;i=k[c+4>>2]|0;j=k[c+8>>2]|0;l=k[c+12>>2]|0;if((Pc(h,i,j,l,d,e)|0)!=-1){c=((k[c+24>>2]|0)>>>4&2)+-1|0;return c|0}q=+(d|0)-+(a|0);m=+(e|0)-+(b|0);n=+(j|0)-+(h|0);o=+(l|0)-+(i|0);if((h|0)==(j|0))if((e|0)>=(b|0)|f)return ((e|0)>(b|0)&f)<<31>>31|0;else{c=1;return c|0}y=be(j|0,((j|0)<0)<<31>>31|0,h|0,((h|0)<0)<<31>>31|0)|0;x=L;u=be(l|0,((l|0)<0)<<31>>31|0,i|0,((i|0)<0)<<31>>31|0)|0;s=L;l=be(d|0,((d|0)<0)<<31>>31|0,a|0,((a|0)<0)<<31>>31|0)|0;j=L;i=be(e|0,((e|0)<0)<<31>>31|0,b|0,((b|0)<0)<<31>>31|0)|0;h=L;e=(x|0)<0;z=be(0,0,y|0,x|0)|0;x=e?L:x;a=(s|0)<0;v=be(0,0,u|0,s|0)|0;s=a?L:s;b=(j|0)<0;r=be(0,0,l|0,j|0)|0;j=b?L:j;d=(h|0)<0;w=be(0,0,i|0,h|0)|0;h=ne((e?z:y)|0,x|0,(d?w:i)|0,(d?L:h)|0)|0;i=L;j=ne((a?v:u)|0,s|0,(b?r:l)|0,j|0)|0;l=L;a=b^a;do if(d^e){if(!a){z=ge(j|0,l|0,h|0,i|0)|0;g=-(+(z>>>0)+4294967296.0*+(L>>>0));break}if(i>>>0>l>>>0|(i|0)==(l|0)&h>>>0>j>>>0){z=be(h|0,i|0,j|0,l|0)|0;g=-(+(z>>>0)+4294967296.0*+(L>>>0));break}else{z=be(j|0,l|0,h|0,i|0)|0;g=+(z>>>0)+4294967296.0*+(L>>>0);break}}else{if(a){z=ge(j|0,l|0,h|0,i|0)|0;g=+(z>>>0)+4294967296.0*+(L>>>0);break}if(i>>>0<l>>>0|(i|0)==(l|0)&h>>>0<j>>>0){z=be(j|0,l|0,h|0,i|0)|0;g=-(+(z>>>0)+4294967296.0*+(L>>>0));break}else{z=be(h|0,i|0,j|0,l|0)|0;g=+(z>>>0)+4294967296.0*+(L>>>0);break}}while(0);if(!(g!=0.0&!(g<0.0))){p[t>>3]=(m-q)*((q+m)*n);u=k[t>>2]|0;r=k[t+4>>2]|0;p[t>>3]=m*(q*(o*2.0));v=k[t>>2]|0;s=k[t+4>>2]|0;x=(r|0)>-1|(r|0)==-1&u>>>0>4294967295;w=be(0,-2147483648,u|0,r|0)|0;u=x?w:u;r=x?L:r;x=(s|0)>-1|(s|0)==-1&v>>>0>4294967295;w=be(0,-2147483648,v|0,s|0)|0;v=x?w:v;s=x?L:s;x=be(u|0,r|0,v|0,s|0)|0;w=L;z=be(v|0,s|0,u|0,r|0)|0;y=L;z=r>>>0>s>>>0|(r|0)==(s|0)&u>>>0>v>>>0?(w>>>0>0|(w|0)==0&x>>>0>4)<<31>>31:(y>>>0>0|(y|0)==0&z>>>0>4)&1;return ((z|0)!=0&((z|0)==1^f)?(f?-1:1):0)|0}if(!(k[c+24>>2]&32)){z=f<<31>>31;return z|0}else{z=f&1^1;return z|0}return 0}function jd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0,f=0,g=0.0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0.0;e=k[a>>2]|0;f=k[a+8>>2]|0;if((e|0)==(f|0)){g=(+(e|0)-+(b|0))*.5;return +g}t=+(f|0)-+(e|0);l=k[a+12>>2]|0;q=k[a+4>>2]|0;g=+(l|0)-+(q|0);t=t*t;d=+X(+(t+g*g));g=g<0.0?(d-g)/t:1.0/(d+g);n=((e|0)<0)<<31>>31;p=be(f|0,((f|0)<0)<<31>>31|0,e|0,n|0)|0;a=L;r=((q|0)<0)<<31>>31;l=be(l|0,((l|0)<0)<<31>>31|0,q|0,r|0)|0;f=L;n=be(b|0,((b|0)<0)<<31>>31|0,e|0,n|0)|0;m=L;r=be(c|0,((c|0)<0)<<31>>31|0,q|0,r|0)|0;q=L;i=(a|0)<0;e=be(0,0,p|0,a|0)|0;a=i?L:a;j=(f|0)<0;b=be(0,0,l|0,f|0)|0;f=j?L:f;c=(m|0)<0;o=be(0,0,n|0,m|0)|0;m=c?L:m;h=(q|0)<0;s=be(0,0,r|0,q|0)|0;a=ne((h?s:r)|0,(h?L:q)|0,(i?e:p)|0,a|0)|0;e=L;f=ne((c?o:n)|0,m|0,(j?b:l)|0,f|0)|0;b=L;c=j^c;do if(i^h){if(!c){s=ge(a|0,e|0,f|0,b|0)|0;d=-(+(s>>>0)+4294967296.0*+(L>>>0));break}if(e>>>0>b>>>0|(e|0)==(b|0)&a>>>0>f>>>0){s=be(a|0,e|0,f|0,b|0)|0;d=-(+(s>>>0)+4294967296.0*+(L>>>0));break}else{s=be(f|0,b|0,a|0,e|0)|0;d=+(s>>>0)+4294967296.0*+(L>>>0);break}}else{if(c){s=ge(a|0,e|0,f|0,b|0)|0;d=+(s>>>0)+4294967296.0*+(L>>>0);break}if(e>>>0<b>>>0|(e|0)==(b|0)&a>>>0<f>>>0){s=be(f|0,b|0,a|0,e|0)|0;d=-(+(s>>>0)+4294967296.0*+(L>>>0));break}else{s=be(a|0,e|0,f|0,b|0)|0;d=+(s>>>0)+4294967296.0*+(L>>>0);break}}while(0);t=g*d;return +t}function kd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0.0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,M=0,N=0;N=r;r=r+32|0;M=N;H=b;a:while(1){q=H;G=H+-28|0;s=H+-56|0;v=H+-20|0;D=H+-24|0;F=H+-16|0;K=a;b:while(1){p=K;a=q-p|0;switch((a|0)/28|0|0){case 2:{J=4;break a}case 3:{J=20;break a}case 4:{J=21;break a}case 5:{J=22;break a}case 1:case 0:{J=240;break a}default:{}}if((a|0)<868){J=24;break a}g=(a|0)/56|0;h=K+(g*28|0)|0;if((a|0)>27972){a=(a|0)/112|0;a=nd(K,K+(a*28|0)|0,h,K+((a+g|0)*28|0)|0,G)|0}else a=ld(K,h,G)|0;o=k[K>>2]|0;n=k[h>>2]|0;do if((o|0)==(n|0)){d=k[K+8>>2]|0;b=(o|0)==(d|0);if(b?(t=k[K+4>>2]|0,(t|0)==(k[K+12>>2]|0)):0){if((o|0)!=(k[K+(g*28|0)+8>>2]|0)){c=G;break}b=k[K+(g*28|0)+4>>2]|0;if((b|0)==(k[K+(g*28|0)+12>>2]|0))if((t|0)<(b|0)){c=G;break}else{J=92;break}else if((t|0)>(b|0)){J=92;break}else{c=G;break}}e=k[K+(g*28|0)+8>>2]|0;if((o|0)==(e|0)){if(!b){J=92;break}if((k[K+4>>2]|0)<(k[K+(g*28|0)+4>>2]|0)){c=G;break}else{J=92;break}}if(!b){b=k[K+4>>2]|0;c=k[K+(g*28|0)+4>>2]|0;if((b|0)==(c|0))if((Pc(d,k[K+12>>2]|0,o,b,e,k[K+(g*28|0)+12>>2]|0)|0)==1){c=G;break}else{J=92;break}else if((b|0)<(c|0)){c=G;break}else{J=92;break}}else c=G}else if((o|0)<(n|0))c=G;else J=92;while(0);c:do if((J|0)==92){J=0;d:do if((K|0)!=(s|0)){l=K+(g*28|0)+8|0;m=K+(g*28|0)+4|0;j=K+(g*28|0)+12|0;c=s;i=G;e:while(1){b=k[c>>2]|0;do if((b|0)==(n|0)){e=k[i+-20>>2]|0;b=(n|0)==(e|0);if(b?(z=k[i+-24>>2]|0,(z|0)==(k[i+-16>>2]|0)):0){if((n|0)!=(k[l>>2]|0))break e;b=k[m>>2]|0;if((b|0)==(k[j>>2]|0))if((z|0)<(b|0))break e;else break;else if((z|0)>(b|0))break;else break e}g=k[l>>2]|0;if((n|0)==(g|0)){if(!b)break;if((k[i+-24>>2]|0)<(k[m>>2]|0))break e;else break}if(b)break e;b=k[i+-24>>2]|0;d=k[m>>2]|0;if((b|0)==(d|0))if((Pc(e,k[i+-16>>2]|0,n,k[c+4>>2]|0,g,k[j>>2]|0)|0)==1)break e;else break;else if((b|0)<(d|0))break e;else break}else if((b|0)<(n|0))break e;while(0);b=c+-28|0;if((K|0)==(b|0))break d;else{i=c;c=b}}k[M>>2]=k[K>>2];k[M+4>>2]=k[K+4>>2];k[M+8>>2]=k[K+8>>2];k[M+12>>2]=k[K+12>>2];k[M+16>>2]=k[K+16>>2];k[M+20>>2]=k[K+20>>2];k[M+24>>2]=k[K+24>>2];k[K>>2]=k[c>>2];k[K+4>>2]=k[c+4>>2];k[K+8>>2]=k[c+8>>2];k[K+12>>2]=k[c+12>>2];k[K+16>>2]=k[c+16>>2];k[K+20>>2]=k[c+20>>2];k[K+24>>2]=k[c+24>>2];k[c>>2]=k[M>>2];k[c+4>>2]=k[M+4>>2];k[c+8>>2]=k[M+8>>2];k[c+12>>2]=k[M+12>>2];k[c+16>>2]=k[M+16>>2];k[c+20>>2]=k[M+20>>2];k[c+24>>2]=k[M+24>>2];a=a+1|0;break c}while(0);e=K+28|0;a=k[G>>2]|0;do if((o|0)==(a|0)){c=k[K+8>>2]|0;a=(o|0)==(c|0);if(a?(u=k[K+4>>2]|0,(u|0)==(k[K+12>>2]|0)):0){if((o|0)!=(k[v>>2]|0)){a=e;break}a=k[D>>2]|0;if((a|0)==(k[F>>2]|0))if((u|0)<(a|0)){a=e;break}else{J=109;break}else if((u|0)>(a|0)){J=109;break}else{a=e;break}}d=k[v>>2]|0;if((o|0)==(d|0)){if(!a){J=109;break}if((k[K+4>>2]|0)<(k[D>>2]|0)){a=e;break}else{J=109;break}}if(!a){a=k[K+4>>2]|0;b=k[D>>2]|0;if((a|0)==(b|0))if((Pc(c,k[K+12>>2]|0,o,a,d,k[F>>2]|0)|0)==1){a=e;break}else{J=109;break}else if((a|0)<(b|0)){a=e;break}else{J=109;break}}else a=e}else if((o|0)<(a|0))a=e;else J=109;while(0);if((J|0)==109){J=0;if((e|0)==(G|0)){J=240;break a}h=K+8|0;i=K+4|0;j=K+12|0;g=K;f:while(1){a=k[g+28>>2]|0;do if((o|0)==(a|0)){c=k[h>>2]|0;a=(o|0)==(c|0);if(a?(w=k[i>>2]|0,(w|0)==(k[j>>2]|0)):0){if((o|0)!=(k[g+36>>2]|0))break f;a=k[g+32>>2]|0;if((a|0)==(k[g+40>>2]|0))if((w|0)<(a|0))break f;else break;else if((w|0)>(a|0))break;else break f}d=k[g+36>>2]|0;if((o|0)==(d|0)){if(!a)break;if((k[i>>2]|0)<(k[g+32>>2]|0))break f;else break}if(a)break f;a=k[i>>2]|0;b=k[g+32>>2]|0;if((a|0)==(b|0))if((Pc(c,k[j>>2]|0,o,a,d,k[g+40>>2]|0)|0)==1)break f;else break;else if((a|0)<(b|0))break f;else break}else if((o|0)<(a|0))break f;while(0);a=e+28|0;if((a|0)==(G|0)){J=240;break a}else{g=e;e=a}}k[M>>2]=k[e>>2];k[M+4>>2]=k[e+4>>2];k[M+8>>2]=k[e+8>>2];k[M+12>>2]=k[e+12>>2];k[M+16>>2]=k[e+16>>2];k[M+20>>2]=k[e+20>>2];k[M+24>>2]=k[e+24>>2];k[e>>2]=k[G>>2];k[e+4>>2]=k[G+4>>2];k[e+8>>2]=k[G+8>>2];k[e+12>>2]=k[G+12>>2];k[e+16>>2]=k[G+16>>2];k[e+20>>2]=k[G+20>>2];k[e+24>>2]=k[G+24>>2];k[G>>2]=k[M>>2];k[G+4>>2]=k[M+4>>2];k[G+8>>2]=k[M+8>>2];k[G+12>>2]=k[M+12>>2];k[G+16>>2]=k[M+16>>2];k[G+20>>2]=k[M+20>>2];k[G+24>>2]=k[M+24>>2];a=g+56|0}if((a|0)==(G|0)){J=240;break a}j=K+4|0;l=K+8|0;m=K+12|0;g=G;while(1){i=k[K>>2]|0;g:while(1){b=k[a>>2]|0;do if((i|0)==(b|0)){d=k[l>>2]|0;b=(i|0)==(d|0);if(b?(x=k[j>>2]|0,(x|0)==(k[m>>2]|0)):0){if((i|0)!=(k[a+8>>2]|0)){h=g;break g}b=k[a+4>>2]|0;if((b|0)==(k[a+12>>2]|0))if((x|0)<(b|0)){h=g;break g}else break;else if((x|0)>(b|0))break;else{h=g;break g}}e=k[a+8>>2]|0;if((i|0)==(e|0)){if(!b)break;if((k[j>>2]|0)<(k[a+4>>2]|0)){h=g;break g}else break}if(b){h=g;break g}b=k[j>>2]|0;c=k[a+4>>2]|0;if((b|0)==(c|0))if((Pc(d,k[m>>2]|0,i,b,e,k[a+12>>2]|0)|0)==1){h=g;break g}else break;else if((b|0)<(c|0)){h=g;break g}else break}else if((i|0)<(b|0)){h=g;break g}while(0);a=a+28|0}while(1){g=h+-28|0;b=k[g>>2]|0;if((i|0)!=(b|0))if((i|0)<(b|0)){h=g;continue}else break;d=k[l>>2]|0;b=(i|0)==(d|0);if(b?(y=k[j>>2]|0,(y|0)==(k[m>>2]|0)):0){if((i|0)!=(k[h+-20>>2]|0)){h=g;continue}b=k[h+-24>>2]|0;if((b|0)==(k[h+-16>>2]|0))if((y|0)<(b|0)){h=g;continue}else break;else if((y|0)>(b|0))break;else{h=g;continue}}e=k[h+-20>>2]|0;if((i|0)==(e|0)){if(!b)break;if((k[j>>2]|0)<(k[h+-24>>2]|0)){h=g;continue}else break}if(b){h=g;continue}b=k[j>>2]|0;c=k[h+-24>>2]|0;if((b|0)==(c|0))if((Pc(d,k[m>>2]|0,i,b,e,k[h+-16>>2]|0)|0)==1){h=g;continue}else break;else if((b|0)<(c|0)){h=g;continue}else break}if(a>>>0>=g>>>0){K=a;continue b};k[M>>2]=k[a>>2];k[M+4>>2]=k[a+4>>2];k[M+8>>2]=k[a+8>>2];k[M+12>>2]=k[a+12>>2];k[M+16>>2]=k[a+16>>2];k[M+20>>2]=k[a+20>>2];k[M+24>>2]=k[a+24>>2];k[a>>2]=k[g>>2];k[a+4>>2]=k[g+4>>2];k[a+8>>2]=k[g+8>>2];k[a+12>>2]=k[g+12>>2];k[a+16>>2]=k[g+16>>2];k[a+20>>2]=k[g+20>>2];k[a+24>>2]=k[g+24>>2];k[g>>2]=k[M>>2];k[g+4>>2]=k[M+4>>2];k[g+8>>2]=k[M+8>>2];k[g+12>>2]=k[M+12>>2];k[g+16>>2]=k[M+16>>2];k[g+20>>2]=k[M+20>>2];k[g+24>>2]=k[M+24>>2];a=a+28|0}}while(0);b=K+28|0;h:do if(b>>>0<c>>>0)while(1){j=k[h>>2]|0;l=h+8|0;m=h+4|0;n=h+12|0;o=b;i:while(1){b=k[o>>2]|0;do if((b|0)==(j|0)){e=k[o+8>>2]|0;b=(j|0)==(e|0);if(b?(A=k[o+4>>2]|0,(A|0)==(k[o+12>>2]|0)):0){if((j|0)!=(k[l>>2]|0))break;b=k[m>>2]|0;if((b|0)==(k[n>>2]|0))if((A|0)<(b|0))break;else break i;else if((A|0)>(b|0))break i;else break}g=k[l>>2]|0;if((j|0)==(g|0)){if(!b)break i;if((k[o+4>>2]|0)<(k[m>>2]|0))break;else break i}if(!b){b=k[o+4>>2]|0;d=k[m>>2]|0;if((b|0)==(d|0))if((Pc(e,k[o+12>>2]|0,j,b,g,k[n>>2]|0)|0)==1)break;else break i;else if((b|0)<(d|0))break;else break i}}else if((b|0)>=(j|0))break i;while(0);o=o+28|0}while(1){i=c+-28|0;b=k[i>>2]|0;if((b|0)!=(j|0))if((b|0)<(j|0))break;else{c=i;continue}e=k[c+-20>>2]|0;b=(j|0)==(e|0);if(b?(B=k[c+-24>>2]|0,(B|0)==(k[c+-16>>2]|0)):0){if((j|0)!=(k[l>>2]|0))break;b=k[m>>2]|0;if((b|0)==(k[n>>2]|0))if((B|0)<(b|0))break;else{c=i;continue}else if((B|0)>(b|0)){c=i;continue}else break}g=k[l>>2]|0;if((j|0)==(g|0)){if(!b){c=i;continue}if((k[c+-24>>2]|0)<(k[m>>2]|0))break;else{c=i;continue}}if(b)break;b=k[c+-24>>2]|0;d=k[m>>2]|0;if((b|0)==(d|0))if((Pc(e,k[c+-16>>2]|0,j,b,g,k[n>>2]|0)|0)==1)break;else{c=i;continue}else if((b|0)<(d|0))break;else{c=i;continue}}if(o>>>0>i>>>0){i=o;break h};k[M>>2]=k[o>>2];k[M+4>>2]=k[o+4>>2];k[M+8>>2]=k[o+8>>2];k[M+12>>2]=k[o+12>>2];k[M+16>>2]=k[o+16>>2];k[M+20>>2]=k[o+20>>2];k[M+24>>2]=k[o+24>>2];k[o>>2]=k[i>>2];k[o+4>>2]=k[i+4>>2];k[o+8>>2]=k[i+8>>2];k[o+12>>2]=k[i+12>>2];k[o+16>>2]=k[i+16>>2];k[o+20>>2]=k[i+20>>2];k[o+24>>2]=k[i+24>>2];k[i>>2]=k[M>>2];k[i+4>>2]=k[M+4>>2];k[i+8>>2]=k[M+8>>2];k[i+12>>2]=k[M+12>>2];k[i+16>>2]=k[M+16>>2];k[i+20>>2]=k[M+20>>2];k[i+24>>2]=k[M+24>>2];b=o+28|0;c=i;h=(h|0)==(o|0)?i:h;a=a+1|0}else i=b;while(0);j:do if((i|0)!=(h|0)){g=k[h>>2]|0;b=k[i>>2]|0;do if((g|0)==(b|0)){d=k[h+8>>2]|0;b=(g|0)==(d|0);if(b?(C=k[h+4>>2]|0,(C|0)==(k[h+12>>2]|0)):0){if((g|0)!=(k[i+8>>2]|0))break;b=k[i+4>>2]|0;if((b|0)==(k[i+12>>2]|0))if((C|0)<(b|0))break;else break j;else if((C|0)>(b|0))break j;else break}e=k[i+8>>2]|0;if((g|0)==(e|0)){if(!b)break j;if((k[h+4>>2]|0)<(k[i+4>>2]|0))break;else break j}if(!b){b=k[h+4>>2]|0;c=k[i+4>>2]|0;if((b|0)==(c|0))if((Pc(d,k[h+12>>2]|0,g,b,e,k[i+12>>2]|0)|0)==1)break;else break j;else if((b|0)<(c|0))break;else break j}}else if((g|0)>=(b|0))break j;while(0);k[M>>2]=k[i>>2];k[M+4>>2]=k[i+4>>2];k[M+8>>2]=k[i+8>>2];k[M+12>>2]=k[i+12>>2];k[M+16>>2]=k[i+16>>2];k[M+20>>2]=k[i+20>>2];k[M+24>>2]=k[i+24>>2];k[i>>2]=k[h>>2];k[i+4>>2]=k[h+4>>2];k[i+8>>2]=k[h+8>>2];k[i+12>>2]=k[h+12>>2];k[i+16>>2]=k[h+16>>2];k[i+20>>2]=k[h+20>>2];k[i+24>>2]=k[h+24>>2];k[h>>2]=k[M>>2];k[h+4>>2]=k[M+4>>2];k[h+8>>2]=k[M+8>>2];k[h+12>>2]=k[M+12>>2];k[h+16>>2]=k[M+16>>2];k[h+20>>2]=k[M+20>>2];k[h+24>>2]=k[M+24>>2];a=a+1|0}while(0);if(!a){a=od(K,i)|0;b=i+28|0;if(od(b,H)|0){J=235;break}if(a){K=b;continue}}o=i;if((o-p|0)>=(q-o|0)){J=239;break}kd(K,i);K=i+28|0}if((J|0)==235){J=0;if(a){J=240;break}else{a=K;H=i;continue}}else if((J|0)==239){J=0;kd(i+28|0,H);a=K;H=i;continue}}if((J|0)==4){e=k[G>>2]|0;a=k[K>>2]|0;do if((e|0)==(a|0)){d=k[v>>2]|0;a=(e|0)==(d|0);if(a?(E=k[D>>2]|0,(E|0)==(k[F>>2]|0)):0){if((e|0)!=(k[K+8>>2]|0))break;a=k[K+4>>2]|0;if((a|0)==(k[K+12>>2]|0)){if((E|0)<(a|0))break;r=N;return}else{if((E|0)<=(a|0))break;r=N;return}}c=k[K+8>>2]|0;if((e|0)==(c|0)){if(!a){r=N;return}if((k[D>>2]|0)<(k[K+4>>2]|0))break;r=N;return}if(!a){a=k[D>>2]|0;b=k[K+4>>2]|0;if((a|0)==(b|0)){if((Pc(d,k[F>>2]|0,e,a,c,k[K+12>>2]|0)|0)==1)break;r=N;return}else{if((a|0)<(b|0))break;r=N;return}}}else if((e|0)>=(a|0)){r=N;return}while(0);k[M>>2]=k[K>>2];k[M+4>>2]=k[K+4>>2];k[M+8>>2]=k[K+8>>2];k[M+12>>2]=k[K+12>>2];k[M+16>>2]=k[K+16>>2];k[M+20>>2]=k[K+20>>2];k[M+24>>2]=k[K+24>>2];k[K>>2]=k[G>>2];k[K+4>>2]=k[G+4>>2];k[K+8>>2]=k[G+8>>2];k[K+12>>2]=k[G+12>>2];k[K+16>>2]=k[G+16>>2];k[K+20>>2]=k[G+20>>2];k[K+24>>2]=k[G+24>>2];k[G>>2]=k[M>>2];k[G+4>>2]=k[M+4>>2];k[G+8>>2]=k[M+8>>2];k[G+12>>2]=k[M+12>>2];k[G+16>>2]=k[M+16>>2];k[G+20>>2]=k[M+20>>2];k[G+24>>2]=k[M+24>>2];r=N;return}else if((J|0)==20){ld(K,K+28|0,G)|0;r=N;return}else if((J|0)==21){md(K,K+28|0,K+56|0,G)|0;r=N;return}else if((J|0)==22){nd(K,K+28|0,K+56|0,K+84|0,G)|0;r=N;return}else if((J|0)==24){b=K+56|0;ld(K,K+28|0,b)|0;a=K+84|0;if((a|0)!=(H|0)){x=a;while(1){w=k[x>>2]|0;a=k[b>>2]|0;do if((w|0)==(a|0)){d=k[x+8>>2]|0;a=(w|0)==(d|0);if(a?(I=k[x+4>>2]|0,(I|0)==(k[x+12>>2]|0)):0){if((w|0)!=(k[b+8>>2]|0)){d=w;J=41;break}a=k[b+4>>2]|0;if((a|0)==(k[b+12>>2]|0))if((I|0)<(a|0)){d=w;J=41;break}else break;else if((I|0)>(a|0))break;else{d=w;J=41;break}}e=k[b+8>>2]|0;if((w|0)==(e|0)){if(!a)break;if((k[x+4>>2]|0)<(k[b+4>>2]|0)){d=w;J=41;break}else break}if(!a){a=k[x+4>>2]|0;c=k[b+4>>2]|0;if((a|0)==(c|0))if((Pc(d,k[x+12>>2]|0,w,a,e,k[b+12>>2]|0)|0)==1){J=41;break}else break;else if((a|0)<(c|0)){J=41;break}else break}else{d=w;J=41}}else if((w|0)<(a|0)){d=k[x+8>>2]|0;J=41}while(0);if((J|0)==41){J=0;u=k[x+4>>2]|0;v=k[x+12>>2]|0;G=x+16|0;k[M>>2]=k[G>>2];k[M+4>>2]=k[G+4>>2];k[M+8>>2]=k[G+8>>2];k[x>>2]=k[b>>2];k[x+4>>2]=k[b+4>>2];k[x+8>>2]=k[b+8>>2];k[x+12>>2]=k[b+12>>2];k[x+16>>2]=k[b+16>>2];k[x+20>>2]=k[b+20>>2];k[x+24>>2]=k[b+24>>2];k:do if((b|0)==(K|0))a=K;else{t=(w|0)==(d|0);j=((w|0)<0)<<31>>31;n=be(d|0,((d|0)<0)<<31>>31|0,w|0,j|0)|0;o=L;l=((u|0)<0)<<31>>31;q=be(v|0,((v|0)<0)<<31>>31|0,u|0,l|0)|0;s=L;m=(o|0)<0;p=be(0,0,n|0,o|0)|0;n=m?p:n;o=m?L:o;p=(s|0)<0;G=be(0,0,q|0,s|0)|0;q=p?G:q;s=p?L:s;if(t&(u|0)==(v|0))while(1){a=b;b=b+-28|0;c=k[b>>2]|0;do if((w|0)==(c|0)){if((w|0)==(k[a+-20>>2]|0)){c=k[a+-24>>2]|0;if((c|0)==(k[a+-16>>2]|0))if((u|0)<(c|0))break;else break k;else if((u|0)>(c|0))break k;else break}}else if((w|0)>=(c|0))break k;while(0);k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];k[a+24>>2]=k[b+24>>2];if((b|0)==(K|0)){a=K;break k}}while(1){a=b;b=b+-28|0;c=k[b>>2]|0;do if((w|0)==(c|0)){c=k[a+-20>>2]|0;if((w|0)==(c|0)){if(!t)break k;if((u|0)<(k[a+-24>>2]|0))break;else break k}if(!t){e=k[a+-24>>2]|0;if((u|0)!=(e|0))if((u|0)<(e|0))break;else break k;h=be(w|0,j|0,c|0,((c|0)<0)<<31>>31|0)|0;g=L;e=k[a+-16>>2]|0;e=be(u|0,l|0,e|0,((e|0)<0)<<31>>31|0)|0;c=L;i=(g|0)<0;F=be(0,0,h|0,g|0)|0;g=i?L:g;G=(c|0)<0;E=be(0,0,e|0,c|0)|0;c=ne((G?E:e)|0,(G?L:c)|0,n|0,o|0)|0;e=L;g=ne((i?F:h)|0,g|0,q|0,s|0)|0;h=L;i=p^i;do if(m^G){if(!i){G=ge(c|0,e|0,g|0,h|0)|0;f=-(+(G>>>0)+4294967296.0*+(L>>>0));break}if(e>>>0>h>>>0|(e|0)==(h|0)&c>>>0>g>>>0){G=be(c|0,e|0,g|0,h|0)|0;f=-(+(G>>>0)+4294967296.0*+(L>>>0));break}else{G=be(g|0,h|0,c|0,e|0)|0;f=+(G>>>0)+4294967296.0*+(L>>>0);break}}else{if(i){G=ge(c|0,e|0,g|0,h|0)|0;f=+(G>>>0)+4294967296.0*+(L>>>0);break}if(e>>>0<h>>>0|(e|0)==(h|0)&c>>>0<g>>>0){G=be(g|0,h|0,c|0,e|0)|0;f=-(+(G>>>0)+4294967296.0*+(L>>>0));break}else{G=be(c|0,e|0,g|0,h|0)|0;f=+(G>>>0)+4294967296.0*+(L>>>0);break}}while(0);if(!(f!=0.0&!(f<0.0)))break k}}else if((w|0)>=(c|0))break k;while(0);k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];k[a+24>>2]=k[b+24>>2];if((b|0)==(K|0)){a=K;break}}}while(0);k[a>>2]=w;k[a+4>>2]=u;k[a+8>>2]=d;k[a+12>>2]=v;G=a+16|0;k[G>>2]=k[M>>2];k[G+4>>2]=k[M+4>>2];k[G+8>>2]=k[M+8>>2]}a=x+28|0;if((a|0)==(H|0))break;else{b=x;x=a}}}r=N;return}else if((J|0)==240){r=N;return}}function ld(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0;o=r;r=r+32|0;n=o;j=k[b>>2]|0;d=k[a>>2]|0;do if((j|0)==(d|0)){g=k[b+8>>2]|0;d=(j|0)==(g|0);if(d?(e=k[b+4>>2]|0,(e|0)==(k[b+12>>2]|0)):0){if((j|0)!=(k[a+8>>2]|0)){h=1;break}d=k[a+4>>2]|0;if((d|0)==(k[a+12>>2]|0)){h=(e|0)<(d|0);break}else{h=(e|0)<=(d|0);break}}f=k[a+8>>2]|0;if((j|0)==(f|0)){if(!d){h=0;break}h=(k[b+4>>2]|0)<(k[a+4>>2]|0);break}if(!d){d=k[b+4>>2]|0;e=k[a+4>>2]|0;if((d|0)==(e|0)){h=(Pc(g,k[b+12>>2]|0,j,d,f,k[a+12>>2]|0)|0)==1;break}else{h=(d|0)<(e|0);break}}else h=1}else h=(j|0)<(d|0);while(0);d=k[c>>2]|0;do if((d|0)==(j|0)){g=k[c+8>>2]|0;d=(j|0)==(g|0);if(d?(i=k[c+4>>2]|0,(i|0)==(k[c+12>>2]|0)):0){if((j|0)!=(k[b+8>>2]|0)){d=1;break}d=k[b+4>>2]|0;if((d|0)==(k[b+12>>2]|0)){d=(i|0)<(d|0);break}else{d=(i|0)<=(d|0);break}}f=k[b+8>>2]|0;if((j|0)==(f|0)){if(!d){d=0;break}d=(k[c+4>>2]|0)<(k[b+4>>2]|0);break}if(!d){d=k[c+4>>2]|0;e=k[b+4>>2]|0;if((d|0)==(e|0)){d=(Pc(g,k[c+12>>2]|0,j,d,f,k[b+12>>2]|0)|0)==1;break}else{d=(d|0)<(e|0);break}}else d=1}else d=(d|0)<(j|0);while(0);if(!h){if(!d){b=0;r=o;return b|0};k[n>>2]=k[b>>2];k[n+4>>2]=k[b+4>>2];k[n+8>>2]=k[b+8>>2];k[n+12>>2]=k[b+12>>2];k[n+16>>2]=k[b+16>>2];k[n+20>>2]=k[b+20>>2];k[n+24>>2]=k[b+24>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];k[b+24>>2]=k[c+24>>2];k[c>>2]=k[n>>2];k[c+4>>2]=k[n+4>>2];k[c+8>>2]=k[n+8>>2];k[c+12>>2]=k[n+12>>2];k[c+16>>2]=k[n+16>>2];k[c+20>>2]=k[n+20>>2];k[c+24>>2]=k[n+24>>2];h=k[b>>2]|0;d=k[a>>2]|0;do if((h|0)==(d|0)){g=k[b+8>>2]|0;d=(h|0)==(g|0);if(d?(m=k[b+4>>2]|0,(m|0)==(k[b+12>>2]|0)):0){if((h|0)!=(k[a+8>>2]|0))break;d=k[a+4>>2]|0;if((d|0)==(k[a+12>>2]|0)){if((m|0)<(d|0))break;else d=1;r=o;return d|0}else{if((m|0)>(d|0))d=1;else break;r=o;return d|0}}f=k[a+8>>2]|0;if((h|0)==(f|0)){if(!d){b=1;r=o;return b|0}if((k[b+4>>2]|0)<(k[a+4>>2]|0))break;else d=1;r=o;return d|0}if(!d){d=k[b+4>>2]|0;e=k[a+4>>2]|0;if((d|0)==(e|0)){if((Pc(g,k[b+12>>2]|0,h,d,f,k[a+12>>2]|0)|0)==1)break;else d=1;r=o;return d|0}else{if((d|0)<(e|0))break;else d=1;r=o;return d|0}}}else if((h|0)>=(d|0)){b=1;r=o;return b|0}while(0);k[n>>2]=k[a>>2];k[n+4>>2]=k[a+4>>2];k[n+8>>2]=k[a+8>>2];k[n+12>>2]=k[a+12>>2];k[n+16>>2]=k[a+16>>2];k[n+20>>2]=k[a+20>>2];k[n+24>>2]=k[a+24>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];k[a+24>>2]=k[b+24>>2];k[b>>2]=k[n>>2];k[b+4>>2]=k[n+4>>2];k[b+8>>2]=k[n+8>>2];k[b+12>>2]=k[n+12>>2];k[b+16>>2]=k[n+16>>2];k[b+20>>2]=k[n+20>>2];k[b+24>>2]=k[n+24>>2];b=2;r=o;return b|0}if(d){k[n>>2]=k[a>>2];k[n+4>>2]=k[a+4>>2];k[n+8>>2]=k[a+8>>2];k[n+12>>2]=k[a+12>>2];k[n+16>>2]=k[a+16>>2];k[n+20>>2]=k[a+20>>2];k[n+24>>2]=k[a+24>>2];k[a>>2]=k[c>>2];k[a+4>>2]=k[c+4>>2];k[a+8>>2]=k[c+8>>2];k[a+12>>2]=k[c+12>>2];k[a+16>>2]=k[c+16>>2];k[a+20>>2]=k[c+20>>2];k[a+24>>2]=k[c+24>>2];k[c>>2]=k[n>>2];k[c+4>>2]=k[n+4>>2];k[c+8>>2]=k[n+8>>2];k[c+12>>2]=k[n+12>>2];k[c+16>>2]=k[n+16>>2];k[c+20>>2]=k[n+20>>2];k[c+24>>2]=k[n+24>>2];b=1;r=o;return b|0};k[n>>2]=k[a>>2];k[n+4>>2]=k[a+4>>2];k[n+8>>2]=k[a+8>>2];k[n+12>>2]=k[a+12>>2];k[n+16>>2]=k[a+16>>2];k[n+20>>2]=k[a+20>>2];k[n+24>>2]=k[a+24>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];k[a+24>>2]=k[b+24>>2];k[b>>2]=k[n>>2];k[b+4>>2]=k[n+4>>2];k[b+8>>2]=k[n+8>>2];k[b+12>>2]=k[n+12>>2];k[b+16>>2]=k[n+16>>2];k[b+20>>2]=k[n+20>>2];k[b+24>>2]=k[n+24>>2];h=k[c>>2]|0;d=k[b>>2]|0;do if((h|0)==(d|0)){g=k[c+8>>2]|0;d=(h|0)==(g|0);if(d?(l=k[c+4>>2]|0,(l|0)==(k[c+12>>2]|0)):0){if((h|0)!=(k[b+8>>2]|0))break;d=k[b+4>>2]|0;if((d|0)==(k[b+12>>2]|0)){if((l|0)<(d|0))break;else d=1;r=o;return d|0}else{if((l|0)>(d|0))d=1;else break;r=o;return d|0}}f=k[b+8>>2]|0;if((h|0)==(f|0)){if(!d){b=1;r=o;return b|0}if((k[c+4>>2]|0)<(k[b+4>>2]|0))break;else d=1;r=o;return d|0}if(!d){d=k[c+4>>2]|0;e=k[b+4>>2]|0;if((d|0)==(e|0)){if((Pc(g,k[c+12>>2]|0,h,d,f,k[b+12>>2]|0)|0)==1)break;else d=1;r=o;return d|0}else{if((d|0)<(e|0))break;else d=1;r=o;return d|0}}}else if((h|0)>=(d|0)){b=1;r=o;return b|0}while(0);k[n>>2]=k[b>>2];k[n+4>>2]=k[b+4>>2];k[n+8>>2]=k[b+8>>2];k[n+12>>2]=k[b+12>>2];k[n+16>>2]=k[b+16>>2];k[n+20>>2]=k[b+20>>2];k[n+24>>2]=k[b+24>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];k[b+24>>2]=k[c+24>>2];k[c>>2]=k[n>>2];k[c+4>>2]=k[n+4>>2];k[c+8>>2]=k[n+8>>2];k[c+12>>2]=k[n+12>>2];k[c+16>>2]=k[n+16>>2];k[c+20>>2]=k[n+20>>2];k[c+24>>2]=k[n+24>>2];b=2;r=o;return b|0}function md(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0;o=r;r=r+32|0;n=o;e=ld(a,b,c)|0;j=k[d>>2]|0;f=k[c>>2]|0;do if((j|0)==(f|0)){i=k[d+8>>2]|0;f=(j|0)==(i|0);if(f?(g=k[d+4>>2]|0,(g|0)==(k[d+12>>2]|0)):0){if((j|0)!=(k[c+8>>2]|0))break;f=k[c+4>>2]|0;if((f|0)==(k[c+12>>2]|0)){if((g|0)<(f|0))break;r=o;return e|0}else{if((g|0)<=(f|0))break;r=o;return e|0}}h=k[c+8>>2]|0;if((j|0)==(h|0)){if(!f){b=e;r=o;return b|0}if((k[d+4>>2]|0)<(k[c+4>>2]|0))break;r=o;return e|0}if(!f){f=k[d+4>>2]|0;g=k[c+4>>2]|0;if((f|0)==(g|0)){if((Pc(i,k[d+12>>2]|0,j,f,h,k[c+12>>2]|0)|0)==1)break;r=o;return e|0}else{if((f|0)<(g|0))break;r=o;return e|0}}}else if((j|0)>=(f|0)){b=e;r=o;return b|0}while(0);k[n>>2]=k[c>>2];k[n+4>>2]=k[c+4>>2];k[n+8>>2]=k[c+8>>2];k[n+12>>2]=k[c+12>>2];k[n+16>>2]=k[c+16>>2];k[n+20>>2]=k[c+20>>2];k[n+24>>2]=k[c+24>>2];k[c>>2]=k[d>>2];k[c+4>>2]=k[d+4>>2];k[c+8>>2]=k[d+8>>2];k[c+12>>2]=k[d+12>>2];k[c+16>>2]=k[d+16>>2];k[c+20>>2]=k[d+20>>2];k[c+24>>2]=k[d+24>>2];k[d>>2]=k[n>>2];k[d+4>>2]=k[n+4>>2];k[d+8>>2]=k[n+8>>2];k[d+12>>2]=k[n+12>>2];k[d+16>>2]=k[n+16>>2];k[d+20>>2]=k[n+20>>2];k[d+24>>2]=k[n+24>>2];d=e+1|0;j=k[c>>2]|0;f=k[b>>2]|0;do if((j|0)==(f|0)){i=k[c+8>>2]|0;f=(j|0)==(i|0);if(f?(l=k[c+4>>2]|0,(l|0)==(k[c+12>>2]|0)):0){if((j|0)!=(k[b+8>>2]|0))break;f=k[b+4>>2]|0;if((f|0)==(k[b+12>>2]|0)){if((l|0)<(f|0))break;else e=d;r=o;return e|0}else{if((l|0)>(f|0))e=d;else break;r=o;return e|0}}h=k[b+8>>2]|0;if((j|0)==(h|0)){if(!f){b=d;r=o;return b|0}if((k[c+4>>2]|0)<(k[b+4>>2]|0))break;else e=d;r=o;return e|0}if(!f){f=k[c+4>>2]|0;g=k[b+4>>2]|0;if((f|0)==(g|0)){if((Pc(i,k[c+12>>2]|0,j,f,h,k[b+12>>2]|0)|0)==1)break;else e=d;r=o;return e|0}else{if((f|0)<(g|0))break;else e=d;r=o;return e|0}}}else if((j|0)>=(f|0)){b=d;r=o;return b|0}while(0);k[n>>2]=k[b>>2];k[n+4>>2]=k[b+4>>2];k[n+8>>2]=k[b+8>>2];k[n+12>>2]=k[b+12>>2];k[n+16>>2]=k[b+16>>2];k[n+20>>2]=k[b+20>>2];k[n+24>>2]=k[b+24>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];k[b+24>>2]=k[c+24>>2];k[c>>2]=k[n>>2];k[c+4>>2]=k[n+4>>2];k[c+8>>2]=k[n+8>>2];k[c+12>>2]=k[n+12>>2];k[c+16>>2]=k[n+16>>2];k[c+20>>2]=k[n+20>>2];k[c+24>>2]=k[n+24>>2];d=e+2|0;j=k[b>>2]|0;f=k[a>>2]|0;do if((j|0)==(f|0)){i=k[b+8>>2]|0;f=(j|0)==(i|0);if(f?(m=k[b+4>>2]|0,(m|0)==(k[b+12>>2]|0)):0){if((j|0)!=(k[a+8>>2]|0))break;f=k[a+4>>2]|0;if((f|0)==(k[a+12>>2]|0)){if((m|0)<(f|0))break;else e=d;r=o;return e|0}else{if((m|0)>(f|0))e=d;else break;r=o;return e|0}}h=k[a+8>>2]|0;if((j|0)==(h|0)){if(!f){b=d;r=o;return b|0}if((k[b+4>>2]|0)<(k[a+4>>2]|0))break;else e=d;r=o;return e|0}if(!f){f=k[b+4>>2]|0;g=k[a+4>>2]|0;if((f|0)==(g|0)){if((Pc(i,k[b+12>>2]|0,j,f,h,k[a+12>>2]|0)|0)==1)break;else e=d;r=o;return e|0}else{if((f|0)<(g|0))break;else e=d;r=o;return e|0}}}else if((j|0)>=(f|0)){b=d;r=o;return b|0}while(0);k[n>>2]=k[a>>2];k[n+4>>2]=k[a+4>>2];k[n+8>>2]=k[a+8>>2];k[n+12>>2]=k[a+12>>2];k[n+16>>2]=k[a+16>>2];k[n+20>>2]=k[a+20>>2];k[n+24>>2]=k[a+24>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];k[a+24>>2]=k[b+24>>2];k[b>>2]=k[n>>2];k[b+4>>2]=k[n+4>>2];k[b+8>>2]=k[n+8>>2];k[b+12>>2]=k[n+12>>2];k[b+16>>2]=k[n+16>>2];k[b+20>>2]=k[n+20>>2];k[b+24>>2]=k[n+24>>2];b=e+3|0;r=o;return b|0}function nd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;q=r;r=r+32|0;p=q;f=md(a,b,c,d)|0;l=k[e>>2]|0;g=k[d>>2]|0;do if((l|0)==(g|0)){j=k[e+8>>2]|0;g=(l|0)==(j|0);if(g?(h=k[e+4>>2]|0,(h|0)==(k[e+12>>2]|0)):0){if((l|0)!=(k[d+8>>2]|0))break;g=k[d+4>>2]|0;if((g|0)==(k[d+12>>2]|0)){if((h|0)<(g|0))break;r=q;return f|0}else{if((h|0)<=(g|0))break;r=q;return f|0}}i=k[d+8>>2]|0;if((l|0)==(i|0)){if(!g){b=f;r=q;return b|0}if((k[e+4>>2]|0)<(k[d+4>>2]|0))break;r=q;return f|0}if(!g){g=k[e+4>>2]|0;h=k[d+4>>2]|0;if((g|0)==(h|0)){if((Pc(j,k[e+12>>2]|0,l,g,i,k[d+12>>2]|0)|0)==1)break;r=q;return f|0}else{if((g|0)<(h|0))break;r=q;return f|0}}}else if((l|0)>=(g|0)){b=f;r=q;return b|0}while(0);k[p>>2]=k[d>>2];k[p+4>>2]=k[d+4>>2];k[p+8>>2]=k[d+8>>2];k[p+12>>2]=k[d+12>>2];k[p+16>>2]=k[d+16>>2];k[p+20>>2]=k[d+20>>2];k[p+24>>2]=k[d+24>>2];k[d>>2]=k[e>>2];k[d+4>>2]=k[e+4>>2];k[d+8>>2]=k[e+8>>2];k[d+12>>2]=k[e+12>>2];k[d+16>>2]=k[e+16>>2];k[d+20>>2]=k[e+20>>2];k[d+24>>2]=k[e+24>>2];k[e>>2]=k[p>>2];k[e+4>>2]=k[p+4>>2];k[e+8>>2]=k[p+8>>2];k[e+12>>2]=k[p+12>>2];k[e+16>>2]=k[p+16>>2];k[e+20>>2]=k[p+20>>2];k[e+24>>2]=k[p+24>>2];e=f+1|0;l=k[d>>2]|0;g=k[c>>2]|0;do if((l|0)==(g|0)){j=k[d+8>>2]|0;g=(l|0)==(j|0);if(g?(m=k[d+4>>2]|0,(m|0)==(k[d+12>>2]|0)):0){if((l|0)!=(k[c+8>>2]|0))break;g=k[c+4>>2]|0;if((g|0)==(k[c+12>>2]|0)){if((m|0)<(g|0))break;else f=e;r=q;return f|0}else{if((m|0)>(g|0))f=e;else break;r=q;return f|0}}i=k[c+8>>2]|0;if((l|0)==(i|0)){if(!g){b=e;r=q;return b|0}if((k[d+4>>2]|0)<(k[c+4>>2]|0))break;else f=e;r=q;return f|0}if(!g){g=k[d+4>>2]|0;h=k[c+4>>2]|0;if((g|0)==(h|0)){if((Pc(j,k[d+12>>2]|0,l,g,i,k[c+12>>2]|0)|0)==1)break;else f=e;r=q;return f|0}else{if((g|0)<(h|0))break;else f=e;r=q;return f|0}}}else if((l|0)>=(g|0)){b=e;r=q;return b|0}while(0);k[p>>2]=k[c>>2];k[p+4>>2]=k[c+4>>2];k[p+8>>2]=k[c+8>>2];k[p+12>>2]=k[c+12>>2];k[p+16>>2]=k[c+16>>2];k[p+20>>2]=k[c+20>>2];k[p+24>>2]=k[c+24>>2];k[c>>2]=k[d>>2];k[c+4>>2]=k[d+4>>2];k[c+8>>2]=k[d+8>>2];k[c+12>>2]=k[d+12>>2];k[c+16>>2]=k[d+16>>2];k[c+20>>2]=k[d+20>>2];k[c+24>>2]=k[d+24>>2];k[d>>2]=k[p>>2];k[d+4>>2]=k[p+4>>2];k[d+8>>2]=k[p+8>>2];k[d+12>>2]=k[p+12>>2];k[d+16>>2]=k[p+16>>2];k[d+20>>2]=k[p+20>>2];k[d+24>>2]=k[p+24>>2];e=f+2|0;l=k[c>>2]|0;g=k[b>>2]|0;do if((l|0)==(g|0)){j=k[c+8>>2]|0;g=(l|0)==(j|0);if(g?(n=k[c+4>>2]|0,(n|0)==(k[c+12>>2]|0)):0){if((l|0)!=(k[b+8>>2]|0))break;g=k[b+4>>2]|0;if((g|0)==(k[b+12>>2]|0)){if((n|0)<(g|0))break;else f=e;r=q;return f|0}else{if((n|0)>(g|0))f=e;else break;r=q;return f|0}}i=k[b+8>>2]|0;if((l|0)==(i|0)){if(!g){b=e;r=q;return b|0}if((k[c+4>>2]|0)<(k[b+4>>2]|0))break;else f=e;r=q;return f|0}if(!g){g=k[c+4>>2]|0;h=k[b+4>>2]|0;if((g|0)==(h|0)){if((Pc(j,k[c+12>>2]|0,l,g,i,k[b+12>>2]|0)|0)==1)break;else f=e;r=q;return f|0}else{if((g|0)<(h|0))break;else f=e;r=q;return f|0}}}else if((l|0)>=(g|0)){b=e;r=q;return b|0}while(0);k[p>>2]=k[b>>2];k[p+4>>2]=k[b+4>>2];k[p+8>>2]=k[b+8>>2];k[p+12>>2]=k[b+12>>2];k[p+16>>2]=k[b+16>>2];k[p+20>>2]=k[b+20>>2];k[p+24>>2]=k[b+24>>2];k[b>>2]=k[c>>2];k[b+4>>2]=k[c+4>>2];k[b+8>>2]=k[c+8>>2];k[b+12>>2]=k[c+12>>2];k[b+16>>2]=k[c+16>>2];k[b+20>>2]=k[c+20>>2];k[b+24>>2]=k[c+24>>2];k[c>>2]=k[p>>2];k[c+4>>2]=k[p+4>>2];k[c+8>>2]=k[p+8>>2];k[c+12>>2]=k[p+12>>2];k[c+16>>2]=k[p+16>>2];k[c+20>>2]=k[p+20>>2];k[c+24>>2]=k[p+24>>2];e=f+3|0;l=k[b>>2]|0;g=k[a>>2]|0;do if((l|0)==(g|0)){j=k[b+8>>2]|0;g=(l|0)==(j|0);if(g?(o=k[b+4>>2]|0,(o|0)==(k[b+12>>2]|0)):0){if((l|0)!=(k[a+8>>2]|0))break;g=k[a+4>>2]|0;if((g|0)==(k[a+12>>2]|0)){if((o|0)<(g|0))break;else f=e;r=q;return f|0}else{if((o|0)>(g|0))f=e;else break;r=q;return f|0}}i=k[a+8>>2]|0;if((l|0)==(i|0)){if(!g){b=e;r=q;return b|0}if((k[b+4>>2]|0)<(k[a+4>>2]|0))break;else f=e;r=q;return f|0}if(!g){g=k[b+4>>2]|0;h=k[a+4>>2]|0;if((g|0)==(h|0)){if((Pc(j,k[b+12>>2]|0,l,g,i,k[a+12>>2]|0)|0)==1)break;else f=e;r=q;return f|0}else{if((g|0)<(h|0))break;else f=e;r=q;return f|0}}}else if((l|0)>=(g|0)){b=e;r=q;return b|0}while(0);k[p>>2]=k[a>>2];k[p+4>>2]=k[a+4>>2];k[p+8>>2]=k[a+8>>2];k[p+12>>2]=k[a+12>>2];k[p+16>>2]=k[a+16>>2];k[p+20>>2]=k[a+20>>2];k[p+24>>2]=k[a+24>>2];k[a>>2]=k[b>>2];k[a+4>>2]=k[b+4>>2];k[a+8>>2]=k[b+8>>2];k[a+12>>2]=k[b+12>>2];k[a+16>>2]=k[b+16>>2];k[a+20>>2]=k[b+20>>2];k[a+24>>2]=k[b+24>>2];k[b>>2]=k[p>>2];k[b+4>>2]=k[p+4>>2];k[b+8>>2]=k[p+8>>2];k[b+12>>2]=k[p+12>>2];k[b+16>>2]=k[p+16>>2];k[b+20>>2]=k[p+20>>2];k[b+24>>2]=k[p+24>>2];b=f+4|0;r=q;return b|0}function od(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0.0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;F=r;r=r+48|0;i=F+12|0;D=F;switch((b-a|0)/28|0|0){case 2:{h=b+-28|0;g=k[h>>2]|0;c=k[a>>2]|0;do if((g|0)==(c|0)){f=k[b+-20>>2]|0;c=(g|0)==(f|0);if(c?(d=k[b+-24>>2]|0,(d|0)==(k[b+-16>>2]|0)):0){if((g|0)!=(k[a+8>>2]|0))break;c=k[a+4>>2]|0;if((c|0)==(k[a+12>>2]|0)){if((d|0)<(c|0))break;else c=1;r=F;return c|0}else{if((d|0)>(c|0))c=1;else break;r=F;return c|0}}e=k[a+8>>2]|0;if((g|0)==(e|0)){if(!c){a=1;r=F;return a|0}if((k[b+-24>>2]|0)<(k[a+4>>2]|0))break;else c=1;r=F;return c|0}if(!c){c=k[b+-24>>2]|0;d=k[a+4>>2]|0;if((c|0)==(d|0)){if((Pc(f,k[b+-16>>2]|0,g,c,e,k[a+12>>2]|0)|0)==1)break;else c=1;r=F;return c|0}else{if((c|0)<(d|0))break;else c=1;r=F;return c|0}}}else if((g|0)>=(c|0)){a=1;r=F;return a|0}while(0);k[i>>2]=k[a>>2];k[i+4>>2]=k[a+4>>2];k[i+8>>2]=k[a+8>>2];k[i+12>>2]=k[a+12>>2];k[i+16>>2]=k[a+16>>2];k[i+20>>2]=k[a+20>>2];k[i+24>>2]=k[a+24>>2];k[a>>2]=k[h>>2];k[a+4>>2]=k[h+4>>2];k[a+8>>2]=k[h+8>>2];k[a+12>>2]=k[h+12>>2];k[a+16>>2]=k[h+16>>2];k[a+20>>2]=k[h+20>>2];k[a+24>>2]=k[h+24>>2];k[h>>2]=k[i>>2];k[h+4>>2]=k[i+4>>2];k[h+8>>2]=k[i+8>>2];k[h+12>>2]=k[i+12>>2];k[h+16>>2]=k[i+16>>2];k[h+20>>2]=k[i+20>>2];k[h+24>>2]=k[i+24>>2];a=1;r=F;return a|0}case 3:{ld(a,a+28|0,b+-28|0)|0;a=1;r=F;return a|0}case 4:{md(a,a+28|0,a+56|0,b+-28|0)|0;a=1;r=F;return a|0}case 5:{nd(a,a+28|0,a+56|0,a+84|0,b+-28|0)|0;a=1;r=F;return a|0}case 1:case 0:{a=1;r=F;return a|0}default:{e=a+56|0;ld(a,a+28|0,e)|0;d=a+84|0;if((d|0)==(b|0)){a=1;r=F;return a|0}c=0;while(1){B=k[d>>2]|0;f=k[e>>2]|0;do if((B|0)==(f|0)){h=k[d+8>>2]|0;f=(B|0)==(h|0);if(f?(C=k[d+4>>2]|0,(C|0)==(k[d+12>>2]|0)):0){if((B|0)!=(k[e+8>>2]|0)){h=B;E=39;break}f=k[e+4>>2]|0;if((f|0)==(k[e+12>>2]|0))if((C|0)<(f|0)){h=B;E=39;break}else break;else if((C|0)>(f|0))break;else{h=B;E=39;break}}i=k[e+8>>2]|0;if((B|0)==(i|0)){if(!f)break;if((k[d+4>>2]|0)<(k[e+4>>2]|0)){h=B;E=39;break}else break}if(!f){f=k[d+4>>2]|0;g=k[e+4>>2]|0;if((f|0)==(g|0))if((Pc(h,k[d+12>>2]|0,B,f,i,k[e+12>>2]|0)|0)==1){E=39;break}else break;else if((f|0)<(g|0)){E=39;break}else break}else{h=B;E=39}}else if((B|0)<(f|0)){h=k[d+8>>2]|0;E=39}while(0);if((E|0)==39){E=0;z=k[d+4>>2]|0;A=k[d+12>>2]|0;y=d+16|0;k[D>>2]=k[y>>2];k[D+4>>2]=k[y+4>>2];k[D+8>>2]=k[y+8>>2];k[d>>2]=k[e>>2];k[d+4>>2]=k[e+4>>2];k[d+8>>2]=k[e+8>>2];k[d+12>>2]=k[e+12>>2];k[d+16>>2]=k[e+16>>2];k[d+20>>2]=k[e+20>>2];k[d+24>>2]=k[e+24>>2];a:do if((e|0)==(a|0))e=a;else{o=(B|0)==(h|0);y=o&(z|0)==(A|0);p=((B|0)<0)<<31>>31;t=be(h|0,((h|0)<0)<<31>>31|0,B|0,p|0)|0;u=L;q=((z|0)<0)<<31>>31;w=be(A|0,((A|0)<0)<<31>>31|0,z|0,q|0)|0;x=L;s=(u|0)<0;v=be(0,0,t|0,u|0)|0;t=s?v:t;u=s?L:u;v=(x|0)<0;n=be(0,0,w|0,x|0)|0;w=v?n:w;x=v?L:x;while(1){n=e;e=e+-28|0;f=k[e>>2]|0;do if((B|0)==(f|0)){g=k[n+-20>>2]|0;f=(B|0)==(g|0);if(y){if(!f)break;f=k[n+-24>>2]|0;if((f|0)==(k[n+-16>>2]|0))if((z|0)<(f|0))break;else{e=n;break a}else if((z|0)>(f|0)){e=n;break a}else break}if(f){if(!o){e=n;break a}if((z|0)<(k[n+-24>>2]|0))break;else{e=n;break a}}if(!o){f=k[n+-24>>2]|0;if((z|0)!=(f|0))if((z|0)<(f|0))break;else{e=n;break a}l=be(B|0,p|0,g|0,((g|0)<0)<<31>>31|0)|0;i=L;g=k[n+-16>>2]|0;g=be(z|0,q|0,g|0,((g|0)<0)<<31>>31|0)|0;f=L;m=(i|0)<0;H=be(0,0,l|0,i|0)|0;i=m?L:i;G=(f|0)<0;I=be(0,0,g|0,f|0)|0;f=ne((G?I:g)|0,(G?L:f)|0,t|0,u|0)|0;g=L;i=ne((m?H:l)|0,i|0,w|0,x|0)|0;l=L;m=v^m;do if(s^G){if(!m){I=ge(f|0,g|0,i|0,l|0)|0;j=-(+(I>>>0)+4294967296.0*+(L>>>0));break}if(g>>>0>l>>>0|(g|0)==(l|0)&f>>>0>i>>>0){I=be(f|0,g|0,i|0,l|0)|0;j=-(+(I>>>0)+4294967296.0*+(L>>>0));break}else{I=be(i|0,l|0,f|0,g|0)|0;j=+(I>>>0)+4294967296.0*+(L>>>0);break}}else{if(m){I=ge(f|0,g|0,i|0,l|0)|0;j=+(I>>>0)+4294967296.0*+(L>>>0);break}if(g>>>0<l>>>0|(g|0)==(l|0)&f>>>0<i>>>0){I=be(i|0,l|0,f|0,g|0)|0;j=-(+(I>>>0)+4294967296.0*+(L>>>0));break}else{I=be(f|0,g|0,i|0,l|0)|0;j=+(I>>>0)+4294967296.0*+(L>>>0);break}}while(0);if(!(j!=0.0&!(j<0.0))){e=n;break a}}}else if((B|0)>=(f|0)){e=n;break a}while(0);k[n>>2]=k[e>>2];k[n+4>>2]=k[e+4>>2];k[n+8>>2]=k[e+8>>2];k[n+12>>2]=k[e+12>>2];k[n+16>>2]=k[e+16>>2];k[n+20>>2]=k[e+20>>2];k[n+24>>2]=k[e+24>>2];if((e|0)==(a|0)){e=a;break}}}while(0);k[e>>2]=B;k[e+4>>2]=z;k[e+8>>2]=h;k[e+12>>2]=A;I=e+16|0;k[I>>2]=k[D>>2];k[I+4>>2]=k[D+4>>2];k[I+8>>2]=k[D+8>>2];c=c+1|0;if((c|0)==8)break}e=d+28|0;if((e|0)==(b|0)){c=1;E=70;break}else{I=d;d=e;e=I}}if((E|0)==70){r=F;return c|0}I=(d+28|0)==(b|0);r=F;return I|0}}return 0}function pd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0;f=a+4|0;g=k[a>>2]|0;c=g;h=(k[f>>2]|0)-c|0;i=(h|0)/28|0;j=i+1|0;if(j>>>0>153391689)xa(1340,1363,303,1438);l=a+8|0;c=((k[l>>2]|0)-c|0)/28|0;if(c>>>0<76695844){c=c<<1;c=c>>>0<j>>>0?j:c;if(!c){c=0;d=0}else e=5}else{c=153391689;e=5}if((e|0)==5){e=c*28|0;e=(e|0)==0?1:e;d=_d(e)|0;a:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(e)|0;if(d)break a}a=ya(4)|0;k[a>>2]=128;La(a|0,8,1)}while(0)}e=d+(i*28|0)|0;k[e>>2]=k[b>>2];k[e+4>>2]=k[b+4>>2];k[e+8>>2]=k[b+8>>2];k[e+12>>2]=k[b+12>>2];k[e+16>>2]=k[b+16>>2];k[e+20>>2]=k[b+20>>2];k[e+24>>2]=k[b+24>>2];b=d+((((h|0)/-28|0)+i|0)*28|0)|0;fe(b|0,g|0,h|0)|0;k[a>>2]=b;k[f>>2]=d+(j*28|0);k[l>>2]=d+(c*28|0);if(!g)return;$d(g);return}function qd(a){a=a|0;return}function rd(a){a=a|0;$d(a);return}function sd(a){a=a|0;return 1459}function td(a){a=a|0;return}function ud(a){a=a|0;return}function vd(a){a=a|0;return}function wd(a){a=a|0;$d(a);return}function xd(a){a=a|0;$d(a);return}function yd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;g=r;r=r+64|0;f=g;if((a|0)!=(b|0))if((b|0)!=0?(e=Bd(b,56)|0,(e|0)!=0):0){b=f;d=b+56|0;do{k[b>>2]=0;b=b+4|0}while((b|0)<(d|0));k[f>>2]=e;k[f+8>>2]=a;k[f+12>>2]=-1;k[f+48>>2]=1;_a[k[(k[e>>2]|0)+28>>2]&3](e,f,k[c>>2]|0,1);if((k[f+24>>2]|0)==1){k[c>>2]=k[f+16>>2];b=1}else b=0}else b=0;else b=1;r=g;return b|0}function zd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;do if((a|0)==(k[b+8>>2]|0)){a=b+16|0;e=k[a>>2]|0;if(!e){k[a>>2]=c;k[b+24>>2]=d;k[b+36>>2]=1;break}if((e|0)!=(c|0)){d=b+36|0;k[d>>2]=(k[d>>2]|0)+1;k[b+24>>2]=2;i[b+54>>0]=1;break}a=b+24|0;if((k[a>>2]|0)==2)k[a>>2]=d}while(0);return}function Ad(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;do if((a|0)==(k[b+8>>2]|0)){a=b+16|0;e=k[a>>2]|0;if(!e){k[a>>2]=c;k[b+24>>2]=d;k[b+36>>2]=1;break}if((e|0)!=(c|0)){d=b+36|0;k[d>>2]=(k[d>>2]|0)+1;k[b+24>>2]=2;i[b+54>>0]=1;break}a=b+24|0;if((k[a>>2]|0)==2)k[a>>2]=d}else{e=k[a+8>>2]|0;_a[k[(k[e>>2]|0)+28>>2]&3](e,b,c,d)}while(0);return}function Bd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0;s=r;r=r+64|0;q=s;p=k[a>>2]|0;o=a+(k[p+-8>>2]|0)|0;p=k[p+-4>>2]|0;k[q>>2]=b;k[q+4>>2]=a;k[q+8>>2]=40;l=q+12|0;a=q+16|0;c=q+20|0;d=q+24|0;e=q+28|0;f=q+32|0;g=q+40|0;h=(p|0)==(b|0);m=l;n=m+40|0;do{k[m>>2]=0;m=m+4|0}while((m|0)<(n|0));j[l+40>>1]=0;i[l+42>>0]=0;a:do if(h){k[q+48>>2]=1;Ya[k[(k[b>>2]|0)+20>>2]&3](b,q,o,o,1,0);a=(k[d>>2]|0)==1?o:0}else{Ua[k[(k[p>>2]|0)+24>>2]&3](p,q,o,1,0);switch(k[q+36>>2]|0){case 0:{a=(k[g>>2]|0)==1&(k[e>>2]|0)==1&(k[f>>2]|0)==1?k[c>>2]|0:0;break a}case 1:break;default:{a=0;break a}}if((k[d>>2]|0)!=1?!((k[g>>2]|0)==0&(k[e>>2]|0)==1&(k[f>>2]|0)==1):0){a=0;break}a=k[a>>2]|0}while(0);r=s;return a|0}function Cd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;i[a+53>>0]=1;do if((k[a+4>>2]|0)==(c|0)){i[a+52>>0]=1;c=a+16|0;e=k[c>>2]|0;if(!e){k[c>>2]=b;k[a+24>>2]=d;k[a+36>>2]=1;if(!((d|0)==1?(k[a+48>>2]|0)==1:0))break;i[a+54>>0]=1;break}if((e|0)!=(b|0)){d=a+36|0;k[d>>2]=(k[d>>2]|0)+1;i[a+54>>0]=1;break}e=a+24|0;c=k[e>>2]|0;if((c|0)==2){k[e>>2]=d;c=d}if((c|0)==1?(k[a+48>>2]|0)==1:0)i[a+54>>0]=1}while(0);return}function Dd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0;a:do if((a|0)==(k[b+8>>2]|0)){if((k[b+4>>2]|0)==(c|0)?(f=b+28|0,(k[f>>2]|0)!=1):0)k[f>>2]=d}else{if((a|0)!=(k[b>>2]|0)){h=k[a+8>>2]|0;Ua[k[(k[h>>2]|0)+24>>2]&3](h,b,c,d,e);break}if((k[b+16>>2]|0)!=(c|0)?(g=b+20|0,(k[g>>2]|0)!=(c|0)):0){k[b+32>>2]=d;d=b+44|0;if((k[d>>2]|0)==4)break;f=b+52|0;i[f>>0]=0;j=b+53|0;i[j>>0]=0;a=k[a+8>>2]|0;Ya[k[(k[a>>2]|0)+20>>2]&3](a,b,c,c,1,e);if(i[j>>0]|0){if(!(i[f>>0]|0)){f=1;h=13}}else{f=0;h=13}do if((h|0)==13){k[g>>2]=c;j=b+40|0;k[j>>2]=(k[j>>2]|0)+1;if((k[b+36>>2]|0)==1?(k[b+24>>2]|0)==2:0){i[b+54>>0]=1;if(f)break}else h=16;if((h|0)==16?f:0)break;k[d>>2]=4;break a}while(0);k[d>>2]=3;break}if((d|0)==1)k[b+32>>2]=1}while(0);return}function Ed(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;do if((a|0)==(k[b+8>>2]|0)){if((k[b+4>>2]|0)==(c|0)?(g=b+28|0,(k[g>>2]|0)!=1):0)k[g>>2]=d}else if((a|0)==(k[b>>2]|0)){if((k[b+16>>2]|0)!=(c|0)?(f=b+20|0,(k[f>>2]|0)!=(c|0)):0){k[b+32>>2]=d;k[f>>2]=c;e=b+40|0;k[e>>2]=(k[e>>2]|0)+1;if((k[b+36>>2]|0)==1?(k[b+24>>2]|0)==2:0)i[b+54>>0]=1;k[b+44>>2]=4;break}if((d|0)==1)k[b+32>>2]=1}while(0);return}function Fd(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if((a|0)==(k[b+8>>2]|0))Cd(b,c,d,e);else{a=k[a+8>>2]|0;Ya[k[(k[a>>2]|0)+20>>2]&3](a,b,c,d,e,f)}return}function Gd(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;if((a|0)==(k[b+8>>2]|0))Cd(b,c,d,e);return}function Hd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;e=r;r=r+16|0;d=e;k[d>>2]=k[c>>2];a=Ta[k[(k[a>>2]|0)+16>>2]&7](a,b,d)|0;if(a)k[c>>2]=k[d>>2];r=e;return a&1|0}function Id(a){a=a|0;if(!a)a=0;else a=(Bd(a,88)|0)!=0;return a&1|0}function Jd(a){a=a|0;var b=0,c=0;b=0;while(1){if((l[1474+b>>0]|0)==(a|0)){c=2;break}b=b+1|0;if((b|0)==87){b=87;a=1562;c=5;break}}if((c|0)==2)if(!b)b=1562;else{a=1562;c=5}if((c|0)==5)while(1){do{c=a;a=a+1|0}while((i[c>>0]|0)!=0);b=b+-1|0;if(!b){b=a;break}else c=5}return b|0}function Kd(a,b){a=+a;b=b|0;var c=0,d=0,e=0;p[t>>3]=a;c=k[t>>2]|0;d=k[t+4>>2]|0;e=de(c|0,d|0,52)|0;e=e&2047;switch(e|0){case 0:{if(a!=0.0){a=+Kd(a*18446744073709552.0e3,b);c=(k[b>>2]|0)+-64|0}else c=0;k[b>>2]=c;break}case 2047:break;default:{k[b>>2]=e+-1022;k[t>>2]=c;k[t+4>>2]=d&-2146435073|1071644672;a=+p[t>>3]}}return +a}function Ld(a,b){a=a|0;b=b|0;do if(!a)a=1;else{if(b>>>0<128){i[a>>0]=b;a=1;break}if(b>>>0<2048){i[a>>0]=b>>>6|192;i[a+1>>0]=b&63|128;a=2;break}if(b>>>0<55296|(b&-8192|0)==57344){i[a>>0]=b>>>12|224;i[a+1>>0]=b>>>6&63|128;i[a+2>>0]=b&63|128;a=3;break}if((b+-65536|0)>>>0<1048576){i[a>>0]=b>>>18|240;i[a+1>>0]=b>>>12&63|128;i[a+2>>0]=b>>>6&63|128;i[a+3>>0]=b&63|128;a=4;break}if(!(k[56]|0))a=268;else{a=(Ga()|0)+60|0;a=k[a>>2]|0}k[a>>2]=84;a=-1}while(0);return a|0}function Md(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;d=c+16|0;e=k[d>>2]|0;if(!e)if(!(Td(c)|0)){e=k[d>>2]|0;f=4}else d=0;else f=4;a:do if((f|0)==4){g=c+20|0;f=k[g>>2]|0;if((e-f|0)>>>0<b>>>0){d=Ta[k[c+36>>2]&7](c,a,b)|0;break}b:do if((i[c+75>>0]|0)>-1){d=b;while(1){if(!d){e=f;d=0;break b}e=d+-1|0;if((i[a+e>>0]|0)==10)break;else d=e}if((Ta[k[c+36>>2]&7](c,a,d)|0)>>>0<d>>>0)break a;b=b-d|0;a=a+d|0;e=k[g>>2]|0}else{e=f;d=0}while(0);fe(e|0,a|0,b|0)|0;k[g>>2]=(k[g>>2]|0)+b;d=d+b|0}while(0);return d|0}function Nd(a,b){a=a|0;b=b|0;var c=0,d=0;c=r;r=r+16|0;d=c;k[d>>2]=b;Od(272,a,d)|0;r=c;return}function Od(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;q=r;r=r+224|0;m=q+120|0;p=q+80|0;o=q;n=q+136|0;d=p;e=d+40|0;do{k[d>>2]=0;d=d+4|0}while((d|0)<(e|0));k[m>>2]=k[c>>2];if((Vd(0,b,m,o,p)|0)<0)c=-1;else{c=k[a>>2]|0;l=c&32;if((i[a+74>>0]|0)<1)k[a>>2]=c&-33;j=a+48|0;if(!(k[j>>2]|0)){d=a+44|0;e=k[d>>2]|0;k[d>>2]=n;f=a+28|0;k[f>>2]=n;g=a+20|0;k[g>>2]=n;k[j>>2]=80;h=a+16|0;k[h>>2]=n+80;c=Vd(a,b,m,o,p)|0;if(e){Ta[k[a+36>>2]&7](a,0,0)|0;c=(k[g>>2]|0)==0?-1:c;k[d>>2]=e;k[j>>2]=0;k[h>>2]=0;k[f>>2]=0;k[g>>2]=0}}else c=Vd(a,b,m,o,p)|0;p=k[a>>2]|0;k[a>>2]=p|l;c=(p&32|0)==0?c:-1}r=q;return c|0}function Pd(a){a=a|0;var b=0,c=0;c=r;r=r+16|0;b=c;k[b>>2]=k[a+60>>2];a=va(6,b|0)|0;if(a>>>0>4294963200){if(!(k[56]|0))b=268;else{b=(Ga()|0)+60|0;b=k[b>>2]|0}k[b>>2]=0-a;a=-1}r=c;return a|0}function Qd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;f=r;r=r+32|0;g=f;d=f+20|0;k[g>>2]=k[a+60>>2];k[g+4>>2]=0;k[g+8>>2]=b;k[g+12>>2]=d;k[g+16>>2]=c;b=Ha(140,g|0)|0;if(b>>>0<=4294963200)if((b|0)<0)e=7;else a=k[d>>2]|0;else{if(!(k[56]|0))a=268;else{a=(Ga()|0)+60|0;a=k[a>>2]|0}k[a>>2]=0-b;e=7}if((e|0)==7){k[d>>2]=-1;a=-1}r=f;return a|0}function Rd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0;p=r;r=r+48|0;m=p+16|0;l=p;i=p+32|0;n=a+28|0;f=k[n>>2]|0;k[i>>2]=f;o=a+20|0;f=(k[o>>2]|0)-f|0;k[i+4>>2]=f;k[i+8>>2]=b;k[i+12>>2]=c;h=a+60|0;j=a+44|0;e=2;f=f+c|0;while(1){if(!(k[56]|0)){k[m>>2]=k[h>>2];k[m+4>>2]=i;k[m+8>>2]=e;b=Qa(146,m|0)|0;if(b>>>0>4294963200){if(!(k[56]|0))d=268;else{d=(Ga()|0)+60|0;d=k[d>>2]|0}k[d>>2]=0-b;b=-1}}else{Na(8,a|0);k[l>>2]=k[h>>2];k[l+4>>2]=i;k[l+8>>2]=e;b=Qa(146,l|0)|0;if(b>>>0>4294963200){if(!(k[56]|0))d=268;else{d=(Ga()|0)+60|0;d=k[d>>2]|0}k[d>>2]=0-b;b=-1}ua(0)}if((f|0)==(b|0)){b=13;break}if((b|0)<0){b=15;break}f=f-b|0;d=k[i+4>>2]|0;if(b>>>0<=d>>>0)if((e|0)==2){k[n>>2]=(k[n>>2]|0)+b;g=d;d=i;e=2}else{g=d;d=i}else{g=k[j>>2]|0;k[n>>2]=g;k[o>>2]=g;g=k[i+12>>2]|0;b=b-d|0;d=i+8|0;e=e+-1|0}k[d>>2]=(k[d>>2]|0)+b;k[d+4>>2]=g-b;i=d}if((b|0)==13){m=k[j>>2]|0;k[a+16>>2]=m+(k[a+48>>2]|0);a=m;k[n>>2]=a;k[o>>2]=a}else if((b|0)==15){k[a+16>>2]=0;k[n>>2]=0;k[o>>2]=0;k[a>>2]=k[a>>2]|32;if((e|0)==2)c=0;else c=c-(k[i+4>>2]|0)|0}r=p;return c|0}function Sd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0;e=r;r=r+80|0;d=e;k[a+36>>2]=4;if((k[a>>2]&64|0)==0?(k[d>>2]=k[a+60>>2],k[d+4>>2]=21505,k[d+8>>2]=e+12,(Ia(54,d|0)|0)!=0):0)i[a+75>>0]=-1;d=Rd(a,b,c)|0;r=e;return d|0}function Td(a){a=a|0;var b=0,c=0;b=a+74|0;c=i[b>>0]|0;i[b>>0]=c+255|c;b=k[a>>2]|0;if(!(b&8)){k[a+8>>2]=0;k[a+4>>2]=0;b=k[a+44>>2]|0;k[a+28>>2]=b;k[a+20>>2]=b;k[a+16>>2]=b+(k[a+48>>2]|0);b=0}else{k[a>>2]=b|32;b=-1}return b|0}function Ud(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;f=b&255;d=(c|0)!=0;a:do if(d&(a&3|0)!=0){e=b&255;while(1){if((i[a>>0]|0)==e<<24>>24)break a;a=a+1|0;c=c+-1|0;d=(c|0)!=0;if(!(d&(a&3|0)!=0)){g=5;break}}}else g=5;while(0);b:do if((g|0)==5)if(d){e=b&255;if((i[a>>0]|0)!=e<<24>>24){d=ha(f,16843009)|0;c:do if(c>>>0>3)while(1){f=k[a>>2]^d;if((f&-2139062144^-2139062144)&f+-16843009)break;a=a+4|0;c=c+-4|0;if(c>>>0<=3){g=11;break c}}else g=11;while(0);if((g|0)==11)if(!c){c=0;break}while(1){if((i[a>>0]|0)==e<<24>>24)break b;a=a+1|0;c=c+-1|0;if(!c){c=0;break}}}}else c=0;while(0);return ((c|0)!=0?a:0)|0}function Vd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,m=0.0,n=0,o=0,q=0,s=0,u=0,v=0,w=0,x=0.0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0;ga=r;r=r+624|0;ba=ga+24|0;da=ga+16|0;ca=ga+588|0;Y=ga+576|0;aa=ga;V=ga+536|0;fa=ga+8|0;ea=ga+528|0;M=(a|0)!=0;N=V+40|0;U=N;V=V+39|0;W=fa+4|0;X=Y+12|0;Y=Y+11|0;Z=ca;_=X;$=_-Z|0;O=-2-Z|0;P=_+2|0;Q=ba+288|0;R=ca+9|0;S=R;T=ca+8|0;f=0;g=0;q=0;a:while(1){do if((f|0)>-1){if((g|0)<=(2147483647-f|0)){f=g+f|0;break}if(!(k[56]|0))f=268;else{f=(Ga()|0)+60|0;f=k[f>>2]|0}k[f>>2]=75;f=-1}while(0);g=i[b>>0]|0;if(!(g<<24>>24)){K=249;break}else h=b;b:while(1){switch(g<<24>>24){case 37:{g=h;K=11;break b}case 0:{g=h;break b}default:{}}J=h+1|0;g=i[J>>0]|0;h=J}c:do if((K|0)==11)while(1){K=0;if((i[g+1>>0]|0)!=37)break c;h=h+1|0;g=g+2|0;if((i[g>>0]|0)==37)K=11;else break}while(0);y=h-b|0;if(M?(k[a>>2]&32|0)==0:0)Md(b,y,a)|0;if((h|0)!=(b|0)){b=g;g=y;continue}o=g+1|0;h=i[o>>0]|0;n=(h<<24>>24)+-48|0;if(n>>>0<10){J=(i[g+2>>0]|0)==36;o=J?g+3|0:o;h=i[o>>0]|0;u=J?n:-1;q=J?1:q}else u=-1;g=h<<24>>24;d:do if((g&-32|0)==32){n=0;while(1){if(!(1<<g+-32&75913)){s=n;break d}n=1<<(h<<24>>24)+-32|n;o=o+1|0;h=i[o>>0]|0;g=h<<24>>24;if((g&-32|0)!=32){s=n;break}}}else s=0;while(0);do if(h<<24>>24==42){h=o+1|0;g=(i[h>>0]|0)+-48|0;if(g>>>0<10?(i[o+2>>0]|0)==36:0){k[e+(g<<2)>>2]=10;q=1;g=o+3|0;n=k[d+((i[h>>0]|0)+-48<<3)>>2]|0}else{if(q){f=-1;break a}if(!M){w=s;q=0;J=0;break}q=(k[c>>2]|0)+(4-1)&~(4-1);n=k[q>>2]|0;k[c>>2]=q+4;q=0;g=h}if((n|0)<0){w=s|8192;h=g;J=0-n|0}else{w=s;h=g;J=n}}else{g=(h<<24>>24)+-48|0;if(g>>>0<10){h=o;n=0;do{n=(n*10|0)+g|0;h=h+1|0;g=(i[h>>0]|0)+-48|0}while(g>>>0<10);if((n|0)<0){f=-1;break a}else{w=s;J=n}}else{w=s;h=o;J=0}}while(0);e:do if((i[h>>0]|0)==46){n=h+1|0;g=i[n>>0]|0;if(g<<24>>24!=42){o=(g<<24>>24)+-48|0;if(o>>>0<10){g=n;h=0}else{g=n;o=0;break}while(1){h=(h*10|0)+o|0;g=g+1|0;o=(i[g>>0]|0)+-48|0;if(o>>>0>=10){o=h;break e}}}n=h+2|0;g=(i[n>>0]|0)+-48|0;if(g>>>0<10?(i[h+3>>0]|0)==36:0){k[e+(g<<2)>>2]=10;g=h+4|0;o=k[d+((i[n>>0]|0)+-48<<3)>>2]|0;break}if(q){f=-1;break a}if(M){g=(k[c>>2]|0)+(4-1)&~(4-1);o=k[g>>2]|0;k[c>>2]=g+4;g=n}else{g=n;o=0}}else{g=h;o=-1}while(0);v=0;while(1){h=(i[g>>0]|0)+-65|0;if(h>>>0>57){f=-1;break a}I=g+1|0;h=i[4398+(v*58|0)+h>>0]|0;n=h&255;if((n+-1|0)>>>0<8){g=I;v=n}else break}if(!(h<<24>>24)){f=-1;break}s=(u|0)>-1;do if(h<<24>>24==19)if(s){f=-1;break a}else K=54;else{if(s){k[e+(u<<2)>>2]=n;G=d+(u<<3)|0;H=k[G+4>>2]|0;K=aa;k[K>>2]=k[G>>2];k[K+4>>2]=H;K=54;break}if(!M){f=0;break a}Xd(aa,n,c)}while(0);if((K|0)==54?(K=0,!M):0){b=I;g=y;continue}u=i[g>>0]|0;u=(v|0)!=0&(u&15|0)==3?u&-33:u;h=w&-65537;H=(w&8192|0)==0?w:h;f:do switch(u|0){case 110:switch(v|0){case 0:{k[k[aa>>2]>>2]=f;b=I;g=y;continue a}case 1:{k[k[aa>>2]>>2]=f;b=I;g=y;continue a}case 2:{b=k[aa>>2]|0;k[b>>2]=f;k[b+4>>2]=((f|0)<0)<<31>>31;b=I;g=y;continue a}case 3:{j[k[aa>>2]>>1]=f;b=I;g=y;continue a}case 4:{i[k[aa>>2]>>0]=f;b=I;g=y;continue a}case 6:{k[k[aa>>2]>>2]=f;b=I;g=y;continue a}case 7:{b=k[aa>>2]|0;k[b>>2]=f;k[b+4>>2]=((f|0)<0)<<31>>31;b=I;g=y;continue a}default:{b=I;g=y;continue a}}case 112:{s=H|8;o=o>>>0>8?o:8;u=120;K=66;break}case 88:case 120:{s=H;K=66;break}case 111:{h=aa;g=k[h>>2]|0;h=k[h+4>>2]|0;if((g|0)==0&(h|0)==0)b=N;else{b=N;do{b=b+-1|0;i[b>>0]=g&7|48;g=de(g|0,h|0,3)|0;h=L}while(!((g|0)==0&(h|0)==0))}if(!(H&8)){g=H;s=0;n=4878;K=79}else{s=U-b+1|0;g=H;o=(o|0)<(s|0)?s:o;s=0;n=4878;K=79}break}case 105:case 100:{g=aa;b=k[g>>2]|0;g=k[g+4>>2]|0;if((g|0)<0){b=be(0,0,b|0,g|0)|0;g=L;h=aa;k[h>>2]=b;k[h+4>>2]=g;h=1;n=4878;K=78;break f}if(!(H&2048)){n=H&1;h=n;n=(n|0)==0?4878:4880;K=78}else{h=1;n=4879;K=78}break}case 117:{g=aa;b=k[g>>2]|0;g=k[g+4>>2]|0;h=0;n=4878;K=78;break}case 99:{i[V>>0]=k[aa>>2];b=V;u=1;w=0;v=4878;g=N;break}case 109:{if(!(k[56]|0))b=268;else{b=(Ga()|0)+60|0;b=k[b>>2]|0}g=Jd(k[b>>2]|0)|0;K=86;break}case 115:{g=k[aa>>2]|0;g=(g|0)!=0?g:4888;K=86;break}case 67:{k[fa>>2]=k[aa>>2];k[W>>2]=0;k[aa>>2]=fa;h=fa;o=-1;K=91;break}case 83:if(!o){Zd(a,32,J,0,H);g=0;K=102;break f}else{h=k[aa>>2]|0;K=91;break f}case 65:case 71:case 70:case 69:case 97:case 103:case 102:case 101:{m=+p[aa>>3];k[da>>2]=0;p[t>>3]=m;if((k[t+4>>2]|0)>=0)if(!(H&2048)){G=H&1;F=G;G=(G|0)==0?4896:4901}else{F=1;G=4898}else{m=-m;F=1;G=4895}p[t>>3]=m;E=k[t+4>>2]&2146435072;do if(E>>>0<2146435072|(E|0)==2146435072&0<0){x=+Kd(m,da)*2.0;g=x!=0.0;if(g)k[da>>2]=(k[da>>2]|0)+-1;C=u|32;if((C|0)==97){v=u&32;y=(v|0)==0?G:G+9|0;w=F|2;b=12-o|0;do if(!(o>>>0>11|(b|0)==0)){m=8.0;do{b=b+-1|0;m=m*16.0}while((b|0)!=0);if((i[y>>0]|0)==45){m=-(m+(-x-m));break}else{m=x+m-m;break}}else m=x;while(0);g=k[da>>2]|0;b=(g|0)<0?0-g|0:g;b=Yd(b,((b|0)<0)<<31>>31,X)|0;if((b|0)==(X|0)){i[Y>>0]=48;b=Y}i[b+-1>>0]=(g>>31&2)+43;s=b+-2|0;i[s>>0]=u+15;n=(o|0)<1;h=(H&8|0)==0;g=ca;while(1){G=~~m;b=g+1|0;i[g>>0]=l[4862+G>>0]|v;m=(m-+(G|0))*16.0;do if((b-Z|0)==1){if(h&(n&m==0.0))break;i[b>>0]=46;b=g+2|0}while(0);if(!(m!=0.0))break;else g=b}h=s;o=(o|0)!=0&(O+b|0)<(o|0)?P+o-h|0:$-h+b|0;n=o+w|0;Zd(a,32,J,n,H);if(!(k[a>>2]&32))Md(y,w,a)|0;Zd(a,48,J,n,H^65536);g=b-Z|0;if(!(k[a>>2]&32))Md(ca,g,a)|0;b=_-h|0;Zd(a,48,o-(g+b)|0,0,0);if(!(k[a>>2]&32))Md(s,b,a)|0;Zd(a,32,J,n,H^8192);g=(n|0)<(J|0)?J:n;break}b=(o|0)<0?6:o;if(g){g=(k[da>>2]|0)+-28|0;k[da>>2]=g;m=x*268435456.0}else{m=x;g=k[da>>2]|0}E=(g|0)<0?ba:Q;D=E;h=E;do{B=~~m>>>0;k[h>>2]=B;h=h+4|0;m=(m-+(B>>>0))*1.0e9}while(m!=0.0);g=k[da>>2]|0;if((g|0)>0){n=E;o=h;while(1){s=(g|0)>29?29:g;g=o+-4|0;do if(g>>>0>=n>>>0){h=0;do{A=ee(k[g>>2]|0,0,s|0)|0;A=ge(A|0,L|0,h|0,0)|0;B=L;z=pe(A|0,B|0,1e9,0)|0;k[g>>2]=z;h=oe(A|0,B|0,1e9,0)|0;g=g+-4|0}while(g>>>0>=n>>>0);if(!h)break;n=n+-4|0;k[n>>2]=h}while(0);h=o;while(1){if(h>>>0<=n>>>0)break;g=h+-4|0;if(!(k[g>>2]|0))h=g;else break}g=(k[da>>2]|0)-s|0;k[da>>2]=g;if((g|0)>0)o=h;else break}}else n=E;if((g|0)<0){y=((b+25|0)/9|0)+1|0;z=(C|0)==102;do{w=0-g|0;w=(w|0)>9?9:w;do if(n>>>0<h>>>0){g=(1<<w)+-1|0;o=1e9>>>w;v=0;s=n;do{B=k[s>>2]|0;k[s>>2]=(B>>>w)+v;v=ha(B&g,o)|0;s=s+4|0}while(s>>>0<h>>>0);g=(k[n>>2]|0)==0?n+4|0:n;if(!v){n=g;g=h;break}k[h>>2]=v;n=g;g=h+4|0}else{n=(k[n>>2]|0)==0?n+4|0:n;g=h}while(0);h=z?E:n;h=(g-h>>2|0)>(y|0)?h+(y<<2)|0:g;g=(k[da>>2]|0)+w|0;k[da>>2]=g}while((g|0)<0);s=n;B=h}else{s=n;B=h}do if(s>>>0<B>>>0){g=(D-s>>2)*9|0;n=k[s>>2]|0;if(n>>>0<10)break;else h=10;do{h=h*10|0;g=g+1|0}while(n>>>0>=h>>>0)}else g=0;while(0);z=(C|0)==103;A=(b|0)!=0;h=b-((C|0)!=102?g:0)+((A&z)<<31>>31)|0;if((h|0)<(((B-D>>2)*9|0)+-9|0)){o=h+9216|0;y=(o|0)/9|0;h=E+(y+-1023<<2)|0;o=((o|0)%9|0)+1|0;if((o|0)<9){n=10;do{n=n*10|0;o=o+1|0}while((o|0)!=9)}else n=10;v=k[h>>2]|0;w=(v>>>0)%(n>>>0)|0;if((w|0)==0?(E+(y+-1022<<2)|0)==(B|0):0)n=s;else K=167;do if((K|0)==167){K=0;x=(((v>>>0)/(n>>>0)|0)&1|0)==0?9007199254740992.0:9007199254740994.0;o=(n|0)/2|0;do if(w>>>0<o>>>0)m=.5;else{if((w|0)==(o|0)?(E+(y+-1022<<2)|0)==(B|0):0){m=1.0;break}m=1.5}while(0);do if(F){if((i[G>>0]|0)!=45)break;x=-x;m=-m}while(0);o=v-w|0;k[h>>2]=o;if(!(x+m!=x)){n=s;break}C=o+n|0;k[h>>2]=C;if(C>>>0>999999999){g=s;while(1){n=h+-4|0;k[h>>2]=0;if(n>>>0<g>>>0){g=g+-4|0;k[g>>2]=0}C=(k[n>>2]|0)+1|0;k[n>>2]=C;if(C>>>0>999999999)h=n;else{s=g;h=n;break}}}g=(D-s>>2)*9|0;o=k[s>>2]|0;if(o>>>0<10){n=s;break}else n=10;do{n=n*10|0;g=g+1|0}while(o>>>0>=n>>>0);n=s}while(0);h=h+4|0;C=n;h=B>>>0>h>>>0?h:B}else{C=s;h=B}w=0-g|0;B=h;while(1){if(B>>>0<=C>>>0){y=0;break}h=B+-4|0;if(!(k[h>>2]|0))B=h;else{y=1;break}}do if(z){b=(A&1^1)+b|0;if((b|0)>(g|0)&(g|0)>-5){u=u+-1|0;b=b+-1-g|0}else{u=u+-2|0;b=b+-1|0}h=H&8;if(h)break;do if(y){h=k[B+-4>>2]|0;if(!h){n=9;break}if(!((h>>>0)%10|0)){o=10;n=0}else{n=0;break}do{o=o*10|0;n=n+1|0}while(((h>>>0)%(o>>>0)|0|0)==0)}else n=9;while(0);h=((B-D>>2)*9|0)+-9|0;if((u|32|0)==102){h=h-n|0;h=(h|0)<0?0:h;b=(b|0)<(h|0)?b:h;h=0;break}else{h=h+g-n|0;h=(h|0)<0?0:h;b=(b|0)<(h|0)?b:h;h=0;break}}else h=H&8;while(0);v=b|h;o=(v|0)!=0&1;s=(u|32|0)==102;if(s){g=(g|0)>0?g:0;u=0}else{n=(g|0)<0?w:g;n=Yd(n,((n|0)<0)<<31>>31,X)|0;if((_-n|0)<2)do{n=n+-1|0;i[n>>0]=48}while((_-n|0)<2);i[n+-1>>0]=(g>>31&2)+43;D=n+-2|0;i[D>>0]=u;g=_-D|0;u=D}w=F+1+b+o+g|0;Zd(a,32,J,w,H);if(!(k[a>>2]&32))Md(G,F,a)|0;Zd(a,48,J,w,H^65536);do if(s){n=C>>>0>E>>>0?E:C;h=n;do{g=Yd(k[h>>2]|0,0,R)|0;do if((h|0)==(n|0)){if((g|0)!=(R|0))break;i[T>>0]=48;g=T}else{if(g>>>0<=ca>>>0)break;do{g=g+-1|0;i[g>>0]=48}while(g>>>0>ca>>>0)}while(0);if(!(k[a>>2]&32))Md(g,S-g|0,a)|0;h=h+4|0}while(h>>>0<=E>>>0);do if(v){if(k[a>>2]&32)break;Md(4930,1,a)|0}while(0);if((b|0)>0&h>>>0<B>>>0)while(1){g=Yd(k[h>>2]|0,0,R)|0;if(g>>>0>ca>>>0)do{g=g+-1|0;i[g>>0]=48}while(g>>>0>ca>>>0);if(!(k[a>>2]&32))Md(g,(b|0)>9?9:b,a)|0;h=h+4|0;g=b+-9|0;if(!((b|0)>9&h>>>0<B>>>0)){b=g;break}else b=g}Zd(a,48,b+9|0,9,0)}else{s=y?B:C+4|0;if((b|0)>-1){o=(h|0)==0;n=C;do{g=Yd(k[n>>2]|0,0,R)|0;if((g|0)==(R|0)){i[T>>0]=48;g=T}do if((n|0)==(C|0)){h=g+1|0;if(!(k[a>>2]&32))Md(g,1,a)|0;if(o&(b|0)<1){g=h;break}if(k[a>>2]&32){g=h;break}Md(4930,1,a)|0;g=h}else{if(g>>>0<=ca>>>0)break;do{g=g+-1|0;i[g>>0]=48}while(g>>>0>ca>>>0)}while(0);h=S-g|0;if(!(k[a>>2]&32))Md(g,(b|0)>(h|0)?h:b,a)|0;b=b-h|0;n=n+4|0}while(n>>>0<s>>>0&(b|0)>-1)}Zd(a,48,b+18|0,18,0);if(k[a>>2]&32)break;Md(u,_-u|0,a)|0}while(0);Zd(a,32,J,w,H^8192);g=(w|0)<(J|0)?J:w}else{s=(u&32|0)!=0;o=m!=m|0.0!=0.0;g=o?0:F;n=g+3|0;Zd(a,32,J,n,h);b=k[a>>2]|0;if(!(b&32)){Md(G,g,a)|0;b=k[a>>2]|0}if(!(b&32))Md(o?(s?4922:4926):s?4914:4918,3,a)|0;Zd(a,32,J,n,H^8192);g=(n|0)<(J|0)?J:n}while(0);b=I;continue a}default:{h=H;u=o;w=0;v=4878;g=N}}while(0);g:do if((K|0)==66){h=aa;g=k[h>>2]|0;h=k[h+4>>2]|0;n=u&32;if(!((g|0)==0&(h|0)==0)){b=N;do{b=b+-1|0;i[b>>0]=l[4862+(g&15)>>0]|n;g=de(g|0,h|0,4)|0;h=L}while(!((g|0)==0&(h|0)==0));K=aa;if((s&8|0)==0|(k[K>>2]|0)==0&(k[K+4>>2]|0)==0){g=s;s=0;n=4878;K=79}else{g=s;s=2;n=4878+(u>>4)|0;K=79}}else{b=N;g=s;s=0;n=4878;K=79}}else if((K|0)==78){b=Yd(b,g,N)|0;g=H;s=h;K=79}else if((K|0)==86){K=0;H=Ud(g,0,o)|0;G=(H|0)==0;b=g;u=G?o:H-g|0;w=0;v=4878;g=G?g+o|0:H}else if((K|0)==91){K=0;g=0;b=0;s=h;while(1){n=k[s>>2]|0;if(!n)break;b=Ld(ea,n)|0;if((b|0)<0|b>>>0>(o-g|0)>>>0)break;g=b+g|0;if(o>>>0>g>>>0)s=s+4|0;else break}if((b|0)<0){f=-1;break a}Zd(a,32,J,g,H);if(!g){g=0;K=102}else{n=0;while(1){b=k[h>>2]|0;if(!b){K=102;break g}b=Ld(ea,b)|0;n=b+n|0;if((n|0)>(g|0)){K=102;break g}if(!(k[a>>2]&32))Md(ea,b,a)|0;if(n>>>0>=g>>>0){K=102;break}else h=h+4|0}}}while(0);if((K|0)==102){K=0;Zd(a,32,J,g,H^8192);b=I;g=(J|0)>(g|0)?J:g;continue}if((K|0)==79){K=0;h=(o|0)>-1?g&-65537:g;g=aa;g=(k[g>>2]|0)!=0|(k[g+4>>2]|0)!=0;if((o|0)!=0|g){u=(g&1^1)+(U-b)|0;u=(o|0)>(u|0)?o:u;w=s;v=n;g=N}else{b=N;u=0;w=s;v=n;g=N}}s=g-b|0;n=(u|0)<(s|0)?s:u;o=w+n|0;g=(J|0)<(o|0)?o:J;Zd(a,32,g,o,h);if(!(k[a>>2]&32))Md(v,w,a)|0;Zd(a,48,g,o,h^65536);Zd(a,48,n,s,0);if(!(k[a>>2]&32))Md(b,s,a)|0;Zd(a,32,g,o,h^8192);b=I}h:do if((K|0)==249)if(!a)if(!q)f=0;else{f=1;while(1){b=k[e+(f<<2)>>2]|0;if(!b){b=0;break}Xd(d+(f<<3)|0,b,c);f=f+1|0;if((f|0)>=10){f=1;break h}}while(1){f=f+1|0;if(b){f=-1;break h}if((f|0)>=10){f=1;break h}b=k[e+(f<<2)>>2]|0}}while(0);r=ga;return f|0}function Wd(a){a=a|0;return}function Xd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0.0;a:do if(b>>>0<=20)do switch(b|0){case 9:{d=(k[c>>2]|0)+(4-1)&~(4-1);b=k[d>>2]|0;k[c>>2]=d+4;k[a>>2]=b;break a}case 10:{d=(k[c>>2]|0)+(4-1)&~(4-1);b=k[d>>2]|0;k[c>>2]=d+4;d=a;k[d>>2]=b;k[d+4>>2]=((b|0)<0)<<31>>31;break a}case 11:{d=(k[c>>2]|0)+(4-1)&~(4-1);b=k[d>>2]|0;k[c>>2]=d+4;d=a;k[d>>2]=b;k[d+4>>2]=0;break a}case 12:{d=(k[c>>2]|0)+(8-1)&~(8-1);b=d;e=k[b>>2]|0;b=k[b+4>>2]|0;k[c>>2]=d+8;d=a;k[d>>2]=e;k[d+4>>2]=b;break a}case 13:{e=(k[c>>2]|0)+(4-1)&~(4-1);d=k[e>>2]|0;k[c>>2]=e+4;d=(d&65535)<<16>>16;e=a;k[e>>2]=d;k[e+4>>2]=((d|0)<0)<<31>>31;break a}case 14:{e=(k[c>>2]|0)+(4-1)&~(4-1);d=k[e>>2]|0;k[c>>2]=e+4;e=a;k[e>>2]=d&65535;k[e+4>>2]=0;break a}case 15:{e=(k[c>>2]|0)+(4-1)&~(4-1);d=k[e>>2]|0;k[c>>2]=e+4;d=(d&255)<<24>>24;e=a;k[e>>2]=d;k[e+4>>2]=((d|0)<0)<<31>>31;break a}case 16:{e=(k[c>>2]|0)+(4-1)&~(4-1);d=k[e>>2]|0;k[c>>2]=e+4;e=a;k[e>>2]=d&255;k[e+4>>2]=0;break a}case 17:{e=(k[c>>2]|0)+(8-1)&~(8-1);f=+p[e>>3];k[c>>2]=e+8;p[a>>3]=f;break a}case 18:{e=(k[c>>2]|0)+(8-1)&~(8-1);f=+p[e>>3];k[c>>2]=e+8;p[a>>3]=f;break a}default:break a}while(0);while(0);return}function Yd(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if(b>>>0>0|(b|0)==0&a>>>0>4294967295)while(1){d=pe(a|0,b|0,10,0)|0;c=c+-1|0;i[c>>0]=d|48;d=a;a=oe(a|0,b|0,10,0)|0;if(!(b>>>0>9|(b|0)==9&d>>>0>4294967295))break;else b=L}if(a)while(1){c=c+-1|0;i[c>>0]=(a>>>0)%10|0|48;if(a>>>0<10)break;else a=(a>>>0)/10|0}return c|0}function Zd(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0;g=r;r=r+256|0;f=g;do if((c|0)>(d|0)&(e&73728|0)==0){e=c-d|0;ce(f|0,b|0,(e>>>0>256?256:e)|0)|0;d=k[a>>2]|0;c=(d&32|0)==0;if(e>>>0>255){b=e;do{if(c){Md(f,256,a)|0;d=k[a>>2]|0}b=b+-256|0;c=(d&32|0)==0}while(b>>>0>255);if(c)e=e&255;else break}else if(!c)break;Md(f,e,a)|0}while(0);r=g;return}function _d(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0;do if(a>>>0<245){o=a>>>0<11?16:a+11&-8;a=o>>>3;h=k[96]|0;b=h>>>a;if(b&3){b=(b&1^1)+a|0;d=b<<1;c=424+(d<<2)|0;d=424+(d+2<<2)|0;e=k[d>>2]|0;f=e+8|0;g=k[f>>2]|0;do if((c|0)!=(g|0)){if(g>>>0<(k[100]|0)>>>0)Ma();a=g+12|0;if((k[a>>2]|0)==(e|0)){k[a>>2]=c;k[d>>2]=g;break}else Ma()}else k[96]=h&~(1<<b);while(0);L=b<<3;k[e+4>>2]=L|3;L=e+(L|4)|0;k[L>>2]=k[L>>2]|1;L=f;return L|0}g=k[98]|0;if(o>>>0>g>>>0){if(b){d=2<<a;d=b<<a&(d|0-d);d=(d&0-d)+-1|0;i=d>>>12&16;d=d>>>i;e=d>>>5&8;d=d>>>e;f=d>>>2&4;d=d>>>f;c=d>>>1&2;d=d>>>c;b=d>>>1&1;b=(e|i|f|c|b)+(d>>>b)|0;d=b<<1;c=424+(d<<2)|0;d=424+(d+2<<2)|0;f=k[d>>2]|0;i=f+8|0;e=k[i>>2]|0;do if((c|0)!=(e|0)){if(e>>>0<(k[100]|0)>>>0)Ma();a=e+12|0;if((k[a>>2]|0)==(f|0)){k[a>>2]=c;k[d>>2]=e;j=k[98]|0;break}else Ma()}else{k[96]=h&~(1<<b);j=g}while(0);L=b<<3;g=L-o|0;k[f+4>>2]=o|3;h=f+o|0;k[f+(o|4)>>2]=g|1;k[f+L>>2]=g;if(j){e=k[101]|0;c=j>>>3;a=c<<1;d=424+(a<<2)|0;b=k[96]|0;c=1<<c;if(b&c){b=424+(a+2<<2)|0;a=k[b>>2]|0;if(a>>>0<(k[100]|0)>>>0)Ma();else{l=b;m=a}}else{k[96]=b|c;l=424+(a+2<<2)|0;m=d}k[l>>2]=e;k[m+12>>2]=e;k[e+8>>2]=m;k[e+12>>2]=d}k[98]=g;k[101]=h;L=i;return L|0}a=k[97]|0;if(a){h=(a&0-a)+-1|0;K=h>>>12&16;h=h>>>K;J=h>>>5&8;h=h>>>J;L=h>>>2&4;h=h>>>L;b=h>>>1&2;h=h>>>b;i=h>>>1&1;i=k[688+((J|K|L|b|i)+(h>>>i)<<2)>>2]|0;h=(k[i+4>>2]&-8)-o|0;b=i;while(1){a=k[b+16>>2]|0;if(!a){a=k[b+20>>2]|0;if(!a)break}b=(k[a+4>>2]&-8)-o|0;L=b>>>0<h>>>0;h=L?b:h;b=a;i=L?a:i}e=k[100]|0;if(i>>>0<e>>>0)Ma();g=i+o|0;if(i>>>0>=g>>>0)Ma();f=k[i+24>>2]|0;c=k[i+12>>2]|0;do if((c|0)==(i|0)){b=i+20|0;a=k[b>>2]|0;if(!a){b=i+16|0;a=k[b>>2]|0;if(!a){n=0;break}}while(1){c=a+20|0;d=k[c>>2]|0;if(d){a=d;b=c;continue}c=a+16|0;d=k[c>>2]|0;if(!d)break;else{a=d;b=c}}if(b>>>0<e>>>0)Ma();else{k[b>>2]=0;n=a;break}}else{d=k[i+8>>2]|0;if(d>>>0<e>>>0)Ma();a=d+12|0;if((k[a>>2]|0)!=(i|0))Ma();b=c+8|0;if((k[b>>2]|0)==(i|0)){k[a>>2]=c;k[b>>2]=d;n=c;break}else Ma()}while(0);do if(f){a=k[i+28>>2]|0;b=688+(a<<2)|0;if((i|0)==(k[b>>2]|0)){k[b>>2]=n;if(!n){k[97]=k[97]&~(1<<a);break}}else{if(f>>>0<(k[100]|0)>>>0)Ma();a=f+16|0;if((k[a>>2]|0)==(i|0))k[a>>2]=n;else k[f+20>>2]=n;if(!n)break}b=k[100]|0;if(n>>>0<b>>>0)Ma();k[n+24>>2]=f;a=k[i+16>>2]|0;do if(a)if(a>>>0<b>>>0)Ma();else{k[n+16>>2]=a;k[a+24>>2]=n;break}while(0);a=k[i+20>>2]|0;if(a)if(a>>>0<(k[100]|0)>>>0)Ma();else{k[n+20>>2]=a;k[a+24>>2]=n;break}}while(0);if(h>>>0<16){L=h+o|0;k[i+4>>2]=L|3;L=i+(L+4)|0;k[L>>2]=k[L>>2]|1}else{k[i+4>>2]=o|3;k[i+(o|4)>>2]=h|1;k[i+(h+o)>>2]=h;a=k[98]|0;if(a){e=k[101]|0;c=a>>>3;a=c<<1;d=424+(a<<2)|0;b=k[96]|0;c=1<<c;if(b&c){a=424+(a+2<<2)|0;b=k[a>>2]|0;if(b>>>0<(k[100]|0)>>>0)Ma();else{p=a;q=b}}else{k[96]=b|c;p=424+(a+2<<2)|0;q=d}k[p>>2]=e;k[q+12>>2]=e;k[e+8>>2]=q;k[e+12>>2]=d}k[98]=h;k[101]=g}L=i+8|0;return L|0}}}else if(a>>>0<=4294967231){a=a+11|0;o=a&-8;i=k[97]|0;if(i){b=0-o|0;a=a>>>8;if(a)if(o>>>0>16777215)h=31;else{q=(a+1048320|0)>>>16&8;x=a<<q;p=(x+520192|0)>>>16&4;x=x<<p;h=(x+245760|0)>>>16&2;h=14-(p|q|h)+(x<<h>>>15)|0;h=o>>>(h+7|0)&1|h<<1}else h=0;a=k[688+(h<<2)>>2]|0;a:do if(!a){c=0;a=0;x=86}else{e=b;c=0;f=o<<((h|0)==31?0:25-(h>>>1)|0);g=a;a=0;while(1){d=k[g+4>>2]&-8;b=d-o|0;if(b>>>0<e>>>0)if((d|0)==(o|0)){d=g;a=g;x=90;break a}else a=g;else b=e;x=k[g+20>>2]|0;g=k[g+16+(f>>>31<<2)>>2]|0;c=(x|0)==0|(x|0)==(g|0)?c:x;if(!g){x=86;break}else{e=b;f=f<<1}}}while(0);if((x|0)==86){if((c|0)==0&(a|0)==0){a=2<<h;a=i&(a|0-a);if(!a)break;a=(a&0-a)+-1|0;n=a>>>12&16;a=a>>>n;m=a>>>5&8;a=a>>>m;p=a>>>2&4;a=a>>>p;q=a>>>1&2;a=a>>>q;c=a>>>1&1;c=k[688+((m|n|p|q|c)+(a>>>c)<<2)>>2]|0;a=0}if(!c){h=b;i=a}else{d=c;x=90}}if((x|0)==90)while(1){x=0;q=(k[d+4>>2]&-8)-o|0;c=q>>>0<b>>>0;b=c?q:b;a=c?d:a;c=k[d+16>>2]|0;if(c){d=c;x=90;continue}d=k[d+20>>2]|0;if(!d){h=b;i=a;break}else x=90}if((i|0)!=0?h>>>0<((k[98]|0)-o|0)>>>0:0){e=k[100]|0;if(i>>>0<e>>>0)Ma();g=i+o|0;if(i>>>0>=g>>>0)Ma();f=k[i+24>>2]|0;c=k[i+12>>2]|0;do if((c|0)==(i|0)){b=i+20|0;a=k[b>>2]|0;if(!a){b=i+16|0;a=k[b>>2]|0;if(!a){s=0;break}}while(1){c=a+20|0;d=k[c>>2]|0;if(d){a=d;b=c;continue}c=a+16|0;d=k[c>>2]|0;if(!d)break;else{a=d;b=c}}if(b>>>0<e>>>0)Ma();else{k[b>>2]=0;s=a;break}}else{d=k[i+8>>2]|0;if(d>>>0<e>>>0)Ma();a=d+12|0;if((k[a>>2]|0)!=(i|0))Ma();b=c+8|0;if((k[b>>2]|0)==(i|0)){k[a>>2]=c;k[b>>2]=d;s=c;break}else Ma()}while(0);do if(f){a=k[i+28>>2]|0;b=688+(a<<2)|0;if((i|0)==(k[b>>2]|0)){k[b>>2]=s;if(!s){k[97]=k[97]&~(1<<a);break}}else{if(f>>>0<(k[100]|0)>>>0)Ma();a=f+16|0;if((k[a>>2]|0)==(i|0))k[a>>2]=s;else k[f+20>>2]=s;if(!s)break}b=k[100]|0;if(s>>>0<b>>>0)Ma();k[s+24>>2]=f;a=k[i+16>>2]|0;do if(a)if(a>>>0<b>>>0)Ma();else{k[s+16>>2]=a;k[a+24>>2]=s;break}while(0);a=k[i+20>>2]|0;if(a)if(a>>>0<(k[100]|0)>>>0)Ma();else{k[s+20>>2]=a;k[a+24>>2]=s;break}}while(0);b:do if(h>>>0>=16){k[i+4>>2]=o|3;k[i+(o|4)>>2]=h|1;k[i+(h+o)>>2]=h;a=h>>>3;if(h>>>0<256){b=a<<1;d=424+(b<<2)|0;c=k[96]|0;a=1<<a;if(c&a){a=424+(b+2<<2)|0;b=k[a>>2]|0;if(b>>>0<(k[100]|0)>>>0)Ma();else{t=a;u=b}}else{k[96]=c|a;t=424+(b+2<<2)|0;u=d}k[t>>2]=g;k[u+12>>2]=g;k[i+(o+8)>>2]=u;k[i+(o+12)>>2]=d;break}a=h>>>8;if(a)if(h>>>0>16777215)d=31;else{K=(a+1048320|0)>>>16&8;L=a<<K;J=(L+520192|0)>>>16&4;L=L<<J;d=(L+245760|0)>>>16&2;d=14-(J|K|d)+(L<<d>>>15)|0;d=h>>>(d+7|0)&1|d<<1}else d=0;a=688+(d<<2)|0;k[i+(o+28)>>2]=d;k[i+(o+20)>>2]=0;k[i+(o+16)>>2]=0;b=k[97]|0;c=1<<d;if(!(b&c)){k[97]=b|c;k[a>>2]=g;k[i+(o+24)>>2]=a;k[i+(o+12)>>2]=g;k[i+(o+8)>>2]=g;break}a=k[a>>2]|0;c:do if((k[a+4>>2]&-8|0)!=(h|0)){d=h<<((d|0)==31?0:25-(d>>>1)|0);while(1){c=a+16+(d>>>31<<2)|0;b=k[c>>2]|0;if(!b)break;if((k[b+4>>2]&-8|0)==(h|0)){w=b;break c}else{d=d<<1;a=b}}if(c>>>0<(k[100]|0)>>>0)Ma();else{k[c>>2]=g;k[i+(o+24)>>2]=a;k[i+(o+12)>>2]=g;k[i+(o+8)>>2]=g;break b}}else w=a;while(0);a=w+8|0;b=k[a>>2]|0;L=k[100]|0;if(b>>>0>=L>>>0&w>>>0>=L>>>0){k[b+12>>2]=g;k[a>>2]=g;k[i+(o+8)>>2]=b;k[i+(o+12)>>2]=w;k[i+(o+24)>>2]=0;break}else Ma()}else{L=h+o|0;k[i+4>>2]=L|3;L=i+(L+4)|0;k[L>>2]=k[L>>2]|1}while(0);L=i+8|0;return L|0}}}else o=-1;while(0);c=k[98]|0;if(c>>>0>=o>>>0){a=c-o|0;b=k[101]|0;if(a>>>0>15){k[101]=b+o;k[98]=a;k[b+(o+4)>>2]=a|1;k[b+c>>2]=a;k[b+4>>2]=o|3}else{k[98]=0;k[101]=0;k[b+4>>2]=c|3;L=b+(c+4)|0;k[L>>2]=k[L>>2]|1}L=b+8|0;return L|0}a=k[99]|0;if(a>>>0>o>>>0){K=a-o|0;k[99]=K;L=k[102]|0;k[102]=L+o;k[L+(o+4)>>2]=K|1;k[L+4>>2]=o|3;L=L+8|0;return L|0}do if(!(k[214]|0)){a=Fa(30)|0;if(!(a+-1&a)){k[216]=a;k[215]=a;k[217]=-1;k[218]=-1;k[219]=0;k[207]=0;w=(Oa(0)|0)&-16^1431655768;k[214]=w;break}else Ma()}while(0);f=o+48|0;e=k[216]|0;g=o+47|0;d=e+g|0;e=0-e|0;h=d&e;if(h>>>0<=o>>>0){L=0;return L|0}a=k[206]|0;if((a|0)!=0?(u=k[204]|0,w=u+h|0,w>>>0<=u>>>0|w>>>0>a>>>0):0){L=0;return L|0}d:do if(!(k[207]&4)){c=k[102]|0;e:do if(c){a=832;while(1){b=k[a>>2]|0;if(b>>>0<=c>>>0?(r=a+4|0,(b+(k[r>>2]|0)|0)>>>0>c>>>0):0)break;a=k[a+8>>2]|0;if(!a){x=174;break e}}b=d-(k[99]|0)&e;if(b>>>0<2147483647){c=Ba(b|0)|0;w=(c|0)==((k[a>>2]|0)+(k[r>>2]|0)|0);a=w?b:0;if(w){if((c|0)!=(-1|0)){r=c;q=a;x=194;break d}}else x=184}else a=0}else x=174;while(0);do if((x|0)==174){d=Ba(0)|0;if((d|0)!=(-1|0)){a=d;b=k[215]|0;c=b+-1|0;if(!(c&a))b=h;else b=h-a+(c+a&0-b)|0;a=k[204]|0;c=a+b|0;if(b>>>0>o>>>0&b>>>0<2147483647){w=k[206]|0;if((w|0)!=0?c>>>0<=a>>>0|c>>>0>w>>>0:0){a=0;break}c=Ba(b|0)|0;x=(c|0)==(d|0);a=x?b:0;if(x){r=d;q=a;x=194;break d}else x=184}else a=0}else a=0}while(0);f:do if((x|0)==184){d=0-b|0;do if(f>>>0>b>>>0&(b>>>0<2147483647&(c|0)!=(-1|0))?(v=k[216]|0,v=g-b+v&0-v,v>>>0<2147483647):0)if((Ba(v|0)|0)==(-1|0)){Ba(d|0)|0;break f}else{b=v+b|0;break}while(0);if((c|0)!=(-1|0)){r=c;q=b;x=194;break d}}while(0);k[207]=k[207]|4;x=191}else{a=0;x=191}while(0);if((((x|0)==191?h>>>0<2147483647:0)?(y=Ba(h|0)|0,z=Ba(0)|0,y>>>0<z>>>0&((y|0)!=(-1|0)&(z|0)!=(-1|0))):0)?(A=z-y|0,B=A>>>0>(o+40|0)>>>0,B):0){r=y;q=B?A:a;x=194}if((x|0)==194){a=(k[204]|0)+q|0;k[204]=a;if(a>>>0>(k[205]|0)>>>0)k[205]=a;g=k[102]|0;g:do if(g){e=832;while(1){a=k[e>>2]|0;b=e+4|0;c=k[b>>2]|0;if((r|0)==(a+c|0)){x=204;break}d=k[e+8>>2]|0;if(!d)break;else e=d}if(((x|0)==204?(k[e+12>>2]&8|0)==0:0)?g>>>0<r>>>0&g>>>0>=a>>>0:0){k[b>>2]=c+q;L=(k[99]|0)+q|0;K=g+8|0;K=(K&7|0)==0?0:0-K&7;J=L-K|0;k[102]=g+K;k[99]=J;k[g+(K+4)>>2]=J|1;k[g+(L+4)>>2]=40;k[103]=k[218];break}a=k[100]|0;if(r>>>0<a>>>0){k[100]=r;i=r}else i=a;b=r+q|0;a=832;while(1){if((k[a>>2]|0)==(b|0)){x=212;break}a=k[a+8>>2]|0;if(!a){b=832;break}}if((x|0)==212)if(!(k[a+12>>2]&8)){k[a>>2]=r;n=a+4|0;k[n>>2]=(k[n>>2]|0)+q;n=r+8|0;n=(n&7|0)==0?0:0-n&7;j=r+(q+8)|0;j=(j&7|0)==0?0:0-j&7;a=r+(j+q)|0;m=n+o|0;p=r+m|0;l=a-(r+n)-o|0;k[r+(n+4)>>2]=o|3;h:do if((a|0)!=(g|0)){if((a|0)==(k[101]|0)){L=(k[98]|0)+l|0;k[98]=L;k[101]=p;k[r+(m+4)>>2]=L|1;k[r+(L+m)>>2]=L;break}g=q+4|0;b=k[r+(g+j)>>2]|0;if((b&3|0)==1){h=b&-8;e=b>>>3;i:do if(b>>>0>=256){f=k[r+((j|24)+q)>>2]|0;d=k[r+(q+12+j)>>2]|0;do if((d|0)==(a|0)){c=j|16;d=r+(g+c)|0;b=k[d>>2]|0;if(!b){c=r+(c+q)|0;b=k[c>>2]|0;if(!b){I=0;break}}else c=d;while(1){d=b+20|0;e=k[d>>2]|0;if(e){b=e;c=d;continue}d=b+16|0;e=k[d>>2]|0;if(!e)break;else{b=e;c=d}}if(c>>>0<i>>>0)Ma();else{k[c>>2]=0;I=b;break}}else{e=k[r+((j|8)+q)>>2]|0;if(e>>>0<i>>>0)Ma();b=e+12|0;if((k[b>>2]|0)!=(a|0))Ma();c=d+8|0;if((k[c>>2]|0)==(a|0)){k[b>>2]=d;k[c>>2]=e;I=d;break}else Ma()}while(0);if(!f)break;b=k[r+(q+28+j)>>2]|0;c=688+(b<<2)|0;do if((a|0)!=(k[c>>2]|0)){if(f>>>0<(k[100]|0)>>>0)Ma();b=f+16|0;if((k[b>>2]|0)==(a|0))k[b>>2]=I;else k[f+20>>2]=I;if(!I)break i}else{k[c>>2]=I;if(I)break;k[97]=k[97]&~(1<<b);break i}while(0);c=k[100]|0;if(I>>>0<c>>>0)Ma();k[I+24>>2]=f;a=j|16;b=k[r+(a+q)>>2]|0;do if(b)if(b>>>0<c>>>0)Ma();else{k[I+16>>2]=b;k[b+24>>2]=I;break}while(0);a=k[r+(g+a)>>2]|0;if(!a)break;if(a>>>0<(k[100]|0)>>>0)Ma();else{k[I+20>>2]=a;k[a+24>>2]=I;break}}else{c=k[r+((j|8)+q)>>2]|0;d=k[r+(q+12+j)>>2]|0;b=424+(e<<1<<2)|0;do if((c|0)!=(b|0)){if(c>>>0<i>>>0)Ma();if((k[c+12>>2]|0)==(a|0))break;Ma()}while(0);if((d|0)==(c|0)){k[96]=k[96]&~(1<<e);break}do if((d|0)==(b|0))E=d+8|0;else{if(d>>>0<i>>>0)Ma();b=d+8|0;if((k[b>>2]|0)==(a|0)){E=b;break}Ma()}while(0);k[c+12>>2]=d;k[E>>2]=c}while(0);a=r+((h|j)+q)|0;e=h+l|0}else e=l;a=a+4|0;k[a>>2]=k[a>>2]&-2;k[r+(m+4)>>2]=e|1;k[r+(e+m)>>2]=e;a=e>>>3;if(e>>>0<256){b=a<<1;d=424+(b<<2)|0;c=k[96]|0;a=1<<a;do if(!(c&a)){k[96]=c|a;J=424+(b+2<<2)|0;K=d}else{a=424+(b+2<<2)|0;b=k[a>>2]|0;if(b>>>0>=(k[100]|0)>>>0){J=a;K=b;break}Ma()}while(0);k[J>>2]=p;k[K+12>>2]=p;k[r+(m+8)>>2]=K;k[r+(m+12)>>2]=d;break}a=e>>>8;do if(!a)d=0;else{if(e>>>0>16777215){d=31;break}J=(a+1048320|0)>>>16&8;K=a<<J;I=(K+520192|0)>>>16&4;K=K<<I;d=(K+245760|0)>>>16&2;d=14-(I|J|d)+(K<<d>>>15)|0;d=e>>>(d+7|0)&1|d<<1}while(0);a=688+(d<<2)|0;k[r+(m+28)>>2]=d;k[r+(m+20)>>2]=0;k[r+(m+16)>>2]=0;b=k[97]|0;c=1<<d;if(!(b&c)){k[97]=b|c;k[a>>2]=p;k[r+(m+24)>>2]=a;k[r+(m+12)>>2]=p;k[r+(m+8)>>2]=p;break}a=k[a>>2]|0;j:do if((k[a+4>>2]&-8|0)!=(e|0)){d=e<<((d|0)==31?0:25-(d>>>1)|0);while(1){c=a+16+(d>>>31<<2)|0;b=k[c>>2]|0;if(!b)break;if((k[b+4>>2]&-8|0)==(e|0)){L=b;break j}else{d=d<<1;a=b}}if(c>>>0<(k[100]|0)>>>0)Ma();else{k[c>>2]=p;k[r+(m+24)>>2]=a;k[r+(m+12)>>2]=p;k[r+(m+8)>>2]=p;break h}}else L=a;while(0);a=L+8|0;b=k[a>>2]|0;K=k[100]|0;if(b>>>0>=K>>>0&L>>>0>=K>>>0){k[b+12>>2]=p;k[a>>2]=p;k[r+(m+8)>>2]=b;k[r+(m+12)>>2]=L;k[r+(m+24)>>2]=0;break}else Ma()}else{L=(k[99]|0)+l|0;k[99]=L;k[102]=p;k[r+(m+4)>>2]=L|1}while(0);L=r+(n|8)|0;return L|0}else b=832;while(1){a=k[b>>2]|0;if(a>>>0<=g>>>0?(C=k[b+4>>2]|0,D=a+C|0,D>>>0>g>>>0):0)break;b=k[b+8>>2]|0}b=a+(C+-39)|0;b=a+(C+-47+((b&7|0)==0?0:0-b&7))|0;e=g+16|0;b=b>>>0<e>>>0?g:b;a=b+8|0;c=r+8|0;c=(c&7|0)==0?0:0-c&7;L=q+-40-c|0;k[102]=r+c;k[99]=L;k[r+(c+4)>>2]=L|1;k[r+(q+-36)>>2]=40;k[103]=k[218];c=b+4|0;k[c>>2]=27;k[a>>2]=k[208];k[a+4>>2]=k[209];k[a+8>>2]=k[210];k[a+12>>2]=k[211];k[208]=r;k[209]=q;k[211]=0;k[210]=a;a=b+28|0;k[a>>2]=7;if((b+32|0)>>>0<D>>>0)do{L=a;a=a+4|0;k[a>>2]=7}while((L+8|0)>>>0<D>>>0);if((b|0)!=(g|0)){f=b-g|0;k[c>>2]=k[c>>2]&-2;k[g+4>>2]=f|1;k[b>>2]=f;a=f>>>3;if(f>>>0<256){b=a<<1;d=424+(b<<2)|0;c=k[96]|0;a=1<<a;if(c&a){a=424+(b+2<<2)|0;b=k[a>>2]|0;if(b>>>0<(k[100]|0)>>>0)Ma();else{F=a;G=b}}else{k[96]=c|a;F=424+(b+2<<2)|0;G=d}k[F>>2]=g;k[G+12>>2]=g;k[g+8>>2]=G;k[g+12>>2]=d;break}a=f>>>8;if(a)if(f>>>0>16777215)d=31;else{K=(a+1048320|0)>>>16&8;L=a<<K;J=(L+520192|0)>>>16&4;L=L<<J;d=(L+245760|0)>>>16&2;d=14-(J|K|d)+(L<<d>>>15)|0;d=f>>>(d+7|0)&1|d<<1}else d=0;c=688+(d<<2)|0;k[g+28>>2]=d;k[g+20>>2]=0;k[e>>2]=0;a=k[97]|0;b=1<<d;if(!(a&b)){k[97]=a|b;k[c>>2]=g;k[g+24>>2]=c;k[g+12>>2]=g;k[g+8>>2]=g;break}a=k[c>>2]|0;k:do if((k[a+4>>2]&-8|0)!=(f|0)){d=f<<((d|0)==31?0:25-(d>>>1)|0);while(1){c=a+16+(d>>>31<<2)|0;b=k[c>>2]|0;if(!b)break;if((k[b+4>>2]&-8|0)==(f|0)){H=b;break k}else{d=d<<1;a=b}}if(c>>>0<(k[100]|0)>>>0)Ma();else{k[c>>2]=g;k[g+24>>2]=a;k[g+12>>2]=g;k[g+8>>2]=g;break g}}else H=a;while(0);a=H+8|0;b=k[a>>2]|0;L=k[100]|0;if(b>>>0>=L>>>0&H>>>0>=L>>>0){k[b+12>>2]=g;k[a>>2]=g;k[g+8>>2]=b;k[g+12>>2]=H;k[g+24>>2]=0;break}else Ma()}}else{L=k[100]|0;if((L|0)==0|r>>>0<L>>>0)k[100]=r;k[208]=r;k[209]=q;k[211]=0;k[105]=k[214];k[104]=-1;a=0;do{L=a<<1;K=424+(L<<2)|0;k[424+(L+3<<2)>>2]=K;k[424+(L+2<<2)>>2]=K;a=a+1|0}while((a|0)!=32);L=r+8|0;L=(L&7|0)==0?0:0-L&7;K=q+-40-L|0;k[102]=r+L;k[99]=K;k[r+(L+4)>>2]=K|1;k[r+(q+-36)>>2]=40;k[103]=k[218]}while(0);a=k[99]|0;if(a>>>0>o>>>0){K=a-o|0;k[99]=K;L=k[102]|0;k[102]=L+o;k[L+(o+4)>>2]=K|1;k[L+4>>2]=o|3;L=L+8|0;return L|0}}if(!(k[56]|0))a=268;else{a=(Ga()|0)+60|0;a=k[a>>2]|0}k[a>>2]=12;L=0;return L|0}function $d(a){a=a|0;var b=0,c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;if(!a)return;b=a+-8|0;h=k[100]|0;if(b>>>0<h>>>0)Ma();c=k[a+-4>>2]|0;d=c&3;if((d|0)==1)Ma();o=c&-8;q=a+(o+-8)|0;do if(!(c&1)){b=k[b>>2]|0;if(!d)return;i=-8-b|0;l=a+i|0;m=b+o|0;if(l>>>0<h>>>0)Ma();if((l|0)==(k[101]|0)){b=a+(o+-4)|0;c=k[b>>2]|0;if((c&3|0)!=3){u=l;f=m;break}k[98]=m;k[b>>2]=c&-2;k[a+(i+4)>>2]=m|1;k[q>>2]=m;return}e=b>>>3;if(b>>>0<256){d=k[a+(i+8)>>2]|0;c=k[a+(i+12)>>2]|0;b=424+(e<<1<<2)|0;if((d|0)!=(b|0)){if(d>>>0<h>>>0)Ma();if((k[d+12>>2]|0)!=(l|0))Ma()}if((c|0)==(d|0)){k[96]=k[96]&~(1<<e);u=l;f=m;break}if((c|0)!=(b|0)){if(c>>>0<h>>>0)Ma();b=c+8|0;if((k[b>>2]|0)==(l|0))g=b;else Ma()}else g=c+8|0;k[d+12>>2]=c;k[g>>2]=d;u=l;f=m;break}g=k[a+(i+24)>>2]|0;d=k[a+(i+12)>>2]|0;do if((d|0)==(l|0)){c=a+(i+20)|0;b=k[c>>2]|0;if(!b){c=a+(i+16)|0;b=k[c>>2]|0;if(!b){j=0;break}}while(1){d=b+20|0;e=k[d>>2]|0;if(e){b=e;c=d;continue}d=b+16|0;e=k[d>>2]|0;if(!e)break;else{b=e;c=d}}if(c>>>0<h>>>0)Ma();else{k[c>>2]=0;j=b;break}}else{e=k[a+(i+8)>>2]|0;if(e>>>0<h>>>0)Ma();b=e+12|0;if((k[b>>2]|0)!=(l|0))Ma();c=d+8|0;if((k[c>>2]|0)==(l|0)){k[b>>2]=d;k[c>>2]=e;j=d;break}else Ma()}while(0);if(g){b=k[a+(i+28)>>2]|0;c=688+(b<<2)|0;if((l|0)==(k[c>>2]|0)){k[c>>2]=j;if(!j){k[97]=k[97]&~(1<<b);u=l;f=m;break}}else{if(g>>>0<(k[100]|0)>>>0)Ma();b=g+16|0;if((k[b>>2]|0)==(l|0))k[b>>2]=j;else k[g+20>>2]=j;if(!j){u=l;f=m;break}}c=k[100]|0;if(j>>>0<c>>>0)Ma();k[j+24>>2]=g;b=k[a+(i+16)>>2]|0;do if(b)if(b>>>0<c>>>0)Ma();else{k[j+16>>2]=b;k[b+24>>2]=j;break}while(0);b=k[a+(i+20)>>2]|0;if(b)if(b>>>0<(k[100]|0)>>>0)Ma();else{k[j+20>>2]=b;k[b+24>>2]=j;u=l;f=m;break}else{u=l;f=m}}else{u=l;f=m}}else{u=b;f=o}while(0);if(u>>>0>=q>>>0)Ma();b=a+(o+-4)|0;c=k[b>>2]|0;if(!(c&1))Ma();if(!(c&2)){if((q|0)==(k[102]|0)){t=(k[99]|0)+f|0;k[99]=t;k[102]=u;k[u+4>>2]=t|1;if((u|0)!=(k[101]|0))return;k[101]=0;k[98]=0;return}if((q|0)==(k[101]|0)){t=(k[98]|0)+f|0;k[98]=t;k[101]=u;k[u+4>>2]=t|1;k[u+t>>2]=t;return}f=(c&-8)+f|0;e=c>>>3;do if(c>>>0>=256){g=k[a+(o+16)>>2]|0;b=k[a+(o|4)>>2]|0;do if((b|0)==(q|0)){c=a+(o+12)|0;b=k[c>>2]|0;if(!b){c=a+(o+8)|0;b=k[c>>2]|0;if(!b){p=0;break}}while(1){d=b+20|0;e=k[d>>2]|0;if(e){b=e;c=d;continue}d=b+16|0;e=k[d>>2]|0;if(!e)break;else{b=e;c=d}}if(c>>>0<(k[100]|0)>>>0)Ma();else{k[c>>2]=0;p=b;break}}else{c=k[a+o>>2]|0;if(c>>>0<(k[100]|0)>>>0)Ma();d=c+12|0;if((k[d>>2]|0)!=(q|0))Ma();e=b+8|0;if((k[e>>2]|0)==(q|0)){k[d>>2]=b;k[e>>2]=c;p=b;break}else Ma()}while(0);if(g){b=k[a+(o+20)>>2]|0;c=688+(b<<2)|0;if((q|0)==(k[c>>2]|0)){k[c>>2]=p;if(!p){k[97]=k[97]&~(1<<b);break}}else{if(g>>>0<(k[100]|0)>>>0)Ma();b=g+16|0;if((k[b>>2]|0)==(q|0))k[b>>2]=p;else k[g+20>>2]=p;if(!p)break}c=k[100]|0;if(p>>>0<c>>>0)Ma();k[p+24>>2]=g;b=k[a+(o+8)>>2]|0;do if(b)if(b>>>0<c>>>0)Ma();else{k[p+16>>2]=b;k[b+24>>2]=p;break}while(0);b=k[a+(o+12)>>2]|0;if(b)if(b>>>0<(k[100]|0)>>>0)Ma();else{k[p+20>>2]=b;k[b+24>>2]=p;break}}}else{d=k[a+o>>2]|0;c=k[a+(o|4)>>2]|0;b=424+(e<<1<<2)|0;if((d|0)!=(b|0)){if(d>>>0<(k[100]|0)>>>0)Ma();if((k[d+12>>2]|0)!=(q|0))Ma()}if((c|0)==(d|0)){k[96]=k[96]&~(1<<e);break}if((c|0)!=(b|0)){if(c>>>0<(k[100]|0)>>>0)Ma();b=c+8|0;if((k[b>>2]|0)==(q|0))n=b;else Ma()}else n=c+8|0;k[d+12>>2]=c;k[n>>2]=d}while(0);k[u+4>>2]=f|1;k[u+f>>2]=f;if((u|0)==(k[101]|0)){k[98]=f;return}}else{k[b>>2]=c&-2;k[u+4>>2]=f|1;k[u+f>>2]=f}b=f>>>3;if(f>>>0<256){c=b<<1;e=424+(c<<2)|0;d=k[96]|0;b=1<<b;if(d&b){b=424+(c+2<<2)|0;c=k[b>>2]|0;if(c>>>0<(k[100]|0)>>>0)Ma();else{r=b;s=c}}else{k[96]=d|b;r=424+(c+2<<2)|0;s=e}k[r>>2]=u;k[s+12>>2]=u;k[u+8>>2]=s;k[u+12>>2]=e;return}b=f>>>8;if(b)if(f>>>0>16777215)e=31;else{r=(b+1048320|0)>>>16&8;s=b<<r;q=(s+520192|0)>>>16&4;s=s<<q;e=(s+245760|0)>>>16&2;e=14-(q|r|e)+(s<<e>>>15)|0;e=f>>>(e+7|0)&1|e<<1}else e=0;b=688+(e<<2)|0;k[u+28>>2]=e;k[u+20>>2]=0;k[u+16>>2]=0;c=k[97]|0;d=1<<e;a:do if(c&d){b=k[b>>2]|0;b:do if((k[b+4>>2]&-8|0)!=(f|0)){e=f<<((e|0)==31?0:25-(e>>>1)|0);while(1){d=b+16+(e>>>31<<2)|0;c=k[d>>2]|0;if(!c)break;if((k[c+4>>2]&-8|0)==(f|0)){t=c;break b}else{e=e<<1;b=c}}if(d>>>0<(k[100]|0)>>>0)Ma();else{k[d>>2]=u;k[u+24>>2]=b;k[u+12>>2]=u;k[u+8>>2]=u;break a}}else t=b;while(0);b=t+8|0;c=k[b>>2]|0;s=k[100]|0;if(c>>>0>=s>>>0&t>>>0>=s>>>0){k[c+12>>2]=u;k[b>>2]=u;k[u+8>>2]=c;k[u+12>>2]=t;k[u+24>>2]=0;break}else Ma()}else{k[97]=c|d;k[b>>2]=u;k[u+24>>2]=b;k[u+12>>2]=u;k[u+8>>2]=u}while(0);u=(k[104]|0)+-1|0;k[104]=u;if(!u)b=840;else return;while(1){b=k[b>>2]|0;if(!b)break;else b=b+8|0}k[104]=-1;return}function ae(){}function be(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;d=b-d-(c>>>0>a>>>0|0)>>>0;return (L=d,a-c>>>0|0)|0}function ce(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0;d=a+c|0;if((c|0)>=20){b=b&255;f=a&3;g=b|b<<8|b<<16|b<<24;e=d&~3;if(f){f=a+4-f|0;while((a|0)<(f|0)){i[a>>0]=b;a=a+1|0}}while((a|0)<(e|0)){k[a>>2]=g;a=a+4|0}}while((a|0)<(d|0)){i[a>>0]=b;a=a+1|0}return a-c|0}function de(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){L=b>>>c;return a>>>c|(b&(1<<c)-1)<<32-c}L=0;return b>>>c-32|0}function ee(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){L=b<<c|(a&(1<<c)-1<<32-c)>>>32-c;return a<<c}L=a<<c-32;return 0}function fe(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if((c|0)>=4096)return Ca(a|0,b|0,c|0)|0;d=a|0;if((a&3)==(b&3)){while(a&3){if(!c)return d|0;i[a>>0]=i[b>>0]|0;a=a+1|0;b=b+1|0;c=c-1|0}while((c|0)>=4){k[a>>2]=k[b>>2];a=a+4|0;b=b+4|0;c=c-4|0}}while((c|0)>0){i[a>>0]=i[b>>0]|0;a=a+1|0;b=b+1|0;c=c-1|0}return d|0}function ge(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;c=a+c>>>0;return (L=b+d+(c>>>0<a>>>0|0)>>>0,c|0)|0}function he(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;if((b|0)<(a|0)&(a|0)<(b+c|0)){d=a;b=b+c|0;a=a+c|0;while((c|0)>0){a=a-1|0;b=b-1|0;c=c-1|0;i[a>>0]=i[b>>0]|0}a=d}else fe(a,b,c)|0;return a|0}function ie(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){L=b>>c;return a>>>c|(b&(1<<c)-1)<<32-c}L=(b|0)<0?-1:0;return b>>c-32|0}function je(a){a=a|0;var b=0;b=i[v+(a&255)>>0]|0;if((b|0)<8)return b|0;b=i[v+(a>>8&255)>>0]|0;if((b|0)<8)return b+8|0;b=i[v+(a>>16&255)>>0]|0;if((b|0)<8)return b+16|0;return (i[v+(a>>>24)>>0]|0)+24|0}function ke(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;f=a&65535;e=b&65535;c=ha(e,f)|0;d=a>>>16;a=(c>>>16)+(ha(e,d)|0)|0;e=b>>>16;b=ha(e,f)|0;return (L=(a>>>16)+(ha(e,d)|0)+(((a&65535)+b|0)>>>16)|0,a+b<<16|c&65535|0)|0}function le(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;j=b>>31|((b|0)<0?-1:0)<<1;i=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;f=d>>31|((d|0)<0?-1:0)<<1;e=((d|0)<0?-1:0)>>31|((d|0)<0?-1:0)<<1;h=be(j^a,i^b,j,i)|0;g=L;a=f^j;b=e^i;return be((qe(h,g,be(f^c,e^d,f,e)|0,L,0)|0)^a,L^b,a,b)|0}function me(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;e=r;r=r+16|0;h=e|0;g=b>>31|((b|0)<0?-1:0)<<1;f=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;j=d>>31|((d|0)<0?-1:0)<<1;i=((d|0)<0?-1:0)>>31|((d|0)<0?-1:0)<<1;a=be(g^a,f^b,g,f)|0;b=L;qe(a,b,be(j^c,i^d,j,i)|0,L,h)|0;d=be(k[h>>2]^g,k[h+4>>2]^f,g,f)|0;c=L;r=e;return (L=c,d)|0}function ne(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=a;f=c;c=ke(e,f)|0;a=L;return (L=(ha(b,f)|0)+(ha(d,e)|0)+a|a&0,c|0|0)|0}function oe(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return qe(a,b,c,d,0)|0}function pe(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;f=r;r=r+16|0;e=f|0;qe(a,b,c,d,e)|0;r=f;return (L=k[e+4>>2]|0,k[e>>2]|0)|0}function qe(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0;l=a;i=b;j=i;g=c;n=d;h=n;if(!j){f=(e|0)!=0;if(!h){if(f){k[e>>2]=(l>>>0)%(g>>>0);k[e+4>>2]=0}n=0;e=(l>>>0)/(g>>>0)>>>0;return (L=n,e)|0}else{if(!f){n=0;e=0;return (L=n,e)|0}k[e>>2]=a|0;k[e+4>>2]=b&0;n=0;e=0;return (L=n,e)|0}}f=(h|0)==0;do if(g){if(!f){f=(ja(h|0)|0)-(ja(j|0)|0)|0;if(f>>>0<=31){m=f+1|0;h=31-f|0;b=f-31>>31;g=m;a=l>>>(m>>>0)&b|j<<h;b=j>>>(m>>>0)&b;f=0;h=l<<h;break}if(!e){n=0;e=0;return (L=n,e)|0}k[e>>2]=a|0;k[e+4>>2]=i|b&0;n=0;e=0;return (L=n,e)|0}f=g-1|0;if(f&g){h=(ja(g|0)|0)+33-(ja(j|0)|0)|0;p=64-h|0;m=32-h|0;i=m>>31;o=h-32|0;b=o>>31;g=h;a=m-1>>31&j>>>(o>>>0)|(j<<m|l>>>(h>>>0))&b;b=b&j>>>(h>>>0);f=l<<p&i;h=(j<<p|l>>>(o>>>0))&i|l<<m&h-33>>31;break}if(e){k[e>>2]=f&l;k[e+4>>2]=0}if((g|0)==1){o=i|b&0;p=a|0|0;return (L=o,p)|0}else{p=je(g|0)|0;o=j>>>(p>>>0)|0;p=j<<32-p|l>>>(p>>>0)|0;return (L=o,p)|0}}else{if(f){if(e){k[e>>2]=(j>>>0)%(g>>>0);k[e+4>>2]=0}o=0;p=(j>>>0)/(g>>>0)>>>0;return (L=o,p)|0}if(!l){if(e){k[e>>2]=0;k[e+4>>2]=(j>>>0)%(h>>>0)}o=0;p=(j>>>0)/(h>>>0)>>>0;return (L=o,p)|0}f=h-1|0;if(!(f&h)){if(e){k[e>>2]=a|0;k[e+4>>2]=f&j|b&0}o=0;p=j>>>((je(h|0)|0)>>>0);return (L=o,p)|0}f=(ja(h|0)|0)-(ja(j|0)|0)|0;if(f>>>0<=30){b=f+1|0;h=31-f|0;g=b;a=j<<h|l>>>(b>>>0);b=j>>>(b>>>0);f=0;h=l<<h;break}if(!e){o=0;p=0;return (L=o,p)|0}k[e>>2]=a|0;k[e+4>>2]=i|b&0;o=0;p=0;return (L=o,p)|0}while(0);if(!g){j=h;i=0;h=0}else{m=c|0|0;l=n|d&0;j=ge(m|0,l|0,-1,-1)|0;c=L;i=h;h=0;do{d=i;i=f>>>31|i<<1;f=h|f<<1;d=a<<1|d>>>31|0;n=a>>>31|b<<1|0;be(j,c,d,n)|0;p=L;o=p>>31|((p|0)<0?-1:0)<<1;h=o&1;a=be(d,n,o&m,(((p|0)<0?-1:0)>>31|((p|0)<0?-1:0)<<1)&l)|0;b=L;g=g-1|0}while((g|0)!=0);j=i;i=0}g=0;if(e){k[e>>2]=a;k[e+4>>2]=b}o=(f|0)>>>31|(j|g)<<1|(g<<1|f>>>31)&0|i;p=(f<<1|0>>>31)&-2|h;return (L=o,p)|0}function re(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return Ta[a&7](b|0,c|0,d|0)|0}function se(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;Ua[a&3](b|0,c|0,d|0,e|0,f|0)}function te(a,b){a=a|0;b=b|0;Va[a&15](b|0)}function ue(a,b){a=a|0;b=b|0;return Wa[a&3](b|0)|0}function ve(a){a=a|0;Xa[a&0]()}function we(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;Ya[a&3](b|0,c|0,d|0,e|0,f|0,g|0)}function xe(a,b,c){a=a|0;b=b|0;c=c|0;return Za[a&7](b|0,c|0)|0}function ye(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;_a[a&3](b|0,c|0,d|0,e|0)}function ze(a,b,c){a=a|0;b=b|0;c=c|0;ka(0);return 0}function Ae(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ka(1)}function Be(a){a=a|0;ka(2)}function Ce(a){a=a|0;ka(3);return 0}function De(){ka(4)}function Ee(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ka(5)}function Fe(a,b){a=a|0;b=b|0;ka(6);return 0}function Ge(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ka(7)}\\nfunction Qb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0;T=b;a:while(1){u=T;v=T+-20|0;w=T+-40|0;Q=T+-16|0;P=T+-12|0;R=T+-4|0;S=T+-8|0;X=a;b:while(1){s=X;a=u-s|0;switch((a|0)/20|0|0){case 2:{t=4;break a}case 3:{t=23;break a}case 4:{t=24;break a}case 5:{t=25;break a}case 1:case 0:{t=262;break a}default:{}}if((a|0)<140){t=27;break a}h=(a|0)/40|0;j=X+(h*20|0)|0;if((a|0)>19980){a=(a|0)/80|0;a=bc(X,X+(a*20|0)|0,j,X+((a+h|0)*20|0)|0,v)|0}else a=$b(X,j,v)|0;q=k[X>>2]|0;b=k[j>>2]|0;c:do if((q|0)<(b|0))e=v;else{e=(q|0)==(b|0);if(e?(k[X+4>>2]|0)<(k[X+(h*20|0)+4>>2]|0):0){e=v;break}do if((b|0)>=(q|0)){if(e?(x=k[X+(h*20|0)+4>>2]|0,y=k[X+4>>2]|0,(x|0)<(y|0)):0){e=x;f=y;t=82}else{g=k[X+8>>2]|0;f=k[X+(h*20|0)+8>>2]|0;if((g|0)<(f|0)){e=v;break c}if((g|0)==(f|0)?(k[X+12>>2]|0)<(k[X+(h*20|0)+12>>2]|0):0){e=v;break c}if(e){e=k[X+(h*20|0)+4>>2]|0;f=k[X+4>>2]|0;t=82}else{e=g;t=85}}if((t|0)==82){t=0;if((e|0)<(f|0))break;if((f|0)>=(e|0)){f=k[X+(h*20|0)+8>>2]|0;e=k[X+8>>2]|0;t=85}}if((t|0)==85){if((f|0)<(e|0))break;if((f|0)==(e|0)?(k[X+(h*20|0)+12>>2]|0)<(k[X+12>>2]|0):0)break}if((k[X+16>>2]|0)<(k[X+(h*20|0)+16>>2]|0)){e=v;break c}}while(0);d:do if((X|0)!=(w|0)){o=X+(h*20|0)+4|0;n=X+(h*20|0)+8|0;p=X+(h*20|0)+16|0;l=X+(h*20|0)+12|0;e=w;m=v;e:while(1){i=k[e>>2]|0;if((i|0)<(b|0)){b=i;break}f=(i|0)==(b|0);if(f?(k[m+-16>>2]|0)<(k[o>>2]|0):0)break;do if((b|0)>=(i|0)){if(f?(H=k[o>>2]|0,I=k[m+-16>>2]|0,(H|0)<(I|0)):0){f=H;g=I;t=184}else{h=k[m+-12>>2]|0;g=k[n>>2]|0;if((h|0)<(g|0)){b=i;break e}if((h|0)==(g|0)?(k[m+-8>>2]|0)<(k[l>>2]|0):0){b=i;break e}if(f){f=k[o>>2]|0;g=k[m+-16>>2]|0;t=184}else{f=h;t=187}}if((t|0)==184){t=0;if((f|0)<(g|0))break;if((g|0)>=(f|0)){g=k[n>>2]|0;f=k[m+-12>>2]|0;t=187}}if((t|0)==187){if((g|0)<(f|0))break;if((g|0)==(f|0)?(k[l>>2]|0)<(k[m+-8>>2]|0):0)break}if((k[m+-4>>2]|0)<(k[p>>2]|0)){b=i;break e}}while(0);f=e+-20|0;if((X|0)==(f|0))break d;else{m=e;e=f}}t=X+4|0;o=k[t>>2]|0;k[X>>2]=b;p=m+-16|0;k[t>>2]=k[p>>2];k[e>>2]=q;k[p>>2]=o;q=X+8|0;p=k[q>>2]|0;o=X+12|0;t=k[o>>2]|0;r=m+-12|0;k[q>>2]=k[r>>2];q=m+-8|0;k[o>>2]=k[q>>2];k[r>>2]=p;k[q>>2]=t;q=X+16|0;t=m+-4|0;r=k[q>>2]|0;k[q>>2]=k[t>>2];k[t>>2]=r;a=a+1|0;break c}while(0);a=X+20|0;o=k[v>>2]|0;f:do if((q|0)>=(o|0)){b=(q|0)==(o|0);if(b?(k[X+4>>2]|0)<(k[Q>>2]|0):0)break;do if((o|0)>=(q|0)){if(b?(z=k[Q>>2]|0,A=k[X+4>>2]|0,(z|0)<(A|0)):0){b=z;e=A;t=102}else{f=k[X+8>>2]|0;e=k[P>>2]|0;if((f|0)<(e|0))break f;if((f|0)==(e|0)?(k[X+12>>2]|0)<(k[S>>2]|0):0)break f;if(b){b=k[Q>>2]|0;e=k[X+4>>2]|0;t=102}else{b=f;t=105}}if((t|0)==102){t=0;if((b|0)<(e|0))break;if((e|0)>=(b|0)){e=k[P>>2]|0;b=k[X+8>>2]|0;t=105}}if((t|0)==105){if((e|0)<(b|0))break;if((e|0)==(b|0)?(k[S>>2]|0)<(k[X+12>>2]|0):0)break}if((k[X+16>>2]|0)<(k[R>>2]|0))break f}while(0);if((a|0)==(v|0)){t=262;break a}j=X+4|0;i=X+8|0;l=X+16|0;m=X+12|0;n=X;h=a;g:while(1){g=n+20|0;a=k[g>>2]|0;if((q|0)<(a|0))break;f=(q|0)==(a|0);if(f?(k[j>>2]|0)<(k[n+24>>2]|0):0){a=q;break}h:do if((a|0)>=(q|0)){if(f?(B=k[n+24>>2]|0,C=k[j>>2]|0,(B|0)<(C|0)):0){b=B;e=C;t=122}else t=117;do if((t|0)==117){e=k[i>>2]|0;b=k[n+28>>2]|0;if((e|0)<(b|0))break g;if((e|0)==(b|0)?(k[m>>2]|0)<(k[n+32>>2]|0):0)break g;if(!f){t=125;break}b=k[n+24>>2]|0;e=k[j>>2]|0;t=122}while(0);do if((t|0)==122){t=0;if((b|0)<(e|0))break h;if((e|0)<(b|0))break;b=k[n+28>>2]|0;e=k[i>>2]|0;t=125}while(0);do if((t|0)==125){if((b|0)<(e|0))break h;if((b|0)!=(e|0))break;if((k[n+32>>2]|0)<(k[m>>2]|0))break h}while(0);if((k[l>>2]|0)<(k[n+36>>2]|0))break g}while(0);a=h+20|0;if((a|0)==(v|0)){t=262;break a}else{n=h;h=a}}s=n+24|0;r=k[s>>2]|0;k[g>>2]=o;k[s>>2]=k[Q>>2];k[v>>2]=a;k[Q>>2]=r;r=n+28|0;a=k[r>>2]|0;s=n+32|0;t=k[s>>2]|0;k[r>>2]=k[P>>2];k[s>>2]=k[S>>2];k[P>>2]=a;k[S>>2]=t;t=n+36|0;a=k[t>>2]|0;k[t>>2]=k[R>>2];k[R>>2]=a;a=n+40|0}while(0);if((a|0)==(v|0)){t=262;break a}o=X+4|0;p=X+12|0;n=X+8|0;q=X+16|0;h=v;while(1){m=k[X>>2]|0;b=k[a>>2]|0;i:do if((m|0)<(b|0)){l=a;j=a}else while(1){g=(m|0)==(b|0);if(g?(k[o>>2]|0)<(k[a+4>>2]|0):0){l=a;b=m;j=a;break i}j:do if((b|0)>=(m|0)){if(g?(D=k[a+4>>2]|0,E=k[o>>2]|0,(D|0)<(E|0)):0){e=D;f=E;t=145}else t=140;do if((t|0)==140){f=k[n>>2]|0;e=k[a+8>>2]|0;if((f|0)<(e|0)){l=a;j=a;break i}if((f|0)==(e|0)?(k[p>>2]|0)<(k[a+12>>2]|0):0){l=a;j=a;break i}if(!g){t=148;break}e=k[a+4>>2]|0;f=k[o>>2]|0;t=145}while(0);do if((t|0)==145){t=0;if((e|0)<(f|0))break j;if((f|0)<(e|0))break;e=k[a+8>>2]|0;f=k[n>>2]|0;t=148}while(0);do if((t|0)==148){if((e|0)<(f|0))break j;if((e|0)!=(f|0))break;if((k[a+12>>2]|0)<(k[p>>2]|0))break j}while(0);if((k[q>>2]|0)<(k[a+16>>2]|0)){l=a;j=a;break i}}while(0);a=a+20|0;b=k[a>>2]|0;if((m|0)<(b|0)){l=a;j=a;break}}while(0);k:while(1){i=h+-20|0;g=k[i>>2]|0;if((m|0)<(g|0)){h=i;continue}f=(m|0)==(g|0);if(f?(k[o>>2]|0)<(k[h+-16>>2]|0):0){h=i;continue}if((g|0)<(m|0))break;if(f?(F=k[h+-16>>2]|0,G=k[o>>2]|0,(F|0)<(G|0)):0){a=F;e=G;t=164}else t=159;do if((t|0)==159){e=k[n>>2]|0;a=k[h+-12>>2]|0;if((e|0)<(a|0)){h=i;continue k}if((e|0)==(a|0)?(k[p>>2]|0)<(k[h+-8>>2]|0):0){h=i;continue k}if(!f){t=167;break}a=k[h+-16>>2]|0;e=k[o>>2]|0;t=164}while(0);do if((t|0)==164){t=0;if((a|0)<(e|0))break k;if((e|0)<(a|0))break;a=k[h+-12>>2]|0;e=k[n>>2]|0;t=167}while(0);do if((t|0)==167){if((a|0)<(e|0))break k;if((a|0)!=(e|0))break;if((k[h+-8>>2]|0)<(k[p>>2]|0))break k}while(0);if((k[q>>2]|0)<(k[h+-4>>2]|0))h=i;else break}if(j>>>0>=i>>>0){X=j;continue b}m=j+4|0;r=k[m>>2]|0;k[l>>2]=g;t=h+-16|0;k[m>>2]=k[t>>2];k[i>>2]=b;k[t>>2]=r;t=j+8|0;r=k[t>>2]|0;m=j+12|0;a=k[m>>2]|0;s=h+-12|0;k[t>>2]=k[s>>2];t=h+-8|0;k[m>>2]=k[t>>2];k[s>>2]=r;k[t>>2]=a;t=j+16|0;a=h+-4|0;h=k[t>>2]|0;k[t>>2]=k[a>>2];k[a>>2]=h;a=j+20|0;h=i}}while(0);b=X+20|0;l:do if(b>>>0<e>>>0)while(1){m=j+12|0;p=k[j>>2]|0;n=j+4|0;l=j+8|0;o=j+16|0;r=b;m:while(1){q=k[r>>2]|0;do if((q|0)>=(p|0)){b=(q|0)==(p|0);if(b?(k[r+4>>2]|0)<(k[n>>2]|0):0)break;if((p|0)<(q|0))break m;if(b?(J=k[n>>2]|0,K=k[r+4>>2]|0,(J|0)<(K|0)):0){b=J;f=K;t=207}else{g=k[r+8>>2]|0;f=k[l>>2]|0;if((g|0)<(f|0))break;if((g|0)==(f|0)?(k[r+12>>2]|0)<(k[m>>2]|0):0)break;if(b){b=k[n>>2]|0;f=k[r+4>>2]|0;t=207}else{b=g;t=210}}if((t|0)==207){t=0;if((b|0)<(f|0))break m;if((f|0)>=(b|0)){f=k[l>>2]|0;b=k[r+8>>2]|0;t=210}}if((t|0)==210){if((f|0)<(b|0))break m;if((f|0)==(b|0)?(k[m>>2]|0)<(k[r+12>>2]|0):0)break m}if((k[r+16>>2]|0)>=(k[o>>2]|0))break m}while(0);r=r+20|0}f=e+-20|0;b=k[f>>2]|0;n:do if((b|0)<(p|0)){h=f;g=f}else while(1){g=(b|0)==(p|0);if(g?(k[e+-16>>2]|0)<(k[n>>2]|0):0){h=f;g=f;b=p;break n}do if((p|0)>=(b|0)){if(g?(L=k[n>>2]|0,M=k[e+-16>>2]|0,(L|0)<(M|0)):0){g=L;h=M;t=225}else{i=k[e+-12>>2]|0;h=k[l>>2]|0;if((i|0)<(h|0)){h=f;g=f;break n}if((i|0)==(h|0)?(k[e+-8>>2]|0)<(k[m>>2]|0):0){h=f;g=f;break n}if(g){g=k[n>>2]|0;h=k[e+-16>>2]|0;t=225}else{g=i;t=228}}if((t|0)==225){t=0;if((g|0)<(h|0))break;if((h|0)>=(g|0)){h=k[l>>2]|0;g=k[e+-12>>2]|0;t=228}}if((t|0)==228){if((h|0)<(g|0))break;if((h|0)==(g|0)?(k[m>>2]|0)<(k[e+-8>>2]|0):0)break}if((k[e+-4>>2]|0)<(k[o>>2]|0)){h=f;g=f;break n}}while(0);e=f+-20|0;b=k[e>>2]|0;if((b|0)<(p|0)){h=e;g=e;e=f;break}else{t=f;f=e;e=t}}while(0);if(r>>>0>h>>>0){b=r;break l}o=r+4|0;p=k[o>>2]|0;k[r>>2]=b;t=e+-16|0;k[o>>2]=k[t>>2];k[g>>2]=q;k[t>>2]=p;t=r+8|0;p=k[t>>2]|0;o=r+12|0;b=k[o>>2]|0;q=e+-12|0;k[t>>2]=k[q>>2];t=e+-8|0;k[o>>2]=k[t>>2];k[q>>2]=p;k[t>>2]=b;t=r+16|0;b=e+-4|0;e=k[t>>2]|0;k[t>>2]=k[b>>2];k[b>>2]=e;b=r+20|0;e=h;j=(j|0)==(r|0)?h:j;a=a+1|0}while(0);o:do if((b|0)!=(j|0)){h=k[j>>2]|0;i=k[b>>2]|0;do if((h|0)>=(i|0)){e=(h|0)==(i|0);if(e?(k[j+4>>2]|0)<(k[b+4>>2]|0):0)break;if((i|0)<(h|0))break o;if(e?(N=k[b+4>>2]|0,O=k[j+4>>2]|0,(N|0)<(O|0)):0){e=N;f=O;t=247}else{g=k[j+8>>2]|0;f=k[b+8>>2]|0;if((g|0)<(f|0))break;if((g|0)==(f|0)?(k[j+12>>2]|0)<(k[b+12>>2]|0):0)break;if(e){e=k[b+4>>2]|0;f=k[j+4>>2]|0;t=247}else{e=g;t=250}}if((t|0)==247){t=0;if((e|0)<(f|0))break o;if((f|0)>=(e|0)){f=k[b+8>>2]|0;e=k[j+8>>2]|0;t=250}}if((t|0)==250){if((f|0)<(e|0))break o;if((f|0)==(e|0)?(k[b+12>>2]|0)<(k[j+12>>2]|0):0)break o}if((k[j+16>>2]|0)>=(k[b+16>>2]|0))break o}while(0);o=b+4|0;p=k[o>>2]|0;k[b>>2]=h;q=j+4|0;k[o>>2]=k[q>>2];k[j>>2]=i;k[q>>2]=p;q=b+8|0;p=k[q>>2]|0;o=b+12|0;t=k[o>>2]|0;r=j+8|0;k[q>>2]=k[r>>2];q=j+12|0;k[o>>2]=k[q>>2];k[r>>2]=p;k[q>>2]=t;q=b+16|0;t=j+16|0;r=k[q>>2]|0;k[q>>2]=k[t>>2];k[t>>2]=r;a=a+1|0}while(0);if(!a){e=cc(X,b)|0;a=b+20|0;if(cc(a,T)|0){t=257;break}if(e){X=a;continue}}t=b;if((t-s|0)>=(u-t|0)){t=261;break}Qb(X,b);X=b+20|0}if((t|0)==257)if(e){t=262;break}else{a=X;T=b;continue}else if((t|0)==261){Qb(b+20|0,T);a=X;T=b;continue}}if((t|0)==4){f=T+-20|0;b=k[f>>2]|0;e=k[X>>2]|0;do if((b|0)>=(e|0)){a=(b|0)==(e|0);if(a?(k[Q>>2]|0)<(k[X+4>>2]|0):0)break;if((e|0)<(b|0))return;if(a?(d=k[X+4>>2]|0,c=k[Q>>2]|0,(d|0)<(c|0)):0)t=15;else{d=k[P>>2]|0;c=k[X+8>>2]|0;if((d|0)<(c|0))break;if((d|0)==(c|0)?(k[S>>2]|0)<(k[X+12>>2]|0):0)break;if(a){d=k[X+4>>2]|0;c=k[Q>>2]|0;t=15}else t=18}if((t|0)==15){if((d|0)<(c|0))return;if((c|0)>=(d|0)){c=k[X+8>>2]|0;d=k[P>>2]|0;t=18}}if((t|0)==18){if((c|0)<(d|0))return;if((c|0)==(d|0)?(k[X+12>>2]|0)<(k[S>>2]|0):0)return}if((k[R>>2]|0)>=(k[X+16>>2]|0))return}while(0);V=X+4|0;T=k[V>>2]|0;k[X>>2]=b;k[V>>2]=k[Q>>2];k[f>>2]=e;k[Q>>2]=T;T=X+8|0;V=k[T>>2]|0;U=X+12|0;W=k[U>>2]|0;k[T>>2]=k[P>>2];k[U>>2]=k[S>>2];k[P>>2]=V;k[S>>2]=W;W=X+16|0;X=k[W>>2]|0;k[W>>2]=k[R>>2];k[R>>2]=X;return}else if((t|0)==23){$b(X,X+20|0,v)|0;return}else if((t|0)==24){ac(X,X+20|0,X+40|0,v)|0;return}else if((t|0)==25){bc(X,X+20|0,X+40|0,X+60|0,v)|0;return}else if((t|0)==27){d=X+40|0;$b(X,X+20|0,d)|0;c=X+60|0;if((c|0)==(T|0))return;else p=c;while(1){o=k[p>>2]|0;e=k[d>>2]|0;do if((o|0)>=(e|0)){b=(o|0)==(e|0);if(b?(k[p+4>>2]|0)<(k[d+4>>2]|0):0){t=46;break}if((e|0)>=(o|0)){if(b?(V=k[d+4>>2]|0,W=k[p+4>>2]|0,(V|0)<(W|0)):0){c=V;a=W;t=39}else{c=k[p+8>>2]|0;a=k[d+8>>2]|0;if((c|0)<(a|0)){t=46;break}if((c|0)==(a|0)?(k[p+12>>2]|0)<(k[d+12>>2]|0):0){t=46;break}if(b){c=k[d+4>>2]|0;a=k[p+4>>2]|0;t=39}else t=42}if((t|0)==39){t=0;if((c|0)<(a|0))break;if((a|0)>=(c|0)){a=k[d+8>>2]|0;c=k[p+8>>2]|0;t=42}}if((t|0)==42){t=0;if((a|0)<(c|0))break;if((a|0)==(c|0)?(k[d+12>>2]|0)<(k[p+12>>2]|0):0)break}if((k[p+16>>2]|0)<(k[d+16>>2]|0))t=46}}else t=46;while(0);if((t|0)==46){t=0;R=p+4|0;j=k[R>>2]|0;a=p+8|0;l=k[a>>2]|0;c=p+12|0;m=k[c>>2]|0;S=p+16|0;n=k[S>>2]|0;k[p>>2]=e;b=d+4|0;k[R>>2]=k[b>>2];e=d+8|0;k[a>>2]=k[e>>2];a=d+12|0;k[c>>2]=k[a>>2];c=d+16|0;k[S>>2]=k[c>>2];p:do if((d|0)!=(X|0)){i=d;h=e;g=b;while(1){d=i+-20|0;f=k[d>>2]|0;do if((o|0)>=(f|0)){e=(o|0)==(f|0);if(e?(j|0)<(k[i+-16>>2]|0):0)break;if((f|0)<(o|0)){d=i;b=g;e=h;break p}if(e?(U=k[i+-16>>2]|0,(U|0)<(j|0)):0){b=U;t=58}else{b=k[i+-12>>2]|0;if((l|0)<(b|0))break;if((l|0)==(b|0)?(m|0)<(k[i+-8>>2]|0):0)break;if(e){b=k[i+-16>>2]|0;t=58}else t=61}if((t|0)==58){t=0;if((b|0)<(j|0)){d=i;b=g;e=h;break p}if((j|0)>=(b|0)){b=k[i+-12>>2]|0;t=61}}if((t|0)==61){t=0;if((b|0)<(l|0)){d=i;b=g;e=h;break p}if((b|0)==(l|0)?(k[i+-8>>2]|0)<(m|0):0){d=i;b=g;e=h;break p}}if((n|0)>=(k[i+-4>>2]|0)){d=i;b=g;e=h;break p}}while(0);k[i>>2]=f;b=i+-16|0;k[i+4>>2]=k[b>>2];e=i+-12|0;k[i+8>>2]=k[e>>2];a=i+-8|0;k[i+12>>2]=k[a>>2];c=i+-4|0;k[i+16>>2]=k[c>>2];if((d|0)==(X|0))break;else{i=d;h=e;g=b}}}while(0);k[d>>2]=o;k[b>>2]=j;k[e>>2]=l;k[a>>2]=m;k[c>>2]=n}c=p+20|0;if((c|0)==(T|0))break;else{d=p;p=c}}return}else if((t|0)==262)return}function Rb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0;m=a+4|0;e=k[m>>2]|0;n=k[a>>2]|0;j=n;l=e-j>>3;i=l+1|0;if(i>>>0>536870911)xa(1340,1363,303,1438);o=a+8|0;c=(k[o>>2]|0)-j|0;if(c>>3>>>0<268435455){c=c>>2;c=c>>>0<i>>>0?i:c;if(!c){f=0;d=0}else g=5}else{c=536870911;g=5}if((g|0)==5){f=c<<3;f=(f|0)==0?1:f;d=_d(f)|0;a:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(f)|0;if(d)break a}a=ya(4)|0;k[a>>2]=128;La(a|0,8,1)}while(0);f=c}c=d+(l<<3)|0;h=d+(f<<3)|0;k[c>>2]=k[b>>2];k[d+(l<<3)+4>>2]=k[b+4>>2];g=d+(i<<3)|0;if((e|0)!=(n|0)){f=e+-8|0;while(1){b=e;e=e+-8|0;k[c+-8>>2]=k[e>>2];k[c+-4>>2]=k[b+-4>>2];if((e|0)==(n|0))break;else c=c+-8|0}c=d+(l+~((f-j|0)>>>3)<<3)|0}k[a>>2]=c;k[m>>2]=g;k[o>>2]=h;if(!n)return;$d(n);return}function Sb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;A=k[a>>2]|0;D=k[a+8>>2]|0;E=k[a+4>>2]|0;F=k[a+12>>2]|0;i=(A|0)>(D|0);e=i?D:A;i=i?A:D;g=(E|0)>(F|0);c=g?F:E;g=g?E:F;z=k[b>>2]|0;B=k[b+8>>2]|0;y=k[b+4>>2]|0;C=k[b+12>>2]|0;j=(z|0)>(B|0);f=j?B:z;j=j?z:B;h=(y|0)>(C|0);d=h?C:y;h=h?y:C;l=(i|0)>(f|0)&(e|0)<(j|0);if(l?(c|0)<(h|0)&(g|0)>(d|0):0){h=(A|0)==(z|0);if(h&(E|0)==(y|0)){if((!((D|0)==(B|0)&(F|0)==(C|0))?(p=((E|0)<0)<<31>>31,a=be(C|0,((C|0)<0)<<31>>31|0,E|0,p|0)|0,C=L,p=be(F|0,((F|0)<0)<<31>>31|0,E|0,p|0)|0,o=L,E=((A|0)<0)<<31>>31,r=be(B|0,((B|0)<0)<<31>>31|0,A|0,E|0)|0,B=L,D=be(D|0,((D|0)<0)<<31>>31|0,A|0,E|0)|0,E=L,m=(B|0)<0,F=be(0,0,r|0,B|0)|0,B=m?L:B,n=(o|0)<0,q=be(0,0,p|0,o|0)|0,o=ne((m?F:r)|0,B|0,(n?q:p)|0,(n?L:o)|0)|0,p=L,q=(E|0)<0,B=be(0,0,D|0,E|0)|0,E=q?L:E,r=(C|0)<0,F=be(0,0,a|0,C|0)|0,F=ne((q?B:D)|0,E|0,(r?F:a)|0,(r?L:C)|0)|0,(o|0)==(F|0)&(p|0)==(L|0)):0)?(F=ha(q?-1:1,r?-1:1)|0,(o|0)==0&(p|0)==0|(ha(m?-1:1,n?-1:1)|0)==(F|0)):0){F=1;return F|0}F=0;return F|0}g=(A|0)==(B|0);f=(D|0)==(z|0);c=f&(F|0)==(y|0);if(g&(E|0)==(C|0)){if((!c?(v=((E|0)<0)<<31>>31,B=be(y|0,((y|0)<0)<<31>>31|0,E|0,v|0)|0,C=L,v=be(F|0,((F|0)<0)<<31>>31|0,E|0,v|0)|0,u=L,E=((A|0)<0)<<31>>31,x=be(z|0,((z|0)<0)<<31>>31|0,A|0,E|0)|0,t=L,D=be(D|0,((D|0)<0)<<31>>31|0,A|0,E|0)|0,E=L,s=(t|0)<0,F=be(0,0,x|0,t|0)|0,A=s?L:t,t=(u|0)<0,w=be(0,0,v|0,u|0)|0,u=ne((s?F:x)|0,A|0,(t?w:v)|0,(t?L:u)|0)|0,v=L,w=(E|0)<0,A=be(0,0,D|0,E|0)|0,E=w?L:E,x=(C|0)<0,F=be(0,0,B|0,C|0)|0,F=ne((w?A:D)|0,E|0,(x?F:B)|0,(x?L:C)|0)|0,(u|0)==(F|0)&(v|0)==(L|0)):0)?(F=ha(w?-1:1,x?-1:1)|0,(u|0)==0&(v|0)==0|(ha(s?-1:1,t?-1:1)|0)==(F|0)):0){F=1;return F|0}F=0;return F|0}if(c){f=((F|0)<0)<<31>>31;a=be(C|0,((C|0)<0)<<31>>31|0,F|0,f|0)|0;C=L;f=be(E|0,((E|0)<0)<<31>>31|0,F|0,f|0)|0;e=L;E=((D|0)<0)<<31>>31;h=be(B|0,((B|0)<0)<<31>>31|0,D|0,E|0)|0;B=L;D=be(A|0,((A|0)<0)<<31>>31|0,D|0,E|0)|0;E=L;c=(B|0)<0;F=be(0,0,h|0,B|0)|0;B=c?L:B;d=(e|0)<0;g=be(0,0,f|0,e|0)|0;e=ne((c?F:h)|0,B|0,(d?g:f)|0,(d?L:e)|0)|0;f=L;g=(E|0)<0;B=be(0,0,D|0,E|0)|0;E=g?L:E;h=(C|0)<0;F=be(0,0,a|0,C|0)|0;F=ne((g?B:D)|0,E|0,(h?F:a)|0,(h?L:C)|0)|0;if((e|0)==(F|0)&(f|0)==(L|0)?(F=ha(g?-1:1,h?-1:1)|0,(e|0)==0&(f|0)==0|(ha(c?-1:1,d?-1:1)|0)==(F|0)):0){F=1;return F|0}F=0;return F|0}e=(D|0)==(B|0);if(e&(F|0)==(C|0)){f=((F|0)<0)<<31>>31;B=be(y|0,((y|0)<0)<<31>>31|0,F|0,f|0)|0;C=L;f=be(E|0,((E|0)<0)<<31>>31|0,F|0,f|0)|0;e=L;E=((D|0)<0)<<31>>31;h=be(z|0,((z|0)<0)<<31>>31|0,D|0,E|0)|0;d=L;D=be(A|0,((A|0)<0)<<31>>31|0,D|0,E|0)|0;E=L;c=(d|0)<0;F=be(0,0,h|0,d|0)|0;A=c?L:d;d=(e|0)<0;g=be(0,0,f|0,e|0)|0;e=ne((c?F:h)|0,A|0,(d?g:f)|0,(d?L:e)|0)|0;f=L;g=(E|0)<0;A=be(0,0,D|0,E|0)|0;E=g?L:E;h=(C|0)<0;F=be(0,0,B|0,C|0)|0;F=ne((g?A:D)|0,E|0,(h?F:B)|0,(h?L:C)|0)|0;if((e|0)==(F|0)&(f|0)==(L|0)?(F=ha(g?-1:1,h?-1:1)|0,(e|0)==0&(f|0)==0|(ha(c?-1:1,d?-1:1)|0)==(F|0)):0){F=1;return F|0}F=0;return F|0}d=_b(A,E,b)|0;do if(!d){if((z|0)>=(B|0)?!((z|0)==(B|0)&(y|0)<(C|0)):0){if(!((A|0)<(z|0)|h&(E|0)<(y|0)))break;if((B|0)<(A|0)|g&(C|0)<(E|0))c=1;else break;return c|0}if((A|0)<(B|0)|g&(E|0)<(C|0)?(z|0)<(A|0)|h&(y|0)<(E|0):0){F=1;return F|0}}while(0);c=_b(D,F,b)|0;do if(!c){if((z|0)>=(B|0)?!((z|0)==(B|0)&(y|0)<(C|0)):0){if(!((D|0)<(z|0)|f&(F|0)<(y|0)))break;if((B|0)<(D|0)|e&(C|0)<(F|0))c=1;else break;return c|0}if((D|0)<(B|0)|e&(F|0)<(C|0)?(z|0)<(D|0)|f&(y|0)<(F|0):0){F=1;return F|0}}while(0);if((d|0)!=0&(d|0)==(c|0)){F=0;return F|0}d=_b(z,y,a)|0;do if(!d){if((A|0)>=(D|0)?!((A|0)==(D|0)&(E|0)<(F|0)):0){if(!((z|0)<(A|0)|h&(y|0)<(E|0)))break;if((D|0)<(z|0)|f&(F|0)<(y|0))c=1;else break;return c|0}if((z|0)<(D|0)|f&(y|0)<(F|0)?(A|0)<(z|0)|h&(E|0)<(y|0):0){F=1;return F|0}}while(0);c=_b(B,C,a)|0;do if(!c){if((A|0)>=(D|0)?!((A|0)==(D|0)&(E|0)<(F|0)):0){if(!((B|0)<(A|0)|g&(C|0)<(E|0)))break;if((D|0)<(B|0)|e&(F|0)<(C|0))c=1;else break;return c|0}if((B|0)<(D|0)|e&(C|0)<(F|0)?(A|0)<(B|0)|g&(E|0)<(C|0):0){F=1;return F|0}}while(0);F=(d|0)!=(c|0);return F|0}if((A|0)==(D|0)&(z|0)==(B|0)&(A|0)==(z|0))if((g|0)>(d|0)&(c|0)<(h|0))return (g|0)!=(h|0)|(c|0)!=(d|0)|0;else{F=0;return F|0}if(!((E|0)==(F|0)&(y|0)==(C|0)&(E|0)==(y|0)&l)){F=0;return F|0}F=(i|0)!=(j|0)|(e|0)!=(f|0);return F|0}function Tb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;t=r;r=r+32|0;q=t+16|0;s=t;p=k[a>>2]|0;m=k[b+8>>2]|0;n=(p|0)==(m|0);if(n?(k[a+4>>2]|0)==(k[b+12>>2]|0):0){s=1;r=t;return s|0}o=k[b>>2]|0;l=(p|0)==(o|0);if(l){a=k[a+4>>2]|0;c=k[b+4>>2]|0;if((a|0)==(c|0)){s=1;r=t;return s|0}else j=a}else{c=k[b+4>>2]|0;j=k[a+4>>2]|0}a=k[b+12>>2]|0;h=(o|0)>(m|0);i=(c|0)>(a|0);if(!(((i?a:c)|0)<=(j|0)&((((h?m:o)|0)>(p|0)|((h?o:m)|0)<(p|0)|((i?c:a)|0)<(j|0))^1))){s=0;r=t;return s|0}if((o|0)==(m|0)|(c|0)==(a|0)){s=1;r=t;return s|0}g=((j|0)<0)<<31>>31;v=be(a|0,((a|0)<0)<<31>>31|0,j|0,g|0)|0;u=L;g=be(c|0,((c|0)<0)<<31>>31|0,j|0,g|0)|0;f=L;y=((p|0)<0)<<31>>31;i=be(m|0,((m|0)<0)<<31>>31|0,p|0,y|0)|0;z=L;y=be(o|0,((o|0)<0)<<31>>31|0,p|0,y|0)|0;x=L;d=(z|0)<0;w=be(0,0,i|0,z|0)|0;z=d?L:z;e=(f|0)<0;h=be(0,0,g|0,f|0)|0;f=ne((d?w:i)|0,z|0,(e?h:g)|0,(e?L:f)|0)|0;g=L;h=(x|0)<0;z=be(0,0,y|0,x|0)|0;x=h?L:x;i=(u|0)<0;w=be(0,0,v|0,u|0)|0;u=ne((h?z:y)|0,x|0,(i?w:v)|0,(i?L:u)|0)|0;do if((f|0)==(u|0)&(g|0)==(L|0)?(z=ha(h?-1:1,i?-1:1)|0,(f|0)==0&(g|0)==0|(ha(d?-1:1,e?-1:1)|0)==(z|0)):0)if((o|0)<(m|0)){if(!((p|0)<(m|0)|n&(j|0)<(a|0)))break;if((o|0)<(p|0)|l&(c|0)<(j|0))c=1;else break;r=t;return c|0}else{if(!((p|0)<(o|0)|l&(j|0)<(c|0)))break;if((m|0)<(p|0)|n&(a|0)<(j|0))c=1;else break;r=t;return c|0}while(0);c=j+1|0;a=p+1|0;k[q>>2]=p;k[q+4>>2]=j;k[q+8>>2]=a;k[q+12>>2]=c;if(Sb(q,b)|0?(_b(a,c,b)|0)!=0:0){z=1;r=t;return z|0}k[s>>2]=p;k[s+4>>2]=c;k[s+8>>2]=a;k[s+12>>2]=j;if((Sb(s,b)|0?(_b(p,c,b)|0)!=0:0)?(_b(a,j,b)|0)!=0:0){z=1;r=t;return z|0}z=0;r=t;return z|0}function Ub(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,j=0,l=0,m=0;m=r;r=r+16|0;j=m;d=b+4|0;e=k[d>>2]|0;do if(e){g=k[c>>2]|0;h=k[c+4>>2]|0;a:while(1){d=k[e+16>>2]|0;do if((g|0)>=(d|0)){f=(g|0)==(d|0);if(f?(h|0)<(k[e+20>>2]|0):0){l=6;break}if((d|0)>=(g|0)){if(!f){l=14;break a}if((k[e+20>>2]|0)>=(h|0)){l=14;break a}}f=e+4|0;d=k[f>>2]|0;if(!d){l=13;break a}}else l=6;while(0);if((l|0)==6){l=0;d=k[e>>2]|0;if(!d){l=7;break}}e=d}if((l|0)==7){k[j>>2]=e;f=e;g=e;break}else if((l|0)==13){k[j>>2]=e;g=e;break}else if((l|0)==14){k[j>>2]=e;f=j;g=e;break}}else{k[j>>2]=d;f=d;g=d}while(0);d=k[f>>2]|0;if(d){c=0;b=d;k[a>>2]=b;b=a+4|0;i[b>>0]=c;r=m;return}d=_d(24)|0;b:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(24)|0;if(d){e=d;break b}}m=ya(4)|0;k[m>>2]=128;La(m|0,8,1)}else e=d;while(0);k[e+16>>2]=k[c>>2];k[e+20>>2]=k[c+4>>2];k[e>>2]=0;k[e+4>>2]=0;k[e+8>>2]=g;k[f>>2]=e;d=k[k[b>>2]>>2]|0;if(!d)d=e;else{k[b>>2]=d;d=k[f>>2]|0}Nb(k[b+4>>2]|0,d);c=b+8|0;k[c>>2]=(k[c>>2]|0)+1;c=1;b=e;k[a>>2]=b;b=a+4|0;i[b>>0]=c;r=m;return}function Vb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;t=b;a:while(1){m=t;n=t+-8|0;o=t+-16|0;s=t+-4|0;y=a;b:while(1){l=y;a=m-l|0;b=a>>3;switch(b|0){case 2:{x=4;break a}case 3:{x=9;break a}case 4:{x=10;break a}case 5:{x=11;break a}case 1:case 0:{x=88;break a}default:{}}if((a|0)<56){x=13;break a}c=(b|0)/2|0;g=y+(c<<3)|0;if((a|0)>7992){a=(b|0)/4|0;a=Yb(y,y+(a<<3)|0,g,y+(a+c<<3)|0,n)|0}else a=Wb(y,g,n)|0;h=k[y>>2]|0;f=k[g>>2]|0;c:do if((h|0)<(f|0))c=n;else{if((h|0)==(f|0)?(k[y+4>>2]|0)<(k[y+(c<<3)+4>>2]|0):0){c=n;break}d:do if((y|0)!=(o|0)){e=y+(c<<3)+4|0;c=o;d=n;while(1){b=k[c>>2]|0;if((b|0)<(f|0)){x=58;break}if((b|0)==(f|0)?(p=d+-4|0,(k[p>>2]|0)<(k[e>>2]|0)):0){d=p;b=f;break}b=c+-8|0;if((y|0)==(b|0))break d;else{d=c;c=b}}if((x|0)==58){x=0;d=d+-4|0}i=y+4|0;j=k[i>>2]|0;k[y>>2]=b;k[i>>2]=k[d>>2];k[c>>2]=h;k[d>>2]=j;a=a+1|0;break c}while(0);a=y+8|0;f=k[n>>2]|0;do if((h|0)>=(f|0)){if((h|0)==(f|0)?(k[y+4>>2]|0)<(k[s>>2]|0):0)break;if((a|0)==(n|0)){x=88;break a}c=y+4|0;e=y;while(1){d=e+8|0;b=k[d>>2]|0;if((h|0)<(b|0)){x=40;break}if((h|0)==(b|0)?(q=e+12|0,r=k[q>>2]|0,(k[c>>2]|0)<(r|0)):0){c=q;a=h;b=r;break}b=a+8|0;if((b|0)==(n|0)){x=88;break a}else{e=a;a=b}}if((x|0)==40){x=0;l=e+12|0;c=l;a=b;b=k[l>>2]|0}k[d>>2]=f;k[c>>2]=k[s>>2];k[n>>2]=a;k[s>>2]=b;a=e+16|0}while(0);if((a|0)==(n|0)){x=88;break a}h=y+4|0;c=n;while(1){g=k[y>>2]|0;b=k[a>>2]|0;e:do if((g|0)<(b|0)){f=a;e=a}else while(1){if((g|0)==(b|0)?(k[h>>2]|0)<(k[a+4>>2]|0):0){f=a;b=g;e=a;break e}a=a+8|0;b=k[a>>2]|0;if((g|0)<(b|0)){f=a;e=a;break}}while(0);while(1){d=c+-8|0;a=k[d>>2]|0;if((g|0)<(a|0)){c=d;continue}if((g|0)!=(a|0))break;if((k[h>>2]|0)<(k[c+-4>>2]|0))c=d;else{a=g;break}}if(e>>>0>=d>>>0){y=e;continue b}j=e+4|0;l=k[j>>2]|0;k[f>>2]=a;a=c+-4|0;k[j>>2]=k[a>>2];k[d>>2]=b;k[a>>2]=l;a=e+8|0;c=d}}while(0);b=y+8|0;f:do if(b>>>0<c>>>0)while(1){i=k[g>>2]|0;f=g+4|0;j=b;while(1){b=k[j>>2]|0;if((b|0)>=(i|0)){if((b|0)!=(i|0))break;if((k[j+4>>2]|0)>=(k[f>>2]|0)){b=i;break}}j=j+8|0}d=c+-8|0;e=k[d>>2]|0;g:do if((e|0)<(i|0)){h=d;f=d}else while(1){if((e|0)==(i|0)?(k[c+-4>>2]|0)<(k[f>>2]|0):0){h=d;f=d;e=i;break g}c=d+-8|0;e=k[c>>2]|0;if((e|0)<(i|0)){h=c;f=c;c=d;break}else{h=d;d=c;c=h}}while(0);if(j>>>0>h>>>0){h=j;break f}d=j+4|0;i=k[d>>2]|0;k[j>>2]=e;c=c+-4|0;k[d>>2]=k[c>>2];k[f>>2]=b;k[c>>2]=i;b=j+8|0;c=h;g=(g|0)==(j|0)?h:g;a=a+1|0}else h=b;while(0);do if((h|0)!=(g|0)){e=k[g>>2]|0;f=k[h>>2]|0;if((e|0)>=(f|0)){if((e|0)!=(f|0))break;b=g+4|0;d=h+4|0;c=k[d>>2]|0;if((k[b>>2]|0)>=(c|0))break}else{c=h+4|0;b=g+4|0;d=c;c=k[c>>2]|0}k[h>>2]=e;k[d>>2]=k[b>>2];k[g>>2]=f;k[b>>2]=c;a=a+1|0}while(0);if(!a){a=Zb(y,h)|0;b=h+8|0;if(Zb(b,t)|0){x=83;break}if(a){y=b;continue}}j=h;if((j-l|0)>=(m-j|0)){x=87;break}Vb(y,h);y=h+8|0}if((x|0)==83){x=0;if(a){x=88;break}else{a=y;t=h;continue}}else if((x|0)==87){x=0;Vb(h+8|0,t);a=y;t=h;continue}}if((x|0)==4){c=t+-8|0;d=k[c>>2]|0;e=k[y>>2]|0;if((d|0)>=(e|0)){if((d|0)!=(e|0))return;a=y+4|0;b=k[a>>2]|0;if((k[s>>2]|0)>=(b|0))return}else{b=y+4|0;a=b;b=k[b>>2]|0}k[y>>2]=d;k[a>>2]=k[s>>2];k[c>>2]=e;k[s>>2]=b;return}else if((x|0)==9){Wb(y,y+8|0,n)|0;return}else if((x|0)==10){Xb(y,y+8|0,y+16|0,n)|0;return}else if((x|0)==11){Yb(y,y+8|0,y+16|0,y+24|0,n)|0;return}else if((x|0)==13){b=y+16|0;Wb(y,y+8|0,b)|0;a=y+24|0;if((a|0)==(t|0))return;while(1){h=k[a>>2]|0;e=k[b>>2]|0;if((h|0)>=(e|0)){if((h|0)==(e|0)?(u=a+4|0,v=k[u>>2]|0,w=b+4|0,(v|0)<(k[w>>2]|0)):0){d=u;c=w;i=v;x=18}}else{i=a+4|0;d=i;c=b+4|0;i=k[i>>2]|0;x=18}if((x|0)==18){x=0;k[a>>2]=e;k[d>>2]=k[c>>2];h:do if((b|0)!=(y|0)){f=b;while(1){b=f+-8|0;g=k[b>>2]|0;if((h|0)>=(g|0)){if((h|0)!=(g|0)){b=f;break h}e=f+-4|0;d=k[e>>2]|0;if((i|0)<(d|0))c=e;else{b=f;break h}}else{d=f+-4|0;c=d;d=k[d>>2]|0}k[f>>2]=g;k[f+4>>2]=d;if((b|0)==(y|0))break;else f=b}}while(0);k[b>>2]=h;k[c>>2]=i}b=a+8|0;if((b|0)==(t|0))break;else{s=a;a=b;b=s}}return}else if((x|0)==88)return}function Wb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0;f=k[b>>2]|0;i=k[a>>2]|0;if((f|0)>=(i|0))if((f|0)==(i|0))d=(k[b+4>>2]|0)<(k[a+4>>2]|0);else d=0;else d=1;g=k[c>>2]|0;if((g|0)>=(f|0))if((g|0)==(f|0))e=(k[c+4>>2]|0)<(k[b+4>>2]|0);else e=0;else e=1;if(!d){if(!e){b=0;return b|0}h=b+4|0;i=k[h>>2]|0;k[b>>2]=g;g=c+4|0;k[h>>2]=k[g>>2];k[c>>2]=f;k[g>>2]=i;f=k[b>>2]|0;g=k[a>>2]|0;if((f|0)>=(g|0)){if((f|0)!=(g|0)){b=1;return b|0}d=a+4|0;e=k[d>>2]|0;if((k[h>>2]|0)>=(e|0)){b=1;return b|0}}else{e=a+4|0;d=e;e=k[e>>2]|0}k[a>>2]=f;k[d>>2]=k[h>>2];k[b>>2]=g;k[h>>2]=e;b=2;return b|0}d=a+4|0;h=k[d>>2]|0;if(e){k[a>>2]=g;b=c+4|0;k[d>>2]=k[b>>2];k[c>>2]=i;k[b>>2]=h;b=1;return b|0}k[a>>2]=f;f=b+4|0;k[d>>2]=k[f>>2];k[b>>2]=i;k[f>>2]=h;e=k[c>>2]|0;if((e|0)>=(i|0)){if((e|0)!=(i|0)){b=1;return b|0}d=c+4|0;if((k[d>>2]|0)>=(h|0)){b=1;return b|0}}else d=c+4|0;k[b>>2]=e;k[f>>2]=k[d>>2];k[c>>2]=i;k[d>>2]=h;b=2;return b|0}function Xb(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0;l=Wb(a,b,c)|0;h=k[d>>2]|0;i=k[c>>2]|0;if((h|0)>=(i|0)){if((h|0)!=(i|0)){b=l;return b|0}f=d+4|0;g=c+4|0;e=k[g>>2]|0;if((k[f>>2]|0)<(e|0))j=g;else{b=l;return b|0}}else{e=c+4|0;f=d+4|0;j=e;e=k[e>>2]|0}k[c>>2]=h;k[j>>2]=k[f>>2];k[d>>2]=i;k[f>>2]=e;f=l+1|0;h=k[c>>2]|0;i=k[b>>2]|0;if((h|0)>=(i|0)){if((h|0)!=(i|0)){b=f;return b|0}g=b+4|0;e=k[g>>2]|0;if((k[j>>2]|0)<(e|0))d=g;else{b=f;return b|0}}else{e=b+4|0;d=e;e=k[e>>2]|0}k[b>>2]=h;k[d>>2]=k[j>>2];k[c>>2]=i;k[j>>2]=e;g=l+2|0;h=k[b>>2]|0;i=k[a>>2]|0;if((h|0)>=(i|0)){if((h|0)!=(i|0)){b=g;return b|0}f=a+4|0;e=k[f>>2]|0;if((k[d>>2]|0)>=(e|0)){b=g;return b|0}}else{e=a+4|0;f=e;e=k[e>>2]|0}k[a>>2]=h;k[f>>2]=k[d>>2];k[b>>2]=i;k[d>>2]=e;b=l+3|0;return b|0}function Yb(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0;n=Xb(a,b,c,d)|0;i=k[e>>2]|0;j=k[d>>2]|0;if((i|0)>=(j|0)){if((i|0)!=(j|0)){b=n;return b|0}g=e+4|0;h=d+4|0;f=k[h>>2]|0;if((k[g>>2]|0)<(f|0))m=h;else{b=n;return b|0}}else{f=d+4|0;g=e+4|0;m=f;f=k[f>>2]|0}k[d>>2]=i;k[m>>2]=k[g>>2];k[e>>2]=j;k[g>>2]=f;g=n+1|0;i=k[d>>2]|0;j=k[c>>2]|0;if((i|0)>=(j|0)){if((i|0)!=(j|0)){b=g;return b|0}h=c+4|0;f=k[h>>2]|0;if((k[m>>2]|0)<(f|0))l=h;else{b=g;return b|0}}else{f=c+4|0;l=f;f=k[f>>2]|0}k[c>>2]=i;k[l>>2]=k[m>>2];k[d>>2]=j;k[m>>2]=f;g=n+2|0;i=k[c>>2]|0;j=k[b>>2]|0;if((i|0)>=(j|0)){if((i|0)!=(j|0)){b=g;return b|0}h=b+4|0;f=k[h>>2]|0;if((k[l>>2]|0)<(f|0))e=h;else{b=g;return b|0}}else{f=b+4|0;e=f;f=k[f>>2]|0}k[b>>2]=i;k[e>>2]=k[l>>2];k[c>>2]=j;k[l>>2]=f;h=n+3|0;i=k[b>>2]|0;j=k[a>>2]|0;if((i|0)>=(j|0)){if((i|0)!=(j|0)){b=h;return b|0}g=a+4|0;f=k[g>>2]|0;if((k[e>>2]|0)>=(f|0)){b=h;return b|0}}else{f=a+4|0;g=f;f=k[f>>2]|0}k[a>>2]=i;k[g>>2]=k[e>>2];k[b>>2]=j;k[e>>2]=f;b=n+4|0;return b|0}function Zb(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;switch(b-a>>3|0){case 2:{f=b+-8|0;g=k[f>>2]|0;h=k[a>>2]|0;if((g|0)>=(h|0)){if((g|0)!=(h|0)){a=1;return a|0}e=b+-4|0;c=a+4|0;d=k[c>>2]|0;if((k[e>>2]|0)>=(d|0)){a=1;return a|0}}else{d=a+4|0;c=d;e=b+-4|0;d=k[d>>2]|0}k[a>>2]=g;k[c>>2]=k[e>>2];k[f>>2]=h;k[e>>2]=d;a=1;return a|0}case 3:{Wb(a,a+8|0,b+-8|0)|0;a=1;return a|0}case 4:{Xb(a,a+8|0,a+16|0,b+-8|0)|0;a=1;return a|0}case 5:{Yb(a,a+8|0,a+16|0,a+24|0,b+-8|0)|0;a=1;return a|0}case 1:case 0:{a=1;return a|0}default:{e=a+16|0;Wb(a,a+8|0,e)|0;d=a+24|0;if((d|0)==(b|0)){a=1;return a|0}else c=0;while(1){l=k[d>>2]|0;h=k[e>>2]|0;if((l|0)>=(h|0)){if((l|0)==(h|0)?(n=d+4|0,o=k[n>>2]|0,p=e+4|0,(o|0)<(k[p>>2]|0)):0){f=p;g=n;m=o;q=15}}else{m=d+4|0;f=e+4|0;g=m;m=k[m>>2]|0;q=15}if((q|0)==15){q=0;k[d>>2]=h;k[g>>2]=k[f>>2];a:do if((e|0)!=(a|0)){j=e;while(1){e=j+-8|0;i=k[e>>2]|0;if((l|0)>=(i|0)){if((l|0)!=(i|0)){e=j;break a}h=j+-4|0;g=k[h>>2]|0;if((m|0)<(g|0))f=h;else{e=j;break a}}else{g=j+-4|0;f=g;g=k[g>>2]|0}k[j>>2]=i;k[j+4>>2]=g;if((e|0)==(a|0))break;else j=e}}while(0);k[e>>2]=l;k[f>>2]=m;c=c+1|0;if((c|0)==8)break}e=d+8|0;if((e|0)==(b|0)){c=1;q=24;break}else{m=d;d=e;e=m}}if((q|0)==24)return c|0;a=(d+8|0)==(b|0);return a|0}}return 0}function _b(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0;y=k[c>>2]|0;z=(y|0)==(a|0);if(z?(k[c+4>>2]|0)==(b|0):0){b=0;return b|0}A=k[c+8>>2]|0;B=(A|0)==(a|0);C=k[c+12>>2]|0;if(B&(C|0)==(b|0)){b=0;return b|0}i=((b|0)<0)<<31>>31;n=be(C|0,((C|0)<0)<<31>>31|0,b|0,i|0)|0;p=L;x=k[c+4>>2]|0;c=be(x|0,((x|0)<0)<<31>>31|0,b|0,i|0)|0;i=L;v=((a|0)<0)<<31>>31;q=be(A|0,((A|0)<0)<<31>>31|0,a|0,v|0)|0;s=L;v=be(y|0,((y|0)<0)<<31>>31|0,a|0,v|0)|0;w=L;u=(s|0)<0;r=be(0,0,q|0,s|0)|0;t=L;d=(i|0)<0;e=be(0,0,c|0,i|0)|0;j=L;f=ne((u?r:q)|0,(u?t:s)|0,(d?e:c)|0,(d?j:i)|0)|0;g=L;l=(w|0)<0;h=be(0,0,v|0,w|0)|0;v=l?h:v;w=l?L:w;h=(p|0)<0;m=be(0,0,n|0,p|0)|0;o=L;D=ne(v|0,w|0,(h?m:n)|0,(h?o:p)|0)|0;if((f|0)==(D|0)&(g|0)==(L|0)?(D=ha(l?-1:1,h?-1:1)|0,(f|0)==0&(g|0)==0|(ha(u?-1:1,d?-1:1)|0)==(D|0)):0){D=0;return D|0}h=l?e:c;g=l?j:i;do if(l|z^1){f=u?m:n;e=u?o:p;d=u?r:q;c=u?t:s;if(!(u|B^1)){c=(y|0)!=(a|0);break}u=(c|0)<0;s=be(0,0,d|0,c|0)|0;t=u?L:c;D=(g|0)<0;c=be(0,0,h|0,g|0)|0;g=ne((u?s:d)|0,t|0,(D?c:h)|0,(D?L:g)|0)|0;h=L;c=(e|0)<0;d=be(0,0,f|0,e|0)|0;e=ne((c?d:f)|0,(c?L:e)|0,v|0,w|0)|0;f=L;d=ha(u?-1:1,D?-1:1)|0;c=ha(c?-1:1,(w|0)<0?-1:1)|0;if((d|0)>=(c|0))if((c|0)>=(d|0))if((d|0)==-1){c=f>>>0<h>>>0|(f|0)==(h|0)&e>>>0<g>>>0;break}else{c=h>>>0<f>>>0|(h|0)==(f|0)&g>>>0<e>>>0;break}else c=0;else c=1}else c=0;while(0);d=c?-1:1;if((A|0)<(y|0))c=1;else c=(A|0)==(y|0)&(C|0)<(x|0);d=c?0-d|0:d;if((y|0)>=(A|0)?!((y|0)==(A|0)&(x|0)<(C|0)):0)if((y|0)>(a|0)|z&(x|0)>(b|0))if((A|0)<(a|0))c=1;else c=B&(C|0)<(b|0);else c=0;else if((A|0)>(a|0)|B&(C|0)>(b|0))if((y|0)<(a|0))c=1;else c=z&(x|0)<(b|0);else c=0;D=c?d:0-d|0;return D|0}function $b(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;n=k[b>>2]|0;o=k[a>>2]|0;do if((n|0)>=(o|0)){h=(n|0)==(o|0);if(h?(k[b+4>>2]|0)<(k[a+4>>2]|0):0){i=1;break}if((o|0)<(n|0))i=0;else{if(h?(f=k[a+4>>2]|0,g=k[b+4>>2]|0,(f|0)<(g|0)):0)r=12;else{g=k[b+8>>2]|0;f=k[a+8>>2]|0;if((g|0)<(f|0)){i=1;break}if((g|0)==(f|0)?(k[b+12>>2]|0)<(k[a+12>>2]|0):0){i=1;break}if(h){f=k[a+4>>2]|0;g=k[b+4>>2]|0;r=12}else r=15}if((r|0)==12){if((f|0)<(g|0)){i=0;break}if((g|0)>=(f|0)){f=k[a+8>>2]|0;g=k[b+8>>2]|0;r=15}}if((r|0)==15){if((f|0)<(g|0)){i=0;break}if((f|0)==(g|0)?(k[a+12>>2]|0)<(k[b+12>>2]|0):0){i=0;break}}i=(k[b+16>>2]|0)<(k[a+16>>2]|0)}}else i=1;while(0);l=k[c>>2]|0;do if((l|0)>=(n|0)){h=(l|0)==(n|0);if(h?(k[c+4>>2]|0)<(k[b+4>>2]|0):0){f=1;break}if((n|0)<(l|0))f=0;else{if(h?(j=k[b+4>>2]|0,m=k[c+4>>2]|0,(j|0)<(m|0)):0){g=j;f=m;r=30}else{g=k[c+8>>2]|0;f=k[b+8>>2]|0;if((g|0)<(f|0)){f=1;break}if((g|0)==(f|0)?(k[c+12>>2]|0)<(k[b+12>>2]|0):0){f=1;break}if(h){g=k[b+4>>2]|0;f=k[c+4>>2]|0;r=30}else r=33}if((r|0)==30){if((g|0)<(f|0)){f=0;break}if((f|0)>=(g|0)){f=k[b+8>>2]|0;g=k[c+8>>2]|0;r=33}}if((r|0)==33){if((f|0)<(g|0)){f=0;break}if((f|0)==(g|0)?(k[b+12>>2]|0)<(k[c+12>>2]|0):0){f=0;break}}f=(k[c+16>>2]|0)<(k[b+16>>2]|0)}}else f=1;while(0);if(!i){if(!f){b=0;return b|0}m=b+4|0;r=k[m>>2]|0;k[b>>2]=l;i=c+4|0;k[m>>2]=k[i>>2];k[c>>2]=n;k[i>>2]=r;i=b+8|0;r=k[i>>2]|0;j=b+12|0;g=k[j>>2]|0;h=c+8|0;k[i>>2]=k[h>>2];l=c+12|0;k[j>>2]=k[l>>2];k[h>>2]=r;k[l>>2]=g;l=b+16|0;g=c+16|0;h=k[l>>2]|0;k[l>>2]=k[g>>2];k[g>>2]=h;g=k[b>>2]|0;h=k[a>>2]|0;do if((g|0)>=(h|0)){f=(g|0)==(h|0);if(f?(k[m>>2]|0)<(k[a+4>>2]|0):0)break;if((h|0)<(g|0)){b=1;return b|0}if(f?(e=k[a+4>>2]|0,d=k[m>>2]|0,(e|0)<(d|0)):0)r=50;else{e=k[i>>2]|0;d=k[a+8>>2]|0;if((e|0)<(d|0))break;if((e|0)==(d|0)?(k[j>>2]|0)<(k[a+12>>2]|0):0)break;if(f){e=k[a+4>>2]|0;d=k[m>>2]|0;r=50}else r=53}if((r|0)==50){if((e|0)<(d|0)){b=1;return b|0}if((d|0)>=(e|0)){d=k[a+8>>2]|0;e=k[i>>2]|0;r=53}}if((r|0)==53){if((d|0)<(e|0)){b=1;return b|0}if((d|0)==(e|0)?(k[a+12>>2]|0)<(k[j>>2]|0):0){b=1;return b|0}}if((k[l>>2]|0)>=(k[a+16>>2]|0)){b=1;return b|0}}while(0);r=a+4|0;q=k[r>>2]|0;k[a>>2]=g;k[r>>2]=k[m>>2];k[b>>2]=h;k[m>>2]=q;q=a+8|0;b=k[q>>2]|0;r=a+12|0;c=k[r>>2]|0;k[q>>2]=k[i>>2];k[r>>2]=k[j>>2];k[i>>2]=b;k[j>>2]=c;c=a+16|0;b=k[c>>2]|0;k[c>>2]=k[l>>2];k[l>>2]=b;b=2;return b|0}d=a+4|0;e=k[d>>2]|0;if(f){k[a>>2]=l;b=c+4|0;k[d>>2]=k[b>>2];k[c>>2]=o;k[b>>2]=e;b=a+8|0;p=k[b>>2]|0;o=a+12|0;r=k[o>>2]|0;q=c+8|0;k[b>>2]=k[q>>2];b=c+12|0;k[o>>2]=k[b>>2];k[q>>2]=p;k[b>>2]=r;a=a+16|0;b=c+16|0;c=k[a>>2]|0;k[a>>2]=k[b>>2];k[b>>2]=c;b=1;return b|0}k[a>>2]=n;n=b+4|0;k[d>>2]=k[n>>2];k[b>>2]=o;k[n>>2]=e;m=a+8|0;g=k[m>>2]|0;h=a+12|0;i=k[h>>2]|0;l=b+8|0;k[m>>2]=k[l>>2];m=b+12|0;k[h>>2]=k[m>>2];k[l>>2]=g;k[m>>2]=i;i=a+16|0;g=b+16|0;h=k[i>>2]|0;k[i>>2]=k[g>>2];k[g>>2]=h;i=k[c>>2]|0;j=k[b>>2]|0;do if((i|0)>=(j|0)){f=(i|0)==(j|0);if(f?(k[c+4>>2]|0)<(k[n>>2]|0):0)break;if((j|0)<(i|0)){b=1;return b|0}if(f?(p=k[n>>2]|0,q=k[c+4>>2]|0,(p|0)<(q|0)):0){e=p;d=q;r=71}else{e=k[c+8>>2]|0;d=k[l>>2]|0;if((e|0)<(d|0))break;if((e|0)==(d|0)?(k[c+12>>2]|0)<(k[m>>2]|0):0)break;if(f){e=k[n>>2]|0;d=k[c+4>>2]|0;r=71}else r=74}if((r|0)==71){if((e|0)<(d|0)){b=1;return b|0}if((d|0)>=(e|0)){d=k[l>>2]|0;e=k[c+8>>2]|0;r=74}}if((r|0)==74){if((d|0)<(e|0)){b=1;return b|0}if((d|0)==(e|0)?(k[m>>2]|0)<(k[c+12>>2]|0):0){b=1;return b|0}}if((k[c+16>>2]|0)>=(h|0)){b=1;return b|0}}while(0);a=k[n>>2]|0;k[b>>2]=i;q=c+4|0;k[n>>2]=k[q>>2];k[c>>2]=j;k[q>>2]=a;q=k[l>>2]|0;a=k[m>>2]|0;r=c+8|0;k[l>>2]=k[r>>2];b=c+12|0;k[m>>2]=k[b>>2];k[r>>2]=q;k[b>>2]=a;b=c+16|0;c=k[g>>2]|0;k[g>>2]=k[b>>2];k[b>>2]=c;b=2;return b|0}function ac(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;t=$b(a,b,c)|0;i=k[d>>2]|0;j=k[c>>2]|0;do if((i|0)>=(j|0)){h=(i|0)==(j|0);if(h?(k[d+4>>2]|0)<(k[c+4>>2]|0):0)break;if((j|0)<(i|0)){b=t;return b|0}if(h?(f=k[c+4>>2]|0,g=k[d+4>>2]|0,(f|0)<(g|0)):0)r=12;else{g=k[d+8>>2]|0;f=k[c+8>>2]|0;if((g|0)<(f|0))break;if((g|0)==(f|0)?(k[d+12>>2]|0)<(k[c+12>>2]|0):0)break;if(h){f=k[c+4>>2]|0;g=k[d+4>>2]|0;r=12}else r=15}if((r|0)==12){if((f|0)<(g|0)){b=t;return b|0}if((g|0)>=(f|0)){f=k[c+8>>2]|0;g=k[d+8>>2]|0;r=15}}if((r|0)==15){if((f|0)<(g|0)){b=t;return b|0}if((f|0)==(g|0)?(k[c+12>>2]|0)<(k[d+12>>2]|0):0){b=t;return b|0}}if((k[d+16>>2]|0)>=(k[c+16>>2]|0)){b=t;return b|0}}while(0);l=c+4|0;r=k[l>>2]|0;k[c>>2]=i;o=d+4|0;k[l>>2]=k[o>>2];k[d>>2]=j;k[o>>2]=r;o=c+8|0;r=k[o>>2]|0;p=c+12|0;i=k[p>>2]|0;j=d+8|0;k[o>>2]=k[j>>2];q=d+12|0;k[p>>2]=k[q>>2];k[j>>2]=r;k[q>>2]=i;q=c+16|0;i=d+16|0;j=k[q>>2]|0;k[q>>2]=k[i>>2];k[i>>2]=j;i=t+1|0;j=k[c>>2]|0;d=k[b>>2]|0;do if((j|0)>=(d|0)){h=(j|0)==(d|0);if(h?(k[l>>2]|0)<(k[b+4>>2]|0):0)break;if((d|0)<(j|0)){b=i;return b|0}if(h?(m=k[b+4>>2]|0,n=k[l>>2]|0,(m|0)<(n|0)):0){g=m;f=n;r=30}else{g=k[o>>2]|0;f=k[b+8>>2]|0;if((g|0)<(f|0))break;if((g|0)==(f|0)?(k[p>>2]|0)<(k[b+12>>2]|0):0)break;if(h){g=k[b+4>>2]|0;f=k[l>>2]|0;r=30}else r=33}if((r|0)==30){if((g|0)<(f|0)){b=i;return b|0}if((f|0)>=(g|0)){f=k[b+8>>2]|0;g=k[o>>2]|0;r=33}}if((r|0)==33){if((f|0)<(g|0)){b=i;return b|0}if((f|0)==(g|0)?(k[b+12>>2]|0)<(k[p>>2]|0):0){b=i;return b|0}}if((k[q>>2]|0)>=(k[b+16>>2]|0)){b=i;return b|0}}while(0);n=b+4|0;h=k[n>>2]|0;k[b>>2]=j;k[n>>2]=k[l>>2];k[c>>2]=d;k[l>>2]=h;l=b+8|0;h=k[l>>2]|0;m=b+12|0;d=k[m>>2]|0;k[l>>2]=k[o>>2];k[m>>2]=k[p>>2];k[o>>2]=h;k[p>>2]=d;d=b+16|0;h=k[d>>2]|0;k[d>>2]=k[q>>2];k[q>>2]=h;h=t+2|0;i=k[b>>2]|0;j=k[a>>2]|0;do if((i|0)>=(j|0)){g=(i|0)==(j|0);if(g?(k[n>>2]|0)<(k[a+4>>2]|0):0)break;if((j|0)<(i|0)){b=h;return b|0}if(g?(s=k[a+4>>2]|0,e=k[n>>2]|0,(s|0)<(e|0)):0){f=s;r=48}else{f=k[l>>2]|0;e=k[a+8>>2]|0;if((f|0)<(e|0))break;if((f|0)==(e|0)?(k[m>>2]|0)<(k[a+12>>2]|0):0)break;if(g){f=k[a+4>>2]|0;e=k[n>>2]|0;r=48}else r=51}if((r|0)==48){if((f|0)<(e|0)){b=h;return b|0}if((e|0)>=(f|0)){e=k[a+8>>2]|0;f=k[l>>2]|0;r=51}}if((r|0)==51){if((e|0)<(f|0)){b=h;return b|0}if((e|0)==(f|0)?(k[a+12>>2]|0)<(k[m>>2]|0):0){b=h;return b|0}}if((k[d>>2]|0)>=(k[a+16>>2]|0)){b=h;return b|0}}while(0);s=a+4|0;c=k[s>>2]|0;k[a>>2]=i;k[s>>2]=k[n>>2];k[b>>2]=j;k[n>>2]=c;c=a+8|0;s=k[c>>2]|0;r=a+12|0;b=k[r>>2]|0;k[c>>2]=k[l>>2];k[r>>2]=k[m>>2];k[l>>2]=s;k[m>>2]=b;a=a+16|0;b=k[a>>2]|0;k[a>>2]=k[d>>2];k[d>>2]=b;b=t+3|0;return b|0}function bc(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;x=ac(a,b,c,d)|0;m=k[e>>2]|0;n=k[d>>2]|0;do if((m|0)>=(n|0)){l=(m|0)==(n|0);if(l?(k[e+4>>2]|0)<(k[d+4>>2]|0):0)break;if((n|0)<(m|0)){b=x;return b|0}if(l?(i=k[d+4>>2]|0,j=k[e+4>>2]|0,(i|0)<(j|0)):0)w=12;else{j=k[e+8>>2]|0;i=k[d+8>>2]|0;if((j|0)<(i|0))break;if((j|0)==(i|0)?(k[e+12>>2]|0)<(k[d+12>>2]|0):0)break;if(l){i=k[d+4>>2]|0;j=k[e+4>>2]|0;w=12}else w=15}if((w|0)==12){if((i|0)<(j|0)){b=x;return b|0}if((j|0)>=(i|0)){i=k[d+8>>2]|0;j=k[e+8>>2]|0;w=15}}if((w|0)==15){if((i|0)<(j|0)){b=x;return b|0}if((i|0)==(j|0)?(k[d+12>>2]|0)<(k[e+12>>2]|0):0){b=x;return b|0}}if((k[e+16>>2]|0)>=(k[d+16>>2]|0)){b=x;return b|0}}while(0);o=d+4|0;w=k[o>>2]|0;k[d>>2]=m;p=e+4|0;k[o>>2]=k[p>>2];k[e>>2]=n;k[p>>2]=w;p=d+8|0;w=k[p>>2]|0;s=d+12|0;m=k[s>>2]|0;n=e+8|0;k[p>>2]=k[n>>2];u=e+12|0;k[s>>2]=k[u>>2];k[n>>2]=w;k[u>>2]=m;u=d+16|0;m=e+16|0;n=k[u>>2]|0;k[u>>2]=k[m>>2];k[m>>2]=n;m=x+1|0;n=k[d>>2]|0;e=k[c>>2]|0;do if((n|0)>=(e|0)){l=(n|0)==(e|0);if(l?(k[o>>2]|0)<(k[c+4>>2]|0):0)break;if((e|0)<(n|0)){b=m;return b|0}if(l?(q=k[c+4>>2]|0,r=k[o>>2]|0,(q|0)<(r|0)):0){j=q;i=r;w=30}else{j=k[p>>2]|0;i=k[c+8>>2]|0;if((j|0)<(i|0))break;if((j|0)==(i|0)?(k[s>>2]|0)<(k[c+12>>2]|0):0)break;if(l){j=k[c+4>>2]|0;i=k[o>>2]|0;w=30}else w=33}if((w|0)==30){if((j|0)<(i|0)){b=m;return b|0}if((i|0)>=(j|0)){i=k[c+8>>2]|0;j=k[p>>2]|0;w=33}}if((w|0)==33){if((i|0)<(j|0)){b=m;return b|0}if((i|0)==(j|0)?(k[c+12>>2]|0)<(k[s>>2]|0):0){b=m;return b|0}}if((k[u>>2]|0)>=(k[c+16>>2]|0)){b=m;return b|0}}while(0);t=c+4|0;q=k[t>>2]|0;k[c>>2]=n;k[t>>2]=k[o>>2];k[d>>2]=e;k[o>>2]=q;q=c+8|0;m=k[q>>2]|0;r=c+12|0;l=k[r>>2]|0;k[q>>2]=k[p>>2];k[r>>2]=k[s>>2];k[p>>2]=m;k[s>>2]=l;p=c+16|0;l=k[p>>2]|0;k[p>>2]=k[u>>2];k[u>>2]=l;l=x+2|0;m=k[c>>2]|0;n=k[b>>2]|0;do if((m|0)>=(n|0)){j=(m|0)==(n|0);if(j?(k[t>>2]|0)<(k[b+4>>2]|0):0)break;if((n|0)<(m|0)){b=l;return b|0}if(j?(v=k[b+4>>2]|0,h=k[t>>2]|0,(v|0)<(h|0)):0){i=v;w=48}else{i=k[q>>2]|0;h=k[b+8>>2]|0;if((i|0)<(h|0))break;if((i|0)==(h|0)?(k[r>>2]|0)<(k[b+12>>2]|0):0)break;if(j){i=k[b+4>>2]|0;h=k[t>>2]|0;w=48}else w=51}if((w|0)==48){if((i|0)<(h|0)){b=l;return b|0}if((h|0)>=(i|0)){h=k[b+8>>2]|0;i=k[q>>2]|0;w=51}}if((w|0)==51){if((h|0)<(i|0)){b=l;return b|0}if((h|0)==(i|0)?(k[b+12>>2]|0)<(k[r>>2]|0):0){b=l;return b|0}}if((k[p>>2]|0)>=(k[b+16>>2]|0)){b=l;return b|0}}while(0);o=b+4|0;i=k[o>>2]|0;k[b>>2]=m;k[o>>2]=k[t>>2];k[c>>2]=n;k[t>>2]=i;n=b+8|0;i=k[n>>2]|0;e=b+12|0;m=k[e>>2]|0;k[n>>2]=k[q>>2];k[e>>2]=k[r>>2];k[q>>2]=i;k[r>>2]=m;m=b+16|0;i=k[m>>2]|0;k[m>>2]=k[p>>2];k[p>>2]=i;i=x+3|0;j=k[b>>2]|0;l=k[a>>2]|0;do if((j|0)>=(l|0)){h=(j|0)==(l|0);if(h?(k[o>>2]|0)<(k[a+4>>2]|0):0)break;if((l|0)<(j|0)){b=i;return b|0}if(h?(g=k[a+4>>2]|0,f=k[o>>2]|0,(g|0)<(f|0)):0)w=66;else{g=k[n>>2]|0;f=k[a+8>>2]|0;if((g|0)<(f|0))break;if((g|0)==(f|0)?(k[e>>2]|0)<(k[a+12>>2]|0):0)break;if(h){g=k[a+4>>2]|0;f=k[o>>2]|0;w=66}else w=69}if((w|0)==66){if((g|0)<(f|0)){b=i;return b|0}if((f|0)>=(g|0)){f=k[a+8>>2]|0;g=k[n>>2]|0;w=69}}if((w|0)==69){if((f|0)<(g|0)){b=i;return b|0}if((f|0)==(g|0)?(k[a+12>>2]|0)<(k[e>>2]|0):0){b=i;return b|0}}if((k[m>>2]|0)>=(k[a+16>>2]|0)){b=i;return b|0}}while(0);c=a+4|0;v=k[c>>2]|0;k[a>>2]=j;k[c>>2]=k[o>>2];k[b>>2]=l;k[o>>2]=v;v=a+8|0;c=k[v>>2]|0;w=a+12|0;b=k[w>>2]|0;k[v>>2]=k[n>>2];k[w>>2]=k[e>>2];k[n>>2]=c;k[e>>2]=b;a=a+16|0;b=k[a>>2]|0;k[a>>2]=k[m>>2];k[m>>2]=b;b=x+4|0;return b|0}function cc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;switch((b-a|0)/20|0|0){case 2:{f=b+-20|0;g=k[f>>2]|0;h=k[a>>2]|0;do if((g|0)>=(h|0)){e=(g|0)==(h|0);if(e?(k[b+-16>>2]|0)<(k[a+4>>2]|0):0)break;if((h|0)<(g|0)){b=1;return b|0}if(e?(d=k[a+4>>2]|0,c=k[b+-16>>2]|0,(d|0)<(c|0)):0)w=13;else{d=k[b+-12>>2]|0;c=k[a+8>>2]|0;if((d|0)<(c|0))break;if((d|0)==(c|0)?(k[b+-8>>2]|0)<(k[a+12>>2]|0):0)break;if(e){d=k[a+4>>2]|0;c=k[b+-16>>2]|0;w=13}else w=16}if((w|0)==13){if((d|0)<(c|0)){b=1;return b|0}if((c|0)>=(d|0)){c=k[a+8>>2]|0;d=k[b+-12>>2]|0;w=16}}if((w|0)==16){if((c|0)<(d|0)){b=1;return b|0}if((c|0)==(d|0)?(k[a+12>>2]|0)<(k[b+-8>>2]|0):0){b=1;return b|0}}if((k[b+-4>>2]|0)>=(k[a+16>>2]|0)){b=1;return b|0}}while(0);s=a+4|0;t=k[s>>2]|0;k[a>>2]=g;w=b+-16|0;k[s>>2]=k[w>>2];k[f>>2]=h;k[w>>2]=t;w=a+8|0;t=k[w>>2]|0;s=a+12|0;v=k[s>>2]|0;u=b+-12|0;k[w>>2]=k[u>>2];w=b+-8|0;k[s>>2]=k[w>>2];k[u>>2]=t;k[w>>2]=v;w=a+16|0;b=b+-4|0;a=k[w>>2]|0;k[w>>2]=k[b>>2];k[b>>2]=a;b=1;return b|0}case 3:{$b(a,a+20|0,b+-20|0)|0;b=1;return b|0}case 4:{ac(a,a+20|0,a+40|0,b+-20|0)|0;b=1;return b|0}case 5:{bc(a,a+20|0,a+40|0,a+60|0,b+-20|0)|0;b=1;return b|0}case 1:case 0:{b=1;return b|0}default:{e=a+40|0;$b(a,a+20|0,e)|0;d=a+60|0;if((d|0)==(b|0)){b=1;return b|0}else c=0;while(1){s=k[d>>2]|0;i=k[e>>2]|0;do if((s|0)>=(i|0)){h=(s|0)==(i|0);if(h?(k[d+4>>2]|0)<(k[e+4>>2]|0):0){w=43;break}if((i|0)>=(s|0)){if(h?(u=k[e+4>>2]|0,v=k[d+4>>2]|0,(u|0)<(v|0)):0){f=u;g=v;w=36}else{f=k[d+8>>2]|0;g=k[e+8>>2]|0;if((f|0)<(g|0)){w=43;break}if((f|0)==(g|0)?(k[d+12>>2]|0)<(k[e+12>>2]|0):0){w=43;break}if(h){f=k[e+4>>2]|0;g=k[d+4>>2]|0;w=36}else w=39}if((w|0)==36){w=0;if((f|0)<(g|0))break;if((g|0)>=(f|0)){g=k[e+8>>2]|0;f=k[d+8>>2]|0;w=39}}if((w|0)==39){w=0;if((g|0)<(f|0))break;if((g|0)==(f|0)?(k[e+12>>2]|0)<(k[d+12>>2]|0):0)break}if((k[d+16>>2]|0)<(k[e+16>>2]|0))w=43}}else w=43;while(0);if((w|0)==43){w=0;m=d+4|0;o=k[m>>2]|0;g=d+8|0;p=k[g>>2]|0;f=d+12|0;q=k[f>>2]|0;n=d+16|0;r=k[n>>2]|0;k[d>>2]=i;h=e+4|0;k[m>>2]=k[h>>2];i=e+8|0;k[g>>2]=k[i>>2];g=e+12|0;k[f>>2]=k[g>>2];f=e+16|0;k[n>>2]=k[f>>2];a:do if((e|0)!=(a|0)){n=e;m=i;l=h;while(1){e=n+-20|0;j=k[e>>2]|0;do if((s|0)>=(j|0)){i=(s|0)==(j|0);if(i?(o|0)<(k[n+-16>>2]|0):0)break;if((j|0)<(s|0)){e=n;h=l;i=m;break a}if(i?(t=k[n+-16>>2]|0,(t|0)<(o|0)):0){h=t;w=55}else{h=k[n+-12>>2]|0;if((p|0)<(h|0))break;if((p|0)==(h|0)?(q|0)<(k[n+-8>>2]|0):0)break;if(i){h=k[n+-16>>2]|0;w=55}else w=58}if((w|0)==55){w=0;if((h|0)<(o|0)){e=n;h=l;i=m;break a}if((o|0)>=(h|0)){h=k[n+-12>>2]|0;w=58}}if((w|0)==58){w=0;if((h|0)<(p|0)){e=n;h=l;i=m;break a}if((h|0)==(p|0)?(k[n+-8>>2]|0)<(q|0):0){e=n;h=l;i=m;break a}}if((r|0)>=(k[n+-4>>2]|0)){e=n;h=l;i=m;break a}}while(0);k[n>>2]=j;h=n+-16|0;k[n+4>>2]=k[h>>2];i=n+-12|0;k[n+8>>2]=k[i>>2];g=n+-8|0;k[n+12>>2]=k[g>>2];f=n+-4|0;k[n+16>>2]=k[f>>2];if((e|0)==(a|0))break;else{n=e;m=i;l=h}}}while(0);k[e>>2]=s;k[h>>2]=o;k[i>>2]=p;k[g>>2]=q;k[f>>2]=r;c=c+1|0;if((c|0)==8)break}e=d+20|0;if((e|0)==(b|0)){c=1;w=66;break}else{s=d;d=e;e=s}}if((w|0)==66)return c|0;b=(d+20|0)==(b|0);return b|0}}return 0}function dc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0;f=a+4|0;g=k[a>>2]|0;c=g;h=(k[f>>2]|0)-c|0;i=h>>3;j=i+1|0;if(j>>>0>536870911)xa(1340,1363,303,1438);l=a+8|0;c=(k[l>>2]|0)-c|0;if(c>>3>>>0<268435455){c=c>>2;c=c>>>0<j>>>0?j:c;if(!c){c=0;d=0}else e=5}else{c=536870911;e=5}if((e|0)==5){e=c<<3;e=(e|0)==0?1:e;d=_d(e)|0;a:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(e)|0;if(d)break a}a=ya(4)|0;k[a>>2]=128;La(a|0,8,1)}while(0)}m=b;e=k[m+4>>2]|0;b=d+(i<<3)|0;k[b>>2]=k[m>>2];k[b+4>>2]=e;fe(d|0,g|0,h|0)|0;k[a>>2]=d;k[f>>2]=d+(j<<3);k[l>>2]=d+(c<<3);if(!g)return;$d(g);return}function ec(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0;s=b;a:while(1){m=s;n=s+-8|0;o=s+-16|0;r=s+-4|0;w=a;b:while(1){l=w;a=m-l|0;b=a>>3;switch(b|0){case 2:{v=4;break a}case 3:{v=9;break a}case 4:{v=10;break a}case 5:{v=11;break a}case 1:case 0:{v=88;break a}default:{}}if((a|0)<56){v=13;break a}c=(b|0)/2|0;h=w+(c<<3)|0;if((a|0)>7992){a=(b|0)/4|0;a=ic(w,w+(a<<3)|0,h,w+(a+c<<3)|0,n)|0}else a=gc(w,h,n)|0;g=k[w>>2]|0;f=k[h>>2]|0;c:do if((g|0)<(f|0))c=n;else{if((f|0)>=(g|0)?(k[w+4>>2]|0)<(k[w+(c<<3)+4>>2]|0):0){c=n;break}d:do if((w|0)!=(o|0)){e=w+(c<<3)+4|0;c=o;b=n;while(1){d=k[c>>2]|0;if((d|0)<(f|0)){v=58;break}if((f|0)>=(d|0)?(p=b+-4|0,(k[p>>2]|0)<(k[e>>2]|0)):0){b=p;break}b=c+-8|0;if((w|0)==(b|0))break d;else{j=c;c=b;b=j}}if((v|0)==58){v=0;b=b+-4|0}k[w>>2]=d;k[c>>2]=g;i=w+4|0;j=k[i>>2]|0;k[i>>2]=k[b>>2];k[b>>2]=j;a=a+1|0;break c}while(0);a=w+8|0;f=k[n>>2]|0;do if((g|0)>=(f|0)){if((f|0)>=(g|0)?(k[w+4>>2]|0)<(k[r>>2]|0):0)break;if((a|0)==(n|0)){v=88;break a}d=w+4|0;e=w;while(1){b=e+8|0;c=k[b>>2]|0;if((g|0)<(c|0)){v=40;break}if((c|0)>=(g|0)?(q=e+12|0,(k[d>>2]|0)<(k[q>>2]|0)):0){a=q;break}b=a+8|0;if((b|0)==(n|0)){v=88;break a}else{e=a;a=b}}if((v|0)==40){v=0;a=e+12|0}k[b>>2]=f;k[n>>2]=c;l=k[a>>2]|0;k[a>>2]=k[r>>2];k[r>>2]=l;a=e+16|0}while(0);if((a|0)==(n|0)){v=88;break a}h=w+4|0;c=n;while(1){g=k[w>>2]|0;b=k[a>>2]|0;e:do if((g|0)<(b|0)){f=a;e=a}else while(1){if((b|0)>=(g|0)?(k[h>>2]|0)<(k[a+4>>2]|0):0){f=a;e=a;break e}a=a+8|0;b=k[a>>2]|0;if((g|0)<(b|0)){f=a;e=a;break}}while(0);while(1){d=c+-8|0;a=k[d>>2]|0;if((g|0)<(a|0)){c=d;continue}if((a|0)<(g|0))break;if((k[h>>2]|0)<(k[c+-4>>2]|0))c=d;else break}if(e>>>0>=d>>>0){w=e;continue b}k[f>>2]=a;k[d>>2]=b;l=e+4|0;a=c+-4|0;c=k[l>>2]|0;k[l>>2]=k[a>>2];k[a>>2]=c;a=e+8|0;c=d}}while(0);b=w+8|0;f:do if(b>>>0<c>>>0){f=h;while(1){g=k[f>>2]|0;h=f+4|0;j=b;while(1){i=k[j>>2]|0;if((i|0)>=(g|0)){if((g|0)<(i|0))break;if((k[j+4>>2]|0)>=(k[h>>2]|0))break}j=j+8|0}d=c+-8|0;b=k[d>>2]|0;g:do if((b|0)<(g|0))g=d;else{e=c;while(1){e=e+-8|0;if((g|0)>=(b|0)?(k[c+-4>>2]|0)<(k[h>>2]|0):0){g=e;d=e;break g}c=d+-8|0;b=k[c>>2]|0;if((b|0)<(g|0)){g=c;d=c;c=e;break}else{x=d;d=c;c=e;e=x}}}while(0);if(j>>>0>g>>>0){g=j;break f}k[j>>2]=b;k[d>>2]=i;x=j+4|0;b=c+-4|0;c=k[x>>2]|0;k[x>>2]=k[b>>2];k[b>>2]=c;b=j+8|0;c=g;f=(f|0)==(j|0)?g:f;a=a+1|0}}else{g=b;f=h}while(0);do if((g|0)!=(f|0)){d=k[f>>2]|0;e=k[g>>2]|0;if((d|0)>=(e|0)){if((e|0)<(d|0))break;b=f+4|0;c=g+4|0;if((k[b>>2]|0)>=(k[c>>2]|0))break}else{c=g+4|0;b=f+4|0}k[g>>2]=d;k[f>>2]=e;x=k[c>>2]|0;k[c>>2]=k[b>>2];k[b>>2]=x;a=a+1|0}while(0);if(!a){a=jc(w,g)|0;b=g+8|0;if(jc(b,s)|0){v=83;break}if(a){w=b;continue}}x=g;if((x-l|0)>=(m-x|0)){v=87;break}ec(w,g);w=g+8|0}if((v|0)==83){v=0;if(a){v=88;break}else{a=w;s=g;continue}}else if((v|0)==87){v=0;ec(g+8|0,s);a=w;s=g;continue}}if((v|0)==4){b=s+-8|0;c=k[b>>2]|0;d=k[w>>2]|0;if((c|0)>=(d|0)){if((d|0)<(c|0))return;a=w+4|0;if((k[r>>2]|0)>=(k[a>>2]|0))return}else a=w+4|0;k[w>>2]=c;k[b>>2]=d;x=k[a>>2]|0;k[a>>2]=k[r>>2];k[r>>2]=x;return}else if((v|0)==9){gc(w,w+8|0,n)|0;return}else if((v|0)==10){hc(w,w+8|0,w+16|0,n)|0;return}else if((v|0)==11){ic(w,w+8|0,w+16|0,w+24|0,n)|0;return}else if((v|0)==13){b=w+16|0;gc(w,w+8|0,b)|0;a=w+24|0;if((a|0)==(s|0))return;while(1){c=k[a>>2]|0;e=k[b>>2]|0;if((c|0)>=(e|0)){if((e|0)>=(c|0)?(t=a+4|0,u=b+4|0,(k[t>>2]|0)<(k[u>>2]|0)):0){c=u;d=t;v=18}}else{c=b+4|0;d=a+4|0;v=18}if((v|0)==18){v=0;i=a;h=k[i>>2]|0;i=k[i+4>>2]|0;k[a>>2]=e;k[d>>2]=k[c>>2];h:do if((b|0)!=(w|0)){f=b;while(1){b=f+-8|0;g=k[b>>2]|0;if((h|0)>=(g|0)){if((g|0)<(h|0)){b=f;break h}e=f+-4|0;d=k[e>>2]|0;if((i|0)<(d|0))c=e;else{b=f;break h}}else{d=f+-4|0;c=d;d=k[d>>2]|0}k[f>>2]=g;k[f+4>>2]=d;if((b|0)==(w|0))break;else f=b}}while(0);k[b>>2]=h;k[c>>2]=i}b=a+8|0;if((b|0)==(s|0))break;else{x=a;a=b;b=x}}return}else if((v|0)==88)return}function fc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0;f=a+4|0;g=k[a>>2]|0;c=g;h=(k[f>>2]|0)-c|0;i=(h|0)/12|0;j=i+1|0;if(j>>>0>357913941)xa(1340,1363,303,1438);l=a+8|0;c=((k[l>>2]|0)-c|0)/12|0;if(c>>>0<178956970){c=c<<1;c=c>>>0<j>>>0?j:c;if(!c){c=0;d=0}else e=5}else{c=357913941;e=5}if((e|0)==5){e=c*12|0;e=(e|0)==0?1:e;d=_d(e)|0;a:do if(!d){while(1){d=k[35]|0;k[35]=d+0;if(!d)break;Xa[d&0]();d=_d(e)|0;if(d)break a}a=ya(4)|0;k[a>>2]=128;La(a|0,8,1)}while(0)}e=d+(i*12|0)|0;k[e>>2]=k[b>>2];k[e+4>>2]=k[b+4>>2];k[e+8>>2]=k[b+8>>2];b=d+((((h|0)/-12|0)+i|0)*12|0)|0;fe(b|0,g|0,h|0)|0;k[a>>2]=b;k[f>>2]=d+(j*12|0);k[l>>2]=d+(c*12|0);if(!g)return;$d(g);return}function gc(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0,f=0,g=0,h=0;d=k[b>>2]|0;e=k[a>>2]|0;if((d|0)>=(e|0))if((e|0)<(d|0))f=0;else f=(k[b+4>>2]|0)<(k[a+4>>2]|0);else f=1;h=k[c>>2]|0;if((h|0)>=(d|0))if((d|0)<(h|0))g=0;else g=(k[c+4>>2]|0)<(k[b+4>>2]|0);else g=1;if(!f){if(!g){b=0;return b|0}k[b>>2]=h;k[c>>2]=d;g=b+4|0;e=c+4|0;f=k[g>>2]|0;k[g>>2]=k[e>>2];k[e>>2]=f;e=k[b>>2]|0;f=k[a>>2]|0;if((e|0)>=(f|0)){if((f|0)<(e|0)){b=1;return b|0}d=a+4|0;if((k[g>>2]|0)>=(k[d>>2]|0)){b=1;return b|0}}else d=a+4|0;k[a>>2]=e;k[b>>2]=f;b=k[d>>2]|0;k[d>>2]=k[g>>2];k[g>>2]=b;b=2;return b|0}if(g){k[a>>2]=h;k[c>>2]=e;a=a+4|0;b=c+4|0;c=k[a>>2]|0;k[a>>2]=k[b>>2];k[b>>2]=c;b=1;return b|0}k[a>>2]=d;k[b>>2]=e;g=a+4|0;f=b+4|0;e=k[g>>2]|0;k[g>>2]=k[f>>2];k[f>>2]=e;g=k[c>>2]|0;h=k[b>>2]|0;if((g|0)>=(h|0)){if((h|0)<(g|0)){b=1;return b|0}d=c+4|0;if((k[d>>2]|0)>=(e|0)){b=1;return b|0}}else d=c+4|0;k[b>>2]=g;k[c>>2]=h;b=k[f>>2]|0;k[f>>2]=k[d>>2];k[d>>2]=b;b=2;return b|0}function hc(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0,j=0;j=gc(a,b,c)|0;g=k[d>>2]|0;h=k[c>>2]|0;if((g|0)>=(h|0)){if((h|0)<(g|0)){b=j;return b|0}e=d+4|0;f=c+4|0;if((k[e>>2]|0)<(k[f>>2]|0))i=f;else{b=j;return b|0}}else{e=d+4|0;i=c+4|0}k[c>>2]=g;k[d>>2]=h;g=k[i>>2]|0;k[i>>2]=k[e>>2];k[e>>2]=g;e=j+1|0;g=k[c>>2]|0;h=k[b>>2]|0;if((g|0)>=(h|0)){if((h|0)<(g|0)){b=e;return b|0}f=b+4|0;if((k[i>>2]|0)<(k[f>>2]|0))d=f;else{b=e;return b|0}}else d=b+4|0;k[b>>2]=g;k[c>>2]=h;f=k[d>>2]|0;k[d>>2]=k[i>>2];k[i>>2]=f;f=j+2|0;g=k[b>>2]|0;h=k[a>>2]|0;if((g|0)>=(h|0)){if((h|0)<(g|0)){b=f;return b|0}e=a+4|0;if((k[d>>2]|0)>=(k[e>>2]|0)){b=f;return b|0}}else e=a+4|0;k[a>>2]=g;k[b>>2]=h;b=k[e>>2]|0;k[e>>2]=k[d>>2];k[d>>2]=b;b=j+3|0;return b|0}function ic(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,l=0,m=0;m=hc(a,b,c,d)|0;h=k[e>>2]|0;i=k[d>>2]|0;if((h|0)>=(i|0)){if((i|0)<(h|0)){b=m;return b|0}f=e+4|0;g=d+4|0;if((k[f>>2]|0)<(k[g>>2]|0))l=g;else{b=m;return b|0}}else{f=e+4|0;l=d+4|0}k[d>>2]=h;k[e>>2]=i;h=k[l>>2]|0;k[l>>2]=k[f>>2];k[f>>2]=h;f=m+1|0;h=k[d>>2]|0;i=k[c>>2]|0;if((h|0)>=(i|0)){if((i|0)<(h|0)){b=f;return b|0}g=c+4|0;if((k[l>>2]|0)<(k[g>>2]|0))j=g;else{b=f;return b|0}}else j=c+4|0;k[c>>2]=h;k[d>>2]=i;f=k[j>>2]|0;k[j>>2]=k[l>>2];k[l>>2]=f;f=m+2|0;h=k[c>>2]|0;i=k[b>>2]|0;if((h|0)>=(i|0)){if((i|0)<(h|0)){b=f;return b|0}g=b+4|0;if((k[j>>2]|0)<(k[g>>2]|0))e=g;else{b=f;return b|0}}else e=b+4|0;k[b>>2]=h;k[c>>2]=i;g=k[e>>2]|0;k[e>>2]=k[j>>2];k[j>>2]=g;g=m+3|0;h=k[b>>2]|0;i=k[a>>2]|0;if((h|0)>=(i|0)){if((i|0)<(h|0)){b=g;return b|0}f=a+4|0;if((k[e>>2]|0)>=(k[f>>2]|0)){b=g;return b|0}}else f=a+4|0;k[a>>2]=h;k[b>>2]=i;b=k[f>>2]|0;k[f>>2]=k[e>>2];k[e>>2]=b;b=m+4|0;return b|0}function jc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0;switch(b-a>>3|0){case 2:{e=b+-8|0;f=k[e>>2]|0;g=k[a>>2]|0;if((f|0)>=(g|0)){if((g|0)<(f|0)){a=1;return a|0}c=b+-4|0;d=a+4|0;if((k[c>>2]|0)>=(k[d>>2]|0)){a=1;return a|0}}else{d=a+4|0;c=b+-4|0}k[a>>2]=f;k[e>>2]=g;a=k[d>>2]|0;k[d>>2]=k[c>>2];k[c>>2]=a;a=1;return a|0}case 3:{gc(a,a+8|0,b+-8|0)|0;a=1;return a|0}case 4:{hc(a,a+8|0,a+16|0,b+-8|0)|0;a=1;return a|0}case 5:{ic(a,a+8|0,a+16|0,a+24|0,b+-8|0)|0;a=1;return a|0}case 1:case 0:{a=1;return a|0}default:{e=a+16|0;gc(a,a+8|0,e)|0;d=a+24|0;if((d|0)==(b|0)){a=1;return a|0}else c=0;while(1){f=k[d>>2]|0;h=k[e>>2]|0;if((f|0)>=(h|0)){if((h|0)>=(f|0)?(n=d+4|0,o=e+4|0,(k[n>>2]|0)<(k[o>>2]|0)):0){f=o;g=n;p=15}}else{f=e+4|0;g=d+4|0;p=15}if((p|0)==15){p=0;m=d;l=k[m>>2]|0;m=k[m+4>>2]|0;k[d>>2]=h;k[g>>2]=k[f>>2];a:do if((e|0)!=(a|0)){j=e;while(1){e=j+-8|0;i=k[e>>2]|0;if((l|0)>=(i|0)){if((i|0)<(l|0)){e=j;break a}h=j+-4|0;g=k[h>>2]|0;if((m|0)<(g|0))f=h;else{e=j;break a}}else{g=j+-4|0;f=g;g=k[g>>2]|0}k[j>>2]=i;k[j+4>>2]=g;if((e|0)==(a|0))break;else j=e}}while(0);k[e>>2]=l;k[f>>2]=m;c=c+1|0;if((c|0)==8)break}e=d+8|0;if((e|0)==(b|0)){c=1;p=24;break}else{m=d;d=e;e=m}}if((p|0)==24)return c|0;a=(d+8|0)==(b|0);return a|0}}return 0}function kc(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0,g=0,h=0,i=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0;m=a+4|0;e=k[m>>2]|0;l=k[a>>2]|0;c=l;i=e-c>>5;j=i+1|0;if(j>>>0>134217727)xa(1340,1363,303,1438);n=a+8|0;d=(k[n>>2]|0)-c|0;if(d>>5>>>0<67108863){d=d>>4;d=d>>>0<j>>>0?j:d;if(!d){g=0;f=0}else h=5}else{d=134217727;h=5}if((h|0)==5){g=d<<5;g=(g|0)==0?1:g;f=_d(g)|0;a:do if(!f){while(1){f=k[35]|0;k[35]=f+0;if(!f)break;Xa[f&0]();f=_d(g)|0;if(f)break a}n=ya(4)|0;k[n>>2]=128;La(n|0,8,1)}while(0);g=d}h=f+(i<<5)|0;d=h;g=f+(g<<5)|0;k[h>>2]=k[b>>2];q=b+4|0;p=k[q+4>>2]|0;o=f+(i<<5)+4|0;k[o>>2]=k[q>>2];k[o+4>>2]=p;k[f+(i<<5)+12>>2]=k[b+12>>2];k[f+(i<<5)+16>>2]=k[b+16>>2];k[f+(i<<5)+20>>2]=k[b+20>>2];k[f+(i<<5)+24>>2]=k[b+24>>2];k[f+(i<<5)+28>>2]=k[b+28>>2];f=f+(j<<5)|0;if((e|0)==(l|0))e=a;else{c=h;do{q=e;e=e+-32|0;k[c+-32>>2]=k[e>>2];b=q+-28|0;o=k[b+4>>2]|0;p=c+-28|0;k[p>>2]=k[b>>2];k[p+4>>2]=o;k[c+-20>>2]=k[q+-20>>2];k[c+-16>>2]=k[q+-16>>2];k[c+-12>>2]=k[q+-12>>2];k[c+-8>>2]=k[q+-8>>2];k[c+-4>>2]=k[q+-4>>2];c=d+-32|0;d=c}while((e|0)!=(l|0));e=a;c=k[a>>2]|0}k[e>>2]=d;k[m>>2]=f;k[n>>2]=g;if(!c)return;$d(c);return}function lc(a,b,c,d,e,f,g,h,l,m){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;g=+g;h=h|0;l=l|0;m=m|0;var n=0,o=0,q=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0;_=r;r=r+256|0;R=_+72|0;S=_+56|0;y=_+32|0;t=_+232|0;E=_+220|0;u=_+245|0;v=_+216|0;w=_+244|0;x=_+212|0;O=_+200|0;P=_+184|0;J=_+168|0;M=_+152|0;N=_+124|0;L=_+120|0;K=_+24|0;Q=_+92|0;H=_+80|0;I=_;Z=_+188|0;Y=_+172|0;a=_+156|0;X=_+140|0;V=_+128|0;p[y>>3]=f;p[y+8>>3]=g;p[y+16>>3]=0.0;Nd(911,y);kb(Z,c,d,e);mc(Y,Z,f*3.141592653589793/180.0);W=Y+4|0;if((k[Y>>2]|0)!=(k[W>>2]|0)){k[X>>2]=0;U=X+4|0;k[U>>2]=0;k[X+8>>2]=0;k[V>>2]=0;T=V+4|0;k[T>>2]=0;k[V+8>>2]=0;p[I>>3]=g;p[I+8>>3]=0.0;k[I+16>>2]=X;k[I+20>>2]=V;e=(k[87]|0)>-1;a:do if(!2){a=954;G=6}else{b=954;a=954;while(1){if(!(i[b>>0]|0))break a;b=b+1|0;a=b;if(!(a&3)){a=b;G=6;break}}}while(0);if((G|0)==6){while(1){b=k[a>>2]|0;if(!((b&-2139062144^-2139062144)&b+-16843009))a=a+4|0;else break}if((b&255)<<24>>24)do a=a+1|0;while((i[a>>0]|0)!=0)}d=a-954|0;a=k[72]|0;b=(a|0)==0;b:do if(e){do if(b){a=i[346]|0;i[346]=a+255|a;a=k[68]|0;if(!(a&8)){k[70]=0;k[69]=0;b=k[79]|0;k[75]=b;k[73]=b;a=b+(k[80]|0)|0;k[72]=a;break}else{k[68]=a|32;a=0;G=28;break b}}else b=k[73]|0;while(0);if((a-b|0)>>>0<d>>>0){a=Ta[k[308>>2]&7](272,954,d)|0;G=28;break}else{fe(b|0,954,d|0)|0;k[73]=(k[73]|0)+d;G=30;break}}else{do if(b){a=i[346]|0;i[346]=a+255|a;a=k[68]|0;if(!(a&8)){k[70]=0;k[69]=0;b=k[79]|0;k[75]=b;k[73]=b;a=b+(k[80]|0)|0;k[72]=a;break}else{k[68]=a|32;a=0;G=28;break b}}else b=k[73]|0;while(0);if((a-b|0)>>>0<d>>>0){a=Ta[k[308>>2]&7](272,954,d)|0;G=28;break}else{fe(b|0,954,d|0)|0;k[73]=(k[73]|0)+d;G=30;break}}while(0);if((G|0)==28)if(!((a|0)!=(d|0)?((a>>>0)/(d>>>0)|0|0)<1:0))G=30;do if((G|0)==30){b=i[347]|0;if(b<<24>>24!=10){d=k[73]|0;a=k[72]|0;if(d>>>0<a>>>0){k[73]=d+1;i[d>>0]=10;break}}else a=k[72]|0;i[y>>0]=10;do if(!a){b=j[173]|0;a=(b&65535)<<24>>24;i[346]=a+255|a;a=k[68]|0;if(!(a&8)){k[70]=0;k[69]=0;d=k[79]|0;k[75]=d;k[73]=d;a=d+(k[80]|0)|0;k[72]=a;b=(b&65535)>>>8&255;G=39;break}else{k[68]=a|32;break}}else{d=k[73]|0;G=39}while(0);do if((G|0)==39)if(d>>>0>=a>>>0|b<<24>>24==10){Ta[k[308>>2]&7](272,y,1)|0;break}else{k[73]=d+1;i[d>>0]=10;break}while(0)}while(0);k[E>>2]=0;F=E+4|0;k[F>>2]=0;k[E+8>>2]=0;q=k[W>>2]|0;a=k[Y>>2]|0;b=(q-a|0)/44|0;e=b<<1;s=E+8|0;if((q|0)!=(a|0)){d=b<<6;d=(d|0)==0?1:d;b=_d(d)|0;c:do if(!b){while(1){b=k[35]|0;k[35]=b+0;if(!b)break;Xa[b&0]();b=_d(d)|0;if(b)break c}_=ya(4)|0;k[_>>2]=128;La(_|0,8,1)}while(0);d=b;n=b+(e<<5)|0;k[E>>2]=d;k[F>>2]=d;k[s>>2]=n;d=b;while(1){e=a+16|0;c=a+28|0;i[u>>0]=0;k[v>>2]=a;o=a;if(d>>>0<n>>>0){k[y>>2]=k[e>>2];k[y+4>>2]=k[e+4>>2];k[y+8>>2]=k[e+8>>2];k[t>>2]=k[c>>2];k[t+4>>2]=k[c+4>>2];k[t+8>>2]=k[c+8>>2];k[d>>2]=k[y>>2];k[d+4>>2]=k[y+4>>2];k[d+8>>2]=k[y+8>>2];D=d+12|0;k[D>>2]=k[t>>2];k[D+4>>2]=k[t+4>>2];k[D+8>>2]=k[t+8>>2];k[d+24>>2]=o;i[d+28>>0]=0;i[d+29>>0]=0;d=b+32|0;k[F>>2]=d;b=n}else{nc(E,e,c,u,v);d=k[F>>2]|0;b=k[s>>2]|0}i[w>>0]=1;k[x>>2]=a;if(d>>>0<b>>>0){k[y>>2]=k[c>>2];k[y+4>>2]=k[c+4>>2];k[y+8>>2]=k[c+8>>2];k[t>>2]=k[e>>2];k[t+4>>2]=k[e+4>>2];k[t+8>>2]=k[e+8>>2];k[d>>2]=k[y>>2];k[d+4>>2]=k[y+4>>2];k[d+8>>2]=k[y+8>>2];D=d+12|0;k[D>>2]=k[t>>2];k[D+4>>2]=k[t+4>>2];k[D+8>>2]=k[t+8>>2];k[d+24>>2]=o;i[d+28>>0]=1;i[d+29>>0]=0;k[F>>2]=(k[F>>2]|0)+32}else nc(E,c,e,w,x);a=a+44|0;if((a|0)==(q|0))break;b=k[F>>2]|0;d=b;n=k[s>>2]|0}c=k[E>>2]|0;b=k[F>>2]|0;oc(c,b);a=(c|0)==(b|0);if(!a){d=c;do{e=k[d+24>>2]|0;if(!(i[d+28>>0]|0))k[e+4>>2]=d;else k[e+8>>2]=d;d=d+32|0}while((d|0)!=(b|0))}}else{oc(0,0);b=0;c=0;a=1}k[S>>2]=b-c>>5;Nd(956,S);d:do if(a){d=b;a=b}else{a=c;while(1){if(!(k[a+8>>2]|0)){d=b;break d}a=a+32|0;if((a|0)==(b|0)){d=b;a=b;break}}}while(0);D=(a|0)==(d|0)?c:a;b=D+24|0;a=k[b>>2]|0;i[a+2>>0]=1;i[(k[a+4>>2]|0)+29>>0]=1;i[(k[a+8>>2]|0)+29>>0]=1;if(i[D+28>>0]|0){D=a+28|0;a=a+16|0;k[S>>2]=k[a>>2];k[S+4>>2]=k[a+4>>2];k[S+8>>2]=k[a+8>>2];k[a>>2]=k[D>>2];k[a+4>>2]=k[D+4>>2];k[a+8>>2]=k[D+8>>2];k[D>>2]=k[S>>2];k[D+4>>2]=k[S+4>>2];k[D+8>>2]=k[S+8>>2];a=k[b>>2]|0}pc(O,I,a,((k[W>>2]|0)-(k[Y>>2]|0)|0)==44);k[P>>2]=O;e=(k[87]|0)>-1;e:do if(!0){a=976;G=71}else{b=976;a=976;while(1){if(!(i[b>>0]|0))break e;b=b+1|0;a=b;if(!(a&3)){a=b;G=71;break}}}while(0);if((G|0)==71){while(1){b=k[a>>2]|0;if(!((b&-2139062144^-2139062144)&b+-16843009))a=a+4|0;else break}if((b&255)<<24>>24)do a=a+1|0;while((i[a>>0]|0)!=0)}d=a-976|0;a=k[72]|0;b=(a|0)==0;f:do if(e){do if(b){a=i[346]|0;i[346]=a+255|a;a=k[68]|0;if(!(a&8)){k[70]=0;k[69]=0;b=k[79]|0;k[75]=b;k[73]=b;a=b+(k[80]|0)|0;k[72]=a;break}else{k[68]=a|32;a=0;G=93;break f}}else b=k[73]|0;while(0);if((a-b|0)>>>0<d>>>0){a=Ta[k[308>>2]&7](272,976,d)|0;G=93;break}else{fe(b|0,976,d|0)|0;k[73]=(k[73]|0)+d;G=95;break}}else{do if(b){a=i[346]|0;i[346]=a+255|a;a=k[68]|0;if(!(a&8)){k[70]=0;k[69]=0;b=k[79]|0;k[75]=b;k[73]=b;a=b+(k[80]|0)|0;k[72]=a;break}else{k[68]=a|32;a=0;G=93;break f}}else b=k[73]|0;while(0);if((a-b|0)>>>0<d>>>0){a=Ta[k[308>>2]&7](272,976,d)|0;G=93;break}else{fe(b|0,976,d|0)|0;k[73]=(k[73]|0)+d;G=95;break}}while(0);if((G|0)==93)if(!((a|0)!=(d|0)?((a>>>0)/(d>>>0)|0|0)<1:0))G=95;do if((G|0)==95){d=i[347]|0;if(d<<24>>24!=10){a=k[73]|0;b=k[72]|0;if(a>>>0<b>>>0){k[73]=a+1;i[a>>0]=10;break}}else b=k[72]|0;i[S>>0]=10;do if(!b){d=j[173]|0;a=(d&65535)<<24>>24;i[346]=a+255|a;a=k[68]|0;if(!(a&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;b=e+(k[80]|0)|0;k[72]=b;a=(d&65535)>>>8&255;G=104;break}else{k[68]=a|32;break}}else{e=k[73]|0;a=d;G=104}while(0);do if((G|0)==104)if(e>>>0>=b>>>0|a<<24>>24==10){Ta[k[308>>2]&7](272,S,1)|0;break}else{k[73]=e+1;i[e>>0]=10;break}while(0)}while(0);b=((k[W>>2]|0)-(k[Y>>2]|0)|0)/44|0;if(b>>>0>1){w=O+4|0;x=O+8|0;y=Q+4|0;z=Q+8|0;A=Q+12|0;B=Q+16|0;C=Q+20|0;D=Q+24|0;a=k[E>>2]|0;v=k[F>>2]|0;u=1;do{k[R>>2]=u;k[R+4>>2]=b;Nd(978,R);t=a;q=k[O>>2]|0;s=k[w>>2]|0;d=v-t>>5;if(!d)b=a;else{e=t;b=a;do{o=(d|0)/2|0;c=e;n=k[c+(o<<5)>>2]|0;if((n|0)>=(q|0))if((n|0)==(q|0)?(k[c+(o<<5)+4>>2]|0)<(s|0):0)G=115;else d=o;else G=115;if((G|0)==115){G=0;e=c+(o+1<<5)|0;b=e;d=d+-1-o|0}}while((d|0)!=0)}k[J>>2]=t;k[M>>2]=0;k[N>>2]=2147483647;k[L>>2]=2147483647;p[K>>3]=17976931348623157.0e292;k[Q>>2]=P;k[y>>2]=O;k[z>>2]=M;k[A>>2]=K;k[B>>2]=N;k[C>>2]=L;k[D>>2]=J;g:do if((b|0)!=(v|0)){d=b;do{if(!(qc(Q,d)|0))break g;d=d+32|0}while((d|0)!=(v|0))}while(0);if((b|0)!=(a|0))do b=b+-32|0;while(!((b|0)==(a|0)|(qc(Q,b)|0)^1));if(!(k[x>>2]|0)){if(k[(k[J>>2]|0)+8>>2]|0){c=(k[87]|0)>-1;h:do if(!3){b=999;G=127}else{d=999;b=999;while(1){if(!(i[d>>0]|0))break h;d=d+1|0;b=d;if(!(b&3)){b=d;G=127;break}}}while(0);if((G|0)==127){while(1){d=k[b>>2]|0;if(!((d&-2139062144^-2139062144)&d+-16843009))b=b+4|0;else break}if((d&255)<<24>>24)do b=b+1|0;while((i[b>>0]|0)!=0)}e=b-999|0;b=k[72]|0;d=(b|0)==0;i:do if(c){do if(d){b=i[346]|0;i[346]=b+255|b;b=k[68]|0;if(!(b&8)){k[70]=0;k[69]=0;d=k[79]|0;k[75]=d;k[73]=d;b=d+(k[80]|0)|0;k[72]=b;break}else{k[68]=b|32;b=0;G=149;break i}}else d=k[73]|0;while(0);if((b-d|0)>>>0<e>>>0){b=Ta[k[308>>2]&7](272,999,e)|0;G=149;break}else{fe(d|0,999,e|0)|0;k[73]=(k[73]|0)+e;G=151;break}}else{do if(d){b=i[346]|0;i[346]=b+255|b;b=k[68]|0;if(!(b&8)){k[70]=0;k[69]=0;d=k[79]|0;k[75]=d;k[73]=d;b=d+(k[80]|0)|0;k[72]=b;break}else{k[68]=b|32;b=0;G=149;break i}}else d=k[73]|0;while(0);if((b-d|0)>>>0<e>>>0){b=Ta[k[308>>2]&7](272,999,e)|0;G=149;break}else{fe(d|0,999,e|0)|0;k[73]=(k[73]|0)+e;G=151;break}}while(0);do if((G|0)==149){G=0;if((b|0)==(e|0)){G=151;break}if(((b>>>0)/(e>>>0)|0|0)>=1)G=151}while(0);j:do if((G|0)==151){G=0;e=i[347]|0;do if(e<<24>>24==10)d=k[72]|0;else{b=k[73]|0;d=k[72]|0;if(b>>>0>=d>>>0)break;k[73]=b+1;i[b>>0]=10;break j}while(0);i[S>>0]=10;do if(!d){e=j[173]|0;b=(e&65535)<<24>>24;i[346]=b+255|b;b=k[68]|0;if(!(b&8)){k[70]=0;k[69]=0;c=k[79]|0;k[75]=c;k[73]=c;d=c+(k[80]|0)|0;k[72]=d;b=(e&65535)>>>8&255;G=160;break}else{k[68]=b|32;break}}else{c=k[73]|0;b=e;G=160}while(0);do if((G|0)==160){G=0;if(c>>>0>=d>>>0|b<<24>>24==10){Ta[k[308>>2]&7](272,S,1)|0;break}else{k[73]=c+1;i[c>>0]=10;break}}while(0)}while(0);if(k[x>>2]|0)G=165}}else G=165;k:do if((G|0)==165?(G=0,(k[(k[J>>2]|0)+8>>2]|0)==0):0){c=(k[87]|0)>-1;l:do if(!0){b=1004;G=169}else{b=1004;d=1004;while(1){if(!(i[b>>0]|0)){b=d;break l}b=b+1|0;d=b;if(!(d&3)){G=169;break}}}while(0);if((G|0)==169){G=0;while(1){d=k[b>>2]|0;if(!((d&-2139062144^-2139062144)&d+-16843009))b=b+4|0;else break}if((d&255)<<24>>24)do b=b+1|0;while((i[b>>0]|0)!=0)}e=b-1004|0;b=k[72]|0;d=(b|0)==0;m:do if(c){do if(d){b=i[346]|0;i[346]=b+255|b;b=k[68]|0;if(!(b&8)){k[70]=0;k[69]=0;d=k[79]|0;k[75]=d;k[73]=d;b=d+(k[80]|0)|0;k[72]=b;break}else{k[68]=b|32;b=0;G=191;break m}}else d=k[73]|0;while(0);if((b-d|0)>>>0<e>>>0){b=Ta[k[308>>2]&7](272,1004,e)|0;G=191;break}else{fe(d|0,1004,e|0)|0;k[73]=(k[73]|0)+e;break}}else{do if(d){b=i[346]|0;i[346]=b+255|b;b=k[68]|0;if(!(b&8)){k[70]=0;k[69]=0;d=k[79]|0;k[75]=d;k[73]=d;b=d+(k[80]|0)|0;k[72]=b;break}else{k[68]=b|32;b=0;G=191;break m}}else d=k[73]|0;while(0);if((b-d|0)>>>0<e>>>0){b=Ta[k[308>>2]&7](272,1004,e)|0;G=191;break}else{fe(d|0,1004,e|0)|0;k[73]=(k[73]|0)+e;break}}while(0);do if((G|0)==191){G=0;if((b|0)==(e|0))break;if(((b>>>0)/(e>>>0)|0|0)<1)break k}while(0);e=i[347]|0;do if(e<<24>>24==10)d=k[72]|0;else{b=k[73]|0;d=k[72]|0;if(b>>>0>=d>>>0)break;k[73]=b+1;i[b>>0]=10;break k}while(0);i[S>>0]=10;do if(!d){e=j[173]|0;b=(e&65535)<<24>>24;i[346]=b+255|b;b=k[68]|0;if(!(b&8)){k[70]=0;k[69]=0;c=k[79]|0;k[75]=c;k[73]=c;d=c+(k[80]|0)|0;k[72]=d;b=(e&65535)>>>8&255;G=202;break}else{k[68]=b|32;break}}else{c=k[73]|0;b=e;G=202}while(0);do if((G|0)==202){G=0;if(c>>>0>=d>>>0|b<<24>>24==10){Ta[k[308>>2]&7](272,S,1)|0;break}else{k[73]=c+1;i[c>>0]=10;break}}while(0)}while(0);E=k[J>>2]|0;b=E+24|0;d=k[b>>2]|0;i[d+2>>0]=1;i[(k[d+4>>2]|0)+29>>0]=1;i[(k[d+8>>2]|0)+29>>0]=1;if(i[E+28>>0]|0){E=d+28|0;d=d+16|0;k[S>>2]=k[d>>2];k[S+4>>2]=k[d+4>>2];k[S+8>>2]=k[d+8>>2];k[d>>2]=k[E>>2];k[d+4>>2]=k[E+4>>2];k[d+8>>2]=k[E+8>>2];k[E>>2]=k[S>>2];k[E+4>>2]=k[S+4>>2];k[E+8>>2]=k[S+8>>2];d=k[b>>2]|0}b=((k[W>>2]|0)-(k[Y>>2]|0)|0)/44|0;u=u+1|0;pc(H,I,d,(b|0)==(u|0));k[O>>2]=k[H>>2];k[O+4>>2]=k[H+4>>2];k[O+8>>2]=k[H+8>>2]}while(u>>>0<b>>>0)}else a=k[E>>2]|0;b=a;if(a){d=k[F>>2]|0;if((d|0)!=(a|0))k[F>>2]=d+(~((d+-32-b|0)>>>5)<<5);$d(a)}e=(k[87]|0)>-1;n:do if(!0){a=1012;G=216}else{b=1012;a=1012;while(1){if(!(i[b>>0]|0))break n;b=b+1|0;a=b;if(!(a&3)){a=b;G=216;break}}}while(0);if((G|0)==216){while(1){b=k[a>>2]|0;if(!((b&-2139062144^-2139062144)&b+-16843009))a=a+4|0;else break}if((b&255)<<24>>24)do a=a+1|0;while((i[a>>0]|0)!=0)}d=a-1012|0;a=k[72]|0;b=(a|0)==0;o:do if(e){do if(b){a=i[346]|0;i[346]=a+255|a;a=k[68]|0;if(!(a&8)){k[70]=0;k[69]=0;b=k[79]|0;k[75]=b;k[73]=b;a=b+(k[80]|0)|0;k[72]=a;break}else{k[68]=a|32;a=0;G=238;break o}}else b=k[73]|0;while(0);if((a-b|0)>>>0<d>>>0){a=Ta[k[308>>2]&7](272,1012,d)|0;G=238;break}else{fe(b|0,1012,d|0)|0;k[73]=(k[73]|0)+d;G=240;break}}else{do if(b){a=i[346]|0;i[346]=a+255|a;a=k[68]|0;if(!(a&8)){k[70]=0;k[69]=0;b=k[79]|0;k[75]=b;k[73]=b;a=b+(k[80]|0)|0;k[72]=a;break}else{k[68]=a|32;a=0;G=238;break o}}else b=k[73]|0;while(0);if((a-b|0)>>>0<d>>>0){a=Ta[k[308>>2]&7](272,1012,d)|0;G=238;break}else{fe(b|0,1012,d|0)|0;k[73]=(k[73]|0)+d;G=240;break}}while(0);if((G|0)==238)if(!((a|0)!=(d|0)?((a>>>0)/(d>>>0)|0|0)<1:0))G=240;do if((G|0)==240){d=i[347]|0;if(d<<24>>24!=10){a=k[73]|0;b=k[72]|0;if(a>>>0<b>>>0){k[73]=a+1;i[a>>0]=10;break}}else b=k[72]|0;i[S>>0]=10;do if(!b){d=j[173]|0;a=(d&65535)<<24>>24;i[346]=a+255|a;a=k[68]|0;if(!(a&8)){k[70]=0;k[69]=0;e=k[79]|0;k[75]=e;k[73]=e;b=e+(k[80]|0)|0;k[72]=b;a=(d&65535)>>>8&255;G=249;break}else{k[68]=a|32;break}}else{e=k[73]|0;a=d;G=249}while(0);do if((G|0)==249)if(e>>>0>=b>>>0|a<<24>>24==10){Ta[k[308>>2]&7](272,S,1)|0;break}else{k[73]=e+1;i[e>>0]=10;break}while(0)}while(0);jb(h,l,m,V);a=k[V>>2]|0;if(a){b=k[T>>2]|0;if((b|0)!=(a|0)){do{d=b+-12|0;k[T>>2]=d;e=k[d>>2]|0;c=e;if(!e)b=d;else{b=b+-8|0;d=k[b>>2]|0;if((d|0)!=(e|0))k[b>>2]=d+(~(((d+-12-c|0)>>>0)/12|0)*12|0);$d(e);b=k[T>>2]|0}}while((b|0)!=(a|0));a=k[V>>2]|0}$d(a)}a=k[X>>2]|0;if(a){b=k[U>>2]|0;if((b|0)!=(a|0))k[U>>2]=b+(~(((b+-44-a|0)>>>0)/44|0)*44|0);$d(a)}}else{k[a>>2]=0;k[a+4>>2]=0;k[a+8>>2]=0;jb(h,l,m,a)}a=k[Y>>2]|0;if(a){b=k[W>>2]|0;if((b|0)!=(a|0))k[W>>2]=b+(~(((b+-44-a|0)>>>0)/44|0)*44|0);$d(a)}o=k[Z>>2]|0;if(!o){r=_;return}n=Z+4|0;a=k[n>>2]|0;if((a|0)!=(o|0)){do{b=a;a=a+-12|0;e=k[a>>2]|0;c=e;if(e){b=b+-8|0;d=k[b>>2]|0;if((d|0)!=(e|0))k[b>>2]=d+(~((d+-8-c|0)>>>3)<<3);$d(e)}}while((a|0)!=(o|0));k[n>>2]=o}$d(o);r=_;return}\\n\\n// EMSCRIPTEN_END_FUNCS\\nvar Ta=[ze,yd,Sd,Qd,Rd,ze,ze,ze];var Ua=[Ae,Ed,Dd,Ae];var Va=[Be,qd,rd,td,wd,ud,vd,xd,Wd,Be,Be,Be,Be,Be,Be,Be];var Wa=[Ce,sd,Pd,Ce];var Xa=[De];var Ya=[Ee,Gd,Fd,Ee];var Za=[Fe,nb,pb,zc,Dc,Fe,Fe,Fe];var _a=[Ge,zd,Ad,Ge];return{___cxa_can_catch:Hd,_free:$d,___cxa_is_pointer_type:Id,_i64Add:ge,_memmove:he,_vCarve:lc,_i64Subtract:be,_memset:ce,_malloc:_d,_separateTabs:lb,_memcpy:fe,_bitshift64Lshr:de,_bitshift64Shl:ee,runPostSets:ae,_emscripten_replace_memory:Sa,stackAlloc:$a,stackSave:ab,stackRestore:bb,establishStackSpace:cb,setThrew:db,setTempRet0:gb,getTempRet0:hb,dynCall_iiii:re,dynCall_viiiii:se,dynCall_vi:te,dynCall_ii:ue,dynCall_v:ve,dynCall_viiiiii:we,dynCall_iii:xe,dynCall_viiii:ye}})\\n\\n\\n// EMSCRIPTEN_END_ASM\\n(Module.asmGlobalArg,Module.asmLibraryArg,buffer);var ___cxa_can_catch=Module[\\\"___cxa_can_catch\\\"]=asm[\\\"___cxa_can_catch\\\"];var _free=Module[\\\"_free\\\"]=asm[\\\"_free\\\"];var runPostSets=Module[\\\"runPostSets\\\"]=asm[\\\"runPostSets\\\"];var ___cxa_is_pointer_type=Module[\\\"___cxa_is_pointer_type\\\"]=asm[\\\"___cxa_is_pointer_type\\\"];var _i64Add=Module[\\\"_i64Add\\\"]=asm[\\\"_i64Add\\\"];var _memmove=Module[\\\"_memmove\\\"]=asm[\\\"_memmove\\\"];var _vCarve=Module[\\\"_vCarve\\\"]=asm[\\\"_vCarve\\\"];var _i64Subtract=Module[\\\"_i64Subtract\\\"]=asm[\\\"_i64Subtract\\\"];var _memset=Module[\\\"_memset\\\"]=asm[\\\"_memset\\\"];var _malloc=Module[\\\"_malloc\\\"]=asm[\\\"_malloc\\\"];var _separateTabs=Module[\\\"_separateTabs\\\"]=asm[\\\"_separateTabs\\\"];var _memcpy=Module[\\\"_memcpy\\\"]=asm[\\\"_memcpy\\\"];var _emscripten_replace_memory=Module[\\\"_emscripten_replace_memory\\\"]=asm[\\\"_emscripten_replace_memory\\\"];var _bitshift64Lshr=Module[\\\"_bitshift64Lshr\\\"]=asm[\\\"_bitshift64Lshr\\\"];var _bitshift64Shl=Module[\\\"_bitshift64Shl\\\"]=asm[\\\"_bitshift64Shl\\\"];var dynCall_iiii=Module[\\\"dynCall_iiii\\\"]=asm[\\\"dynCall_iiii\\\"];var dynCall_viiiii=Module[\\\"dynCall_viiiii\\\"]=asm[\\\"dynCall_viiiii\\\"];var dynCall_vi=Module[\\\"dynCall_vi\\\"]=asm[\\\"dynCall_vi\\\"];var dynCall_ii=Module[\\\"dynCall_ii\\\"]=asm[\\\"dynCall_ii\\\"];var dynCall_v=Module[\\\"dynCall_v\\\"]=asm[\\\"dynCall_v\\\"];var dynCall_viiiiii=Module[\\\"dynCall_viiiiii\\\"]=asm[\\\"dynCall_viiiiii\\\"];var dynCall_iii=Module[\\\"dynCall_iii\\\"]=asm[\\\"dynCall_iii\\\"];var dynCall_viiii=Module[\\\"dynCall_viiii\\\"]=asm[\\\"dynCall_viiii\\\"];Runtime.stackAlloc=asm[\\\"stackAlloc\\\"];Runtime.stackSave=asm[\\\"stackSave\\\"];Runtime.stackRestore=asm[\\\"stackRestore\\\"];Runtime.establishStackSpace=asm[\\\"establishStackSpace\\\"];Runtime.setTempRet0=asm[\\\"setTempRet0\\\"];Runtime.getTempRet0=asm[\\\"getTempRet0\\\"];function ExitStatus(status){this.name=\\\"ExitStatus\\\";this.message=\\\"Program terminated with exit(\\\"+status+\\\")\\\";this.status=status}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;var initialStackTop;var preloadStartTime=null;var calledMain=false;dependenciesFulfilled=function runCaller(){if(!Module[\\\"calledRun\\\"])run();if(!Module[\\\"calledRun\\\"])dependenciesFulfilled=runCaller};Module[\\\"callMain\\\"]=Module.callMain=function callMain(args){assert(runDependencies==0,\\\"cannot call main when async dependencies remain! (listen on __ATMAIN__)\\\");assert(__ATPRERUN__.length==0,\\\"cannot call main when preRun functions remain to be called\\\");args=args||[];ensureInitRuntime();var argc=args.length+1;function pad(){for(var i=0;i<4-1;i++){argv.push(0)}}var argv=[allocate(intArrayFromString(Module[\\\"thisProgram\\\"]),\\\"i8\\\",ALLOC_NORMAL)];pad();for(var i=0;i<argc-1;i=i+1){argv.push(allocate(intArrayFromString(args[i]),\\\"i8\\\",ALLOC_NORMAL));pad()}argv.push(0);argv=allocate(argv,\\\"i32\\\",ALLOC_NORMAL);try{var ret=Module[\\\"_main\\\"](argc,argv,0);exit(ret,true)}catch(e){if(e instanceof ExitStatus){return}else if(e==\\\"SimulateInfiniteLoop\\\"){Module[\\\"noExitRuntime\\\"]=true;return}else{if(e&&typeof e===\\\"object\\\"&&e.stack)Module.printErr(\\\"exception thrown: \\\"+[e,e.stack]);throw e}}finally{calledMain=true}};function run(args){args=args||Module[\\\"arguments\\\"];if(preloadStartTime===null)preloadStartTime=Date.now();if(runDependencies>0){return}preRun();if(runDependencies>0)return;if(Module[\\\"calledRun\\\"])return;function doRun(){if(Module[\\\"calledRun\\\"])return;Module[\\\"calledRun\\\"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(Module[\\\"onRuntimeInitialized\\\"])Module[\\\"onRuntimeInitialized\\\"]();if(Module[\\\"_main\\\"]&&shouldRunNow)Module[\\\"callMain\\\"](args);postRun()}if(Module[\\\"setStatus\\\"]){Module[\\\"setStatus\\\"](\\\"Running...\\\");setTimeout((function(){setTimeout((function(){Module[\\\"setStatus\\\"](\\\"\\\")}),1);doRun()}),1)}else{doRun()}}Module[\\\"run\\\"]=Module.run=run;function exit(status,implicit){if(implicit&&Module[\\\"noExitRuntime\\\"]){return}if(Module[\\\"noExitRuntime\\\"]){}else{ABORT=true;EXITSTATUS=status;STACKTOP=initialStackTop;exitRuntime();if(Module[\\\"onExit\\\"])Module[\\\"onExit\\\"](status)}if(ENVIRONMENT_IS_NODE){process[\\\"stdout\\\"][\\\"once\\\"](\\\"drain\\\",(function(){process[\\\"exit\\\"](status)}));console.log(\\\" \\\");setTimeout((function(){process[\\\"exit\\\"](status)}),500)}else if(ENVIRONMENT_IS_SHELL&&typeof quit===\\\"function\\\"){quit(status)}throw new ExitStatus(status)}Module[\\\"exit\\\"]=Module.exit=exit;var abortDecorators=[];function abort(what){if(what!==undefined){Module.print(what);Module.printErr(what);what=JSON.stringify(what)}else{what=\\\"\\\"}ABORT=true;EXITSTATUS=1;var extra=\\\"\\\\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.\\\";var output=\\\"abort(\\\"+what+\\\") at \\\"+stackTrace()+extra;if(abortDecorators){abortDecorators.forEach((function(decorator){output=decorator(output,what)}))}throw output}Module[\\\"abort\\\"]=Module.abort=abort;if(Module[\\\"preInit\\\"]){if(typeof Module[\\\"preInit\\\"]==\\\"function\\\")Module[\\\"preInit\\\"]=[Module[\\\"preInit\\\"]];while(Module[\\\"preInit\\\"].length>0){Module[\\\"preInit\\\"].pop()()}}var shouldRunNow=true;if(Module[\\\"noInitialRun\\\"]){shouldRunNow=false}Module[\\\"noExitRuntime\\\"]=true;run()\\n\\n\\n\\n\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/raw-loader!../~/web-cam-cpp/web-cam-cpp.js\n// module id = 25\n// module chunks = 0","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nmodule.exports = function(src) {\r\n\tif (typeof execScript !== \"undefined\")\r\n\t\texecScript(src);\r\n\telse\r\n\t\teval.call(null, src);\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/script-loader/addScript.js\n// module id = 26\n// module chunks = 0","require(\"!!/Users/jorgerobles/repos_1/LaserWeb4/node_modules/script-loader/addScript.js\")(require(\"!!/Users/jorgerobles/repos_1/LaserWeb4/node_modules/raw-loader/index.js!/Users/jorgerobles/repos_1/LaserWeb4/node_modules/web-cam-cpp/web-cam-cpp.js\"))\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/script-loader!../~/web-cam-cpp/web-cam-cpp.js\n// module id = 27\n// module chunks = 0","window.eve = require('eve')\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar mina = (function (eve) {\n    var animations = {},\n    requestAnimFrame = window.requestAnimationFrame       ||\n                       window.webkitRequestAnimationFrame ||\n                       window.mozRequestAnimationFrame    ||\n                       window.oRequestAnimationFrame      ||\n                       window.msRequestAnimationFrame     ||\n                       function (callback) {\n                           setTimeout(callback, 16);\n                       },\n    isArray = Array.isArray || function (a) {\n        return a instanceof Array ||\n            Object.prototype.toString.call(a) == \"[object Array]\";\n    },\n    idgen = 0,\n    idprefix = \"M\" + (+new Date).toString(36),\n    ID = function () {\n        return idprefix + (idgen++).toString(36);\n    },\n    diff = function (a, b, A, B) {\n        if (isArray(a)) {\n            res = [];\n            for (var i = 0, ii = a.length; i < ii; i++) {\n                res[i] = diff(a[i], b, A[i], B);\n            }\n            return res;\n        }\n        var dif = (A - a) / (B - b);\n        return function (bb) {\n            return a + dif * (bb - b);\n        };\n    },\n    timer = Date.now || function () {\n        return +new Date;\n    },\n    sta = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.s;\n        }\n        var ds = a.s - val;\n        a.b += a.dur * ds;\n        a.B += a.dur * ds;\n        a.s = val;\n    },\n    speed = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.spd;\n        }\n        a.spd = val;\n    },\n    duration = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.dur;\n        }\n        a.s = a.s * val / a.dur;\n        a.dur = val;\n    },\n    stopit = function () {\n        var a = this;\n        delete animations[a.id];\n        a.update();\n        eve(\"mina.stop.\" + a.id, a);\n    },\n    pause = function () {\n        var a = this;\n        if (a.pdif) {\n            return;\n        }\n        delete animations[a.id];\n        a.update();\n        a.pdif = a.get() - a.b;\n    },\n    resume = function () {\n        var a = this;\n        if (!a.pdif) {\n            return;\n        }\n        a.b = a.get() - a.pdif;\n        delete a.pdif;\n        animations[a.id] = a;\n    },\n    update = function () {\n        var a = this,\n            res;\n        if (isArray(a.start)) {\n            res = [];\n            for (var j = 0, jj = a.start.length; j < jj; j++) {\n                res[j] = +a.start[j] +\n                    (a.end[j] - a.start[j]) * a.easing(a.s);\n            }\n        } else {\n            res = +a.start + (a.end - a.start) * a.easing(a.s);\n        }\n        a.set(res);\n    },\n    frame = function () {\n        var len = 0;\n        for (var i in animations) if (animations.hasOwnProperty(i)) {\n            var a = animations[i],\n                b = a.get(),\n                res;\n            len++;\n            a.s = (b - a.b) / (a.dur / a.spd);\n            if (a.s >= 1) {\n                delete animations[i];\n                a.s = 1;\n                len--;\n                (function (a) {\n                    setTimeout(function () {\n                        eve(\"mina.finish.\" + a.id, a);\n                    });\n                }(a));\n            }\n            a.update();\n        }\n        len && requestAnimFrame(frame);\n    },\n    /*\\\n     * mina\n     [ method ]\n     **\n     * Generic animation of numbers\n     **\n     - a (number) start _slave_ number\n     - A (number) end _slave_ number\n     - b (number) start _master_ number (start time in general case)\n     - B (number) end _master_ number (end time in gereal case)\n     - get (function) getter of _master_ number (see @mina.time)\n     - set (function) setter of _slave_ number\n     - easing (function) #optional easing function, default is @mina.linear\n     = (object) animation descriptor\n     o {\n     o         id (string) animation id,\n     o         start (number) start _slave_ number,\n     o         end (number) end _slave_ number,\n     o         b (number) start _master_ number,\n     o         s (number) animation status (0..1),\n     o         dur (number) animation duration,\n     o         spd (number) animation speed,\n     o         get (function) getter of _master_ number (see @mina.time),\n     o         set (function) setter of _slave_ number,\n     o         easing (function) easing function, default is @mina.linear,\n     o         status (function) status getter/setter,\n     o         speed (function) speed getter/setter,\n     o         duration (function) duration getter/setter,\n     o         stop (function) animation stopper\n     o         pause (function) pauses the animation\n     o         resume (function) resumes the animation\n     o         update (function) calles setter with the right value of the animation\n     o }\n    \\*/\n    mina = function (a, A, b, B, get, set, easing) {\n        var anim = {\n            id: ID(),\n            start: a,\n            end: A,\n            b: b,\n            s: 0,\n            dur: B - b,\n            spd: 1,\n            get: get,\n            set: set,\n            easing: easing || mina.linear,\n            status: sta,\n            speed: speed,\n            duration: duration,\n            stop: stopit,\n            pause: pause,\n            resume: resume,\n            update: update\n        };\n        animations[anim.id] = anim;\n        var len = 0, i;\n        for (i in animations) if (animations.hasOwnProperty(i)) {\n            len++;\n            if (len == 2) {\n                break;\n            }\n        }\n        len == 1 && requestAnimFrame(frame);\n        return anim;\n    };\n    /*\\\n     * mina.time\n     [ method ]\n     **\n     * Returns the current time. Equivalent to:\n     | function () {\n     |     return (new Date).getTime();\n     | }\n    \\*/\n    mina.time = timer;\n    /*\\\n     * mina.getById\n     [ method ]\n     **\n     * Returns an animation by its id\n     - id (string) animation's id\n     = (object) See @mina\n    \\*/\n    mina.getById = function (id) {\n        return animations[id] || null;\n    };\n\n    /*\\\n     * mina.linear\n     [ method ]\n     **\n     * Default linear easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.linear = function (n) {\n        return n;\n    };\n    /*\\\n     * mina.easeout\n     [ method ]\n     **\n     * Easeout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeout = function (n) {\n        return Math.pow(n, 1.7);\n    };\n    /*\\\n     * mina.easein\n     [ method ]\n     **\n     * Easein easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easein = function (n) {\n        return Math.pow(n, .48);\n    };\n    /*\\\n     * mina.easeinout\n     [ method ]\n     **\n     * Easeinout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeinout = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        var q = .48 - n / 1.04,\n            Q = Math.sqrt(.1734 + q * q),\n            x = Q - q,\n            X = Math.pow(Math.abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n            y = -Q - q,\n            Y = Math.pow(Math.abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n            t = X + Y + .5;\n        return (1 - t) * 3 * t * t + t * t * t;\n    };\n    /*\\\n     * mina.backin\n     [ method ]\n     **\n     * Backin easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backin = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        var s = 1.70158;\n        return n * n * ((s + 1) * n - s);\n    };\n    /*\\\n     * mina.backout\n     [ method ]\n     **\n     * Backout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backout = function (n) {\n        if (n == 0) {\n            return 0;\n        }\n        n = n - 1;\n        var s = 1.70158;\n        return n * n * ((s + 1) * n + s) + 1;\n    };\n    /*\\\n     * mina.elastic\n     [ method ]\n     **\n     * Elastic easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.elastic = function (n) {\n        if (n == !!n) {\n            return n;\n        }\n        return Math.pow(2, -10 * n) * Math.sin((n - .075) *\n            (2 * Math.PI) / .3) + 1;\n    };\n    /*\\\n     * mina.bounce\n     [ method ]\n     **\n     * Bounce easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.bounce = function (n) {\n        var s = 7.5625,\n            p = 2.75,\n            l;\n        if (n < (1 / p)) {\n            l = s * n * n;\n        } else {\n            if (n < (2 / p)) {\n                n -= (1.5 / p);\n                l = s * n * n + .75;\n            } else {\n                if (n < (2.5 / p)) {\n                    n -= (2.25 / p);\n                    l = s * n * n + .9375;\n                } else {\n                    n -= (2.625 / p);\n                    l = s * n * n + .984375;\n                }\n            }\n        }\n        return l;\n    };\n    window.mina = mina;\n    return mina;\n})(typeof eve == \"undefined\" ? function () {} : eve);\n// Copyright (c) 2013 - 2015 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar Snap = (function(root) {\nSnap.version = \"0.4.0\";\n/*\\\n * Snap\n [ method ]\n **\n * Creates a drawing surface or wraps existing SVG element.\n **\n - width (number|string) width of surface\n - height (number|string) height of surface\n * or\n - DOM (SVGElement) element to be wrapped into Snap structure\n * or\n - array (array) array of elements (will return set of elements)\n * or\n - query (string) CSS query selector\n = (object) @Element\n\\*/\nfunction Snap(w, h) {\n    if (w) {\n        if (w.nodeType) {\n            return wrap(w);\n        }\n        if (is(w, \"array\") && Snap.set) {\n            return Snap.set.apply(Snap, w);\n        }\n        if (w instanceof Element) {\n            return w;\n        }\n        if (h == null) {\n            w = glob.doc.querySelector(String(w));\n            return wrap(w);\n        }\n    }\n    w = w == null ? \"100%\" : w;\n    h = h == null ? \"100%\" : h;\n    return new Paper(w, h);\n}\nSnap.toString = function () {\n    return \"Snap v\" + this.version;\n};\nSnap._ = {};\nvar glob = {\n    win: root.window,\n    doc: root.window.document\n};\nSnap._.glob = glob;\nvar has = \"hasOwnProperty\",\n    Str = String,\n    toFloat = parseFloat,\n    toInt = parseInt,\n    math = Math,\n    mmax = math.max,\n    mmin = math.min,\n    abs = math.abs,\n    pow = math.pow,\n    PI = math.PI,\n    round = math.round,\n    E = \"\",\n    S = \" \",\n    objectToString = Object.prototype.toString,\n    ISURL = /^url\\(['\"]?([^\\)]+?)['\"]?\\)$/i,\n    colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\))\\s*$/i,\n    bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n    reURLValue = /^url\\(#?([^)]+)\\)$/,\n    separator = Snap._.separator = /[,\\s]+/,\n    whitespace = /[\\s]/g,\n    commaSpaces = /[\\s]*,[\\s]*/,\n    hsrg = {hs: 1, rg: 1},\n    pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    tCommand = /([rstm])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\\\d+)?)[\\s]*,?[\\s]*/ig,\n    idgen = 0,\n    idprefix = \"S\" + (+new Date).toString(36),\n    ID = function (el) {\n        return (el && el.type ? el.type : E) + idprefix + (idgen++).toString(36);\n    },\n    xlink = \"http://www.w3.org/1999/xlink\",\n    xmlns = \"http://www.w3.org/2000/svg\",\n    hub = {},\n    URL = Snap.url = function (url) {\n        return \"url('#\" + url + \"')\";\n    };\n\nfunction $(el, attr) {\n    if (attr) {\n        if (el == \"#text\") {\n            el = glob.doc.createTextNode(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (el == \"#comment\") {\n            el = glob.doc.createComment(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (typeof el == \"string\") {\n            el = $(el);\n        }\n        if (typeof attr == \"string\") {\n            if (el.nodeType == 1) {\n                if (attr.substring(0, 6) == \"xlink:\") {\n                    return el.getAttributeNS(xlink, attr.substring(6));\n                }\n                if (attr.substring(0, 4) == \"xml:\") {\n                    return el.getAttributeNS(xmlns, attr.substring(4));\n                }\n                return el.getAttribute(attr);\n            } else if (attr == \"text\") {\n                return el.nodeValue;\n            } else {\n                return null;\n            }\n        }\n        if (el.nodeType == 1) {\n            for (var key in attr) if (attr[has](key)) {\n                var val = Str(attr[key]);\n                if (val) {\n                    if (key.substring(0, 6) == \"xlink:\") {\n                        el.setAttributeNS(xlink, key.substring(6), val);\n                    } else if (key.substring(0, 4) == \"xml:\") {\n                        el.setAttributeNS(xmlns, key.substring(4), val);\n                    } else {\n                        el.setAttribute(key, val);\n                    }\n                } else {\n                    el.removeAttribute(key);\n                }\n            }\n        } else if (\"text\" in attr) {\n            el.nodeValue = attr.text;\n        }\n    } else {\n        el = glob.doc.createElementNS(xmlns, el);\n    }\n    return el;\n}\nSnap._.$ = $;\nSnap._.id = ID;\nfunction getAttrs(el) {\n    var attrs = el.attributes,\n        name,\n        out = {};\n    for (var i = 0; i < attrs.length; i++) {\n        if (attrs[i].namespaceURI == xlink) {\n            name = \"xlink:\";\n        } else {\n            name = \"\";\n        }\n        name += attrs[i].name;\n        out[name] = attrs[i].textContent;\n    }\n    return out;\n}\nfunction is(o, type) {\n    type = Str.prototype.toLowerCase.call(type);\n    if (type == \"finite\") {\n        return isFinite(o);\n    }\n    if (type == \"array\" &&\n        (o instanceof Array || Array.isArray && Array.isArray(o))) {\n        return true;\n    }\n    return  (type == \"null\" && o === null) ||\n            (type == typeof o && o !== null) ||\n            (type == \"object\" && o === Object(o)) ||\n            objectToString.call(o).slice(8, -1).toLowerCase() == type;\n}\n/*\\\n * Snap.format\n [ method ]\n **\n * Replaces construction of type `{<name>}` to the corresponding argument\n **\n - token (string) string to format\n - json (object) object which properties are used as a replacement\n = (string) formatted string\n > Usage\n | // this draws a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n | paper.path(Snap.format(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n |     x: 10,\n |     y: 20,\n |     dim: {\n |         width: 40,\n |         height: 50,\n |         \"negative width\": -40\n |     }\n | }));\n\\*/\nSnap.format = (function () {\n    var tokenRegex = /\\{([^\\}]+)\\}/g,\n        objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n        replacer = function (all, key, obj) {\n            var res = obj;\n            key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n                name = name || quotedName;\n                if (res) {\n                    if (name in res) {\n                        res = res[name];\n                    }\n                    typeof res == \"function\" && isFunc && (res = res());\n                }\n            });\n            res = (res == null || res == obj ? all : res) + \"\";\n            return res;\n        };\n    return function (str, obj) {\n        return Str(str).replace(tokenRegex, function (all, key) {\n            return replacer(all, key, obj);\n        });\n    };\n})();\nfunction clone(obj) {\n    if (typeof obj == \"function\" || Object(obj) !== obj) {\n        return obj;\n    }\n    var res = new obj.constructor;\n    for (var key in obj) if (obj[has](key)) {\n        res[key] = clone(obj[key]);\n    }\n    return res;\n}\nSnap._.clone = clone;\nfunction repush(array, item) {\n    for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n        return array.push(array.splice(i, 1)[0]);\n    }\n}\nfunction cacher(f, scope, postprocessor) {\n    function newf() {\n        var arg = Array.prototype.slice.call(arguments, 0),\n            args = arg.join(\"\\u2400\"),\n            cache = newf.cache = newf.cache || {},\n            count = newf.count = newf.count || [];\n        if (cache[has](args)) {\n            repush(count, args);\n            return postprocessor ? postprocessor(cache[args]) : cache[args];\n        }\n        count.length >= 1e3 && delete cache[count.shift()];\n        count.push(args);\n        cache[args] = f.apply(scope, arg);\n        return postprocessor ? postprocessor(cache[args]) : cache[args];\n    }\n    return newf;\n}\nSnap._.cacher = cacher;\nfunction angle(x1, y1, x2, y2, x3, y3) {\n    if (x3 == null) {\n        var x = x1 - x2,\n            y = y1 - y2;\n        if (!x && !y) {\n            return 0;\n        }\n        return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n    } else {\n        return angle(x1, y1, x3, y3) - angle(x2, y2, x3, y3);\n    }\n}\nfunction rad(deg) {\n    return deg % 360 * PI / 180;\n}\nfunction deg(rad) {\n    return rad * 180 / PI % 360;\n}\nfunction x_y() {\n    return this.x + S + this.y;\n}\nfunction x_y_w_h() {\n    return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n}\n\n/*\\\n * Snap.rad\n [ method ]\n **\n * Transform angle to radians\n - deg (number) angle in degrees\n = (number) angle in radians\n\\*/\nSnap.rad = rad;\n/*\\\n * Snap.deg\n [ method ]\n **\n * Transform angle to degrees\n - rad (number) angle in radians\n = (number) angle in degrees\n\\*/\nSnap.deg = deg;\n/*\\\n * Snap.sin\n [ method ]\n **\n * Equivalent to `Math.sin()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) sin\n\\*/\nSnap.sin = function (angle) {\n    return math.sin(Snap.rad(angle));\n};\n/*\\\n * Snap.tan\n [ method ]\n **\n * Equivalent to `Math.tan()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) tan\n\\*/\nSnap.tan = function (angle) {\n    return math.tan(Snap.rad(angle));\n};\n/*\\\n * Snap.cos\n [ method ]\n **\n * Equivalent to `Math.cos()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) cos\n\\*/\nSnap.cos = function (angle) {\n    return math.cos(Snap.rad(angle));\n};\n/*\\\n * Snap.asin\n [ method ]\n **\n * Equivalent to `Math.asin()` only works with degrees, not radians.\n - num (number) value\n = (number) asin in degrees\n\\*/\nSnap.asin = function (num) {\n    return Snap.deg(math.asin(num));\n};\n/*\\\n * Snap.acos\n [ method ]\n **\n * Equivalent to `Math.acos()` only works with degrees, not radians.\n - num (number) value\n = (number) acos in degrees\n\\*/\nSnap.acos = function (num) {\n    return Snap.deg(math.acos(num));\n};\n/*\\\n * Snap.atan\n [ method ]\n **\n * Equivalent to `Math.atan()` only works with degrees, not radians.\n - num (number) value\n = (number) atan in degrees\n\\*/\nSnap.atan = function (num) {\n    return Snap.deg(math.atan(num));\n};\n/*\\\n * Snap.atan2\n [ method ]\n **\n * Equivalent to `Math.atan2()` only works with degrees, not radians.\n - num (number) value\n = (number) atan2 in degrees\n\\*/\nSnap.atan2 = function (num) {\n    return Snap.deg(math.atan2(num));\n};\n/*\\\n * Snap.angle\n [ method ]\n **\n * Returns an angle between two or three points\n > Parameters\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n - x3 (number) #optional x coord of third point\n - y3 (number) #optional y coord of third point\n = (number) angle in degrees\n\\*/\nSnap.angle = angle;\n/*\\\n * Snap.len\n [ method ]\n **\n * Returns distance between two points\n > Parameters\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len = function (x1, y1, x2, y2) {\n    return Math.sqrt(Snap.len2(x1, y1, x2, y2));\n};\n/*\\\n * Snap.len2\n [ method ]\n **\n * Returns squared distance between two points\n > Parameters\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len2 = function (x1, y1, x2, y2) {\n    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n};\n/*\\\n * Snap.closestPoint\n [ method ]\n **\n * Returns closest point to a given one on a given path.\n > Parameters\n - path (Element) path element\n - x (number) x coord of a point\n - y (number) y coord of a point\n = (object) in format\n {\n    x (number) x coord of the point on the path\n    y (number) y coord of the point on the path\n    length (number) length of the path to the point\n    distance (number) distance from the given point to the path\n }\n\\*/\n// Copied from http://bl.ocks.org/mbostock/8027637\nSnap.closestPoint = function (path, x, y) {\n    function distance2(p) {\n        var dx = p.x - x,\n            dy = p.y - y;\n        return dx * dx + dy * dy;\n    }\n    var pathNode = path.node,\n        pathLength = pathNode.getTotalLength(),\n        precision = pathLength / pathNode.pathSegList.numberOfItems * .125,\n        best,\n        bestLength,\n        bestDistance = Infinity;\n\n    // linear scan for coarse approximation\n    for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n        if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n            best = scan, bestLength = scanLength, bestDistance = scanDistance;\n        }\n    }\n\n    // binary search for precise estimate\n    precision *= .5;\n    while (precision > .5) {\n        var before,\n            after,\n            beforeLength,\n            afterLength,\n            beforeDistance,\n            afterDistance;\n        if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n            best = before, bestLength = beforeLength, bestDistance = beforeDistance;\n        } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n            best = after, bestLength = afterLength, bestDistance = afterDistance;\n        } else {\n            precision *= .5;\n        }\n    }\n\n    best = {\n        x: best.x,\n        y: best.y,\n        length: bestLength,\n        distance: Math.sqrt(bestDistance)\n    };\n    return best;\n}\n/*\\\n * Snap.is\n [ method ]\n **\n * Handy replacement for the `typeof` operator\n - o (…) any object or primitive\n - type (string) name of the type, e.g., `string`, `function`, `number`, etc.\n = (boolean) `true` if given value is of given type\n\\*/\nSnap.is = is;\n/*\\\n * Snap.snapTo\n [ method ]\n **\n * Snaps given value to given grid\n - values (array|number) given array of values or step of the grid\n - value (number) value to adjust\n - tolerance (number) #optional maximum distance to the target value that would trigger the snap. Default is `10`.\n = (number) adjusted value\n\\*/\nSnap.snapTo = function (values, value, tolerance) {\n    tolerance = is(tolerance, \"finite\") ? tolerance : 10;\n    if (is(values, \"array\")) {\n        var i = values.length;\n        while (i--) if (abs(values[i] - value) <= tolerance) {\n            return values[i];\n        }\n    } else {\n        values = +values;\n        var rem = value % values;\n        if (rem < tolerance) {\n            return value - rem;\n        }\n        if (rem > values - tolerance) {\n            return value - rem + values;\n        }\n    }\n    return value;\n};\n// Colour\n/*\\\n * Snap.getRGB\n [ method ]\n **\n * Parses color string as RGB object\n - color (string) color string in one of the following formats:\n # <ul>\n #     <li>Color name (<code>red</code>, <code>green</code>, <code>cornflowerblue</code>, etc)</li>\n #     <li>#••• — shortened HTML color: (<code>#000</code>, <code>#fc0</code>, etc.)</li>\n #     <li>#•••••• — full length HTML color: (<code>#000000</code>, <code>#bd2300</code>)</li>\n #     <li>rgb(•••, •••, •••) — red, green and blue channels values: (<code>rgb(200,&nbsp;100,&nbsp;0)</code>)</li>\n #     <li>rgba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>)</li>\n #     <li>rgba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>)</li>\n #     <li>hsba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsl(•••, •••, •••) — hue, saturation and luminosity values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;0.5)</code>)</li>\n #     <li>hsla(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsla(•••%, •••%, •••%, •••%) — also with opacity</li>\n # </ul>\n * Note that `%` can be used any time: `rgb(20%, 255, 50%)`.\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) true if string can't be parsed\n o }\n\\*/\nSnap.getRGB = cacher(function (colour) {\n    if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    if (colour == \"none\") {\n        return {r: -1, g: -1, b: -1, hex: \"none\", toString: rgbtoString};\n    }\n    !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n    if (!colour) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    var res,\n        red,\n        green,\n        blue,\n        opacity,\n        t,\n        values,\n        rgb = colour.match(colourRegExp);\n    if (rgb) {\n        if (rgb[2]) {\n            blue = toInt(rgb[2].substring(5), 16);\n            green = toInt(rgb[2].substring(3, 5), 16);\n            red = toInt(rgb[2].substring(1, 3), 16);\n        }\n        if (rgb[3]) {\n            blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n            green = toInt((t = rgb[3].charAt(2)) + t, 16);\n            red = toInt((t = rgb[3].charAt(1)) + t, 16);\n        }\n        if (rgb[4]) {\n            values = rgb[4].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red *= 2.55);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green *= 2.55);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue *= 2.55);\n            rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n        }\n        if (rgb[5]) {\n            values = rgb[5].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsb2rgb(red, green, blue, opacity);\n        }\n        if (rgb[6]) {\n            values = rgb[6].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsl2rgb(red, green, blue, opacity);\n        }\n        red = mmin(math.round(red), 255);\n        green = mmin(math.round(green), 255);\n        blue = mmin(math.round(blue), 255);\n        opacity = mmin(mmax(opacity, 0), 1);\n        rgb = {r: red, g: green, b: blue, toString: rgbtoString};\n        rgb.hex = \"#\" + (16777216 | blue | (green << 8) | (red << 16)).toString(16).slice(1);\n        rgb.opacity = is(opacity, \"finite\") ? opacity : 1;\n        return rgb;\n    }\n    return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n}, Snap);\n/*\\\n * Snap.hsb\n [ method ]\n **\n * Converts HSB values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - b (number) value or brightness\n = (string) hex representation of the color\n\\*/\nSnap.hsb = cacher(function (h, s, b) {\n    return Snap.hsb2rgb(h, s, b).hex;\n});\n/*\\\n * Snap.hsl\n [ method ]\n **\n * Converts HSL values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (string) hex representation of the color\n\\*/\nSnap.hsl = cacher(function (h, s, l) {\n    return Snap.hsl2rgb(h, s, l).hex;\n});\n/*\\\n * Snap.rgb\n [ method ]\n **\n * Converts RGB values to a hex representation of the color\n - r (number) red\n - g (number) green\n - b (number) blue\n = (string) hex representation of the color\n\\*/\nSnap.rgb = cacher(function (r, g, b, o) {\n    if (is(o, \"finite\")) {\n        var round = math.round;\n        return \"rgba(\" + [round(r), round(g), round(b), +o.toFixed(2)] + \")\";\n    }\n    return \"#\" + (16777216 | b | (g << 8) | (r << 16)).toString(16).slice(1);\n});\nvar toHex = function (color) {\n    var i = glob.doc.getElementsByTagName(\"head\")[0] || glob.doc.getElementsByTagName(\"svg\")[0],\n        red = \"rgb(255, 0, 0)\";\n    toHex = cacher(function (color) {\n        if (color.toLowerCase() == \"red\") {\n            return red;\n        }\n        i.style.color = red;\n        i.style.color = color;\n        var out = glob.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n        return out == red ? null : out;\n    });\n    return toHex(color);\n},\nhsbtoString = function () {\n    return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n},\nhsltoString = function () {\n    return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n},\nrgbtoString = function () {\n    return this.opacity == 1 || this.opacity == null ?\n            this.hex :\n            \"rgba(\" + [this.r, this.g, this.b, this.opacity] + \")\";\n},\nprepareRGB = function (r, g, b) {\n    if (g == null && is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n        b = r.b;\n        g = r.g;\n        r = r.r;\n    }\n    if (g == null && is(r, string)) {\n        var clr = Snap.getRGB(r);\n        r = clr.r;\n        g = clr.g;\n        b = clr.b;\n    }\n    if (r > 1 || g > 1 || b > 1) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n    }\n\n    return [r, g, b];\n},\npackageRGB = function (r, g, b, o) {\n    r = math.round(r * 255);\n    g = math.round(g * 255);\n    b = math.round(b * 255);\n    var rgb = {\n        r: r,\n        g: g,\n        b: b,\n        opacity: is(o, \"finite\") ? o : 1,\n        hex: Snap.rgb(r, g, b),\n        toString: rgbtoString\n    };\n    is(o, \"finite\") && (rgb.opacity = o);\n    return rgb;\n};\n/*\\\n * Snap.color\n [ method ]\n **\n * Parses the color string and returns an object featuring the color's component values\n - clr (string) color string in one of the supported formats (see @Snap.getRGB)\n = (object) Combined RGB/HSB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) `true` if string can't be parsed,\n o     h (number) hue,\n o     s (number) saturation,\n o     v (number) value (brightness),\n o     l (number) lightness\n o }\n\\*/\nSnap.color = function (clr) {\n    var rgb;\n    if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n        rgb = Snap.hsb2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n        rgb = Snap.hsl2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else {\n        if (is(clr, \"string\")) {\n            clr = Snap.getRGB(clr);\n        }\n        if (is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr && !(\"error\" in clr)) {\n            rgb = Snap.rgb2hsl(clr);\n            clr.h = rgb.h;\n            clr.s = rgb.s;\n            clr.l = rgb.l;\n            rgb = Snap.rgb2hsb(clr);\n            clr.v = rgb.b;\n        } else {\n            clr = {hex: \"none\"};\n            clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n            clr.error = 1;\n        }\n    }\n    clr.toString = rgbtoString;\n    return clr;\n};\n/*\\\n * Snap.hsb2rgb\n [ method ]\n **\n * Converts HSB values to an RGB object\n - h (number) hue\n - s (number) saturation\n - v (number) value or brightness\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsb2rgb = function (h, s, v, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n        v = h.b;\n        s = h.s;\n        o = h.o;\n        h = h.h;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = (h % 360) / 60;\n    C = v * s;\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = v - C;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.hsl2rgb\n [ method ]\n **\n * Converts HSL values to an RGB object\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsl2rgb = function (h, s, l, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n        l = h.l;\n        s = h.s;\n        h = h.h;\n    }\n    if (h > 1 || s > 1 || l > 1) {\n        h /= 360;\n        s /= 100;\n        l /= 100;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = (h % 360) / 60;\n    C = 2 * s * (l < .5 ? l : 1 - l);\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = l - C / 2;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.rgb2hsb\n [ method ]\n **\n * Converts RGB values to an HSB object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSB object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     b (number) brightness\n o }\n\\*/\nSnap.rgb2hsb = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, V, C;\n    V = mmax(r, g, b);\n    C = V - mmin(r, g, b);\n    H = (C == 0 ? null :\n         V == r ? (g - b) / C :\n         V == g ? (b - r) / C + 2 :\n                  (r - g) / C + 4\n        );\n    H = ((H + 360) % 6) * 60 / 360;\n    S = C == 0 ? 0 : C / V;\n    return {h: H, s: S, b: V, toString: hsbtoString};\n};\n/*\\\n * Snap.rgb2hsl\n [ method ]\n **\n * Converts RGB values to an HSL object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSL object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     l (number) luminosity\n o }\n\\*/\nSnap.rgb2hsl = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, L, M, m, C;\n    M = mmax(r, g, b);\n    m = mmin(r, g, b);\n    C = M - m;\n    H = (C == 0 ? null :\n         M == r ? (g - b) / C :\n         M == g ? (b - r) / C + 2 :\n                  (r - g) / C + 4);\n    H = ((H + 360) % 6) * 60 / 360;\n    L = (M + m) / 2;\n    S = (C == 0 ? 0 :\n         L < .5 ? C / (2 * L) :\n                  C / (2 - 2 * L));\n    return {h: H, s: S, l: L, toString: hsltoString};\n};\n\n// Transformations\n/*\\\n * Snap.parsePathString\n [ method ]\n **\n * Utility method\n **\n * Parses given path string into an array of arrays of path segments\n - pathString (string|array) path string or array of segments (in the last case it is returned straight away)\n = (array) array of segments\n\\*/\nSnap.parsePathString = function (pathString) {\n    if (!pathString) {\n        return null;\n    }\n    var pth = Snap.path(pathString);\n    if (pth.arr) {\n        return Snap.path.clone(pth.arr);\n    }\n\n    var paramCounts = {a: 7, c: 6, o: 2, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, u: 3, z: 0},\n        data = [];\n    if (is(pathString, \"array\") && is(pathString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(pathString);\n    }\n    if (!data.length) {\n        Str(pathString).replace(pathCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            if (name == \"m\" && params.length > 2) {\n                data.push([b].concat(params.splice(0, 2)));\n                name = \"l\";\n                b = b == \"m\" ? \"l\" : \"L\";\n            }\n            if (name == \"o\" && params.length == 1) {\n                data.push([b, params[0]]);\n            }\n            if (name == \"r\") {\n                data.push([b].concat(params));\n            } else while (params.length >= paramCounts[name]) {\n                data.push([b].concat(params.splice(0, paramCounts[name])));\n                if (!paramCounts[name]) {\n                    break;\n                }\n            }\n        });\n    }\n    data.toString = Snap.path.toString;\n    pth.arr = Snap.path.clone(data);\n    return data;\n};\n/*\\\n * Snap.parseTransformString\n [ method ]\n **\n * Utility method\n **\n * Parses given transform string into an array of transformations\n - TString (string|array) transform string or array of transformations (in the last case it is returned straight away)\n = (array) array of transformations\n\\*/\nvar parseTransformString = Snap.parseTransformString = function (TString) {\n    if (!TString) {\n        return null;\n    }\n    var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n        data = [];\n    if (is(TString, \"array\") && is(TString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(TString);\n    }\n    if (!data.length) {\n        Str(TString).replace(tCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            data.push([b].concat(params));\n        });\n    }\n    data.toString = Snap.path.toString;\n    return data;\n};\nfunction svgTransform2string(tstr) {\n    var res = [];\n    tstr = tstr.replace(/(?:^|\\s)(\\w+)\\(([^)]+)\\)/g, function (all, name, params) {\n        params = params.split(/\\s*,\\s*|\\s+/);\n        if (name == \"rotate\" && params.length == 1) {\n            params.push(0, 0);\n        }\n        if (name == \"scale\") {\n            if (params.length > 2) {\n                params = params.slice(0, 2);\n            } else if (params.length == 2) {\n                params.push(0, 0);\n            }\n            if (params.length == 1) {\n                params.push(params[0], 0, 0);\n            }\n        }\n        if (name == \"skewX\") {\n            res.push([\"m\", 1, 0, math.tan(rad(params[0])), 1, 0, 0]);\n        } else if (name == \"skewY\") {\n            res.push([\"m\", 1, math.tan(rad(params[0])), 0, 1, 0, 0]);\n        } else {\n            res.push([name.charAt(0)].concat(params));\n        }\n        return all;\n    });\n    return res;\n}\nSnap._.svgTransform2string = svgTransform2string;\nSnap._.rgTransform = /^[a-z][\\s]*-?\\.?\\d/i;\nfunction transform2matrix(tstr, bbox) {\n    var tdata = parseTransformString(tstr),\n        m = new Snap.Matrix;\n    if (tdata) {\n        for (var i = 0, ii = tdata.length; i < ii; i++) {\n            var t = tdata[i],\n                tlen = t.length,\n                command = Str(t[0]).toLowerCase(),\n                absolute = t[0] != command,\n                inver = absolute ? m.invert() : 0,\n                x1,\n                y1,\n                x2,\n                y2,\n                bb;\n            if (command == \"t\" && tlen == 2){\n                m.translate(t[1], 0);\n            } else if (command == \"t\" && tlen == 3) {\n                if (absolute) {\n                    x1 = inver.x(0, 0);\n                    y1 = inver.y(0, 0);\n                    x2 = inver.x(t[1], t[2]);\n                    y2 = inver.y(t[1], t[2]);\n                    m.translate(x2 - x1, y2 - y1);\n                } else {\n                    m.translate(t[1], t[2]);\n                }\n            } else if (command == \"r\") {\n                if (tlen == 2) {\n                    bb = bb || bbox;\n                    m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.rotate(t[1], x2, y2);\n                    } else {\n                        m.rotate(t[1], t[2], t[3]);\n                    }\n                }\n            } else if (command == \"s\") {\n                if (tlen == 2 || tlen == 3) {\n                    bb = bb || bbox;\n                    m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.scale(t[1], t[1], x2, y2);\n                    } else {\n                        m.scale(t[1], t[1], t[2], t[3]);\n                    }\n                } else if (tlen == 5) {\n                    if (absolute) {\n                        x2 = inver.x(t[3], t[4]);\n                        y2 = inver.y(t[3], t[4]);\n                        m.scale(t[1], t[2], x2, y2);\n                    } else {\n                        m.scale(t[1], t[2], t[3], t[4]);\n                    }\n                }\n            } else if (command == \"m\" && tlen == 7) {\n                m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n            }\n        }\n    }\n    return m;\n}\nSnap._.transform2matrix = transform2matrix;\nSnap._unit2px = unit2px;\nvar contains = glob.doc.contains || glob.doc.compareDocumentPosition ?\n    function (a, b) {\n        var adown = a.nodeType == 9 ? a.documentElement : a,\n            bup = b && b.parentNode;\n            return a == bup || !!(bup && bup.nodeType == 1 && (\n                adown.contains ?\n                    adown.contains(bup) :\n                    a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16\n            ));\n    } :\n    function (a, b) {\n        if (b) {\n            while (b) {\n                b = b.parentNode;\n                if (b == a) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\nfunction getSomeDefs(el) {\n    var p = (el.node.ownerSVGElement && wrap(el.node.ownerSVGElement)) ||\n            (el.node.parentNode && wrap(el.node.parentNode)) ||\n            Snap.select(\"svg\") ||\n            Snap(0, 0),\n        pdefs = p.select(\"defs\"),\n        defs  = pdefs == null ? false : pdefs.node;\n    if (!defs) {\n        defs = make(\"defs\", p.node).node;\n    }\n    return defs;\n}\nfunction getSomeSVG(el) {\n    return el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || Snap.select(\"svg\");\n}\nSnap._.getSomeDefs = getSomeDefs;\nSnap._.getSomeSVG = getSomeSVG;\nfunction unit2px(el, name, value) {\n    var svg = getSomeSVG(el).node,\n        out = {},\n        mgr = svg.querySelector(\".svg---mgr\");\n    if (!mgr) {\n        mgr = $(\"rect\");\n        $(mgr, {x: -9e9, y: -9e9, width: 10, height: 10, \"class\": \"svg---mgr\", fill: \"none\"});\n        svg.appendChild(mgr);\n    }\n    function getW(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {width: val});\n        try {\n            return mgr.getBBox().width;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function getH(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {height: val});\n        try {\n            return mgr.getBBox().height;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function set(nam, f) {\n        if (name == null) {\n            out[nam] = f(el.attr(nam) || 0);\n        } else if (nam == name) {\n            out = f(value == null ? el.attr(nam) || 0 : value);\n        }\n    }\n    switch (el.type) {\n        case \"rect\":\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        case \"image\":\n            set(\"width\", getW);\n            set(\"height\", getH);\n        case \"text\":\n            set(\"x\", getW);\n            set(\"y\", getH);\n        break;\n        case \"circle\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"r\", getW);\n        break;\n        case \"ellipse\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        break;\n        case \"line\":\n            set(\"x1\", getW);\n            set(\"x2\", getW);\n            set(\"y1\", getH);\n            set(\"y2\", getH);\n        break;\n        case \"marker\":\n            set(\"refX\", getW);\n            set(\"markerWidth\", getW);\n            set(\"refY\", getH);\n            set(\"markerHeight\", getH);\n        break;\n        case \"radialGradient\":\n            set(\"fx\", getW);\n            set(\"fy\", getH);\n        break;\n        case \"tspan\":\n            set(\"dx\", getW);\n            set(\"dy\", getH);\n        break;\n        default:\n            set(name, getW);\n    }\n    svg.removeChild(mgr);\n    return out;\n}\n/*\\\n * Snap.select\n [ method ]\n **\n * Wraps a DOM element specified by CSS selector as @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.select = function (query) {\n    query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n    return wrap(glob.doc.querySelector(query));\n};\n/*\\\n * Snap.selectAll\n [ method ]\n **\n * Wraps DOM elements specified by CSS selector as set or array of @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.selectAll = function (query) {\n    var nodelist = glob.doc.querySelectorAll(query),\n        set = (Snap.set || Array)();\n    for (var i = 0; i < nodelist.length; i++) {\n        set.push(wrap(nodelist[i]));\n    }\n    return set;\n};\n\nfunction add2group(list) {\n    if (!is(list, \"array\")) {\n        list = Array.prototype.slice.call(arguments, 0);\n    }\n    var i = 0,\n        j = 0,\n        node = this.node;\n    while (this[i]) delete this[i++];\n    for (i = 0; i < list.length; i++) {\n        if (list[i].type == \"set\") {\n            list[i].forEach(function (el) {\n                node.appendChild(el.node);\n            });\n        } else {\n            node.appendChild(list[i].node);\n        }\n    }\n    var children = node.childNodes;\n    for (i = 0; i < children.length; i++) {\n        this[j++] = wrap(children[i]);\n    }\n    return this;\n}\n// Hub garbage collector every 10s\nsetInterval(function () {\n    for (var key in hub) if (hub[has](key)) {\n        var el = hub[key],\n            node = el.node;\n        if (el.type != \"svg\" && !node.ownerSVGElement || el.type == \"svg\" && (!node.parentNode || \"ownerSVGElement\" in node.parentNode && !node.ownerSVGElement)) {\n            delete hub[key];\n        }\n    }\n}, 1e4);\nfunction Element(el) {\n    if (el.snap in hub) {\n        return hub[el.snap];\n    }\n    var svg;\n    try {\n        svg = el.ownerSVGElement;\n    } catch(e) {}\n    /*\\\n     * Element.node\n     [ property (object) ]\n     **\n     * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n     > Usage\n     | // draw a circle at coordinate 10,10 with radius of 10\n     | var c = paper.circle(10, 10, 10);\n     | c.node.onclick = function () {\n     |     c.attr(\"fill\", \"red\");\n     | };\n    \\*/\n    this.node = el;\n    if (svg) {\n        this.paper = new Paper(svg);\n    }\n    /*\\\n     * Element.type\n     [ property (string) ]\n     **\n     * SVG tag name of the given element.\n    \\*/\n    this.type = el.tagName || el.nodeName;\n    var id = this.id = ID(this);\n    this.anims = {};\n    this._ = {\n        transform: []\n    };\n    el.snap = id;\n    hub[id] = this;\n    if (this.type == \"g\") {\n        this.add = add2group;\n    }\n    if (this.type in {g: 1, mask: 1, pattern: 1, symbol: 1}) {\n        for (var method in Paper.prototype) if (Paper.prototype[has](method)) {\n            this[method] = Paper.prototype[method];\n        }\n    }\n}\n   /*\\\n     * Element.attr\n     [ method ]\n     **\n     * Gets or sets given attributes of the element.\n     **\n     - params (object) contains key-value pairs of attributes you want to set\n     * or\n     - param (string) name of the attribute\n     = (Element) the current element\n     * or\n     = (string) value of attribute\n     > Usage\n     | el.attr({\n     |     fill: \"#fc0\",\n     |     stroke: \"#000\",\n     |     strokeWidth: 2, // CamelCase...\n     |     \"fill-opacity\": 0.5, // or dash-separated names\n     |     width: \"*=2\" // prefixed values\n     | });\n     | console.log(el.attr(\"fill\")); // #fc0\n     * Prefixed values in format `\"+=10\"` supported. All four operations\n     * (`+`, `-`, `*` and `/`) could be used. Optionally you can use units for `+`\n     * and `-`: `\"+=2em\"`.\n    \\*/\n    Element.prototype.attr = function (params, value) {\n        var el = this,\n            node = el.node;\n        if (!params) {\n            if (node.nodeType != 1) {\n                return {\n                    text: node.nodeValue\n                };\n            }\n            var attr = node.attributes,\n                out = {};\n            for (var i = 0, ii = attr.length; i < ii; i++) {\n                out[attr[i].nodeName] = attr[i].nodeValue;\n            }\n            return out;\n        }\n        if (is(params, \"string\")) {\n            if (arguments.length > 1) {\n                var json = {};\n                json[params] = value;\n                params = json;\n            } else {\n                return eve(\"snap.util.getattr.\" + params, el).firstDefined();\n            }\n        }\n        for (var att in params) {\n            if (params[has](att)) {\n                eve(\"snap.util.attr.\" + att, el, params[att]);\n            }\n        }\n        return el;\n    };\n/*\\\n * Snap.parse\n [ method ]\n **\n * Parses SVG fragment and converts it into a @Fragment\n **\n - svg (string) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.parse = function (svg) {\n    var f = glob.doc.createDocumentFragment(),\n        full = true,\n        div = glob.doc.createElement(\"div\");\n    svg = Str(svg);\n    if (!svg.match(/^\\s*<\\s*svg(?:\\s|>)/)) {\n        svg = \"<svg>\" + svg + \"</svg>\";\n        full = false;\n    }\n    div.innerHTML = svg;\n    svg = div.getElementsByTagName(\"svg\")[0];\n    if (svg) {\n        if (full) {\n            f = svg;\n        } else {\n            while (svg.firstChild) {\n                f.appendChild(svg.firstChild);\n            }\n        }\n    }\n    return new Fragment(f);\n};\nfunction Fragment(frag) {\n    this.node = frag;\n}\n/*\\\n * Snap.fragment\n [ method ]\n **\n * Creates a DOM fragment from a given list of elements or strings\n **\n - varargs (…) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.fragment = function () {\n    var args = Array.prototype.slice.call(arguments, 0),\n        f = glob.doc.createDocumentFragment();\n    for (var i = 0, ii = args.length; i < ii; i++) {\n        var item = args[i];\n        if (item.node && item.node.nodeType) {\n            f.appendChild(item.node);\n        }\n        if (item.nodeType) {\n            f.appendChild(item);\n        }\n        if (typeof item == \"string\") {\n            f.appendChild(Snap.parse(item).node);\n        }\n    }\n    return new Fragment(f);\n};\n\nfunction make(name, parent) {\n    var res = $(name);\n    parent.appendChild(res);\n    var el = wrap(res);\n    return el;\n}\nfunction Paper(w, h) {\n    var res,\n        desc,\n        defs,\n        proto = Paper.prototype;\n    if (w && w.tagName == \"svg\") {\n        if (w.snap in hub) {\n            return hub[w.snap];\n        }\n        var doc = w.ownerDocument;\n        res = new Element(w);\n        desc = w.getElementsByTagName(\"desc\")[0];\n        defs = w.getElementsByTagName(\"defs\")[0];\n        if (!desc) {\n            desc = $(\"desc\");\n            desc.appendChild(doc.createTextNode(\"Created with Snap\"));\n            res.node.appendChild(desc);\n        }\n        if (!defs) {\n            defs = $(\"defs\");\n            res.node.appendChild(defs);\n        }\n        res.defs = defs;\n        for (var key in proto) if (proto[has](key)) {\n            res[key] = proto[key];\n        }\n        res.paper = res.root = res;\n    } else {\n        res = make(\"svg\", glob.doc.body);\n        $(res.node, {\n            height: h,\n            version: 1.1,\n            width: w,\n            xmlns: xmlns\n        });\n    }\n    return res;\n}\nfunction wrap(dom) {\n    if (!dom) {\n        return dom;\n    }\n    if (dom instanceof Element || dom instanceof Fragment) {\n        return dom;\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"svg\") {\n        return new Paper(dom);\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"object\" && dom.type == \"image/svg+xml\") {\n        return new Paper(dom.contentDocument.getElementsByTagName(\"svg\")[0]);\n    }\n    return new Element(dom);\n}\n\nSnap._.make = make;\nSnap._.wrap = wrap;\n/*\\\n * Paper.el\n [ method ]\n **\n * Creates an element on paper with a given name and no attributes\n **\n - name (string) tag name\n - attr (object) attributes\n = (Element) the current element\n > Usage\n | var c = paper.circle(10, 10, 10); // is the same as...\n | var c = paper.el(\"circle\").attr({\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n | // and the same as\n | var c = paper.el(\"circle\", {\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n\\*/\nPaper.prototype.el = function (name, attr) {\n    var el = make(name, this.node);\n    attr && el.attr(attr);\n    return el;\n};\n/*\\\n * Element.children\n [ method ]\n **\n * Returns array of all the children of the element.\n = (array) array of Elements\n\\*/\nElement.prototype.children = function () {\n    var out = [],\n        ch = this.node.childNodes;\n    for (var i = 0, ii = ch.length; i < ii; i++) {\n        out[i] = Snap(ch[i]);\n    }\n    return out;\n};\nfunction jsonFiller(root, o) {\n    for (var i = 0, ii = root.length; i < ii; i++) {\n        var item = {\n                type: root[i].type,\n                attr: root[i].attr()\n            },\n            children = root[i].children();\n        o.push(item);\n        if (children.length) {\n            jsonFiller(children, item.childNodes = []);\n        }\n    }\n}\n/*\\\n * Element.toJSON\n [ method ]\n **\n * Returns object representation of the given element and all its children.\n = (object) in format\n o {\n o     type (string) this.type,\n o     attr (object) attributes map,\n o     childNodes (array) optional array of children in the same format\n o }\n\\*/\nElement.prototype.toJSON = function () {\n    var out = [];\n    jsonFiller([this], out);\n    return out[0];\n};\n// default\neve.on(\"snap.util.getattr\", function () {\n    var att = eve.nt();\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    var css = att.replace(/[A-Z]/g, function (letter) {\n        return \"-\" + letter.toLowerCase();\n    });\n    if (cssAttr[has](css)) {\n        return this.node.ownerDocument.defaultView.getComputedStyle(this.node, null).getPropertyValue(css);\n    } else {\n        return $(this.node, att);\n    }\n});\nvar cssAttr = {\n    \"alignment-baseline\": 0,\n    \"baseline-shift\": 0,\n    \"clip\": 0,\n    \"clip-path\": 0,\n    \"clip-rule\": 0,\n    \"color\": 0,\n    \"color-interpolation\": 0,\n    \"color-interpolation-filters\": 0,\n    \"color-profile\": 0,\n    \"color-rendering\": 0,\n    \"cursor\": 0,\n    \"direction\": 0,\n    \"display\": 0,\n    \"dominant-baseline\": 0,\n    \"enable-background\": 0,\n    \"fill\": 0,\n    \"fill-opacity\": 0,\n    \"fill-rule\": 0,\n    \"filter\": 0,\n    \"flood-color\": 0,\n    \"flood-opacity\": 0,\n    \"font\": 0,\n    \"font-family\": 0,\n    \"font-size\": 0,\n    \"font-size-adjust\": 0,\n    \"font-stretch\": 0,\n    \"font-style\": 0,\n    \"font-variant\": 0,\n    \"font-weight\": 0,\n    \"glyph-orientation-horizontal\": 0,\n    \"glyph-orientation-vertical\": 0,\n    \"image-rendering\": 0,\n    \"kerning\": 0,\n    \"letter-spacing\": 0,\n    \"lighting-color\": 0,\n    \"marker\": 0,\n    \"marker-end\": 0,\n    \"marker-mid\": 0,\n    \"marker-start\": 0,\n    \"mask\": 0,\n    \"opacity\": 0,\n    \"overflow\": 0,\n    \"pointer-events\": 0,\n    \"shape-rendering\": 0,\n    \"stop-color\": 0,\n    \"stop-opacity\": 0,\n    \"stroke\": 0,\n    \"stroke-dasharray\": 0,\n    \"stroke-dashoffset\": 0,\n    \"stroke-linecap\": 0,\n    \"stroke-linejoin\": 0,\n    \"stroke-miterlimit\": 0,\n    \"stroke-opacity\": 0,\n    \"stroke-width\": 0,\n    \"text-anchor\": 0,\n    \"text-decoration\": 0,\n    \"text-rendering\": 0,\n    \"unicode-bidi\": 0,\n    \"visibility\": 0,\n    \"word-spacing\": 0,\n    \"writing-mode\": 0\n};\n\neve.on(\"snap.util.attr\", function (value) {\n    var att = eve.nt(),\n        attr = {};\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    attr[att] = value;\n    var style = att.replace(/-(\\w)/gi, function (all, letter) {\n            return letter.toUpperCase();\n        }),\n        css = att.replace(/[A-Z]/g, function (letter) {\n            return \"-\" + letter.toLowerCase();\n        });\n    if (cssAttr[has](css)) {\n        this.node.style[style] = value == null ? E : value;\n    } else {\n        $(this.node, attr);\n    }\n});\n(function (proto) {}(Paper.prototype));\n\n// simple ajax\n/*\\\n * Snap.ajax\n [ method ]\n **\n * Simple implementation of Ajax\n **\n - url (string) URL\n - postData (object|string) data for post request\n - callback (function) callback\n - scope (object) #optional scope of callback\n * or\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n = (XMLHttpRequest) the XMLHttpRequest object, just in case\n\\*/\nSnap.ajax = function (url, postData, callback, scope){\n    var req = new XMLHttpRequest,\n        id = ID();\n    if (req) {\n        if (is(postData, \"function\")) {\n            scope = callback;\n            callback = postData;\n            postData = null;\n        } else if (is(postData, \"object\")) {\n            var pd = [];\n            for (var key in postData) if (postData.hasOwnProperty(key)) {\n                pd.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(postData[key]));\n            }\n            postData = pd.join(\"&\");\n        }\n        req.open((postData ? \"POST\" : \"GET\"), url, true);\n        if (postData) {\n            req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n            req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        }\n        if (callback) {\n            eve.once(\"snap.ajax.\" + id + \".0\", callback);\n            eve.once(\"snap.ajax.\" + id + \".200\", callback);\n            eve.once(\"snap.ajax.\" + id + \".304\", callback);\n        }\n        req.onreadystatechange = function() {\n            if (req.readyState != 4) return;\n            eve(\"snap.ajax.\" + id + \".\" + req.status, scope, req);\n        };\n        if (req.readyState == 4) {\n            return req;\n        }\n        req.send(postData);\n        return req;\n    }\n};\n/*\\\n * Snap.load\n [ method ]\n **\n * Loads external SVG file as a @Fragment (see @Snap.ajax for more advanced AJAX)\n **\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n\\*/\nSnap.load = function (url, callback, scope) {\n    Snap.ajax(url, function (req) {\n        var f = Snap.parse(req.responseText);\n        scope ? callback.call(scope, f) : callback(f);\n    });\n};\nvar getOffset = function (elem) {\n    var box = elem.getBoundingClientRect(),\n        doc = elem.ownerDocument,\n        body = doc.body,\n        docElem = doc.documentElement,\n        clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n        top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n        left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n    return {\n        y: top,\n        x: left\n    };\n};\n/*\\\n * Snap.getElementByPoint\n [ method ]\n **\n * Returns you topmost element under given point.\n **\n = (object) Snap element object\n - x (number) x coordinate from the top left corner of the window\n - y (number) y coordinate from the top left corner of the window\n > Usage\n | Snap.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\\*/\nSnap.getElementByPoint = function (x, y) {\n    var paper = this,\n        svg = paper.canvas,\n        target = glob.doc.elementFromPoint(x, y);\n    if (glob.win.opera && target.tagName == \"svg\") {\n        var so = getOffset(target),\n            sr = target.createSVGRect();\n        sr.x = x - so.x;\n        sr.y = y - so.y;\n        sr.width = sr.height = 1;\n        var hits = target.getIntersectionList(sr, null);\n        if (hits.length) {\n            target = hits[hits.length - 1];\n        }\n    }\n    if (!target) {\n        return null;\n    }\n    return wrap(target);\n};\n/*\\\n * Snap.plugin\n [ method ]\n **\n * Let you write plugins. You pass in a function with five arguments, like this:\n | Snap.plugin(function (Snap, Element, Paper, global, Fragment) {\n |     Snap.newmethod = function () {};\n |     Element.prototype.newmethod = function () {};\n |     Paper.prototype.newmethod = function () {};\n | });\n * Inside the function you have access to all main objects (and their\n * prototypes). This allow you to extend anything you want.\n **\n - f (function) your plugin body\n\\*/\nSnap.plugin = function (f) {\n    f(Snap, Element, Paper, glob, Fragment);\n};\nglob.win.Snap = Snap;\nreturn Snap;\n}(window || this));\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        Str = String,\n        unit2px = Snap._unit2px,\n        $ = Snap._.$,\n        make = Snap._.make,\n        getSomeDefs = Snap._.getSomeDefs,\n        has = \"hasOwnProperty\",\n        wrap = Snap._.wrap;\n    /*\\\n     * Element.getBBox\n     [ method ]\n     **\n     * Returns the bounding box descriptor for the given element\n     **\n     = (object) bounding box descriptor:\n     o {\n     o     cx: (number) x of the center,\n     o     cy: (number) x of the center,\n     o     h: (number) height,\n     o     height: (number) height,\n     o     path: (string) path command for the box,\n     o     r0: (number) radius of a circle that fully encloses the box,\n     o     r1: (number) radius of the smallest circle that can be enclosed,\n     o     r2: (number) radius of the largest circle that can be enclosed,\n     o     vb: (string) box as a viewbox command,\n     o     w: (number) width,\n     o     width: (number) width,\n     o     x2: (number) x of the right side,\n     o     x: (number) x of the left side,\n     o     y2: (number) y of the bottom edge,\n     o     y: (number) y of the top edge\n     o }\n    \\*/\n    elproto.getBBox = function (isWithoutTransform) {\n        if (!Snap.Matrix || !Snap.path) {\n            return this.node.getBBox();\n        }\n        var el = this,\n            m = new Snap.Matrix;\n        if (el.removed) {\n            return Snap._.box();\n        }\n        while (el.type == \"use\") {\n            if (!isWithoutTransform) {\n                m = m.add(el.transform().localMatrix.translate(el.attr(\"x\") || 0, el.attr(\"y\") || 0));\n            }\n            if (el.original) {\n                el = el.original;\n            } else {\n                var href = el.attr(\"xlink:href\");\n                el = el.original = el.node.ownerDocument.getElementById(href.substring(href.indexOf(\"#\") + 1));\n            }\n        }\n        var _ = el._,\n            pathfinder = Snap.path.get[el.type] || Snap.path.get.deflt;\n        try {\n            if (isWithoutTransform) {\n                _.bboxwt = pathfinder ? Snap.path.getBBox(el.realPath = pathfinder(el)) : Snap._.box(el.node.getBBox());\n                return Snap._.box(_.bboxwt);\n            } else {\n                el.realPath = pathfinder(el);\n                el.matrix = el.transform().localMatrix;\n                _.bbox = Snap.path.getBBox(Snap.path.map(el.realPath, m.add(el.matrix)));\n                return Snap._.box(_.bbox);\n            }\n        } catch (e) {\n            // Firefox doesn’t give you bbox of hidden element\n            return Snap._.box();\n        }\n    };\n    var propString = function () {\n        return this.string;\n    };\n    function extractTransform(el, tstr) {\n        if (tstr == null) {\n            var doReturn = true;\n            if (el.type == \"linearGradient\" || el.type == \"radialGradient\") {\n                tstr = el.node.getAttribute(\"gradientTransform\");\n            } else if (el.type == \"pattern\") {\n                tstr = el.node.getAttribute(\"patternTransform\");\n            } else {\n                tstr = el.node.getAttribute(\"transform\");\n            }\n            if (!tstr) {\n                return new Snap.Matrix;\n            }\n            tstr = Snap._.svgTransform2string(tstr);\n        } else {\n            if (!Snap._.rgTransform.test(tstr)) {\n                tstr = Snap._.svgTransform2string(tstr);\n            } else {\n                tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || E);\n            }\n            if (is(tstr, \"array\")) {\n                tstr = Snap.path ? Snap.path.toString.call(tstr) : Str(tstr);\n            }\n            el._.transform = tstr;\n        }\n        var m = Snap._.transform2matrix(tstr, el.getBBox(1));\n        if (doReturn) {\n            return m;\n        } else {\n            el.matrix = m;\n        }\n    }\n    /*\\\n     * Element.transform\n     [ method ]\n     **\n     * Gets or sets transformation of the element\n     **\n     - tstr (string) transform string in Snap or SVG format\n     = (Element) the current element\n     * or\n     = (object) transformation descriptor:\n     o {\n     o     string (string) transform string,\n     o     globalMatrix (Matrix) matrix of all transformations applied to element or its parents,\n     o     localMatrix (Matrix) matrix of transformations applied only to the element,\n     o     diffMatrix (Matrix) matrix of difference between global and local transformations,\n     o     global (string) global transformation as string,\n     o     local (string) local transformation as string,\n     o     toString (function) returns `string` property\n     o }\n    \\*/\n    elproto.transform = function (tstr) {\n        var _ = this._;\n        if (tstr == null) {\n            var papa = this,\n                global = new Snap.Matrix(this.node.getCTM()),\n                local = extractTransform(this),\n                ms = [local],\n                m = new Snap.Matrix,\n                i,\n                localString = local.toTransformString(),\n                string = Str(local) == Str(this.matrix) ?\n                            Str(_.transform) : localString;\n            while (papa.type != \"svg\" && (papa = papa.parent())) {\n                ms.push(extractTransform(papa));\n            }\n            i = ms.length;\n            while (i--) {\n                m.add(ms[i]);\n            }\n            return {\n                string: string,\n                globalMatrix: global,\n                totalMatrix: m,\n                localMatrix: local,\n                diffMatrix: global.clone().add(local.invert()),\n                global: global.toTransformString(),\n                total: m.toTransformString(),\n                local: localString,\n                toString: propString\n            };\n        }\n        if (tstr instanceof Snap.Matrix) {\n            this.matrix = tstr;\n            this._.transform = tstr.toTransformString();\n        } else {\n            extractTransform(this, tstr);\n        }\n\n        if (this.node) {\n            if (this.type == \"linearGradient\" || this.type == \"radialGradient\") {\n                $(this.node, {gradientTransform: this.matrix});\n            } else if (this.type == \"pattern\") {\n                $(this.node, {patternTransform: this.matrix});\n            } else {\n                $(this.node, {transform: this.matrix});\n            }\n        }\n\n        return this;\n    };\n    /*\\\n     * Element.parent\n     [ method ]\n     **\n     * Returns the element's parent\n     **\n     = (Element) the parent element\n    \\*/\n    elproto.parent = function () {\n        return wrap(this.node.parentNode);\n    };\n    /*\\\n     * Element.append\n     [ method ]\n     **\n     * Appends the given element to current one\n     **\n     - el (Element|Set) element to append\n     = (Element) the parent element\n    \\*/\n    /*\\\n     * Element.add\n     [ method ]\n     **\n     * See @Element.append\n    \\*/\n    elproto.append = elproto.add = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this;\n                el.forEach(function (el) {\n                    it.add(el);\n                });\n                return this;\n            }\n            el = wrap(el);\n            this.node.appendChild(el.node);\n            el.paper = this.paper;\n        }\n        return this;\n    };\n    /*\\\n     * Element.appendTo\n     [ method ]\n     **\n     * Appends the current element to the given one\n     **\n     - el (Element) parent element to append to\n     = (Element) the child element\n    \\*/\n    elproto.appendTo = function (el) {\n        if (el) {\n            el = wrap(el);\n            el.append(this);\n        }\n        return this;\n    };\n    /*\\\n     * Element.prepend\n     [ method ]\n     **\n     * Prepends the given element to the current one\n     **\n     - el (Element) element to prepend\n     = (Element) the parent element\n    \\*/\n    elproto.prepend = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this,\n                    first;\n                el.forEach(function (el) {\n                    if (first) {\n                        first.after(el);\n                    } else {\n                        it.prepend(el);\n                    }\n                    first = el;\n                });\n                return this;\n            }\n            el = wrap(el);\n            var parent = el.parent();\n            this.node.insertBefore(el.node, this.node.firstChild);\n            this.add && this.add();\n            el.paper = this.paper;\n            this.parent() && this.parent().add();\n            parent && parent.add();\n        }\n        return this;\n    };\n    /*\\\n     * Element.prependTo\n     [ method ]\n     **\n     * Prepends the current element to the given one\n     **\n     - el (Element) parent element to prepend to\n     = (Element) the child element\n    \\*/\n    elproto.prependTo = function (el) {\n        el = wrap(el);\n        el.prepend(this);\n        return this;\n    };\n    /*\\\n     * Element.before\n     [ method ]\n     **\n     * Inserts given element before the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.before = function (el) {\n        if (el.type == \"set\") {\n            var it = this;\n            el.forEach(function (el) {\n                var parent = el.parent();\n                it.node.parentNode.insertBefore(el.node, it.node);\n                parent && parent.add();\n            });\n            this.parent().add();\n            return this;\n        }\n        el = wrap(el);\n        var parent = el.parent();\n        this.node.parentNode.insertBefore(el.node, this.node);\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.after\n     [ method ]\n     **\n     * Inserts given element after the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.after = function (el) {\n        el = wrap(el);\n        var parent = el.parent();\n        if (this.node.nextSibling) {\n            this.node.parentNode.insertBefore(el.node, this.node.nextSibling);\n        } else {\n            this.node.parentNode.appendChild(el.node);\n        }\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.insertBefore\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertBefore = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.insertAfter\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertAfter = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node.nextSibling);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.remove\n     [ method ]\n     **\n     * Removes element from the DOM\n     = (Element) the detached element\n    \\*/\n    elproto.remove = function () {\n        var parent = this.parent();\n        this.node.parentNode && this.node.parentNode.removeChild(this.node);\n        delete this.paper;\n        this.removed = true;\n        parent && parent.add();\n        return this;\n    };\n    /*\\\n     * Element.select\n     [ method ]\n     **\n     * Gathers the nested @Element matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Element) result of query selection\n    \\*/\n    elproto.select = function (query) {\n        query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n        return wrap(this.node.querySelector(query));\n    };\n    /*\\\n     * Element.selectAll\n     [ method ]\n     **\n     * Gathers nested @Element objects matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Set|array) result of query selection\n    \\*/\n    elproto.selectAll = function (query) {\n        var nodelist = this.node.querySelectorAll(query),\n            set = (Snap.set || Array)();\n        for (var i = 0; i < nodelist.length; i++) {\n            set.push(wrap(nodelist[i]));\n        }\n        return set;\n    };\n    /*\\\n     * Element.asPX\n     [ method ]\n     **\n     * Returns given attribute of the element as a `px` value (not %, em, etc.)\n     **\n     - attr (string) attribute name\n     - value (string) #optional attribute value\n     = (Element) result of query selection\n    \\*/\n    elproto.asPX = function (attr, value) {\n        if (value == null) {\n            value = this.attr(attr);\n        }\n        return +unit2px(this, attr, value);\n    };\n    // SIERRA Element.use(): I suggest adding a note about how to access the original element the returned <use> instantiates. It's a part of SVG with which ordinary web developers may be least familiar.\n    /*\\\n     * Element.use\n     [ method ]\n     **\n     * Creates a `<use>` element linked to the current element\n     **\n     = (Element) the `<use>` element\n    \\*/\n    elproto.use = function () {\n        var use,\n            id = this.node.id;\n        if (!id) {\n            id = this.id;\n            $(this.node, {\n                id: id\n            });\n        }\n        if (this.type == \"linearGradient\" || this.type == \"radialGradient\" ||\n            this.type == \"pattern\") {\n            use = make(this.type, this.node.parentNode);\n        } else {\n            use = make(\"use\", this.node.parentNode);\n        }\n        $(use.node, {\n            \"xlink:href\": \"#\" + id\n        });\n        use.original = this;\n        return use;\n    };\n    function fixids(el) {\n        var els = el.selectAll(\"*\"),\n            it,\n            url = /^\\s*url\\((\"|'|)(.*)\\1\\)\\s*$/,\n            ids = [],\n            uses = {};\n        function urltest(it, name) {\n            var val = $(it.node, name);\n            val = val && val.match(url);\n            val = val && val[2];\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    var attr = {};\n                    attr[name] = URL(id);\n                    $(it.node, attr);\n                });\n            }\n        }\n        function linktest(it) {\n            var val = $(it.node, \"xlink:href\");\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    it.attr(\"xlink:href\", \"#\" + id);\n                });\n            }\n        }\n        for (var i = 0, ii = els.length; i < ii; i++) {\n            it = els[i];\n            urltest(it, \"fill\");\n            urltest(it, \"stroke\");\n            urltest(it, \"filter\");\n            urltest(it, \"mask\");\n            urltest(it, \"clip-path\");\n            linktest(it);\n            var oldid = $(it.node, \"id\");\n            if (oldid) {\n                $(it.node, {id: it.id});\n                ids.push({\n                    old: oldid,\n                    id: it.id\n                });\n            }\n        }\n        for (i = 0, ii = ids.length; i < ii; i++) {\n            var fs = uses[ids[i].old];\n            if (fs) {\n                for (var j = 0, jj = fs.length; j < jj; j++) {\n                    fs[j](ids[i].id);\n                }\n            }\n        }\n    }\n    /*\\\n     * Element.clone\n     [ method ]\n     **\n     * Creates a clone of the element and inserts it after the element\n     **\n     = (Element) the clone\n    \\*/\n    elproto.clone = function () {\n        var clone = wrap(this.node.cloneNode(true));\n        if ($(clone.node, \"id\")) {\n            $(clone.node, {id: clone.id});\n        }\n        fixids(clone);\n        clone.insertAfter(this);\n        return clone;\n    };\n    /*\\\n     * Element.toDefs\n     [ method ]\n     **\n     * Moves element to the shared `<defs>` area\n     **\n     = (Element) the element\n    \\*/\n    elproto.toDefs = function () {\n        var defs = getSomeDefs(this);\n        defs.appendChild(this.node);\n        return this;\n    };\n    /*\\\n     * Element.toPattern\n     [ method ]\n     **\n     * Creates a `<pattern>` element from the current element\n     **\n     * To create a pattern you have to specify the pattern rect:\n     - x (string|number)\n     - y (string|number)\n     - width (string|number)\n     - height (string|number)\n     = (Element) the `<pattern>` element\n     * You can use pattern later on as an argument for `fill` attribute:\n     | var p = paper.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\n     |         fill: \"none\",\n     |         stroke: \"#bada55\",\n     |         strokeWidth: 5\n     |     }).pattern(0, 0, 10, 10),\n     |     c = paper.circle(200, 200, 100);\n     | c.attr({\n     |     fill: p\n     | });\n    \\*/\n    elproto.pattern = elproto.toPattern = function (x, y, width, height) {\n        var p = make(\"pattern\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        $(p.node, {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            patternUnits: \"userSpaceOnUse\",\n            id: p.id,\n            viewBox: [x, y, width, height].join(\" \")\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n// SIERRA Element.marker(): clarify what a reference point is. E.g., helps you offset the object from its edge such as when centering it over a path.\n// SIERRA Element.marker(): I suggest the method should accept default reference point values.  Perhaps centered with (refX = width/2) and (refY = height/2)? Also, couldn't it assume the element's current _width_ and _height_? And please specify what _x_ and _y_ mean: offsets? If so, from where?  Couldn't they also be assigned default values?\n    /*\\\n     * Element.marker\n     [ method ]\n     **\n     * Creates a `<marker>` element from the current element\n     **\n     * To create a marker you have to specify the bounding rect and reference point:\n     - x (number)\n     - y (number)\n     - width (number)\n     - height (number)\n     - refX (number)\n     - refY (number)\n     = (Element) the `<marker>` element\n     * You can specify the marker later as an argument for `marker-start`, `marker-end`, `marker-mid`, and `marker` attributes. The `marker` attribute places the marker at every point along the path, and `marker-mid` places them at every point except the start and end.\n    \\*/\n    // TODO add usage for markers\n    elproto.marker = function (x, y, width, height, refX, refY) {\n        var p = make(\"marker\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            refX = x.refX || x.cx;\n            refY = x.refY || x.cy;\n            x = x.x;\n        }\n        $(p.node, {\n            viewBox: [x, y, width, height].join(\" \"),\n            markerWidth: width,\n            markerHeight: height,\n            orient: \"auto\",\n            refX: refX || 0,\n            refY: refY || 0,\n            id: p.id\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n    // animation\n    function slice(from, to, f) {\n        return function (arr) {\n            var res = arr.slice(from, to);\n            if (res.length == 1) {\n                res = res[0];\n            }\n            return f ? f(res) : res;\n        };\n    }\n    var Animation = function (attr, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        this.attr = attr;\n        this.dur = ms;\n        easing && (this.easing = easing);\n        callback && (this.callback = callback);\n    };\n    Snap._.Animation = Animation;\n    /*\\\n     * Snap.animation\n     [ method ]\n     **\n     * Creates an animation object\n     **\n     - attr (object) attributes of final destination\n     - duration (number) duration of the animation, in milliseconds\n     - easing (function) #optional one of easing functions of @mina or custom one\n     - callback (function) #optional callback function that fires when animation ends\n     = (object) animation object\n    \\*/\n    Snap.animation = function (attr, ms, easing, callback) {\n        return new Animation(attr, ms, easing, callback);\n    };\n    /*\\\n     * Element.inAnim\n     [ method ]\n     **\n     * Returns a set of animations that may be able to manipulate the current element\n     **\n     = (object) in format:\n     o {\n     o     anim (object) animation object,\n     o     mina (object) @mina object,\n     o     curStatus (number) 0..1 — status of the animation: 0 — just started, 1 — just finished,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n    \\*/\n    elproto.inAnim = function () {\n        var el = this,\n            res = [];\n        for (var id in el.anims) if (el.anims[has](id)) {\n            (function (a) {\n                res.push({\n                    anim: new Animation(a._attrs, a.dur, a.easing, a._callback),\n                    mina: a,\n                    curStatus: a.status(),\n                    status: function (val) {\n                        return a.status(val);\n                    },\n                    stop: function () {\n                        a.stop();\n                    }\n                });\n            }(el.anims[id]));\n        }\n        return res;\n    };\n    /*\\\n     * Snap.animate\n     [ method ]\n     **\n     * Runs generic animation of one number into another with a caring function\n     **\n     - from (number|array) number or array of numbers\n     - to (number|array) number or array of numbers\n     - setter (function) caring function that accepts one number argument\n     - duration (number) duration, in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function to execute when animation ends\n     = (object) animation object in @mina format\n     o {\n     o     id (string) animation id, consider it read-only,\n     o     duration (function) gets or sets the duration of the animation,\n     o     easing (function) easing,\n     o     speed (function) gets or sets the speed of the animation,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n     | var rect = Snap().rect(0, 0, 10, 10);\n     | Snap.animate(0, 10, function (val) {\n     |     rect.attr({\n     |         x: val\n     |     });\n     | }, 1000);\n     | // in given context is equivalent to\n     | rect.animate({x: 10}, 1000);\n    \\*/\n    Snap.animate = function (from, to, setter, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        var now = mina.time(),\n            anim = mina(from, to, now, now + ms, mina.time, setter, easing);\n        callback && eve.once(\"mina.finish.\" + anim.id, callback);\n        return anim;\n    };\n    /*\\\n     * Element.stop\n     [ method ]\n     **\n     * Stops all the animations for the current element\n     **\n     = (Element) the current element\n    \\*/\n    elproto.stop = function () {\n        var anims = this.inAnim();\n        for (var i = 0, ii = anims.length; i < ii; i++) {\n            anims[i].stop();\n        }\n        return this;\n    };\n    /*\\\n     * Element.animate\n     [ method ]\n     **\n     * Animates the given attributes of the element\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     = (Element) the current element\n    \\*/\n    elproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = easing.dur;\n            attrs = attrs.attr;\n        }\n        var fkeys = [], tkeys = [], keys = {}, from, to, f, eq,\n            el = this;\n        for (var key in attrs) if (attrs[has](key)) {\n            if (el.equal) {\n                eq = el.equal(key, Str(attrs[key]));\n                from = eq.from;\n                to = eq.to;\n                f = eq.f;\n            } else {\n                from = +el.attr(key);\n                to = +attrs[key];\n            }\n            var len = is(from, \"array\") ? from.length : 1;\n            keys[key] = slice(fkeys.length, fkeys.length + len, f);\n            fkeys = fkeys.concat(from);\n            tkeys = tkeys.concat(to);\n        }\n        var now = mina.time(),\n            anim = mina(fkeys, tkeys, now, now + ms, mina.time, function (val) {\n                var attr = {};\n                for (var key in keys) if (keys[has](key)) {\n                    attr[key] = keys[key](val);\n                }\n                el.attr(attr);\n            }, easing);\n        el.anims[anim.id] = anim;\n        anim._attrs = attrs;\n        anim._callback = callback;\n        eve(\"snap.animcreated.\" + el.id, anim);\n        eve.once(\"mina.finish.\" + anim.id, function () {\n            delete el.anims[anim.id];\n            callback && callback.call(el);\n        });\n        eve.once(\"mina.stop.\" + anim.id, function () {\n            delete el.anims[anim.id];\n        });\n        return el;\n    };\n    var eldata = {};\n    /*\\\n     * Element.data\n     [ method ]\n     **\n     * Adds or retrieves given value associated with given key. (Don’t confuse\n     * with `data-` attributes)\n     *\n     * See also @Element.removeData\n     - key (string) key to store data\n     - value (any) #optional value to store\n     = (object) @Element\n     * or, if value is not specified:\n     = (any) value\n     > Usage\n     | for (var i = 0, i < 5, i++) {\n     |     paper.circle(10 + 15 * i, 10, 10)\n     |          .attr({fill: \"#000\"})\n     |          .data(\"i\", i)\n     |          .click(function () {\n     |             alert(this.data(\"i\"));\n     |          });\n     | }\n    \\*/\n    elproto.data = function (key, value) {\n        var data = eldata[this.id] = eldata[this.id] || {};\n        if (arguments.length == 0){\n            eve(\"snap.data.get.\" + this.id, this, data, null);\n            return data;\n        }\n        if (arguments.length == 1) {\n            if (Snap.is(key, \"object\")) {\n                for (var i in key) if (key[has](i)) {\n                    this.data(i, key[i]);\n                }\n                return this;\n            }\n            eve(\"snap.data.get.\" + this.id, this, data[key], key);\n            return data[key];\n        }\n        data[key] = value;\n        eve(\"snap.data.set.\" + this.id, this, value, key);\n        return this;\n    };\n    /*\\\n     * Element.removeData\n     [ method ]\n     **\n     * Removes value associated with an element by given key.\n     * If key is not provided, removes all the data of the element.\n     - key (string) #optional key\n     = (object) @Element\n    \\*/\n    elproto.removeData = function (key) {\n        if (key == null) {\n            eldata[this.id] = {};\n        } else {\n            eldata[this.id] && delete eldata[this.id][key];\n        }\n        return this;\n    };\n    /*\\\n     * Element.outerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element, equivalent to HTML's `outerHTML`.\n     *\n     * See also @Element.innerSVG\n     = (string) SVG code for the element\n    \\*/\n    /*\\\n     * Element.toString\n     [ method ]\n     **\n     * See @Element.outerSVG\n    \\*/\n    elproto.outerSVG = elproto.toString = toString(1);\n    /*\\\n     * Element.innerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element's contents, equivalent to HTML's `innerHTML`\n     = (string) SVG code for the element\n    \\*/\n    elproto.innerSVG = toString();\n    function toString(type) {\n        return function () {\n            var res = type ? \"<\" + this.type : \"\",\n                attr = this.node.attributes,\n                chld = this.node.childNodes;\n            if (type) {\n                for (var i = 0, ii = attr.length; i < ii; i++) {\n                    res += \" \" + attr[i].name + '=\"' +\n                            attr[i].value.replace(/\"/g, '\\\\\"') + '\"';\n                }\n            }\n            if (chld.length) {\n                type && (res += \">\");\n                for (i = 0, ii = chld.length; i < ii; i++) {\n                    if (chld[i].nodeType == 3) {\n                        res += chld[i].nodeValue;\n                    } else if (chld[i].nodeType == 1) {\n                        res += wrap(chld[i]).toString();\n                    }\n                }\n                type && (res += \"</\" + this.type + \">\");\n            } else {\n                type && (res += \"/>\");\n            }\n            return res;\n        };\n    }\n    elproto.toDataURL = function () {\n        if (window && window.btoa) {\n            var bb = this.getBBox(),\n                svg = Snap.format('<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"{width}\" height=\"{height}\" viewBox=\"{x} {y} {width} {height}\">{contents}</svg>', {\n                x: +bb.x.toFixed(3),\n                y: +bb.y.toFixed(3),\n                width: +bb.width.toFixed(3),\n                height: +bb.height.toFixed(3),\n                contents: this.outerSVG()\n            });\n            return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svg)));\n        }\n    };\n    /*\\\n     * Fragment.select\n     [ method ]\n     **\n     * See @Element.select\n    \\*/\n    Fragment.prototype.select = elproto.select;\n    /*\\\n     * Fragment.selectAll\n     [ method ]\n     **\n     * See @Element.selectAll\n    \\*/\n    Fragment.prototype.selectAll = elproto.selectAll;\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var objectToString = Object.prototype.toString,\n        Str = String,\n        math = Math,\n        E = \"\";\n    function Matrix(a, b, c, d, e, f) {\n        if (b == null && objectToString.call(a) == \"[object SVGMatrix]\") {\n            this.a = a.a;\n            this.b = a.b;\n            this.c = a.c;\n            this.d = a.d;\n            this.e = a.e;\n            this.f = a.f;\n            return;\n        }\n        if (a != null) {\n            this.a = +a;\n            this.b = +b;\n            this.c = +c;\n            this.d = +d;\n            this.e = +e;\n            this.f = +f;\n        } else {\n            this.a = 1;\n            this.b = 0;\n            this.c = 0;\n            this.d = 1;\n            this.e = 0;\n            this.f = 0;\n        }\n    }\n    (function (matrixproto) {\n        /*\\\n         * Matrix.add\n         [ method ]\n         **\n         * Adds the given matrix to existing one\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         * or\n         - matrix (object) @Matrix\n        \\*/\n        matrixproto.add = function (a, b, c, d, e, f) {\n            var out = [[], [], []],\n                m = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]],\n                matrix = [[a, c, e], [b, d, f], [0, 0, 1]],\n                x, y, z, res;\n\n            if (a && a instanceof Matrix) {\n                matrix = [[a.a, a.c, a.e], [a.b, a.d, a.f], [0, 0, 1]];\n            }\n\n            for (x = 0; x < 3; x++) {\n                for (y = 0; y < 3; y++) {\n                    res = 0;\n                    for (z = 0; z < 3; z++) {\n                        res += m[x][z] * matrix[z][y];\n                    }\n                    out[x][y] = res;\n                }\n            }\n            this.a = out[0][0];\n            this.b = out[1][0];\n            this.c = out[0][1];\n            this.d = out[1][1];\n            this.e = out[0][2];\n            this.f = out[1][2];\n            return this;\n        };\n        /*\\\n         * Matrix.invert\n         [ method ]\n         **\n         * Returns an inverted version of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.invert = function () {\n            var me = this,\n                x = me.a * me.d - me.b * me.c;\n            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n        };\n        /*\\\n         * Matrix.clone\n         [ method ]\n         **\n         * Returns a copy of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.clone = function () {\n            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n        };\n        /*\\\n         * Matrix.translate\n         [ method ]\n         **\n         * Translate the matrix\n         - x (number) horizontal offset distance\n         - y (number) vertical offset distance\n        \\*/\n        matrixproto.translate = function (x, y) {\n            return this.add(1, 0, 0, 1, x, y);\n        };\n        /*\\\n         * Matrix.scale\n         [ method ]\n         **\n         * Scales the matrix\n         - x (number) amount to be scaled, with `1` resulting in no change\n         - y (number) #optional amount to scale along the vertical axis. (Otherwise `x` applies to both axes.)\n         - cx (number) #optional horizontal origin point from which to scale\n         - cy (number) #optional vertical origin point from which to scale\n         * Default cx, cy is the middle point of the element.\n        \\*/\n        matrixproto.scale = function (x, y, cx, cy) {\n            y == null && (y = x);\n            (cx || cy) && this.add(1, 0, 0, 1, cx, cy);\n            this.add(x, 0, 0, y, 0, 0);\n            (cx || cy) && this.add(1, 0, 0, 1, -cx, -cy);\n            return this;\n        };\n        /*\\\n         * Matrix.rotate\n         [ method ]\n         **\n         * Rotates the matrix\n         - a (number) angle of rotation, in degrees\n         - x (number) horizontal origin point from which to rotate\n         - y (number) vertical origin point from which to rotate\n        \\*/\n        matrixproto.rotate = function (a, x, y) {\n            a = Snap.rad(a);\n            x = x || 0;\n            y = y || 0;\n            var cos = +math.cos(a).toFixed(9),\n                sin = +math.sin(a).toFixed(9);\n            this.add(cos, sin, -sin, cos, x, y);\n            return this.add(1, 0, 0, 1, -x, -y);\n        };\n        /*\\\n         * Matrix.x\n         [ method ]\n         **\n         * Returns x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n         - x (number)\n         - y (number)\n         = (number) x\n        \\*/\n        matrixproto.x = function (x, y) {\n            return x * this.a + y * this.c + this.e;\n        };\n        /*\\\n         * Matrix.y\n         [ method ]\n         **\n         * Returns y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n         - x (number)\n         - y (number)\n         = (number) y\n        \\*/\n        matrixproto.y = function (x, y) {\n            return x * this.b + y * this.d + this.f;\n        };\n        matrixproto.get = function (i) {\n            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n        };\n        matrixproto.toString = function () {\n            return \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\";\n        };\n        matrixproto.offset = function () {\n            return [this.e.toFixed(4), this.f.toFixed(4)];\n        };\n        function norm(a) {\n            return a[0] * a[0] + a[1] * a[1];\n        }\n        function normalize(a) {\n            var mag = math.sqrt(norm(a));\n            a[0] && (a[0] /= mag);\n            a[1] && (a[1] /= mag);\n        }\n        /*\\\n         * Matrix.determinant\n         [ method ]\n         **\n         * Finds determinant of the given matrix.\n         = (number) determinant\n        \\*/\n        matrixproto.determinant = function () {\n            return this.a * this.d - this.b * this.c;\n        };\n        /*\\\n         * Matrix.split\n         [ method ]\n         **\n         * Splits matrix into primitive transformations\n         = (object) in format:\n         o dx (number) translation by x\n         o dy (number) translation by y\n         o scalex (number) scale by x\n         o scaley (number) scale by y\n         o shear (number) shear\n         o rotate (number) rotation in deg\n         o isSimple (boolean) could it be represented via simple transformations\n        \\*/\n        matrixproto.split = function () {\n            var out = {};\n            // translation\n            out.dx = this.e;\n            out.dy = this.f;\n\n            // scale and shear\n            var row = [[this.a, this.c], [this.b, this.d]];\n            out.scalex = math.sqrt(norm(row[0]));\n            normalize(row[0]);\n\n            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\n            out.scaley = math.sqrt(norm(row[1]));\n            normalize(row[1]);\n            out.shear /= out.scaley;\n\n            if (this.determinant() < 0) {\n                out.scalex = -out.scalex;\n            }\n\n            // rotation\n            var sin = -row[0][1],\n                cos = row[1][1];\n            if (cos < 0) {\n                out.rotate = Snap.deg(math.acos(cos));\n                if (sin < 0) {\n                    out.rotate = 360 - out.rotate;\n                }\n            } else {\n                out.rotate = Snap.deg(math.asin(sin));\n            }\n\n            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n            return out;\n        };\n        /*\\\n         * Matrix.toTransformString\n         [ method ]\n         **\n         * Returns transform string that represents given matrix\n         = (string) transform string\n        \\*/\n        matrixproto.toTransformString = function (shorter) {\n            var s = shorter || this.split();\n            if (!+s.shear.toFixed(9)) {\n                s.scalex = +s.scalex.toFixed(4);\n                s.scaley = +s.scaley.toFixed(4);\n                s.rotate = +s.rotate.toFixed(4);\n                return  (s.dx || s.dy ? \"t\" + [+s.dx.toFixed(4), +s.dy.toFixed(4)] : E) +\n                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E) +\n                        (s.rotate ? \"r\" + [+s.rotate.toFixed(4), 0, 0] : E);\n            } else {\n                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n            }\n        };\n    })(Matrix.prototype);\n    /*\\\n     * Snap.Matrix\n     [ method ]\n     **\n     * Matrix constructor, extend on your own risk.\n     * To create matrices use @Snap.matrix.\n    \\*/\n    Snap.Matrix = Matrix;\n    /*\\\n     * Snap.matrix\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns a matrix based on the given parameters\n     - a (number)\n     - b (number)\n     - c (number)\n     - d (number)\n     - e (number)\n     - f (number)\n     * or\n     - svgMatrix (SVGMatrix)\n     = (object) @Matrix\n    \\*/\n    Snap.matrix = function (a, b, c, d, e, f) {\n        return new Matrix(a, b, c, d, e, f);\n    };\n});\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var has = \"hasOwnProperty\",\n        make = Snap._.make,\n        wrap = Snap._.wrap,\n        is = Snap.is,\n        getSomeDefs = Snap._.getSomeDefs,\n        reURLValue = /^url\\(#?([^)]+)\\)$/,\n        $ = Snap._.$,\n        URL = Snap.url,\n        Str = String,\n        separator = Snap._.separator,\n        E = \"\";\n    // Attributes event handlers\n    eve.on(\"snap.util.attr.mask\", function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value.type == \"mask\") {\n                var mask = value;\n            } else {\n                mask = make(\"mask\", getSomeDefs(this));\n                mask.node.appendChild(value.node);\n            }\n            !mask.node.id && $(mask.node, {\n                id: mask.id\n            });\n            $(this.node, {\n                mask: URL(mask.id)\n            });\n        }\n    });\n    (function (clipIt) {\n        eve.on(\"snap.util.attr.clip\", clipIt);\n        eve.on(\"snap.util.attr.clip-path\", clipIt);\n        eve.on(\"snap.util.attr.clipPath\", clipIt);\n    }(function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            if (value.type == \"clipPath\") {\n                var clip = value;\n            } else {\n                clip = make(\"clipPath\", getSomeDefs(this));\n                clip.node.appendChild(value.node);\n                !clip.node.id && $(clip.node, {\n                    id: clip.id\n                });\n            }\n            $(this.node, {\n                \"clip-path\": URL(clip.node.id || clip.id)\n            });\n        }\n    }));\n    function fillStroke(name) {\n        return function (value) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1 &&\n                (value.node.firstChild.tagName == \"radialGradient\" ||\n                value.node.firstChild.tagName == \"linearGradient\" ||\n                value.node.firstChild.tagName == \"pattern\")) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value instanceof Element) {\n                if (value.type == \"radialGradient\" || value.type == \"linearGradient\"\n                   || value.type == \"pattern\") {\n                    if (!value.node.id) {\n                        $(value.node, {\n                            id: value.id\n                        });\n                    }\n                    var fill = URL(value.node.id);\n                } else {\n                    fill = value.attr(name);\n                }\n            } else {\n                fill = Snap.color(value);\n                if (fill.error) {\n                    var grad = Snap(getSomeDefs(this).ownerSVGElement).gradient(value);\n                    if (grad) {\n                        if (!grad.node.id) {\n                            $(grad.node, {\n                                id: grad.id\n                            });\n                        }\n                        fill = URL(grad.node.id);\n                    } else {\n                        fill = value;\n                    }\n                } else {\n                    fill = Str(fill);\n                }\n            }\n            var attrs = {};\n            attrs[name] = fill;\n            $(this.node, attrs);\n            this.node.style[name] = E;\n        };\n    }\n    eve.on(\"snap.util.attr.fill\", fillStroke(\"fill\"));\n    eve.on(\"snap.util.attr.stroke\", fillStroke(\"stroke\"));\n    var gradrg = /^([lr])(?:\\(([^)]*)\\))?(.*)$/i;\n    eve.on(\"snap.util.grad.parse\", function parseGrad(string) {\n        string = Str(string);\n        var tokens = string.match(gradrg);\n        if (!tokens) {\n            return null;\n        }\n        var type = tokens[1],\n            params = tokens[2],\n            stops = tokens[3];\n        params = params.split(/\\s*,\\s*/).map(function (el) {\n            return +el == el ? +el : el;\n        });\n        if (params.length == 1 && params[0] == 0) {\n            params = [];\n        }\n        stops = stops.split(\"-\");\n        stops = stops.map(function (el) {\n            el = el.split(\":\");\n            var out = {\n                color: el[0]\n            };\n            if (el[1]) {\n                out.offset = parseFloat(el[1]);\n            }\n            return out;\n        });\n        return {\n            type: type,\n            params: params,\n            stops: stops\n        };\n    });\n\n    eve.on(\"snap.util.attr.d\", function (value) {\n        eve.stop();\n        if (is(value, \"array\") && is(value[0], \"array\")) {\n            value = Snap.path.toString.call(value);\n        }\n        value = Str(value);\n        if (value.match(/[ruo]/i)) {\n            value = Snap.path.toAbsolute(value);\n        }\n        $(this.node, {d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.#text\", function (value) {\n        eve.stop();\n        value = Str(value);\n        var txt = glob.doc.createTextNode(value);\n        while (this.node.firstChild) {\n            this.node.removeChild(this.node.firstChild);\n        }\n        this.node.appendChild(txt);\n    })(-1);\n    eve.on(\"snap.util.attr.path\", function (value) {\n        eve.stop();\n        this.attr({d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.class\", function (value) {\n        eve.stop();\n        this.node.className.baseVal = value;\n    })(-1);\n    eve.on(\"snap.util.attr.viewBox\", function (value) {\n        var vb;\n        if (is(value, \"object\") && \"x\" in value) {\n            vb = [value.x, value.y, value.width, value.height].join(\" \");\n        } else if (is(value, \"array\")) {\n            vb = value.join(\" \");\n        } else {\n            vb = value;\n        }\n        $(this.node, {\n            viewBox: vb\n        });\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.transform\", function (value) {\n        this.transform(value);\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.r\", function (value) {\n        if (this.type == \"rect\") {\n            eve.stop();\n            $(this.node, {\n                rx: value,\n                ry: value\n            });\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.textpath\", function (value) {\n        eve.stop();\n        if (this.type == \"text\") {\n            var id, tp, node;\n            if (!value && this.textPath) {\n                tp = this.textPath;\n                while (tp.node.firstChild) {\n                    this.node.appendChild(tp.node.firstChild);\n                }\n                tp.remove();\n                delete this.textPath;\n                return;\n            }\n            if (is(value, \"string\")) {\n                var defs = getSomeDefs(this),\n                    path = wrap(defs.parentNode).path(value);\n                defs.appendChild(path.node);\n                id = path.id;\n                path.attr({id: id});\n            } else {\n                value = wrap(value);\n                if (value instanceof Element) {\n                    id = value.attr(\"id\");\n                    if (!id) {\n                        id = value.id;\n                        value.attr({id: id});\n                    }\n                }\n            }\n            if (id) {\n                tp = this.textPath;\n                node = this.node;\n                if (tp) {\n                    tp.attr({\"xlink:href\": \"#\" + id});\n                } else {\n                    tp = $(\"textPath\", {\n                        \"xlink:href\": \"#\" + id\n                    });\n                    while (node.firstChild) {\n                        tp.appendChild(node.firstChild);\n                    }\n                    node.appendChild(tp);\n                    this.textPath = wrap(tp);\n                }\n            }\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.text\", function (value) {\n        if (this.type == \"text\") {\n            var i = 0,\n                node = this.node,\n                tuner = function (chunk) {\n                    var out = $(\"tspan\");\n                    if (is(chunk, \"array\")) {\n                        for (var i = 0; i < chunk.length; i++) {\n                            out.appendChild(tuner(chunk[i]));\n                        }\n                    } else {\n                        out.appendChild(glob.doc.createTextNode(chunk));\n                    }\n                    out.normalize && out.normalize();\n                    return out;\n                };\n            while (node.firstChild) {\n                node.removeChild(node.firstChild);\n            }\n            var tuned = tuner(value);\n            while (tuned.firstChild) {\n                node.appendChild(tuned.firstChild);\n            }\n        }\n        eve.stop();\n    })(-1);\n    function setFontSize(value) {\n        eve.stop();\n        if (value == +value) {\n            value += \"px\";\n        }\n        this.node.style.fontSize = value;\n    }\n    eve.on(\"snap.util.attr.fontSize\", setFontSize)(-1);\n    eve.on(\"snap.util.attr.font-size\", setFontSize)(-1);\n\n\n    eve.on(\"snap.util.getattr.transform\", function () {\n        eve.stop();\n        return this.transform();\n    })(-1);\n    eve.on(\"snap.util.getattr.textpath\", function () {\n        eve.stop();\n        return this.textPath;\n    })(-1);\n    // Markers\n    (function () {\n        function getter(end) {\n            return function () {\n                eve.stop();\n                var style = glob.doc.defaultView.getComputedStyle(this.node, null).getPropertyValue(\"marker-\" + end);\n                if (style == \"none\") {\n                    return style;\n                } else {\n                    return Snap(glob.doc.getElementById(style.match(reURLValue)[1]));\n                }\n            };\n        }\n        function setter(end) {\n            return function (value) {\n                eve.stop();\n                var name = \"marker\" + end.charAt(0).toUpperCase() + end.substring(1);\n                if (value == \"\" || !value) {\n                    this.node.style[name] = \"none\";\n                    return;\n                }\n                if (value.type == \"marker\") {\n                    var id = value.node.id;\n                    if (!id) {\n                        $(value.node, {id: value.id});\n                    }\n                    this.node.style[name] = URL(id);\n                    return;\n                }\n            };\n        }\n        eve.on(\"snap.util.getattr.marker-end\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.markerEnd\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.marker-start\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.markerStart\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.marker-mid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.getattr.markerMid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.marker-end\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.markerEnd\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.marker-start\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.markerStart\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.marker-mid\", setter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.markerMid\", setter(\"mid\"))(-1);\n    }());\n    eve.on(\"snap.util.getattr.r\", function () {\n        if (this.type == \"rect\" && $(this.node, \"rx\") == $(this.node, \"ry\")) {\n            eve.stop();\n            return $(this.node, \"rx\");\n        }\n    })(-1);\n    function textExtract(node) {\n        var out = [];\n        var children = node.childNodes;\n        for (var i = 0, ii = children.length; i < ii; i++) {\n            var chi = children[i];\n            if (chi.nodeType == 3) {\n                out.push(chi.nodeValue);\n            }\n            if (chi.tagName == \"tspan\") {\n                if (chi.childNodes.length == 1 && chi.firstChild.nodeType == 3) {\n                    out.push(chi.firstChild.nodeValue);\n                } else {\n                    out.push(textExtract(chi));\n                }\n            }\n        }\n        return out;\n    }\n    eve.on(\"snap.util.getattr.text\", function () {\n        if (this.type == \"text\" || this.type == \"tspan\") {\n            eve.stop();\n            var out = textExtract(this.node);\n            return out.length == 1 ? out[0] : out;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.#text\", function () {\n        return this.node.textContent;\n    })(-1);\n    eve.on(\"snap.util.getattr.viewBox\", function () {\n        eve.stop();\n        var vb = $(this.node, \"viewBox\");\n        if (vb) {\n            vb = vb.split(separator);\n            return Snap._.box(+vb[0], +vb[1], +vb[2], +vb[3]);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.points\", function () {\n        var p = $(this.node, \"points\");\n        eve.stop();\n        if (p) {\n            return p.split(separator);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.path\", function () {\n        var p = $(this.node, \"d\");\n        eve.stop();\n        return p;\n    })(-1);\n    eve.on(\"snap.util.getattr.class\", function () {\n        return this.node.className.baseVal;\n    })(-1);\n    function getFontSize() {\n        eve.stop();\n        return this.node.style.fontSize;\n    }\n    eve.on(\"snap.util.getattr.fontSize\", getFontSize)(-1);\n    eve.on(\"snap.util.getattr.font-size\", getFontSize)(-1);\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var rgNotSpace = /\\S+/g,\n        rgBadSpace = /[\\t\\r\\n\\f]/g,\n        rgTrim = /(^\\s+|\\s+$)/g,\n        Str = String,\n        elproto = Element.prototype;\n    /*\\\n     * Element.addClass\n     [ method ]\n     **\n     * Adds given class name or list of class names to the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.addClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n\n        if (classes.length) {\n            j = 0;\n            while ((clazz = classes[j++])) {\n                pos = curClasses.indexOf(clazz);\n                if (!~pos) {\n                    curClasses.push(clazz);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.removeClass\n     [ method ]\n     **\n     * Removes given class name or list of class names from the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.removeClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        if (curClasses.length) {\n            j = 0;\n            while ((clazz = classes[j++])) {\n                pos = curClasses.indexOf(clazz);\n                if (~pos) {\n                    curClasses.splice(pos, 1);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.hasClass\n     [ method ]\n     **\n     * Checks if the element has a given class name in the list of class names applied to it.\n     - value (string) class name\n     **\n     = (boolean) `true` if the element has given class\n    \\*/\n    elproto.hasClass = function (value) {\n        var elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [];\n        return !!~curClasses.indexOf(value);\n    };\n    /*\\\n     * Element.toggleClass\n     [ method ]\n     **\n     * Add or remove one or more classes from the element, depending on either\n     * the class’s presence or the value of the `flag` argument.\n     - value (string) class name or space separated list of class names\n     - flag (boolean) value to determine whether the class should be added or removed\n     **\n     = (Element) original element.\n    \\*/\n    elproto.toggleClass = function (value, flag) {\n        if (flag != null) {\n            if (flag) {\n                return this.addClass(value);\n            } else {\n                return this.removeClass(value);\n            }\n        }\n        var classes = (value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        j = 0;\n        while ((clazz = classes[j++])) {\n            pos = curClasses.indexOf(clazz);\n            if (~pos) {\n                curClasses.splice(pos, 1);\n            } else {\n                curClasses.push(clazz);\n            }\n        }\n\n        finalValue = curClasses.join(\" \");\n        if (className != finalValue) {\n            elem.className.baseVal = finalValue;\n        }\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var operators = {\n            \"+\": function (x, y) {\n                    return x + y;\n                },\n            \"-\": function (x, y) {\n                    return x - y;\n                },\n            \"/\": function (x, y) {\n                    return x / y;\n                },\n            \"*\": function (x, y) {\n                    return x * y;\n                }\n        },\n        Str = String,\n        reUnit = /[a-z]+$/i,\n        reAddon = /^\\s*([+\\-\\/*])\\s*=\\s*([\\d.eE+\\-]+)\\s*([^\\d\\s]+)?\\s*$/;\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    eve.on(\"snap.util.attr\", function (val) {\n        var plus = Str(val).match(reAddon);\n        if (plus) {\n            var evnt = eve.nt(),\n                name = evnt.substring(evnt.lastIndexOf(\".\") + 1),\n                a = this.attr(name),\n                atr = {};\n            eve.stop();\n            var unit = plus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[plus[1]];\n            if (aUnit && aUnit == unit) {\n                val = op(parseFloat(a), +plus[2]);\n            } else {\n                a = this.asPX(name);\n                val = op(this.asPX(name), this.asPX(name, plus[2] + unit));\n            }\n            if (isNaN(a) || isNaN(val)) {\n                return;\n            }\n            atr[name] = val;\n            this.attr(atr);\n        }\n    })(-10);\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this,\n            bplus = Str(b).match(reAddon);\n        if (bplus) {\n            eve.stop();\n            var unit = bplus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[bplus[1]];\n            if (aUnit && aUnit == unit) {\n                return {\n                    from: parseFloat(a),\n                    to: op(parseFloat(a), +bplus[2]),\n                    f: getUnit(aUnit)\n                };\n            } else {\n                a = this.asPX(name);\n                return {\n                    from: a,\n                    to: op(a, this.asPX(name, bplus[2] + unit)),\n                    f: getNumber\n                };\n            }\n        }\n    })(-10);\n});\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var proto = Paper.prototype,\n        is = Snap.is;\n    /*\\\n     * Paper.rect\n     [ method ]\n     *\n     * Draws a rectangle\n     **\n     - x (number) x coordinate of the top left corner\n     - y (number) y coordinate of the top left corner\n     - width (number) width\n     - height (number) height\n     - rx (number) #optional horizontal radius for rounded corners, default is 0\n     - ry (number) #optional vertical radius for rounded corners, default is rx or 0\n     = (object) the `rect` element\n     **\n     > Usage\n     | // regular rectangle\n     | var c = paper.rect(10, 10, 50, 50);\n     | // rectangle with rounded corners\n     | var c = paper.rect(40, 40, 50, 50, 10);\n    \\*/\n    proto.rect = function (x, y, w, h, rx, ry) {\n        var attr;\n        if (ry == null) {\n            ry = rx;\n        }\n        if (is(x, \"object\") && x == \"[object Object]\") {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                width: w,\n                height: h\n            };\n            if (rx != null) {\n                attr.rx = rx;\n                attr.ry = ry;\n            }\n        }\n        return this.el(\"rect\", attr);\n    };\n    /*\\\n     * Paper.circle\n     [ method ]\n     **\n     * Draws a circle\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - r (number) radius\n     = (object) the `circle` element\n     **\n     > Usage\n     | var c = paper.circle(50, 50, 40);\n    \\*/\n    proto.circle = function (cx, cy, r) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr = {\n                cx: cx,\n                cy: cy,\n                r: r\n            };\n        }\n        return this.el(\"circle\", attr);\n    };\n\n    var preload = (function () {\n        function onerror() {\n            this.parentNode.removeChild(this);\n        }\n        return function (src, f) {\n            var img = glob.doc.createElement(\"img\"),\n                body = glob.doc.body;\n            img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n            img.onload = function () {\n                f.call(img);\n                img.onload = img.onerror = null;\n                body.removeChild(img);\n            };\n            img.onerror = onerror;\n            body.appendChild(img);\n            img.src = src;\n        };\n    }());\n\n    /*\\\n     * Paper.image\n     [ method ]\n     **\n     * Places an image on the surface\n     **\n     - src (string) URI of the source image\n     - x (number) x offset position\n     - y (number) y offset position\n     - width (number) width of the image\n     - height (number) height of the image\n     = (object) the `image` element\n     * or\n     = (object) Snap element object with type `image`\n     **\n     > Usage\n     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n    \\*/\n    proto.image = function (src, x, y, width, height) {\n        var el = this.el(\"image\");\n        if (is(src, \"object\") && \"src\" in src) {\n            el.attr(src);\n        } else if (src != null) {\n            var set = {\n                \"xlink:href\": src,\n                preserveAspectRatio: \"none\"\n            };\n            if (x != null && y != null) {\n                set.x = x;\n                set.y = y;\n            }\n            if (width != null && height != null) {\n                set.width = width;\n                set.height = height;\n            } else {\n                preload(src, function () {\n                    Snap._.$(el.node, {\n                        width: this.offsetWidth,\n                        height: this.offsetHeight\n                    });\n                });\n            }\n            Snap._.$(el.node, set);\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ellipse\n     [ method ]\n     **\n     * Draws an ellipse\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - rx (number) horizontal radius\n     - ry (number) vertical radius\n     = (object) the `ellipse` element\n     **\n     > Usage\n     | var c = paper.ellipse(50, 50, 40, 20);\n    \\*/\n    proto.ellipse = function (cx, cy, rx, ry) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr ={\n                cx: cx,\n                cy: cy,\n                rx: rx,\n                ry: ry\n            };\n        }\n        return this.el(\"ellipse\", attr);\n    };\n    // SIERRA Paper.path(): Unclear from the link what a Catmull-Rom curveto is, and why it would make life any easier.\n    /*\\\n     * Paper.path\n     [ method ]\n     **\n     * Creates a `<path>` element using the given string as the path's definition\n     - pathString (string) #optional path string in SVG format\n     * Path string consists of one-letter commands, followed by comma seprarated arguments in numerical form. Example:\n     | \"M10,20L30,40\"\n     * This example features two commands: `M`, with arguments `(10, 20)` and `L` with arguments `(30, 40)`. Uppercase letter commands express coordinates in absolute terms, while lowercase commands express them in relative terms from the most recently declared coordinates.\n     *\n     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a> or <a href=\"https://developer.mozilla.org/en/SVG/Tutorial/Paths\">article about path strings at MDN</a>.</p>\n     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n     * * _Catmull-Rom curveto_ is a not standard SVG command and added to make life easier.\n     * Note: there is a special case when a path consists of only three commands: `M10,10R…z`. In this case the path connects back to its starting point.\n     > Usage\n     | var c = paper.path(\"M10 10L90 90\");\n     | // draw a diagonal line:\n     | // move to 10,10, line to 90,90\n    \\*/\n    proto.path = function (d) {\n        var attr;\n        if (is(d, \"object\") && !is(d, \"array\")) {\n            attr = d;\n        } else if (d) {\n            attr = {d: d};\n        }\n        return this.el(\"path\", attr);\n    };\n    /*\\\n     * Paper.g\n     [ method ]\n     **\n     * Creates a group element\n     **\n     - varargs (…) #optional elements to nest within the group\n     = (object) the `g` element\n     **\n     > Usage\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g(c2, c1); // note that the order of elements is different\n     * or\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g();\n     | g.add(c2, c1);\n    \\*/\n    /*\\\n     * Paper.group\n     [ method ]\n     **\n     * See @Paper.g\n    \\*/\n    proto.group = proto.g = function (first) {\n        var attr,\n            el = this.el(\"g\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.svg\n     [ method ]\n     **\n     * Creates a nested SVG element.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `svg` element\n     **\n    \\*/\n    proto.svg = function (x, y, width, height, vbx, vby, vbw, vbh) {\n        var attrs = {};\n        if (is(x, \"object\") && y == null) {\n            attrs = x;\n        } else {\n            if (x != null) {\n                attrs.x = x;\n            }\n            if (y != null) {\n                attrs.y = y;\n            }\n            if (width != null) {\n                attrs.width = width;\n            }\n            if (height != null) {\n                attrs.height = height;\n            }\n            if (vbx != null && vby != null && vbw != null && vbh != null) {\n                attrs.viewBox = [vbx, vby, vbw, vbh];\n            }\n        }\n        return this.el(\"svg\", attrs);\n    };\n    /*\\\n     * Paper.mask\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a mask.\n     **\n     = (object) the `mask` element\n     **\n    \\*/\n    proto.mask = function (first) {\n        var attr,\n            el = this.el(\"mask\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ptrn\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a pattern.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `pattern` element\n     **\n    \\*/\n    proto.ptrn = function (x, y, width, height, vx, vy, vw, vh) {\n        if (is(x, \"object\")) {\n            var attr = x;\n        } else {\n            attr = {patternUnits: \"userSpaceOnUse\"};\n            if (x) {\n                attr.x = x;\n            }\n            if (y) {\n                attr.y = y;\n            }\n            if (width != null) {\n                attr.width = width;\n            }\n            if (height != null) {\n                attr.height = height;\n            }\n            if (vx != null && vy != null && vw != null && vh != null) {\n                attr.viewBox = [vx, vy, vw, vh];\n            } else {\n                attr.viewBox = [x || 0, y || 0, width || 0, height || 0];\n            }\n        }\n        return this.el(\"pattern\", attr);\n    };\n    /*\\\n     * Paper.use\n     [ method ]\n     **\n     * Creates a <use> element.\n     - id (string) @optional id of element to link\n     * or\n     - id (Element) @optional element to link\n     **\n     = (object) the `use` element\n     **\n    \\*/\n    proto.use = function (id) {\n        if (id != null) {\n            if (id instanceof Element) {\n                if (!id.attr(\"id\")) {\n                    id.attr({id: Snap._.id(id)});\n                }\n                id = id.attr(\"id\");\n            }\n            if (String(id).charAt() == \"#\") {\n                id = id.substring(1);\n            }\n            return this.el(\"use\", {\"xlink:href\": \"#\" + id});\n        } else {\n            return Element.prototype.use.call(this);\n        }\n    };\n    /*\\\n     * Paper.symbol\n     [ method ]\n     **\n     * Creates a <symbol> element.\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     = (object) the `symbol` element\n     **\n    \\*/\n    proto.symbol = function (vx, vy, vw, vh) {\n        var attr = {};\n        if (vx != null && vy != null && vw != null && vh != null) {\n            attr.viewBox = [vx, vy, vw, vh];\n        }\n\n        return this.el(\"symbol\", attr);\n    };\n    /*\\\n     * Paper.text\n     [ method ]\n     **\n     * Draws a text string\n     **\n     - x (number) x coordinate position\n     - y (number) y coordinate position\n     - text (string|array) The text string to draw or array of strings to nest within separate `<tspan>` elements\n     = (object) the `text` element\n     **\n     > Usage\n     | var t1 = paper.text(50, 50, \"Snap\");\n     | var t2 = paper.text(50, 50, [\"S\",\"n\",\"a\",\"p\"]);\n     | // Text path usage\n     | t1.attr({textpath: \"M10,10L100,100\"});\n     | // or\n     | var pth = paper.path(\"M10,10L100,100\");\n     | t1.attr({textpath: pth});\n    \\*/\n    proto.text = function (x, y, text) {\n        var attr = {};\n        if (is(x, \"object\")) {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                text: text || \"\"\n            };\n        }\n        return this.el(\"text\", attr);\n    };\n    /*\\\n     * Paper.line\n     [ method ]\n     **\n     * Draws a line\n     **\n     - x1 (number) x coordinate position of the start\n     - y1 (number) y coordinate position of the start\n     - x2 (number) x coordinate position of the end\n     - y2 (number) y coordinate position of the end\n     = (object) the `line` element\n     **\n     > Usage\n     | var t1 = paper.line(50, 50, 100, 100);\n    \\*/\n    proto.line = function (x1, y1, x2, y2) {\n        var attr = {};\n        if (is(x1, \"object\")) {\n            attr = x1;\n        } else if (x1 != null) {\n            attr = {\n                x1: x1,\n                x2: x2,\n                y1: y1,\n                y2: y2\n            };\n        }\n        return this.el(\"line\", attr);\n    };\n    /*\\\n     * Paper.polyline\n     [ method ]\n     **\n     * Draws a polyline\n     **\n     - points (array) array of points\n     * or\n     - varargs (…) points\n     = (object) the `polyline` element\n     **\n     > Usage\n     | var p1 = paper.polyline([10, 10, 100, 100]);\n     | var p2 = paper.polyline(10, 10, 100, 100);\n    \\*/\n    proto.polyline = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polyline\", attr);\n    };\n    /*\\\n     * Paper.polygon\n     [ method ]\n     **\n     * Draws a polygon. See @Paper.polyline\n    \\*/\n    proto.polygon = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polygon\", attr);\n    };\n    // gradients\n    (function () {\n        var $ = Snap._.$;\n        // gradients' helpers\n        function Gstops() {\n            return this.selectAll(\"stop\");\n        }\n        function GaddStop(color, offset) {\n            var stop = $(\"stop\"),\n                attr = {\n                    offset: +offset + \"%\"\n                };\n            color = Snap.color(color);\n            attr[\"stop-color\"] = color.hex;\n            if (color.opacity < 1) {\n                attr[\"stop-opacity\"] = color.opacity;\n            }\n            $(stop, attr);\n            this.node.appendChild(stop);\n            return this;\n        }\n        function GgetBBox() {\n            if (this.type == \"linearGradient\") {\n                var x1 = $(this.node, \"x1\") || 0,\n                    x2 = $(this.node, \"x2\") || 1,\n                    y1 = $(this.node, \"y1\") || 0,\n                    y2 = $(this.node, \"y2\") || 0;\n                return Snap._.box(x1, y1, math.abs(x2 - x1), math.abs(y2 - y1));\n            } else {\n                var cx = this.node.cx || .5,\n                    cy = this.node.cy || .5,\n                    r = this.node.r || 0;\n                return Snap._.box(cx - r, cy - r, r * 2, r * 2);\n            }\n        }\n        function gradient(defs, str) {\n            var grad = eve(\"snap.util.grad.parse\", null, str).firstDefined(),\n                el;\n            if (!grad) {\n                return null;\n            }\n            grad.params.unshift(defs);\n            if (grad.type.toLowerCase() == \"l\") {\n                el = gradientLinear.apply(0, grad.params);\n            } else {\n                el = gradientRadial.apply(0, grad.params);\n            }\n            if (grad.type != grad.type.toLowerCase()) {\n                $(el.node, {\n                    gradientUnits: \"userSpaceOnUse\"\n                });\n            }\n            var stops = grad.stops,\n                len = stops.length,\n                start = 0,\n                j = 0;\n            function seed(i, end) {\n                var step = (end - start) / (i - j);\n                for (var k = j; k < i; k++) {\n                    stops[k].offset = +(+start + step * (k - j)).toFixed(2);\n                }\n                j = i;\n                start = end;\n            }\n            len--;\n            for (var i = 0; i < len; i++) if (\"offset\" in stops[i]) {\n                seed(i, stops[i].offset);\n            }\n            stops[len].offset = stops[len].offset || 100;\n            seed(len, stops[len].offset);\n            for (i = 0; i <= len; i++) {\n                var stop = stops[i];\n                el.addStop(stop.color, stop.offset);\n            }\n            return el;\n        }\n        function gradientLinear(defs, x1, y1, x2, y2) {\n            var el = Snap._.make(\"linearGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            if (x1 != null) {\n                $(el.node, {\n                    x1: x1,\n                    y1: y1,\n                    x2: x2,\n                    y2: y2\n                });\n            }\n            return el;\n        }\n        function gradientRadial(defs, cx, cy, r, fx, fy) {\n            var el = Snap._.make(\"radialGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            if (cx != null) {\n                $(el.node, {\n                    cx: cx,\n                    cy: cy,\n                    r: r\n                });\n            }\n            if (fx != null && fy != null) {\n                $(el.node, {\n                    fx: fx,\n                    fy: fy\n                });\n            }\n            return el;\n        }\n        /*\\\n         * Paper.gradient\n         [ method ]\n         **\n         * Creates a gradient element\n         **\n         - gradient (string) gradient descriptor\n         > Gradient Descriptor\n         * The gradient descriptor is an expression formatted as\n         * follows: `<type>(<coords>)<colors>`.  The `<type>` can be\n         * either linear or radial.  The uppercase `L` or `R` letters\n         * indicate absolute coordinates offset from the SVG surface.\n         * Lowercase `l` or `r` letters indicate coordinates\n         * calculated relative to the element to which the gradient is\n         * applied.  Coordinates specify a linear gradient vector as\n         * `x1`, `y1`, `x2`, `y2`, or a radial gradient as `cx`, `cy`,\n         * `r` and optional `fx`, `fy` specifying a focal point away\n         * from the center of the circle. Specify `<colors>` as a list\n         * of dash-separated CSS color values.  Each color may be\n         * followed by a custom offset value, separated with a colon\n         * character.\n         > Examples\n         * Linear gradient, relative from top-left corner to bottom-right\n         * corner, from black through red to white:\n         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n         * Linear gradient, absolute from (0, 0) to (100, 100), from black\n         * through red at 25% to white:\n         | var g = paper.gradient(\"L(0, 0, 100, 100)#000-#f00:25-#fff\");\n         * Radial gradient, relative from the center of the element with radius\n         * half the width, from black to white:\n         | var g = paper.gradient(\"r(0.5, 0.5, 0.5)#000-#fff\");\n         * To apply the gradient:\n         | paper.circle(50, 50, 40).attr({\n         |     fill: g\n         | });\n         = (object) the `gradient` element\n        \\*/\n        proto.gradient = function (str) {\n            return gradient(this.defs, str);\n        };\n        proto.gradientLinear = function (x1, y1, x2, y2) {\n            return gradientLinear(this.defs, x1, y1, x2, y2);\n        };\n        proto.gradientRadial = function (cx, cy, r, fx, fy) {\n            return gradientRadial(this.defs, cx, cy, r, fx, fy);\n        };\n        /*\\\n         * Paper.toString\n         [ method ]\n         **\n         * Returns SVG code for the @Paper\n         = (string) SVG code for the @Paper\n        \\*/\n        proto.toString = function () {\n            var doc = this.node.ownerDocument,\n                f = doc.createDocumentFragment(),\n                d = doc.createElement(\"div\"),\n                svg = this.node.cloneNode(true),\n                res;\n            f.appendChild(d);\n            d.appendChild(svg);\n            Snap._.$(svg, {xmlns: \"http://www.w3.org/2000/svg\"});\n            res = d.innerHTML;\n            f.removeChild(f.firstChild);\n            return res;\n        };\n        /*\\\n         * Paper.toDataURL\n         [ method ]\n         **\n         * Returns SVG code for the @Paper as Data URI string.\n         = (string) Data URI string\n        \\*/\n        proto.toDataURL = function () {\n            if (window && window.btoa) {\n                return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(this)));\n            }\n        };\n        /*\\\n         * Paper.clear\n         [ method ]\n         **\n         * Removes all child nodes of the paper, except <defs>.\n        \\*/\n        proto.clear = function () {\n            var node = this.node.firstChild,\n                next;\n            while (node) {\n                next = node.nextSibling;\n                if (node.tagName != \"defs\") {\n                    node.parentNode.removeChild(node);\n                } else {\n                    proto.clear.call({node: node});\n                }\n                node = next;\n            }\n        };\n    }());\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        clone = Snap._.clone,\n        has = \"hasOwnProperty\",\n        p2s = /,?([a-z]),?/gi,\n        toFloat = parseFloat,\n        math = Math,\n        PI = math.PI,\n        mmin = math.min,\n        mmax = math.max,\n        pow = math.pow,\n        abs = math.abs;\n    function paths(ps) {\n        var p = paths.ps = paths.ps || {};\n        if (p[ps]) {\n            p[ps].sleep = 100;\n        } else {\n            p[ps] = {\n                sleep: 100\n            };\n        }\n        setTimeout(function () {\n            for (var key in p) if (p[has](key) && key != ps) {\n                p[key].sleep--;\n                !p[key].sleep && delete p[key];\n            }\n        });\n        return p[ps];\n    }\n    function box(x, y, width, height) {\n        if (x == null) {\n            x = y = width = height = 0;\n        }\n        if (y == null) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        return {\n            x: x,\n            y: y,\n            width: width,\n            w: width,\n            height: height,\n            h: height,\n            x2: x + width,\n            y2: y + height,\n            cx: x + width / 2,\n            cy: y + height / 2,\n            r1: math.min(width, height) / 2,\n            r2: math.max(width, height) / 2,\n            r0: math.sqrt(width * width + height * height) / 2,\n            path: rectPath(x, y, width, height),\n            vb: [x, y, width, height].join(\" \")\n        };\n    }\n    function toString() {\n        return this.join(\",\").replace(p2s, \"$1\");\n    }\n    function pathClone(pathArray) {\n        var res = clone(pathArray);\n        res.toString = toString;\n        return res;\n    }\n    function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n        if (length == null) {\n            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n        } else {\n            return findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y,\n                getTotLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n        }\n    }\n    function getLengthFactory(istotal, subpath) {\n        function O(val) {\n            return +(+val).toFixed(3);\n        }\n        return Snap._.cacher(function (path, length, onlystart) {\n            if (path instanceof Element) {\n                path = path.attr(\"d\");\n            }\n            path = path2curve(path);\n            var x, y, p, l, sp = \"\", subpaths = {}, point,\n                len = 0;\n            for (var i = 0, ii = path.length; i < ii; i++) {\n                p = path[i];\n                if (p[0] == \"M\") {\n                    x = +p[1];\n                    y = +p[2];\n                } else {\n                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                    if (len + l > length) {\n                        if (subpath && !subpaths.start) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            sp += [\n                                \"C\" + O(point.start.x),\n                                O(point.start.y),\n                                O(point.m.x),\n                                O(point.m.y),\n                                O(point.x),\n                                O(point.y)\n                            ];\n                            if (onlystart) {return sp;}\n                            subpaths.start = sp;\n                            sp = [\n                                \"M\" + O(point.x),\n                                O(point.y) + \"C\" + O(point.n.x),\n                                O(point.n.y),\n                                O(point.end.x),\n                                O(point.end.y),\n                                O(p[5]),\n                                O(p[6])\n                            ].join();\n                            len += l;\n                            x = +p[5];\n                            y = +p[6];\n                            continue;\n                        }\n                        if (!istotal && !subpath) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            return point;\n                        }\n                    }\n                    len += l;\n                    x = +p[5];\n                    y = +p[6];\n                }\n                sp += p.shift() + p;\n            }\n            subpaths.end = sp;\n            point = istotal ? len : subpath ? subpaths : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n            return point;\n        }, null, Snap._.clone);\n    }\n    var getTotalLength = getLengthFactory(1),\n        getPointAtLength = getLengthFactory(),\n        getSubpathsAtLength = getLengthFactory(0, 1);\n    function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t,\n            t13 = pow(t1, 3),\n            t12 = pow(t1, 2),\n            t2 = t * t,\n            t3 = t2 * t,\n            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n            ax = t1 * p1x + t * c1x,\n            ay = t1 * p1y + t * c1y,\n            cx = t1 * c2x + t * p2x,\n            cy = t1 * c2y + t * p2y,\n            alpha = (90 - math.atan2(mx - nx, my - ny) * 180 / PI);\n        // (mx > nx || my < ny) && (alpha += 180);\n        return {\n            x: x,\n            y: y,\n            m: {x: mx, y: my},\n            n: {x: nx, y: ny},\n            start: {x: ax, y: ay},\n            end: {x: cx, y: cy},\n            alpha: alpha\n        };\n    }\n    function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n        if (!Snap.is(p1x, \"array\")) {\n            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n        }\n        var bbox = curveDim.apply(null, p1x);\n        return box(\n            bbox.min.x,\n            bbox.min.y,\n            bbox.max.x - bbox.min.x,\n            bbox.max.y - bbox.min.y\n        );\n    }\n    function isPointInsideBBox(bbox, x, y) {\n        return  x >= bbox.x &&\n                x <= bbox.x + bbox.width &&\n                y >= bbox.y &&\n                y <= bbox.y + bbox.height;\n    }\n    function isBBoxIntersect(bbox1, bbox2) {\n        bbox1 = box(bbox1);\n        bbox2 = box(bbox2);\n        return isPointInsideBBox(bbox2, bbox1.x, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2)\n            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x\n                || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y\n                || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n    }\n    function base3(t, p1, p2, p3, p4) {\n        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n        return t * t2 - 3 * p1 + 3 * p2;\n    }\n    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n        if (z == null) {\n            z = 1;\n        }\n        z = z > 1 ? 1 : z < 0 ? 0 : z;\n        var z2 = z / 2,\n            n = 12,\n            Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],\n            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n            sum = 0;\n        for (var i = 0; i < n; i++) {\n            var ct = z2 * Tvalues[i] + z2,\n                xbase = base3(ct, x1, x2, x3, x4),\n                ybase = base3(ct, y1, y2, y3, y4),\n                comb = xbase * xbase + ybase * ybase;\n            sum += Cvalues[i] * math.sqrt(comb);\n        }\n        return z2 * sum;\n    }\n    function getTotLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n            return;\n        }\n        var t = 1,\n            step = t / 2,\n            t2 = t - step,\n            l,\n            e = .01;\n        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        while (abs(l - ll) > e) {\n            step /= 2;\n            t2 += (l < ll ? 1 : -1) * step;\n            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        }\n        return t2;\n    }\n    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n        if (\n            mmax(x1, x2) < mmin(x3, x4) ||\n            mmin(x1, x2) > mmax(x3, x4) ||\n            mmax(y1, y2) < mmin(y3, y4) ||\n            mmin(y1, y2) > mmax(y3, y4)\n        ) {\n            return;\n        }\n        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n        if (!denominator) {\n            return;\n        }\n        var px = nx / denominator,\n            py = ny / denominator,\n            px2 = +px.toFixed(2),\n            py2 = +py.toFixed(2);\n        if (\n            px2 < +mmin(x1, x2).toFixed(2) ||\n            px2 > +mmax(x1, x2).toFixed(2) ||\n            px2 < +mmin(x3, x4).toFixed(2) ||\n            px2 > +mmax(x3, x4).toFixed(2) ||\n            py2 < +mmin(y1, y2).toFixed(2) ||\n            py2 > +mmax(y1, y2).toFixed(2) ||\n            py2 < +mmin(y3, y4).toFixed(2) ||\n            py2 > +mmax(y3, y4).toFixed(2)\n        ) {\n            return;\n        }\n        return {x: px, y: py};\n    }\n    function inter(bez1, bez2) {\n        return interHelper(bez1, bez2);\n    }\n    function interCount(bez1, bez2) {\n        return interHelper(bez1, bez2, 1);\n    }\n    function interHelper(bez1, bez2, justCount) {\n        var bbox1 = bezierBBox(bez1),\n            bbox2 = bezierBBox(bez2);\n        if (!isBBoxIntersect(bbox1, bbox2)) {\n            return justCount ? 0 : [];\n        }\n        var l1 = bezlen.apply(0, bez1),\n            l2 = bezlen.apply(0, bez2),\n            n1 = ~~(l1 / 8),\n            n2 = ~~(l2 / 8),\n            dots1 = [],\n            dots2 = [],\n            xy = {},\n            res = justCount ? 0 : [];\n        for (var i = 0; i < n1 + 1; i++) {\n            var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n            dots1.push({x: p.x, y: p.y, t: i / n1});\n        }\n        for (i = 0; i < n2 + 1; i++) {\n            p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n            dots2.push({x: p.x, y: p.y, t: i / n2});\n        }\n        for (i = 0; i < n1; i++) {\n            for (var j = 0; j < n2; j++) {\n                var di = dots1[i],\n                    di1 = dots1[i + 1],\n                    dj = dots2[j],\n                    dj1 = dots2[j + 1],\n                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n                if (is) {\n                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n                        continue;\n                    }\n                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n                    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n                        if (justCount) {\n                            res++;\n                        } else {\n                            res.push({\n                                x: is.x,\n                                y: is.y,\n                                t1: t1,\n                                t2: t2\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function pathIntersection(path1, path2) {\n        return interPathHelper(path1, path2);\n    }\n    function pathIntersectionNumber(path1, path2) {\n        return interPathHelper(path1, path2, 1);\n    }\n    function interPathHelper(path1, path2, justCount) {\n        path1 = path2curve(path1);\n        path2 = path2curve(path2);\n        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n            res = justCount ? 0 : [];\n        for (var i = 0, ii = path1.length; i < ii; i++) {\n            var pi = path1[i];\n            if (pi[0] == \"M\") {\n                x1 = x1m = pi[1];\n                y1 = y1m = pi[2];\n            } else {\n                if (pi[0] == \"C\") {\n                    bez1 = [x1, y1].concat(pi.slice(1));\n                    x1 = bez1[6];\n                    y1 = bez1[7];\n                } else {\n                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n                    x1 = x1m;\n                    y1 = y1m;\n                }\n                for (var j = 0, jj = path2.length; j < jj; j++) {\n                    var pj = path2[j];\n                    if (pj[0] == \"M\") {\n                        x2 = x2m = pj[1];\n                        y2 = y2m = pj[2];\n                    } else {\n                        if (pj[0] == \"C\") {\n                            bez2 = [x2, y2].concat(pj.slice(1));\n                            x2 = bez2[6];\n                            y2 = bez2[7];\n                        } else {\n                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n                            x2 = x2m;\n                            y2 = y2m;\n                        }\n                        var intr = interHelper(bez1, bez2, justCount);\n                        if (justCount) {\n                            res += intr;\n                        } else {\n                            for (var k = 0, kk = intr.length; k < kk; k++) {\n                                intr[k].segment1 = i;\n                                intr[k].segment2 = j;\n                                intr[k].bez1 = bez1;\n                                intr[k].bez2 = bez2;\n                            }\n                            res = res.concat(intr);\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function isPointInsidePath(path, x, y) {\n        var bbox = pathBBox(path);\n        return isPointInsideBBox(bbox, x, y) &&\n               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n    }\n    function pathBBox(path) {\n        var pth = paths(path);\n        if (pth.bbox) {\n            return clone(pth.bbox);\n        }\n        if (!path) {\n            return box();\n        }\n        path = path2curve(path);\n        var x = 0,\n            y = 0,\n            X = [],\n            Y = [],\n            p;\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            p = path[i];\n            if (p[0] == \"M\") {\n                x = p[1];\n                y = p[2];\n                X.push(x);\n                Y.push(y);\n            } else {\n                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                X = X.concat(dim.min.x, dim.max.x);\n                Y = Y.concat(dim.min.y, dim.max.y);\n                x = p[5];\n                y = p[6];\n            }\n        }\n        var xmin = mmin.apply(0, X),\n            ymin = mmin.apply(0, Y),\n            xmax = mmax.apply(0, X),\n            ymax = mmax.apply(0, Y),\n            bb = box(xmin, ymin, xmax - xmin, ymax - ymin);\n        pth.bbox = clone(bb);\n        return bb;\n    }\n    function rectPath(x, y, w, h, r) {\n        if (r) {\n            return [\n                [\"M\", +x + (+r), y],\n                [\"l\", w - r * 2, 0],\n                [\"a\", r, r, 0, 0, 1, r, r],\n                [\"l\", 0, h - r * 2],\n                [\"a\", r, r, 0, 0, 1, -r, r],\n                [\"l\", r * 2 - w, 0],\n                [\"a\", r, r, 0, 0, 1, -r, -r],\n                [\"l\", 0, r * 2 - h],\n                [\"a\", r, r, 0, 0, 1, r, -r],\n                [\"z\"]\n            ];\n        }\n        var res = [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n        res.toString = toString;\n        return res;\n    }\n    function ellipsePath(x, y, rx, ry, a) {\n        if (a == null && ry == null) {\n            ry = rx;\n        }\n        x = +x;\n        y = +y;\n        rx = +rx;\n        ry = +ry;\n        if (a != null) {\n            var rad = Math.PI / 180,\n                x1 = x + rx * Math.cos(-ry * rad),\n                x2 = x + rx * Math.cos(-a * rad),\n                y1 = y + rx * Math.sin(-ry * rad),\n                y2 = y + rx * Math.sin(-a * rad),\n                res = [[\"M\", x1, y1], [\"A\", rx, rx, 0, +(a - ry > 180), 0, x2, y2]];\n        } else {\n            res = [\n                [\"M\", x, y],\n                [\"m\", 0, -ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry],\n                [\"z\"]\n            ];\n        }\n        res.toString = toString;\n        return res;\n    }\n    var unit2px = Snap._unit2px,\n        getPath = {\n        path: function (el) {\n            return el.attr(\"path\");\n        },\n        circle: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx, attr.cy, attr.r);\n        },\n        ellipse: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx || 0, attr.cy || 0, attr.rx, attr.ry);\n        },\n        rect: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height, attr.rx, attr.ry);\n        },\n        image: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height);\n        },\n        line: function (el) {\n            return \"M\" + [el.attr(\"x1\") || 0, el.attr(\"y1\") || 0, el.attr(\"x2\"), el.attr(\"y2\")];\n        },\n        polyline: function (el) {\n            return \"M\" + el.attr(\"points\");\n        },\n        polygon: function (el) {\n            return \"M\" + el.attr(\"points\") + \"z\";\n        },\n        deflt: function (el) {\n            var bbox = el.node.getBBox();\n            return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n        }\n    };\n    function pathToRelative(pathArray) {\n        var pth = paths(pathArray),\n            lowerCase = String.prototype.toLowerCase;\n        if (pth.rel) {\n            return pathClone(pth.rel);\n        }\n        if (!Snap.is(pathArray, \"array\") || !Snap.is(pathArray && pathArray[0], \"array\")) {\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0;\n        if (pathArray[0][0] == \"M\") {\n            x = pathArray[0][1];\n            y = pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res.push([\"M\", x, y]);\n        }\n        for (var i = start, ii = pathArray.length; i < ii; i++) {\n            var r = res[i] = [],\n                pa = pathArray[i];\n            if (pa[0] != lowerCase.call(pa[0])) {\n                r[0] = lowerCase.call(pa[0]);\n                switch (r[0]) {\n                    case \"a\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +(pa[6] - x).toFixed(3);\n                        r[7] = +(pa[7] - y).toFixed(3);\n                        break;\n                    case \"v\":\n                        r[1] = +(pa[1] - y).toFixed(3);\n                        break;\n                    case \"m\":\n                        mx = pa[1];\n                        my = pa[2];\n                    default:\n                        for (var j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +(pa[j] - ((j % 2) ? x : y)).toFixed(3);\n                        }\n                }\n            } else {\n                r = res[i] = [];\n                if (pa[0] == \"m\") {\n                    mx = pa[1] + x;\n                    my = pa[2] + y;\n                }\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    res[i][k] = pa[k];\n                }\n            }\n            var len = res[i].length;\n            switch (res[i][0]) {\n                case \"z\":\n                    x = mx;\n                    y = my;\n                    break;\n                case \"h\":\n                    x += +res[i][len - 1];\n                    break;\n                case \"v\":\n                    y += +res[i][len - 1];\n                    break;\n                default:\n                    x += +res[i][len - 2];\n                    y += +res[i][len - 1];\n            }\n        }\n        res.toString = toString;\n        pth.rel = pathClone(res);\n        return res;\n    }\n    function pathToAbsolute(pathArray) {\n        var pth = paths(pathArray);\n        if (pth.abs) {\n            return pathClone(pth.abs);\n        }\n        if (!is(pathArray, \"array\") || !is(pathArray && pathArray[0], \"array\")) { // rough assumption\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        if (!pathArray || !pathArray.length) {\n            return [[\"M\", 0, 0]];\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0,\n            pa0;\n        if (pathArray[0][0] == \"M\") {\n            x = +pathArray[0][1];\n            y = +pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res[0] = [\"M\", x, y];\n        }\n        var crz = pathArray.length == 3 &&\n            pathArray[0][0] == \"M\" &&\n            pathArray[1][0].toUpperCase() == \"R\" &&\n            pathArray[2][0].toUpperCase() == \"Z\";\n        for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n            res.push(r = []);\n            pa = pathArray[i];\n            pa0 = pa[0];\n            if (pa0 != pa0.toUpperCase()) {\n                r[0] = pa0.toUpperCase();\n                switch (r[0]) {\n                    case \"A\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +pa[6] + x;\n                        r[7] = +pa[7] + y;\n                        break;\n                    case \"V\":\n                        r[1] = +pa[1] + y;\n                        break;\n                    case \"H\":\n                        r[1] = +pa[1] + x;\n                        break;\n                    case \"R\":\n                        var dots = [x, y].concat(pa.slice(1));\n                        for (var j = 2, jj = dots.length; j < jj; j++) {\n                            dots[j] = +dots[j] + x;\n                            dots[++j] = +dots[j] + y;\n                        }\n                        res.pop();\n                        res = res.concat(catmullRom2bezier(dots, crz));\n                        break;\n                    case \"O\":\n                        res.pop();\n                        dots = ellipsePath(x, y, pa[1], pa[2]);\n                        dots.push(dots[0]);\n                        res = res.concat(dots);\n                        break;\n                    case \"U\":\n                        res.pop();\n                        res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                        r = [\"U\"].concat(res[res.length - 1].slice(-2));\n                        break;\n                    case \"M\":\n                        mx = +pa[1] + x;\n                        my = +pa[2] + y;\n                    default:\n                        for (j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +pa[j] + ((j % 2) ? x : y);\n                        }\n                }\n            } else if (pa0 == \"R\") {\n                dots = [x, y].concat(pa.slice(1));\n                res.pop();\n                res = res.concat(catmullRom2bezier(dots, crz));\n                r = [\"R\"].concat(pa.slice(-2));\n            } else if (pa0 == \"O\") {\n                res.pop();\n                dots = ellipsePath(x, y, pa[1], pa[2]);\n                dots.push(dots[0]);\n                res = res.concat(dots);\n            } else if (pa0 == \"U\") {\n                res.pop();\n                res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                r = [\"U\"].concat(res[res.length - 1].slice(-2));\n            } else {\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    r[k] = pa[k];\n                }\n            }\n            pa0 = pa0.toUpperCase();\n            if (pa0 != \"O\") {\n                switch (r[0]) {\n                    case \"Z\":\n                        x = +mx;\n                        y = +my;\n                        break;\n                    case \"H\":\n                        x = r[1];\n                        break;\n                    case \"V\":\n                        y = r[1];\n                        break;\n                    case \"M\":\n                        mx = r[r.length - 2];\n                        my = r[r.length - 1];\n                    default:\n                        x = r[r.length - 2];\n                        y = r[r.length - 1];\n                }\n            }\n        }\n        res.toString = toString;\n        pth.abs = pathClone(res);\n        return res;\n    }\n    function l2c(x1, y1, x2, y2) {\n        return [x1, y1, x2, y2, x2, y2];\n    }\n    function q2c(x1, y1, ax, ay, x2, y2) {\n        var _13 = 1 / 3,\n            _23 = 2 / 3;\n        return [\n                _13 * x1 + _23 * ax,\n                _13 * y1 + _23 * ay,\n                _13 * x2 + _23 * ax,\n                _13 * y2 + _23 * ay,\n                x2,\n                y2\n            ];\n    }\n    function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n        // for more information of where this math came from visit:\n        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n        var _120 = PI * 120 / 180,\n            rad = PI / 180 * (+angle || 0),\n            res = [],\n            xy,\n            rotate = Snap._.cacher(function (x, y, rad) {\n                var X = x * math.cos(rad) - y * math.sin(rad),\n                    Y = x * math.sin(rad) + y * math.cos(rad);\n                return {x: X, y: Y};\n            });\n        if (!recursive) {\n            xy = rotate(x1, y1, -rad);\n            x1 = xy.x;\n            y1 = xy.y;\n            xy = rotate(x2, y2, -rad);\n            x2 = xy.x;\n            y2 = xy.y;\n            var cos = math.cos(PI / 180 * angle),\n                sin = math.sin(PI / 180 * angle),\n                x = (x1 - x2) / 2,\n                y = (y1 - y2) / 2;\n            var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n            if (h > 1) {\n                h = math.sqrt(h);\n                rx = h * rx;\n                ry = h * ry;\n            }\n            var rx2 = rx * rx,\n                ry2 = ry * ry,\n                k = (large_arc_flag == sweep_flag ? -1 : 1) *\n                    math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n                cx = k * rx * y / ry + (x1 + x2) / 2,\n                cy = k * -ry * x / rx + (y1 + y2) / 2,\n                f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n                f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n            f1 = x1 < cx ? PI - f1 : f1;\n            f2 = x2 < cx ? PI - f2 : f2;\n            f1 < 0 && (f1 = PI * 2 + f1);\n            f2 < 0 && (f2 = PI * 2 + f2);\n            if (sweep_flag && f1 > f2) {\n                f1 = f1 - PI * 2;\n            }\n            if (!sweep_flag && f2 > f1) {\n                f2 = f2 - PI * 2;\n            }\n        } else {\n            f1 = recursive[0];\n            f2 = recursive[1];\n            cx = recursive[2];\n            cy = recursive[3];\n        }\n        var df = f2 - f1;\n        if (abs(df) > _120) {\n            var f2old = f2,\n                x2old = x2,\n                y2old = y2;\n            f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n            x2 = cx + rx * math.cos(f2);\n            y2 = cy + ry * math.sin(f2);\n            res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n        }\n        df = f2 - f1;\n        var c1 = math.cos(f1),\n            s1 = math.sin(f1),\n            c2 = math.cos(f2),\n            s2 = math.sin(f2),\n            t = math.tan(df / 4),\n            hx = 4 / 3 * rx * t,\n            hy = 4 / 3 * ry * t,\n            m1 = [x1, y1],\n            m2 = [x1 + hx * s1, y1 - hy * c1],\n            m3 = [x2 + hx * s2, y2 - hy * c2],\n            m4 = [x2, y2];\n        m2[0] = 2 * m1[0] - m2[0];\n        m2[1] = 2 * m1[1] - m2[1];\n        if (recursive) {\n            return [m2, m3, m4].concat(res);\n        } else {\n            res = [m2, m3, m4].concat(res).join().split(\",\");\n            var newres = [];\n            for (var i = 0, ii = res.length; i < ii; i++) {\n                newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n            }\n            return newres;\n        }\n    }\n    function findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t;\n        return {\n            x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n            y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n        };\n    }\n\n    // Returns bounding box of cubic bezier curve.\n    // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n    // Original version: NISHIO Hirokazu\n    // Modifications: https://github.com/timo22345\n    function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {\n        var tvalues = [],\n            bounds = [[], []],\n            a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n        for (var i = 0; i < 2; ++i) {\n            if (i == 0) {\n                b = 6 * x0 - 12 * x1 + 6 * x2;\n                a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n                c = 3 * x1 - 3 * x0;\n            } else {\n                b = 6 * y0 - 12 * y1 + 6 * y2;\n                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n                c = 3 * y1 - 3 * y0;\n            }\n            if (abs(a) < 1e-12) {\n                if (abs(b) < 1e-12) {\n                    continue;\n                }\n                t = -c / b;\n                if (0 < t && t < 1) {\n                    tvalues.push(t);\n                }\n                continue;\n            }\n            b2ac = b * b - 4 * c * a;\n            sqrtb2ac = math.sqrt(b2ac);\n            if (b2ac < 0) {\n                continue;\n            }\n            t1 = (-b + sqrtb2ac) / (2 * a);\n            if (0 < t1 && t1 < 1) {\n                tvalues.push(t1);\n            }\n            t2 = (-b - sqrtb2ac) / (2 * a);\n            if (0 < t2 && t2 < 1) {\n                tvalues.push(t2);\n            }\n        }\n\n        var x, y, j = tvalues.length,\n            jlen = j,\n            mt;\n        while (j--) {\n            t = tvalues[j];\n            mt = 1 - t;\n            bounds[0][j] = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);\n            bounds[1][j] = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);\n        }\n\n        bounds[0][jlen] = x0;\n        bounds[1][jlen] = y0;\n        bounds[0][jlen + 1] = x3;\n        bounds[1][jlen + 1] = y3;\n        bounds[0].length = bounds[1].length = jlen + 2;\n\n\n        return {\n          min: {x: mmin.apply(0, bounds[0]), y: mmin.apply(0, bounds[1])},\n          max: {x: mmax.apply(0, bounds[0]), y: mmax.apply(0, bounds[1])}\n        };\n    }\n\n    function path2curve(path, path2) {\n        var pth = !path2 && paths(path);\n        if (!path2 && pth.curve) {\n            return pathClone(pth.curve);\n        }\n        var p = pathToAbsolute(path),\n            p2 = path2 && pathToAbsolute(path2),\n            attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            processPath = function (path, d, pcom) {\n                var nx, ny;\n                if (!path) {\n                    return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n                }\n                !(path[0] in {T: 1, Q: 1}) && (d.qx = d.qy = null);\n                switch (path[0]) {\n                    case \"M\":\n                        d.X = path[1];\n                        d.Y = path[2];\n                        break;\n                    case \"A\":\n                        path = [\"C\"].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n                        break;\n                    case \"S\":\n                        if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n                            nx = d.x * 2 - d.bx;          // And reflect the previous\n                            ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n                        }\n                        else {                            // or some else or nothing\n                            nx = d.x;\n                            ny = d.y;\n                        }\n                        path = [\"C\", nx, ny].concat(path.slice(1));\n                        break;\n                    case \"T\":\n                        if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n                            d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n                            d.qy = d.y * 2 - d.qy;        // to case \"S\".\n                        }\n                        else {                            // or something else or nothing\n                            d.qx = d.x;\n                            d.qy = d.y;\n                        }\n                        path = [\"C\"].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n                        break;\n                    case \"Q\":\n                        d.qx = path[1];\n                        d.qy = path[2];\n                        path = [\"C\"].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n                        break;\n                    case \"L\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], path[2]));\n                        break;\n                    case \"H\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], d.y));\n                        break;\n                    case \"V\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.x, path[1]));\n                        break;\n                    case \"Z\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.X, d.Y));\n                        break;\n                }\n                return path;\n            },\n            fixArc = function (pp, i) {\n                if (pp[i].length > 7) {\n                    pp[i].shift();\n                    var pi = pp[i];\n                    while (pi.length) {\n                        pcoms1[i] = \"A\"; // if created multiple C:s, their original seg is saved\n                        p2 && (pcoms2[i] = \"A\"); // the same as above\n                        pp.splice(i++, 0, [\"C\"].concat(pi.splice(0, 6)));\n                    }\n                    pp.splice(i, 1);\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            fixM = function (path1, path2, a1, a2, i) {\n                if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n                    path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n                    a1.bx = 0;\n                    a1.by = 0;\n                    a1.x = path1[i][1];\n                    a1.y = path1[i][2];\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            pcoms1 = [], // path commands of original path p\n            pcoms2 = [], // path commands of original path p2\n            pfirst = \"\", // temporary holder for original path command\n            pcom = \"\"; // holder for previous path command of original path\n        for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n            p[i] && (pfirst = p[i][0]); // save current path command\n\n            if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n            {\n                pcoms1[i] = pfirst; // Save current path command\n                i && ( pcom = pcoms1[i - 1]); // Get previous path command pcom\n            }\n            p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n            if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n            // which may produce multiple C:s\n            // so we have to make sure that C is also C in original path\n\n            fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n            if (p2) { // the same procedures is done to p2\n                p2[i] && (pfirst = p2[i][0]);\n                if (pfirst != \"C\") {\n                    pcoms2[i] = pfirst;\n                    i && (pcom = pcoms2[i - 1]);\n                }\n                p2[i] = processPath(p2[i], attrs2, pcom);\n\n                if (pcoms2[i] != \"A\" && pfirst == \"C\") {\n                    pcoms2[i] = \"C\";\n                }\n\n                fixArc(p2, i);\n            }\n            fixM(p, p2, attrs, attrs2, i);\n            fixM(p2, p, attrs2, attrs, i);\n            var seg = p[i],\n                seg2 = p2 && p2[i],\n                seglen = seg.length,\n                seg2len = p2 && seg2.length;\n            attrs.x = seg[seglen - 2];\n            attrs.y = seg[seglen - 1];\n            attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n            attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n            attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n            attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n            attrs2.x = p2 && seg2[seg2len - 2];\n            attrs2.y = p2 && seg2[seg2len - 1];\n        }\n        if (!p2) {\n            pth.curve = pathClone(p);\n        }\n        return p2 ? [p, p2] : p;\n    }\n    function mapPath(path, matrix) {\n        if (!matrix) {\n            return path;\n        }\n        var x, y, i, j, ii, jj, pathi;\n        path = path2curve(path);\n        for (i = 0, ii = path.length; i < ii; i++) {\n            pathi = path[i];\n            for (j = 1, jj = pathi.length; j < jj; j += 2) {\n                x = matrix.x(pathi[j], pathi[j + 1]);\n                y = matrix.y(pathi[j], pathi[j + 1]);\n                pathi[j] = x;\n                pathi[j + 1] = y;\n            }\n        }\n        return path;\n    }\n\n    // http://schepers.cc/getting-to-the-point\n    function catmullRom2bezier(crp, z) {\n        var d = [];\n        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n            var p = [\n                        {x: +crp[i - 2], y: +crp[i - 1]},\n                        {x: +crp[i],     y: +crp[i + 1]},\n                        {x: +crp[i + 2], y: +crp[i + 3]},\n                        {x: +crp[i + 4], y: +crp[i + 5]}\n                    ];\n            if (z) {\n                if (!i) {\n                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n                } else if (iLen - 4 == i) {\n                    p[3] = {x: +crp[0], y: +crp[1]};\n                } else if (iLen - 2 == i) {\n                    p[2] = {x: +crp[0], y: +crp[1]};\n                    p[3] = {x: +crp[2], y: +crp[3]};\n                }\n            } else {\n                if (iLen - 4 == i) {\n                    p[3] = p[2];\n                } else if (!i) {\n                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n                }\n            }\n            d.push([\"C\",\n                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n                  p[2].x,\n                  p[2].y\n            ]);\n        }\n\n        return d;\n    }\n\n    // export\n    Snap.path = paths;\n\n    /*\\\n     * Snap.path.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the given path in pixels\n     **\n     - path (string) SVG path string\n     **\n     = (number) length\n    \\*/\n    Snap.path.getTotalLength = getTotalLength;\n    /*\\\n     * Snap.path.getPointAtLength\n     [ method ]\n     **\n     * Returns the coordinates of the point located at the given length along the given path\n     **\n     - path (string) SVG path string\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    Snap.path.getPointAtLength = getPointAtLength;\n    /*\\\n     * Snap.path.getSubpath\n     [ method ]\n     **\n     * Returns the subpath of a given path between given start and end lengths\n     **\n     - path (string) SVG path string\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    Snap.path.getSubpath = function (path, from, to) {\n        if (this.getTotalLength(path) - to < 1e-6) {\n            return getSubpathsAtLength(path, from).end;\n        }\n        var a = getSubpathsAtLength(path, to, 1);\n        return from ? getSubpathsAtLength(a, from).end : a;\n    };\n    /*\\\n     * Element.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the path in pixels (only works for `path` elements)\n     = (number) length\n    \\*/\n    elproto.getTotalLength = function () {\n        if (this.node.getTotalLength) {\n            return this.node.getTotalLength();\n        }\n    };\n    // SIERRA Element.getPointAtLength()/Element.getTotalLength(): If a <path> is broken into different segments, is the jump distance to the new coordinates set by the _M_ or _m_ commands calculated as part of the path's total length?\n    /*\\\n     * Element.getPointAtLength\n     [ method ]\n     **\n     * Returns coordinates of the point located at the given length on the given path (only works for `path` elements)\n     **\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    elproto.getPointAtLength = function (length) {\n        return getPointAtLength(this.attr(\"d\"), length);\n    };\n    // SIERRA Element.getSubpath(): Similar to the problem for Element.getPointAtLength(). Unclear how this would work for a segmented path. Overall, the concept of _subpath_ and what I'm calling a _segment_ (series of non-_M_ or _Z_ commands) is unclear.\n    /*\\\n     * Element.getSubpath\n     [ method ]\n     **\n     * Returns subpath of a given element from given start and end lengths (only works for `path` elements)\n     **\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    elproto.getSubpath = function (from, to) {\n        return Snap.path.getSubpath(this.attr(\"d\"), from, to);\n    };\n    Snap._.box = box;\n    /*\\\n     * Snap.path.findDotsAtSegment\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds dot coordinates on the given cubic beziér curve at the given t\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     - t (number) position on the curve (0..1)\n     = (object) point information in format:\n     o {\n     o     x: (number) x coordinate of the point,\n     o     y: (number) y coordinate of the point,\n     o     m: {\n     o         x: (number) x coordinate of the left anchor,\n     o         y: (number) y coordinate of the left anchor\n     o     },\n     o     n: {\n     o         x: (number) x coordinate of the right anchor,\n     o         y: (number) y coordinate of the right anchor\n     o     },\n     o     start: {\n     o         x: (number) x coordinate of the start of the curve,\n     o         y: (number) y coordinate of the start of the curve\n     o     },\n     o     end: {\n     o         x: (number) x coordinate of the end of the curve,\n     o         y: (number) y coordinate of the end of the curve\n     o     },\n     o     alpha: (number) angle of the curve derivative at the point\n     o }\n    \\*/\n    Snap.path.findDotsAtSegment = findDotsAtSegment;\n    /*\\\n     * Snap.path.bezierBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given cubic beziér curve\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     * or\n     - bez (array) array of six points for beziér curve\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.bezierBBox = bezierBBox;\n    /*\\\n     * Snap.path.isPointInsideBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside bounding box\n     - bbox (string) bounding box\n     - x (string) x coordinate of the point\n     - y (string) y coordinate of the point\n     = (boolean) `true` if point is inside\n    \\*/\n    Snap.path.isPointInsideBBox = isPointInsideBBox;\n    Snap.closest = function (x, y, X, Y) {\n        var r = 100,\n            b = box(x - r / 2, y - r / 2, r, r),\n            inside = [],\n            getter = X[0].hasOwnProperty(\"x\") ? function (i) {\n                return {\n                    x: X[i].x,\n                    y: X[i].y\n                };\n            } : function (i) {\n                return {\n                    x: X[i],\n                    y: Y[i]\n                };\n            },\n            found = 0;\n        while (r <= 1e6 && !found) {\n            for (var i = 0, ii = X.length; i < ii; i++) {\n                var xy = getter(i);\n                if (isPointInsideBBox(b, xy.x, xy.y)) {\n                    found++;\n                    inside.push(xy);\n                    break;\n                }\n            }\n            if (!found) {\n                r *= 2;\n                b = box(x - r / 2, y - r / 2, r, r)\n            }\n        }\n        if (r == 1e6) {\n            return;\n        }\n        var len = Infinity,\n            res;\n        for (i = 0, ii = inside.length; i < ii; i++) {\n            var l = Snap.len(x, y, inside[i].x, inside[i].y);\n            if (len > l) {\n                len = l;\n                inside[i].len = l;\n                res = inside[i];\n            }\n        }\n        return res;\n    };\n    /*\\\n     * Snap.path.isBBoxIntersect\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if two bounding boxes intersect\n     - bbox1 (string) first bounding box\n     - bbox2 (string) second bounding box\n     = (boolean) `true` if bounding boxes intersect\n    \\*/\n    Snap.path.isBBoxIntersect = isBBoxIntersect;\n    /*\\\n     * Snap.path.intersection\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds intersections of two paths\n     - path1 (string) path string\n     - path2 (string) path string\n     = (array) dots of intersection\n     o [\n     o     {\n     o         x: (number) x coordinate of the point,\n     o         y: (number) y coordinate of the point,\n     o         t1: (number) t value for segment of path1,\n     o         t2: (number) t value for segment of path2,\n     o         segment1: (number) order number for segment of path1,\n     o         segment2: (number) order number for segment of path2,\n     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1,\n     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n     o     }\n     o ]\n    \\*/\n    Snap.path.intersection = pathIntersection;\n    Snap.path.intersectionNumber = pathIntersectionNumber;\n    /*\\\n     * Snap.path.isPointInside\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside a given closed path.\n     *\n     * Note: fill mode doesn’t affect the result of this method.\n     - path (string) path string\n     - x (number) x of the point\n     - y (number) y of the point\n     = (boolean) `true` if point is inside the path\n    \\*/\n    Snap.path.isPointInside = isPointInsidePath;\n    /*\\\n     * Snap.path.getBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given path\n     - path (string) path string\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.getBBox = pathBBox;\n    Snap.path.get = getPath;\n    /*\\\n     * Snap.path.toRelative\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into relative values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toRelative = pathToRelative;\n    /*\\\n     * Snap.path.toAbsolute\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into absolute values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toAbsolute = pathToAbsolute;\n    /*\\\n     * Snap.path.toCubic\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path to a new path where all segments are cubic beziér curves\n     - pathString (string|array) path string or array of segments\n     = (array) array of segments\n    \\*/\n    Snap.path.toCubic = path2curve;\n    /*\\\n     * Snap.path.map\n     [ method ]\n     **\n     * Transform the path string with the given matrix\n     - path (string) path string\n     - matrix (object) see @Matrix\n     = (string) transformed path string\n    \\*/\n    Snap.path.map = mapPath;\n    Snap.path.toString = toString;\n    Snap.path.clone = pathClone;\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var mmax = Math.max,\n        mmin = Math.min;\n\n    // Set\n    var Set = function (items) {\n        this.items = [];\n\tthis.bindings = {};\n        this.length = 0;\n        this.type = \"set\";\n        if (items) {\n            for (var i = 0, ii = items.length; i < ii; i++) {\n                if (items[i]) {\n                    this[this.items.length] = this.items[this.items.length] = items[i];\n                    this.length++;\n                }\n            }\n        }\n    },\n    setproto = Set.prototype;\n    /*\\\n     * Set.push\n     [ method ]\n     **\n     * Adds each argument to the current set\n     = (object) original element\n    \\*/\n    setproto.push = function () {\n        var item,\n            len;\n        for (var i = 0, ii = arguments.length; i < ii; i++) {\n            item = arguments[i];\n            if (item) {\n                len = this.items.length;\n                this[len] = this.items[len] = item;\n                this.length++;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.pop\n     [ method ]\n     **\n     * Removes last element and returns it\n     = (object) element\n    \\*/\n    setproto.pop = function () {\n        this.length && delete this[this.length--];\n        return this.items.pop();\n    };\n    /*\\\n     * Set.forEach\n     [ method ]\n     **\n     * Executes given function for each element in the set\n     *\n     * If the function returns `false`, the loop stops running.\n     **\n     - callback (function) function to run\n     - thisArg (object) context object for the callback\n     = (object) Set object\n    \\*/\n    setproto.forEach = function (callback, thisArg) {\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            if (callback.call(thisArg, this.items[i], i) === false) {\n                return this;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.animate\n     [ method ]\n     **\n     * Animates each element in set in sync.\n     *\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     * or\n     - animation (array) array of animation parameter for each element in set in format `[attrs, duration, easing, callback]`\n     > Usage\n     | // animate all elements in set to radius 10\n     | set.animate({r: 10}, 500, mina.easein);\n     | // or\n     | // animate first element to radius 10, but second to radius 20 and in different time\n     | set.animate([{r: 10}, 500, mina.easein], [{r: 20}, 1500, mina.easein]);\n     = (Element) the current element\n    \\*/\n    setproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Snap._.Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = easing.dur;\n            attrs = attrs.attr;\n        }\n        var args = arguments;\n        if (Snap.is(attrs, \"array\") && Snap.is(args[args.length - 1], \"array\")) {\n            var each = true;\n        }\n        var begin,\n            handler = function () {\n                if (begin) {\n                    this.b = begin;\n                } else {\n                    begin = this.b;\n                }\n            },\n            cb = 0,\n            set = this,\n            callbacker = callback && function () {\n                if (++cb == set.length) {\n                    callback.call(this);\n                }\n            };\n        return this.forEach(function (el, i) {\n            eve.once(\"snap.animcreated.\" + el.id, handler);\n            if (each) {\n                args[i] && el.animate.apply(el, args[i]);\n            } else {\n                el.animate(attrs, ms, easing, callbacker);\n            }\n        });\n    };\n    setproto.remove = function () {\n        while (this.length) {\n            this.pop().remove();\n        }\n        return this;\n    };\n    /*\\\n     * Set.bind\n     [ method ]\n     **\n     * Specifies how to handle a specific attribute when applied\n     * to a set.\n     *\n     **\n     - attr (string) attribute name\n     - callback (function) function to run\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     - eattr (string) attribute on the element to bind the attribute to\n     = (object) Set object\n    \\*/\n    setproto.bind = function (attr, a, b) {\n        var data = {};\n        if (typeof a == \"function\") {\n            this.bindings[attr] = a;\n        } else {\n            var aname = b || attr;\n            this.bindings[attr] = function (v) {\n                data[aname] = v;\n                a.attr(data);\n            };\n        }\n        return this;\n    };\n    setproto.attr = function (value) {\n        var unbound = {};\n        for (var k in value) {\n            if (this.bindings[k]) {\n                this.bindings[k](value[k]);\n            } else {\n                unbound[k] = value[k];\n            }\n        }\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            this.items[i].attr(unbound);\n        }\n        return this;\n    };\n    /*\\\n     * Set.clear\n     [ method ]\n     **\n     * Removes all elements from the set\n    \\*/\n    setproto.clear = function () {\n        while (this.length) {\n            this.pop();\n        }\n    };\n    /*\\\n     * Set.splice\n     [ method ]\n     **\n     * Removes range of elements from the set\n     **\n     - index (number) position of the deletion\n     - count (number) number of element to remove\n     - insertion… (object) #optional elements to insert\n     = (object) set elements that were deleted\n    \\*/\n    setproto.splice = function (index, count, insertion) {\n        index = index < 0 ? mmax(this.length + index, 0) : index;\n        count = mmax(0, mmin(this.length - index, count));\n        var tail = [],\n            todel = [],\n            args = [],\n            i;\n        for (i = 2; i < arguments.length; i++) {\n            args.push(arguments[i]);\n        }\n        for (i = 0; i < count; i++) {\n            todel.push(this[index + i]);\n        }\n        for (; i < this.length - index; i++) {\n            tail.push(this[index + i]);\n        }\n        var arglen = args.length;\n        for (i = 0; i < arglen + tail.length; i++) {\n            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n        }\n        i = this.items.length = this.length -= count - arglen;\n        while (this[i]) {\n            delete this[i++];\n        }\n        return new Set(todel);\n    };\n    /*\\\n     * Set.exclude\n     [ method ]\n     **\n     * Removes given element from the set\n     **\n     - element (object) element to remove\n     = (boolean) `true` if object was found and removed from the set\n    \\*/\n    setproto.exclude = function (el) {\n        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n            this.splice(i, 1);\n            return true;\n        }\n        return false;\n    };\n    setproto.insertAfter = function (el) {\n        var i = this.items.length;\n        while (i--) {\n            this.items[i].insertAfter(el);\n        }\n        return this;\n    };\n    setproto.getBBox = function () {\n        var x = [],\n            y = [],\n            x2 = [],\n            y2 = [];\n        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n            var box = this.items[i].getBBox();\n            x.push(box.x);\n            y.push(box.y);\n            x2.push(box.x + box.width);\n            y2.push(box.y + box.height);\n        }\n        x = mmin.apply(0, x);\n        y = mmin.apply(0, y);\n        x2 = mmax.apply(0, x2);\n        y2 = mmax.apply(0, y2);\n        return {\n            x: x,\n            y: y,\n            x2: x2,\n            y2: y2,\n            width: x2 - x,\n            height: y2 - y,\n            cx: x + (x2 - x) / 2,\n            cy: y + (y2 - y) / 2\n        };\n    };\n    setproto.clone = function (s) {\n        s = new Set;\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            s.push(this.items[i].clone());\n        }\n        return s;\n    };\n    setproto.toString = function () {\n        return \"Snap\\u2018s set\";\n    };\n    setproto.type = \"set\";\n    // export\n    Snap.Set = Set;\n    Snap.set = function () {\n        var set = new Set;\n        if (arguments.length) {\n            set.push.apply(set, Array.prototype.slice.call(arguments, 0));\n        }\n        return set;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var names = {},\n        reUnit = /[a-z]+$/i,\n        Str = String;\n    names.stroke = names.fill = \"colour\";\n    function getEmpty(item) {\n        var l = item[0];\n        switch (l.toLowerCase()) {\n            case \"t\": return [l, 0, 0];\n            case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n            case \"r\": if (item.length == 4) {\n                return [l, 0, item[2], item[3]];\n            } else {\n                return [l, 0];\n            }\n            case \"s\": if (item.length == 5) {\n                return [l, 1, 1, item[3], item[4]];\n            } else if (item.length == 3) {\n                return [l, 1, 1];\n            } else {\n                return [l, 1];\n            }\n        }\n    }\n    function equaliseTransform(t1, t2, getBBox) {\n        t2 = Str(t2).replace(/\\.{3}|\\u2026/g, t1);\n        t1 = Snap.parseTransformString(t1) || [];\n        t2 = Snap.parseTransformString(t2) || [];\n        var maxlength = Math.max(t1.length, t2.length),\n            from = [],\n            to = [],\n            i = 0, j, jj,\n            tt1, tt2;\n        for (; i < maxlength; i++) {\n            tt1 = t1[i] || getEmpty(t2[i]);\n            tt2 = t2[i] || getEmpty(tt1);\n            if ((tt1[0] != tt2[0]) ||\n                (tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3])) ||\n                (tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4]))\n                ) {\n                    t1 = Snap._.transform2matrix(t1, getBBox());\n                    t2 = Snap._.transform2matrix(t2, getBBox());\n                    from = [[\"m\", t1.a, t1.b, t1.c, t1.d, t1.e, t1.f]];\n                    to = [[\"m\", t2.a, t2.b, t2.c, t2.d, t2.e, t2.f]];\n                    break;\n            }\n            from[i] = [];\n            to[i] = [];\n            for (j = 0, jj = Math.max(tt1.length, tt2.length); j < jj; j++) {\n                j in tt1 && (from[i][j] = tt1[j]);\n                j in tt2 && (to[i][j] = tt2[j]);\n            }\n        }\n        return {\n            from: path2array(from),\n            to: path2array(to),\n            f: getPath(from)\n        };\n    }\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    function getViewBox(val) {\n        return val.join(\" \");\n    }\n    function getColour(clr) {\n        return Snap.rgb(clr[0], clr[1], clr[2]);\n    }\n    function getPath(path) {\n        var k = 0, i, ii, j, jj, out, a, b = [];\n        for (i = 0, ii = path.length; i < ii; i++) {\n            out = \"[\";\n            a = ['\"' + path[i][0] + '\"'];\n            for (j = 1, jj = path[i].length; j < jj; j++) {\n                a[j] = \"val[\" + (k++) + \"]\";\n            }\n            out += a + \"]\";\n            b[i] = out;\n        }\n        return Function(\"val\", \"return Snap.path.toString.call([\" + b + \"])\");\n    }\n    function path2array(path) {\n        var out = [];\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            for (var j = 1, jj = path[i].length; j < jj; j++) {\n                out.push(path[i][j]);\n            }\n        }\n        return out;\n    }\n    function isNumeric(obj) {\n        return isFinite(parseFloat(obj));\n    }\n    function arrayEqual(arr1, arr2) {\n        if (!Snap.is(arr1, \"array\") || !Snap.is(arr2, \"array\")) {\n            return false;\n        }\n        return arr1.toString() == arr2.toString();\n    }\n    Element.prototype.equal = function (name, b) {\n        return eve(\"snap.util.equal\", this, name, b).firstDefined();\n    };\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this;\n        if (isNumeric(a) && isNumeric(b)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getNumber\n            };\n        }\n        if (names[name] == \"colour\") {\n            A = Snap.color(a);\n            B = Snap.color(b);\n            return {\n                from: [A.r, A.g, A.b, A.opacity],\n                to: [B.r, B.g, B.b, B.opacity],\n                f: getColour\n            };\n        }\n        if (name == \"viewBox\") {\n            A = this.attr(name).vb.split(\" \").map(Number);\n            B = b.split(\" \").map(Number);\n            return {\n                from: A,\n                to: B,\n                f: getViewBox\n            };\n        }\n        if (name == \"transform\" || name == \"gradientTransform\" || name == \"patternTransform\") {\n            if (b instanceof Snap.Matrix) {\n                b = b.toTransformString();\n            }\n            if (!Snap._.rgTransform.test(b)) {\n                b = Snap._.svgTransform2string(b);\n            }\n            return equaliseTransform(a, b, function () {\n                return el.getBBox(1);\n            });\n        }\n        if (name == \"d\" || name == \"path\") {\n            A = Snap.path.toCubic(a, b);\n            return {\n                from: path2array(A[0]),\n                to: path2array(A[1]),\n                f: getPath(A[0])\n            };\n        }\n        if (name == \"points\") {\n            A = Str(a).split(Snap._.separator);\n            B = Str(b).split(Snap._.separator);\n            return {\n                from: A,\n                to: B,\n                f: function (val) { return val; }\n            };\n        }\n        var aUnit = a.match(reUnit),\n            bUnit = Str(b).match(reUnit);\n        if (aUnit && arrayEqual(aUnit, bUnit)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getUnit(aUnit)\n            };\n        } else {\n            return {\n                from: this.asPX(name),\n                to: this.asPX(name, b),\n                f: getNumber\n            };\n        }\n    });\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n    has = \"hasOwnProperty\",\n    supportsTouch = \"createTouch\" in glob.doc,\n    events = [\n        \"click\", \"dblclick\", \"mousedown\", \"mousemove\", \"mouseout\",\n        \"mouseover\", \"mouseup\", \"touchstart\", \"touchmove\", \"touchend\",\n        \"touchcancel\"\n    ],\n    touchMap = {\n        mousedown: \"touchstart\",\n        mousemove: \"touchmove\",\n        mouseup: \"touchend\"\n    },\n    getScroll = function (xy, el) {\n        var name = xy == \"y\" ? \"scrollTop\" : \"scrollLeft\",\n            doc = el && el.node ? el.node.ownerDocument : glob.doc;\n        return doc[name in doc.documentElement ? \"documentElement\" : \"body\"][name];\n    },\n    preventDefault = function () {\n        this.returnValue = false;\n    },\n    preventTouch = function () {\n        return this.originalEvent.preventDefault();\n    },\n    stopPropagation = function () {\n        this.cancelBubble = true;\n    },\n    stopTouch = function () {\n        return this.originalEvent.stopPropagation();\n    },\n    addEvent = function (obj, type, fn, element) {\n        var realName = supportsTouch && touchMap[type] ? touchMap[type] : type,\n            f = function (e) {\n                var scrollY = getScroll(\"y\", element),\n                    scrollX = getScroll(\"x\", element);\n                if (supportsTouch && touchMap[has](type)) {\n                    for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n                        if (e.targetTouches[i].target == obj || obj.contains(e.targetTouches[i].target)) {\n                            var olde = e;\n                            e = e.targetTouches[i];\n                            e.originalEvent = olde;\n                            e.preventDefault = preventTouch;\n                            e.stopPropagation = stopTouch;\n                            break;\n                        }\n                    }\n                }\n                var x = e.clientX + scrollX,\n                    y = e.clientY + scrollY;\n                return fn.call(element, e, x, y);\n            };\n\n        if (type !== realName) {\n            obj.addEventListener(type, f, false);\n        }\n\n        obj.addEventListener(realName, f, false);\n\n        return function () {\n            if (type !== realName) {\n                obj.removeEventListener(type, f, false);\n            }\n\n            obj.removeEventListener(realName, f, false);\n            return true;\n        };\n    },\n    drag = [],\n    dragMove = function (e) {\n        var x = e.clientX,\n            y = e.clientY,\n            scrollY = getScroll(\"y\"),\n            scrollX = getScroll(\"x\"),\n            dragi,\n            j = drag.length;\n        while (j--) {\n            dragi = drag[j];\n            if (supportsTouch) {\n                var i = e.touches && e.touches.length,\n                    touch;\n                while (i--) {\n                    touch = e.touches[i];\n                    if (touch.identifier == dragi.el._drag.id || dragi.el.node.contains(touch.target)) {\n                        x = touch.clientX;\n                        y = touch.clientY;\n                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n                        break;\n                    }\n                }\n            } else {\n                e.preventDefault();\n            }\n            var node = dragi.el.node,\n                o,\n                next = node.nextSibling,\n                parent = node.parentNode,\n                display = node.style.display;\n            // glob.win.opera && parent.removeChild(node);\n            // node.style.display = \"none\";\n            // o = dragi.el.paper.getElementByPoint(x, y);\n            // node.style.display = display;\n            // glob.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n            // o && eve(\"snap.drag.over.\" + dragi.el.id, dragi.el, o);\n            x += scrollX;\n            y += scrollY;\n            eve(\"snap.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n        }\n    },\n    dragUp = function (e) {\n        Snap.unmousemove(dragMove).unmouseup(dragUp);\n        var i = drag.length,\n            dragi;\n        while (i--) {\n            dragi = drag[i];\n            dragi.el._drag = {};\n            eve(\"snap.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n            eve.off(\"snap.drag.*.\" + dragi.el.id);\n        }\n        drag = [];\n    };\n    /*\\\n     * Element.click\n     [ method ]\n     **\n     * Adds a click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unclick\n     [ method ]\n     **\n     * Removes a click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.dblclick\n     [ method ]\n     **\n     * Adds a double click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.undblclick\n     [ method ]\n     **\n     * Removes a double click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.mousedown\n     [ method ]\n     **\n     * Adds a mousedown event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousedown\n     [ method ]\n     **\n     * Removes a mousedown event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.mousemove\n     [ method ]\n     **\n     * Adds a mousemove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousemove\n     [ method ]\n     **\n     * Removes a mousemove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.mouseout\n     [ method ]\n     **\n     * Adds a mouseout event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseout\n     [ method ]\n     **\n     * Removes a mouseout event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.mouseover\n     [ method ]\n     **\n     * Adds a mouseover event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseover\n     [ method ]\n     **\n     * Removes a mouseover event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.mouseup\n     [ method ]\n     **\n     * Adds a mouseup event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseup\n     [ method ]\n     **\n     * Removes a mouseup event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.touchstart\n     [ method ]\n     **\n     * Adds a touchstart event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchstart\n     [ method ]\n     **\n     * Removes a touchstart event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.touchmove\n     [ method ]\n     **\n     * Adds a touchmove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchmove\n     [ method ]\n     **\n     * Removes a touchmove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.touchend\n     [ method ]\n     **\n     * Adds a touchend event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchend\n     [ method ]\n     **\n     * Removes a touchend event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n\n    /*\\\n     * Element.touchcancel\n     [ method ]\n     **\n     * Adds a touchcancel event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchcancel\n     [ method ]\n     **\n     * Removes a touchcancel event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    for (var i = events.length; i--;) {\n        (function (eventName) {\n            Snap[eventName] = elproto[eventName] = function (fn, scope) {\n                if (Snap.is(fn, \"function\")) {\n                    this.events = this.events || [];\n                    this.events.push({\n                        name: eventName,\n                        f: fn,\n                        unbind: addEvent(this.node || document, eventName, fn, scope || this)\n                    });\n                } else {\n                    for (var i = 0, ii = this.events.length; i < ii; i++) if (this.events[i].name == eventName) {\n                        try {\n                            this.events[i].f.call(this);\n                        } catch (e) {}\n                    }\n                }\n                return this;\n            };\n            Snap[\"un\" + eventName] =\n            elproto[\"un\" + eventName] = function (fn) {\n                var events = this.events || [],\n                    l = events.length;\n                while (l--) if (events[l].name == eventName &&\n                               (events[l].f == fn || !fn)) {\n                    events[l].unbind();\n                    events.splice(l, 1);\n                    !events.length && delete this.events;\n                    return this;\n                }\n                return this;\n            };\n        })(events[i]);\n    }\n    /*\\\n     * Element.hover\n     [ method ]\n     **\n     * Adds hover event handlers to the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     - icontext (object) #optional context for hover in handler\n     - ocontext (object) #optional context for hover out handler\n     = (object) @Element\n    \\*/\n    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n    };\n    /*\\\n     * Element.unhover\n     [ method ]\n     **\n     * Removes hover event handlers from the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     = (object) @Element\n    \\*/\n    elproto.unhover = function (f_in, f_out) {\n        return this.unmouseover(f_in).unmouseout(f_out);\n    };\n    var draggable = [];\n    // SIERRA unclear what _context_ refers to for starting, ending, moving the drag gesture.\n    // SIERRA Element.drag(): _x position of the mouse_: Where are the x/y values offset from?\n    // SIERRA Element.drag(): much of this member's doc appears to be duplicated for some reason.\n    // SIERRA Unclear about this sentence: _Additionally following drag events will be triggered: drag.start.<id> on start, drag.end.<id> on end and drag.move.<id> on every move._ Is there a global _drag_ object to which you can assign handlers keyed by an element's ID?\n    /*\\\n     * Element.drag\n     [ method ]\n     **\n     * Adds event handlers for an element's drag gesture\n     **\n     - onmove (function) handler for moving\n     - onstart (function) handler for drag start\n     - onend (function) handler for drag end\n     - mcontext (object) #optional context for moving handler\n     - scontext (object) #optional context for drag start handler\n     - econtext (object) #optional context for drag end handler\n     * Additionaly following `drag` events are triggered: `drag.start.<id>` on start,\n     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element is dragged over another element\n     * `drag.over.<id>` fires as well.\n     *\n     * Start event and start handler are called in specified context or in context of the element with following parameters:\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * Move event and move handler are called in specified context or in context of the element with following parameters:\n     o dx (number) shift by x from the start point\n     o dy (number) shift by y from the start point\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * End event and end handler are called in specified context or in context of the element with following parameters:\n     o event (object) DOM event object\n     = (object) @Element\n    \\*/\n    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n        var el = this;\n        if (!arguments.length) {\n            var origTransform;\n            return el.drag(function (dx, dy) {\n                this.attr({\n                    transform: origTransform + (origTransform ? \"T\" : \"t\") + [dx, dy]\n                });\n            }, function () {\n                origTransform = this.transform().local;\n            });\n        }\n        function start(e, x, y) {\n            (e.originalEvent || e).preventDefault();\n            el._drag.x = x;\n            el._drag.y = y;\n            el._drag.id = e.identifier;\n            !drag.length && Snap.mousemove(dragMove).mouseup(dragUp);\n            drag.push({el: el, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n            onstart && eve.on(\"snap.drag.start.\" + el.id, onstart);\n            onmove && eve.on(\"snap.drag.move.\" + el.id, onmove);\n            onend && eve.on(\"snap.drag.end.\" + el.id, onend);\n            eve(\"snap.drag.start.\" + el.id, start_scope || move_scope || el, x, y, e);\n        }\n        function init(e, x, y) {\n            eve(\"snap.draginit.\" + el.id, el, e, x, y);\n        }\n        eve.on(\"snap.draginit.\" + el.id, start);\n        el._drag = {};\n        draggable.push({el: el, start: start, init: init});\n        el.mousedown(init);\n        return el;\n    };\n    /*\n     * Element.onDragOver\n     [ method ]\n     **\n     * Shortcut to assign event handler for `drag.over.<id>` event, where `id` is the element's `id` (see @Element.id)\n     - f (function) handler for event, first argument would be the element you are dragging over\n    \\*/\n    // elproto.onDragOver = function (f) {\n    //     f ? eve.on(\"snap.drag.over.\" + this.id, f) : eve.unbind(\"snap.drag.over.\" + this.id);\n    // };\n    /*\\\n     * Element.undrag\n     [ method ]\n     **\n     * Removes all drag event handlers from the given element\n    \\*/\n    elproto.undrag = function () {\n        var i = draggable.length;\n        while (i--) if (draggable[i].el == this) {\n            this.unmousedown(draggable[i].init);\n            draggable.splice(i, 1);\n            eve.unbind(\"snap.drag.*.\" + this.id);\n            eve.unbind(\"snap.draginit.\" + this.id);\n        }\n        !draggable.length && Snap.unmousemove(dragMove).unmouseup(dragUp);\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        pproto = Paper.prototype,\n        rgurl = /^\\s*url\\((.+)\\)/,\n        Str = String,\n        $ = Snap._.$;\n    Snap.filter = {};\n    /*\\\n     * Paper.filter\n     [ method ]\n     **\n     * Creates a `<filter>` element\n     **\n     - filstr (string) SVG fragment of filter provided as a string\n     = (object) @Element\n     * Note: It is recommended to use filters embedded into the page inside an empty SVG element.\n     > Usage\n     | var f = paper.filter('<feGaussianBlur stdDeviation=\"2\"/>'),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    pproto.filter = function (filstr) {\n        var paper = this;\n        if (paper.type != \"svg\") {\n            paper = paper.paper;\n        }\n        var f = Snap.parse(Str(filstr)),\n            id = Snap._.id(),\n            width = paper.node.offsetWidth,\n            height = paper.node.offsetHeight,\n            filter = $(\"filter\");\n        $(filter, {\n            id: id,\n            filterUnits: \"userSpaceOnUse\"\n        });\n        filter.appendChild(f.node);\n        paper.defs.appendChild(filter);\n        return new Element(filter);\n    };\n\n    eve.on(\"snap.util.getattr.filter\", function () {\n        eve.stop();\n        var p = $(this.node, \"filter\");\n        if (p) {\n            var match = Str(p).match(rgurl);\n            return match && Snap.select(match[1]);\n        }\n    });\n    eve.on(\"snap.util.attr.filter\", function (value) {\n        if (value instanceof Element && value.type == \"filter\") {\n            eve.stop();\n            var id = value.node.id;\n            if (!id) {\n                $(value.node, {id: value.id});\n                id = value.id;\n            }\n            $(this.node, {\n                filter: Snap.url(id)\n            });\n        }\n        if (!value || value == \"none\") {\n            eve.stop();\n            this.node.removeAttribute(\"filter\");\n        }\n    });\n    /*\\\n     * Snap.filter.blur\n     [ method ]\n     **\n     * Returns an SVG markup string for the blur filter\n     **\n     - x (number) amount of horizontal blur, in pixels\n     - y (number) #optional amount of vertical blur, in pixels\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.blur(5, 10)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.blur = function (x, y) {\n        if (x == null) {\n            x = 2;\n        }\n        var def = y == null ? x : [x, y];\n        return Snap.format('\\<feGaussianBlur stdDeviation=\"{def}\"/>', {\n            def: def\n        });\n    };\n    Snap.filter.blur.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.shadow\n     [ method ]\n     **\n     * Returns an SVG markup string for the shadow filter\n     **\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - blur (number) #optional amount of blur\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * which makes blur default to `4`. Or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - opacity (number) #optional `0..1` opacity of the shadow\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.shadow(0, 2, 3)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.shadow = function (dx, dy, blur, color, opacity) {\n        if (typeof blur == \"string\") {\n            color = blur;\n            opacity = color;\n            blur = 4;\n        }\n        if (typeof color != \"string\") {\n            opacity = color;\n            color = \"#000\";\n        }\n        color = color || \"#000\";\n        if (blur == null) {\n            blur = 4;\n        }\n        if (opacity == null) {\n            opacity = 1;\n        }\n        if (dx == null) {\n            dx = 0;\n            dy = 2;\n        }\n        if (dy == null) {\n            dy = dx;\n        }\n        color = Snap.color(color);\n        return Snap.format('<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"{blur}\"/><feOffset dx=\"{dx}\" dy=\"{dy}\" result=\"offsetblur\"/><feFlood flood-color=\"{color}\"/><feComposite in2=\"offsetblur\" operator=\"in\"/><feComponentTransfer><feFuncA type=\"linear\" slope=\"{opacity}\"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in=\"SourceGraphic\"/></feMerge>', {\n            color: color,\n            dx: dx,\n            dy: dy,\n            blur: blur,\n            opacity: opacity\n        });\n    };\n    Snap.filter.shadow.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.grayscale\n     [ method ]\n     **\n     * Returns an SVG markup string for the grayscale filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.grayscale = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0\"/>', {\n            a: 0.2126 + 0.7874 * (1 - amount),\n            b: 0.7152 - 0.7152 * (1 - amount),\n            c: 0.0722 - 0.0722 * (1 - amount),\n            d: 0.2126 - 0.2126 * (1 - amount),\n            e: 0.7152 + 0.2848 * (1 - amount),\n            f: 0.0722 - 0.0722 * (1 - amount),\n            g: 0.2126 - 0.2126 * (1 - amount),\n            h: 0.0722 + 0.9278 * (1 - amount)\n        });\n    };\n    Snap.filter.grayscale.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.sepia\n     [ method ]\n     **\n     * Returns an SVG markup string for the sepia filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.sepia = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0\"/>', {\n            a: 0.393 + 0.607 * (1 - amount),\n            b: 0.769 - 0.769 * (1 - amount),\n            c: 0.189 - 0.189 * (1 - amount),\n            d: 0.349 - 0.349 * (1 - amount),\n            e: 0.686 + 0.314 * (1 - amount),\n            f: 0.168 - 0.168 * (1 - amount),\n            g: 0.272 - 0.272 * (1 - amount),\n            h: 0.534 - 0.534 * (1 - amount),\n            i: 0.131 + 0.869 * (1 - amount)\n        });\n    };\n    Snap.filter.sepia.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.saturate\n     [ method ]\n     **\n     * Returns an SVG markup string for the saturate filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.saturate = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"saturate\" values=\"{amount}\"/>', {\n            amount: 1 - amount\n        });\n    };\n    Snap.filter.saturate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.hueRotate\n     [ method ]\n     **\n     * Returns an SVG markup string for the hue-rotate filter\n     **\n     - angle (number) angle of rotation\n     = (string) filter representation\n    \\*/\n    Snap.filter.hueRotate = function (angle) {\n        angle = angle || 0;\n        return Snap.format('<feColorMatrix type=\"hueRotate\" values=\"{angle}\"/>', {\n            angle: angle\n        });\n    };\n    Snap.filter.hueRotate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.invert\n     [ method ]\n     **\n     * Returns an SVG markup string for the invert filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.invert = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n//        <feColorMatrix type=\"matrix\" values=\"-1 0 0 0 1  0 -1 0 0 1  0 0 -1 0 1  0 0 0 1 0\" color-interpolation-filters=\"sRGB\"/>\n        return Snap.format('<feComponentTransfer><feFuncR type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncG type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncB type=\"table\" tableValues=\"{amount} {amount2}\"/></feComponentTransfer>', {\n            amount: amount,\n            amount2: 1 - amount\n        });\n    };\n    Snap.filter.invert.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.brightness\n     [ method ]\n     **\n     * Returns an SVG markup string for the brightness filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.brightness = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\"/><feFuncG type=\"linear\" slope=\"{amount}\"/><feFuncB type=\"linear\" slope=\"{amount}\"/></feComponentTransfer>', {\n            amount: amount\n        });\n    };\n    Snap.filter.brightness.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.contrast\n     [ method ]\n     **\n     * Returns an SVG markup string for the contrast filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.contrast = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncG type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncB type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/></feComponentTransfer>', {\n            amount: amount,\n            amount2: .5 - amount / 2\n        });\n    };\n    Snap.filter.contrast.toString = function () {\n        return this();\n    };\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var box = Snap._.box,\n        is = Snap.is,\n        firstLetter = /^[^a-z]*([tbmlrc])/i,\n        toString = function () {\n            return \"T\" + this.dx + \",\" + this.dy;\n        };\n    /*\\\n     * Element.getAlign\n     [ method ]\n     **\n     * Returns shift needed to align the element relatively to given element.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object|string) Object in format `{dx: , dy: }` also has a string representation as a transformation string\n     > Usage\n     | el.transform(el.getAlign(el2, \"top\"));\n     * or\n     | var dy = el.getAlign(el2, \"top\").dy;\n    \\*/\n    Element.prototype.getAlign = function (el, way) {\n        if (way == null && is(el, \"string\")) {\n            way = el;\n            el = null;\n        }\n        el = el || this.paper;\n        var bx = el.getBBox ? el.getBBox() : box(el),\n            bb = this.getBBox(),\n            out = {};\n        way = way && way.match(firstLetter);\n        way = way ? way[1].toLowerCase() : \"c\";\n        switch (way) {\n            case \"t\":\n                out.dx = 0;\n                out.dy = bx.y - bb.y;\n            break;\n            case \"b\":\n                out.dx = 0;\n                out.dy = bx.y2 - bb.y2;\n            break;\n            case \"m\":\n                out.dx = 0;\n                out.dy = bx.cy - bb.cy;\n            break;\n            case \"l\":\n                out.dx = bx.x - bb.x;\n                out.dy = 0;\n            break;\n            case \"r\":\n                out.dx = bx.x2 - bb.x2;\n                out.dy = 0;\n            break;\n            default:\n                out.dx = bx.cx - bb.cx;\n                out.dy = 0;\n            break;\n        }\n        out.toString = toString;\n        return out;\n    };\n    /*\\\n     * Element.align\n     [ method ]\n     **\n     * Aligns the element relatively to given one via transformation.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object) this element\n     > Usage\n     | el.align(el2, \"top\");\n     * or\n     | el.align(\"middle\");\n    \\*/\n    Element.prototype.align = function (el, way) {\n        return this.transform(\"...\" + this.getAlign(el, way));\n    };\n});\n\nmodule.exports = Snap\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/snapsvg-cjs/dist/snap.svg-cjs.js\n// module id = 28\n// module chunks = 0"],"sourceRoot":""}